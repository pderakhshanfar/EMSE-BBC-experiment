/*
 * This file was automatically generated by EvoSuite
 * Thu Jul 29 22:43:30 GMT 2021
 */

package org.apache.commons.compress.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.nio.ByteOrder;
import java.util.Enumeration;
import org.apache.commons.compress.utils.BitInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BitInputStream_ESTest extends BitInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      ByteOrder byteOrder1 = ByteOrder.BIG_ENDIAN;
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte) (-3);
      byteArray0[5] = (byte)35;
      byteArray0[6] = (byte)126;
      byteArray0[7] = (byte) (-37);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      BitInputStream bitInputStream0 = new BitInputStream(byteArrayInputStream0, byteOrder0);
      ByteOrder byteOrder2 = ByteOrder.LITTLE_ENDIAN;
      BitInputStream bitInputStream1 = new BitInputStream(byteArrayInputStream0, byteOrder2);
      bitInputStream1.close();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      bitInputStream0.readBits(63);
      bitInputStream0.clearBitCache();
      // Undeclared exception!
      try { 
        bitInputStream1.readBits((byte)99);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // count must not be negative or greater than 63
         //
         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      ByteOrder.nativeOrder();
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)99;
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte)35;
      byteArray0[4] = (byte)8;
      byteArray0[5] = (byte) (-37);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1952), 434);
      ByteOrder byteOrder1 = ByteOrder.LITTLE_ENDIAN;
      BitInputStream bitInputStream0 = new BitInputStream(byteArrayInputStream0, byteOrder1);
      bitInputStream0.clearBitCache();
      ByteOrder.nativeOrder();
      BitInputStream bitInputStream1 = new BitInputStream(byteArrayInputStream0, byteOrder0);
      bitInputStream0.close();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      bitInputStream0.close();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BitInputStream bitInputStream2 = new BitInputStream(byteArrayInputStream0, byteOrder1);
      // Undeclared exception!
      try { 
        bitInputStream2.readBits((byte)24);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      ByteOrder byteOrder1 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder1);
      assertEquals("BIG_ENDIAN", byteOrder1.toString());
      assertNotSame(byteOrder1, byteOrder0);
      assertFalse(byteOrder1.equals((Object)byteOrder0));
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte) (-37);
      byteArray0[3] = (byte) (-19);
      byteArray0[4] = (byte) (-37);
      byteArray0[5] = (byte)24;
      byteArray0[6] = (byte)64;
      byteArray0[7] = (byte) (-19);
      byteArray0[8] = (byte) (-37);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(9, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)24, (byte)24, (byte) (-37), (byte) (-19), (byte) (-37), (byte)24, (byte)64, (byte) (-19), (byte) (-37)}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      assertNotNull(sequenceInputStream0);
      assertEquals(9, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte)24, (byte)24, (byte) (-37), (byte) (-19), (byte) (-37), (byte)24, (byte)64, (byte) (-19), (byte) (-37)}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, byteArrayInputStream0);
      assertNotNull(sequenceInputStream1);
      assertEquals(9, byteArrayInputStream0.available());
      assertFalse(sequenceInputStream1.equals((Object)sequenceInputStream0));
      assertArrayEquals(new byte[] {(byte)24, (byte)24, (byte) (-37), (byte) (-19), (byte) (-37), (byte)24, (byte)64, (byte) (-19), (byte) (-37)}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      assertNotNull(dataInputStream0);
      assertEquals(9, byteArrayInputStream0.available());
      assertFalse(sequenceInputStream0.equals((Object)sequenceInputStream1));
      assertArrayEquals(new byte[] {(byte)24, (byte)24, (byte) (-37), (byte) (-19), (byte) (-37), (byte)24, (byte)64, (byte) (-19), (byte) (-37)}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream1, (byte)24);
      assertNotNull(pushbackInputStream0);
      assertEquals(9, byteArrayInputStream0.available());
      assertFalse(sequenceInputStream0.equals((Object)sequenceInputStream1));
      assertFalse(sequenceInputStream1.equals((Object)sequenceInputStream0));
      assertArrayEquals(new byte[] {(byte)24, (byte)24, (byte) (-37), (byte) (-19), (byte) (-37), (byte)24, (byte)64, (byte) (-19), (byte) (-37)}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pushbackInputStream0);
      assertNotNull(pushbackInputStream1);
      assertEquals(9, byteArrayInputStream0.available());
      assertFalse(pushbackInputStream1.equals((Object)pushbackInputStream0));
      assertFalse(sequenceInputStream0.equals((Object)sequenceInputStream1));
      assertFalse(sequenceInputStream1.equals((Object)sequenceInputStream0));
      assertArrayEquals(new byte[] {(byte)24, (byte)24, (byte) (-37), (byte) (-19), (byte) (-37), (byte)24, (byte)64, (byte) (-19), (byte) (-37)}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      BitInputStream bitInputStream0 = new BitInputStream(sequenceInputStream0, byteOrder0);
      assertNotNull(bitInputStream0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(9, byteArrayInputStream0.available());
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      assertFalse(sequenceInputStream0.equals((Object)sequenceInputStream1));
      assertArrayEquals(new byte[] {(byte)24, (byte)24, (byte) (-37), (byte) (-19), (byte) (-37), (byte)24, (byte)64, (byte) (-19), (byte) (-37)}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      bitInputStream0.clearBitCache();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(9, byteArrayInputStream0.available());
      assertNotSame(byteOrder0, byteOrder1);
      assertNotSame(sequenceInputStream0, sequenceInputStream1);
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      assertFalse(sequenceInputStream0.equals((Object)sequenceInputStream1));
      assertArrayEquals(new byte[] {(byte)24, (byte)24, (byte) (-37), (byte) (-19), (byte) (-37), (byte)24, (byte)64, (byte) (-19), (byte) (-37)}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      BitInputStream bitInputStream1 = new BitInputStream(sequenceInputStream0, byteOrder0);
      assertNotNull(bitInputStream1);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(9, byteArrayInputStream0.available());
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      assertFalse(bitInputStream1.equals((Object)bitInputStream0));
      assertFalse(sequenceInputStream0.equals((Object)sequenceInputStream1));
      assertArrayEquals(new byte[] {(byte)24, (byte)24, (byte) (-37), (byte) (-19), (byte) (-37), (byte)24, (byte)64, (byte) (-19), (byte) (-37)}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      BitInputStream bitInputStream2 = new BitInputStream(pushbackInputStream1, byteOrder1);
      assertNotNull(bitInputStream2);
      assertEquals("BIG_ENDIAN", byteOrder1.toString());
      assertEquals(9, byteArrayInputStream0.available());
      assertFalse(pushbackInputStream0.equals((Object)pushbackInputStream1));
      assertFalse(pushbackInputStream1.equals((Object)pushbackInputStream0));
      assertFalse(byteOrder1.equals((Object)byteOrder0));
      assertFalse(bitInputStream2.equals((Object)bitInputStream1));
      assertFalse(bitInputStream2.equals((Object)bitInputStream0));
      assertFalse(sequenceInputStream0.equals((Object)sequenceInputStream1));
      assertFalse(sequenceInputStream1.equals((Object)sequenceInputStream0));
      assertArrayEquals(new byte[] {(byte)24, (byte)24, (byte) (-37), (byte) (-19), (byte) (-37), (byte)24, (byte)64, (byte) (-19), (byte) (-37)}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      int int0 = 8;
      long long0 = bitInputStream1.readBits(8);
      assertEquals(24L, long0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(8, byteArrayInputStream0.available());
      assertNotSame(byteOrder0, byteOrder1);
      assertNotSame(bitInputStream1, bitInputStream2);
      assertNotSame(bitInputStream1, bitInputStream0);
      assertNotSame(sequenceInputStream0, sequenceInputStream1);
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      assertFalse(bitInputStream1.equals((Object)bitInputStream2));
      assertFalse(bitInputStream1.equals((Object)bitInputStream0));
      assertFalse(sequenceInputStream0.equals((Object)sequenceInputStream1));
      assertArrayEquals(new byte[] {(byte)24, (byte)24, (byte) (-37), (byte) (-19), (byte) (-37), (byte)24, (byte)64, (byte) (-19), (byte) (-37)}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      BitInputStream bitInputStream3 = new BitInputStream(pushbackInputStream1, byteOrder0);
      assertNotNull(bitInputStream3);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(8, byteArrayInputStream0.available());
      assertFalse(pushbackInputStream0.equals((Object)pushbackInputStream1));
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      assertFalse(pushbackInputStream1.equals((Object)pushbackInputStream0));
      assertFalse(bitInputStream3.equals((Object)bitInputStream1));
      assertFalse(bitInputStream3.equals((Object)bitInputStream0));
      assertFalse(bitInputStream3.equals((Object)bitInputStream2));
      assertFalse(sequenceInputStream0.equals((Object)sequenceInputStream1));
      assertFalse(sequenceInputStream1.equals((Object)sequenceInputStream0));
      assertArrayEquals(new byte[] {(byte)24, (byte)24, (byte) (-37), (byte) (-19), (byte) (-37), (byte)24, (byte)64, (byte) (-19), (byte) (-37)}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      long long1 = bitInputStream3.readBits(1);
      assertEquals(0L, long1);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(7, byteArrayInputStream0.available());
      assertNotSame(pushbackInputStream0, pushbackInputStream1);
      assertNotSame(byteOrder0, byteOrder1);
      assertNotSame(pushbackInputStream1, pushbackInputStream0);
      assertNotSame(bitInputStream3, bitInputStream1);
      assertNotSame(bitInputStream3, bitInputStream0);
      assertNotSame(bitInputStream3, bitInputStream2);
      assertNotSame(sequenceInputStream0, sequenceInputStream1);
      assertNotSame(sequenceInputStream1, sequenceInputStream0);
      assertFalse(pushbackInputStream0.equals((Object)pushbackInputStream1));
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      assertFalse(pushbackInputStream1.equals((Object)pushbackInputStream0));
      assertFalse(bitInputStream3.equals((Object)bitInputStream1));
      assertFalse(bitInputStream3.equals((Object)bitInputStream0));
      assertFalse(bitInputStream3.equals((Object)bitInputStream2));
      assertFalse(long1 == long0);
      assertFalse(sequenceInputStream0.equals((Object)sequenceInputStream1));
      assertFalse(sequenceInputStream1.equals((Object)sequenceInputStream0));
      assertArrayEquals(new byte[] {(byte)24, (byte)24, (byte) (-37), (byte) (-19), (byte) (-37), (byte)24, (byte)64, (byte) (-19), (byte) (-37)}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      // Undeclared exception!
      try { 
        bitInputStream0.readBits((-875));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // count must not be negative or greater than 63
         //
         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      ByteOrder byteOrder1 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder1);
      assertEquals("BIG_ENDIAN", byteOrder1.toString());
      assertNotSame(byteOrder1, byteOrder0);
      assertFalse(byteOrder1.equals((Object)byteOrder0));
      
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-19);
      byteArray0[0] = (byte) (-19);
      byteArray0[2] = (byte)24;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-19), (byte)0, (byte)24}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      assertNotNull(sequenceInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-19), (byte)0, (byte)24}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      assertNotNull(pushbackInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-19), (byte)0, (byte)24}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      BitInputStream bitInputStream0 = new BitInputStream(pushbackInputStream0, byteOrder0);
      assertNotNull(bitInputStream0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(3, byteArrayInputStream0.available());
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      assertArrayEquals(new byte[] {(byte) (-19), (byte)0, (byte)24}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      bitInputStream0.clearBitCache();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(3, byteArrayInputStream0.available());
      assertNotSame(byteOrder0, byteOrder1);
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      assertArrayEquals(new byte[] {(byte) (-19), (byte)0, (byte)24}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      BitInputStream bitInputStream1 = new BitInputStream(byteArrayInputStream0, byteOrder1);
      assertNotNull(bitInputStream1);
      assertEquals("BIG_ENDIAN", byteOrder1.toString());
      assertEquals(3, byteArrayInputStream0.available());
      assertFalse(byteOrder1.equals((Object)byteOrder0));
      assertFalse(bitInputStream1.equals((Object)bitInputStream0));
      assertArrayEquals(new byte[] {(byte) (-19), (byte)0, (byte)24}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      long long0 = bitInputStream1.readBits((byte)24);
      assertEquals(15532056L, long0);
      assertEquals("BIG_ENDIAN", byteOrder1.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertNotSame(byteOrder1, byteOrder0);
      assertNotSame(bitInputStream1, bitInputStream0);
      assertFalse(byteOrder1.equals((Object)byteOrder0));
      assertFalse(bitInputStream1.equals((Object)bitInputStream0));
      assertArrayEquals(new byte[] {(byte) (-19), (byte)0, (byte)24}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      long long1 = bitInputStream0.readBits(0);
      assertEquals(0L, long1);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertNotSame(byteOrder0, byteOrder1);
      assertNotSame(bitInputStream0, bitInputStream1);
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      assertFalse(bitInputStream0.equals((Object)bitInputStream1));
      assertFalse(long1 == long0);
      assertArrayEquals(new byte[] {(byte) (-19), (byte)0, (byte)24}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      bitInputStream0.clearBitCache();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertNotSame(byteOrder0, byteOrder1);
      assertNotSame(bitInputStream0, bitInputStream1);
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      assertFalse(bitInputStream0.equals((Object)bitInputStream1));
      assertArrayEquals(new byte[] {(byte) (-19), (byte)0, (byte)24}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      // Undeclared exception!
      try { 
        bitInputStream0.readBits((-2823));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // count must not be negative or greater than 63
         //
         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      ByteOrder byteOrder1 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder1);
      assertEquals("BIG_ENDIAN", byteOrder1.toString());
      assertNotSame(byteOrder1, byteOrder0);
      assertFalse(byteOrder1.equals((Object)byteOrder0));
      
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte) (-19);
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)24;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-19), (byte) (-37), (byte)24}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      assertNotNull(sequenceInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-19), (byte) (-37), (byte)24}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      assertNotNull(pushbackInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-19), (byte) (-37), (byte)24}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      BitInputStream bitInputStream0 = new BitInputStream(pushbackInputStream0, byteOrder0);
      assertNotNull(bitInputStream0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(3, byteArrayInputStream0.available());
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      assertArrayEquals(new byte[] {(byte) (-19), (byte) (-37), (byte)24}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      bitInputStream0.clearBitCache();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(3, byteArrayInputStream0.available());
      assertNotSame(byteOrder0, byteOrder1);
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      assertArrayEquals(new byte[] {(byte) (-19), (byte) (-37), (byte)24}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      BitInputStream bitInputStream1 = new BitInputStream(sequenceInputStream0, byteOrder0);
      assertNotNull(bitInputStream1);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(3, byteArrayInputStream0.available());
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      assertFalse(bitInputStream1.equals((Object)bitInputStream0));
      assertArrayEquals(new byte[] {(byte) (-19), (byte) (-37), (byte)24}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      long long0 = bitInputStream1.readBits((byte)24);
      assertEquals(1629165L, long0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertNotSame(byteOrder0, byteOrder1);
      assertNotSame(bitInputStream1, bitInputStream0);
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      assertFalse(bitInputStream1.equals((Object)bitInputStream0));
      assertArrayEquals(new byte[] {(byte) (-19), (byte) (-37), (byte)24}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      // Undeclared exception!
      try { 
        bitInputStream1.readBits((byte) (-37));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // count must not be negative or greater than 63
         //
         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      int int0 = 63;
      BitInputStream bitInputStream0 = new BitInputStream((InputStream) null, byteOrder0);
      assertNotNull(bitInputStream0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      // Undeclared exception!
      try { 
        bitInputStream0.readBits(63);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)63;
      pipedOutputStream0.write(byteArray0, 0, 0);
      assertArrayEquals(new byte[] {(byte)0, (byte)63}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      assertNotNull(bufferedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      BitInputStream bitInputStream0 = new BitInputStream(bufferedInputStream0, byteOrder0);
      assertNotNull(bitInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      long long0 = bitInputStream0.readBits(0);
      assertEquals(0L, long0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      ByteOrder byteOrder1 = ByteOrder.LITTLE_ENDIAN;
      assertNotNull(byteOrder1);
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertNotSame(byteOrder1, byteOrder0);
      assertFalse(byteOrder1.equals((Object)byteOrder0));
      
      BitInputStream bitInputStream1 = new BitInputStream(bufferedInputStream0, byteOrder0);
      assertNotNull(bitInputStream1);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      assertFalse(bitInputStream1.equals((Object)bitInputStream0));
      
      bitInputStream1.close();
      assertEquals(0, pipedInputStream0.available());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotSame(byteOrder0, byteOrder1);
      assertNotSame(bitInputStream1, bitInputStream0);
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      assertFalse(bitInputStream1.equals((Object)bitInputStream0));
      
      BitInputStream bitInputStream2 = new BitInputStream(pipedInputStream0, byteOrder0);
      assertNotNull(bitInputStream2);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      assertFalse(bitInputStream2.equals((Object)bitInputStream1));
      assertFalse(bitInputStream2.equals((Object)bitInputStream0));
      
      bitInputStream2.close();
      assertEquals(0, pipedInputStream0.available());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotSame(byteOrder0, byteOrder1);
      assertNotSame(bitInputStream2, bitInputStream1);
      assertNotSame(bitInputStream2, bitInputStream0);
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      assertFalse(bitInputStream2.equals((Object)bitInputStream1));
      assertFalse(bitInputStream2.equals((Object)bitInputStream0));
      
      bitInputStream2.clearBitCache();
      assertEquals(0, pipedInputStream0.available());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotSame(byteOrder0, byteOrder1);
      assertNotSame(bitInputStream2, bitInputStream1);
      assertNotSame(bitInputStream2, bitInputStream0);
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      assertFalse(bitInputStream2.equals((Object)bitInputStream1));
      assertFalse(bitInputStream2.equals((Object)bitInputStream0));
      
      BitInputStream bitInputStream3 = new BitInputStream(bufferedInputStream0, byteOrder0);
      assertNotNull(bitInputStream3);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertFalse(bitInputStream3.equals((Object)bitInputStream1));
      assertFalse(bitInputStream3.equals((Object)bitInputStream2));
      assertFalse(bitInputStream3.equals((Object)bitInputStream0));
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      
      // Undeclared exception!
      try { 
        bitInputStream3.readBits((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // count must not be negative or greater than 63
         //
         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "vDu^j5_#o");
      assertFalse(boolean0);
      
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder1);
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertSame(byteOrder1, byteOrder0);
      
      ByteOrder byteOrder2 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder2);
      assertEquals("LITTLE_ENDIAN", byteOrder2.toString());
      assertSame(byteOrder2, byteOrder0);
      assertSame(byteOrder2, byteOrder1);
      
      BitInputStream bitInputStream0 = new BitInputStream((InputStream) null, byteOrder0);
      assertNotNull(bitInputStream0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      // Undeclared exception!
      try { 
        bitInputStream0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)63;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)63, (byte)1);
      assertNotNull(byteArrayInputStream0);
      assertEquals((-60), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-1), (byte)1, (byte)63}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      assertNotNull(sequenceInputStream0);
      assertEquals((-60), byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-1), (byte)1, (byte)63}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder1);
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertNotSame(byteOrder1, byteOrder0);
      assertFalse(byteOrder1.equals((Object)byteOrder0));
      
      BitInputStream bitInputStream0 = new BitInputStream(sequenceInputStream0, byteOrder1);
      assertNotNull(bitInputStream0);
      assertEquals((-60), byteArrayInputStream0.available());
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertFalse(byteOrder1.equals((Object)byteOrder0));
      assertArrayEquals(new byte[] {(byte) (-1), (byte)1, (byte)63}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      bitInputStream0.clearBitCache();
      assertEquals((-60), byteArrayInputStream0.available());
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertNotSame(byteOrder1, byteOrder0);
      assertFalse(byteOrder1.equals((Object)byteOrder0));
      assertArrayEquals(new byte[] {(byte) (-1), (byte)1, (byte)63}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      BitInputStream bitInputStream1 = new BitInputStream(sequenceInputStream0, byteOrder0);
      assertNotNull(bitInputStream1);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals((-60), byteArrayInputStream0.available());
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      assertFalse(bitInputStream1.equals((Object)bitInputStream0));
      assertArrayEquals(new byte[] {(byte) (-1), (byte)1, (byte)63}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      long long0 = bitInputStream0.readBits((byte)1);
      assertEquals((-1L), long0);
      assertEquals((-60), byteArrayInputStream0.available());
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertNotSame(byteOrder1, byteOrder0);
      assertNotSame(bitInputStream0, bitInputStream1);
      assertFalse(byteOrder1.equals((Object)byteOrder0));
      assertFalse(bitInputStream0.equals((Object)bitInputStream1));
      assertArrayEquals(new byte[] {(byte) (-1), (byte)1, (byte)63}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      bitInputStream1.clearBitCache();
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals((-60), byteArrayInputStream0.available());
      assertNotSame(byteOrder0, byteOrder1);
      assertNotSame(bitInputStream1, bitInputStream0);
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      assertFalse(bitInputStream1.equals((Object)bitInputStream0));
      assertArrayEquals(new byte[] {(byte) (-1), (byte)1, (byte)63}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      long long1 = bitInputStream0.readBits(0);
      assertEquals(0L, long1);
      assertEquals((-60), byteArrayInputStream0.available());
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertNotSame(byteOrder1, byteOrder0);
      assertNotSame(bitInputStream0, bitInputStream1);
      assertFalse(byteOrder1.equals((Object)byteOrder0));
      assertFalse(bitInputStream0.equals((Object)bitInputStream1));
      assertFalse(long1 == long0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte)1, (byte)63}, byteArray0);
      assertEquals(3, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertNotNull(fileDescriptor0);
      assertFalse(fileDescriptor0.valid());
      
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertNotNull(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      ByteOrder byteOrder1 = ByteOrder.BIG_ENDIAN;
      assertNotNull(byteOrder1);
      assertEquals("BIG_ENDIAN", byteOrder1.toString());
      assertNotSame(byteOrder1, byteOrder0);
      assertFalse(byteOrder1.equals((Object)byteOrder0));
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-19);
      byteArray0[1] = (byte) (-37);
      byteArray0[2] = (byte)24;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertNotNull(byteArrayInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-19), (byte) (-37), (byte)24}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream0);
      assertNotNull(sequenceInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-19), (byte) (-37), (byte)24}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      assertNotNull(pushbackInputStream0);
      assertEquals(3, byteArrayInputStream0.available());
      assertArrayEquals(new byte[] {(byte) (-19), (byte) (-37), (byte)24}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      BitInputStream bitInputStream0 = new BitInputStream(pushbackInputStream0, byteOrder0);
      assertNotNull(bitInputStream0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(3, byteArrayInputStream0.available());
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      assertArrayEquals(new byte[] {(byte) (-19), (byte) (-37), (byte)24}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      bitInputStream0.clearBitCache();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(3, byteArrayInputStream0.available());
      assertNotSame(byteOrder0, byteOrder1);
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      assertArrayEquals(new byte[] {(byte) (-19), (byte) (-37), (byte)24}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      BitInputStream bitInputStream1 = new BitInputStream(byteArrayInputStream0, byteOrder1);
      assertNotNull(bitInputStream1);
      assertEquals("BIG_ENDIAN", byteOrder1.toString());
      assertEquals(3, byteArrayInputStream0.available());
      assertFalse(byteOrder1.equals((Object)byteOrder0));
      assertFalse(bitInputStream1.equals((Object)bitInputStream0));
      assertArrayEquals(new byte[] {(byte) (-19), (byte) (-37), (byte)24}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      long long0 = bitInputStream1.readBits((byte)24);
      assertEquals(15588120L, long0);
      assertEquals("BIG_ENDIAN", byteOrder1.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertNotSame(byteOrder1, byteOrder0);
      assertNotSame(bitInputStream1, bitInputStream0);
      assertFalse(byteOrder1.equals((Object)byteOrder0));
      assertFalse(bitInputStream1.equals((Object)bitInputStream0));
      assertArrayEquals(new byte[] {(byte) (-19), (byte) (-37), (byte)24}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      long long1 = bitInputStream0.readBits(0);
      assertEquals(0L, long1);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertNotSame(byteOrder0, byteOrder1);
      assertNotSame(bitInputStream0, bitInputStream1);
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      assertFalse(bitInputStream0.equals((Object)bitInputStream1));
      assertFalse(long1 == long0);
      assertArrayEquals(new byte[] {(byte) (-19), (byte) (-37), (byte)24}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      bitInputStream0.clearBitCache();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, byteArrayInputStream0.available());
      assertNotSame(byteOrder0, byteOrder1);
      assertNotSame(bitInputStream0, bitInputStream1);
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      assertFalse(bitInputStream0.equals((Object)bitInputStream1));
      assertArrayEquals(new byte[] {(byte) (-19), (byte) (-37), (byte)24}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      // Undeclared exception!
      try { 
        bitInputStream0.readBits((-2823));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // count must not be negative or greater than 63
         //
         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.mark(1750);
      sequenceInputStream0.markSupported();
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder.nativeOrder();
      byte byte0 = (byte)0;
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      BitInputStream bitInputStream0 = new BitInputStream(sequenceInputStream0, byteOrder0);
      bitInputStream0.readBits(1);
      ByteOrder.nativeOrder();
      bitInputStream0.close();
      bitInputStream0.close();
      bitInputStream0.clearBitCache();
      BitInputStream bitInputStream1 = new BitInputStream(sequenceInputStream0, byteOrder1);
      // Undeclared exception!
      try { 
        bitInputStream1.readBits((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // count must not be negative or greater than 63
         //
         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-100);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)57;
      byteArray0[3] = (byte) (-59);
      byteArray0[4] = (byte) (-24);
      byteArray0[5] = (byte)5;
      byteArray0[6] = (byte) (-94);
      byteArray0[7] = (byte)1;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      BitInputStream bitInputStream0 = new BitInputStream(byteArrayInputStream0, byteOrder0);
      // Undeclared exception!
      try { 
        bitInputStream0.readBits((byte) (-59));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // count must not be negative or greater than 63
         //
         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)63;
      pipedOutputStream0.write(byteArray0, 0, 0);
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder.nativeOrder();
      BitInputStream bitInputStream0 = new BitInputStream(pipedInputStream0, byteOrder0);
      bitInputStream0.close();
      bitInputStream0.clearBitCache();
      bitInputStream0.clearBitCache();
      bitInputStream0.readBits((byte)0);
      try { 
        bitInputStream0.readBits((byte)63);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe closed
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      pipedInputStream0.markSupported();
      BitInputStream bitInputStream0 = new BitInputStream(pipedInputStream0, byteOrder0);
      bitInputStream0.close();
      bitInputStream0.close();
      bitInputStream0.close();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      BitInputStream bitInputStream0 = new BitInputStream((InputStream) null, byteOrder0);
      ByteOrder.nativeOrder();
      // Undeclared exception!
      try { 
        bitInputStream0.readBits(3730);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // count must not be negative or greater than 63
         //
         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      File file0 = MockFile.createTempFile("T5M", "T5M", (File) null);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      BitInputStream bitInputStream0 = new BitInputStream(mockFileInputStream0, byteOrder0);
      bitInputStream0.clearBitCache();
  }
}
