/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 22:02:21 GMT 2021
 */

package org.apache.commons.compress.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.nio.ByteOrder;
import java.util.Enumeration;
import org.apache.commons.compress.utils.BitInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BitInputStream_ESTest extends BitInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 63);
      assertNotNull(pushbackInputStream0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)30;
      pushbackInputStream0.unread(byteArray0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)66, (byte)0, (byte)30, (byte)30}, byteArray0);
      
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      BitInputStream bitInputStream0 = new BitInputStream(pushbackInputStream0, byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(bitInputStream0);
      
      long long0 = bitInputStream0.readBits(8);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(66L, long0);
      
      long long1 = bitInputStream0.readBits(7);
      assertFalse(long1 == long0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(0L, long1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 63);
      assertNotNull(pushbackInputStream0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)66;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)30;
      byteArray0[3] = (byte)30;
      pushbackInputStream0.unread(byteArray0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)66, (byte)0, (byte)30, (byte)30}, byteArray0);
      
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      BitInputStream bitInputStream0 = new BitInputStream(pushbackInputStream0, byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(bitInputStream0);
      
      long long0 = bitInputStream0.readBits(8);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(66L, long0);
      
      // Undeclared exception!
      try { 
        bitInputStream0.readBits((-1073741823));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // count must not be negative or greater than 63
         //
         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 63);
      assertNotNull(pushbackInputStream0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)66;
      byteArray0[1] = (byte)105;
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte)58;
      byteArray0[6] = (byte)65;
      byteArray0[7] = (byte) (-19);
      byteArray0[8] = (byte)90;
      pushbackInputStream0.unread(byteArray0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-104), (byte)105, (byte)66, (byte)0, (byte)30, (byte)58, (byte)65, (byte) (-19), (byte)90}, byteArray0);
      
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pushbackInputStream0);
      assertFalse(pushbackInputStream1.equals((Object)pushbackInputStream0));
      assertNotNull(pushbackInputStream1);
      
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      BitInputStream bitInputStream0 = new BitInputStream(pushbackInputStream1, byteOrder0);
      assertFalse(pushbackInputStream0.equals((Object)pushbackInputStream1));
      assertFalse(pushbackInputStream1.equals((Object)pushbackInputStream0));
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(bitInputStream0);
      
      long long0 = bitInputStream0.readBits(63);
      assertFalse(pushbackInputStream0.equals((Object)pushbackInputStream1));
      assertFalse(pushbackInputStream1.equals((Object)pushbackInputStream0));
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(7872637524148119960L, long0);
      assertNotSame(pushbackInputStream0, pushbackInputStream1);
      assertNotSame(pushbackInputStream1, pushbackInputStream0);
      
      bitInputStream0.close();
      assertFalse(pushbackInputStream0.equals((Object)pushbackInputStream1));
      assertFalse(pushbackInputStream1.equals((Object)pushbackInputStream0));
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotSame(pushbackInputStream0, pushbackInputStream1);
      assertNotSame(pushbackInputStream1, pushbackInputStream0);
      
      bitInputStream0.close();
      assertFalse(pushbackInputStream0.equals((Object)pushbackInputStream1));
      assertFalse(pushbackInputStream1.equals((Object)pushbackInputStream0));
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotSame(pushbackInputStream0, pushbackInputStream1);
      assertNotSame(pushbackInputStream1, pushbackInputStream0);
      
      bitInputStream0.close();
      assertFalse(pushbackInputStream0.equals((Object)pushbackInputStream1));
      assertFalse(pushbackInputStream1.equals((Object)pushbackInputStream0));
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotSame(pushbackInputStream0, pushbackInputStream1);
      assertNotSame(pushbackInputStream1, pushbackInputStream0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(sequenceInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 63);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pushbackInputStream0);
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)66;
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte) (-104);
      byteArray0[4] = (byte)105;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-104);
      pushbackInputStream0.unread(byteArray0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)66, (byte) (-104), (byte) (-104), (byte)105, (byte) (-1), (byte) (-104)}, byteArray0);
      
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      int int0 = 8;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-104), 8);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)66, (byte) (-104), (byte) (-104), (byte)105, (byte) (-1), (byte) (-104)}, byteArray0);
      
      BitInputStream bitInputStream0 = new BitInputStream(byteArrayInputStream0, byteOrder0);
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(bitInputStream0);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)66, (byte) (-104), (byte) (-104), (byte)105, (byte) (-1), (byte) (-104)}, byteArray0);
      
      BitInputStream bitInputStream1 = new BitInputStream(byteArrayInputStream0, byteOrder0);
      assertFalse(bitInputStream1.equals((Object)bitInputStream0));
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(bitInputStream1);
      assertEquals(7, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)1, (byte)66, (byte) (-104), (byte) (-104), (byte)105, (byte) (-1), (byte) (-104)}, byteArray0);
      
      // Undeclared exception!
      try { 
        bitInputStream1.readBits(63);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -104
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(enumeration0).hasMoreElements();
      doReturn((Object) null).when(enumeration0).nextElement();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 63);
      assertNotNull(pushbackInputStream0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)105;
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte)58;
      byteArray0[6] = (byte)65;
      pushbackInputStream0.unread(byteArray0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-104), (byte)114, (byte)66, (byte)105, (byte)30, (byte)58, (byte)65, (byte)0, (byte)0}, byteArray0);
      
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(sequenceInputStream0);
      assertFalse(pushbackInputStream1.equals((Object)pushbackInputStream0));
      assertNotNull(pushbackInputStream1);
      
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      BitInputStream bitInputStream0 = new BitInputStream(pushbackInputStream0, byteOrder0);
      assertFalse(pushbackInputStream0.equals((Object)pushbackInputStream1));
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(bitInputStream0);
      
      long long0 = bitInputStream0.readBits((byte)58);
      assertFalse(pushbackInputStream0.equals((Object)pushbackInputStream1));
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(18359775775584920L, long0);
      assertNotSame(pushbackInputStream0, pushbackInputStream1);
      
      long long1 = bitInputStream0.readBits(0);
      assertFalse(long1 == long0);
      assertFalse(pushbackInputStream0.equals((Object)pushbackInputStream1));
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0L, long1);
      assertNotSame(pushbackInputStream0, pushbackInputStream1);
      
      // Undeclared exception!
      try { 
        bitInputStream0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 63);
      assertNotNull(pushbackInputStream0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-104);
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte)105;
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte)58;
      byteArray0[6] = (byte)65;
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte)90;
      pushbackInputStream0.unread(byteArray0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-104), (byte)0, (byte) (-104), (byte)105, (byte)30, (byte)58, (byte)65, (byte)1, (byte)90}, byteArray0);
      
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pushbackInputStream0);
      assertFalse(pushbackInputStream1.equals((Object)pushbackInputStream0));
      assertNotNull(pushbackInputStream1);
      
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      BitInputStream bitInputStream0 = new BitInputStream(pushbackInputStream1, byteOrder0);
      assertFalse(pushbackInputStream0.equals((Object)pushbackInputStream1));
      assertFalse(pushbackInputStream1.equals((Object)pushbackInputStream0));
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(bitInputStream0);
      
      long long0 = bitInputStream0.readBits(63);
      assertFalse(pushbackInputStream0.equals((Object)pushbackInputStream1));
      assertFalse(pushbackInputStream1.equals((Object)pushbackInputStream0));
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(90417369819119768L, long0);
      assertNotSame(pushbackInputStream0, pushbackInputStream1);
      assertNotSame(pushbackInputStream1, pushbackInputStream0);
      
      bitInputStream0.close();
      assertFalse(pushbackInputStream0.equals((Object)pushbackInputStream1));
      assertFalse(pushbackInputStream1.equals((Object)pushbackInputStream0));
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotSame(pushbackInputStream0, pushbackInputStream1);
      assertNotSame(pushbackInputStream1, pushbackInputStream0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 63);
      assertNotNull(pushbackInputStream0);
      
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)114;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte)105;
      byteArray0[4] = (byte)30;
      byteArray0[5] = (byte)58;
      byteArray0[6] = (byte)65;
      byteArray0[7] = (byte)1;
      byteArray0[8] = (byte)90;
      pushbackInputStream0.unread(byteArray0);
      assertEquals(9, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-104), (byte)114, (byte)66, (byte)105, (byte)30, (byte)58, (byte)65, (byte)1, (byte)90}, byteArray0);
      
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pushbackInputStream0);
      assertFalse(pushbackInputStream1.equals((Object)pushbackInputStream0));
      assertNotNull(pushbackInputStream1);
      
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      BitInputStream bitInputStream0 = new BitInputStream(pushbackInputStream1, byteOrder0);
      assertFalse(pushbackInputStream0.equals((Object)pushbackInputStream1));
      assertFalse(pushbackInputStream1.equals((Object)pushbackInputStream0));
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(bitInputStream0);
      
      long long0 = bitInputStream0.readBits(63);
      assertFalse(pushbackInputStream0.equals((Object)pushbackInputStream1));
      assertFalse(pushbackInputStream1.equals((Object)pushbackInputStream0));
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(90417369813512856L, long0);
      assertNotSame(pushbackInputStream0, pushbackInputStream1);
      assertNotSame(pushbackInputStream1, pushbackInputStream0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)4;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(8, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-3), (byte)63, (byte)0, (byte)0, (byte)4, (byte)0, (byte)0}, byteArray0);
      
      byteArrayInputStream0.close();
      assertEquals(8, byteArrayInputStream0.available());
      assertEquals(8, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-3), (byte)63, (byte)0, (byte)0, (byte)4, (byte)0, (byte)0}, byteArray0);
      
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BitInputStream bitInputStream0 = new BitInputStream(pipedInputStream0, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bitInputStream0);
      
      try { 
        bitInputStream0.readBits((byte)4);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BitInputStream bitInputStream0 = new BitInputStream((InputStream) null, (ByteOrder) null);
      assertNotNull(bitInputStream0);
      
      // Undeclared exception!
      try { 
        bitInputStream0.readBits(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)38;
      byteArray0[3] = (byte) (-109);
      byteArray0[4] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)0, (byte)0);
      assertEquals(0, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)38, (byte) (-109), (byte) (-1)}, byteArray0);
      
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      boolean boolean0 = byteArrayInputStream0.markSupported();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(5, byteArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)38, (byte) (-109), (byte) (-1)}, byteArray0);
      
      BitInputStream bitInputStream0 = new BitInputStream(byteArrayInputStream0, byteOrder0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(bitInputStream0);
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)38, (byte) (-109), (byte) (-1)}, byteArray0);
      
      byteArrayInputStream0.close();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)38, (byte) (-109), (byte) (-1)}, byteArray0);
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertNotNull(byteOrder1);
      assertSame(byteOrder1, byteOrder0);
      
      long long0 = bitInputStream0.readBits((byte)38);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(5, byteArray0.length);
      assertEquals((-1L), long0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)38, (byte) (-109), (byte) (-1)}, byteArray0);
      assertSame(byteOrder0, byteOrder1);
      
      bitInputStream0.close();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)38, (byte) (-109), (byte) (-1)}, byteArray0);
      assertSame(byteOrder0, byteOrder1);
      
      bitInputStream0.close();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)38, (byte) (-109), (byte) (-1)}, byteArray0);
      assertSame(byteOrder0, byteOrder1);
      
      bitInputStream0.close();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)38, (byte) (-109), (byte) (-1)}, byteArray0);
      assertSame(byteOrder0, byteOrder1);
      
      bitInputStream0.clearBitCache();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)38, (byte) (-109), (byte) (-1)}, byteArray0);
      assertSame(byteOrder0, byteOrder1);
      
      bitInputStream0.close();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)38, (byte) (-109), (byte) (-1)}, byteArray0);
      assertSame(byteOrder0, byteOrder1);
      
      bitInputStream0.close();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)38, (byte) (-109), (byte) (-1)}, byteArray0);
      assertSame(byteOrder0, byteOrder1);
      
      bitInputStream0.clearBitCache();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)38, (byte) (-109), (byte) (-1)}, byteArray0);
      assertSame(byteOrder0, byteOrder1);
      
      bitInputStream0.clearBitCache();
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)38, (byte) (-109), (byte) (-1)}, byteArray0);
      assertSame(byteOrder0, byteOrder1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 0);
      byteArrayInputStream0.mark(63);
      byteArrayInputStream0.read(byteArray0);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      byteArrayInputStream0.read(byteArray0, 0, 0);
      BitInputStream bitInputStream0 = new BitInputStream(byteArrayInputStream0, byteOrder0);
      ByteOrder.nativeOrder();
      bitInputStream0.readBits(0);
      bitInputStream0.readBits(0);
      bitInputStream0.close();
      bitInputStream0.close();
      bitInputStream0.clearBitCache();
      bitInputStream0.close();
      bitInputStream0.clearBitCache();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder.nativeOrder();
      BitInputStream bitInputStream0 = new BitInputStream((InputStream) null, byteOrder0);
      bitInputStream0.clearBitCache();
      bitInputStream0.clearBitCache();
      // Undeclared exception!
      try { 
        bitInputStream0.readBits((-1693));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // count must not be negative or greater than 63
         //
         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 1158);
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      BitInputStream bitInputStream0 = new BitInputStream(pushbackInputStream0, byteOrder0);
      bitInputStream0.close();
      bitInputStream0.clearBitCache();
      // Undeclared exception!
      try { 
        bitInputStream0.readBits((-1197));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // count must not be negative or greater than 63
         //
         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1), 259);
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      ByteOrder.nativeOrder();
      BitInputStream bitInputStream0 = new BitInputStream(byteArrayInputStream0, byteOrder0);
      bitInputStream0.readBits(0);
      ByteOrder.nativeOrder();
      // Undeclared exception!
      try { 
        byteArrayInputStream0.read(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      BitInputStream bitInputStream0 = new BitInputStream((InputStream) null, byteOrder0);
      bitInputStream0.clearBitCache();
      bitInputStream0.clearBitCache();
      bitInputStream0.clearBitCache();
      bitInputStream0.clearBitCache();
      bitInputStream0.clearBitCache();
      // Undeclared exception!
      try { 
        bitInputStream0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)85;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)105;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BitInputStream bitInputStream0 = new BitInputStream(byteArrayInputStream0, (ByteOrder) null);
      bitInputStream0.clearBitCache();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      BitInputStream bitInputStream0 = new BitInputStream(pipedInputStream0, byteOrder0);
      ByteOrder.nativeOrder();
      // Undeclared exception!
      try { 
        bitInputStream0.readBits(742);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // count must not be negative or greater than 63
         //
         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
      }
  }
}
