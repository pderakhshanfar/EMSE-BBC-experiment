/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 22:03:39 GMT 2021
 */

package org.apache.commons.compress.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.nio.ByteOrder;
import java.util.Enumeration;
import org.apache.commons.compress.utils.BitInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BitInputStream_ESTest extends BitInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      int int0 = 15;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-5), 15);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0, (byte)13);
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      BitInputStream bitInputStream0 = new BitInputStream(byteArrayInputStream0, byteOrder0);
      // Undeclared exception!
      try { 
        bitInputStream0.readBits((byte)13);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)13;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder.nativeOrder();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0, (byte)13);
      ByteOrder byteOrder1 = ByteOrder.BIG_ENDIAN;
      BitInputStream bitInputStream0 = new BitInputStream(bufferedInputStream1, byteOrder1);
      bitInputStream0.readBits((byte)13);
      BitInputStream bitInputStream1 = new BitInputStream(bufferedInputStream0, byteOrder1);
      bitInputStream1.readBits((byte)13);
      bitInputStream0.readBits((byte)13);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)13;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0, 2100);
      BitInputStream bitInputStream0 = new BitInputStream(bufferedInputStream1, byteOrder0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.markSupported();
      ByteOrder.nativeOrder();
      sequenceInputStream0.mark((-2854));
      bitInputStream0.readBits((byte)13);
      sequenceInputStream0.mark((-2854));
      ByteOrder byteOrder2 = ByteOrder.nativeOrder();
      BitInputStream bitInputStream1 = new BitInputStream(bufferedInputStream1, byteOrder1);
      BitInputStream bitInputStream2 = new BitInputStream(bufferedInputStream1, byteOrder2);
      bitInputStream2.readBits(1);
      BitInputStream bitInputStream3 = new BitInputStream(bufferedInputStream0, byteOrder0);
      // Undeclared exception!
      try { 
        bitInputStream3.readBits(1467);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // count must not be negative or greater than 63
         //
         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)13;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0, 2100);
      BitInputStream bitInputStream0 = new BitInputStream(bufferedInputStream1, byteOrder0);
      ByteOrder.nativeOrder();
      bufferedInputStream0.markSupported();
      bitInputStream0.readBits((byte)13);
      ByteOrder byteOrder2 = ByteOrder.nativeOrder();
      BitInputStream bitInputStream1 = new BitInputStream(bufferedInputStream1, byteOrder1);
      BitInputStream bitInputStream2 = new BitInputStream(bufferedInputStream1, byteOrder2);
      bitInputStream2.readBits(1);
      // Undeclared exception!
      try { 
        bitInputStream0.readBits(2100);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // count must not be negative or greater than 63
         //
         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      BitInputStream bitInputStream0 = new BitInputStream((InputStream) null, byteOrder0);
      BitInputStream bitInputStream1 = new BitInputStream((InputStream) null, byteOrder0);
      bitInputStream1.readBits(0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      FileSystemHandling.shouldAllThrowIOExceptions();
      BitInputStream bitInputStream0 = new BitInputStream((InputStream) null, byteOrder0);
      // Undeclared exception!
      try { 
        bitInputStream0.readBits(21);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-1);
      int int0 = 58;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 58, (byte) (-87));
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      BitInputStream bitInputStream0 = new BitInputStream(byteArrayInputStream0, byteOrder0);
      ByteOrder.nativeOrder();
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      BitInputStream bitInputStream1 = new BitInputStream(byteArrayInputStream0, byteOrder1);
      bitInputStream1.readBits(21);
      bitInputStream0.clearBitCache();
      bitInputStream0.close();
      BitInputStream bitInputStream2 = new BitInputStream(byteArrayInputStream0, byteOrder1);
      bitInputStream1.clearBitCache();
      bitInputStream1.close();
      BitInputStream bitInputStream3 = new BitInputStream(byteArrayInputStream0, byteOrder0);
      bitInputStream3.close();
      bitInputStream2.close();
      bitInputStream1.clearBitCache();
      // Undeclared exception!
      try { 
        bitInputStream1.readBits((byte) (-87));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // count must not be negative or greater than 63
         //
         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 63);
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      bufferedInputStream0.markSupported();
      BitInputStream bitInputStream0 = new BitInputStream(bufferedInputStream0, byteOrder0);
      bitInputStream0.close();
      ByteOrder byteOrder1 = ByteOrder.BIG_ENDIAN;
      BitInputStream bitInputStream1 = new BitInputStream(bufferedInputStream0, byteOrder1);
      bitInputStream1.close();
      bitInputStream1.clearBitCache();
      try { 
        bitInputStream0.readBits(63);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      BitInputStream bitInputStream0 = new BitInputStream(sequenceInputStream0, byteOrder0);
      sequenceInputStream0.markSupported();
      bitInputStream0.close();
      bitInputStream0.readBits(1);
      sequenceInputStream0.mark(1);
      bitInputStream0.close();
      int int0 = (-1);
      // Undeclared exception!
      try { 
        bitInputStream0.readBits((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // count must not be negative or greater than 63
         //
         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)13;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      ByteOrder.nativeOrder();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(bufferedInputStream0, (byte)13);
      ByteOrder byteOrder1 = ByteOrder.BIG_ENDIAN;
      BitInputStream bitInputStream0 = new BitInputStream(bufferedInputStream1, byteOrder1);
      BitInputStream bitInputStream1 = new BitInputStream(bufferedInputStream0, byteOrder1);
      bitInputStream1.readBits((byte)13);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      BitInputStream bitInputStream0 = new BitInputStream(pipedInputStream0, byteOrder0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedInputStream0.connect(pipedOutputStream0);
      // Undeclared exception!
      try { 
        bitInputStream0.readBits((-865));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // count must not be negative or greater than 63
         //
         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      BitInputStream bitInputStream0 = new BitInputStream((InputStream) null, byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(bitInputStream0);
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertNotSame(byteOrder1, byteOrder0);
      assertNotNull(byteOrder1);
      assertFalse(byteOrder1.equals((Object)byteOrder0));
      
      // Undeclared exception!
      try { 
        bitInputStream0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 63);
      assertNotNull(bufferedInputStream0);
      
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      boolean boolean0 = bufferedInputStream0.markSupported();
      assertTrue(boolean0);
      
      BitInputStream bitInputStream0 = new BitInputStream(bufferedInputStream0, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(bitInputStream0);
      
      long long0 = bitInputStream0.readBits(0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0L, long0);
      
      bitInputStream0.close();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      bitInputStream0.close();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      long long1 = bitInputStream0.readBits(0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0L, long1);
      assertTrue(long1 == long0);
      
      bitInputStream0.close();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      long long2 = bitInputStream0.readBits(0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0L, long2);
      assertTrue(long2 == long0);
      assertTrue(long2 == long1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, (-1523));
      assertArrayEquals(new byte[] {(byte)1, (byte)0}, byteArray0);
      assertEquals((-1523), byteArrayInputStream0.available());
      assertEquals(2, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      long long0 = byteArrayInputStream0.skip(1935L);
      assertArrayEquals(new byte[] {(byte)1, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1523L), long0);
      assertEquals(2, byteArray0.length);
      
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)1, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(2, byteArray0.length);
      assertNotNull(dataInputStream0);
      
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      int int0 = byteArrayInputStream0.read();
      assertArrayEquals(new byte[] {(byte)1, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1), int0);
      assertEquals(2, byteArray0.length);
      
      BitInputStream bitInputStream0 = new BitInputStream(dataInputStream0, byteOrder0);
      assertArrayEquals(new byte[] {(byte)1, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(2, byteArray0.length);
      assertNotNull(bitInputStream0);
      
      bitInputStream0.close();
      assertArrayEquals(new byte[] {(byte)1, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(2, byteArray0.length);
      
      bitInputStream0.clearBitCache();
      assertArrayEquals(new byte[] {(byte)1, (byte)0}, byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(2, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      BitInputStream bitInputStream0 = new BitInputStream(sequenceInputStream0, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(bitInputStream0);
      
      bitInputStream0.close();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 1);
      assertNotNull(bufferedInputStream0);
      
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      BitInputStream bitInputStream0 = new BitInputStream(bufferedInputStream0, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(bitInputStream0);
      
      bitInputStream0.close();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      int int0 = 1437;
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(dataInputStream0, 1437);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0);
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      BitInputStream bitInputStream0 = new BitInputStream(bufferedInputStream0, byteOrder0);
      // Undeclared exception!
      try { 
        bitInputStream0.readBits(1437);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // count must not be negative or greater than 63
         //
         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
      }
  }
}
