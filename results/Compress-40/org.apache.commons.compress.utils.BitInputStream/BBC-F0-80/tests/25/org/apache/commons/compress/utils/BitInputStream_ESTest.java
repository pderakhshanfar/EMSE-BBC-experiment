/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 03:57:55 GMT 2021
 */

package org.apache.commons.compress.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.nio.ByteOrder;
import java.util.Enumeration;
import org.apache.commons.compress.utils.BitInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BitInputStream_ESTest extends BitInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 5513);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertNotNull(byteOrder1);
      assertNotSame(byteOrder1, byteOrder0);
      assertFalse(byteOrder1.equals((Object)byteOrder0));
      
      BitInputStream bitInputStream0 = new BitInputStream(pipedInputStream0, byteOrder0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(bitInputStream0);
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      byte byte0 = (byte) (-67);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)114;
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte) (-67);
      pipedOutputStream0.write(byteArray0);
      assertArrayEquals(new byte[] {(byte)114, (byte) (-67), (byte) (-67)}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      BitInputStream bitInputStream1 = new BitInputStream(pipedInputStream0, byteOrder1);
      assertEquals(3, pipedInputStream0.available());
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertNotNull(bitInputStream1);
      assertFalse(byteOrder1.equals((Object)byteOrder0));
      assertFalse(bitInputStream1.equals((Object)bitInputStream0));
      
      long long0 = bitInputStream1.readBits(10);
      assertEquals(370L, long0);
      assertEquals(1, pipedInputStream0.available());
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertNotSame(byteOrder1, byteOrder0);
      assertNotSame(bitInputStream1, bitInputStream0);
      assertFalse(byteOrder1.equals((Object)byteOrder0));
      assertFalse(bitInputStream1.equals((Object)bitInputStream0));
      
      // Undeclared exception!
      try { 
        bitInputStream0.readBits((byte)114);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // count must not be negative or greater than 63
         //
         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 5513);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertNotNull(byteOrder1);
      assertNotSame(byteOrder1, byteOrder0);
      assertFalse(byteOrder1.equals((Object)byteOrder0));
      
      BitInputStream bitInputStream0 = new BitInputStream(pipedInputStream0, byteOrder0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(bitInputStream0);
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      
      byte byte0 = (byte)98;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)6;
      pipedOutputStream0.write(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)6}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      BitInputStream bitInputStream1 = new BitInputStream(pipedInputStream0, byteOrder0);
      assertEquals(2, pipedInputStream0.available());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(bitInputStream1);
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      assertFalse(bitInputStream1.equals((Object)bitInputStream0));
      
      long long0 = bitInputStream1.readBits(1);
      assertEquals(0L, long0);
      assertEquals(1, pipedInputStream0.available());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotSame(byteOrder0, byteOrder1);
      assertNotSame(bitInputStream1, bitInputStream0);
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      assertFalse(bitInputStream1.equals((Object)bitInputStream0));
      
      // Undeclared exception!
      try { 
        bitInputStream0.readBits((-3540));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // count must not be negative or greater than 63
         //
         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 5513);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertNotNull(byteOrder1);
      assertNotSame(byteOrder1, byteOrder0);
      assertFalse(byteOrder1.equals((Object)byteOrder0));
      
      BitInputStream bitInputStream0 = new BitInputStream(pipedInputStream0, byteOrder0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(bitInputStream0);
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      
      boolean boolean0 = pipedInputStream0.markSupported();
      assertFalse(boolean0);
      assertEquals(0, pipedInputStream0.available());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-34);
      pipedOutputStream0.write(byteArray0);
      assertArrayEquals(new byte[] {(byte)6, (byte)28, (byte)114, (byte)98, (byte)0, (byte) (-34)}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      long long0 = bitInputStream0.readBits((byte)28);
      assertEquals(6407974L, long0);
      assertEquals(2, pipedInputStream0.available());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotSame(byteOrder0, byteOrder1);
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      
      BitInputStream bitInputStream1 = new BitInputStream(pipedInputStream0, byteOrder0);
      assertEquals(2, pipedInputStream0.available());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(bitInputStream1);
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      assertFalse(bitInputStream1.equals((Object)bitInputStream0));
      
      bitInputStream1.clearBitCache();
      assertEquals(2, pipedInputStream0.available());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotSame(byteOrder0, byteOrder1);
      assertNotSame(bitInputStream1, bitInputStream0);
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      assertFalse(bitInputStream1.equals((Object)bitInputStream0));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      int int0 = 5513;
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 5513);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertNotNull(byteOrder1);
      assertSame(byteOrder1, byteOrder0);
      
      BitInputStream bitInputStream0 = new BitInputStream(pipedInputStream0, byteOrder0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(bitInputStream0);
      
      boolean boolean0 = pipedInputStream0.markSupported();
      assertFalse(boolean0);
      assertEquals(0, pipedInputStream0.available());
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-34);
      pipedOutputStream0.write(byteArray0);
      assertArrayEquals(new byte[] {(byte)6, (byte)28, (byte)114, (byte)53, (byte)0, (byte) (-34)}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      long long0 = bitInputStream0.readBits(1);
      assertEquals(0L, long0);
      assertEquals(5, pipedInputStream0.available());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertSame(byteOrder0, byteOrder1);
      
      long long1 = bitInputStream0.readBits(1);
      assertEquals(1L, long1);
      assertEquals(5, pipedInputStream0.available());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertSame(byteOrder0, byteOrder1);
      assertFalse(long1 == long0);
      
      long long2 = bitInputStream0.readBits(1);
      assertEquals(1L, long2);
      assertEquals(5, pipedInputStream0.available());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertSame(byteOrder0, byteOrder1);
      assertTrue(long2 == long1);
      assertFalse(long2 == long0);
      
      // Undeclared exception!
      try { 
        bitInputStream0.readBits(2737);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // count must not be negative or greater than 63
         //
         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      BitInputStream bitInputStream0 = new BitInputStream(dataInputStream0, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(bitInputStream0);
      
      ByteOrder byteOrder1 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertNotNull(byteOrder1);
      assertSame(byteOrder1, byteOrder0);
      
      bitInputStream0.clearBitCache();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertSame(byteOrder0, byteOrder1);
      
      // Undeclared exception!
      try { 
        bitInputStream0.readBits(63);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)2;
      byteArray0[5] = (byte) (-70);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 299, 64);
      assertEquals((-293), byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-72), (byte)8, (byte)0, (byte)2, (byte) (-70)}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      BitInputStream bitInputStream0 = new BitInputStream(byteArrayInputStream0, byteOrder0);
      assertEquals((-293), byteArrayInputStream0.available());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(bitInputStream0);
      assertArrayEquals(new byte[] {(byte)0, (byte) (-72), (byte)8, (byte)0, (byte)2, (byte) (-70)}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      long long0 = bitInputStream0.readBits((byte)2);
      assertEquals((-1L), long0);
      assertEquals((-293), byteArrayInputStream0.available());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertArrayEquals(new byte[] {(byte)0, (byte) (-72), (byte)8, (byte)0, (byte)2, (byte) (-70)}, byteArray0);
      assertEquals(6, byteArray0.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertNotNull(byteOrder1);
      assertNotSame(byteOrder1, byteOrder0);
      assertFalse(byteOrder1.equals((Object)byteOrder0));
      
      ByteOrder byteOrder2 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder2.toString());
      assertNotNull(byteOrder2);
      assertSame(byteOrder2, byteOrder1);
      assertNotSame(byteOrder2, byteOrder0);
      assertFalse(byteOrder2.equals((Object)byteOrder0));
      
      ByteOrder byteOrder3 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder3.toString());
      assertNotNull(byteOrder3);
      assertNotSame(byteOrder3, byteOrder0);
      assertSame(byteOrder3, byteOrder1);
      assertSame(byteOrder3, byteOrder2);
      assertFalse(byteOrder3.equals((Object)byteOrder0));
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      BitInputStream bitInputStream0 = new BitInputStream(pipedInputStream0, byteOrder2);
      assertEquals("LITTLE_ENDIAN", byteOrder2.toString());
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(bitInputStream0);
      assertFalse(byteOrder2.equals((Object)byteOrder0));
      
      try { 
        bitInputStream0.readBits((byte)2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      int int0 = sequenceInputStream0.available();
      assertEquals(0, int0);
      
      BitInputStream bitInputStream0 = new BitInputStream(sequenceInputStream0, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(bitInputStream0);
      
      bitInputStream0.clearBitCache();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte) (-36);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-93);
      int int1 = sequenceInputStream0.read(byteArray0, (int) (byte)0, 8);
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new byte[] {(byte)63, (byte) (-36), (byte)0, (byte)1, (byte)0, (byte)0, (byte) (-93)}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      int int2 = sequenceInputStream0.available();
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      
      long long0 = bitInputStream0.readBits(0);
      assertEquals(0L, long0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      bitInputStream0.clearBitCache();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertNotNull(byteOrder1);
      assertSame(byteOrder1, byteOrder0);
      
      bitInputStream0.close();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertSame(byteOrder0, byteOrder1);
      
      long long1 = bitInputStream0.readBits(0);
      assertEquals(0L, long1);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertSame(byteOrder0, byteOrder1);
      assertTrue(long1 == long0);
      
      long long2 = bitInputStream0.readBits(0);
      assertEquals(0L, long2);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertSame(byteOrder0, byteOrder1);
      assertTrue(long2 == long1);
      assertTrue(long2 == long0);
      
      long long3 = bitInputStream0.readBits(8);
      assertEquals((-1L), long3);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertSame(byteOrder0, byteOrder1);
      assertFalse(long3 == long2);
      assertFalse(long3 == long1);
      assertFalse(long3 == long0);
      
      bitInputStream0.clearBitCache();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertSame(byteOrder0, byteOrder1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      int int0 = 5513;
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 5513);
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      ByteOrder.nativeOrder();
      BitInputStream bitInputStream0 = new BitInputStream(pipedInputStream0, byteOrder0);
      pipedInputStream0.markSupported();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-34);
      pipedOutputStream0.write(byteArray0);
      bitInputStream0.readBits(1);
      bitInputStream0.readBits(1);
      bitInputStream0.readBits(1);
      // Undeclared exception!
      try { 
        bitInputStream0.readBits(2737);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // count must not be negative or greater than 63
         //
         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      BitInputStream bitInputStream0 = new BitInputStream(dataInputStream0, byteOrder0);
      ByteOrder.nativeOrder();
      bitInputStream0.clearBitCache();
      bitInputStream0.readBits(0);
      // Undeclared exception!
      try { 
        bitInputStream0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.FilterInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      BitInputStream bitInputStream0 = new BitInputStream((InputStream) null, byteOrder0);
      int int0 = 0;
      bitInputStream0.readBits(0);
      bitInputStream0.readBits(0);
      int int1 = 2773;
      // Undeclared exception!
      try { 
        bitInputStream0.readBits((-35));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // count must not be negative or greater than 63
         //
         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      ByteOrder.nativeOrder();
      BitInputStream bitInputStream0 = new BitInputStream((InputStream) null, byteOrder0);
      // Undeclared exception!
      try { 
        bitInputStream0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-83);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-105);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)63;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 593, 1);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, (byte)63);
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      BitInputStream bitInputStream0 = new BitInputStream(pushbackInputStream0, byteOrder0);
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      pushbackInputStream0.unread((int) (byte) (-105));
      // Undeclared exception!
      try { 
        bitInputStream0.readBits((-3784));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // count must not be negative or greater than 63
         //
         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      BitInputStream bitInputStream0 = new BitInputStream(pushbackInputStream0, byteOrder0);
      bitInputStream0.close();
      bitInputStream0.clearBitCache();
      pushbackInputStream0.markSupported();
      bitInputStream0.close();
      bitInputStream0.clearBitCache();
      bitInputStream0.close();
      byte[] byteArray0 = new byte[4];
      pipedInputStream0.mark(1);
      byteArray0[0] = (byte) (-10);
      ByteOrder.nativeOrder();
      try { 
        pipedInputStream0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark/reset not supported
         //
         verifyException("java.io.InputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      BitInputStream bitInputStream0 = new BitInputStream(mockFileInputStream0, byteOrder0);
      // Undeclared exception!
      try { 
        bitInputStream0.readBits(511);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // count must not be negative or greater than 63
         //
         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
      }
  }
}
