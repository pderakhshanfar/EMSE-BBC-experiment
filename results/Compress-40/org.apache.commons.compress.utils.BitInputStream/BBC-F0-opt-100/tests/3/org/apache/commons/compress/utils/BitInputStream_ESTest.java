/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 21:59:38 GMT 2021
 */

package org.apache.commons.compress.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.nio.ByteOrder;
import java.util.Enumeration;
import org.apache.commons.compress.utils.BitInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BitInputStream_ESTest extends BitInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertSame(byteOrder1, byteOrder0);
      assertNotNull(byteOrder1);
      
      byte[] byteArray0 = new byte[13];
      boolean boolean0 = pipedInputStream0.markSupported();
      assertEquals(0, pipedInputStream0.available());
      assertFalse(boolean0);
      
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte) (-8);
      pipedOutputStream0.write(byteArray0);
      assertEquals(13, byteArray0.length);
      
      BitInputStream bitInputStream0 = new BitInputStream(pipedInputStream0, byteOrder0);
      assertEquals(13, pipedInputStream0.available());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(bitInputStream0);
      
      ByteOrder byteOrder2 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder2.toString());
      assertNotSame(byteOrder2, byteOrder1);
      assertNotSame(byteOrder2, byteOrder0);
      assertFalse(byteOrder2.equals((Object)byteOrder1));
      assertFalse(byteOrder2.equals((Object)byteOrder0));
      assertNotNull(byteOrder2);
      
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1), 25);
      assertEquals(14, byteArrayInputStream0.available());
      assertEquals(13, byteArray0.length);
      assertNotNull(byteArrayInputStream0);
      
      BitInputStream bitInputStream1 = new BitInputStream(byteArrayInputStream0, byteOrder1);
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertEquals(14, byteArrayInputStream0.available());
      assertEquals(13, byteArray0.length);
      assertFalse(byteOrder1.equals((Object)byteOrder2));
      assertFalse(bitInputStream1.equals((Object)bitInputStream0));
      assertNotNull(bitInputStream1);
      
      ByteOrder byteOrder3 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder3.toString());
      assertSame(byteOrder3, byteOrder1);
      assertSame(byteOrder3, byteOrder0);
      assertNotSame(byteOrder3, byteOrder2);
      assertFalse(byteOrder3.equals((Object)byteOrder2));
      assertNotNull(byteOrder3);
      
      // Undeclared exception!
      try { 
        bitInputStream1.readBits(25);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      byte[] byteArray0 = new byte[13];
      boolean boolean1 = pipedInputStream0.markSupported();
      assertEquals(0, pipedInputStream0.available());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte)0;
      pipedOutputStream0.write(byteArray0);
      assertEquals(13, byteArray0.length);
      
      BitInputStream bitInputStream0 = new BitInputStream(pipedInputStream0, byteOrder0);
      assertEquals(13, pipedInputStream0.available());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(bitInputStream0);
      
      ByteOrder byteOrder1 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder1.toString());
      assertNotSame(byteOrder1, byteOrder0);
      assertFalse(byteOrder1.equals((Object)byteOrder0));
      assertNotNull(byteOrder1);
      
      BitInputStream bitInputStream1 = new BitInputStream(pipedInputStream0, byteOrder1);
      assertEquals(13, pipedInputStream0.available());
      assertEquals("BIG_ENDIAN", byteOrder1.toString());
      assertFalse(byteOrder1.equals((Object)byteOrder0));
      assertFalse(bitInputStream1.equals((Object)bitInputStream0));
      assertNotNull(bitInputStream1);
      
      long long0 = bitInputStream1.readBits((byte)12);
      assertEquals(11, pipedInputStream0.available());
      assertEquals("BIG_ENDIAN", byteOrder1.toString());
      assertNotSame(byteOrder1, byteOrder0);
      assertNotSame(bitInputStream1, bitInputStream0);
      assertFalse(byteOrder1.equals((Object)byteOrder0));
      assertFalse(bitInputStream1.equals((Object)bitInputStream0));
      assertEquals(192L, long0);
      
      bitInputStream1.clearBitCache();
      assertEquals(11, pipedInputStream0.available());
      assertEquals("BIG_ENDIAN", byteOrder1.toString());
      assertNotSame(byteOrder1, byteOrder0);
      assertNotSame(bitInputStream1, bitInputStream0);
      assertFalse(byteOrder1.equals((Object)byteOrder0));
      assertFalse(bitInputStream1.equals((Object)bitInputStream0));
      
      long long1 = bitInputStream0.readBits((byte)12);
      assertEquals(9, pipedInputStream0.available());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotSame(byteOrder0, byteOrder1);
      assertNotSame(bitInputStream0, bitInputStream1);
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      assertFalse(bitInputStream0.equals((Object)bitInputStream1));
      assertFalse(long1 == long0);
      assertEquals(0L, long1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      pipedOutputStream0.write(byteArray0);
      assertEquals(13, byteArray0.length);
      
      BitInputStream bitInputStream0 = new BitInputStream(pipedInputStream0, byteOrder0);
      assertEquals(13, pipedInputStream0.available());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(bitInputStream0);
      
      long long0 = bitInputStream0.readBits(1);
      assertEquals(12, pipedInputStream0.available());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(0L, long0);
      
      long long1 = bitInputStream0.readBits((byte)0);
      assertEquals(12, pipedInputStream0.available());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)79;
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte)79;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)79, (byte)25, (byte)79}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertSame(byteOrder1, byteOrder0);
      assertNotNull(byteOrder1);
      
      ByteOrder byteOrder2 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder2.toString());
      assertSame(byteOrder2, byteOrder0);
      assertSame(byteOrder2, byteOrder1);
      assertNotNull(byteOrder2);
      
      BitInputStream bitInputStream0 = new BitInputStream(byteArrayInputStream0, byteOrder0);
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)79, (byte)25, (byte)79}, byteArray0);
      assertNotNull(bitInputStream0);
      
      bitInputStream0.clearBitCache();
      assertEquals(4, byteArrayInputStream0.available());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(4, byteArray0.length);
      assertSame(byteOrder0, byteOrder2);
      assertSame(byteOrder0, byteOrder1);
      assertArrayEquals(new byte[] {(byte)0, (byte)79, (byte)25, (byte)79}, byteArray0);
      
      long long0 = bitInputStream0.readBits((byte)25);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(4, byteArray0.length);
      assertSame(byteOrder0, byteOrder2);
      assertSame(byteOrder0, byteOrder1);
      assertEquals(18435840L, long0);
      assertArrayEquals(new byte[] {(byte)0, (byte)79, (byte)25, (byte)79}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      File file0 = MockFile.createTempFile("4_}IBYb:CZ>H:FpRs", "Ro/");
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/4_}IBYb:CZ>H:FpRs0Ro", file0.toString());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals("4_}IBYb:CZ>H:FpRs0Ro", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertNotNull(file0);
      
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      assertNotNull(mockFileInputStream0);
      
      BitInputStream bitInputStream0 = new BitInputStream(mockFileInputStream0, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/4_}IBYb:CZ>H:FpRs0Ro", file0.toString());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals("4_}IBYb:CZ>H:FpRs0Ro", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0, mockFileInputStream0.available());
      assertNotNull(bitInputStream0);
      
      long long0 = bitInputStream0.readBits((byte)0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/4_}IBYb:CZ>H:FpRs0Ro", file0.toString());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals("4_}IBYb:CZ>H:FpRs0Ro", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0, mockFileInputStream0.available());
      assertEquals(0L, long0);
      
      long long1 = bitInputStream0.readBits((byte)45);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertEquals("/tmp/4_}IBYb:CZ>H:FpRs0Ro", file0.toString());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals("4_}IBYb:CZ>H:FpRs0Ro", file0.getName());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals((-1), mockFileInputStream0.available());
      assertFalse(long1 == long0);
      assertEquals((-1L), long1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      byte[] byteArray0 = new byte[13];
      boolean boolean0 = pipedInputStream0.markSupported();
      assertEquals(0, pipedInputStream0.available());
      assertFalse(boolean0);
      
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)0;
      pipedOutputStream0.write(byteArray0);
      assertEquals(13, byteArray0.length);
      
      BitInputStream bitInputStream0 = new BitInputStream(pipedInputStream0, byteOrder0);
      assertEquals(13, pipedInputStream0.available());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(bitInputStream0);
      
      long long0 = bitInputStream0.readBits(1);
      assertEquals(12, pipedInputStream0.available());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0L, long0);
      
      bitInputStream0.clearBitCache();
      assertEquals(12, pipedInputStream0.available());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      long long1 = bitInputStream0.readBits(1);
      assertEquals(11, pipedInputStream0.available());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BitInputStream bitInputStream0 = new BitInputStream((InputStream) null, (ByteOrder) null);
      assertNotNull(bitInputStream0);
      
      // Undeclared exception!
      try { 
        bitInputStream0.readBits(63);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      BitInputStream bitInputStream0 = new BitInputStream((InputStream) null, byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(bitInputStream0);
      
      // Undeclared exception!
      try { 
        bitInputStream0.readBits(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      BitInputStream bitInputStream0 = new BitInputStream(pipedInputStream0, byteOrder0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(bitInputStream0);
      
      long long0 = bitInputStream0.readBits((byte)0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0L, long0);
      
      bitInputStream0.close();
      assertEquals(0, pipedInputStream0.available());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      long long1 = bitInputStream0.readBits(0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
      
      try { 
        bitInputStream0.readBits(8);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe closed
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-48);
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte) (-14);
      byteArray0[4] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)114, (byte)114);
      assertEquals((-109), byteArrayInputStream0.available());
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-48), (byte)114, (byte) (-14), (byte)0}, byteArray0);
      assertNotNull(byteArrayInputStream0);
      
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      BitInputStream bitInputStream0 = new BitInputStream(byteArrayInputStream0, byteOrder0);
      assertEquals((-109), byteArrayInputStream0.available());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(5, byteArray0.length);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-48), (byte)114, (byte) (-14), (byte)0}, byteArray0);
      assertNotNull(bitInputStream0);
      
      long long0 = bitInputStream0.readBits((byte)0);
      assertEquals((-109), byteArrayInputStream0.available());
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(5, byteArray0.length);
      assertEquals(0L, long0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-48), (byte)114, (byte) (-14), (byte)0}, byteArray0);
      
      // Undeclared exception!
      try { 
        bitInputStream0.readBits((-71));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // count must not be negative or greater than 63
         //
         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      assertNotNull(sequenceInputStream0);
      
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      BitInputStream bitInputStream0 = new BitInputStream(sequenceInputStream0, byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(bitInputStream0);
      
      long long0 = bitInputStream0.readBits(0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0L, long0);
      
      bitInputStream0.close();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      
      long long1 = bitInputStream0.readBits(0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertTrue(long1 == long0);
      assertEquals(0L, long1);
      
      long long2 = bitInputStream0.readBits(0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertTrue(long2 == long1);
      assertTrue(long2 == long0);
      assertEquals(0L, long2);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)0;
      pipedOutputStream0.write(byteArray0);
      BitInputStream bitInputStream0 = new BitInputStream(pipedInputStream0, byteOrder0);
      bitInputStream0.readBits(1);
      bitInputStream0.clearBitCache();
      assertEquals(2, pipedInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      ByteOrder.nativeOrder();
      BitInputStream bitInputStream0 = new BitInputStream((InputStream) null, byteOrder0);
      bitInputStream0.clearBitCache();
      ByteOrder.nativeOrder();
      int int0 = 64;
      // Undeclared exception!
      try { 
        bitInputStream0.readBits(64);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // count must not be negative or greater than 63
         //
         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.mark(1933);
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      BitInputStream bitInputStream0 = new BitInputStream(pipedInputStream0, byteOrder0);
      int int0 = (-1);
      // Undeclared exception!
      try { 
        bitInputStream0.readBits((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // count must not be negative or greater than 63
         //
         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Enumeration<FilterInputStream> enumeration0 = (Enumeration<FilterInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      BitInputStream bitInputStream0 = new BitInputStream(sequenceInputStream0, (ByteOrder) null);
      bitInputStream0.close();
      bitInputStream0.close();
      // Undeclared exception!
      try { 
        bitInputStream0.readBits((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // count must not be negative or greater than 63
         //
         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      File file0 = MockFile.createTempFile("A+I(F.}]y4k", "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      mockFileInputStream0.getChannel();
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      BitInputStream bitInputStream0 = new BitInputStream(mockFileInputStream0, byteOrder0);
      bitInputStream0.clearBitCache();
      bitInputStream0.clearBitCache();
      ByteOrder.nativeOrder();
      bitInputStream0.close();
      bitInputStream0.clearBitCache();
      try { 
        mockFileInputStream0.skip((-742L));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      BitInputStream bitInputStream0 = new BitInputStream((InputStream) null, byteOrder0);
      // Undeclared exception!
      try { 
        bitInputStream0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
      }
  }
}
