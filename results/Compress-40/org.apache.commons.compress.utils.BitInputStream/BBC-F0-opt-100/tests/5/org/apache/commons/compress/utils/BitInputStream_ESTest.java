/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 22:01:15 GMT 2021
 */

package org.apache.commons.compress.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.nio.ByteOrder;
import java.util.Enumeration;
import org.apache.commons.compress.utils.BitInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BitInputStream_ESTest extends BitInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)27;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      BitInputStream bitInputStream0 = new BitInputStream(pushbackInputStream0, byteOrder0);
      bitInputStream0.readBits((byte)27);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)29;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      BitInputStream bitInputStream0 = new BitInputStream(byteArrayInputStream0, byteOrder0);
      bitInputStream0.readBits((byte)19);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      BitInputStream bitInputStream0 = new BitInputStream(byteArrayInputStream0, byteOrder0);
      bitInputStream0.readBits(63);
      assertEquals(1, byteArrayInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      BitInputStream bitInputStream0 = new BitInputStream(byteArrayInputStream0, byteOrder0);
      long long0 = bitInputStream0.readBits(0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      BitInputStream bitInputStream0 = new BitInputStream((InputStream) null, byteOrder0);
      // Undeclared exception!
      try { 
        bitInputStream0.readBits((byte)1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-2397), 395);
      BitInputStream bitInputStream0 = new BitInputStream(byteArrayInputStream0, byteOrder0);
      // Undeclared exception!
      try { 
        bitInputStream0.readBits(8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      BitInputStream bitInputStream0 = new BitInputStream(pushbackInputStream0, byteOrder0);
      bitInputStream0.close();
      try { 
        bitInputStream0.readBits((byte)1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.PushbackInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      BitInputStream bitInputStream0 = new BitInputStream((InputStream) null, byteOrder0);
      // Undeclared exception!
      try { 
        bitInputStream0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      BitInputStream bitInputStream0 = new BitInputStream(byteArrayInputStream0, byteOrder0);
      long long0 = bitInputStream0.readBits(8);
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      File file0 = MockFile.createTempFile("org.apache.commons.compress.utils.BitInputStream", "org.apache.commons.compress.utils.BitInputStream");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      BitInputStream bitInputStream0 = new BitInputStream(mockFileInputStream0, byteOrder0);
      // Undeclared exception!
      try { 
        bitInputStream0.readBits(1253);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // count must not be negative or greater than 63
         //
         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      BitInputStream bitInputStream0 = new BitInputStream(sequenceInputStream0, byteOrder0);
      // Undeclared exception!
      try { 
        bitInputStream0.readBits((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // count must not be negative or greater than 63
         //
         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      BitInputStream bitInputStream0 = new BitInputStream(byteArrayInputStream0, byteOrder0);
      bitInputStream0.clearBitCache();
  }
}
