/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 04:53:26 GMT 2021
 */

package org.apache.commons.compress.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.nio.ByteOrder;
import org.apache.commons.compress.utils.BitInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BitInputStream_ESTest extends BitInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte) (-83);
      byteArray0[4] = (byte)84;
      byteArray0[5] = (byte) (-65);
      byteArray0[6] = (byte)15;
      byteArray0[7] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-12), 874);
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      BitInputStream bitInputStream0 = new BitInputStream(byteArrayInputStream0, byteOrder0);
      // Undeclared exception!
      try { 
        bitInputStream0.readBits(7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -12
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      BitInputStream bitInputStream0 = new BitInputStream(pipedInputStream0, byteOrder0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      pipedOutputStream0.write(64);
      pipedInputStream0.markSupported();
      pipedOutputStream0.write((int) (byte)6);
      BitInputStream bitInputStream1 = new BitInputStream(pipedInputStream0, byteOrder0);
      bitInputStream1.readBits((byte)14);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      BitInputStream bitInputStream0 = new BitInputStream(pipedInputStream0, byteOrder0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      pipedOutputStream0.write(64);
      pipedInputStream0.markSupported();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)61;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte)61;
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte)1;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      bitInputStream0.readBits((byte)1);
      bitInputStream0.readBits((byte)1);
      // Undeclared exception!
      try { 
        bitInputStream0.readBits((-754));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // count must not be negative or greater than 63
         //
         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      BitInputStream bitInputStream0 = new BitInputStream(pipedInputStream0, byteOrder0);
      pipedOutputStream0.write(6376);
      pipedOutputStream0.write((int) (byte)0);
      pipedInputStream0.markSupported();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-121);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)61;
      byteArray0[5] = (byte)8;
      byteArray0[6] = (byte) (-121);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      bitInputStream0.readBits((byte)6);
      bitInputStream0.readBits(8);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      BitInputStream bitInputStream0 = new BitInputStream(pipedInputStream0, byteOrder0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)14;
      pipedOutputStream0.write(2911);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)0;
      byteArray0[3] = (byte) (-121);
      byteArray0[5] = (byte)61;
      byteArray0[6] = (byte)1;
      byteArray0[7] = (byte)8;
      byteArray0[8] = (byte) (-99);
      pipedInputStream0.markSupported();
      byte[] byteArray1 = new byte[9];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      bitInputStream0.readBits(1);
      bitInputStream0.readBits(1);
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      BitInputStream bitInputStream1 = new BitInputStream(pipedInputStream0, byteOrder1);
      bitInputStream1.clearBitCache();
      bitInputStream1.clearBitCache();
      assertEquals(0, pipedInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      BitInputStream bitInputStream0 = new BitInputStream(pipedInputStream0, byteOrder0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)14;
      pipedOutputStream0.write(2911);
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-121);
      byteArray0[5] = (byte)61;
      byteArray0[6] = (byte)1;
      byte byte0 = (byte)8;
      byteArray0[7] = (byte)8;
      byteArray0[8] = (byte) (-99);
      pipedInputStream0.markSupported();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      bitInputStream0.readBits(1);
      // Undeclared exception!
      try { 
        bitInputStream0.readBits((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // count must not be negative or greater than 63
         //
         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte) (-97);
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte) (-119);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 2221, (byte) (-97));
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.apache.commons.compress.utils.BitInputStream");
      byteArrayInputStream0.mark((byte) (-119));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BitInputStream bitInputStream0 = new BitInputStream(byteArrayInputStream0, byteOrder0);
      ByteOrder.nativeOrder();
      bitInputStream0.close();
      bitInputStream0.readBits(63);
      // Undeclared exception!
      try { 
        bitInputStream0.readBits((byte) (-119));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // count must not be negative or greater than 63
         //
         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      BitInputStream bitInputStream0 = new BitInputStream((InputStream) null, byteOrder0);
      ByteOrder.nativeOrder();
      bitInputStream0.clearBitCache();
      bitInputStream0.readBits(0);
      int int0 = 63;
      bitInputStream0.clearBitCache();
      // Undeclared exception!
      try { 
        bitInputStream0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1288), 0);
      byteArrayInputStream0.read();
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      byteArrayInputStream0.close();
      byteArrayInputStream0.skip(0);
      byteArrayInputStream0.mark(579);
      BitInputStream bitInputStream0 = new BitInputStream(byteArrayInputStream0, byteOrder0);
      bitInputStream0.close();
      byteArrayInputStream0.reset();
      ByteOrder.nativeOrder();
      bitInputStream0.clearBitCache();
      ByteOrder.nativeOrder();
      bitInputStream0.close();
      bitInputStream0.close();
      ByteOrder.nativeOrder();
      bitInputStream0.clearBitCache();
      bitInputStream0.close();
      long long0 = bitInputStream0.readBits(0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      mockFileInputStream0.getChannel();
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      BitInputStream bitInputStream0 = new BitInputStream(mockFileInputStream0, byteOrder0);
      bitInputStream0.clearBitCache();
      int int0 = 1;
      try { 
        bitInputStream0.readBits(1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      BitInputStream bitInputStream0 = new BitInputStream((InputStream) null, byteOrder0);
      bitInputStream0.readBits(0);
      // Undeclared exception!
      try { 
        bitInputStream0.readBits(63);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      ByteOrder.nativeOrder();
      BitInputStream bitInputStream0 = new BitInputStream((InputStream) null, byteOrder0);
      bitInputStream0.clearBitCache();
      ByteOrder.nativeOrder();
      bitInputStream0.clearBitCache();
      ByteOrder.nativeOrder();
      // Undeclared exception!
      try { 
        bitInputStream0.readBits(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      mockFileInputStream0.getChannel();
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      BitInputStream bitInputStream0 = new BitInputStream(mockFileInputStream0, byteOrder0);
      bitInputStream0.clearBitCache();
      int int0 = 431;
      // Undeclared exception!
      try { 
        bitInputStream0.readBits(431);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // count must not be negative or greater than 63
         //
         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(886);
      pipedInputStream0.markSupported();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      BitInputStream bitInputStream0 = new BitInputStream(sequenceInputStream0, byteOrder0);
      bitInputStream0.close();
      sequenceInputStream0.markSupported();
      bitInputStream0.readBits(0);
      sequenceInputStream0.available();
      // Undeclared exception!
      try { 
        bitInputStream0.readBits((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // count must not be negative or greater than 63
         //
         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
      }
  }
}
