/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 04:53:02 GMT 2021
 */

package org.apache.commons.compress.utils;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.nio.ByteOrder;
import org.apache.commons.compress.utils.BitInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BitInputStream_ESTest extends BitInputStream_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)84;
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte) (-124);
      byteArray0[3] = (byte)60;
      byteArray0[4] = (byte) (-123);
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)64;
      byteArray0[7] = (byte) (-14);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      BitInputStream bitInputStream0 = new BitInputStream(byteArrayInputStream0, byteOrder0);
      long long0 = bitInputStream0.readBits((byte)60);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals(162410534296411988L, long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)8;
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte)8;
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-751), (byte)8);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)8);
      BitInputStream bitInputStream0 = new BitInputStream(bufferedInputStream0, byteOrder0);
      BitInputStream bitInputStream1 = new BitInputStream(bufferedInputStream0, byteOrder0);
      // Undeclared exception!
      try { 
        bitInputStream1.readBits(48);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)12;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      BitInputStream bitInputStream0 = new BitInputStream(byteArrayInputStream0, byteOrder0);
      bitInputStream0.clearBitCache();
      bitInputStream0.close();
      bitInputStream0.close();
      BitInputStream bitInputStream1 = new BitInputStream(byteArrayInputStream0, byteOrder0);
      bitInputStream1.readBits(8);
      int int0 = (-1924);
      bitInputStream1.readBits(1);
      // Undeclared exception!
      try { 
        bitInputStream1.readBits(191);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // count must not be negative or greater than 63
         //
         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      BitInputStream bitInputStream0 = new BitInputStream(byteArrayInputStream0, byteOrder0);
      bitInputStream0.clearBitCache();
      bitInputStream0.close();
      BitInputStream bitInputStream1 = new BitInputStream(byteArrayInputStream0, byteOrder0);
      bitInputStream1.readBits(8);
      byteArrayInputStream0.close();
      bitInputStream0.readBits(0);
      long long0 = bitInputStream0.readBits(8);
      assertEquals(0, byteArrayInputStream0.available());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockFile.createTempFile("*0ZFGpDhIqxp", "*0ZFGpDhIqxp");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)12;
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte) (-1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      BitInputStream bitInputStream0 = new BitInputStream(byteArrayInputStream0, byteOrder0);
      bitInputStream0.clearBitCache();
      bitInputStream0.close();
      bitInputStream0.readBits((byte)12);
      // Undeclared exception!
      try { 
        bitInputStream0.readBits((byte) (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // count must not be negative or greater than 63
         //
         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)8;
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)12;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      BitInputStream bitInputStream0 = new BitInputStream(byteArrayInputStream0, byteOrder0);
      bitInputStream0.clearBitCache();
      bitInputStream0.close();
      bitInputStream0.readBits(8);
      bitInputStream0.readBits((byte)8);
      // Undeclared exception!
      try { 
        bitInputStream0.readBits(1633);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // count must not be negative or greater than 63
         //
         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "*0ZFGpDhIqxp";
      File file0 = MockFile.createTempFile("*0ZFGpDhIqxp", "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      BitInputStream bitInputStream0 = new BitInputStream(mockFileInputStream0, byteOrder0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        bitInputStream0.close();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      File file0 = MockFile.createTempFile("*0ZFGpDhIqxp", "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      BitInputStream bitInputStream0 = new BitInputStream(mockFileInputStream0, byteOrder0);
      mockFileInputStream0.markSupported();
      BitInputStream bitInputStream1 = new BitInputStream(mockFileInputStream0, byteOrder0);
      bitInputStream1.clearBitCache();
      BitInputStream bitInputStream2 = new BitInputStream(mockFileInputStream0, byteOrder0);
      long long0 = bitInputStream1.readBits(0);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      BitInputStream bitInputStream0 = new BitInputStream(pipedInputStream0, byteOrder0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)9;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)64;
      byteArray0[3] = (byte)83;
      byteArray0[4] = (byte) (-89);
      byteArray0[5] = (byte) (-26);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)41;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      bitInputStream0.clearBitCache();
      bitInputStream0.close();
      bitInputStream0.close();
      bitInputStream0.readBits(0);
      try { 
        bitInputStream0.readBits((byte)9);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe closed
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      File file0 = MockFile.createTempFile("*0ZFGpDhIqxp", "");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      BitInputStream bitInputStream0 = new BitInputStream(mockFileInputStream0, byteOrder0);
      mockFileInputStream0.markSupported();
      BitInputStream bitInputStream1 = new BitInputStream(mockFileInputStream0, byteOrder0);
      bitInputStream1.clearBitCache();
      BitInputStream bitInputStream2 = new BitInputStream(mockFileInputStream0, byteOrder0);
      bitInputStream2.readBits(63);
      long long0 = bitInputStream2.readBits(63);
      assertEquals((-2), mockFileInputStream0.available());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      BitInputStream bitInputStream0 = new BitInputStream((InputStream) null, byteOrder1);
      // Undeclared exception!
      try { 
        bitInputStream0.readBits(8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      BitInputStream bitInputStream0 = new BitInputStream((InputStream) null, byteOrder0);
      bitInputStream0.clearBitCache();
      ByteOrder.nativeOrder();
      // Undeclared exception!
      try { 
        bitInputStream0.close();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)0;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read(byteArray0);
      byteArrayInputStream0.mark((byte)0);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      ByteOrder.nativeOrder();
      BitInputStream bitInputStream0 = new BitInputStream(byteArrayInputStream0, byteOrder0);
      ByteOrder.nativeOrder();
      bitInputStream0.close();
      int int0 = (-3288);
      // Undeclared exception!
      try { 
        bitInputStream0.readBits((-3288));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // count must not be negative or greater than 63
         //
         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      BitInputStream bitInputStream0 = new BitInputStream(bufferedInputStream0, byteOrder0);
      bitInputStream0.clearBitCache();
      bitInputStream0.close();
      bitInputStream0.clearBitCache();
      bitInputStream0.close();
      ByteOrder.nativeOrder();
      bitInputStream0.close();
      bitInputStream0.clearBitCache();
      bufferedInputStream0.mark(0);
      ByteOrder.nativeOrder();
      bitInputStream0.readBits(0);
      ByteOrder.nativeOrder();
      // Undeclared exception!
      try { 
        bitInputStream0.readBits(524);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // count must not be negative or greater than 63
         //
         verifyException("org.apache.commons.compress.utils.BitInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)78;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-70);
      byteArray0[7] = (byte) (-51);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.mark((byte)0);
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      BitInputStream bitInputStream0 = new BitInputStream(byteArrayInputStream0, byteOrder0);
      // Undeclared exception!
      try { 
        byteArrayInputStream0.read(byteArray0, (int) (byte)0, (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }
}
