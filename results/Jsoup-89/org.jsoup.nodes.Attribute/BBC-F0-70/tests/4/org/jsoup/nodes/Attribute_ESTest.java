/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 18:32:44 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Attribute_ESTest extends Attribute_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Attribute attribute0 = new Attribute("allowfullscreen", "E0_`08.5-)UO#\"&4t");
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertEquals("E0_`08.5-)UO#\"&4t", attribute0.getValue());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded(";7``b\r", ";7``b\r");
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(pipedWriter0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      attribute0.html((Appendable) bufferedWriter0, document_OutputSettings0);
      assertEquals(";7``b\r", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Attribute attribute0 = new Attribute("iframe", (String) null);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = attribute0.shouldCollapseAttribute(document_OutputSettings0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = Attribute.shouldCollapseAttribute("nohref", "l5};$zNDIW1y-=\"muted\"", document_OutputSettings0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      boolean boolean0 = Attribute.isDataAttribute("data-=\"fs`a\"");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      boolean boolean0 = Attribute.isBooleanAttribute("allowfullscreen");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      boolean boolean0 = Attribute.isBooleanAttribute("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Attribute attribute0 = new Attribute("9zhx*Y#n>.P", "9zhx*Y#n>.P");
      String string0 = attribute0.getValue();
      assertEquals("9zhx*Y#n>.P", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("Fwj5RQEK&-6:", "");
      String string0 = attribute0.getValue();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Attribute attribute0 = new Attribute("HVudGaJ", "data-data-");
      // Undeclared exception!
      try { 
        attribute0.shouldCollapseAttribute((Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.shouldCollapseAttribute("", "\"UK;-YG#ip*", (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded(",X", ",X");
      // Undeclared exception!
      try { 
        attribute0.setValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("C58u;)8_}S%f{6!FoL", "Ep$ejG56Q>6");
      Attribute attribute0 = new Attribute("C58u;)8_}S%f{6!FoL", "Y*>55O2S\"w}xZk|uF", attributes1);
      String[] stringArray0 = new String[0];
      attributes1.keys = stringArray0;
      // Undeclared exception!
      try { 
        attribute0.setValue("[9*`0mv'#eg;");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("&gZpNNap4pHb1@{xD%I", "&amp;");
      attributes1.keys = null;
      Attribute attribute0 = new Attribute("data-", "jWwh5", attributes1);
      // Undeclared exception!
      try { 
        attribute0.setKey("&gZpNNap4pHb1@{xD%I");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("HVudGaJ", "HVudGaJ");
      // Undeclared exception!
      try { 
        attribute0.setKey("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("C58u;)8_}S%f{6!FoL", "Ep$ejG56Q>6");
      Attribute attribute0 = new Attribute("C58u;)8_}S%f{6!FoL", "Y*>55O2S\"w}xZk|uF", attributes1);
      String[] stringArray0 = new String[0];
      attributes1.keys = stringArray0;
      // Undeclared exception!
      try { 
        attribute0.setKey("VcY<^5@|yH!C");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.isDataAttribute((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.isBooleanAttribute((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "check");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        Attribute.html("check", "", (Appendable) charBuffer0, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("utf");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        Attribute.html("`X1o_8<fm!}s\"'6Z", "`X1o_8<fm!}s\"'6Z", (Appendable) charBuffer0, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        Attribute.html("", "n|D!(Ryj", (Appendable) null, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        Attribute.html("data-", "data-", (Appendable) pipedWriter0, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Attribute attribute0 = new Attribute("isindex", "HnudGaJ");
      char[] charArray0 = new char[6];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        attribute0.html((Appendable) charBuffer0, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Attribute attribute0 = new Attribute("isindex", "HVudGaJ");
      MockFile mockFile0 = new MockFile("kX|:;[P3w^$3M", "HVudGaJ");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      // Undeclared exception!
      try { 
        attribute0.html((Appendable) mockFileWriter0, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      String[] stringArray0 = new String[4];
      Attribute attribute0 = new Attribute("isindex", stringArray0[3], attributes0);
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        attribute0.html((Appendable) pipedWriter0, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.createFromEncoded((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.createFromEncoded("", "#K*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute("", "dve5[Q8efc$~T,`0", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      StringWriter stringWriter0 = new StringWriter();
      Attribute.html("nohref", "nohref", (Appendable) stringWriter0, document_OutputSettings0);
      assertEquals("nohref", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Attribute attribute0 = new Attribute("isindex", "HVudGaJ");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "isindex");
      // Undeclared exception!
      try { 
        attribute0.html((Appendable) charBuffer0, (Document.OutputSettings) null);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("C58u;)8_}S%f{6!FoL", "Y*>55O2S\"w}xZk|uF", attributes0);
      attribute0.hashCode();
      assertEquals("Y*>55O2S\"w}xZk|uF", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      String[] stringArray0 = new String[4];
      Attribute attribute0 = new Attribute("TNH/~2_.UyM%yD> 3z", stringArray0[3], attributes0);
      attribute0.hashCode();
      assertEquals("", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      String[] stringArray0 = new String[4];
      Attribute attribute0 = new Attribute("TNH/~2_.UyM%yD> 3z", stringArray0[3], attributes0);
      Attribute attribute1 = new Attribute("TNH/~2_.UyM%yD> 3z", "q;@syg", attributes0);
      boolean boolean0 = attribute0.equals(attribute1);
      //  // Unstable assertion: assertTrue(attribute1.equals((Object)attribute0));
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("n|D!(Ryj", "n|D!(Ryj");
      Attribute attribute1 = new Attribute("n|D!(Ryj", "n|D!(Ryj", attributes0);
      boolean boolean0 = attribute0.equals(attribute1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Attribute attribute0 = new Attribute("7", "7");
      Attribute attribute1 = attribute0.clone();
      assertTrue(attribute1.equals((Object)attribute0));
      
      attribute1.setKey("data-oo]\"t1");
      boolean boolean0 = attribute0.equals(attribute1);
      assertFalse(attribute1.equals((Object)attribute0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      String[] stringArray0 = new String[4];
      Attribute attribute0 = new Attribute("isindex", stringArray0[3], attributes0);
      Attribute attribute1 = attribute0.clone();
      boolean boolean0 = attribute0.equals(attribute1);
      assertTrue(boolean0);
      assertEquals("", attribute1.getValue());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Attribute attribute0 = new Attribute("l5};$zNDIW1y-", "muted", (Attributes) null);
      boolean boolean0 = attribute0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals("muted", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Attribute attribute0 = new Attribute("isindex", "data-n|d!(ryj");
      boolean boolean0 = attribute0.equals(attribute0);
      assertTrue(boolean0);
      assertEquals("data-n|d!(ryj", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Attribute attribute0 = new Attribute("isindex", "data-|d(ryj");
      boolean boolean0 = attribute0.equals("org.jsoup.select.Evaluator$IndexEquals");
      assertFalse(boolean0);
      assertEquals("data-|d(ryj", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      String[] stringArray0 = new String[4];
      Attribute attribute0 = new Attribute("isindex", stringArray0[3], attributes0);
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Attribute attribute0 = new Attribute("isindex", "data-|d(ryj");
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertEquals("isindex", attribute0.getKey());
      assertEquals("data-|d(ryj", attribute0.getValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("noresize", "=r+AGt)MQ0ZtNX(ph", attributes0);
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertEquals("=r+AGt)MQ0ZtNX(ph", attribute0.getValue());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = Attribute.shouldCollapseAttribute("readonly", "", document_OutputSettings0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockFile mockFile0 = new MockFile("-e0)].w1f0m7,;v@", "=\"");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockPrintWriter0, 3933);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Attribute.html((String) null, "body", (Appendable) bufferedWriter0, document_OutputSettings1);
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      boolean boolean0 = Attribute.isDataAttribute("data-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Attribute attribute0 = new Attribute("isindex", "data-|d(ryj");
      assertEquals("isindex", attribute0.getKey());
      
      attribute0.setKey("data-|d(ryj");
      boolean boolean0 = attribute0.isDataAttribute();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      String[] stringArray0 = new String[4];
      Attribute attribute0 = new Attribute("isindex", stringArray0[3], attributes0);
      String string0 = attribute0.toString();
      assertEquals("isindex", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("isindex", "data-n|d!(ryj");
      attributes0.put(attribute0);
      String string0 = attribute0.setValue("isindex");
      assertEquals("data-n|d!(ryj", string0);
      assertEquals("isindex", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("HVudGaJ", "HVudGaJ", attributes0);
      String string0 = attribute0.setValue("HVudGaJ");
      assertEquals("", string0);
      assertEquals("HVudGaJ", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("n|D!(Ryj", "n|D!(Ryj");
      Attributes attributes1 = attributes0.put(attribute0);
      attributes1.put("n|D!(Ryj", false);
      attribute0.setKey("reado");
      assertEquals("n|D!(Ryj", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Attribute attribute0 = Attribute.createFromEncoded("<[pctJ", "required");
      boolean boolean0 = attribute0.shouldCollapseAttribute(document_OutputSettings0);
      assertFalse(boolean0);
      assertEquals("required", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Attribute attribute0 = new Attribute("HVudGaJ", "HVudGaJ");
      String string0 = attribute0.toString();
      assertEquals("HVudGaJ=\"HVudGaJ\"", string0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Attribute attribute0 = new Attribute("isindex", "data-|d(ryj");
      boolean boolean0 = attribute0.isDataAttribute();
      assertEquals("data-|d(ryj", attribute0.getValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("isindex", "data-|d(ryj");
      attributes0.put(attribute0);
      assertEquals("isindex", attribute0.getKey());
      
      attribute0.setKey("data-|d(ryj");
      assertEquals("data-|d(ryj", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("GyZrS`]5a*p1'W", "GyZrS`]5a*p1'W");
      String string0 = attribute0.getKey();
      assertEquals("GyZrS`]5a*p1'W", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Attribute attribute0 = new Attribute("isindex", "data-|d(ryj");
      String string0 = attribute0.html();
      assertEquals("isindex=\"data-|d(ryj\"", string0);
  }
}
