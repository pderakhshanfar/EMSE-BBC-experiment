/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 02:01:05 GMT 2020
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.PipedWriter;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Attribute_ESTest extends Attribute_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("allowfullscreen", "allowfullscreen");
      String string0 = attribute0.html();
      assertEquals("allowfullscreen", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Attribute attribute0 = new Attribute("allowfullscreen", "YNuH;w6^=i=Y60Y=\"Y\"");
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertTrue(boolean0);
      assertEquals("YNuH;w6^=i=Y60Y=\"Y\"", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("pNX", "@G)zXeHk~q[W");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Ph_s");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      attribute0.html((Appendable) mockPrintWriter0, document_OutputSettings0);
      assertEquals("pNX", attribute0.getKey());
      assertEquals("@G)zXeHk~q[W", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Attribute attribute0 = Attribute.createFromEncoded("readonly", "readonly");
      boolean boolean0 = attribute0.shouldCollapseAttribute(document_OutputSettings0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("9iHMsn&CEZ;A$E", ">p'", attributes0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = attribute0.shouldCollapseAttribute(document_OutputSettings0);
      assertFalse(boolean0);
      assertEquals(">p'", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      boolean boolean0 = Attribute.isDataAttribute("data-5$+7`<f`mSl#.t");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      boolean boolean0 = Attribute.isBooleanAttribute("formnovalidate");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean boolean0 = Attribute.isBooleanAttribute("3j`dcrj ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("data-5$+7`<f`mSl#.t", "\"T", attributes0);
      String string0 = attribute0.getValue();
      assertEquals("\"T", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Attribute attribute0 = new Attribute("6x<T<@(H<d*", (String) null);
      String string0 = attribute0.getValue();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.shouldCollapseAttribute("b j-44y", "{&gd", (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("allowfullscreen", "allowfullscreen");
      // Undeclared exception!
      try { 
        attribute0.setValue("allowfullscreen");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded("data-listing", "");
      attributes0.put(attribute0);
      String[] stringArray0 = new String[0];
      attributes0.keys = stringArray0;
      // Undeclared exception!
      try { 
        attribute0.setValue("=//WS");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("nohref", "");
      // Undeclared exception!
      try { 
        attribute0.setKey("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.clone();
      Attribute attribute0 = new Attribute("datb-", "}mo'*$t9(sj");
      attributes1.put(attribute0);
      String[] stringArray0 = new String[0];
      attributes1.keys = stringArray0;
      // Undeclared exception!
      try { 
        attribute0.setKey("}mo'*$t9(sj");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.isDataAttribute((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.isBooleanAttribute((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "3J`dcrJ} ");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        Attribute.html("3J`dcrJ} ", "3J`dcrJ} ", (Appendable) charBuffer0, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        Attribute.html("$I{A{7", "v'}k{@X5_<v", (Appendable) null, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        Attribute.html("seamless", "l", (Appendable) pipedWriter0, (Document.OutputSettings) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Attribute attribute0 = new Attribute("i33P", "\"~ CkYf='(!3Tb>vp");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "i33P");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        attribute0.html((Appendable) charBuffer0, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("koi$fMqIEw>g", "html");
      CharBuffer charBuffer0 = CharBuffer.allocate(17);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        attribute0.html((Appendable) charBuffer0, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded(">Vzpk}", ">Vzpk}");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        attribute0.html((Appendable) null, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.createFromEncoded(">Vzpk}=\">Vzpk}\"", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.createFromEncoded((String) null, "version");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute((String) null, "s4h[~w(9Egq16t4", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute("", "nFgGV");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Attribute attribute0 = new Attribute("rpt^", "rpt^");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        attribute0.html((Appendable) pipedWriter0, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("YNuH;w6^=i=Y60Y", " k]:4 ubAV");
      attribute0.hashCode();
      assertEquals(" k]:4 ubAV", attribute0.getValue());
      assertEquals("YNuH;w6^=i=Y60Y", attribute0.getKey());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("$I{A{7", (String) null, attributes0);
      attribute0.hashCode();
      assertEquals("", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("$]2t\"/.yk4u9j,", "$]2t\"/.yk4u9j,", attributes0);
      Attribute attribute1 = new Attribute("$]2t\"/.yk4u9j,", (String) null, attributes0);
      boolean boolean0 = attribute1.equals(attribute0);
      //  // Unstable assertion: assertTrue(attribute0.equals((Object)attribute1));
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("3J`dcrJ ", "3J`dcrJ ");
      Attribute attribute1 = attribute0.clone();
      boolean boolean0 = attribute0.equals(attribute1);
      assertTrue(boolean0);
      assertEquals("3J`dcrJ ", attribute1.getValue());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("x@!", "$I{A{7");
      Attribute attribute1 = new Attribute("9iHMs", "frameset", (Attributes) null);
      boolean boolean0 = attribute0.equals(attribute1);
      assertFalse(boolean0);
      assertEquals("$I{A{7", attribute0.getValue());
      assertEquals("x@!", attribute0.getKey());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("YNuH;w6^=i=Y60Y", "Y");
      boolean boolean0 = attribute0.equals((Object) null);
      assertEquals("YNuH;w6^=i=Y60Y", attribute0.getKey());
      assertEquals("Y", attribute0.getValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("$I{A{7", "$I{A{7");
      boolean boolean0 = attribute0.equals(attribute0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("Y", "Y");
      boolean boolean0 = attribute0.equals("Y");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Attribute attribute0 = new Attribute("6x<T<@(H<d*", (String) null);
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("9iHMsn&CEZ;A$E", ">p'", attributes0);
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertEquals(">p'", attribute0.getValue());
      assertFalse(boolean0);
      assertEquals("9iHMsn&CEZ;A$E", attribute0.getKey());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Attribute attribute0 = new Attribute("defer", "3J`dcrJ");
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertTrue(boolean0);
      assertEquals("3J`dcrJ", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = Attribute.shouldCollapseAttribute("org.jsoup.nodes.Entities$1", "", document_OutputSettings0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = Attribute.shouldCollapseAttribute("KF%", (String) null, document_OutputSettings0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      char[] charArray0 = new char[7];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      ByteBuffer byteBuffer0 = charset0.encode(charBuffer0);
      CharBuffer charBuffer1 = charset0.decode(byteBuffer0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      // Undeclared exception!
      try { 
        Attribute.html("!", "checked", (Appendable) charBuffer1, document_OutputSettings1);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      boolean boolean0 = Attribute.isDataAttribute("data-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("data-5$+7`<f`mSl#.t", "\"T", attributes0);
      boolean boolean0 = attribute0.isDataAttribute();
      assertTrue(boolean0);
      assertEquals("\"T", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockFileWriter mockFileWriter0 = new MockFileWriter("v'}k{@X5_<v", false);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Attribute.html("noresize", "noresize", (Appendable) mockFileWriter0, document_OutputSettings0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute(" k]:4 ubav", "Y0L", attributes0);
      attribute0.setValue("defer");
      assertEquals("defer", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("data-YNuH;w6^=i=Y60Y", "data-YNuH;w6^=i=Y60Y");
      Attributes attributes0 = new Attributes();
      attributes0.put(attribute0);
      attribute0.setValue("data-YNuH;w6^=i=Y60Y=\"data-YNuH;w6^=i=Y60Y\"");
      assertEquals("data-YNuH;w6^=i=Y60Y=\"data-YNuH;w6^=i=Y60Y\"", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded("6x<T<@(H<d*", "|J}84IoxNZXu6zM8_");
      attributes0.put(attribute0);
      assertEquals("6x<T<@(H<d*", attribute0.getKey());
      
      attribute0.setKey("T8k,WYPV+\"xJ.x)SSw");
      assertEquals("|J}84IoxNZXu6zM8_", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("datb-", "}mo'*$t9(sj");
      attribute0.parent = attributes0;
      assertEquals("datb-", attribute0.getKey());
      
      attribute0.setKey("}mo'*$t9(sj");
      assertEquals("}mo'*$t9(sj", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("pNX", "@G)zXeHk~q[W");
      assertEquals("pNX", attribute0.getKey());
      
      attribute0.setKey("pNX=\"@G)zXeHk~q[W\"");
      assertEquals("@G)zXeHk~q[W", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("Y", "Y");
      // Undeclared exception!
      try { 
        attribute0.shouldCollapseAttribute((Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("Y", "Y");
      String string0 = attribute0.toString();
      assertEquals("Y=\"Y\"", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Attribute attribute0 = new Attribute("aaya-", (String) null);
      Attribute attribute1 = attribute0.clone();
      boolean boolean0 = attribute0.equals(attribute1);
      assertTrue(boolean0);
      assertEquals("", attribute1.getValue());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("Y", "Y");
      boolean boolean0 = attribute0.isDataAttribute();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("Y", "Y");
      attribute0.getKey();
  }
}
