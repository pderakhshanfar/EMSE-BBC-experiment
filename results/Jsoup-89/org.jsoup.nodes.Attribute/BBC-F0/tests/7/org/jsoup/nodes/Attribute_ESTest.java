/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 01:59:35 GMT 2020
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PipedWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Attribute_ESTest extends Attribute_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = Attribute.isBooleanAttribute("allowfullscreen");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Attribute attribute0 = new Attribute("async", "async");
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Attribute attribute0 = new Attribute("Mark invalid", "9=>_qrd[v##0");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("9=>_qrd[v##0", true);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(dataOutputStream0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      attribute0.html((Appendable) outputStreamWriter0, document_OutputSettings0);
      assertEquals("Mark invalid", attribute0.getKey());
      assertEquals("9=>_qrd[v##0", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = Attribute.shouldCollapseAttribute("t]_*2jn=,T=K+=\"novalidate\"", (String) null, document_OutputSettings0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = Attribute.shouldCollapseAttribute("FON|%9Y3V`iT", " />", document_OutputSettings0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      boolean boolean0 = Attribute.isDataAttribute("data-<-4jZ.bI:5%J");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("_wVwJ$0 #jY=+9P0", "T(Z", attributes0);
      boolean boolean0 = attribute0.isDataAttribute();
      assertFalse(boolean0);
      assertEquals("T(Z", attribute0.getValue());
      assertEquals("_wVwJ$0 #jY=+9P0", attribute0.getKey());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean boolean0 = Attribute.isBooleanAttribute("typemustmatch");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = Attribute.isBooleanAttribute("data-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Attribute attribute0 = new Attribute("t]_*2jn=,T=K+", "novalidate", (Attributes) null);
      String string0 = attribute0.getValue();
      assertEquals("t]_*2jn=,T=K+", attribute0.getKey());
      assertEquals("novalidate", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("%`lYiS64y^PdjqL", "");
      String string0 = attribute0.getValue();
      assertEquals("%`lYiS64y^PdjqL", attribute0.getKey());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Attribute attribute0 = new Attribute("Mark invalid", "Mark invalid");
      // Undeclared exception!
      try { 
        attribute0.shouldCollapseAttribute((Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.shouldCollapseAttribute("}.:I5f%l", "muted", (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("readonly", "v.\"|R@,Qjkj6o%Oq");
      Attributes attributes2 = attributes1.put("v.\"|R@,Qjkj6o%Oq", true);
      Attributes attributes3 = attributes2.clone();
      Attribute attribute0 = new Attribute("v.\"|R@,Qjkj6o%Oq", "v.\"|R@,Qjkj6o%Oq", attributes3);
      String[] stringArray0 = new String[1];
      attributes3.vals = stringArray0;
      // Undeclared exception!
      try { 
        attribute0.setValue("v.\"|R@,Qjkj6o%Oq");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded(" />", "");
      // Undeclared exception!
      try { 
        attribute0.setKey("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Attribute attribute0 = new Attribute("W3(&'@KWjqIIY`RS", "Y>yS");
      Attributes attributes0 = new Attributes();
      attributes0.put(attribute0);
      String[] stringArray0 = new String[0];
      attributes0.keys = stringArray0;
      // Undeclared exception!
      try { 
        attribute0.setKey("W]");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.isDataAttribute((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.isBooleanAttribute((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "data--4jZ.b$:5%J");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        Attribute.html("data--4jZ.b$:5%J", "data--4jZ.b$:5%J", (Appendable) charBuffer0, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[6];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        Attribute.html("data-+_Kt<qQGT6:0.P", "{W~(I", (Appendable) charBuffer0, (Document.OutputSettings) null);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        Attribute.html("eIb?g", "eIb?g", (Appendable) null, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockFile mockFile0 = new MockFile(":}>D9B,p,,[4VG%LaJ");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      mockFileWriter0.close();
      try { 
        Attribute.html(":}>D9B,p,,[4VG%LaJ", "h';QY<D6<E4g~h", (Appendable) mockFileWriter0, (Document.OutputSettings) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("Mark invali)", "Mark invali)");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Mark invali)");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        attribute0.html((Appendable) charBuffer0, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("required", "&gt;");
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        attribute0.html((Appendable) charBuffer0, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Attribute attribute0 = new Attribute("org.jsoup.select.Evaluator$IndexEquals", "F)GzTO#Pc0Fi");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        attribute0.html((Appendable) pipedWriter0, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.createFromEncoded((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.createFromEncoded("", "$VALUES");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute("", (String) null, attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockFile mockFile0 = new MockFile("async", "readonly");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Attribute.html("async", "async", (Appendable) mockPrintStream0, document_OutputSettings0);
      assertEquals(5L, mockFile0.length());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("v", "v", attributes0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        attribute0.html((Appendable) null, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("m", (String) null, attributes0);
      attribute0.hashCode();
      assertEquals("", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("v", "v", attributes0);
      attribute0.hashCode();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Attribute attribute0 = new Attribute("=tYqBxXPK&#", (String) null);
      Attribute attribute1 = attribute0.clone();
      boolean boolean0 = attribute0.equals(attribute1);
      assertTrue(boolean0);
      assertEquals("", attribute1.getValue());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Attribute attribute0 = new Attribute("AfterDoctypePublicKeyword", (String) null, (Attributes) null);
      Attribute attribute1 = new Attribute("AfterDoctypePublicKeyword", "=tGYqBxXPK&#");
      boolean boolean0 = attribute0.equals(attribute1);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertTrue(attribute1.equals((Object)attribute0));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("v", "v", attributes0);
      Attribute attribute1 = new Attribute("v=\"v\"", "?]7`2>Jf85f", attributes0);
      boolean boolean0 = attribute0.equals(attribute1);
      assertEquals("v=\"v\"", attribute1.getKey());
      assertFalse(boolean0);
      assertEquals("?]7`2>Jf85f", attribute1.getValue());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Attribute attribute0 = new Attribute("W3(&'@KWjqIIY`RS", "Y>yS");
      boolean boolean0 = attribute0.equals("Y>yS");
      assertEquals("Y>yS", attribute0.getValue());
      assertFalse(boolean0);
      assertEquals("W3(&'@KWjqIIY`RS", attribute0.getKey());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Attribute attribute0 = new Attribute("x{\"{v-[duhj%},wn", "x{\"{v-[duhj%},wn");
      boolean boolean0 = attribute0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("Ma1)k invali)", "Ma1)k invali)");
      boolean boolean0 = attribute0.equals(attribute0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("v", "v", attributes0);
      Attribute attribute1 = attribute0.clone();
      boolean boolean0 = attribute0.equals(attribute1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded("org.jsoup.nodes.Entities$EscapeMode", "org.jsoup.nodes.Entities$EscapeMode");
      attributes0.put(attribute0);
      attribute0.setValue((String) null);
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertEquals("", attribute0.getValue());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Attribute attribute0 = new Attribute("W3(&'@KWjqIIY`RS", "Y>yS");
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertEquals("Y>yS", attribute0.getValue());
      assertFalse(boolean0);
      assertEquals("W3(&'@KWjqIIY`RS", attribute0.getKey());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("allowfullscreen", "X,X");
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertTrue(boolean0);
      assertEquals("X,X", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("selected", "selected");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = attribute0.shouldCollapseAttribute(document_OutputSettings0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("%`lYiS64y^PdjqL", "");
      String string0 = attribute0.toString();
      assertEquals("%`lYiS64y^PdjqL=\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockFile mockFile0 = new MockFile("ak in");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Attribute.html("org.jsoup.nodes.Attributes$Dataset", "data--4jZ.b$:5%J", (Appendable) mockPrintWriter0, document_OutputSettings0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      boolean boolean0 = Attribute.isDataAttribute("data-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("m", (String) null, attributes0);
      String string0 = attribute0.html();
      assertEquals("m", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("*@$I5", "org.jsoup.parser.Token$Tag", attributes0);
      assertEquals("org.jsoup.parser.Token$Tag", attribute0.getValue());
      
      attribute0.setValue("*@$I5");
      assertEquals("*@$I5", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("_wVwJ$0 #jY=+9P0", "T(Z", attributes0);
      assertEquals("_wVwJ$0 #jY=+9P0", attribute0.getKey());
      
      attribute0.setKey(",E}AuQ'/L'-8");
      assertEquals("T(Z", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Attribute attribute0 = new Attribute("t]_*2jn=,T=K+", "novalidate", (Attributes) null);
      assertEquals("t]_*2jn=,T=K+", attribute0.getKey());
      
      attribute0.setKey("t]_*2jn=,T=K+");
      assertEquals("novalidate", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded(" />", "MT`$J?n1m9!-wG");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = attribute0.shouldCollapseAttribute(document_OutputSettings0);
      assertEquals("/>", attribute0.getKey());
      assertFalse(boolean0);
      assertEquals("MT`$J?n1m9!-wG", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Attribute attribute0 = new Attribute("W3(&'@KWjqIIY`RS", "Y>yS");
      Attributes attributes0 = new Attributes();
      attributes0.put(attribute0);
      assertEquals("W3(&'@KWjqIIY`RS", attribute0.getKey());
      
      attribute0.setKey("W]");
      assertEquals("Y>yS", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("data-<-4jZ.bI:5%J", "data-<-4jZ.bI:5%J");
      attribute0.isDataAttribute();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Attribute attribute0 = new Attribute("*R4b{B0", "*R4b{B0");
      String string0 = attribute0.getKey();
      assertEquals("*R4b{B0", string0);
  }
}
