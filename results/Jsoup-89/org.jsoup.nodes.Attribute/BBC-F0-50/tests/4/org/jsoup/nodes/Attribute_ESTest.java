/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 22:28:22 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Attribute_ESTest extends Attribute_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("disabled", "readonly");
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertEquals("disabled", attribute0.getKey());
      assertTrue(boolean0);
      assertEquals("readonly", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("jE{", "#k.j-@zP", attributes0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      MockPrintStream mockPrintStream0 = new MockPrintStream("B<^ kDm");
      attribute0.html((Appendable) mockPrintStream0, document_OutputSettings0);
      assertEquals("#k.j-@zP", attribute0.getValue());
      assertEquals("jE{", attribute0.getKey());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = Attribute.shouldCollapseAttribute("open", "open", document_OutputSettings0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = Attribute.shouldCollapseAttribute(" xgNID`hpf%", "cQ<l", document_OutputSettings0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      boolean boolean0 = Attribute.isDataAttribute("nis/D]");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("jE{", "#k.j-@zP", attributes0);
      assertEquals("jE{", attribute0.getKey());
      
      attribute0.setKey("data-ybva@b");
      boolean boolean0 = attribute0.isDataAttribute();
      assertTrue(boolean0);
      assertEquals("#k.j-@zP", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      boolean boolean0 = Attribute.isBooleanAttribute("seamless");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean boolean0 = Attribute.isBooleanAttribute(":q3L]K9@~");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("dt", "dt");
      String string0 = attribute0.getValue();
      assertEquals("dt", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("#`R/ ", "");
      String string0 = attribute0.getValue();
      assertEquals("", string0);
      assertEquals("#`R/", attribute0.getKey());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("~PI~[um,?y", "&gt;");
      String string0 = attribute0.getKey();
      assertEquals(">", attribute0.getValue());
      assertEquals("~PI~[um,?y", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Attribute attribute0 = new Attribute("-{?9Jg]:C3", "-{?9Jg]:C3");
      // Undeclared exception!
      try { 
        attribute0.shouldCollapseAttribute((Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        Attribute.shouldCollapseAttribute((String) null, "", document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Attribute attribute0 = new Attribute("Y0", "s[dpSmc){Me");
      // Undeclared exception!
      try { 
        attribute0.setValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("typemustmatch", "typemustmatch");
      Attribute attribute0 = Attribute.createFromEncoded("A}>\"t_sx,%", "XZ=nzU{");
      Attributes attributes2 = attributes1.put(attribute0);
      Attributes attributes3 = attributes2.clone();
      Attribute attribute1 = new Attribute("dir", "", attributes3);
      String[] stringArray0 = new String[1];
      attributes3.keys = stringArray0;
      // Undeclared exception!
      try { 
        attribute1.setValue("A}>\"t_sx,%");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("!>J+/d;ZXS>X$&AI(l?", ";7/jqw.oyw^kb");
      attributes0.keys = null;
      Attribute attribute0 = new Attribute(";7/jqw.oyw^kb", ";7/jqw.oyw^kb", attributes1);
      // Undeclared exception!
      try { 
        attribute0.setKey("bdi");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("VB&/S:>E'$Cw", "VB&/S:>E'$Cw", attributes0);
      // Undeclared exception!
      try { 
        attribute0.setKey("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("g\"&22hnlg+,xh}:,", "Y.<r?/c/?pF,3*");
      String[] stringArray0 = new String[0];
      attributes1.keys = stringArray0;
      Attribute attribute0 = new Attribute("\";%_C~IlA,-YRl", "\";%_C~IlA,-YRl", attributes1);
      // Undeclared exception!
      try { 
        attribute0.setKey("\";%_C~IlA,-YRl");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.isDataAttribute((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.isBooleanAttribute((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Must be false");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        Attribute.html("seamless", "seamless", (Appendable) charBuffer0, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      char[] charArray0 = new char[8];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        Attribute.html("-{?9Jg]:C3", (String) null, (Appendable) charBuffer0, (Document.OutputSettings) null);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(4775);
      // Undeclared exception!
      try { 
        Attribute.html("-{?9Jg]:C3=\"-{?9Jg]:C3\"", "-{?9Jg]:C3", (Appendable) stringWriter0, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        Attribute.html("", "", (Appendable) pipedWriter0, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("-{?9Jg]:C3", "-{?9Jg]:C3");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        attribute0.html((Appendable) charBuffer0, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("6W", "6W");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        attribute0.html((Appendable) null, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("{a8x", "{a8x", attributes0);
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        attribute0.html((Appendable) pipedWriter0, (Document.OutputSettings) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.createFromEncoded("Ta:r(s0_;eowLtl9", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.createFromEncoded("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute("", "amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      StringWriter stringWriter0 = new StringWriter(4775);
      Attribute.html("|PizS#QktS^(.wN^)S=\"|PizS#QktS^(.wN^)S\"", "O", (Appendable) stringWriter0, document_OutputSettings0);
      assertEquals("|PizS#QktS^(.wN^)S=\"|PizS#QktS^(.wN^)S\"=\"O\"", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("/ FyGuwX1(*DDaP", ")2;00>GC\"");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ")2;00>GC\"");
      // Undeclared exception!
      try { 
        attribute0.html((Appendable) charBuffer0, (Document.OutputSettings) null);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Attribute attribute0 = new Attribute("cQ<l", "cQ<l");
      String string0 = attribute0.html();
      assertEquals("cQ<l=\"cQ<l\"", string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("YbvaB>aH3-Y", "&T`QP5NM;y{fTN'Q>", attributes0);
      assertEquals("&T`QP5NM;y{fTN'Q>", attribute0.getValue());
      
      attribute0.setValue((String) null);
      attribute0.hashCode();
      assertEquals("YbvaB>aH3-Y", attribute0.getKey());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("O", "data-BaseURI must not be null");
      attribute0.hashCode();
      assertEquals("O", attribute0.getKey());
      assertEquals("data-BaseURI must not be null", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("&W6t`qh5nm;y{ftn'q>", (String) null, attributes0);
      Attribute attribute1 = new Attribute("&W6t`qh5nm;y{ftn'q>", "&W6t`qh5nm;y{ftn'q>");
      boolean boolean0 = attribute0.equals(attribute1);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertTrue(attribute1.equals((Object)attribute0));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("-{?9Jg]:C3", "-{?9Jg]:C3");
      Attribute attribute1 = attribute0.clone();
      boolean boolean0 = attribute0.equals(attribute1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Attribute attribute0 = new Attribute("allowfullscreen", "allowfullscreen");
      Object object0 = new Object();
      boolean boolean0 = attribute0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("jE{", "#k.j-@zP", attributes0);
      boolean boolean0 = attribute0.equals((Object) null);
      assertEquals("#k.j-@zP", attribute0.getValue());
      assertEquals("jE{", attribute0.getKey());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("disabled", "readonly");
      boolean boolean0 = attribute0.equals(attribute0);
      assertEquals("disabled", attribute0.getKey());
      assertEquals("readonly", attribute0.getValue());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Attribute attribute0 = new Attribute("truespeed", "dfn");
      Attribute attribute1 = new Attribute("org.jsoup.select.Evaluator$IndexEquals", "n!qX_5UYnK");
      boolean boolean0 = attribute1.equals(attribute0);
      assertFalse(boolean0);
      assertEquals("n!qX_5UYnK", attribute1.getValue());
      assertEquals("org.jsoup.select.Evaluator$IndexEquals", attribute1.getKey());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("Q-daE", ":K?/;Qo/", attributes0);
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertFalse(boolean0);
      assertEquals("Q-daE", attribute0.getKey());
      assertEquals(":K?/;Qo/", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("data-a`yze;b(a}5", "jE{", attributes0);
      assertEquals("data-a`yze;b(a}5", attribute0.getKey());
      
      attribute0.setKey("allowfullscreen");
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(4775);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Attribute.html("nowrap", "", (Appendable) stringWriter0, document_OutputSettings0);
      assertEquals("nowrap", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Attribute attribute0 = new Attribute("=\"", "typemustmatch", attributes0);
      boolean boolean0 = attribute0.shouldCollapseAttribute(document_OutputSettings0);
      assertEquals("typemustmatch", attribute0.getValue());
      assertFalse(boolean0);
      assertEquals("=\"", attribute0.getKey());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("dt", "dt");
      attribute0.setKey("data-");
      boolean boolean0 = attribute0.isDataAttribute();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      boolean boolean0 = Attribute.isDataAttribute("data-data-");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Attribute attribute0 = new Attribute("allowfullscreen", "allowfullscreen");
      String string0 = attribute0.toString();
      assertEquals("allowfullscreen", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("O", "data-BaseURI must not be null");
      Attributes attributes0 = new Attributes();
      attributes0.put(attribute0);
      attribute0.setValue("summary");
      assertEquals("summary", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("Q-daE", ":K?/;Qo/", attributes0);
      assertEquals(":K?/;Qo/", attribute0.getValue());
      
      attribute0.setValue((String) null);
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("Q-daE", ":K?/;Qo/", attributes0);
      attributes0.put(attribute0);
      assertEquals("Q-daE", attribute0.getKey());
      
      attribute0.setKey(":K?/;Qo/");
      assertEquals(":K?/;Qo/", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Attribute attribute0 = new Attribute("plaintext", (String) null);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = attribute0.shouldCollapseAttribute(document_OutputSettings0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("&W6t`qh5nm;y{ftn'q>", (String) null, attributes0);
      Attribute attribute1 = attribute0.clone();
      boolean boolean0 = attribute1.equals(attribute0);
      assertEquals("", attribute1.getValue());
      assertTrue(boolean0);
  }
}
