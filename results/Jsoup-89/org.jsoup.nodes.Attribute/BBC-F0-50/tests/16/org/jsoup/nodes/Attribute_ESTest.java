/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 02:58:32 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.PipedWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Attribute_ESTest extends Attribute_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Attribute attribute0 = new Attribute("async", "async", (Attributes) null);
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Attribute attribute0 = new Attribute("h?@>xRNOo*~Z", ":CH3%_?w6-CtyT;)$%Q");
      MockFile mockFile0 = new MockFile("{b/OyM/HPQ1J*8+5RC");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      attribute0.html((Appendable) mockFileWriter0, document_OutputSettings0);
      assertEquals(":CH3%_?w6-CtyT;)$%Q", attribute0.getValue());
      assertEquals("h?@>xRNOo*~Z", attribute0.getKey());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("==3Gh]J", "data-");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = attribute0.shouldCollapseAttribute(document_OutputSettings0);
      assertEquals("==3Gh]J", attribute0.getKey());
      assertEquals("data-", attribute0.getValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = Attribute.shouldCollapseAttribute("h}%(s,Na3", (String) null, document_OutputSettings0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      boolean boolean0 = Attribute.isDataAttribute("wRYa23oy\"Z");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("data-N6HZ8", "wRYa23oy\"Z");
      boolean boolean0 = attribute0.isDataAttribute();
      assertEquals("wRYa23oy\"Z", attribute0.getValue());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      boolean boolean0 = Attribute.isBooleanAttribute("multiple");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean boolean0 = Attribute.isBooleanAttribute("N6HZ8");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("^=", "^=");
      String string0 = attribute0.getValue();
      assertEquals("^=", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("F$f'95# <x", "");
      String string0 = attribute0.getValue();
      assertEquals("F$f'95# <x", attribute0.getKey());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("org.jsoup.nodes.Attribute", "org.jsoup.nodes.Attribute");
      String string0 = attribute0.getKey();
      assertEquals("org.jsoup.nodes.Attribute", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("=\"", "=\"");
      // Undeclared exception!
      try { 
        attribute0.shouldCollapseAttribute((Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.shouldCollapseAttribute("==3Gh]J", "&zHH?He;2u!3e", (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("limitedQuirks", "/6rR,^RD");
      Attributes attributes2 = attributes1.put("extended", true);
      Attribute attribute0 = new Attribute("limitedQuirks", "UQbBM6=L5]~[!`H", attributes2);
      attributes2.vals = null;
      // Undeclared exception!
      try { 
        attribute0.setValue("limitedQuirks");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded("data-", "data-");
      Attributes attributes1 = attributes0.put(attribute0);
      Attributes attributes2 = attributes1.put("'l8Y#l$F0CE1~H&Mc", true);
      String[] stringArray0 = new String[0];
      attributes2.vals = stringArray0;
      // Undeclared exception!
      try { 
        attribute0.setValue("optgroup");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("85[w", "data-eata-");
      Attributes attributes1 = attributes0.put(attribute0);
      Attributes attributes2 = attributes1.clone();
      Attribute attribute1 = new Attribute("85[w", "btxfn'f,r@'b#,%u", attributes2);
      attributes2.keys = null;
      // Undeclared exception!
      try { 
        attribute1.setKey("extended");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Attribute attribute0 = new Attribute("|(zDd[Io]Myu+", "~wEhj3]Hl}A&{;C");
      // Undeclared exception!
      try { 
        attribute0.setKey("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("repla", "q", attributes0);
      Attributes attributes1 = attributes0.put(attribute0);
      String[] stringArray0 = new String[0];
      attributes1.keys = stringArray0;
      // Undeclared exception!
      try { 
        attribute0.setKey("q");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.isDataAttribute((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.isBooleanAttribute((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "ismap");
      // Undeclared exception!
      try { 
        Attribute.html("ismap", "data-jzy,", (Appendable) charBuffer0, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        Attribute.html(",H'q.VXCn<\n", "nohref=\",H'q.VXCn<\n\"", (Appendable) null, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        Attribute.html("nxE9zEVX.j2", "2!dZ8hJl #", (Appendable) pipedWriter0, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Attribute attribute0 = new Attribute("jZY,6LEFU", "W?=x}Jq;vQZC");
      char[] charArray0 = new char[3];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        attribute0.html((Appendable) charBuffer0, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("^+<v1Hjf)b", "^+<v1Hjf)b");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        attribute0.html((Appendable) null, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Attribute attribute0 = new Attribute("Y,Gu5CM7h_?-D`U*", "@wB/U)R']HV%[Ssd1", (Attributes) null);
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        attribute0.html((Appendable) pipedWriter0, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.createFromEncoded("", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.createFromEncoded("", "OGqscDj3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute("", "", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("#");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Attribute.html("cG*}r!0pu(%_u7@v", (String) null, (Appendable) mockPrintWriter0, document_OutputSettings0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Attribute attribute0 = new Attribute("data-M~nZHpZy>B.&!c", "data-M~nZHpZy>B.&!c", (Attributes) null);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "data-M~nZHpZy>B.&!c=\"data-M~nZHpZy>B.&amp;!c\"");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        attribute0.html((Appendable) charBuffer0, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("lF$f'95# <x", "Y~gf~tf-");
      attributes0.put(attribute0);
      attribute0.setValue((String) null);
      attribute0.hashCode();
      assertEquals("", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Attribute attribute0 = new Attribute("data-M~nZHpZy>B.&!c", "data-M~nZHpZy>B.&!c", (Attributes) null);
      attribute0.hashCode();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Attribute attribute0 = new Attribute("OGqscDj3", (String) null);
      Attribute attribute1 = Attribute.createFromEncoded("OGqscDj3", "OGqscDj3");
      boolean boolean0 = attribute0.equals(attribute1);
      //  // Unstable assertion: assertTrue(attribute1.equals((Object)attribute0));
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Attribute attribute0 = new Attribute("OGqscDj3", (String) null);
      Attribute attribute1 = attribute0.clone();
      boolean boolean0 = attribute0.equals(attribute1);
      assertEquals("", attribute1.getValue());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Attribute attribute0 = new Attribute("nohref", ",H'q.VXCn<\n");
      Attributes attributes0 = new Attributes();
      Attribute attribute1 = new Attribute(",H'q.VXCn<\n", "", attributes0);
      boolean boolean0 = attribute0.equals(attribute1);
      assertFalse(boolean0);
      assertEquals("", attribute1.getValue());
      assertEquals(",H'q.VXCn<", attribute1.getKey());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Attribute attribute0 = new Attribute("data-$:QY@!L(At0ZY-2~;", "?");
      Attribute attribute1 = attribute0.clone();
      boolean boolean0 = attribute0.equals(attribute1);
      assertEquals("data-$:QY@!L(At0ZY-2~;", attribute1.getKey());
      assertTrue(boolean0);
      assertEquals("?", attribute1.getValue());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("z@KLAx", "", attributes0);
      boolean boolean0 = attribute0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals("z@KLAx", attribute0.getKey());
      assertEquals("", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Attribute attribute0 = new Attribute("OGqscDj3", (String) null);
      boolean boolean0 = attribute0.equals(attribute0);
      assertEquals("", attribute0.getValue());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Attribute attribute0 = new Attribute("85[w", "data-eata-");
      Object object0 = new Object();
      boolean boolean0 = attribute0.equals(object0);
      assertFalse(boolean0);
      assertEquals("data-eata-", attribute0.getValue());
      assertEquals("85[w", attribute0.getKey());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("lF$f'95# <x", "Y~gf~tf-");
      attributes0.put(attribute0);
      attribute0.setValue((String) null);
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertEquals("", attribute0.getValue());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Attribute attribute0 = new Attribute("data-$:QY@!L(At0ZY-2~;", "?");
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertEquals("?", attribute0.getValue());
      assertFalse(boolean0);
      assertEquals("data-$:QY@!L(At0ZY-2~;", attribute0.getKey());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Attribute attribute0 = new Attribute("allowfullscreen", "*)a6_D-Y");
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertTrue(boolean0);
      assertEquals("*)a6_D-Y", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = Attribute.shouldCollapseAttribute("Bzd}wnw#v", "", document_OutputSettings0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      char[] charArray0 = new char[5];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      // Undeclared exception!
      try { 
        Attribute.html((String) null, "p", (Appendable) charBuffer0, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("data-", "0t;gH#xRQ2xC@t");
      boolean boolean0 = attribute0.isDataAttribute();
      assertEquals("0t;gH#xRQ2xC@t", attribute0.getValue());
      assertEquals("data-", attribute0.getKey());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      boolean boolean0 = Attribute.isDataAttribute("data-$:QY@!L(At0ZY-2~;");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("allowfullscreen", "allowfullscreen");
      String string0 = attribute0.html();
      assertEquals("allowfullscreen", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("p", "", attributes0);
      attribute0.setValue("i");
      assertEquals("i", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("p", "", attributes0);
      assertEquals("p", attribute0.getKey());
      
      attribute0.setKey("l");
      assertEquals("", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("allowfullscreen", "allowfullscreen");
      attribute0.setKey("allowfullscreen");
      assertEquals("allowfullscreen", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Attribute attribute0 = new Attribute("J('}", (String) null);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = attribute0.shouldCollapseAttribute(document_OutputSettings0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("data-N6HZ8", "wRYa23oy\"Z");
      attribute0.toString();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("85[w", "data-eata-");
      attributes0.put(attribute0);
      assertEquals("85[w", attribute0.getKey());
      
      attribute0.setKey("extended");
      assertEquals("data-eata-", attribute0.getValue());
  }
}
