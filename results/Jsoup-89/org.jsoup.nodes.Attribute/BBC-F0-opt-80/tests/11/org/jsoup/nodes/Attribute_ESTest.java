/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 14:53:03 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.PipedWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Attribute_ESTest extends Attribute_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Attribute attribute0 = new Attribute("noresize", "main");
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertEquals("main", attribute0.getValue());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Attribute attribute0 = new Attribute("5mLx", ";P^N|`4iA]nw858");
      MockFile mockFile0 = new MockFile("5mLx");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      attribute0.html((Appendable) mockFileWriter0, document_OutputSettings0);
      assertEquals(";P^N|`4iA]nw858", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("B ,$s", (String) null, attributes0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = attribute0.shouldCollapseAttribute(document_OutputSettings0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Attribute attribute0 = new Attribute("Tg", "L0:#*$eF*+9i4kJa");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = attribute0.shouldCollapseAttribute(document_OutputSettings0);
      assertFalse(boolean0);
      assertEquals("L0:#*$eF*+9i4kJa", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("data-data-|M[0d", (String) null, attributes0);
      boolean boolean0 = attribute0.isDataAttribute();
      assertEquals("", attribute0.getValue());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      boolean boolean0 = Attribute.isBooleanAttribute("muted");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      boolean boolean0 = Attribute.isBooleanAttribute("-->");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Attribute attribute0 = new Attribute("1F#\"I~>GWdxo", "1F#\"I~>GWdxo");
      String string0 = attribute0.getValue();
      assertEquals("1F#\"I~>GWdxo", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Attribute attribute0 = new Attribute("Pattern sntPx erroR: ", "");
      String string0 = attribute0.getValue();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Attribute attribute0 = new Attribute("Tg", "L0:#*$eF*+9i4kJa");
      attribute0.getKey();
      assertEquals("L0:#*$eF*+9i4kJa", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.shouldCollapseAttribute("'", "='1)R4AInK", (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("inert", "inert");
      // Undeclared exception!
      try { 
        attribute0.setValue((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Attribute attribute0 = new Attribute("r", "r");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("r=\"r\"", "q");
      attribute0.parent = attributes1;
      String[] stringArray0 = new String[0];
      attributes1.keys = stringArray0;
      // Undeclared exception!
      try { 
        attribute0.setValue("V'#v@DvfE7%/");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("%K*=+IZ4^z4m1_", "%K*=+IZ4^z4m1_");
      Attributes attributes1 = attributes0.clone();
      Attribute attribute0 = new Attribute("%K*=+IZ4^z4m1_", "readonly", attributes1);
      attributes1.keys = null;
      // Undeclared exception!
      try { 
        attribute0.setKey("tt");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("org.jsoup.internal.StringUtil", "org.jsoup.internal.StringUtil", attributes0);
      // Undeclared exception!
      try { 
        attribute0.setKey((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("q", "q");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put(attribute0);
      String[] stringArray0 = new String[0];
      attributes1.keys = stringArray0;
      // Undeclared exception!
      try { 
        attribute0.setKey("q");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.isDataAttribute((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.isBooleanAttribute((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "&>)tL*a*>?K}yGn{");
      // Undeclared exception!
      try { 
        Attribute.html("&>)tL*a*>?K}yGn{", "&>)tL*a*>?K}yGn{", (Appendable) charBuffer0, (Document.OutputSettings) null);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      char[] charArray0 = new char[8];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        Attribute.html("allowfullscreen", "href", (Appendable) charBuffer0, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      // Undeclared exception!
      try { 
        Attribute.html("Q", "dir", (Appendable) charArrayWriter0, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        Attribute.html("ScriptDataEscapedLessthanSign", "vu>'\"NnS{/v|", (Appendable) pipedWriter0, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("allow", "TJLYT3", attributes0);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "TJLYT3");
      // Undeclared exception!
      try { 
        attribute0.html((Appendable) charBuffer0, (Document.OutputSettings) null);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Attribute attribute0 = new Attribute("Q", "V", (Attributes) null);
      // Undeclared exception!
      try { 
        attribute0.html((Appendable) null, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Attribute attribute0 = new Attribute("d{ta-", "d{ta-");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        attribute0.html((Appendable) pipedWriter0, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.createFromEncoded("ybeoe:(atoti", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.createFromEncoded("", "sortable");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute("", "&lt;", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute("", "async");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      MockFile mockFile0 = new MockFile("async", "\"pis}'[`1aiikooyi");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      Attribute.html("\"pis}'[`1aiikooyi", (String) null, (Appendable) mockFileWriter0, document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("*Fu*EgQ$=\"br\"");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Attribute.html("bn-u&qf7+j<|(", "5O<p", (Appendable) mockPrintStream0, document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Attribute attribute0 = new Attribute("V", "V", (Attributes) null);
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        attribute0.html((Appendable) charBuffer0, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Attribute attribute0 = new Attribute("D7CHQXXVv'", (String) null);
      attribute0.hashCode();
      assertEquals("", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Attribute attribute0 = new Attribute("q", "q");
      attribute0.hashCode();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("m(lg tl", "m(lg tl", attributes0);
      Attribute attribute1 = new Attribute("m(lg tl", (String) null, attributes0);
      boolean boolean0 = attribute1.equals(attribute0);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertTrue(attribute0.equals((Object)attribute1));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Attribute attribute0 = new Attribute("data-", (String) null);
      Attribute attribute1 = attribute0.clone();
      boolean boolean0 = attribute1.equals(attribute0);
      assertTrue(boolean0);
      assertEquals("", attribute1.getValue());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("$VALUES", "$VALUES");
      Attribute attribute1 = new Attribute("$VALUES", "$VALUES", attributes0);
      boolean boolean0 = attribute1.equals(attribute0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("rt", "$values", attributes0);
      boolean boolean0 = attribute0.equals(attributes0);
      assertFalse(boolean0);
      assertEquals("$values", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Attribute attribute0 = new Attribute("d%iHT yv*XJPf#", "hOm:BeEJ");
      boolean boolean0 = attribute0.equals((Object) null);
      assertEquals("hOm:BeEJ", attribute0.getValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("org.jsoup.internal.StringUtil", "org.jsoup.internal.StringUtil", attributes0);
      boolean boolean0 = attribute0.equals(attribute0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Attribute attribute0 = new Attribute("q", "q");
      Attribute attribute1 = new Attribute("r", "r");
      boolean boolean0 = attribute1.equals(attribute0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("data-data-|M[0d", (String) null, attributes0);
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Attribute attribute0 = new Attribute("$VALUES", "$VALUES");
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("allowfullscreen", "k#g");
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertEquals("k#g", attribute0.getValue());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Attribute attribute0 = new Attribute("Pattern sntPx erroR: ", "");
      String string0 = attribute0.toString();
      assertEquals("Pattern sntPx erroR:=\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = Attribute.shouldCollapseAttribute("rt=\"G%y\"", (String) null, document_OutputSettings0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      boolean boolean0 = Attribute.shouldCollapseAttribute("+V", "+V", document_OutputSettings1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      boolean boolean0 = Attribute.isDataAttribute("data-");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      boolean boolean0 = Attribute.isDataAttribute("data-data-|M[0d");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Attribute attribute0 = new Attribute("allowfullscreen", "allowfullscreen");
      String string0 = attribute0.toString();
      assertEquals("allowfullscreen", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("oE^", "$VALUES");
      attributes0.put(attribute0);
      String string0 = attribute0.setValue("$VALUES");
      assertEquals("$VALUES", string0);
      assertEquals("oE^", attribute0.getKey());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("org.jsoup.internal.StringUtil", "org.jsoup.internal.StringUtil", attributes0);
      String string0 = attribute0.setValue("org.jsoup.internal.StringUtil");
      assertEquals("org.jsoup.internal.StringUtil", attribute0.getValue());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("%K*=+IZ4^z4m1_", "readonly", attributes0);
      assertEquals("%K*=+IZ4^z4m1_", attribute0.getKey());
      
      attribute0.setKey("tt");
      assertEquals("readonly", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Attribute attribute0 = new Attribute("q", "q");
      attribute0.setKey("r");
      String string0 = attribute0.html();
      assertEquals("r=\"q\"", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Attribute attribute0 = new Attribute("d%iHT yv*XJPf#", "h0CO:[BEJ");
      // Undeclared exception!
      try { 
        attribute0.shouldCollapseAttribute((Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Attribute attribute0 = new Attribute("$VALUES", "$VALUES");
      boolean boolean0 = attribute0.isDataAttribute();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("$VALUES", "$VALUES");
      attributes0.put(attribute0);
      attribute0.setKey("$VALUES");
      assertEquals("$VALUES", attribute0.getValue());
  }
}
