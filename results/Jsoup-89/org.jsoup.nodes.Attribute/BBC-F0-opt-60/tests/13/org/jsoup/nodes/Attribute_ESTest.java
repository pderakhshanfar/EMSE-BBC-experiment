/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 15:00:35 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Attribute_ESTest extends Attribute_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Attribute attribute0 = new Attribute("reversed", "reversed");
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("/", "KF");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      StringWriter stringWriter0 = new StringWriter(8205);
      attribute0.html((Appendable) stringWriter0, document_OutputSettings0);
      assertEquals("/=\"KF\"", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Attribute attribute0 = new Attribute("reversed", "reversed");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = attribute0.shouldCollapseAttribute(document_OutputSettings0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = Attribute.shouldCollapseAttribute("allowfullscreen", "allowfullscreen", document_OutputSettings0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = Attribute.shouldCollapseAttribute("%N", "KF", document_OutputSettings0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      boolean boolean0 = Attribute.isDataAttribute("i$w");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("data-[DvGW<4@MB#-~hC", "", attributes0);
      boolean boolean0 = attribute0.isDataAttribute();
      assertTrue(boolean0);
      assertEquals("", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean boolean0 = Attribute.isBooleanAttribute("nohref");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = Attribute.isBooleanAttribute("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Attribute attribute0 = new Attribute("reversed", "reversed");
      String string0 = attribute0.getValue();
      assertEquals("reversed", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("nohref", "", attributes0);
      String string0 = attribute0.getValue();
      assertEquals("", string0);
      assertEquals("nohref", attribute0.getKey());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("$", "$", attributes0);
      String string0 = attribute0.getKey();
      assertEquals("$", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.shouldCollapseAttribute("fn&=J!", "k", (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Attribute attribute0 = new Attribute("e1@r!w0I?[U~lbj", "");
      // Undeclared exception!
      try { 
        attribute0.setValue("|4,x0oa");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("Gtq1KzXhqE9*?.Ej", "Gtq1KzXhqE9*?.Ej");
      attributes1.keys = null;
      Attribute attribute0 = new Attribute("Gtq1KzXhqE9*?.Ej", "Gtq1KzXhqE9*?.Ej", attributes1);
      // Undeclared exception!
      try { 
        attribute0.setKey("Gtq1KzXhqE9*?.Ej");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("vRPo~", "vRPo~", attributes0);
      // Undeclared exception!
      try { 
        attribute0.setKey("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Attribute attribute0 = new Attribute("L-~Q+CQiX>wV :vZ~", "L-~Q+CQiX>wV :vZ~");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put(attribute0);
      Attributes attributes2 = attributes1.put("L-~Q+CQiX>wV :vZ~", ".95.");
      String[] stringArray0 = new String[0];
      attributes2.keys = stringArray0;
      // Undeclared exception!
      try { 
        attribute0.setKey("L-~Q+CQiX>wV :vZ~");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.isDataAttribute((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.isBooleanAttribute((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "`uDU=\",2wYZ5xF:M#'%`$)N\"");
      // Undeclared exception!
      try { 
        Attribute.html("b", "`uDU=\",2wYZ5xF:M#'%`$)N\"", (Appendable) charBuffer0, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        Attribute.html("i$w", (String) null, (Appendable) charBuffer0, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.html("BgOT\"C#]u~ZT1~L(", "math", (Appendable) null, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        Attribute.html("=\"", "^Qr] T2RC_<7S?P [;wa", (Appendable) pipedWriter0, (Document.OutputSettings) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("^^7M,xG^Q+", "2<xV*h{MWI)");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "2<xV*h{MWI)");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        attribute0.html((Appendable) charBuffer0, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Attribute attribute0 = new Attribute("org.jsoup.nodes.Attribute", "org.jsoup.nodes.Attribute");
      char[] charArray0 = new char[8];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        attribute0.html((Appendable) charBuffer0, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("reversed", "reversed");
      // Undeclared exception!
      try { 
        attribute0.html((Appendable) null, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.createFromEncoded(")1X$A?D0txdL-=`", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        Attribute.createFromEncoded((String) null, "org.jsoup.UncheckedIOException");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute("", "", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(470);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Attribute.html("nohref", "hidden", (Appendable) stringWriter0, document_OutputSettings0);
      assertEquals("nohref=\"hidden\"", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("W73", "", attributes0);
      assertEquals("W73", attribute0.getKey());
      
      attribute0.setKey("data-/");
      assertEquals("", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("mF0jj3L", "mF0jj3L", attributes0);
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        attribute0.html((Appendable) pipedWriter0, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("KF", (String) null, attributes0);
      attribute0.hashCode();
      assertEquals("", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("/", "KF");
      attribute0.hashCode();
      assertEquals("KF", attribute0.getValue());
      assertEquals("/", attribute0.getKey());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Attribute attribute0 = new Attribute("jVvBw+hkDG", (String) null);
      Attribute attribute1 = new Attribute("jVvBw+hkDG", "jVvBw+hkDG");
      boolean boolean0 = attribute0.equals(attribute1);
      //  // Unstable assertion: assertTrue(attribute1.equals((Object)attribute0));
      //  // Unstable assertion: assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("nohref", "", attributes0);
      Attribute attribute1 = new Attribute("nohref", "GRVO.=0xfQ n%E#A");
      boolean boolean0 = attribute0.equals(attribute1);
      assertFalse(boolean0);
      assertEquals("nohref", attribute1.getKey());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Attribute attribute0 = new Attribute("data-", "");
      Attribute attribute1 = new Attribute("abs:", "GRVO.=0xfQ n%E#A");
      boolean boolean0 = attribute0.equals(attribute1);
      assertEquals("GRVO.=0xfQ n%E#A", attribute1.getValue());
      assertFalse(boolean0);
      assertEquals("abs:", attribute1.getKey());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("jONvzE^nQt@8W1-", (String) null, attributes0);
      boolean boolean0 = attribute0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Attribute attribute0 = new Attribute("data-", "");
      boolean boolean0 = attribute0.equals(attribute0);
      assertTrue(boolean0);
      assertEquals("data-", attribute0.getKey());
      assertEquals("", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("`uDU", ",2wYZ5xF:M#'%`$)N");
      boolean boolean0 = attribute0.equals(",2wYZ5xF:M#'%`$)N");
      assertEquals("`uDU", attribute0.getKey());
      assertFalse(boolean0);
      assertEquals(",2wYZ5xF:M#'%`$)N", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("w]uc~vQ{#C_gL", "K4\"Y", attributes0);
      assertEquals("K4\"Y", attribute0.getValue());
      
      attribute0.setValue((String) null);
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Attribute attribute0 = new Attribute("Ur~_9)!w", "Ur~_9)!w");
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Attribute attribute0 = new Attribute("allowfullscreen", "([|i)", (Attributes) null);
      boolean boolean0 = attribute0.isBooleanAttribute();
      assertEquals("([|i)", attribute0.getValue());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute(":", "data-autof", attributes0);
      assertEquals("data-autof", attribute0.getValue());
      
      attribute0.setValue((String) null);
      String string0 = attribute0.html();
      assertEquals(":", string0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("SqBE1*6fG", "??=elTr{GAs*N1)-qc");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      boolean boolean0 = attribute0.shouldCollapseAttribute(document_OutputSettings0);
      assertEquals("??=elTr{GAs*N1)-qc", attribute0.getValue());
      assertFalse(boolean0);
      assertEquals("SqBE1*6fG", attribute0.getKey());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Attribute attribute0 = new Attribute("data-", "");
      boolean boolean0 = attribute0.isDataAttribute();
      assertEquals("data-", attribute0.getKey());
      assertFalse(boolean0);
      assertEquals("", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      boolean boolean0 = Attribute.isDataAttribute("data-hidden");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(1608);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Attribute.html("nowrap", "nowrap", (Appendable) stringWriter0, document_OutputSettings0);
      assertEquals("nowrap", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("nohref", "nohref");
      Attribute attribute0 = new Attribute("nohref", "", attributes1);
      String string0 = attribute0.setValue((String) null);
      assertEquals("nohref", string0);
      assertEquals("", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Attribute attribute0 = new Attribute("L-~Q+CQiX>wV :vZ~", "L-~Q+CQiX>wV :vZ~");
      Attributes attributes0 = new Attributes();
      attributes0.put(attribute0);
      attribute0.setKey("L-~Q+CQiX>wV :vZ~");
      assertEquals("L-~Q+CQiX>wV :vZ~", attribute0.getKey());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Attribute attribute0 = Attribute.createFromEncoded("`uDU", ",2wYZ5xF:M#'%`$)N");
      assertEquals("`uDU", attribute0.getKey());
      
      attribute0.setKey("`uDU");
      assertEquals(",2wYZ5xF:M#'%`$)N", attribute0.getValue());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("$", "$", attributes0);
      // Undeclared exception!
      try { 
        attribute0.shouldCollapseAttribute((Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attribute", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Attribute attribute0 = new Attribute("e1@r!w0I?[U~lbj", "");
      String string0 = attribute0.toString();
      assertEquals("e1@r!w0I?[U~lbj=\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Attribute attribute0 = new Attribute("jVvBw+hkDG", (String) null);
      Attribute attribute1 = attribute0.clone();
      boolean boolean0 = attribute0.equals(attribute1);
      assertTrue(boolean0);
      assertEquals("", attribute1.getValue());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("l", "_,nFrM");
      Attributes attributes1 = attributes0.put(attribute0);
      Attributes attributes2 = attributes1.put("org.jsoup.parser.Tag", "org.jsoup.parser.Tag");
      String[] stringArray0 = new String[1];
      attributes2.keys = stringArray0;
      // Undeclared exception!
      try { 
        attribute0.setValue("2{,dfcrfh,E");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }
}
