/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 14:32:50 GMT 2020
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutableInterval;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.IslamicChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSingleFieldPeriod_ESTest extends BaseSingleFieldPeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Seconds seconds0 = Seconds.ZERO;
      Seconds seconds1 = Seconds.MAX_VALUE;
      boolean boolean0 = seconds0.equals(seconds1);
      assertFalse(seconds1.equals((Object)seconds0));
      assertEquals(Integer.MAX_VALUE, seconds1.getSeconds());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Years years0 = Years.years((-305));
      // Undeclared exception!
      try { 
        years0.getValue((-305));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -305
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Weeks weeks0 = Weeks.weeks((-132));
      // Undeclared exception!
      try { 
        weeks0.getFieldType(1190);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 1190
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) islamicChronology0);
      // Undeclared exception!
      try { 
        Seconds.secondsBetween((ReadablePartial) monthDay0, (ReadablePartial) localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Seconds seconds0 = Seconds.ZERO;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(seconds0, (-493L));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Seconds seconds0 = Seconds.ONE;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(seconds0, 1L);
      assertEquals(1000, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Seconds seconds0 = Seconds.THREE;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(seconds0, (-493L));
      assertEquals((-6), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Hours hours0 = Hours.parseHours((String) null);
      int int0 = hours0.getValue(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.withMonthOfYear(4);
      Hours hours0 = Hours.hoursBetween((ReadableInstant) dateTime1, (ReadableInstant) dateTime0);
      int int0 = hours0.getValue(0);
      assertEquals((-1416), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      MutableInterval mutableInterval0 = new MutableInterval((ReadableInstant) null, duration0);
      Hours hours0 = Hours.hoursIn(mutableInterval0);
      hours0.getPeriodType();
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Weeks weeks0 = Weeks.TWO;
      Minutes minutes0 = weeks0.toStandardMinutes();
      minutes0.getFieldType(0);
      assertEquals(20160, minutes0.getMinutes());
      assertEquals(2, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Hours hours0 = Hours.EIGHT;
      DurationFieldType durationFieldType0 = hours0.getFieldType();
      int int0 = hours0.get(durationFieldType0);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(0L);
      Period period0 = Period.hours(3);
      int int0 = BaseSingleFieldPeriod.between(yearMonth0, yearMonth0, period0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Seconds seconds0 = Seconds.secondsBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) gregorianChronology0);
      LocalDateTime localDateTime1 = localDateTime0.minusMonths(1);
      int int0 = BaseSingleFieldPeriod.between(localDateTime1, localDateTime0, seconds0);
      assertEquals(2678400, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      Instant instant0 = gJChronology0.getGregorianCutover();
      DateTime dateTime0 = instant0.toDateTime();
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      int int0 = BaseSingleFieldPeriod.between(dateTime0, instant0, durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((-335L), (Chronology) null);
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      LocalDate localDate0 = LocalDate.now();
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime(dateTimeZone0);
      Years years0 = Years.MIN_VALUE;
      DurationFieldType durationFieldType0 = years0.getFieldType();
      int int0 = BaseSingleFieldPeriod.between(mutableDateTime0, dateTime0, durationFieldType0);
      assertEquals(44, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.withCenturyOfEra(2788);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      int int0 = BaseSingleFieldPeriod.between(dateTime1, dateTime0, durationFieldType0);
      assertEquals((-276800), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Seconds seconds0 = Seconds.secondsBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(seconds0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Minutes minutes0 = Minutes.MAX_VALUE;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(minutes0, (-4973L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -25909716231
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Seconds seconds0 = Seconds.ZERO;
      // Undeclared exception!
      try { 
        seconds0.compareTo((BaseSingleFieldPeriod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(yearMonth0, yearMonth0, (ReadablePeriod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      YearMonth yearMonth1 = YearMonth.now((Chronology) buddhistChronology0);
      Seconds seconds0 = Seconds.secondsBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(yearMonth0, yearMonth1, seconds0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 17135452800
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Hours hours0 = Hours.EIGHT;
      int int0 = hours0.getValue(0);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Seconds seconds0 = Seconds.ZERO;
      MonthDay monthDay0 = MonthDay.now();
      MonthDay monthDay1 = monthDay0.plus(seconds0);
      assertEquals(2, monthDay1.getMonthOfYear());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Seconds seconds0 = Seconds.ZERO;
      Minutes minutes0 = Minutes.standardMinutesIn(seconds0);
      minutes0.size();
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Seconds seconds0 = Seconds.ZERO;
      Seconds seconds1 = Seconds.TWO;
      int int0 = seconds0.compareTo((BaseSingleFieldPeriod) seconds1);
      assertEquals((-1), int0);
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Seconds seconds0 = Seconds.ZERO;
      Seconds seconds1 = Seconds.seconds(1);
      int int0 = seconds1.compareTo((BaseSingleFieldPeriod) seconds0);
      assertEquals(1, seconds1.getSeconds());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Hours hours0 = Hours.THREE;
      Seconds seconds0 = Seconds.standardSecondsIn(hours0);
      // Undeclared exception!
      try { 
        seconds0.compareTo((BaseSingleFieldPeriod) hours0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class org.joda.time.Seconds cannot be compared to class org.joda.time.Hours
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Seconds seconds0 = Seconds.ZERO;
      int int0 = seconds0.compareTo((BaseSingleFieldPeriod) seconds0);
      assertEquals(0, seconds0.getSeconds());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds((-2));
      Seconds seconds1 = Seconds.standardSecondsIn(seconds0);
      boolean boolean0 = seconds1.equals(seconds0);
      assertEquals((-2), seconds0.getSeconds());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      LocalDateTime localDateTime0 = new LocalDateTime();
      Weeks weeks0 = Weeks.weeksBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      boolean boolean0 = seconds0.equals(weeks0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Seconds seconds0 = Seconds.seconds(1);
      boolean boolean0 = seconds0.equals(yearMonth0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Seconds seconds0 = Seconds.ZERO;
      boolean boolean0 = seconds0.equals(seconds0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Seconds seconds0 = Seconds.ZERO;
      DurationFieldType durationFieldType0 = seconds0.getFieldType();
      boolean boolean0 = seconds0.isSupported(durationFieldType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Seconds seconds0 = Seconds.ZERO;
      boolean boolean0 = seconds0.isSupported((DurationFieldType) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      DurationFieldType durationFieldType0 = seconds0.getFieldType();
      int int0 = seconds0.get(durationFieldType0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Seconds seconds0 = Seconds.TWO;
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      int int0 = seconds0.get(durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Seconds seconds0 = Seconds.THREE;
      // Undeclared exception!
      try { 
        seconds0.getValue(381);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 381
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Seconds seconds0 = Seconds.ONE;
      // Undeclared exception!
      try { 
        seconds0.getFieldType((-872));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -872
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Months months0 = Months.TWO;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(months0, (-1886L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot convert period to duration as months is not precise in the period P2M
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Seconds seconds0 = Seconds.standardSecondsIn((ReadablePeriod) null);
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[3];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.minuteOfHour();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.secondOfMinute();
      dateTimeFieldTypeArray0[2] = dateTimeFieldType2;
      int[] intArray0 = new int[3];
      Partial partial0 = new Partial(dateTimeFieldTypeArray0, intArray0, (Chronology) null);
      // Undeclared exception!
      try { 
        Seconds.secondsBetween((ReadablePartial) partial0, (ReadablePartial) partial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must be contiguous
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      LocalTime localTime0 = new LocalTime(localDateTime0);
      // Undeclared exception!
      try { 
        Years.yearsBetween((ReadablePartial) localDateTime0, (ReadablePartial) localTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      LocalDate localDate0 = new LocalDate();
      // Undeclared exception!
      try { 
        Minutes.minutesBetween((ReadablePartial) localDate0, (ReadablePartial) yearMonth0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      // Undeclared exception!
      try { 
        Days.daysBetween((ReadablePartial) yearMonth0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Seconds seconds0 = Seconds.ONE;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between((ReadablePartial) null, (ReadablePartial) null, seconds0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Instant instant0 = new Instant();
      // Undeclared exception!
      try { 
        Years.yearsBetween((ReadableInstant) instant0, (ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        Seconds.secondsBetween((ReadableInstant) null, (ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Seconds seconds0 = Seconds.ZERO;
      seconds0.toMutablePeriod();
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((-150L));
      Years years0 = Years.yearsBetween((ReadablePartial) localTime0, (ReadablePartial) localTime0);
      years0.toPeriod();
      assertEquals(0, years0.getYears());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Hours hours0 = Hours.EIGHT;
      hours0.hashCode();
      assertEquals(8, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Seconds seconds0 = Seconds.ZERO;
      Seconds seconds1 = Seconds.seconds(1);
      boolean boolean0 = seconds1.equals(seconds0);
      assertFalse(boolean0);
      assertFalse(seconds0.equals((Object)seconds1));
      assertEquals(1, seconds1.getSeconds());
  }
}
