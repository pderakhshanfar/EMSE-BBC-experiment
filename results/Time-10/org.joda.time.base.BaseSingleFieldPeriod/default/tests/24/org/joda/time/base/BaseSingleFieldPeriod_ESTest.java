/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 14:35:47 GMT 2020
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSingleFieldPeriod_ESTest extends BaseSingleFieldPeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Minutes minutes0 = Minutes.ONE;
      Minutes minutes1 = Minutes.minutes(2165);
      boolean boolean0 = minutes0.equals(minutes1);
      assertEquals(2165, minutes1.getMinutes());
      assertFalse(boolean0);
      assertFalse(minutes1.equals((Object)minutes0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth((long) (-3703));
      Days days0 = Days.daysBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      Seconds seconds0 = days0.toStandardSeconds();
      // Undeclared exception!
      try { 
        seconds0.getValue(27);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 27
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Years years0 = Years.TWO;
      // Undeclared exception!
      try { 
        years0.getFieldType((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Hours hours0 = Hours.MIN_VALUE;
      LocalDateTime localDateTime0 = new LocalDateTime();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      MonthDay monthDay0 = new MonthDay(dateTimeZone0);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(localDateTime0, monthDay0, hours0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Hours hours0 = Hours.SIX;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(hours0, (-42521587200000L));
      assertEquals(0, int0);
      assertEquals(6, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Hours hours0 = Hours.FOUR;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(hours0, 483L);
      assertEquals(29813, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Hours hours0 = Hours.SIX;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(hours0, (-409L));
      assertEquals((-52811), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Minutes minutes0 = Minutes.ZERO;
      int int0 = minutes0.getValue(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Hours hours0 = Hours.THREE;
      int int0 = hours0.getValue(0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Years years0 = Years.MIN_VALUE;
      int int0 = years0.getValue(0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Seconds seconds0 = Seconds.THREE;
      Hours hours0 = seconds0.toStandardHours();
      hours0.getPeriodType();
      assertEquals(3, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Years years0 = Years.ONE;
      DurationFieldType durationFieldType0 = years0.getFieldType(0);
      assertEquals("years", durationFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(10209375);
      minutes0.getFieldType();
      assertEquals(10209375, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Months months0 = Months.SEVEN;
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      int int0 = months0.get(durationFieldType0);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      int int0 = days0.get(durationFieldType0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Minutes minutes0 = Minutes.ONE;
      LocalDateTime localDateTime0 = new LocalDateTime();
      int int0 = BaseSingleFieldPeriod.between(localDateTime0, localDateTime0, minutes0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Minutes minutes0 = Minutes.ONE;
      LocalDateTime localDateTime0 = new LocalDateTime();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      LocalDateTime localDateTime1 = new LocalDateTime((Chronology) buddhistChronology0);
      int int0 = BaseSingleFieldPeriod.between(localDateTime0, localDateTime1, minutes0);
      assertEquals(285590880, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Hours hours0 = Hours.TWO;
      MonthDay monthDay0 = MonthDay.now();
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      MonthDay monthDay1 = monthDay0.withFieldAdded(durationFieldType0, 1419);
      int int0 = BaseSingleFieldPeriod.between(monthDay1, monthDay0, hours0);
      assertEquals((-2136), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Instant instant0 = new Instant();
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateTime dateTime0 = DateTime.parse("", dateTimeFormatter0);
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      int int0 = BaseSingleFieldPeriod.between(instant0, dateTime0, durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Hours hours0 = Hours.SEVEN;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(hours0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Hours hours0 = Hours.MIN_VALUE;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(hours0, (-3451L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 2240203168009
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Hours hours0 = Hours.MIN_VALUE;
      // Undeclared exception!
      try { 
        hours0.compareTo((BaseSingleFieldPeriod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth((-9223372036854775808L));
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(yearMonth0, yearMonth0, (ReadablePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value -292275055 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(localTime0, localTime0, (ReadablePeriod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Hours hours0 = Hours.SIX;
      DateMidnight dateMidnight0 = new DateMidnight((DateTimeZone) null);
      Instant instant0 = dateMidnight0.toInstant();
      DateTime dateTime0 = instant0.toDateTime();
      LocalDateTime localDateTime0 = dateTime0.toLocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.plusWeeks(25650000);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(localDateTime1, localDateTime0, hours0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -4309200000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateMidnight dateMidnight0 = new DateMidnight((long) 0, (Chronology) buddhistChronology0);
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(dateMidnight0, dateMidnight0, durationFieldType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateMidnight dateMidnight0 = new DateMidnight(dateTimeZone0);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(dateMidnight0, dateMidnight0, (DurationFieldType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Hours hours0 = Hours.SIX;
      GJChronology gJChronology0 = GJChronology.getInstance();
      LocalDate localDate0 = new LocalDate(0L, (Chronology) gJChronology0);
      localDate0.minus(hours0);
      assertEquals(1, hours0.size());
      assertEquals(6, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Weeks weeks0 = Weeks.ZERO;
      int int0 = weeks0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(10209375);
      Minutes minutes1 = Minutes.THREE;
      int int0 = minutes1.compareTo((BaseSingleFieldPeriod) minutes0);
      assertEquals((-1), int0);
      assertEquals(10209375, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Minutes minutes0 = Minutes.ONE;
      Minutes minutes1 = Minutes.minutes((-1300));
      int int0 = minutes0.compareTo((BaseSingleFieldPeriod) minutes1);
      assertEquals((-1300), minutes1.getMinutes());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Minutes minutes0 = Minutes.ONE;
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      Months months0 = Months.monthsBetween((ReadableInstant) dateMidnight0, (ReadableInstant) dateMidnight0);
      boolean boolean0 = minutes0.equals(months0);
      assertEquals(0, months0.getMonths());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Minutes minutes0 = Minutes.TWO;
      MonthDay monthDay0 = new MonthDay(0L);
      boolean boolean0 = minutes0.equals(monthDay0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Minutes minutes0 = Minutes.THREE;
      boolean boolean0 = minutes0.equals(minutes0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Minutes minutes0 = Minutes.TWO;
      Minutes minutes1 = Minutes.minutes(2165);
      boolean boolean0 = minutes1.equals(minutes0);
      assertEquals(2165, minutes1.getMinutes());
      assertFalse(minutes0.equals((Object)minutes1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Hours hours0 = Hours.SIX;
      DurationFieldType durationFieldType0 = hours0.getFieldType();
      boolean boolean0 = hours0.isSupported(durationFieldType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Hours hours0 = Hours.THREE;
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      boolean boolean0 = hours0.isSupported(durationFieldType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Seconds seconds0 = Seconds.THREE;
      Days days0 = seconds0.toStandardDays();
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      int int0 = days0.get(durationFieldType0);
      assertEquals(3, seconds0.getSeconds());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Hours hours0 = Hours.MIN_VALUE;
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      int int0 = hours0.get(durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Hours hours0 = Hours.MAX_VALUE;
      // Undeclared exception!
      try { 
        hours0.getValue((-325));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -325
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Days days0 = Days.days(1333);
      // Undeclared exception!
      try { 
        days0.getFieldType(1333);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 1333
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Months months0 = Months.months(80);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(months0, 80);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot convert period to duration as months is not precise in the period P80M
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Hours hours0 = Hours.ZERO;
      Hours hours1 = Hours.standardHoursIn(hours0);
      assertEquals(1, hours1.size());
      assertEquals(0, hours1.getHours());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Hours hours0 = Hours.standardHoursIn((ReadablePeriod) null);
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      LocalDateTime localDateTime0 = new LocalDateTime();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(localTime0, localDateTime0, (ReadablePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Hours hours0 = Hours.SIX;
      LocalDate localDate0 = new LocalDate();
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(localDate0, localTime0, hours0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      // Undeclared exception!
      try { 
        Months.monthsBetween((ReadablePartial) monthDay0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Hours hours0 = Hours.SIX;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between((ReadablePartial) null, (ReadablePartial) null, hours0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Instant instant0 = Instant.now();
      // Undeclared exception!
      try { 
        Hours.hoursBetween((ReadableInstant) instant0, (ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between((ReadableInstant) null, (ReadableInstant) null, durationFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(2165);
      Minutes minutes1 = Minutes.minutes(2165);
      boolean boolean0 = minutes0.equals(minutes1);
      assertTrue(boolean0);
      assertEquals(2165, minutes1.getMinutes());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Hours hours0 = Hours.THREE;
      hours0.toMutablePeriod();
      assertEquals(1, hours0.size());
      assertEquals(3, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Seconds seconds0 = Seconds.THREE;
      Days days0 = seconds0.toStandardDays();
      days0.toPeriod();
      assertEquals(1, days0.size());
      assertEquals(3, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Minutes minutes0 = Minutes.TWO;
      Hours hours0 = Hours.standardHoursIn(minutes0);
      // Undeclared exception!
      try { 
        hours0.compareTo((BaseSingleFieldPeriod) minutes0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class org.joda.time.Hours cannot be compared to class org.joda.time.Minutes
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Hours hours0 = Hours.FOUR;
      hours0.hashCode();
      assertEquals(4, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Minutes minutes0 = Minutes.TWO;
      int int0 = minutes0.compareTo((BaseSingleFieldPeriod) minutes0);
      assertEquals(0, int0);
      assertEquals(2, minutes0.getMinutes());
  }
}
