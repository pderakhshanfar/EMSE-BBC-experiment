/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 14:34:59 GMT 2020
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableInterval;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSingleFieldPeriod_ESTest extends BaseSingleFieldPeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Minutes minutes0 = Minutes.TWO;
      minutes0.hashCode();
      assertEquals(2, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Years years0 = Years.MAX_VALUE;
      Interval interval0 = new Interval((-3496), (-3496));
      Years years1 = Years.yearsIn(interval0);
      boolean boolean0 = years1.equals(years0);
      assertEquals(Integer.MAX_VALUE, years0.getYears());
      assertEquals(0, years1.getYears());
      assertFalse(boolean0);
      assertFalse(years0.equals((Object)years1));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Days days0 = Days.SEVEN;
      // Undeclared exception!
      try { 
        days0.getValue(17);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 17
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Days days0 = Days.THREE;
      // Undeclared exception!
      try { 
        days0.getFieldType((-2929));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -2929
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Period period0 = Period.minutes((-2188));
      Minutes minutes0 = Minutes.standardMinutesIn(period0);
      assertEquals((-2188), minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      Locale locale0 = Locale.CHINA;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      LocalTime localTime0 = LocalTime.fromCalendarFields(calendar0);
      // Undeclared exception!
      try { 
        Weeks.weeksBetween((ReadablePartial) monthDay0, (ReadablePartial) localTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Days days0 = Days.SIX;
      Minutes minutes0 = Minutes.standardMinutesIn(days0);
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(minutes0, (-1L));
      assertEquals((-518400000), int0);
      assertEquals(8640, minutes0.getMinutes());
      assertEquals(6, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Interval interval0 = new Interval((-3496), (-3496));
      Seconds seconds0 = Seconds.secondsIn(interval0);
      int int0 = seconds0.getValue(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Years years0 = Years.TWO;
      int int0 = years0.getValue(0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(1904L, (Chronology) null);
      Days days0 = Days.daysBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      PeriodType periodType0 = days0.getPeriodType();
      assertEquals(1, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Minutes minutes0 = Minutes.MAX_VALUE;
      DurationFieldType durationFieldType0 = minutes0.getFieldType();
      assertEquals("minutes", durationFieldType0.getName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Minutes minutes0 = Minutes.MAX_VALUE;
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      int int0 = minutes0.get(durationFieldType0);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth((-1031L));
      Hours hours0 = Hours.ONE;
      int int0 = BaseSingleFieldPeriod.between(yearMonth0, yearMonth0, hours0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Years years0 = Years.MIN_VALUE;
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      LocalDateTime localDateTime0 = new LocalDateTime((long) 0, (Chronology) copticChronology0);
      LocalDateTime localDateTime1 = localDateTime0.minusMonths((-1227));
      int int0 = BaseSingleFieldPeriod.between(localDateTime0, localDateTime1, years0);
      assertEquals(94, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      int int0 = BaseSingleFieldPeriod.between(dateTime0, dateTime0, durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateTime dateTime0 = new DateTime((long) 0, (Chronology) null);
      DateTime dateTime1 = dateTime0.withWeekyear(1100);
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      int int0 = BaseSingleFieldPeriod.between(dateTime1, dateTime0, durationFieldType0);
      assertEquals(7626192, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Instant instant0 = new Instant();
      Instant instant1 = instant0.withDurationAdded((long) 87, 27);
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      int int0 = BaseSingleFieldPeriod.between(instant1, instant0, durationFieldType0);
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Years years0 = Years.MAX_VALUE;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(years0, (-3347L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot convert period to duration as years is not precise in the period P2147483647Y
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Minutes minutes0 = Minutes.MAX_VALUE;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(minutes0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Minutes minutes0 = Minutes.MAX_VALUE;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(minutes0, (-236));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -545970418728
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Years years0 = Years.ZERO;
      // Undeclared exception!
      try { 
        years0.compareTo((BaseSingleFieldPeriod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(yearMonth0, yearMonth0, (ReadablePeriod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateTime dateTime0 = new DateTime((DateTimeZone) fixedDateTimeZone0);
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(dateTime0, dateTime0, durationFieldType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Years years0 = Years.MIN_VALUE;
      int int0 = years0.getValue(0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Hours hours0 = Hours.ZERO;
      int int0 = hours0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Years years0 = Years.ONE;
      Years years1 = Years.ZERO;
      int int0 = years1.compareTo((BaseSingleFieldPeriod) years0);
      assertEquals(0, years1.getYears());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Years years0 = Years.MAX_VALUE;
      Years years1 = Years.TWO;
      int int0 = years0.compareTo((BaseSingleFieldPeriod) years1);
      assertEquals(1, int0);
      assertEquals(2, years1.getYears());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Seconds seconds0 = Seconds.TWO;
      Days days0 = seconds0.toStandardDays();
      // Undeclared exception!
      try { 
        seconds0.compareTo((BaseSingleFieldPeriod) days0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class org.joda.time.Seconds cannot be compared to class org.joda.time.Days
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      Years years0 = Years.yearsIn(mutableInterval0);
      Interval interval0 = new Interval(515L, 515L);
      PeriodType periodType0 = PeriodType.years();
      Period period0 = interval0.toPeriod(periodType0);
      boolean boolean0 = years0.equals(period0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Years years0 = Years.MAX_VALUE;
      Days days0 = Days.ZERO;
      Minutes minutes0 = days0.toStandardMinutes();
      boolean boolean0 = years0.equals(minutes0);
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, years0.getYears());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Years years0 = Years.years((-3496));
      Interval interval0 = new Interval((-3496), (-3496));
      Years years1 = Years.yearsIn(interval0);
      boolean boolean0 = years1.equals(years0);
      assertEquals((-3496), years0.getYears());
      assertFalse(boolean0);
      assertFalse(years0.equals((Object)years1));
      assertEquals(0, years1.getYears());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Years years0 = Years.ZERO;
      boolean boolean0 = years0.equals(years0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      Years years0 = Years.ONE;
      boolean boolean0 = years0.equals(monthDay0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Years years0 = Years.THREE;
      DurationFieldType durationFieldType0 = years0.getFieldType();
      boolean boolean0 = years0.isSupported(durationFieldType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Years years0 = Years.MIN_VALUE;
      Hours hours0 = Hours.TWO;
      DurationFieldType durationFieldType0 = years0.getFieldType(0);
      boolean boolean0 = hours0.isSupported(durationFieldType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateTime dateTime0 = new DateTime((-663L));
      Minutes minutes0 = Minutes.minutesBetween((ReadableInstant) dateMidnight0, (ReadableInstant) dateTime0);
      int int0 = minutes0.get(durationFieldType0);
      assertEquals((-23205600), int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Minutes minutes0 = Minutes.ONE;
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      int int0 = minutes0.get(durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds((-236));
      // Undeclared exception!
      try { 
        seconds0.getValue((-236));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -236
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      Weeks weeks0 = Weeks.weeksBetween((ReadablePartial) monthDay0, (ReadablePartial) monthDay0);
      Days days0 = weeks0.toStandardDays();
      // Undeclared exception!
      try { 
        days0.getFieldType(256);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 256
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Days days0 = Days.FIVE;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(days0, 1);
      assertEquals(432000000, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = BaseSingleFieldPeriod.standardPeriodIn((ReadablePeriod) null, 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      YearMonth yearMonth0 = new YearMonth((Chronology) gregorianChronology0);
      // Undeclared exception!
      try { 
        Years.yearsBetween((ReadablePartial) monthDay0, (ReadablePartial) yearMonth0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      // Undeclared exception!
      try { 
        Seconds.secondsBetween((ReadablePartial) localTime0, (ReadablePartial) monthDay0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      // Undeclared exception!
      try { 
        Hours.hoursBetween((ReadablePartial) monthDay0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Years years0 = Years.MIN_VALUE;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between((ReadablePartial) null, (ReadablePartial) null, years0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Instant instant0 = new Instant();
      // Undeclared exception!
      try { 
        Minutes.minutesBetween((ReadableInstant) instant0, (ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between((ReadableInstant) null, (ReadableInstant) null, (DurationFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Months months0 = Months.FOUR;
      months0.toMutablePeriod();
      assertEquals(4, months0.getMonths());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Years years0 = Years.THREE;
      years0.toPeriod();
      assertEquals(3, years0.getYears());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      Years years0 = Years.yearsBetween((ReadablePartial) monthDay0, (ReadablePartial) monthDay0);
      int int0 = years0.compareTo((BaseSingleFieldPeriod) years0);
      assertEquals(0, years0.getYears());
      assertEquals(0, int0);
  }
}
