/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 01 18:40:50 GMT 2021
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSingleFieldPeriod_ESTest extends BaseSingleFieldPeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Days days0 = Days.THREE;
      Days days1 = Days.SEVEN;
      boolean boolean0 = days0.equals(days1);
      assertFalse(days1.equals((Object)days0));
      assertFalse(boolean0);
      assertEquals(7, days1.getDays());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Months months0 = Months.SIX;
      // Undeclared exception!
      try { 
        months0.getValue(23118750);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 23118750
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Months months0 = Months.FIVE;
      // Undeclared exception!
      try { 
        months0.getFieldType(8);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      YearMonth yearMonth0 = new YearMonth();
      // Undeclared exception!
      try { 
        Years.yearsBetween((ReadablePartial) localDateTime0, (ReadablePartial) yearMonth0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      Minutes minutes0 = seconds0.toStandardMinutes();
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(minutes0, 31557600000L);
      assertEquals((-68), int0);
      assertEquals((-35791394), minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Weeks weeks0 = Weeks.ZERO;
      int int0 = weeks0.getValue(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Weeks weeks0 = Weeks.MAX_VALUE;
      int int0 = weeks0.getValue(0);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      int int0 = days0.getValue(0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Hours hours0 = Hours.FOUR;
      Seconds seconds0 = Seconds.standardSecondsIn(hours0);
      seconds0.getPeriodType();
      assertEquals(14400, seconds0.getSeconds());
      assertEquals(4, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Seconds seconds0 = Seconds.MAX_VALUE;
      DurationFieldType durationFieldType0 = seconds0.getFieldType(0);
      assertEquals("seconds", durationFieldType0.getName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Seconds seconds0 = Seconds.TWO;
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      int int0 = seconds0.get(durationFieldType0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Hours hours0 = Hours.ZERO;
      LocalDate localDate0 = LocalDate.now();
      LocalDate localDate1 = localDate0.withWeekOfWeekyear(1);
      int int0 = BaseSingleFieldPeriod.between(localDate1, localDate0, hours0);
      assertEquals(1008, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Hours hours0 = Hours.ZERO;
      LocalDate localDate0 = LocalDate.now();
      LocalDate localDate1 = localDate0.withWeekOfWeekyear(17);
      int int0 = BaseSingleFieldPeriod.between(localDate1, localDate0, hours0);
      assertEquals((-1680), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      Minutes minutes0 = Minutes.MAX_VALUE;
      Weeks weeks0 = minutes0.toStandardWeeks();
      DurationFieldType durationFieldType0 = weeks0.getFieldType();
      int int0 = BaseSingleFieldPeriod.between(dateTime0, dateTime0, durationFieldType0);
      assertEquals(213044, weeks0.getWeeks());
      assertEquals(0, int0);
      assertEquals(Integer.MAX_VALUE, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      DateTime dateTime1 = dateTime0.minusWeeks(1260);
      Seconds seconds0 = Seconds.seconds(1260);
      DurationFieldType durationFieldType0 = seconds0.getFieldType();
      int int0 = BaseSingleFieldPeriod.between(dateTime1, dateTime0, durationFieldType0);
      assertEquals(762048000, int0);
      assertEquals(1260, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      Locale locale0 = Locale.CANADA_FRENCH;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      LocalDate localDate0 = LocalDate.fromCalendarFields(calendar0);
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      LocalDate localDate1 = localDate0.withFieldAdded(durationFieldType0, (-1727));
      LocalTime localTime0 = LocalTime.fromCalendarFields(calendar0);
      DateTime dateTime0 = localDate1.toDateTime(localTime0);
      int int0 = BaseSingleFieldPeriod.between(dateMidnight0, dateTime0, durationFieldType0);
      assertEquals((-1726), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Days days0 = Days.ZERO;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(days0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(days0, 60L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -3092376453120000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Days days0 = Days.TWO;
      // Undeclared exception!
      try { 
        days0.compareTo((BaseSingleFieldPeriod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(4, 13);
      LocalDate localDate0 = new LocalDate(525L, dateTimeZone0);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(localDate0, localDate0, (ReadablePeriod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between((ReadableInstant) null, (ReadableInstant) null, durationFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      Hours hours0 = Hours.FOUR;
      Seconds seconds0 = hours0.toStandardSeconds();
      Interval interval0 = new Interval(dateTime0, seconds0);
      assertEquals(4, hours0.getHours());
      assertEquals(14400, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Hours hours0 = Hours.FOUR;
      int int0 = hours0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Days days0 = Days.days(1735);
      Interval interval0 = new Interval(0L, 1735);
      Days days1 = Days.daysIn(interval0);
      int int0 = days1.compareTo((BaseSingleFieldPeriod) days0);
      assertEquals(1735, days0.getDays());
      assertEquals((-1), int0);
      assertEquals(0, days1.getDays());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Days days0 = Days.THREE;
      Days days1 = Days.FIVE;
      int int0 = days1.compareTo((BaseSingleFieldPeriod) days0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      Days days0 = Days.TWO;
      // Undeclared exception!
      try { 
        days0.compareTo((BaseSingleFieldPeriod) seconds0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class org.joda.time.Days cannot be compared to class org.joda.time.Seconds
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Days days0 = Days.ZERO;
      int int0 = days0.compareTo((BaseSingleFieldPeriod) days0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Days days0 = Days.parseDays((String) null);
      MutableDateTime mutableDateTime0 = new MutableDateTime(3204L, (DateTimeZone) null);
      PeriodType periodType0 = PeriodType.days();
      Period period0 = new Period((ReadableDuration) null, mutableDateTime0, periodType0);
      boolean boolean0 = days0.equals(period0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Days days0 = Days.days(1735);
      Hours hours0 = Hours.EIGHT;
      boolean boolean0 = days0.equals(hours0);
      assertEquals(1735, days0.getDays());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Days days0 = Days.days(0);
      Object object0 = new Object();
      boolean boolean0 = days0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Days days0 = Days.SIX;
      boolean boolean0 = days0.equals(days0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Days days0 = Days.THREE;
      Days days1 = Days.SEVEN;
      boolean boolean0 = days1.equals(days0);
      assertFalse(days0.equals((Object)days1));
      assertEquals(7, days1.getDays());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Days days0 = Days.FIVE;
      DurationFieldType durationFieldType0 = days0.getFieldType();
      boolean boolean0 = days0.isSupported(durationFieldType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Days days0 = Days.FIVE;
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      boolean boolean0 = days0.isSupported(durationFieldType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      int int0 = days0.get(durationFieldType0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      int int0 = seconds0.get(durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Days days0 = Days.SEVEN;
      // Undeclared exception!
      try { 
        days0.getValue((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Months months0 = Months.monthsBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      // Undeclared exception!
      try { 
        months0.getFieldType((-675));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -675
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Months months0 = Months.MIN_VALUE;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(months0, 3771L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot convert period to duration as months is not precise in the period P-2147483648M
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Years years0 = Years.yearsBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      assertEquals(0, years0.getYears());
      
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(years0, 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Minutes minutes0 = Minutes.standardMinutesIn((ReadablePeriod) null);
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Days days0 = Days.SEVEN;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(days0, 1651L);
      assertEquals(366323, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      Days days0 = Days.daysBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      MonthDay monthDay0 = MonthDay.now();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(yearMonth0, monthDay0, days0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      LocalDateTime localDateTime0 = new LocalDateTime((long) 1);
      // Undeclared exception!
      try { 
        Months.monthsBetween((ReadablePartial) yearMonth0, (ReadablePartial) localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      // Undeclared exception!
      try { 
        Days.daysBetween((ReadablePartial) yearMonth0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Days days0 = Days.SIX;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between((ReadablePartial) null, (ReadablePartial) null, days0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((long) 1);
      // Undeclared exception!
      try { 
        Days.daysBetween((ReadableInstant) dateMidnight0, (ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      seconds0.toMutablePeriod();
      assertEquals(Integer.MIN_VALUE, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Days days0 = Days.SIX;
      days0.toPeriod();
      assertEquals(6, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Hours hours0 = Hours.ZERO;
      LocalDate localDate0 = LocalDate.now();
      int int0 = BaseSingleFieldPeriod.between(localDate0, localDate0, hours0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Days days0 = Days.TWO;
      days0.hashCode();
      assertEquals(2, days0.getDays());
  }
}
