/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 24 05:57:39 GMT 2021
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutablePeriod;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSingleFieldPeriod_ESTest extends BaseSingleFieldPeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Minutes minutes0 = Minutes.TWO;
      Minutes minutes1 = minutes0.minus(minutes0);
      boolean boolean0 = minutes0.equals(minutes1);
      assertFalse(boolean0);
      assertFalse(minutes1.equals((Object)minutes0));
      assertEquals(2, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Minutes minutes0 = Minutes.THREE;
      // Undeclared exception!
      try { 
        minutes0.getValue((-2125));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -2125
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Days days0 = Days.ONE;
      // Undeclared exception!
      try { 
        days0.getFieldType(3290);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 3290
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Hours hours0 = Hours.hours((-3253));
      Seconds seconds0 = hours0.toStandardSeconds();
      Weeks weeks0 = Weeks.standardWeeksIn(seconds0);
      assertEquals((-19), weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      LocalDate localDate0 = dateTime0.toLocalDate();
      YearMonth yearMonth0 = new YearMonth(1116L);
      // Undeclared exception!
      try { 
        Days.daysBetween((ReadablePartial) yearMonth0, (ReadablePartial) localDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Minutes minutes0 = Minutes.THREE;
      Seconds seconds0 = Seconds.standardSecondsIn(minutes0);
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(seconds0, 2551440384L);
      assertEquals(3, minutes0.getMinutes());
      assertEquals(180, seconds0.getSeconds());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Weeks weeks0 = Weeks.weeks(1937);
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(weeks0, 4182L);
      assertEquals(280128550, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Minutes minutes0 = Minutes.THREE;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(minutes0, (-1989L));
      assertEquals((-90), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(163);
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      Days days0 = Days.daysBetween((ReadablePartial) localDate0, (ReadablePartial) localDate0);
      Weeks weeks0 = days0.toStandardWeeks();
      int int0 = weeks0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Weeks weeks0 = Weeks.weeks(0);
      int int0 = weeks0.getValue(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Minutes minutes0 = Minutes.TWO;
      int int0 = minutes0.getValue(0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Minutes minutes0 = Minutes.MIN_VALUE;
      int int0 = minutes0.getValue(0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(1937);
      Days days0 = minutes0.toStandardDays();
      days0.getPeriodType();
      assertEquals(1937, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Minutes minutes0 = Minutes.ONE;
      DurationFieldType durationFieldType0 = minutes0.getFieldType(0);
      assertEquals("minutes", durationFieldType0.getName());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Months months0 = Months.FIVE;
      DurationFieldType durationFieldType0 = months0.getFieldType();
      assertEquals("months", durationFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Years years0 = Years.ONE;
      Years years1 = years0.minus(1569);
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      int int0 = years1.get(durationFieldType0);
      assertEquals((-1568), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      Weeks weeks0 = Weeks.ONE;
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      int int0 = BaseSingleFieldPeriod.between(localDate0, localDate0, weeks0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Hours hours0 = Hours.hours((-3253));
      YearMonth yearMonth0 = YearMonth.now();
      Seconds seconds0 = hours0.toStandardSeconds();
      YearMonth yearMonth1 = yearMonth0.minusMonths((-3253));
      Days days0 = seconds0.toStandardDays();
      Minutes minutes0 = days0.toStandardMinutes();
      BaseSingleFieldPeriod.between(yearMonth0, yearMonth1, minutes0);
      assertEquals((-135), days0.getDays());
      assertEquals((-3253), hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Minutes minutes0 = Minutes.TWO;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) fixedDateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.minusMinutes((-961));
      int int0 = BaseSingleFieldPeriod.between(localDateTime1, localDateTime0, minutes0);
      assertEquals((-961), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      LocalDate localDate0 = dateTime0.toLocalDate();
      DateMidnight dateMidnight0 = localDate0.toDateMidnight();
      YearMonth yearMonth0 = new YearMonth(1116L);
      Days days0 = Days.daysBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      DurationFieldType durationFieldType0 = days0.getFieldType();
      int int0 = BaseSingleFieldPeriod.between(dateTime0, dateMidnight0, durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      DateTime dateTime1 = localDate0.toDateTimeAtStartOfDay(dateTimeZone0);
      int int0 = BaseSingleFieldPeriod.between(dateTime1, dateTime0, durationFieldType0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      DateMidnight dateMidnight0 = localDate0.toDateMidnight();
      Interval interval0 = dateMidnight0.toInterval();
      YearMonth yearMonth0 = new YearMonth((-771L));
      DateTime dateTime0 = interval0.getEnd();
      DateTime dateTime1 = new DateTime((-727L), dateTimeZone0);
      Months months0 = Months.monthsBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      DurationFieldType durationFieldType0 = months0.getFieldType();
      int int0 = BaseSingleFieldPeriod.between(dateTime0, dateTime1, durationFieldType0);
      assertEquals((-529), int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Minutes minutes0 = Minutes.THREE;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(minutes0, 0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Minutes minutes0 = Minutes.MAX_VALUE;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(minutes0, (-1));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -128849018820000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Years years0 = Years.ZERO;
      // Undeclared exception!
      try { 
        years0.compareTo((BaseSingleFieldPeriod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2844, 2844, 2844, (-205), (-205));
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(localDateTime0, localDateTime0, (ReadablePeriod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime((-2531L), (Chronology) islamicChronology0);
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(dateTime0, dateTime0, durationFieldType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      LocalDate localDate0 = dateTime0.toLocalDate();
      DateMidnight dateMidnight0 = localDate0.toDateMidnight();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(dateMidnight0, dateMidnight0, (DurationFieldType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      DateTime dateTime0 = localTime0.toDateTimeToday((DateTimeZone) null);
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) null);
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) iSOChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.minusWeeks(157);
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(dateTime0, dateMidnight1, durationFieldType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -95026881320
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Minutes minutes0 = Minutes.THREE;
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      DateMidnight dateMidnight0 = localDate0.toDateMidnight();
      Interval interval0 = dateMidnight0.toInterval();
      Minutes minutes1 = Minutes.minutesIn(interval0);
      int int0 = minutes0.compareTo((BaseSingleFieldPeriod) minutes1);
      assertEquals((-1), int0);
      assertEquals(1440, minutes1.getMinutes());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Minutes minutes0 = Minutes.THREE;
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Minutes minutes1 = Minutes.minutesBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      int int0 = minutes0.compareTo((BaseSingleFieldPeriod) minutes1);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Minutes minutes0 = Minutes.THREE;
      Days days0 = Days.FIVE;
      Hours hours0 = days0.toStandardHours();
      // Undeclared exception!
      try { 
        minutes0.compareTo((BaseSingleFieldPeriod) hours0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class org.joda.time.Minutes cannot be compared to class org.joda.time.Hours
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Minutes minutes0 = Minutes.MAX_VALUE;
      MutablePeriod mutablePeriod0 = new MutablePeriod(minutes0);
      boolean boolean0 = minutes0.equals(mutablePeriod0);
      assertTrue(boolean0);
      assertEquals(Integer.MAX_VALUE, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Minutes minutes0 = Minutes.THREE;
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      DateMidnight dateMidnight0 = localDate0.toDateMidnight();
      Interval interval0 = dateMidnight0.toInterval();
      boolean boolean0 = minutes0.equals(interval0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Days days0 = Days.THREE;
      boolean boolean0 = days0.equals(days0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Days days0 = Days.THREE;
      Days days1 = Days.FOUR;
      boolean boolean0 = days0.equals(days1);
      assertFalse(days1.equals((Object)days0));
      assertEquals(4, days1.getDays());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Weeks weeks0 = Weeks.ONE;
      DurationFieldType durationFieldType0 = weeks0.getFieldType();
      boolean boolean0 = weeks0.isSupported(durationFieldType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      Weeks weeks0 = Weeks.ONE;
      boolean boolean0 = weeks0.isSupported(durationFieldType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Years years0 = Years.ONE;
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      int int0 = years0.get(durationFieldType0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Minutes minutes0 = Minutes.MIN_VALUE;
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      int int0 = minutes0.get(durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Minutes minutes0 = Minutes.TWO;
      // Undeclared exception!
      try { 
        minutes0.getValue(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Seconds seconds0 = duration0.toStandardSeconds();
      Weeks weeks0 = seconds0.toStandardWeeks();
      Minutes minutes0 = weeks0.toStandardMinutes();
      // Undeclared exception!
      try { 
        minutes0.getFieldType((-3197));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -3197
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Months months0 = Months.EIGHT;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(months0, (-4623L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot convert period to duration as months is not precise in the period P8M
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Years years0 = Years.yearsBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      assertEquals(0, years0.getYears());
      
      Weeks weeks0 = Weeks.standardWeeksIn(years0);
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Weeks weeks0 = Weeks.standardWeeksIn((ReadablePeriod) null);
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalTime localTime0 = LocalTime.fromMillisOfDay(1230L);
      // Undeclared exception!
      try { 
        Minutes.minutesBetween((ReadablePartial) localDateTime0, (ReadablePartial) localTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Minutes minutes0 = Minutes.TWO;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(ethiopicChronology0);
      LocalDateTime localDateTime0 = new LocalDateTime((-647L), (Chronology) lenientChronology0);
      YearMonth yearMonth0 = new YearMonth((Chronology) ethiopicChronology0);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(localDateTime0, yearMonth0, minutes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay(0L);
      // Undeclared exception!
      try { 
        Weeks.weeksBetween((ReadablePartial) monthDay0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      // Undeclared exception!
      try { 
        Years.yearsBetween((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTime dateTime0 = new DateTime((-1L), dateTimeZone0);
      // Undeclared exception!
      try { 
        Seconds.secondsBetween((ReadableInstant) dateTime0, (ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Days days0 = Days.THREE;
      DurationFieldType durationFieldType0 = days0.getFieldType();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between((ReadableInstant) null, (ReadableInstant) null, durationFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Hours hours0 = Hours.hours((-3253));
      Seconds seconds0 = hours0.toStandardSeconds();
      Days days0 = seconds0.toStandardDays();
      days0.toMutablePeriod();
      assertEquals((-135), days0.getDays());
      assertEquals(1, days0.size());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Minutes minutes0 = Minutes.MAX_VALUE;
      minutes0.toPeriod();
      assertEquals(1, minutes0.size());
      assertEquals(Integer.MAX_VALUE, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Minutes minutes0 = Minutes.THREE;
      Seconds seconds0 = Seconds.standardSecondsIn(minutes0);
      boolean boolean0 = minutes0.equals(seconds0);
      assertFalse(boolean0);
      assertEquals(3, minutes0.getMinutes());
      assertEquals(180, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Weeks weeks0 = Weeks.TWO;
      weeks0.hashCode();
      assertEquals(2, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Minutes minutes0 = Minutes.THREE;
      int int0 = minutes0.compareTo((BaseSingleFieldPeriod) minutes0);
      assertEquals(0, int0);
      assertEquals(3, minutes0.getMinutes());
  }
}
