/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 16:04:43 GMT 2021
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutableInterval;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSingleFieldPeriod_ESTest extends BaseSingleFieldPeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Weeks weeks0 = Weeks.ZERO;
      Days days0 = weeks0.toStandardDays();
      Days days1 = Days.ONE;
      boolean boolean0 = days1.equals(days0);
      assertFalse(boolean0);
      assertFalse(days0.equals((Object)days1));
      assertEquals(1, days1.getDays());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Hours hours0 = Hours.ONE;
      // Undeclared exception!
      try { 
        hours0.getValue(1091);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 1091
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Hours hours0 = Hours.SIX;
      // Undeclared exception!
      try { 
        hours0.getFieldType(1428);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 1428
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      Period period0 = new Period(0L, (-4345L), julianChronology0);
      Hours hours0 = Hours.standardHoursIn(period0);
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateTime dateTime0 = new DateTime((long) 157, (DateTimeZone) fixedDateTimeZone0);
      LocalDate localDate0 = dateTime0.toLocalDate();
      MockDate mockDate0 = new MockDate(1428, 1, (-2962), 579, 703, 579);
      YearMonth yearMonth0 = YearMonth.fromDateFields(mockDate0);
      // Undeclared exception!
      try { 
        Seconds.secondsBetween((ReadablePartial) localDate0, (ReadablePartial) yearMonth0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Period period0 = Period.ZERO;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(period0, 303L);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Weeks weeks0 = Weeks.THREE;
      Minutes minutes0 = weeks0.toStandardMinutes();
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(minutes0, 10000L);
      assertEquals(181440, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Days days0 = Days.ONE;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(days0, (-1861L));
      assertEquals((-46426), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Weeks weeks0 = Weeks.ZERO;
      Days days0 = weeks0.toStandardDays();
      int int0 = days0.getValue(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Months months0 = Months.SEVEN;
      int int0 = months0.getValue(0);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Months months0 = Months.MIN_VALUE;
      int int0 = months0.getValue(0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Days days0 = Days.FIVE;
      PeriodType periodType0 = days0.getPeriodType();
      assertEquals(1, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Hours hours0 = Hours.ONE;
      DurationFieldType durationFieldType0 = hours0.getFieldType(0);
      assertEquals("hours", durationFieldType0.getName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Weeks weeks0 = Weeks.THREE;
      Minutes minutes0 = weeks0.toStandardMinutes();
      minutes0.getFieldType();
      assertEquals(30240, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Days days0 = Days.days((-861));
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      int int0 = days0.get(durationFieldType0);
      assertEquals((-861), int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Months months0 = Months.ONE;
      LocalDate localDate0 = new LocalDate((long) 0, (Chronology) null);
      int int0 = BaseSingleFieldPeriod.between(localDate0, localDate0, months0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Seconds seconds0 = Seconds.TWO;
      Minutes minutes0 = seconds0.toStandardMinutes();
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      MonthDay monthDay0 = new MonthDay(dateTimeZone0);
      MonthDay monthDay1 = monthDay0.plusDays(97);
      BaseSingleFieldPeriod.between(monthDay0, monthDay1, minutes0);
      assertEquals(0, minutes0.getMinutes());
      assertEquals(2, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Weeks weeks0 = Weeks.weeks(0);
      LocalDate localDate0 = LocalDate.now();
      LocalDate localDate1 = localDate0.withYearOfEra(106);
      int int0 = BaseSingleFieldPeriod.between(localDate0, localDate1, weeks0);
      assertEquals((-99554), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateTime dateTime0 = new DateTime((Chronology) null);
      DateTime dateTime1 = dateTime0.minusMonths(168);
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      int int0 = BaseSingleFieldPeriod.between(dateTime1, dateTime0, durationFieldType0);
      assertEquals(168, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1257);
      DateTime dateTime0 = new DateTime(dateTimeZone0);
      DateTime dateTime1 = dateTime0.withYear(5062500);
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      int int0 = BaseSingleFieldPeriod.between(dateTime1, dateTime0, durationFieldType0);
      assertEquals((-1848304558), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Weeks weeks0 = Weeks.THREE;
      Days days0 = weeks0.toStandardDays();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(days0, 0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Minutes minutes0 = Minutes.MAX_VALUE;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(minutes0, 322L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 400152232360
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Hours hours0 = Hours.MIN_VALUE;
      // Undeclared exception!
      try { 
        hours0.compareTo((BaseSingleFieldPeriod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(9223372036854775807L);
      Seconds seconds0 = Seconds.TWO;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(localDateTime0, localDateTime0, seconds0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 292278994 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(localDate0, localDate0, (ReadablePeriod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime localDateTime1 = localDateTime0.minusYears(979);
      Weeks weeks0 = Weeks.weeks(104);
      Seconds seconds0 = weeks0.toStandardSeconds();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(localDateTime1, localDateTime0, seconds0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 30894307200
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      DateTime dateTime0 = DateTime.now((Chronology) copticChronology0);
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(dateTime0, dateTime0, durationFieldType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((long) 3040);
      DateTime dateTime0 = dateMidnight0.toDateTimeISO();
      Instant instant0 = dateMidnight0.toInstant();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(dateTime0, instant0, (DurationFieldType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Hours hours0 = Hours.SIX;
      MutableInterval mutableInterval0 = new MutableInterval(hours0, (ReadableInstant) null);
      assertEquals(6, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Months months0 = Months.SIX;
      int int0 = months0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Months months0 = Months.FIVE;
      Months months1 = months0.minus(months0);
      int int0 = months1.compareTo((BaseSingleFieldPeriod) months0);
      assertEquals(0, months1.getMonths());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      Months months0 = Months.monthsBetween((ReadablePartial) monthDay0, (ReadablePartial) monthDay0);
      Months months1 = Months.NINE;
      int int0 = months1.compareTo((BaseSingleFieldPeriod) months0);
      assertEquals(1, int0);
      assertEquals(0, months0.getMonths());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Minutes minutes0 = Minutes.THREE;
      Years years0 = Years.MAX_VALUE;
      // Undeclared exception!
      try { 
        years0.compareTo((BaseSingleFieldPeriod) minutes0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class org.joda.time.Years cannot be compared to class org.joda.time.Minutes
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Weeks weeks0 = Weeks.TWO;
      Days days0 = weeks0.toStandardDays();
      Days days1 = weeks0.toStandardDays();
      boolean boolean0 = days1.equals(days0);
      assertEquals(2, weeks0.getWeeks());
      assertTrue(boolean0);
      assertEquals(14, days1.getDays());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Seconds seconds0 = Seconds.TWO;
      Minutes minutes0 = seconds0.toStandardMinutes();
      Days days0 = Days.ZERO;
      boolean boolean0 = days0.equals(minutes0);
      assertFalse(boolean0);
      assertEquals(2, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Weeks weeks0 = Weeks.THREE;
      Object object0 = new Object();
      boolean boolean0 = weeks0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Hours hours0 = Hours.SIX;
      Weeks weeks0 = hours0.toStandardWeeks();
      boolean boolean0 = weeks0.equals(weeks0);
      assertTrue(boolean0);
      assertEquals(6, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Seconds seconds0 = Seconds.MAX_VALUE;
      Hours hours0 = Hours.standardHoursIn(seconds0);
      Days days0 = hours0.toStandardDays();
      Days days1 = Days.ONE;
      boolean boolean0 = days1.equals(days0);
      assertFalse(boolean0);
      assertFalse(days0.equals((Object)days1));
      assertEquals(596523, hours0.getHours());
      assertEquals(1, days1.getDays());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Months months0 = Months.FIVE;
      DurationFieldType durationFieldType0 = months0.getFieldType();
      boolean boolean0 = months0.isSupported(durationFieldType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Months months0 = Months.EIGHT;
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      boolean boolean0 = months0.isSupported(durationFieldType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Months months0 = Months.EIGHT;
      int int0 = months0.get((DurationFieldType) null);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Weeks weeks0 = Weeks.THREE;
      // Undeclared exception!
      try { 
        weeks0.getValue((-13));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -13
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Minutes minutes0 = Minutes.MIN_VALUE;
      // Undeclared exception!
      try { 
        minutes0.getFieldType((-861));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -861
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Months months0 = Months.EIGHT;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(months0, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot convert period to duration as months is not precise in the period P8M
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Minutes minutes0 = Minutes.standardMinutesIn((ReadablePeriod) null);
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      YearMonth yearMonth0 = new YearMonth();
      // Undeclared exception!
      try { 
        Months.monthsBetween((ReadablePartial) monthDay0, (ReadablePartial) yearMonth0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(0L, (Chronology) null);
      MonthDay monthDay0 = MonthDay.now();
      // Undeclared exception!
      try { 
        Weeks.weeksBetween((ReadablePartial) monthDay0, (ReadablePartial) localDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      MonthDay monthDay0 = MonthDay.now(dateTimeZone0);
      // Undeclared exception!
      try { 
        Years.yearsBetween((ReadablePartial) monthDay0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      Months months0 = Months.monthsBetween((ReadablePartial) monthDay0, (ReadablePartial) monthDay0);
      int int0 = months0.compareTo((BaseSingleFieldPeriod) months0);
      assertEquals(0, months0.getMonths());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Months months0 = Months.NINE;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between((ReadablePartial) null, (ReadablePartial) null, months0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-2808), (-153), (-153), (-2808), 0, 53);
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(17);
      DateMidnight dateMidnight0 = localDate0.toDateMidnight(dateTimeZone0);
      MutableDateTime mutableDateTime0 = dateMidnight0.toMutableDateTime(dateTimeZone0);
      // Undeclared exception!
      try { 
        Years.yearsBetween((ReadableInstant) mutableDateTime0, (ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DateTime dateTime0 = new DateTime((Chronology) null);
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      int int0 = BaseSingleFieldPeriod.between(dateTime0, dateTime0, durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      // Undeclared exception!
      try { 
        Years.yearsBetween((ReadableInstant) null, (ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Months months0 = Months.FOUR;
      months0.toMutablePeriod();
      assertEquals(4, months0.getMonths());
      assertEquals(1, months0.size());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Weeks weeks0 = Weeks.ZERO;
      weeks0.toPeriod();
      assertEquals(1, weeks0.size());
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Seconds seconds0 = Seconds.TWO;
      seconds0.hashCode();
      assertEquals(2, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Seconds seconds0 = Seconds.MAX_VALUE;
      Hours hours0 = Hours.standardHoursIn(seconds0);
      Days days0 = hours0.toStandardDays();
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      int int0 = days0.get(durationFieldType0);
      assertEquals(596523, hours0.getHours());
      assertEquals(24855, int0);
  }
}
