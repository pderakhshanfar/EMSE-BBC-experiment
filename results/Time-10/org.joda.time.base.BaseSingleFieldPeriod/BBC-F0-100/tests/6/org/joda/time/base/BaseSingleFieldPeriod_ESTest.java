/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 13:27:03 GMT 2021
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSingleFieldPeriod_ESTest extends BaseSingleFieldPeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Years years0 = Years.ONE;
      Years years1 = Years.TWO;
      boolean boolean0 = years0.equals(years1);
      assertFalse(years1.equals((Object)years0));
      assertEquals(2, years1.getYears());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Years years0 = Years.years(0);
      // Undeclared exception!
      try { 
        years0.getValue((-452));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -452
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Minutes minutes0 = Minutes.ZERO;
      // Undeclared exception!
      try { 
        minutes0.getFieldType(1791);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 1791
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(17);
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      MonthDay monthDay0 = MonthDay.now((Chronology) julianChronology0);
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      // Undeclared exception!
      try { 
        Days.daysBetween((ReadablePartial) monthDay0, (ReadablePartial) localDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Seconds seconds0 = Seconds.TWO;
      Minutes minutes0 = seconds0.toStandardMinutes();
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(minutes0, 2041L);
      assertEquals(0, int0);
      assertEquals(2, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Hours hours0 = Hours.EIGHT;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(hours0, 1565L);
      assertEquals(18402, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Hours hours0 = Hours.SEVEN;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(hours0, (-1598L));
      assertEquals((-15769), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Hours hours0 = Hours.TWO;
      int int0 = hours0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Years years0 = Years.years(0);
      int int0 = years0.getValue(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Years years0 = Years.THREE;
      int int0 = years0.getValue(0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes((-1719));
      int int0 = minutes0.getValue(0);
      assertEquals((-1719), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes((-2891));
      minutes0.getPeriodType();
      assertEquals((-2891), minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Hours hours0 = Hours.MIN_VALUE;
      DurationFieldType durationFieldType0 = hours0.getFieldType(0);
      assertEquals("hours", durationFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Minutes minutes0 = Minutes.TWO;
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      int int0 = minutes0.get(durationFieldType0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Hours hours0 = Hours.ONE;
      YearMonth yearMonth0 = new YearMonth();
      int int0 = BaseSingleFieldPeriod.between(yearMonth0, yearMonth0, hours0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Hours hours0 = Hours.FOUR;
      YearMonth yearMonth0 = new YearMonth();
      YearMonth yearMonth1 = yearMonth0.minusYears(1);
      int int0 = BaseSingleFieldPeriod.between(yearMonth1, yearMonth0, hours0);
      assertEquals(8760, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Hours hours0 = Hours.FOUR;
      YearMonth yearMonth0 = YearMonth.now();
      YearMonth yearMonth1 = yearMonth0.plusMonths(1);
      int int0 = BaseSingleFieldPeriod.between(yearMonth1, yearMonth0, hours0);
      assertEquals((-672), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Instant instant0 = Instant.now();
      Duration duration0 = Duration.standardSeconds(43200000L);
      Instant instant1 = instant0.withDurationAdded((ReadableDuration) duration0, (-1928));
      Days days0 = Days.ZERO;
      DurationFieldType durationFieldType0 = days0.getFieldType();
      int int0 = BaseSingleFieldPeriod.between(instant1, instant0, durationFieldType0);
      assertEquals(964000, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-77));
      DateTime dateTime0 = new DateTime(dateTimeZone0);
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      DateTime dateTime1 = dateTime0.withFieldAdded(durationFieldType0, 1045);
      int int0 = BaseSingleFieldPeriod.between(dateTime1, dateTime0, durationFieldType0);
      assertEquals((-1045), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Years years0 = Years.ONE;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(years0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot convert period to duration as years is not precise in the period P1Y
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Hours hours0 = Hours.MAX_VALUE;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(hours0, 1128L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 6853671213829
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Hours hours0 = Hours.ONE;
      // Undeclared exception!
      try { 
        hours0.compareTo((BaseSingleFieldPeriod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth(0L);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(yearMonth0, yearMonth0, (ReadablePeriod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      LocalDateTime localDateTime0 = new LocalDateTime();
      Duration duration0 = Duration.parse((String) null);
      PeriodType periodType0 = PeriodType.years();
      PeriodType periodType1 = periodType0.withYearsRemoved();
      Period period0 = duration0.toPeriod(periodType1, (Chronology) iSOChronology0);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(localDateTime0, localDateTime0, period0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Hours hours0 = Hours.MIN_VALUE;
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPANESE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
      LocalDateTime localDateTime1 = localDateTime0.plus((ReadablePeriod) hours0);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(localDateTime1, localDateTime0, hours0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((-1063L));
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateTime dateTime0 = dateMidnight0.toDateTime(dateTimeZone0);
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(dateTime0, dateMidnight0, durationFieldType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
      DateTime dateTime0 = localTime0.toDateTimeToday();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(dateTime0, dateTime0, (DurationFieldType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Hours hours0 = Hours.ONE;
      Hours hours1 = Hours.FIVE;
      int int0 = hours0.compareTo((BaseSingleFieldPeriod) hours1);
      assertEquals((-1), int0);
      assertEquals(5, hours1.getHours());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Hours hours0 = Hours.FIVE;
      LocalTime localTime0 = LocalTime.fromMillisOfDay(554L);
      Period period0 = Period.fieldDifference(localTime0, localTime0);
      Duration duration0 = period0.toStandardDuration();
      Hours hours1 = duration0.toStandardHours();
      int int0 = hours0.compareTo((BaseSingleFieldPeriod) hours1);
      assertEquals(1, int0);
      assertEquals(0, hours1.getHours());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes((-1719));
      Months months0 = Months.ONE;
      // Undeclared exception!
      try { 
        months0.compareTo((BaseSingleFieldPeriod) minutes0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class org.joda.time.Months cannot be compared to class org.joda.time.Minutes
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Years years0 = Years.ZERO;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) null);
      MutablePeriod mutablePeriod0 = new MutablePeriod(years0, ethiopicChronology0);
      boolean boolean0 = years0.equals(mutablePeriod0);
      assertEquals(0, years0.getYears());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Years years0 = Years.ONE;
      Years years1 = Years.TWO;
      boolean boolean0 = years1.equals(years0);
      assertFalse(boolean0);
      assertFalse(years0.equals((Object)years1));
      assertEquals(2, years1.getYears());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Years years0 = Years.years(89);
      Object object0 = new Object();
      boolean boolean0 = years0.equals(object0);
      assertEquals(89, years0.getYears());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Years years0 = Years.years(0);
      boolean boolean0 = years0.equals(years0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Years years0 = Years.ONE;
      assertEquals(1, years0.size());
      
      YearMonth yearMonth0 = new YearMonth();
      Seconds seconds0 = Seconds.secondsBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      boolean boolean0 = years0.equals(seconds0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Hours hours0 = Hours.THREE;
      DurationFieldType durationFieldType0 = hours0.getFieldType();
      boolean boolean0 = hours0.isSupported(durationFieldType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Days days0 = Days.FIVE;
      Weeks weeks0 = days0.toStandardWeeks();
      Seconds seconds0 = weeks0.toStandardSeconds();
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      boolean boolean0 = seconds0.isSupported(durationFieldType0);
      assertFalse(boolean0);
      assertEquals(5, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes((-2891));
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      int int0 = minutes0.get(durationFieldType0);
      assertEquals((-2891), int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Minutes minutes0 = Minutes.ZERO;
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      int int0 = minutes0.get(durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Years years0 = Years.ONE;
      // Undeclared exception!
      try { 
        years0.getValue(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      LocalTime localTime0 = LocalTime.now(dateTimeZone0);
      Days days0 = Days.daysBetween((ReadablePartial) localTime0, (ReadablePartial) localTime0);
      // Undeclared exception!
      try { 
        days0.getFieldType((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Years years0 = Years.MIN_VALUE;
      // Undeclared exception!
      try { 
        Hours.standardHoursIn(years0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot convert period to duration as years is not precise in the period P-2147483648Y
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      Years years0 = Years.yearsBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(years0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Hours hours0 = Hours.standardHoursIn((ReadablePeriod) null);
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      MonthDay monthDay0 = new MonthDay((Chronology) julianChronology0);
      // Undeclared exception!
      try { 
        Weeks.weeksBetween((ReadablePartial) yearMonth0, (ReadablePartial) monthDay0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay(554L);
      YearMonth yearMonth0 = new YearMonth();
      // Undeclared exception!
      try { 
        Hours.hoursBetween((ReadablePartial) localTime0, (ReadablePartial) yearMonth0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      // Undeclared exception!
      try { 
        Hours.hoursBetween((ReadablePartial) localDate0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Years years0 = Years.ONE;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between((ReadablePartial) null, (ReadablePartial) null, years0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      LocalDate localDate0 = new LocalDate();
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(dateTime0, (ReadableInstant) null, durationFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-77));
      DateTime dateTime0 = new DateTime(dateTimeZone0);
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      int int0 = BaseSingleFieldPeriod.between(dateTime0, dateTime0, durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        Minutes.minutesBetween((ReadableInstant) null, (ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Hours hours0 = Hours.FOUR;
      hours0.toMutablePeriod();
      assertEquals(1, hours0.size());
      assertEquals(4, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Seconds seconds0 = Seconds.TWO;
      seconds0.toPeriod();
      assertEquals(1, seconds0.size());
      assertEquals(2, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Hours hours0 = Hours.SEVEN;
      hours0.hashCode();
      assertEquals(7, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Hours hours0 = Hours.EIGHT;
      int int0 = hours0.compareTo((BaseSingleFieldPeriod) hours0);
      assertEquals(0, int0);
      assertEquals(8, hours0.getHours());
  }
}
