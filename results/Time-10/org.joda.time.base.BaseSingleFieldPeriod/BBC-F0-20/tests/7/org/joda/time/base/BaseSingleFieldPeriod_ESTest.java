/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 17:49:37 GMT 2021
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutableInterval;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSingleFieldPeriod_ESTest extends BaseSingleFieldPeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Hours hours0 = Hours.MAX_VALUE;
      Hours hours1 = Hours.MIN_VALUE;
      boolean boolean0 = hours0.equals(hours1);
      assertFalse(hours1.equals((Object)hours0));
      assertEquals(Integer.MAX_VALUE, hours0.getHours());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Months months0 = Months.TWELVE;
      // Undeclared exception!
      try { 
        months0.getValue(729);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 729
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(0L);
      Days days0 = Days.daysBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      // Undeclared exception!
      try { 
        days0.getFieldType(1663);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 1663
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Hours hours0 = Hours.TWO;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(hours0, 1558L);
      assertEquals(4621, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Hours hours0 = Hours.TWO;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(hours0, (-1L));
      assertEquals((-7200000), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Weeks weeks0 = Weeks.weeks(599);
      weeks0.size();
      assertEquals(599, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth((long) 0);
      Minutes minutes0 = Minutes.minutesBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      int int0 = minutes0.getValue(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Seconds seconds0 = Seconds.MAX_VALUE;
      int int0 = seconds0.getValue(0);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      int int0 = seconds0.getValue(0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Hours hours0 = Hours.MAX_VALUE;
      PeriodType periodType0 = hours0.getPeriodType();
      assertEquals("Hours", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth((long) 599);
      Minutes minutes0 = Minutes.minutesBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      DurationFieldType durationFieldType0 = minutes0.getFieldType();
      assertEquals("minutes", durationFieldType0.getName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Hours hours0 = Hours.MIN_VALUE;
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      int int0 = hours0.get(durationFieldType0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(0L);
      Months months0 = Months.FOUR;
      int int0 = BaseSingleFieldPeriod.between(localDateTime0, localDateTime0, months0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Hours hours0 = Hours.MIN_VALUE;
      LocalTime localTime0 = new LocalTime();
      LocalTime localTime1 = localTime0.minusSeconds((-4041));
      int int0 = BaseSingleFieldPeriod.between(localTime0, localTime1, hours0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Hours hours0 = Hours.FIVE;
      YearMonth yearMonth0 = new YearMonth((-48L));
      YearMonth yearMonth1 = new YearMonth(859L);
      int int0 = BaseSingleFieldPeriod.between(yearMonth1, yearMonth0, hours0);
      assertEquals((-744), int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      DateTime dateTime0 = localDateTime0.toDateTime();
      PeriodType periodType0 = PeriodType.dayTime();
      DurationFieldType durationFieldType0 = periodType0.getFieldType(1);
      int int0 = BaseSingleFieldPeriod.between(dateTime0, dateTime0, durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((-1L));
      Duration duration0 = Duration.millis((-1L));
      DateMidnight dateMidnight1 = dateMidnight0.plus((ReadableDuration) duration0);
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      int int0 = BaseSingleFieldPeriod.between(dateMidnight0, dateMidnight1, durationFieldType0);
      assertEquals((-86400000), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Hours hours0 = Hours.TWO;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(hours0, 0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Hours hours0 = Hours.MIN_VALUE;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(hours0, 1558L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -4962093153273
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Period period0 = new Period();
      Seconds seconds0 = period0.toStandardSeconds();
      // Undeclared exception!
      try { 
        seconds0.compareTo((BaseSingleFieldPeriod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Seconds seconds0 = Seconds.TWO;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      YearMonth yearMonth0 = new YearMonth((long) 0, (Chronology) ethiopicChronology0);
      YearMonth yearMonth1 = yearMonth0.withYear(0);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(yearMonth1, yearMonth0, seconds0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for year is not supported
         //
         verifyException("org.joda.time.field.SkipDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(localDateTime0, localDateTime0, (ReadablePeriod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Hours hours0 = Hours.TWO;
      GJChronology gJChronology0 = GJChronology.getInstance();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      LocalTime localTime0 = new LocalTime(dateTimeZone0);
      MonthDay monthDay0 = MonthDay.now(dateTimeZone0);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(localTime0, monthDay0, hours0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      LocalDate localDate0 = new LocalDate((-1301L));
      LocalDate localDate1 = localDate0.withYearOfCentury(0);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(localDate1, localDate0, seconds0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 2177452800
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      DateTime dateTime0 = new DateTime(0L, dateTimeZone0);
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(dateMidnight0, dateTime0, durationFieldType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((-802L), (DateTimeZone) null);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(mutableDateTime0, mutableDateTime0, (DurationFieldType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((-1L));
      DateMidnight dateMidnight1 = dateMidnight0.minusWeeks(692);
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(dateMidnight1, dateMidnight0, durationFieldType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 418521600000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Hours hours0 = Hours.TWO;
      Hours hours1 = Hours.FOUR;
      int int0 = hours0.compareTo((BaseSingleFieldPeriod) hours1);
      assertEquals(4, hours1.getHours());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Weeks weeks0 = Weeks.weeks(599);
      Weeks weeks1 = weeks0.minus(599);
      int int0 = weeks0.compareTo((BaseSingleFieldPeriod) weeks1);
      assertEquals(1, int0);
      assertEquals(0, weeks1.getWeeks());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Seconds seconds0 = Seconds.MAX_VALUE;
      Minutes minutes0 = Minutes.THREE;
      // Undeclared exception!
      try { 
        seconds0.compareTo((BaseSingleFieldPeriod) minutes0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class org.joda.time.Seconds cannot be compared to class org.joda.time.Minutes
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Hours hours0 = Hours.MIN_VALUE;
      MutablePeriod mutablePeriod0 = new MutablePeriod(hours0, (PeriodType) null);
      boolean boolean0 = hours0.equals(mutablePeriod0);
      assertEquals(Integer.MIN_VALUE, hours0.getHours());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Hours hours0 = Hours.FIVE;
      DateTime dateTime0 = new DateTime();
      Years years0 = Years.yearsBetween((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      boolean boolean0 = hours0.equals(years0);
      assertEquals(0, years0.getYears());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Hours hours0 = Hours.FIVE;
      YearMonth yearMonth0 = new YearMonth((-48L));
      boolean boolean0 = hours0.equals(yearMonth0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Hours hours0 = Hours.MAX_VALUE;
      boolean boolean0 = hours0.equals(hours0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Days days0 = Days.daysBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      DurationFieldType durationFieldType0 = days0.getFieldType();
      boolean boolean0 = days0.isSupported(durationFieldType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Days days0 = Days.FOUR;
      Hours hours0 = Hours.EIGHT;
      DurationFieldType durationFieldType0 = hours0.getFieldType();
      boolean boolean0 = days0.isSupported(durationFieldType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      Days days0 = Days.SEVEN;
      int int0 = days0.get(durationFieldType0);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth((long) 0);
      Days days0 = Days.daysBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      Minutes minutes0 = Minutes.minutesBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      DurationFieldType durationFieldType0 = minutes0.getFieldType();
      int int0 = days0.get(durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Seconds seconds0 = Seconds.MAX_VALUE;
      // Undeclared exception!
      try { 
        seconds0.getValue((-2748));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -2748
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Months months0 = Months.TWO;
      // Undeclared exception!
      try { 
        months0.getFieldType((-860));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -860
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Months months0 = Months.TWO;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(months0, 3911);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot convert period to duration as months is not precise in the period P2M
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = BaseSingleFieldPeriod.standardPeriodIn((ReadablePeriod) null, (-1L));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(0L, (-642L));
      Hours hours0 = Hours.standardHoursIn(mutablePeriod0);
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalTime localTime0 = new LocalTime(0L);
      // Undeclared exception!
      try { 
        Seconds.secondsBetween((ReadablePartial) localDateTime0, (ReadablePartial) localTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      YearMonth yearMonth0 = new YearMonth(1464L);
      // Undeclared exception!
      try { 
        Days.daysBetween((ReadablePartial) yearMonth0, (ReadablePartial) localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      // Undeclared exception!
      try { 
        Days.daysBetween((ReadablePartial) localDateTime0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      try { 
        Minutes.minutesBetween((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth((long) 0);
      Minutes minutes0 = Minutes.minutesBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      DurationFieldType durationFieldType0 = minutes0.getFieldType();
      Instant instant0 = new Instant();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(instant0, (ReadableInstant) null, durationFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      Months months0 = Months.monthsIn(mutableInterval0);
      DateTime dateTime0 = new DateTime();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDate localDate0 = new LocalDate((long) 1, dateTimeZone0);
      DateTime dateTime1 = localDate0.toDateTime(dateTime0);
      DurationFieldType durationFieldType0 = months0.getFieldType(0);
      int int0 = BaseSingleFieldPeriod.between(dateTime1, dateTime0, durationFieldType0);
      assertEquals(529, int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      try { 
        Hours.hoursBetween((ReadableInstant) null, (ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Months months0 = Months.TWO;
      months0.toMutablePeriod();
      assertEquals(2, months0.getMonths());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Seconds seconds0 = Seconds.MAX_VALUE;
      seconds0.toPeriod();
      assertEquals(Integer.MAX_VALUE, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth((-48L));
      Days days0 = Days.daysBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      int int0 = days0.compareTo((BaseSingleFieldPeriod) days0);
      assertEquals(0, days0.getDays());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Months months0 = Months.TWO;
      months0.hashCode();
      assertEquals(2, months0.getMonths());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Hours hours0 = Hours.FIVE;
      Hours hours1 = Hours.FOUR;
      boolean boolean0 = hours1.equals(hours0);
      assertEquals(4, hours1.getHours());
      assertFalse(hours0.equals((Object)hours1));
      assertFalse(boolean0);
  }
}
