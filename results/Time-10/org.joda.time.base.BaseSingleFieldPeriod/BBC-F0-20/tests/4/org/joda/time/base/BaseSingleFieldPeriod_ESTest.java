/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 17:48:12 GMT 2021
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSingleFieldPeriod_ESTest extends BaseSingleFieldPeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Hours hours0 = Hours.ZERO;
      Hours hours1 = Hours.MIN_VALUE;
      boolean boolean0 = hours0.equals(hours1);
      assertFalse(boolean0);
      assertFalse(hours1.equals((Object)hours0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Weeks weeks0 = Weeks.MIN_VALUE;
      // Undeclared exception!
      try { 
        weeks0.getValue((-2226));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -2226
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Months months0 = Months.TWO;
      // Undeclared exception!
      try { 
        months0.getFieldType(17);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 17
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((Object) null, (DateTimeZone) null);
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null, islamicChronology_LeapYearPatternType0);
      YearMonth yearMonth0 = new YearMonth(localDateTime0, islamicChronology0);
      // Undeclared exception!
      try { 
        Hours.hoursBetween((ReadablePartial) localDateTime0, (ReadablePartial) yearMonth0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Interval interval0 = new Interval((-33L), (-33L));
      Years years0 = Years.yearsIn(interval0);
      assertEquals(0, years0.getYears());
      
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(years0, 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Days days0 = Days.days((-2187));
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(days0, (-2187));
      assertEquals(86400000, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Seconds seconds0 = Seconds.THREE;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(seconds0, (-2267L));
      assertEquals(3, seconds0.getSeconds());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Months months0 = Months.EIGHT;
      int int0 = months0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Days days0 = Days.days(0);
      int int0 = days0.getValue(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Days days0 = Days.SIX;
      int int0 = days0.getValue(0);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Months months0 = Months.MIN_VALUE;
      int int0 = months0.getValue(0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Months months0 = Months.months(0);
      PeriodType periodType0 = months0.getPeriodType();
      assertEquals("Months", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Hours hours0 = Hours.EIGHT;
      DurationFieldType durationFieldType0 = hours0.getFieldType(0);
      assertEquals("hours", durationFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Days days0 = Days.THREE;
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      int int0 = days0.get(durationFieldType0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      LocalTime localTime0 = new LocalTime(0L, (Chronology) gregorianChronology0);
      Months months0 = Months.monthsBetween((ReadablePartial) localTime0, (ReadablePartial) localTime0);
      int int0 = BaseSingleFieldPeriod.between(localTime0, localTime0, months0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      Days days0 = Days.TWO;
      LocalDate localDate0 = new LocalDate(0L, (DateTimeZone) fixedDateTimeZone0);
      LocalDate localDate1 = localDate0.minusMonths(1331);
      int int0 = BaseSingleFieldPeriod.between(localDate1, localDate0, days0);
      assertEquals(40511, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Hours hours0 = Hours.ZERO;
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.plusWeeks(2978);
      int int0 = BaseSingleFieldPeriod.between(localDateTime1, localDateTime0, hours0);
      assertEquals((-500304), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1022);
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) islamicChronology0);
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      int int0 = BaseSingleFieldPeriod.between(dateMidnight0, dateMidnight0, durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      DateMidnight dateMidnight0 = new DateMidnight(0L, dateTimeZone0);
      DateMidnight dateMidnight1 = dateMidnight0.withWeekyear(27);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      int int0 = BaseSingleFieldPeriod.between(dateMidnight1, dateMidnight0, durationFieldType0);
      assertEquals(1419320, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Hours hours0 = Hours.SIX;
      DurationFieldType durationFieldType0 = hours0.getFieldType();
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      DateTime dateTime0 = DateTime.now((Chronology) iSOChronology0);
      DateTime dateTime1 = dateTime0.minusWeeks(255);
      int int0 = BaseSingleFieldPeriod.between(dateTime0, dateTime1, durationFieldType0);
      assertEquals((-42840), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Hours hours0 = Hours.MIN_VALUE;
      Weeks weeks0 = hours0.toStandardWeeks();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(weeks0, (-592L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 13059021405405
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Days days0 = Days.ZERO;
      // Undeclared exception!
      try { 
        days0.compareTo((BaseSingleFieldPeriod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Days days0 = Days.THREE;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      JulianChronology julianChronology0 = JulianChronology.getInstance(dateTimeZone0);
      YearMonth yearMonth0 = new YearMonth((Chronology) julianChronology0);
      YearMonth yearMonth1 = yearMonth0.withYear(0);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(yearMonth1, yearMonth1, days0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 0 for year is not supported
         //
         verifyException("org.joda.time.field.SkipDateTimeField", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Partial partial0 = new Partial();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(partial0, partial0, (ReadablePeriod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(27);
      LocalDateTime localDateTime0 = new LocalDateTime(0L, dateTimeZone0);
      Seconds seconds0 = Seconds.TWO;
      LocalDateTime localDateTime1 = localDateTime0.withCenturyOfEra(1);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(localDateTime1, localDateTime0, seconds0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 56802470400
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateTime dateTime0 = new DateTime(0L);
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(dateTime0, dateTime0, durationFieldType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(gregorianChronology0);
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) lenientChronology0);
      Instant instant0 = dateMidnight0.toInstant();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(instant0, dateMidnight0, (DurationFieldType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      DateTime dateTime0 = localTime0.toDateTimeToday();
      DateTime dateTime1 = dateTime0.withCenturyOfEra(1023);
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(dateTime1, dateTime0, durationFieldType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -52752703680
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Days days0 = Days.days(1798);
      Days days1 = days0.plus(61);
      int int0 = days0.compareTo((BaseSingleFieldPeriod) days1);
      assertEquals(1859, days1.getDays());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Days days0 = Days.days(0);
      Seconds seconds0 = days0.toStandardSeconds();
      // Undeclared exception!
      try { 
        days0.compareTo((BaseSingleFieldPeriod) seconds0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class org.joda.time.Days cannot be compared to class org.joda.time.Seconds
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Days days0 = Days.days(0);
      int int0 = days0.compareTo((BaseSingleFieldPeriod) days0);
      assertEquals(0, int0);
      assertEquals(0, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Days days0 = Days.FIVE;
      Hours hours0 = days0.toStandardHours();
      Hours hours1 = days0.toStandardHours();
      boolean boolean0 = hours0.equals(hours1);
      assertTrue(boolean0);
      assertEquals(5, days0.getDays());
      assertEquals(120, hours1.getHours());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Hours hours0 = Hours.FIVE;
      Days days0 = Days.FIVE;
      Hours hours1 = days0.toStandardHours();
      boolean boolean0 = hours0.equals(hours1);
      assertEquals(5, days0.getDays());
      assertFalse(boolean0);
      assertFalse(hours1.equals((Object)hours0));
      assertEquals(120, hours1.getHours());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Hours hours0 = Hours.hours(1324);
      boolean boolean0 = hours0.equals((Object) null);
      assertEquals(1324, hours0.getHours());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Days days0 = Days.days(0);
      boolean boolean0 = days0.equals(days0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Hours hours0 = Hours.FIVE;
      Weeks weeks0 = Weeks.MIN_VALUE;
      boolean boolean0 = hours0.equals(weeks0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Months months0 = Months.TWO;
      DurationFieldType durationFieldType0 = months0.getFieldType();
      boolean boolean0 = months0.isSupported(durationFieldType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Years years0 = Years.ZERO;
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      boolean boolean0 = years0.isSupported(durationFieldType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      int int0 = days0.get(durationFieldType0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Hours hours0 = Hours.THREE;
      Minutes minutes0 = hours0.toStandardMinutes();
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      int int0 = minutes0.get(durationFieldType0);
      assertEquals(180, minutes0.getMinutes());
      assertEquals(3, hours0.getHours());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Hours hours0 = Hours.hours(1798);
      // Undeclared exception!
      try { 
        hours0.getValue(1798);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 1798
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Months months0 = Months.ONE;
      // Undeclared exception!
      try { 
        months0.getFieldType((-763));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -763
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Period period0 = Period.years((-842));
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(period0, 1053L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot convert period to duration as years is not precise in the period P-842Y
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Seconds seconds0 = Seconds.standardSecondsIn((ReadablePeriod) null);
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Days days0 = Days.days(0);
      Weeks weeks0 = days0.toStandardWeeks();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(weeks0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.dayOfMonth();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.minuteOfHour();
      dateTimeFieldTypeArray0[2] = dateTimeFieldType2;
      DateTimeFieldType dateTimeFieldType3 = DateTimeFieldType.millisOfDay();
      dateTimeFieldTypeArray0[3] = dateTimeFieldType3;
      int[] intArray0 = new int[4];
      intArray0[1] = 1;
      Partial partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        Months.monthsBetween((ReadablePartial) partial0, (ReadablePartial) partial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must be contiguous
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      MonthDay monthDay0 = MonthDay.fromDateFields(mockDate0);
      YearMonth yearMonth0 = new YearMonth();
      // Undeclared exception!
      try { 
        Months.monthsBetween((ReadablePartial) monthDay0, (ReadablePartial) yearMonth0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      MonthDay monthDay0 = MonthDay.now();
      // Undeclared exception!
      try { 
        Months.monthsBetween((ReadablePartial) monthDay0, (ReadablePartial) localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      LocalTime localTime0 = new LocalTime(0L, (Chronology) gregorianChronology0);
      // Undeclared exception!
      try { 
        Months.monthsBetween((ReadablePartial) localTime0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Days days0 = Days.SIX;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between((ReadablePartial) null, (ReadablePartial) null, days0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      // Undeclared exception!
      try { 
        Hours.hoursBetween((ReadableInstant) dateMidnight0, (ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between((ReadableInstant) null, (ReadableInstant) null, durationFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Days days0 = Days.days(0);
      Days days1 = days0.plus(1032);
      int int0 = days1.compareTo((BaseSingleFieldPeriod) days0);
      assertEquals(1, int0);
      assertEquals(1032, days1.getDays());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Minutes minutes0 = Minutes.ZERO;
      Seconds seconds0 = minutes0.toStandardSeconds();
      seconds0.toMutablePeriod();
      assertEquals(0, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Days days0 = Days.SIX;
      days0.toPeriod();
      assertEquals(6, days0.getDays());
      assertEquals(1, days0.size());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Hours hours0 = Hours.THREE;
      hours0.hashCode();
      assertEquals(3, hours0.getHours());
  }
}
