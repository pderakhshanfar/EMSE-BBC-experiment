/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 17:47:52 GMT 2021
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.GregorianCalendar;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.JulianChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSingleFieldPeriod_ESTest extends BaseSingleFieldPeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Hours hours0 = Hours.FIVE;
      hours0.hashCode();
      assertEquals(5, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Hours hours0 = Hours.ONE;
      Hours hours1 = Hours.FOUR;
      boolean boolean0 = hours0.equals(hours1);
      assertFalse(boolean0);
      assertFalse(hours1.equals((Object)hours0));
      assertEquals(4, hours1.getHours());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Years years0 = Years.ONE;
      // Undeclared exception!
      try { 
        years0.getValue((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Years years0 = Years.MAX_VALUE;
      // Undeclared exception!
      try { 
        years0.getFieldType((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      Partial partial0 = new Partial(gregorianChronology0);
      YearMonth yearMonth0 = YearMonth.now((Chronology) gregorianChronology0);
      // Undeclared exception!
      try { 
        Weeks.weeksBetween((ReadablePartial) partial0, (ReadablePartial) yearMonth0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds((-796));
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(seconds0, (-796));
      assertEquals(1000, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Hours hours0 = Hours.FOUR;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(hours0, (-1972L));
      assertEquals((-7302), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      Partial partial0 = new Partial(gregorianChronology0);
      Weeks weeks0 = Weeks.weeksBetween((ReadablePartial) partial0, (ReadablePartial) partial0);
      int int0 = weeks0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      Minutes minutes0 = Minutes.minutesBetween((ReadablePartial) monthDay0, (ReadablePartial) monthDay0);
      int int0 = minutes0.getValue(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Years years0 = Years.ONE;
      int int0 = years0.getValue(0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Seconds seconds0 = Seconds.MAX_VALUE;
      Seconds seconds1 = seconds0.negated();
      int int0 = seconds1.getValue(0);
      assertEquals(Integer.MAX_VALUE, seconds0.getSeconds());
      assertEquals((-2147483647), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Hours hours0 = Hours.ONE;
      PeriodType periodType0 = hours0.getPeriodType();
      assertEquals(1, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      Weeks weeks0 = Weeks.weeksBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      DurationFieldType durationFieldType0 = weeks0.getFieldType(0);
      assertEquals("weeks", durationFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Hours hours0 = Hours.MIN_VALUE;
      DurationFieldType durationFieldType0 = hours0.getFieldType();
      assertEquals("hours", durationFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Hours hours0 = Hours.FOUR;
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      int int0 = hours0.get(durationFieldType0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Hours hours0 = Hours.MAX_VALUE;
      MockDate mockDate0 = new MockDate(1, (-1740), 0, 1, (-2710), (-2710));
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      LocalTime localTime1 = localTime0.minusHours(1);
      int int0 = BaseSingleFieldPeriod.between(localTime1, localTime0, hours0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Hours hours0 = Hours.MIN_VALUE;
      LocalDate localDate0 = new LocalDate((long) 0);
      LocalDate localDate1 = localDate0.minusMonths((-2315));
      int int0 = BaseSingleFieldPeriod.between(localDate1, localDate0, hours0);
      assertEquals((-1691064), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Hours hours0 = Hours.THREE;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(8);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      LocalDate localDate0 = new LocalDate((Chronology) buddhistChronology0);
      DateMidnight dateMidnight0 = localDate0.toDateMidnight();
      DateMidnight dateMidnight1 = dateMidnight0.withZoneRetainFields(dateTimeZone0);
      DurationFieldType durationFieldType0 = hours0.getFieldType();
      int int0 = BaseSingleFieldPeriod.between(dateMidnight1, dateMidnight0, durationFieldType0);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Hours hours0 = Hours.THREE;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(8);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      LocalDate localDate0 = new LocalDate((Chronology) buddhistChronology0);
      LocalDate localDate1 = localDate0.withYear(1);
      DateMidnight dateMidnight0 = localDate1.toDateMidnight();
      DateMidnight dateMidnight1 = new DateMidnight(1, 1, 1);
      DurationFieldType durationFieldType0 = hours0.getFieldType();
      int int0 = BaseSingleFieldPeriod.between(dateMidnight1, dateMidnight0, durationFieldType0);
      assertEquals((-4758912), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Hours hours0 = Hours.FOUR;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(hours0, 0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Days days0 = Days.days(1);
      // Undeclared exception!
      try { 
        days0.compareTo((BaseSingleFieldPeriod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      GregorianCalendar gregorianCalendar0 = dateMidnight0.toGregorianCalendar();
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(gregorianCalendar0);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(localDateTime0, localDateTime0, (ReadablePeriod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Hours hours0 = Hours.MAX_VALUE;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2258));
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.minusDays(Integer.MAX_VALUE);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(localDateTime1, localDateTime0, hours0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 51539607528
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      LocalDate localDate0 = LocalDate.now((Chronology) ethiopicChronology0);
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay();
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(dateTime0, dateTime0, durationFieldType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DateTime dateTime0 = new DateTime((long) 1925);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(dateTime0, dateTime0, (DurationFieldType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, dateTimeZone0);
      Interval interval0 = new Interval((ReadableDuration) null, mutableDateTime0);
      DateTime dateTime0 = interval0.getEnd();
      DateTime dateTime1 = dateTime0.withDate(5550, 2, 4);
      DateTime dateTime2 = dateTime1.withYearOfEra(1);
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(dateTime2, dateTime1, durationFieldType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 2918491200
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Hours hours0 = Hours.parseHours((String) null);
      Hours hours1 = Hours.SEVEN;
      int int0 = hours0.compareTo((BaseSingleFieldPeriod) hours1);
      assertEquals((-1), int0);
      assertEquals(7, hours1.getHours());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Hours hours0 = Hours.FOUR;
      Hours hours1 = Hours.FIVE;
      int int0 = hours1.compareTo((BaseSingleFieldPeriod) hours0);
      assertEquals(1, int0);
      assertEquals(5, hours1.getHours());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Hours hours0 = Hours.MIN_VALUE;
      LocalDateTime localDateTime0 = new LocalDateTime();
      Weeks weeks0 = Weeks.weeksBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      // Undeclared exception!
      try { 
        hours0.compareTo((BaseSingleFieldPeriod) weeks0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class org.joda.time.Hours cannot be compared to class org.joda.time.Weeks
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Hours hours0 = Hours.ZERO;
      MutablePeriod mutablePeriod0 = new MutablePeriod(hours0);
      boolean boolean0 = hours0.equals(mutablePeriod0);
      assertTrue(boolean0);
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Hours hours0 = Hours.ONE;
      Period period0 = Period.hours((-2));
      Weeks weeks0 = period0.toStandardWeeks();
      boolean boolean0 = hours0.equals(weeks0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Hours hours0 = Hours.FOUR;
      Hours hours1 = Hours.FIVE;
      boolean boolean0 = hours1.equals(hours0);
      assertFalse(hours0.equals((Object)hours1));
      assertEquals(5, hours1.getHours());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Seconds seconds0 = Seconds.parseSeconds((String) null);
      boolean boolean0 = seconds0.equals(seconds0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Hours hours0 = Hours.FOUR;
      boolean boolean0 = hours0.equals(" cannot be compared to ");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Days days0 = Days.MAX_VALUE;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      boolean boolean0 = days0.isSupported(durationFieldType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Days days0 = Days.ZERO;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      boolean boolean0 = days0.isSupported(durationFieldType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Years years0 = Years.MIN_VALUE;
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      int int0 = years0.get(durationFieldType0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Seconds seconds0 = Seconds.parseSeconds((String) null);
      Weeks weeks0 = seconds0.toStandardWeeks();
      Minutes minutes0 = weeks0.toStandardMinutes();
      DurationFieldType durationFieldType0 = minutes0.getFieldType();
      Hours hours0 = weeks0.toStandardHours();
      int int0 = hours0.get(durationFieldType0);
      assertEquals(0, hours0.getHours());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Seconds seconds0 = Seconds.ZERO;
      Minutes minutes0 = seconds0.toStandardMinutes();
      // Undeclared exception!
      try { 
        minutes0.getValue(1048);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 1048
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      Years years0 = Years.yearsBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      // Undeclared exception!
      try { 
        years0.getFieldType(407);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 407
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      Partial partial0 = new Partial(gregorianChronology0);
      Weeks weeks0 = Weeks.weeksBetween((ReadablePartial) partial0, (ReadablePartial) partial0);
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(weeks0, (-2689L));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Days days0 = Days.standardDaysIn((ReadablePeriod) null);
      assertEquals(0, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Months months0 = Months.MAX_VALUE;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(months0, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot convert period to duration as months is not precise in the period P2147483647M
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(331, 1810, (-1));
      YearMonth yearMonth0 = YearMonth.fromCalendarFields(mockGregorianCalendar0);
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      MonthDay monthDay0 = MonthDay.now((Chronology) julianChronology0);
      // Undeclared exception!
      try { 
        Minutes.minutesBetween((ReadablePartial) yearMonth0, (ReadablePartial) monthDay0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDate localDate0 = localDateTime0.toLocalDate();
      Weeks weeks0 = Weeks.weeksBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(localDateTime0, localDate0, weeks0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      YearMonth yearMonth0 = YearMonth.now((Chronology) gregorianChronology0);
      // Undeclared exception!
      try { 
        Minutes.minutesBetween((ReadablePartial) yearMonth0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      // Undeclared exception!
      try { 
        Years.yearsBetween((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LocalTime localTime0 = new LocalTime((Object) null, (DateTimeZone) null);
      DateTime dateTime0 = localTime0.toDateTimeToday((DateTimeZone) null);
      // Undeclared exception!
      try { 
        Hours.hoursBetween((ReadableInstant) dateTime0, (ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, dateTimeZone0);
      Interval interval0 = new Interval((ReadableDuration) null, mutableDateTime0);
      DateTime dateTime0 = interval0.getEnd();
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      int int0 = BaseSingleFieldPeriod.between(dateTime0, dateTime0, durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PeriodType periodType0 = PeriodType.months();
      DurationFieldType durationFieldType0 = periodType0.getFieldType(0);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between((ReadableInstant) null, (ReadableInstant) null, durationFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Hours hours0 = Hours.FOUR;
      Minutes minutes0 = hours0.toStandardMinutes();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      YearMonth yearMonth0 = new YearMonth((Chronology) buddhistChronology0);
      BaseSingleFieldPeriod.between(yearMonth0, yearMonth0, minutes0);
      assertEquals(4, hours0.getHours());
      assertEquals(240, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      Weeks weeks0 = Weeks.weeksBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      weeks0.toMutablePeriod();
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Weeks weeks0 = Weeks.MAX_VALUE;
      Period period0 = weeks0.toPeriod();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(period0, 1L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 1298798109705600000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Hours hours0 = Hours.MIN_VALUE;
      int int0 = hours0.compareTo((BaseSingleFieldPeriod) hours0);
      assertEquals(0, int0);
      assertEquals(Integer.MIN_VALUE, hours0.getHours());
  }
}
