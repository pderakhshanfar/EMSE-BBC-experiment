/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 14:35:58 GMT 2020
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.DurationFieldType;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSingleFieldPeriod_ESTest extends BaseSingleFieldPeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Days days0 = Days.TWO;
      Days days1 = days0.negated();
      boolean boolean0 = days0.equals(days1);
      assertFalse(days1.equals((Object)days0));
      assertEquals(2, days0.getDays());
      assertEquals((-2), days1.getDays());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Days days0 = Days.ZERO;
      // Undeclared exception!
      try { 
        days0.getValue(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Months months0 = Months.ONE;
      // Undeclared exception!
      try { 
        months0.getFieldType(1441);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 1441
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay((long) 0);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      LocalTime localTime0 = new LocalTime((Chronology) ethiopicChronology0);
      // Undeclared exception!
      try { 
        Days.daysBetween((ReadablePartial) localTime0, (ReadablePartial) monthDay0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Period period0 = Period.hours(2845);
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(period0, 2845);
      assertEquals(3600000, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Days days0 = Days.FIVE;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(days0, (-1680L));
      assertEquals((-257142), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Months months0 = Months.TWO;
      int int0 = months0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay((long) 0);
      Years years0 = Years.yearsBetween((ReadablePartial) monthDay0, (ReadablePartial) monthDay0);
      int int0 = years0.getValue(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Years years0 = Years.MIN_VALUE;
      int int0 = years0.getValue(0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Days days0 = Days.TWO;
      PeriodType periodType0 = days0.getPeriodType();
      assertEquals(1, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Minutes minutes0 = Minutes.MIN_VALUE;
      DurationFieldType durationFieldType0 = minutes0.getFieldType(0);
      assertEquals("minutes", durationFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Weeks weeks0 = Weeks.TWO;
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      int int0 = weeks0.get(durationFieldType0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Days days0 = Days.ZERO;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null);
      LocalDateTime localDateTime0 = new LocalDateTime((long) 0, (Chronology) gJChronology0);
      int int0 = BaseSingleFieldPeriod.between(localDateTime0, localDateTime0, days0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Months months0 = Months.MAX_VALUE;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(315);
      DateMidnight dateMidnight0 = new DateMidnight((long) 1, dateTimeZone0);
      DateMidnight dateMidnight1 = dateMidnight0.withYearOfEra(1);
      MutableDateTime mutableDateTime0 = dateMidnight1.toMutableDateTime(dateTimeZone0);
      DurationFieldType durationFieldType0 = months0.getFieldType();
      int int0 = BaseSingleFieldPeriod.between(mutableDateTime0, dateMidnight0, durationFieldType0);
      assertEquals(23628, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Seconds seconds0 = Seconds.TWO;
      Days days0 = seconds0.toStandardDays();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(days0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Weeks weeks0 = Weeks.MIN_VALUE;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(weeks0, (-119L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 10914269834541176
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Months months0 = Months.ONE;
      // Undeclared exception!
      try { 
        months0.compareTo((BaseSingleFieldPeriod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Months months0 = Months.EIGHT;
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      LocalDateTime localDateTime0 = new LocalDateTime(9223372036854775807L, (Chronology) iSOChronology0);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(localDateTime0, localDateTime0, months0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 292278994 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(0L);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(localDateTime0, localDateTime0, (ReadablePeriod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Months months0 = Months.MIN_VALUE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(59, 59, (-129));
      YearMonth yearMonth0 = YearMonth.fromCalendarFields(mockGregorianCalendar0);
      YearMonth yearMonth1 = yearMonth0.plus(months0);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(yearMonth0, yearMonth1, months0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      DateTime dateTime0 = DateTime.now(dateTimeZone0);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(dateTime0, dateTime0, (DurationFieldType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Days days0 = Days.ZERO;
      Days days1 = days0.plus(1449);
      int int0 = days0.compareTo((BaseSingleFieldPeriod) days1);
      assertEquals(1449, days1.getDays());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Months months0 = Months.MIN_VALUE;
      Months months1 = Months.FIVE;
      int int0 = months1.compareTo((BaseSingleFieldPeriod) months0);
      assertEquals(5, months1.getMonths());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Days days0 = Days.ZERO;
      Minutes minutes0 = days0.toStandardMinutes();
      // Undeclared exception!
      try { 
        minutes0.compareTo((BaseSingleFieldPeriod) days0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class org.joda.time.Minutes cannot be compared to class org.joda.time.Days
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Days days0 = Days.SEVEN;
      int int0 = days0.compareTo((BaseSingleFieldPeriod) days0);
      assertEquals(7, days0.getDays());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Days days0 = Days.FIVE;
      Days days1 = Days.TWO;
      boolean boolean0 = days1.equals(days0);
      assertEquals(2, days1.getDays());
      assertFalse(days0.equals((Object)days1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Months months0 = Months.MIN_VALUE;
      Days days0 = Days.ONE;
      boolean boolean0 = days0.equals(months0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Months months0 = Months.FIVE;
      Integer integer0 = new Integer((-1746));
      boolean boolean0 = months0.equals(integer0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Months months0 = Months.FIVE;
      boolean boolean0 = months0.equals(months0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Months months0 = Months.EIGHT;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      JulianChronology julianChronology0 = JulianChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      MutablePeriod mutablePeriod0 = new MutablePeriod(months0, julianChronology0);
      boolean boolean0 = months0.equals(mutablePeriod0);
      assertTrue(boolean0);
      assertEquals(8, months0.getMonths());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Months months0 = Months.MIN_VALUE;
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      boolean boolean0 = months0.isSupported(durationFieldType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Years years0 = Years.ONE;
      DurationFieldType durationFieldType0 = years0.getFieldType();
      Days days0 = Days.SIX;
      boolean boolean0 = days0.isSupported(durationFieldType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Months months0 = Months.MIN_VALUE;
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      int int0 = months0.get(durationFieldType0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Years years0 = Years.ONE;
      Seconds seconds0 = Seconds.TWO;
      DurationFieldType durationFieldType0 = years0.getFieldType();
      int int0 = seconds0.get(durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Months months0 = Months.TEN;
      // Undeclared exception!
      try { 
        months0.getValue((-2516));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -2516
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Days days0 = Days.days(0);
      // Undeclared exception!
      try { 
        days0.getFieldType((-1160));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -1160
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Months months0 = Months.FIVE;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(months0, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot convert period to duration as months is not precise in the period P5M
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = BaseSingleFieldPeriod.standardPeriodIn((ReadablePeriod) null, (-5502L));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay((long) 0);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      YearMonth yearMonth0 = new YearMonth(0L, (Chronology) gregorianChronology0);
      // Undeclared exception!
      try { 
        Weeks.weeksBetween((ReadablePartial) yearMonth0, (ReadablePartial) monthDay0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(0L, (DateTimeZone) null);
      LocalTime localTime0 = new LocalTime();
      Period period0 = new Period();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(localDate0, localTime0, period0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      LocalTime localTime0 = new LocalTime((Chronology) ethiopicChronology0);
      // Undeclared exception!
      try { 
        Days.daysBetween((ReadablePartial) localTime0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      // Undeclared exception!
      try { 
        Years.yearsBetween((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DateTime dateTime0 = new DateTime(2579L, (DateTimeZone) null);
      // Undeclared exception!
      try { 
        Minutes.minutesBetween((ReadableInstant) dateTime0, (ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Months months0 = Months.MAX_VALUE;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(315);
      DateMidnight dateMidnight0 = new DateMidnight((long) 1, dateTimeZone0);
      MutableDateTime mutableDateTime0 = dateMidnight0.toMutableDateTime(dateTimeZone0);
      DurationFieldType durationFieldType0 = months0.getFieldType();
      int int0 = BaseSingleFieldPeriod.between(mutableDateTime0, dateMidnight0, durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Months months0 = Months.TEN;
      DurationFieldType durationFieldType0 = months0.getFieldType();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between((ReadableInstant) null, (ReadableInstant) null, durationFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Years years0 = Years.ONE;
      Years years1 = years0.negated();
      Period period0 = years0.toPeriod();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
      YearMonth yearMonth1 = yearMonth0.plus(years1);
      int int0 = BaseSingleFieldPeriod.between(yearMonth1, yearMonth0, period0);
      assertEquals(1, int0);
      assertEquals(1, years0.getYears());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Minutes minutes0 = Minutes.TWO;
      minutes0.toMutablePeriod();
      assertEquals(2, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Years years0 = Years.ONE;
      Period period0 = years0.toPeriod();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      YearMonth yearMonth0 = new YearMonth(dateTimeZone0);
      YearMonth yearMonth1 = yearMonth0.plus(years0);
      int int0 = BaseSingleFieldPeriod.between(yearMonth1, yearMonth0, period0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Months months0 = Months.ONE;
      months0.hashCode();
      assertEquals(1, months0.getMonths());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Years years0 = Years.THREE;
      int int0 = years0.getValue(0);
      assertEquals(3, int0);
  }
}
