/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 02:03:16 GMT 2021
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSingleFieldPeriod_ESTest extends BaseSingleFieldPeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Weeks weeks0 = Weeks.ONE;
      Minutes minutes0 = weeks0.toStandardMinutes();
      Minutes minutes1 = Minutes.ZERO;
      boolean boolean0 = minutes0.equals(minutes1);
      assertEquals(10080, minutes0.getMinutes());
      assertFalse(boolean0);
      assertFalse(minutes1.equals((Object)minutes0));
      assertEquals(1, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Minutes minutes0 = Minutes.MIN_VALUE;
      // Undeclared exception!
      try { 
        minutes0.getValue((-118));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -118
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Hours hours0 = Hours.hours(0);
      // Undeclared exception!
      try { 
        hours0.getFieldType((-1360));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -1360
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDate localDate0 = localDateTime0.toLocalDate();
      // Undeclared exception!
      try { 
        Hours.hoursBetween((ReadablePartial) localDate0, (ReadablePartial) localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Minutes minutes0 = Minutes.THREE;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(minutes0, 1000L);
      assertEquals(180, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Seconds seconds0 = Seconds.THREE;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(seconds0, (-665L));
      assertEquals((-4), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Seconds seconds0 = Seconds.THREE;
      int int0 = seconds0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      YearMonth yearMonth0 = YearMonth.fromCalendarFields(mockGregorianCalendar0);
      Seconds seconds0 = Seconds.secondsBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      int int0 = seconds0.getValue(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Seconds seconds0 = Seconds.TWO;
      int int0 = seconds0.getValue(0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      int int0 = seconds0.getValue(0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Seconds seconds0 = Seconds.TWO;
      Minutes minutes0 = seconds0.toStandardMinutes();
      minutes0.getPeriodType();
      assertEquals(2, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Weeks weeks0 = Weeks.TWO;
      DurationFieldType durationFieldType0 = weeks0.getFieldType(0);
      assertEquals("weeks", durationFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      DurationFieldType durationFieldType0 = seconds0.getFieldType();
      int int0 = seconds0.get(durationFieldType0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Weeks weeks0 = Weeks.ONE;
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) julianChronology0);
      LocalDateTime localDateTime1 = localDateTime0.withCenturyOfEra(1542);
      int int0 = BaseSingleFieldPeriod.between(localDateTime0, localDateTime1, weeks0);
      assertEquals(7936360, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Seconds seconds0 = Seconds.ONE;
      Weeks weeks0 = seconds0.toStandardWeeks();
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) iSOChronology0);
      LocalDateTime localDateTime1 = localDateTime0.withCenturyOfEra(355);
      BaseSingleFieldPeriod.between(localDateTime1, localDateTime0, weeks0);
      assertEquals(1, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      DateTime dateTime0 = new DateTime(3, 3, 3, 3, 3, 3, 3);
      int int0 = BaseSingleFieldPeriod.between(dateTime0, dateTime0, durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Seconds seconds0 = Seconds.ONE;
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.withMinuteOfHour(0);
      DurationFieldType durationFieldType0 = seconds0.getFieldType();
      int int0 = BaseSingleFieldPeriod.between(dateTime1, dateTime0, durationFieldType0);
      assertEquals(1260, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      YearMonth yearMonth0 = YearMonth.now((DateTimeZone) fixedDateTimeZone0);
      Interval interval0 = yearMonth0.toInterval((DateTimeZone) fixedDateTimeZone0);
      Duration duration0 = interval0.toDuration();
      DateMidnight dateMidnight0 = DateMidnight.now();
      Instant instant0 = dateMidnight0.toInstant();
      Instant instant1 = instant0.withDurationAdded((ReadableDuration) duration0, 496);
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      int int0 = BaseSingleFieldPeriod.between(instant1, dateMidnight0, durationFieldType0);
      assertEquals((-27776), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds(0);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(seconds0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Minutes minutes0 = Minutes.MIN_VALUE;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(minutes0, (-2084L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 61827744184
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Partial partial0 = new Partial();
      Years years0 = Years.yearsBetween((ReadablePartial) partial0, (ReadablePartial) partial0);
      // Undeclared exception!
      try { 
        years0.compareTo((BaseSingleFieldPeriod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Seconds seconds0 = Seconds.ZERO;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      YearMonth yearMonth0 = new YearMonth((-846), 7, ethiopicChronology0);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(yearMonth0, yearMonth0, seconds0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (EthiopicChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) julianChronology0);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(localDateTime0, localDateTime0, (ReadablePeriod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) iSOChronology0);
      PeriodType periodType0 = PeriodType.days();
      PeriodType periodType1 = periodType0.withDaysRemoved();
      Period period0 = duration0.toPeriodFrom((ReadableInstant) null, periodType1);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(localDateTime0, localDateTime0, period0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Seconds seconds0 = Seconds.ONE;
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) iSOChronology0);
      LocalDateTime localDateTime1 = localDateTime0.withWeekyear(0);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(localDateTime0, localDateTime1, seconds0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -63555408000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateTime dateTime0 = new DateTime(0L);
      DateTime dateTime1 = dateTime0.minusYears(5062500);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTime dateTime2 = DateTime.now((Chronology) buddhistChronology0);
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(dateTime2, dateTime1, durationFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The minuend instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[Etc/UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(dateTime0, dateTime0, durationFieldType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DateTime dateTime0 = new DateTime(3, 3, 3, 3, 3, 3, 3);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(dateTime0, dateTime0, (DurationFieldType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Seconds seconds0 = Seconds.ONE;
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.withDate(1, 1, 1);
      DurationFieldType durationFieldType0 = seconds0.getFieldType();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(dateTime1, dateTime0, durationFieldType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 63527932800
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Years years0 = Years.THREE;
      Years years1 = Years.years((-235));
      int int0 = years1.compareTo((BaseSingleFieldPeriod) years0);
      assertEquals((-1), int0);
      assertEquals((-235), years1.getYears());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Seconds seconds0 = Seconds.ONE;
      Seconds seconds1 = Seconds.TWO;
      int int0 = seconds1.compareTo((BaseSingleFieldPeriod) seconds0);
      assertEquals(1, int0);
      assertEquals(2, seconds1.getSeconds());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      Minutes minutes0 = Minutes.ONE;
      // Undeclared exception!
      try { 
        seconds0.compareTo((BaseSingleFieldPeriod) minutes0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class org.joda.time.Seconds cannot be compared to class org.joda.time.Minutes
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Years years0 = Years.THREE;
      int int0 = years0.compareTo((BaseSingleFieldPeriod) years0);
      assertEquals(3, years0.getYears());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Weeks weeks0 = Weeks.ONE;
      Minutes minutes0 = weeks0.toStandardMinutes();
      Minutes minutes1 = weeks0.toStandardMinutes();
      boolean boolean0 = minutes0.equals(minutes1);
      assertEquals(10080, minutes1.getMinutes());
      assertEquals(1, weeks0.getWeeks());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Minutes minutes0 = Minutes.THREE;
      Period period0 = new Period();
      boolean boolean0 = minutes0.equals(period0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Minutes minutes0 = Minutes.MIN_VALUE;
      Object object0 = new Object();
      boolean boolean0 = minutes0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Weeks weeks0 = Weeks.ONE;
      Minutes minutes0 = weeks0.toStandardMinutes();
      boolean boolean0 = minutes0.equals(minutes0);
      assertTrue(boolean0);
      assertEquals(1, weeks0.getWeeks());
      assertEquals(10080, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Seconds seconds0 = Seconds.TWO;
      Minutes minutes0 = Minutes.standardMinutesIn(seconds0);
      Days days0 = Days.THREE;
      Minutes minutes1 = days0.toStandardMinutes();
      boolean boolean0 = minutes0.equals(minutes1);
      assertEquals(4320, minutes1.getMinutes());
      assertEquals(3, days0.getDays());
      assertEquals(0, minutes0.getMinutes());
      assertFalse(boolean0);
      assertFalse(minutes1.equals((Object)minutes0));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Years years0 = Years.THREE;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      boolean boolean0 = years0.isSupported(durationFieldType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Years years0 = Years.THREE;
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      boolean boolean0 = years0.isSupported(durationFieldType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Seconds seconds0 = Seconds.TWO;
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      int int0 = seconds0.get(durationFieldType0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Weeks weeks0 = Weeks.ONE;
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      int int0 = weeks0.get(durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Minutes minutes0 = Minutes.MIN_VALUE;
      // Undeclared exception!
      try { 
        minutes0.getValue(1131);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 1131
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Weeks weeks0 = Weeks.ONE;
      // Undeclared exception!
      try { 
        weeks0.getFieldType(17);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 17
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Years years0 = Years.THREE;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(years0, (-665L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot convert period to duration as years is not precise in the period P3Y
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = BaseSingleFieldPeriod.standardPeriodIn((ReadablePeriod) null, (-665L));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = new LocalDateTime(100000000000L, dateTimeZone0);
      // Undeclared exception!
      try { 
        Seconds.secondsBetween((ReadablePartial) localTime0, (ReadablePartial) localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Partial partial0 = new Partial();
      ISOChronology iSOChronology0 = ISOChronology.getInstance((DateTimeZone) null);
      LocalTime localTime0 = new LocalTime((Chronology) iSOChronology0);
      // Undeclared exception!
      try { 
        Years.yearsBetween((ReadablePartial) localTime0, (ReadablePartial) partial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Partial partial0 = new Partial();
      // Undeclared exception!
      try { 
        Years.yearsBetween((ReadablePartial) partial0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Seconds seconds0 = Seconds.ONE;
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) iSOChronology0);
      int int0 = BaseSingleFieldPeriod.between(localDateTime0, localDateTime0, seconds0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Seconds seconds0 = Seconds.MAX_VALUE;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between((ReadablePartial) null, (ReadablePartial) null, seconds0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Duration duration0 = new Duration((ReadableInstant) null, (ReadableInstant) null);
      Interval interval0 = new Interval(duration0, (ReadableInstant) null);
      DateTime dateTime0 = interval0.getEnd();
      // Undeclared exception!
      try { 
        Seconds.secondsBetween((ReadableInstant) dateTime0, (ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between((ReadableInstant) null, (ReadableInstant) null, durationFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds(3);
      seconds0.toMutablePeriod();
      assertEquals(1, seconds0.size());
      assertEquals(3, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Seconds seconds0 = Seconds.TWO;
      seconds0.hashCode();
      assertEquals(2, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Seconds seconds0 = Seconds.ONE;
      seconds0.toPeriod();
      assertEquals(1, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
  }
}
