/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 16:04:23 GMT 2021
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.Years;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSingleFieldPeriod_ESTest extends BaseSingleFieldPeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Weeks weeks0 = Weeks.THREE;
      Weeks weeks1 = Weeks.ONE;
      boolean boolean0 = weeks0.equals(weeks1);
      assertFalse(boolean0);
      assertEquals(1, weeks1.getWeeks());
      assertFalse(weeks1.equals((Object)weeks0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Minutes minutes0 = Minutes.MIN_VALUE;
      // Undeclared exception!
      try { 
        minutes0.getValue((-1735));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -1735
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Hours hours0 = Hours.hoursIn((ReadableInterval) null);
      Minutes minutes0 = hours0.toStandardMinutes();
      Weeks weeks0 = minutes0.toStandardWeeks();
      // Undeclared exception!
      try { 
        weeks0.getFieldType((-3557));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -3557
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      Date date0 = localDate0.toDate();
      LocalTime localTime0 = LocalTime.fromDateFields(date0);
      // Undeclared exception!
      try { 
        Years.yearsBetween((ReadablePartial) localTime0, (ReadablePartial) localDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Hours hours0 = Hours.ZERO;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(hours0, 26607895200000L);
      assertEquals(0, int0);
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Days days0 = Days.ONE;
      Period period0 = days0.toPeriod();
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(period0, 2839L);
      assertEquals(30433, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Days days0 = Days.FIVE;
      Period period0 = days0.toPeriod();
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(period0, (-2668L));
      assertEquals((-161919), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Minutes minutes0 = Minutes.ZERO;
      int int0 = minutes0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Hours hours0 = Hours.hoursIn((ReadableInterval) null);
      int int0 = hours0.getValue(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Days days0 = Days.SIX;
      int int0 = days0.getValue(0);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Hours hours0 = Hours.MIN_VALUE;
      int int0 = hours0.getValue(0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Hours hours0 = Hours.hoursIn((ReadableInterval) null);
      PeriodType periodType0 = hours0.getPeriodType();
      assertEquals(1, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Hours hours0 = Hours.SEVEN;
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      int int0 = hours0.get(durationFieldType0);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      Weeks weeks0 = Weeks.MIN_VALUE;
      int int0 = weeks0.get(durationFieldType0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Days days0 = Days.ZERO;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(671);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      int int0 = BaseSingleFieldPeriod.between(localDateTime0, localDateTime0, days0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Hours hours0 = Hours.ZERO;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDateTime localDateTime0 = LocalDateTime.now((DateTimeZone) fixedDateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.minusDays(1);
      int int0 = BaseSingleFieldPeriod.between(localDateTime1, localDateTime0, hours0);
      assertEquals(24, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Weeks weeks0 = Weeks.ONE;
      Days days0 = weeks0.toStandardDays();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-100));
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.plusWeeks(30240);
      Seconds seconds0 = Seconds.standardSecondsIn(days0);
      Minutes minutes0 = seconds0.toStandardMinutes();
      BaseSingleFieldPeriod.between(localDateTime1, localDateTime0, minutes0);
      assertEquals(604800, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Days days0 = Days.ZERO;
      Seconds seconds0 = Seconds.standardSecondsIn(days0);
      Minutes minutes0 = seconds0.toStandardMinutes();
      DateMidnight dateMidnight0 = new DateMidnight();
      DateMidnight dateMidnight1 = dateMidnight0.minus(2363L);
      DurationFieldType durationFieldType0 = minutes0.getFieldType(0);
      int int0 = BaseSingleFieldPeriod.between(dateMidnight1, dateMidnight0, durationFieldType0);
      assertEquals(1, minutes0.size());
      assertEquals(0, seconds0.getSeconds());
      assertEquals(1440, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((long) (-1));
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      LocalDateTime localDateTime0 = new LocalDateTime(1276L, (Chronology) gregorianChronology0);
      LocalDateTime localDateTime1 = localDateTime0.minusMonths((-1));
      DateMidnight dateMidnight1 = dateMidnight0.withFields(localDateTime1);
      DateTime dateTime0 = dateMidnight1.toDateTime();
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      int int0 = BaseSingleFieldPeriod.between(dateTime0, dateMidnight0, durationFieldType0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Hours hours0 = Hours.MAX_VALUE;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(hours0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Hours hours0 = Hours.MAX_VALUE;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(hours0, 2244L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 3445160931016
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Hours hours0 = Hours.hours(1);
      // Undeclared exception!
      try { 
        hours0.compareTo((BaseSingleFieldPeriod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      LocalTime localTime0 = new LocalTime((-2449L), (Chronology) gJChronology0);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(localTime0, localTime0, (ReadablePeriod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      PeriodType periodType0 = PeriodType.millis();
      PeriodType periodType1 = periodType0.withMillisRemoved();
      MutablePeriod mutablePeriod0 = new MutablePeriod(periodType1);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(localDate0, localDate0, mutablePeriod0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Hours hours0 = Hours.SEVEN;
      Seconds seconds0 = Seconds.standardSecondsIn(hours0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.withWeekyear(3639);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(localDateTime1, localDateTime0, seconds0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -51280387200
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateMidnight dateMidnight0 = dateTime0.toDateMidnight();
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(dateMidnight0, dateMidnight0, durationFieldType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((-671L));
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(mutableDateTime0, mutableDateTime0, (DurationFieldType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Instant instant0 = new Instant();
      Instant instant1 = instant0.withMillis(21859200000L);
      MutableDateTime mutableDateTime0 = instant1.toMutableDateTime();
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(mutableDateTime0, instant0, durationFieldType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 1370550081320
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeParser0);
      LocalTime localTime0 = dateTimeFormatter0.parseLocalTime("");
      Hours hours0 = Hours.hoursBetween((ReadablePartial) localTime0, (ReadablePartial) localTime0);
      Weeks weeks0 = Weeks.TWO;
      Hours hours1 = weeks0.toStandardHours();
      int int0 = hours0.compareTo((BaseSingleFieldPeriod) hours1);
      assertEquals(336, hours1.getHours());
      assertEquals(2, weeks0.getWeeks());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Hours hours0 = Hours.hoursIn((ReadableInterval) null);
      Hours hours1 = Hours.SEVEN;
      int int0 = hours1.compareTo((BaseSingleFieldPeriod) hours0);
      assertEquals(1, int0);
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Hours hours0 = Hours.hoursIn((ReadableInterval) null);
      Days days0 = Days.FOUR;
      // Undeclared exception!
      try { 
        hours0.compareTo((BaseSingleFieldPeriod) days0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class org.joda.time.Hours cannot be compared to class org.joda.time.Days
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Hours hours0 = Hours.hoursIn((ReadableInterval) null);
      int int0 = hours0.compareTo((BaseSingleFieldPeriod) hours0);
      assertEquals(0, int0);
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Weeks weeks0 = Weeks.weeks(483);
      Weeks weeks1 = Weeks.weeks(483);
      boolean boolean0 = weeks0.equals(weeks1);
      assertEquals(483, weeks1.getWeeks());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Weeks weeks0 = Weeks.TWO;
      Weeks weeks1 = Weeks.weeks(483);
      boolean boolean0 = weeks0.equals(weeks1);
      assertEquals(483, weeks1.getWeeks());
      assertFalse(weeks1.equals((Object)weeks0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Weeks weeks0 = Weeks.ONE;
      Days days0 = weeks0.toStandardDays();
      boolean boolean0 = weeks0.equals(days0);
      assertFalse(boolean0);
      assertEquals(1, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Hours hours0 = Hours.hoursIn((ReadableInterval) null);
      boolean boolean0 = hours0.equals(hours0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Hours hours0 = Hours.hoursIn((ReadableInterval) null);
      boolean boolean0 = hours0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Minutes minutes0 = Minutes.ZERO;
      Weeks weeks0 = minutes0.toStandardWeeks();
      DurationFieldType durationFieldType0 = weeks0.getFieldType();
      boolean boolean0 = weeks0.isSupported(durationFieldType0);
      assertTrue(boolean0);
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Weeks weeks0 = Weeks.TWO;
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      boolean boolean0 = weeks0.isSupported(durationFieldType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Hours hours0 = Hours.hoursIn((ReadableInterval) null);
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      int int0 = hours0.get(durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Weeks weeks0 = Weeks.TWO;
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      int int0 = weeks0.get(durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Days days0 = Days.SIX;
      // Undeclared exception!
      try { 
        days0.getValue(1421);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 1421
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Days days0 = Days.ONE;
      // Undeclared exception!
      try { 
        days0.getFieldType(30433);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 30433
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((-624), (-796), 1834, 504);
      mutablePeriod0.addMonths((-624));
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(mutablePeriod0, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot convert period to duration as months is not precise in the period P-624MT-624H-796M1834.504S
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Days days0 = Days.standardDaysIn((ReadablePeriod) null);
      assertEquals(0, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeParser0);
      LocalTime localTime0 = dateTimeFormatter0.parseLocalTime("");
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-5271));
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      // Undeclared exception!
      try { 
        Weeks.weeksBetween((ReadablePartial) localTime0, (ReadablePartial) localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.parse("");
      LocalDateTime localDateTime0 = new LocalDateTime();
      // Undeclared exception!
      try { 
        Minutes.minutesBetween((ReadablePartial) monthDay0, (ReadablePartial) localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MockDate mockDate0 = new MockDate(292272992, 292272992, 1005, 1005, 292272992, 1005);
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      // Undeclared exception!
      try { 
        Minutes.minutesBetween((ReadablePartial) localDateTime0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Hours hours0 = Hours.ZERO;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between((ReadablePartial) null, (ReadablePartial) null, hours0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) lenientChronology0);
      // Undeclared exception!
      try { 
        Minutes.minutesBetween((ReadableInstant) dateMidnight0, (ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Days days0 = Days.ZERO;
      Seconds seconds0 = Seconds.standardSecondsIn(days0);
      Minutes minutes0 = seconds0.toStandardMinutes();
      DateMidnight dateMidnight0 = new DateMidnight();
      DurationFieldType durationFieldType0 = minutes0.getFieldType(0);
      int int0 = BaseSingleFieldPeriod.between(dateMidnight0, dateMidnight0, durationFieldType0);
      assertEquals(1, minutes0.size());
      assertEquals(0, int0);
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between((ReadableInstant) null, (ReadableInstant) null, durationFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Weeks weeks0 = Weeks.TWO;
      weeks0.toMutablePeriod();
      assertEquals(1, weeks0.size());
      assertEquals(2, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Weeks weeks0 = Weeks.TWO;
      weeks0.hashCode();
      assertEquals(2, weeks0.getWeeks());
  }
}
