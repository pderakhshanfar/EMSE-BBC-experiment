/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 16:04:40 GMT 2021
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutableInterval;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.Years;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSingleFieldPeriod_ESTest extends BaseSingleFieldPeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Minutes minutes0 = Minutes.MIN_VALUE;
      Minutes minutes1 = Minutes.THREE;
      boolean boolean0 = minutes0.equals(minutes1);
      assertEquals(3, minutes1.getMinutes());
      assertFalse(minutes1.equals((Object)minutes0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Months months0 = Months.ONE;
      // Undeclared exception!
      try { 
        months0.getValue(Integer.MAX_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 2147483647
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Years years0 = Years.MAX_VALUE;
      // Undeclared exception!
      try { 
        years0.getFieldType((-2396));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -2396
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) copticChronology0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(19, 19);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      LocalDate localDate0 = new LocalDate(1440L, (Chronology) ethiopicChronology0);
      // Undeclared exception!
      try { 
        Weeks.weeksBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Days days0 = Days.SIX;
      Hours hours0 = days0.toStandardHours();
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(hours0, 1);
      assertEquals(518400000, int0);
      assertEquals(6, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod(27, 1, 1, 1);
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(mutablePeriod0, (-1147L));
      assertEquals((-84795), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Years years0 = Years.ZERO;
      int int0 = years0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      Months months0 = Months.monthsBetween((ReadablePartial) monthDay0, (ReadablePartial) monthDay0);
      int int0 = months0.getValue(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Days days0 = Days.MAX_VALUE;
      int int0 = days0.getValue(0);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Weeks weeks0 = Weeks.ONE;
      Weeks weeks1 = weeks0.negated();
      int int0 = weeks1.getValue(0);
      assertEquals((-1), int0);
      assertEquals(1, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Weeks weeks0 = Weeks.ONE;
      PeriodType periodType0 = weeks0.getPeriodType();
      assertEquals(1, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Duration duration0 = Duration.parse((String) null);
      Hours hours0 = duration0.toStandardHours();
      DurationFieldType durationFieldType0 = hours0.getFieldType(0);
      assertEquals("hours", durationFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Period period0 = Period.days(86399999);
      Weeks weeks0 = Weeks.standardWeeksIn(period0);
      weeks0.getFieldType();
      assertEquals(12342857, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Months months0 = Months.MIN_VALUE;
      DurationFieldType durationFieldType0 = months0.getFieldType();
      int int0 = months0.get(durationFieldType0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Partial partial0 = new Partial();
      Years years0 = Years.TWO;
      int int0 = BaseSingleFieldPeriod.between(partial0, partial0, years0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Months months0 = Months.TEN;
      LocalDate localDate0 = new LocalDate((DateTimeZone) null);
      LocalDate localDate1 = localDate0.minusDays(1619);
      int int0 = BaseSingleFieldPeriod.between(localDate1, localDate0, months0);
      assertEquals(53, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Years years0 = Years.ZERO;
      assertEquals(0, years0.getYears());
      
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      Seconds seconds0 = Seconds.standardSecondsIn(years0);
      assertEquals(1, seconds0.size());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 27, 27, 108, (-1710), 53);
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
      LocalDateTime localDateTime1 = localDateTime0.withFieldAdded(durationFieldType0, 1);
      BaseSingleFieldPeriod.between(localDateTime1, localDateTime0, seconds0);
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) gregorianChronology0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      DateTime dateTime0 = new DateTime(dateTimeZone0);
      PeriodType periodType0 = PeriodType.dayTime();
      DurationFieldType durationFieldType0 = periodType0.getFieldType(1);
      int int0 = BaseSingleFieldPeriod.between(mutableDateTime0, dateTime0, durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      DateTime dateTime0 = new DateTime((long) 0, dateTimeZone0);
      DateTime dateTime1 = dateTime0.withYearOfEra(1611);
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      int int0 = BaseSingleFieldPeriod.between(dateTime1, dateTime0, durationFieldType0);
      assertEquals(262244, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) gregorianChronology0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      DateTime dateTime0 = new DateTime(1, 1, 1, 1, 1, dateTimeZone0);
      PeriodType periodType0 = PeriodType.dayTime();
      DurationFieldType durationFieldType0 = periodType0.getFieldType(1);
      int int0 = BaseSingleFieldPeriod.between(mutableDateTime0, dateTime0, durationFieldType0);
      assertEquals((-17646667), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Months months0 = Months.MAX_VALUE;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(months0, 960L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot convert period to duration as months is not precise in the period P2147483647M
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Weeks weeks0 = Weeks.MAX_VALUE;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(weeks0, 1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 1298798109705600000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds(276);
      // Undeclared exception!
      try { 
        seconds0.compareTo((BaseSingleFieldPeriod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Years years0 = Years.MIN_VALUE;
      LocalDate localDate0 = new LocalDate((-9223372036854775808L));
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(localDate0, localDate0, years0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 292278994 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDate localDate0 = localDateTime0.toLocalDate();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(localDate0, localDate0, (ReadablePeriod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      PeriodType periodType0 = PeriodType.months();
      PeriodType periodType1 = periodType0.withMonthsRemoved();
      Period period0 = new Period(localTime0, localTime0, periodType1);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(localTime0, localTime0, period0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Years years0 = Years.ZERO;
      Seconds seconds0 = Seconds.standardSecondsIn(years0);
      MockDate mockDate0 = new MockDate();
      LocalDateTime localDateTime0 = LocalDateTime.fromDateFields(mockDate0);
      LocalDateTime localDateTime1 = localDateTime0.withWeekyear(17);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(localDateTime1, localDateTime0, seconds0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 63018950400
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(dateMidnight0, dateMidnight0, durationFieldType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateMidnight dateMidnight0 = DateMidnight.now((DateTimeZone) fixedDateTimeZone0);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(dateMidnight0, dateMidnight0, (DurationFieldType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between((ReadableInstant) null, (ReadableInstant) null, durationFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      DateTime dateTime0 = new DateTime((long) 0, dateTimeZone0);
      DateTime dateTime1 = dateTime0.withYearOfEra(1611);
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(dateTime1, dateTime0, durationFieldType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 11328940800000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Years years0 = Years.ONE;
      Years years1 = years0.multipliedBy(2);
      int int0 = years0.compareTo((BaseSingleFieldPeriod) years1);
      assertEquals((-1), int0);
      assertEquals(1, years0.getYears());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Years years0 = Years.MAX_VALUE;
      Years years1 = years0.multipliedBy(0);
      int int0 = years0.compareTo((BaseSingleFieldPeriod) years1);
      assertEquals(0, years1.getYears());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      Hours hours0 = Hours.ONE;
      Months months0 = Months.monthsBetween((ReadablePartial) monthDay0, (ReadablePartial) monthDay0);
      // Undeclared exception!
      try { 
        months0.compareTo((BaseSingleFieldPeriod) hours0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class org.joda.time.Months cannot be compared to class org.joda.time.Hours
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Years years0 = Years.ZERO;
      int int0 = years0.compareTo((BaseSingleFieldPeriod) years0);
      assertEquals(0, years0.getYears());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Minutes minutes0 = Minutes.MIN_VALUE;
      PeriodType periodType0 = minutes0.getPeriodType();
      MutablePeriod mutablePeriod0 = new MutablePeriod(minutes0, periodType0);
      boolean boolean0 = minutes0.equals(mutablePeriod0);
      assertEquals(Integer.MIN_VALUE, minutes0.getMinutes());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Minutes minutes0 = Minutes.MIN_VALUE;
      Duration duration0 = Duration.standardDays(776L);
      Instant instant0 = new Instant((Object) null);
      MutableInterval mutableInterval0 = new MutableInterval(duration0, instant0);
      Hours hours0 = Hours.hoursIn(mutableInterval0);
      boolean boolean0 = minutes0.equals(hours0);
      assertFalse(boolean0);
      assertEquals(18624, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval();
      Minutes minutes0 = Minutes.ZERO;
      boolean boolean0 = minutes0.equals(mutableInterval0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Minutes minutes0 = Minutes.MAX_VALUE;
      boolean boolean0 = minutes0.equals(minutes0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Hours hours0 = Hours.ONE;
      Minutes minutes0 = hours0.toStandardMinutes();
      Minutes minutes1 = Minutes.THREE;
      boolean boolean0 = minutes0.equals(minutes1);
      assertEquals(3, minutes1.getMinutes());
      assertFalse(minutes1.equals((Object)minutes0));
      assertFalse(boolean0);
      assertEquals(60, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Years years0 = Years.years(4201);
      DurationFieldType durationFieldType0 = years0.getFieldType();
      boolean boolean0 = years0.isSupported(durationFieldType0);
      assertEquals(4201, years0.getYears());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Years years0 = Years.ZERO;
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      boolean boolean0 = years0.isSupported(durationFieldType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Days days0 = Days.FOUR;
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      int int0 = days0.get(durationFieldType0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Period period0 = Period.days(86399999);
      Weeks weeks0 = Weeks.standardWeeksIn(period0);
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      int int0 = weeks0.get(durationFieldType0);
      assertEquals(0, int0);
      assertEquals(12342857, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Hours hours0 = Hours.SEVEN;
      // Undeclared exception!
      try { 
        hours0.getValue((-5205));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -5205
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      Months months0 = Months.monthsBetween((ReadablePartial) monthDay0, (ReadablePartial) monthDay0);
      // Undeclared exception!
      try { 
        months0.getFieldType(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Months months0 = Months.MIN_VALUE;
      // Undeclared exception!
      try { 
        Seconds.standardSecondsIn(months0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot convert period to duration as months is not precise in the period P-2147483648M
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(seconds0, 0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = BaseSingleFieldPeriod.standardPeriodIn((ReadablePeriod) null, (-2085L));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) null, (-485L), 1);
      LocalDate localDate0 = new LocalDate((Chronology) gJChronology0);
      Partial partial0 = new Partial(localDate0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfHalfday();
      Partial partial1 = partial0.with(dateTimeFieldType0, 1);
      // Undeclared exception!
      try { 
        Days.daysBetween((ReadablePartial) partial1, (ReadablePartial) partial1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must be contiguous
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      GJChronology gJChronology0 = GJChronology.getInstance((DateTimeZone) fixedDateTimeZone0, (ReadableInstant) null);
      StrictChronology strictChronology0 = StrictChronology.getInstance(gJChronology0);
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) strictChronology0);
      LocalTime localTime0 = new LocalTime(43200000L);
      // Undeclared exception!
      try { 
        Weeks.weeksBetween((ReadablePartial) localTime0, (ReadablePartial) localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      LocalDate localDate0 = new LocalDate(dateTimeZone0);
      LocalTime localTime0 = new LocalTime(380L, dateTimeZone0);
      // Undeclared exception!
      try { 
        Months.monthsBetween((ReadablePartial) localDate0, (ReadablePartial) localTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) copticChronology0);
      // Undeclared exception!
      try { 
        Months.monthsBetween((ReadablePartial) localDateTime0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Hours hours0 = Hours.ZERO;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between((ReadablePartial) null, (ReadablePartial) null, hours0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      DateMidnight dateMidnight0 = new DateMidnight(0L, (Chronology) iSOChronology0);
      Instant instant0 = dateMidnight0.toInstant();
      // Undeclared exception!
      try { 
        Years.yearsBetween((ReadableInstant) instant0, (ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Days days0 = Days.ZERO;
      Hours hours0 = days0.toStandardHours();
      hours0.toMutablePeriod();
      assertEquals(1, hours0.size());
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1));
      DateMidnight dateMidnight0 = new DateMidnight(86399999L, dateTimeZone0);
      Seconds seconds0 = Seconds.secondsBetween((ReadableInstant) dateMidnight0, (ReadableInstant) dateMidnight0);
      Weeks weeks0 = seconds0.toStandardWeeks();
      weeks0.toPeriod();
      assertEquals(0, seconds0.getSeconds());
      assertEquals(1, weeks0.size());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Hours hours0 = Hours.THREE;
      hours0.hashCode();
      assertEquals(3, hours0.getHours());
  }
}
