/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 15:53:28 GMT 2021
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSingleFieldPeriod_ESTest extends BaseSingleFieldPeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Hours hours0 = Hours.hours(1286);
      hours0.hashCode();
      assertEquals(1286, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      Days days0 = Days.daysBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      Weeks weeks0 = Weeks.weeks(4325);
      Days days1 = weeks0.toStandardDays();
      boolean boolean0 = days0.equals(days1);
      assertFalse(days1.equals((Object)days0));
      assertEquals(4325, weeks0.getWeeks());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateMidnight dateMidnight0 = new DateMidnight(0L, dateTimeZone0);
      Interval interval0 = new Interval(dateMidnight0, dateMidnight0);
      Years years0 = Years.yearsIn(interval0);
      // Undeclared exception!
      try { 
        years0.getValue((-792));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -792
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 25, (-778), (-1171), (-2288), (-2477));
      YearMonth yearMonth0 = YearMonth.fromCalendarFields(mockGregorianCalendar0);
      Years years0 = Years.yearsBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      // Undeclared exception!
      try { 
        years0.getFieldType((-96));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -96
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-3776), 1286, 1286, (-3776), (-3776), 1286);
      YearMonth yearMonth0 = YearMonth.fromCalendarFields(mockGregorianCalendar0);
      LocalTime localTime0 = new LocalTime((long) (-96));
      // Undeclared exception!
      try { 
        Years.yearsBetween((ReadablePartial) yearMonth0, (ReadablePartial) localTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Months months0 = Months.parseMonths((String) null);
      Weeks weeks0 = Weeks.standardWeeksIn(months0);
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(weeks0, 17);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes((-21));
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(minutes0, (-21));
      assertEquals(60000, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Weeks weeks0 = Weeks.TWO;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(weeks0, (-1482L));
      assertEquals((-816194), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Hours hours0 = Hours.hours(4418);
      hours0.size();
      assertEquals(4418, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Weeks weeks0 = Weeks.weeks(0);
      Hours hours0 = weeks0.toStandardHours();
      int int0 = hours0.getValue(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Weeks weeks0 = Weeks.TWO;
      Days days0 = weeks0.toStandardDays();
      Hours hours0 = days0.toStandardHours();
      int int0 = hours0.getValue(0);
      assertEquals(336, int0);
      assertEquals(14, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      int int0 = days0.getValue(0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Months months0 = Months.THREE;
      PeriodType periodType0 = months0.getPeriodType();
      assertEquals(1, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Days days0 = Days.FIVE;
      DurationFieldType durationFieldType0 = days0.getFieldType(0);
      assertEquals("days", durationFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Period period0 = Period.years(0);
      Minutes minutes0 = Minutes.standardMinutesIn(period0);
      minutes0.getFieldType();
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfWeek();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      int int0 = days0.get(durationFieldType0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      Days days0 = Days.daysBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      int int0 = BaseSingleFieldPeriod.between(localDateTime0, localDateTime0, days0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Days days0 = Days.ZERO;
      LocalDate localDate0 = new LocalDate((Chronology) null);
      LocalDate localDate1 = localDate0.withYear((-1010));
      int int0 = BaseSingleFieldPeriod.between(localDate1, localDate0, days0);
      assertEquals(1104493, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Days days0 = Days.FOUR;
      LocalDate localDate0 = LocalDate.now();
      LocalDate localDate1 = localDate0.plusDays(17);
      int int0 = BaseSingleFieldPeriod.between(localDate1, localDate0, days0);
      assertEquals((-17), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Days days0 = Days.TWO;
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, (Chronology) iSOChronology0);
      Seconds seconds0 = days0.toStandardSeconds();
      MutablePeriod mutablePeriod0 = seconds0.toMutablePeriod();
      DurationFieldType durationFieldType0 = mutablePeriod0.getFieldType(1);
      int int0 = BaseSingleFieldPeriod.between(mutableDateTime0, mutableDateTime0, durationFieldType0);
      assertEquals(172800, seconds0.getSeconds());
      assertEquals(2, days0.getDays());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      Weeks weeks0 = Weeks.ONE;
      DateTime dateTime1 = dateTime0.minusMonths((-1772));
      DurationFieldType durationFieldType0 = weeks0.getFieldType();
      int int0 = BaseSingleFieldPeriod.between(dateTime0, dateTime1, durationFieldType0);
      assertEquals(7704, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateTime dateTime0 = DateTime.parse("", dateTimeFormatter0);
      DateTime dateTime1 = dateTime0.withYearOfEra(2241);
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      int int0 = BaseSingleFieldPeriod.between(dateTime1, dateTime0, durationFieldType0);
      assertEquals((-197962), int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Hours hours0 = Hours.hours(1286);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(hours0, 0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      MutablePeriod mutablePeriod0 = days0.toMutablePeriod();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(mutablePeriod0, (-783L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 236963712882758
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4325, 4325, 3, 153692453, 1286, (-1465));
      YearMonth yearMonth0 = YearMonth.fromCalendarFields(mockGregorianCalendar0);
      Years years0 = Years.yearsBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      // Undeclared exception!
      try { 
        years0.compareTo((BaseSingleFieldPeriod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(localDateTime0, localDateTime0, (ReadablePeriod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.plusYears((-1633));
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateTime dateTime2 = dateTime1.withChronology(islamicChronology0);
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(dateTime2, dateTime0, durationFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The subtrahend instant is below the supported minimum of 0001-01-01T00:00:00.000Z (IslamicChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateMidnight dateMidnight0 = DateMidnight.now((DateTimeZone) fixedDateTimeZone0);
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(dateMidnight0, dateMidnight0, durationFieldType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(dateTime0, dateTime0, (DurationFieldType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateMidnight dateMidnight0 = DateMidnight.now((DateTimeZone) fixedDateTimeZone0);
      DateMidnight dateMidnight1 = dateMidnight0.withWeekOfWeekyear(1);
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(dateMidnight1, dateMidnight0, durationFieldType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 3628800000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Days days0 = Days.TWO;
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, (Chronology) iSOChronology0);
      Days days1 = Days.daysBetween((ReadableInstant) mutableDateTime0, (ReadableInstant) mutableDateTime0);
      int int0 = days1.compareTo((BaseSingleFieldPeriod) days0);
      assertEquals((-1), int0);
      assertEquals(0, days1.getDays());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(25, (-778), (-778), (-1171), (-2288));
      YearMonth yearMonth0 = YearMonth.fromCalendarFields(mockGregorianCalendar0);
      Years years0 = Years.yearsBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      Years years1 = Years.MAX_VALUE;
      int int0 = years1.compareTo((BaseSingleFieldPeriod) years0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Hours hours0 = Hours.hours(4325);
      Seconds seconds0 = Seconds.standardSecondsIn(hours0);
      // Undeclared exception!
      try { 
        seconds0.compareTo((BaseSingleFieldPeriod) hours0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class org.joda.time.Seconds cannot be compared to class org.joda.time.Hours
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      Days days0 = Days.daysBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      int int0 = days0.compareTo((BaseSingleFieldPeriod) days0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Days days0 = Days.TWO;
      LocalDateTime localDateTime0 = new LocalDateTime();
      Days days1 = Days.daysBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      PeriodType periodType0 = days0.getPeriodType();
      MutablePeriod mutablePeriod0 = new MutablePeriod(820L, periodType0);
      boolean boolean0 = days1.equals(mutablePeriod0);
      assertFalse(days0.equals((Object)days1));
      assertEquals(2, days0.getDays());
      assertFalse(days1.equals((Object)days0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Hours hours0 = Hours.hours(4325);
      LocalDateTime localDateTime0 = new LocalDateTime();
      Days days0 = Days.daysBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      boolean boolean0 = days0.equals(hours0);
      assertFalse(boolean0);
      assertEquals(4325, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      Days days0 = Days.daysBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      boolean boolean0 = days0.equals(days0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Days days0 = Days.TWO;
      PeriodType periodType0 = days0.getPeriodType();
      MutablePeriod mutablePeriod0 = new MutablePeriod(820L, periodType0);
      boolean boolean0 = days0.equals(mutablePeriod0);
      assertFalse(boolean0);
      assertEquals(2, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Weeks weeks0 = Weeks.THREE;
      DurationFieldType durationFieldType0 = weeks0.getFieldType();
      boolean boolean0 = weeks0.isSupported(durationFieldType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Months months0 = Months.parseMonths((String) null);
      assertEquals(0, months0.getMonths());
      
      Weeks weeks0 = Weeks.standardWeeksIn(months0);
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      boolean boolean0 = weeks0.isSupported(durationFieldType0);
      assertEquals(1, weeks0.size());
      assertFalse(boolean0);
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Hours hours0 = Hours.SIX;
      DurationFieldType durationFieldType0 = hours0.getFieldType();
      int int0 = hours0.get(durationFieldType0);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Hours hours0 = Hours.hours(4418);
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      int int0 = hours0.get(durationFieldType0);
      assertEquals(4418, hours0.getHours());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Years years0 = Years.THREE;
      // Undeclared exception!
      try { 
        years0.getValue(4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(25, (-778), (-778), (-1171), (-2288));
      YearMonth yearMonth0 = YearMonth.fromCalendarFields(mockGregorianCalendar0);
      Years years0 = Years.yearsBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      // Undeclared exception!
      try { 
        years0.getFieldType(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Period period0 = Period.years((-2381));
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(period0, (-2381));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot convert period to duration as years is not precise in the period P-2381Y
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Seconds seconds0 = Seconds.standardSecondsIn((ReadablePeriod) null);
      boolean boolean0 = seconds0.equals((Object) null);
      assertEquals(0, seconds0.getSeconds());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      GJChronology gJChronology0 = GJChronology.getInstance();
      LocalTime localTime0 = LocalTime.now((Chronology) gJChronology0);
      // Undeclared exception!
      try { 
        Minutes.minutesBetween((ReadablePartial) localDateTime0, (ReadablePartial) localTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      YearMonth yearMonth0 = new YearMonth((Chronology) null);
      // Undeclared exception!
      try { 
        Months.monthsBetween((ReadablePartial) localDateTime0, (ReadablePartial) yearMonth0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      // Undeclared exception!
      try { 
        Days.daysBetween((ReadablePartial) localDateTime0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between((ReadablePartial) null, (ReadablePartial) null, days0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Days days0 = Days.FIVE;
      Interval interval0 = new Interval((ReadableInstant) null, days0);
      DateTime dateTime0 = interval0.getEnd();
      // Undeclared exception!
      try { 
        Seconds.secondsBetween((ReadableInstant) dateTime0, (ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between((ReadableInstant) null, (ReadableInstant) null, durationFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Hours hours0 = Hours.hours(4325);
      Seconds seconds0 = Seconds.standardSecondsIn(hours0);
      seconds0.toPeriod();
      assertEquals(15570000, seconds0.getSeconds());
      assertEquals(4325, hours0.getHours());
  }
}
