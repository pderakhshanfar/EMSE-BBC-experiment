/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 17:54:30 GMT 2021
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.MutableDateTime;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSingleFieldPeriod_ESTest extends BaseSingleFieldPeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Days days0 = Days.TWO;
      Minutes minutes0 = Minutes.standardMinutesIn(days0);
      Minutes minutes1 = Minutes.TWO;
      boolean boolean0 = minutes1.equals(minutes0);
      assertFalse(minutes0.equals((Object)minutes1));
      assertEquals(2880, minutes0.getMinutes());
      assertFalse(boolean0);
      assertEquals(2, minutes1.getMinutes());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Weeks weeks0 = Weeks.parseWeeks((String) null);
      // Undeclared exception!
      try { 
        weeks0.getValue(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Weeks weeks0 = Weeks.weeks(1440);
      // Undeclared exception!
      try { 
        weeks0.getFieldType(249);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 249
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(2467).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      DateMidnight dateMidnight0 = DateMidnight.parse("", dateTimeFormatter0);
      LocalDate localDate0 = dateMidnight0.toLocalDate();
      MonthDay monthDay0 = new MonthDay(10L);
      // Undeclared exception!
      try { 
        Years.yearsBetween((ReadablePartial) localDate0, (ReadablePartial) monthDay0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Years years0 = Years.ZERO;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(years0, 163L);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Period period0 = new Period(2565L, 2565L, (Chronology) null);
      Period period1 = period0.minusSeconds(207);
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(period1, (-4164L));
      assertEquals(49, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Weeks weeks0 = Weeks.ONE;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(weeks0, (-473L));
      assertEquals((-1278646), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Days days0 = Days.TWO;
      Minutes minutes0 = Minutes.standardMinutesIn(days0);
      minutes0.size();
      assertEquals(2880, minutes0.getMinutes());
      assertEquals(2, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      Days days0 = Days.daysBetween((ReadablePartial) monthDay0, (ReadablePartial) monthDay0);
      int int0 = days0.getValue(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Weeks weeks0 = Weeks.TWO;
      Days days0 = weeks0.toStandardDays();
      int int0 = days0.getValue(0);
      assertEquals(2, weeks0.getWeeks());
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Years years0 = Years.MIN_VALUE;
      int int0 = years0.getValue(0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Weeks weeks0 = Weeks.THREE;
      PeriodType periodType0 = weeks0.getPeriodType();
      assertEquals("Weeks", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Years years0 = Years.ZERO;
      DurationFieldType durationFieldType0 = years0.getFieldType();
      assertEquals("years", durationFieldType0.getName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Days days0 = Days.SIX;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.clockhourOfDay();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      int int0 = days0.get(durationFieldType0);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Years years0 = Years.years(1);
      int int0 = BaseSingleFieldPeriod.between(yearMonth0, yearMonth0, years0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Days days0 = Days.TWO;
      Minutes minutes0 = Minutes.standardMinutesIn(days0);
      Weeks weeks0 = minutes0.toStandardWeeks();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      YearMonth yearMonth0 = YearMonth.now((Chronology) gregorianChronology0);
      YearMonth yearMonth1 = yearMonth0.minusYears(1);
      BaseSingleFieldPeriod.between(yearMonth1, yearMonth0, weeks0);
      assertEquals(2, days0.getDays());
      assertEquals(2880, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Days days0 = Days.TWO;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 31);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      YearMonth yearMonth0 = YearMonth.now((Chronology) gregorianChronology0);
      YearMonth yearMonth1 = yearMonth0.minusYears(1);
      int int0 = BaseSingleFieldPeriod.between(yearMonth0, yearMonth1, days0);
      assertEquals((-365), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Minutes minutes0 = Minutes.minutesBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) null);
      Instant instant0 = dateMidnight0.toInstant();
      Instant instant1 = instant0.withMillis(245L);
      DateTime dateTime0 = instant1.toDateTime();
      DurationFieldType durationFieldType0 = minutes0.getFieldType(0);
      int int0 = BaseSingleFieldPeriod.between(dateTime0, instant0, durationFieldType0);
      assertEquals(23205599, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(0, 1, 1, (Chronology) null);
      DateTime dateTime0 = localDate0.toDateTimeAtCurrentTime((DateTimeZone) null);
      DateTime dateTime1 = dateTime0.minusDays((-183));
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      int int0 = BaseSingleFieldPeriod.between(dateTime1, dateTime0, durationFieldType0);
      assertEquals((-26), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Days days0 = Days.TWO;
      Minutes minutes0 = Minutes.standardMinutesIn(days0);
      Weeks weeks0 = minutes0.toStandardWeeks();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(weeks0, 0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(days0, 3198L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -58018319945966
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Years years0 = Years.MAX_VALUE;
      // Undeclared exception!
      try { 
        years0.compareTo((BaseSingleFieldPeriod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(yearMonth0, yearMonth0, (ReadablePeriod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Seconds seconds0 = Seconds.MAX_VALUE;
      YearMonth yearMonth0 = new YearMonth(38, 1);
      YearMonth yearMonth1 = yearMonth0.minusYears((-3820));
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(yearMonth1, yearMonth0, seconds0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -120547526400
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = gJChronology0.getZone();
      DateMidnight dateMidnight0 = DateMidnight.now(dateTimeZone0);
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(dateMidnight0, dateMidnight0, durationFieldType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      DateMidnight dateMidnight0 = localDate0.toDateMidnight((DateTimeZone) null);
      DateTime dateTime0 = dateMidnight0.toDateTime((DateTimeZone) null);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(dateTime0, dateMidnight0, (DurationFieldType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) julianChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.withWeekyear((-1689));
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(dateMidnight0, dateMidnight1, durationFieldType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -116826192000000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Years years0 = Years.ONE;
      YearMonth yearMonth0 = YearMonth.now();
      Years years1 = Years.yearsBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      int int0 = years1.compareTo((BaseSingleFieldPeriod) years0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Years years0 = Years.MAX_VALUE;
      Years years1 = Years.years(207);
      int int0 = years0.compareTo((BaseSingleFieldPeriod) years1);
      assertEquals(1, int0);
      assertEquals(207, years1.getYears());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Days days0 = Days.TWO;
      Years years0 = Years.years(0);
      // Undeclared exception!
      try { 
        years0.compareTo((BaseSingleFieldPeriod) days0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class org.joda.time.Years cannot be compared to class org.joda.time.Days
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Days days0 = Days.TWO;
      Minutes minutes0 = Minutes.standardMinutesIn(days0);
      Minutes minutes1 = Minutes.TWO;
      boolean boolean0 = minutes0.equals(minutes1);
      assertEquals(2, minutes1.getMinutes());
      assertEquals(2880, minutes0.getMinutes());
      assertFalse(boolean0);
      assertFalse(minutes1.equals((Object)minutes0));
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Days days0 = Days.TWO;
      Minutes minutes0 = Minutes.standardMinutesIn(days0);
      Minutes minutes1 = Minutes.standardMinutesIn(minutes0);
      boolean boolean0 = minutes0.equals(minutes1);
      assertTrue(boolean0);
      assertEquals(2880, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Days days0 = Days.TWO;
      Minutes minutes0 = Minutes.standardMinutesIn(days0);
      Integer integer0 = new Integer(17);
      boolean boolean0 = minutes0.equals(integer0);
      assertFalse(boolean0);
      assertEquals(2880, minutes0.getMinutes());
      assertEquals(2, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Years years0 = Years.ZERO;
      assertEquals(0, years0.getYears());
      
      Minutes minutes0 = Minutes.standardMinutesIn(years0);
      boolean boolean0 = minutes0.equals(minutes0);
      assertEquals(0, minutes0.getMinutes());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Days days0 = Days.TWO;
      Minutes minutes0 = Minutes.standardMinutesIn(days0);
      Weeks weeks0 = minutes0.toStandardWeeks();
      boolean boolean0 = minutes0.equals(weeks0);
      assertEquals(2, days0.getDays());
      assertEquals(2880, minutes0.getMinutes());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Hours hours0 = Hours.MIN_VALUE;
      DurationFieldType durationFieldType0 = hours0.getFieldType();
      boolean boolean0 = hours0.isSupported(durationFieldType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Duration duration0 = Duration.millis(0L);
      Hours hours0 = duration0.toStandardHours();
      Days days0 = Days.SIX;
      Minutes minutes0 = days0.toStandardMinutes();
      DurationFieldType durationFieldType0 = minutes0.getFieldType();
      boolean boolean0 = hours0.isSupported(durationFieldType0);
      assertEquals(8640, minutes0.getMinutes());
      assertFalse(boolean0);
      assertEquals(6, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Years years0 = Years.MIN_VALUE;
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      int int0 = years0.get(durationFieldType0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Interval interval0 = yearMonth0.toInterval();
      Hours hours0 = Hours.hoursIn(interval0);
      int int0 = hours0.get((DurationFieldType) null);
      assertEquals(0, int0);
      assertEquals(672, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Weeks weeks0 = Weeks.ONE;
      // Undeclared exception!
      try { 
        weeks0.getValue((-58));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -58
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) gJChronology0);
      Years years0 = Years.yearsBetween((ReadableInstant) mutableDateTime0, (ReadableInstant) mutableDateTime0);
      // Undeclared exception!
      try { 
        years0.getFieldType(Integer.MIN_VALUE);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -2147483648
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Years years0 = Years.ONE;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(years0, 31);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot convert period to duration as years is not precise in the period P1Y
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Minutes minutes0 = Minutes.standardMinutesIn((ReadablePeriod) null);
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 31);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      YearMonth yearMonth0 = YearMonth.now((Chronology) gregorianChronology0);
      MonthDay monthDay0 = new MonthDay(1986L);
      // Undeclared exception!
      try { 
        Years.yearsBetween((ReadablePartial) yearMonth0, (ReadablePartial) monthDay0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay(2565L);
      LocalDate localDate0 = new LocalDate();
      // Undeclared exception!
      try { 
        Years.yearsBetween((ReadablePartial) monthDay0, (ReadablePartial) localDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      // Undeclared exception!
      try { 
        Seconds.secondsBetween((ReadablePartial) yearMonth0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Years years0 = Years.ONE;
      YearMonth yearMonth0 = YearMonth.now();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between((ReadablePartial) null, yearMonth0, years0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance(dateTimeZone0);
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) gregorianChronology0);
      // Undeclared exception!
      try { 
        Days.daysBetween((ReadableInstant) dateMidnight0, (ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Minutes minutes0 = Minutes.minutesBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) null);
      Instant instant0 = dateMidnight0.toInstant();
      DateTime dateTime0 = instant0.toDateTime();
      DurationFieldType durationFieldType0 = minutes0.getFieldType(0);
      int int0 = BaseSingleFieldPeriod.between(dateTime0, instant0, durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Days days0 = Days.TWO;
      Minutes minutes0 = Minutes.standardMinutesIn(days0);
      Weeks weeks0 = minutes0.toStandardWeeks();
      DurationFieldType durationFieldType0 = weeks0.getFieldType();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between((ReadableInstant) null, (ReadableInstant) null, durationFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Years years0 = Years.ZERO;
      years0.toMutablePeriod();
      assertEquals(0, years0.getYears());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Days days0 = Days.TWO;
      Minutes minutes0 = Minutes.standardMinutesIn(days0);
      Weeks weeks0 = minutes0.toStandardWeeks();
      weeks0.toPeriod();
      assertEquals(2, days0.getDays());
      assertEquals(2880, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Weeks weeks0 = Weeks.TWO;
      weeks0.hashCode();
      assertEquals(2, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Years years0 = Years.yearsBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      int int0 = years0.compareTo((BaseSingleFieldPeriod) years0);
      assertEquals(0, int0);
      assertEquals(0, years0.getYears());
  }
}
