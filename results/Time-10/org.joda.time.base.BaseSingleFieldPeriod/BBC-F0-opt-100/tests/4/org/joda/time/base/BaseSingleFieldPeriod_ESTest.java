/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 01:58:32 GMT 2021
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Calendar;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSingleFieldPeriod_ESTest extends BaseSingleFieldPeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Seconds seconds0 = Seconds.ONE;
      seconds0.hashCode();
      assertEquals(1, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Years years0 = Years.ONE;
      Years years1 = Years.MAX_VALUE;
      boolean boolean0 = years0.equals(years1);
      assertFalse(boolean0);
      assertEquals(Integer.MAX_VALUE, years1.getYears());
      assertFalse(years1.equals((Object)years0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Days days0 = Days.SIX;
      Hours hours0 = days0.toStandardHours();
      // Undeclared exception!
      try { 
        hours0.getValue(59);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 59
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Seconds seconds0 = Seconds.ZERO;
      // Undeclared exception!
      try { 
        seconds0.getFieldType((-2925));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -2925
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      Partial partial0 = new Partial();
      // Undeclared exception!
      try { 
        Weeks.weeksBetween((ReadablePartial) partial0, (ReadablePartial) localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Hours hours0 = Hours.EIGHT;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(hours0, 1);
      assertEquals(28800000, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Hours hours0 = Hours.EIGHT;
      Weeks weeks0 = hours0.toStandardWeeks();
      weeks0.size();
      assertEquals(8, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Seconds seconds0 = Seconds.ONE;
      Minutes minutes0 = seconds0.toStandardMinutes();
      minutes0.getValue(0);
      assertEquals(1, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Weeks weeks0 = Weeks.THREE;
      Minutes minutes0 = weeks0.toStandardMinutes();
      int int0 = minutes0.getValue(0);
      assertEquals(30240, int0);
      assertEquals(3, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      int int0 = seconds0.getValue(0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      DateTime dateTime0 = new DateTime(dateTimeZone0);
      Weeks weeks0 = Weeks.weeksBetween((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      weeks0.getPeriodType();
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Years years0 = Years.ZERO;
      DurationFieldType durationFieldType0 = years0.getFieldType(0);
      assertEquals("years", durationFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Months months0 = Months.MAX_VALUE;
      DurationFieldType durationFieldType0 = months0.getFieldType();
      int int0 = months0.get(durationFieldType0);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-1222));
      YearMonth yearMonth0 = YearMonth.now(dateTimeZone0);
      Seconds seconds0 = Seconds.ZERO;
      int int0 = BaseSingleFieldPeriod.between(yearMonth0, yearMonth0, seconds0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Minutes minutes0 = Minutes.TWO;
      DateTimePrinter dateTimePrinter0 = mock(DateTimePrinter.class, new ViolatedAssumptionAnswer());
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter(dateTimePrinter0, dateTimeParser0);
      LocalDate localDate0 = LocalDate.parse("", dateTimeFormatter0);
      LocalDate localDate1 = localDate0.withYearOfCentury(0);
      int int0 = BaseSingleFieldPeriod.between(localDate1, localDate0, minutes0);
      assertEquals(36816480, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Weeks weeks0 = Weeks.weeks((byte)89);
      LocalDate localDate0 = new LocalDate();
      LocalDate localDate1 = localDate0.withCenturyOfEra(1900);
      BaseSingleFieldPeriod.between(localDate1, localDate0, weeks0);
      assertEquals(89, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      DateTime dateTime0 = localDateTime0.toDateTime();
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      int int0 = BaseSingleFieldPeriod.between(dateTime0, dateTime0, durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) null);
      StrictChronology strictChronology0 = StrictChronology.getInstance(buddhistChronology0);
      LocalDateTime localDateTime0 = new LocalDateTime((-4502L), (Chronology) strictChronology0);
      DateTime dateTime0 = localDateTime0.toDateTime((DateTimeZone) null);
      DateTime dateTime1 = dateTime0.withYear(874);
      Duration duration0 = new Duration(dateTime0, dateTime0);
      Hours hours0 = duration0.toStandardHours();
      DurationFieldType durationFieldType0 = hours0.getFieldType();
      int int0 = BaseSingleFieldPeriod.between(dateTime1, dateTime0, durationFieldType0);
      assertEquals(14358408, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Days days0 = Days.FIVE;
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      DateTime dateTime0 = DateTime.now((Chronology) julianChronology0);
      DateTime dateTime1 = dateTime0.plusWeeks(2286);
      DurationFieldType durationFieldType0 = days0.getFieldType();
      int int0 = BaseSingleFieldPeriod.between(dateTime1, dateTime0, durationFieldType0);
      assertEquals((-16002), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay(403L);
      Minutes minutes0 = Minutes.minutesBetween((ReadablePartial) monthDay0, (ReadablePartial) monthDay0);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(minutes0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Weeks weeks0 = Weeks.MIN_VALUE;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(weeks0, (-249L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 5216056667913253
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Minutes minutes0 = Minutes.minutesBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      // Undeclared exception!
      try { 
        minutes0.compareTo((BaseSingleFieldPeriod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(yearMonth0, yearMonth0, (ReadablePeriod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-35791394));
      MonthDay monthDay0 = new MonthDay(dateTimeZone0);
      LocalDate localDate0 = monthDay0.toLocalDate((-35791394));
      LocalDate localDate1 = localDate0.withYearOfEra(853);
      Hours hours0 = Hours.FIVE;
      Days days0 = hours0.toStandardDays();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(localDate1, localDate0, days0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -13072227036
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Minutes minutes0 = Minutes.MAX_VALUE;
      DateMidnight dateMidnight0 = new DateMidnight((long) 0);
      DateMidnight dateMidnight1 = dateMidnight0.minus((ReadablePeriod) minutes0);
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      DateTime dateTime0 = dateMidnight0.toDateTime((Chronology) copticChronology0);
      Years years0 = Years.THREE;
      DurationFieldType durationFieldType0 = years0.getFieldType();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(dateTime0, dateMidnight1, durationFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The minuend instant is below the supported minimum of 0001-01-01T00:00:00.000Z (CopticChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      DateMidnight dateMidnight0 = localDate0.toDateMidnight(dateTimeZone0);
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(dateMidnight0, dateMidnight0, durationFieldType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(1);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      DateTime dateTime0 = new DateTime(dateTimeZone0);
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.withWeekyear((-1039));
      DateTime dateTime1 = localDateTime1.toDateTime(dateTimeZone0);
      Seconds seconds0 = Seconds.parseSeconds((String) null);
      DurationFieldType durationFieldType0 = seconds0.getFieldType();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(dateTime0, dateTime1, durationFieldType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -96343430400
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Minutes minutes0 = Minutes.MIN_VALUE;
      Weeks weeks0 = Weeks.ZERO;
      Minutes minutes1 = weeks0.toStandardMinutes();
      int int0 = minutes0.compareTo((BaseSingleFieldPeriod) minutes1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Minutes minutes0 = Minutes.MIN_VALUE;
      Weeks weeks0 = Weeks.ZERO;
      Minutes minutes1 = weeks0.toStandardMinutes();
      int int0 = minutes1.compareTo((BaseSingleFieldPeriod) minutes0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Weeks weeks0 = Weeks.ONE;
      Minutes minutes0 = weeks0.toStandardMinutes();
      // Undeclared exception!
      try { 
        minutes0.compareTo((BaseSingleFieldPeriod) weeks0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class org.joda.time.Minutes cannot be compared to class org.joda.time.Weeks
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Minutes minutes0 = Minutes.ZERO;
      int int0 = minutes0.compareTo((BaseSingleFieldPeriod) minutes0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Years years0 = Years.ONE;
      Years years1 = Years.MAX_VALUE;
      boolean boolean0 = years1.equals(years0);
      assertEquals(Integer.MAX_VALUE, years1.getYears());
      assertFalse(years0.equals((Object)years1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Years years0 = Years.MAX_VALUE;
      Period period0 = Period.millis(0);
      boolean boolean0 = years0.equals(period0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Years years0 = Years.yearsBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      Period period0 = new Period(years0);
      boolean boolean0 = years0.equals(period0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Years years0 = Years.ONE;
      boolean boolean0 = years0.equals(years0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Years years0 = Years.yearsBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      boolean boolean0 = years0.equals(yearMonth0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay(403L);
      Minutes minutes0 = Minutes.minutesBetween((ReadablePartial) monthDay0, (ReadablePartial) monthDay0);
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      boolean boolean0 = minutes0.isSupported(durationFieldType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Hours hours0 = Hours.THREE;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      boolean boolean0 = hours0.isSupported(durationFieldType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      Days days0 = Days.days((-272));
      int int0 = days0.get(durationFieldType0);
      assertEquals((-272), int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Minutes minutes0 = Minutes.minutesBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      int int0 = minutes0.get(durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Seconds seconds0 = Seconds.ZERO;
      // Undeclared exception!
      try { 
        seconds0.getFieldType(926);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 926
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Years years0 = Years.MAX_VALUE;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(years0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot convert period to duration as years is not precise in the period P2147483647Y
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Years years0 = Years.yearsBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      assertEquals(0, years0.getYears());
      
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(years0, 1);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = BaseSingleFieldPeriod.standardPeriodIn((ReadablePeriod) null, (-1L));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      MockDate mockDate0 = new MockDate(0, 0, 0, 1, (-1));
      MonthDay monthDay0 = MonthDay.fromDateFields(mockDate0);
      // Undeclared exception!
      try { 
        Years.yearsBetween((ReadablePartial) yearMonth0, (ReadablePartial) monthDay0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(0);
      MonthDay monthDay0 = new MonthDay(dateTimeZone0);
      LocalDate localDate0 = monthDay0.toLocalDate(0);
      // Undeclared exception!
      try { 
        Hours.hoursBetween((ReadablePartial) localDate0, (ReadablePartial) monthDay0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Calendar calendar0 = MockCalendar.getInstance();
      LocalDate localDate0 = LocalDate.fromCalendarFields(calendar0);
      // Undeclared exception!
      try { 
        Years.yearsBetween((ReadablePartial) localDate0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Seconds seconds0 = Seconds.TWO;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between((ReadablePartial) null, (ReadablePartial) null, seconds0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((long) 0, (DateTimeZone) null);
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay((DateTimeZone) null);
      // Undeclared exception!
      try { 
        Years.yearsBetween((ReadableInstant) dateTime0, (ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 1);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(mutableDateTime0, mutableDateTime0, (DurationFieldType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Months months0 = Months.NINE;
      DurationFieldType durationFieldType0 = months0.getFieldType();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between((ReadableInstant) null, (ReadableInstant) null, durationFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Hours hours0 = Hours.EIGHT;
      Seconds seconds0 = Seconds.standardSecondsIn(hours0);
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(seconds0, (-1023L));
      assertEquals(8, hours0.getHours());
      assertEquals(28800, seconds0.getSeconds());
      assertEquals((-28152), int0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Days days0 = Days.FIVE;
      days0.toMutablePeriod();
      assertEquals(5, days0.getDays());
      assertEquals(1, days0.size());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Months months0 = Months.MAX_VALUE;
      months0.toPeriod();
      assertEquals(Integer.MAX_VALUE, months0.getMonths());
      assertEquals(1, months0.size());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Minutes minutes0 = Minutes.minutesBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      // Undeclared exception!
      try { 
        minutes0.getValue((-2925));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -2925
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }
}
