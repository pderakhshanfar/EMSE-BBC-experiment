/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 01:56:41 GMT 2021
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSingleFieldPeriod_ESTest extends BaseSingleFieldPeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Days days0 = Days.SEVEN;
      Days days1 = Days.SIX;
      boolean boolean0 = days1.equals(days0);
      assertFalse(days0.equals((Object)days1));
      assertEquals(6, days1.getDays());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      // Undeclared exception!
      try { 
        seconds0.getValue(1799);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 1799
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Weeks weeks0 = Weeks.ONE;
      // Undeclared exception!
      try { 
        weeks0.getFieldType((-27));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -27
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      MonthDay monthDay0 = new MonthDay(100000000000000L, (Chronology) julianChronology0);
      LocalDateTime localDateTime0 = LocalDateTime.now();
      // Undeclared exception!
      try { 
        Days.daysBetween((ReadablePartial) localDateTime0, (ReadablePartial) monthDay0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Days days0 = Days.ZERO;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(days0, 746L);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Days days0 = Days.SIX;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(days0, 1781L);
      assertEquals(291072, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Days days0 = Days.ONE;
      int int0 = days0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Days days0 = duration0.toStandardDays();
      Minutes minutes0 = Minutes.standardMinutesIn(days0);
      int int0 = minutes0.getValue(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Years years0 = Years.MAX_VALUE;
      int int0 = years0.getValue(0);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Years years0 = Years.MIN_VALUE;
      int int0 = years0.getValue(0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Hours hours0 = Hours.SIX;
      Weeks weeks0 = hours0.toStandardWeeks();
      weeks0.getPeriodType();
      assertEquals(6, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Days days0 = Days.ONE;
      DurationFieldType durationFieldType0 = days0.getFieldType(0);
      assertEquals("days", durationFieldType0.getName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Days days0 = Days.days(3);
      Minutes minutes0 = Minutes.standardMinutesIn(days0);
      minutes0.getFieldType();
      assertEquals(4320, minutes0.getMinutes());
      assertEquals(3, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Days days0 = Days.SIX;
      DurationFieldType durationFieldType0 = days0.getFieldType();
      int int0 = days0.get(durationFieldType0);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Weeks weeks0 = Weeks.MIN_VALUE;
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      int int0 = weeks0.get(durationFieldType0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Weeks weeks0 = Weeks.ZERO;
      LocalDate localDate0 = new LocalDate();
      int int0 = BaseSingleFieldPeriod.between(localDate0, localDate0, weeks0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Hours hours0 = Hours.TWO;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateTime dateTime0 = new DateTime((-18L), (DateTimeZone) fixedDateTimeZone0);
      LocalDateTime localDateTime0 = dateTime0.toLocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.plusHours((-2569));
      int int0 = BaseSingleFieldPeriod.between(localDateTime1, localDateTime0, hours0);
      assertEquals(2569, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Hours hours0 = Hours.TWO;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateTime dateTime0 = new DateTime(0L, (DateTimeZone) fixedDateTimeZone0);
      LocalDateTime localDateTime0 = dateTime0.toLocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.minusWeeks((-2569));
      int int0 = BaseSingleFieldPeriod.between(localDateTime1, localDateTime0, hours0);
      assertEquals((-431592), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Instant instant0 = Instant.now();
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      int int0 = BaseSingleFieldPeriod.between(instant0, instant0, durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      DateMidnight dateMidnight0 = new DateMidnight(100000000000000L, (Chronology) julianChronology0);
      DateMidnight dateMidnight1 = new DateMidnight();
      MutableDateTime mutableDateTime0 = dateMidnight1.toMutableDateTime();
      Minutes minutes0 = Minutes.TWO;
      DurationFieldType durationFieldType0 = minutes0.getFieldType();
      int int0 = BaseSingleFieldPeriod.between(mutableDateTime0, dateMidnight0, durationFieldType0);
      assertEquals(1643460480, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L, (Chronology) julianChronology0);
      DateTime dateTime0 = DateTime.now((Chronology) julianChronology0);
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      int int0 = BaseSingleFieldPeriod.between(dateTime0, mutableDateTime0, durationFieldType0);
      assertEquals((-16115), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Period period0 = new Period((-178), (-178), (-178), 4, 3043, 3043, 3043, 3043);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(period0, (-178));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot convert period to duration as years is not precise in the period P-178Y-178M-178W4DT3043H3043M3046.043S
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Days days0 = Days.ONE;
      Minutes minutes0 = days0.toStandardMinutes();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(minutes0, 0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Days days0 = Days.days(1340);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(days0, 3L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 38592000000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Days days0 = Days.TWO;
      // Undeclared exception!
      try { 
        days0.compareTo((BaseSingleFieldPeriod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Days days0 = Days.ZERO;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      YearMonth yearMonth0 = YearMonth.now((Chronology) ethiopicChronology0);
      YearMonth yearMonth1 = yearMonth0.plusYears((-2495));
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(yearMonth1, yearMonth0, days0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (EthiopicChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      MonthDay monthDay0 = MonthDay.now((Chronology) iSOChronology0);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(monthDay0, monthDay0, (ReadablePeriod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LocalDate localDate0 = new LocalDate(30962844000000L, (DateTimeZone) null);
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay();
      LocalDate localDate1 = localDate0.withCenturyOfEra(1);
      Seconds seconds0 = Seconds.ONE;
      PeriodType periodType0 = seconds0.getPeriodType();
      Period period0 = new Period(dateTime0, dateTime0, periodType0);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(localDate1, localDate0, period0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 88359465600
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IslamicChronology.LeapYearPatternType islamicChronology_LeapYearPatternType0 = IslamicChronology.LEAP_YEAR_15_BASED;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null, islamicChronology_LeapYearPatternType0);
      MutableDateTime mutableDateTime0 = new MutableDateTime((-9223372036854775808L), (Chronology) islamicChronology0);
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(mutableDateTime0, mutableDateTime0, durationFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The minuend instant is below the supported minimum of 0001-01-01T00:00:00.000Z (IslamicChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Instant instant0 = Instant.now();
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(instant0, instant0, durationFieldType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateMidnight dateMidnight0 = new DateMidnight(2715L, (Chronology) ethiopicChronology0);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(dateMidnight0, dateMidnight0, (DurationFieldType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      DateMidnight dateMidnight0 = new DateMidnight(2715L, (Chronology) ethiopicChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.plusYears((-2));
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(dateMidnight0, dateMidnight1, durationFieldType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -63072000000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      MonthDay monthDay0 = new MonthDay(100000000000000L, (Chronology) julianChronology0);
      Years years0 = Years.yearsBetween((ReadablePartial) monthDay0, (ReadablePartial) monthDay0);
      DateMidnight dateMidnight0 = new DateMidnight(100000000000000L, (Chronology) julianChronology0);
      DateMidnight dateMidnight1 = dateMidnight0.plusYears((-707));
      MutableDateTime mutableDateTime0 = dateMidnight1.toMutableDateTime();
      Years years1 = Years.yearsBetween((ReadableInstant) mutableDateTime0, (ReadableInstant) dateMidnight0);
      int int0 = years0.compareTo((BaseSingleFieldPeriod) years1);
      assertEquals(707, years1.getYears());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Days days0 = Days.FIVE;
      Days days1 = Days.days(1340);
      int int0 = days1.compareTo((BaseSingleFieldPeriod) days0);
      assertEquals(1, int0);
      assertEquals(1340, days1.getDays());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Weeks weeks0 = Weeks.ONE;
      Days days0 = Days.days(0);
      // Undeclared exception!
      try { 
        days0.compareTo((BaseSingleFieldPeriod) weeks0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class org.joda.time.Days cannot be compared to class org.joda.time.Weeks
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Days days0 = Days.SIX;
      Days days1 = Days.MAX_VALUE;
      boolean boolean0 = days1.equals(days0);
      assertEquals(Integer.MAX_VALUE, days1.getDays());
      assertFalse(boolean0);
      assertFalse(days0.equals((Object)days1));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Days days0 = Days.days(23);
      Days days1 = Days.standardDaysIn(days0);
      boolean boolean0 = days0.equals(days1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Days days0 = Days.days(2);
      Minutes minutes0 = Minutes.ZERO;
      Seconds seconds0 = minutes0.toStandardSeconds();
      boolean boolean0 = days0.equals(seconds0);
      assertEquals(2, days0.getDays());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Days days0 = Days.SEVEN;
      boolean boolean0 = days0.equals(days0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      MonthDay monthDay0 = new MonthDay(2715L, (Chronology) julianChronology0);
      Years years0 = Years.yearsBetween((ReadablePartial) monthDay0, (ReadablePartial) monthDay0);
      Object object0 = new Object();
      boolean boolean0 = years0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Hours hours0 = Hours.SEVEN;
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      boolean boolean0 = hours0.isSupported(durationFieldType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Seconds seconds0 = Seconds.ONE;
      boolean boolean0 = seconds0.isSupported((DurationFieldType) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Days days0 = Days.days(0);
      PeriodType periodType0 = PeriodType.standard();
      DurationFieldType durationFieldType0 = periodType0.getFieldType(3);
      int int0 = days0.get(durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Hours hours0 = Hours.SEVEN;
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      Seconds seconds0 = hours0.toStandardSeconds();
      int int0 = seconds0.get(durationFieldType0);
      assertEquals(0, int0);
      assertEquals(25200, seconds0.getSeconds());
      assertEquals(7, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Days days0 = Days.SIX;
      // Undeclared exception!
      try { 
        days0.getValue((-660));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -660
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Days days0 = Days.days(3);
      // Undeclared exception!
      try { 
        days0.getFieldType(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Weeks weeks0 = Weeks.TWO;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(weeks0, (-1));
      assertEquals((-1209600000), int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Hours hours0 = Hours.standardHoursIn((ReadablePeriod) null);
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[2];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.centuryOfEra();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.minuteOfDay();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      int[] intArray0 = new int[2];
      Partial partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        Years.yearsBetween((ReadablePartial) partial0, (ReadablePartial) partial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must be contiguous
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      LocalDateTime localDateTime0 = new LocalDateTime(1232L, (Chronology) iSOChronology0);
      LocalTime localTime0 = LocalTime.fromMillisOfDay(254L, (Chronology) iSOChronology0);
      // Undeclared exception!
      try { 
        Days.daysBetween((ReadablePartial) localDateTime0, (ReadablePartial) localTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      MonthDay monthDay0 = new MonthDay(100000000000000L, (Chronology) julianChronology0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2);
      LocalDate localDate0 = new LocalDate((long) 1, dateTimeZone0);
      // Undeclared exception!
      try { 
        Days.daysBetween((ReadablePartial) monthDay0, (ReadablePartial) localDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      // Undeclared exception!
      try { 
        Weeks.weeksBetween((ReadablePartial) localTime0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Days days0 = Days.FIVE;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between((ReadablePartial) null, (ReadablePartial) null, days0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) buddhistChronology0);
      // Undeclared exception!
      try { 
        Days.daysBetween((ReadableInstant) dateMidnight0, (ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Months months0 = Months.months(1207);
      DurationFieldType durationFieldType0 = months0.getFieldType();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between((ReadableInstant) null, (ReadableInstant) null, durationFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Days days0 = Days.TWO;
      days0.toMutablePeriod();
      assertEquals(2, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Days days0 = Days.SEVEN;
      days0.toPeriod();
      assertEquals(7, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Days days0 = Days.SIX;
      days0.hashCode();
      assertEquals(6, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      MonthDay monthDay0 = new MonthDay(2715L, (Chronology) julianChronology0);
      Years years0 = Years.yearsBetween((ReadablePartial) monthDay0, (ReadablePartial) monthDay0);
      int int0 = years0.compareTo((BaseSingleFieldPeriod) years0);
      assertEquals(0, int0);
      assertEquals(0, years0.getYears());
  }
}
