/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 00:37:11 GMT 2021
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Calendar;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.StrictChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSingleFieldPeriod_ESTest extends BaseSingleFieldPeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Seconds seconds0 = Seconds.ONE;
      Seconds seconds1 = Seconds.ZERO;
      boolean boolean0 = seconds0.equals(seconds1);
      assertFalse(seconds1.equals((Object)seconds0));
      assertEquals(1, seconds0.getSeconds());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Hours hours0 = Hours.ONE;
      Minutes minutes0 = hours0.toStandardMinutes();
      // Undeclared exception!
      try { 
        minutes0.getValue((-1204));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -1204
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Months months0 = Months.MAX_VALUE;
      // Undeclared exception!
      try { 
        months0.getFieldType((-379));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -379
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Instant instant0 = new Instant();
      Chronology chronology0 = instant0.getChronology();
      YearMonth yearMonth0 = new YearMonth(1209600000L, chronology0);
      LocalTime localTime0 = new LocalTime(chronology0);
      // Undeclared exception!
      try { 
        Weeks.weeksBetween((ReadablePartial) yearMonth0, (ReadablePartial) localTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Days days0 = Days.SIX;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(days0, 320L);
      assertEquals(1620000, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Days days0 = Days.FOUR;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(days0, (-2645L));
      assertEquals((-130661), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Days days0 = Days.TWO;
      int int0 = days0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DateTime dateTime0 = new DateTime((Object) null);
      Duration duration0 = new Duration(dateTime0, dateTime0);
      Seconds seconds0 = duration0.toStandardSeconds();
      int int0 = seconds0.getValue(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Months months0 = Months.SIX;
      int int0 = months0.getValue(0);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Months months0 = Months.MIN_VALUE;
      int int0 = months0.getValue(0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Months months0 = Months.TWELVE;
      DurationFieldType durationFieldType0 = months0.getFieldType(0);
      assertEquals("months", durationFieldType0.getName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Days days0 = Days.TWO;
      Weeks weeks0 = days0.toStandardWeeks();
      weeks0.getFieldType();
      assertEquals(2, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Days days0 = Days.FOUR;
      DurationFieldType durationFieldType0 = days0.getFieldType();
      int int0 = days0.get(durationFieldType0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(117, 4648, 25650000, (-402), (-1));
      YearMonth yearMonth0 = YearMonth.fromCalendarFields(mockGregorianCalendar0);
      YearMonth yearMonth1 = yearMonth0.plusYears((-129));
      Years years0 = Years.yearsBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth1);
      DurationFieldType durationFieldType0 = years0.getFieldType();
      int int0 = years0.get(durationFieldType0);
      assertEquals((-129), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Days days0 = Days.SIX;
      LocalDate localDate0 = LocalDate.now();
      int int0 = BaseSingleFieldPeriod.between(localDate0, localDate0, days0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Days days0 = Days.SIX;
      DateTime dateTime0 = new DateTime(1L);
      LocalDateTime localDateTime0 = dateTime0.toLocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.minusDays(2207);
      int int0 = BaseSingleFieldPeriod.between(localDateTime1, localDateTime0, days0);
      assertEquals(2207, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Days days0 = Days.SIX;
      Seconds seconds0 = days0.toStandardSeconds();
      Minutes minutes0 = seconds0.toStandardMinutes();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      LocalTime localTime0 = LocalTime.now((Chronology) buddhistChronology0);
      LocalTime localTime1 = localTime0.plusMinutes(1);
      BaseSingleFieldPeriod.between(localTime1, localTime0, minutes0);
      assertEquals(8640, minutes0.getMinutes());
      assertEquals(518400, seconds0.getSeconds());
      assertEquals(6, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Instant instant0 = new Instant();
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      int int0 = BaseSingleFieldPeriod.between(instant0, instant0, durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      DateTime dateTime0 = new DateTime(1853L, (Chronology) iSOChronology0);
      DateTime dateTime1 = dateTime0.withYear(0);
      Duration duration0 = new Duration(dateTime0, dateTime1);
      DateTime dateTime2 = dateTime1.withDurationAdded((ReadableDuration) duration0, (-928));
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      int int0 = BaseSingleFieldPeriod.between(dateTime2, dateTime0, durationFieldType0);
      assertEquals((-1826190), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Months months0 = Months.ELEVEN;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(months0, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot convert period to duration as months is not precise in the period P11M
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Days days0 = Days.SIX;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(days0, 0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Weeks weeks0 = Weeks.MIN_VALUE;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(weeks0, 1114L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -1165886993097307
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Months months0 = Months.SIX;
      // Undeclared exception!
      try { 
        months0.compareTo((BaseSingleFieldPeriod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Weeks weeks0 = Weeks.ZERO;
      YearMonth yearMonth0 = new YearMonth(9223372036854775807L);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(yearMonth0, yearMonth0, weeks0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 292278994 for year must be in the range [-292275054,292278993]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay((-2228L));
      LocalDate localDate0 = monthDay0.toLocalDate((-2568));
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(localDate0, localDate0, (ReadablePeriod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Months months0 = Months.NINE;
      LocalDate localDate0 = new LocalDate();
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime(0L, (Chronology) gregorianChronology0);
      PeriodType periodType0 = months0.getPeriodType();
      PeriodType periodType1 = periodType0.withMonthsRemoved();
      MutablePeriod mutablePeriod0 = new MutablePeriod(dateTime0, dateTime0, periodType1);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(localDate0, localDate0, mutablePeriod0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Seconds seconds0 = Seconds.ONE;
      MockDate mockDate0 = new MockDate();
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      LocalDate localDate1 = localDate0.withYearOfEra(9);
      LocalDate localDate2 = localDate1.minus(seconds0);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(localDate2, localDate0, seconds0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 63271670400
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(calendar0);
      DateTime dateTime0 = localDateTime0.toDateTime();
      DateMidnight dateMidnight0 = dateTime0.toDateMidnight();
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(dateMidnight0, dateMidnight0, durationFieldType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      LenientChronology lenientChronology0 = LenientChronology.getInstance(buddhistChronology0);
      StrictChronology strictChronology0 = StrictChronology.getInstance(lenientChronology0);
      DateMidnight dateMidnight0 = new DateMidnight(0L, (Chronology) strictChronology0);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(dateMidnight0, dateMidnight0, (DurationFieldType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Seconds seconds0 = Seconds.ONE;
      DurationFieldType durationFieldType0 = seconds0.getFieldType();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between((ReadableInstant) null, (ReadableInstant) null, durationFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DateTime dateTime0 = new DateTime(3392L);
      DateMidnight dateMidnight0 = dateTime0.toDateMidnight();
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      DateMidnight dateMidnight1 = dateMidnight0.withYearOfEra(76);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(dateMidnight1, dateTime0, durationFieldType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 59768841603392
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Months months0 = Months.NINE;
      Months months1 = Months.SIX;
      int int0 = months1.compareTo((BaseSingleFieldPeriod) months0);
      assertEquals((-1), int0);
      assertEquals(6, months1.getMonths());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Months months0 = Months.FIVE;
      Months months1 = months0.negated();
      int int0 = months0.compareTo((BaseSingleFieldPeriod) months1);
      assertEquals(1, int0);
      assertEquals((-5), months1.getMonths());
      assertEquals(5, months0.getMonths());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      LocalDate localDate0 = new LocalDate(0L, (Chronology) ethiopicChronology0);
      Months months0 = Months.monthsBetween((ReadablePartial) localDate0, (ReadablePartial) localDate0);
      Period period0 = months0.toPeriod();
      Hours hours0 = period0.toStandardHours();
      Seconds seconds0 = hours0.toStandardSeconds();
      // Undeclared exception!
      try { 
        months0.compareTo((BaseSingleFieldPeriod) seconds0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class org.joda.time.Months cannot be compared to class org.joda.time.Seconds
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Months months0 = Months.NINE;
      int int0 = months0.compareTo((BaseSingleFieldPeriod) months0);
      assertEquals(9, months0.getMonths());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Months months0 = Months.FIVE;
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      MutablePeriod mutablePeriod0 = new MutablePeriod(months0, gregorianChronology0);
      boolean boolean0 = months0.equals(mutablePeriod0);
      assertTrue(boolean0);
      assertEquals(5, months0.getMonths());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Days days0 = Days.TWO;
      Weeks weeks0 = days0.toStandardWeeks();
      boolean boolean0 = days0.equals(weeks0);
      assertFalse(boolean0);
      assertEquals(2, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Hours hours0 = Hours.hours(1845);
      boolean boolean0 = hours0.equals((Object) null);
      assertEquals(1845, hours0.getHours());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Seconds seconds0 = Seconds.MAX_VALUE;
      boolean boolean0 = seconds0.equals(seconds0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Months months0 = Months.NINE;
      Months months1 = Months.SIX;
      boolean boolean0 = months1.equals(months0);
      assertFalse(months0.equals((Object)months1));
      assertEquals(6, months1.getMonths());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Months months0 = Months.ZERO;
      DurationFieldType durationFieldType0 = months0.getFieldType();
      boolean boolean0 = months0.isSupported(durationFieldType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Months months0 = Months.parseMonths((String) null);
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      boolean boolean0 = months0.isSupported(durationFieldType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(117, 4648, 25650000, (-402), (-1));
      YearMonth yearMonth0 = YearMonth.fromCalendarFields(mockGregorianCalendar0);
      Years years0 = Years.yearsBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      DurationFieldType durationFieldType0 = years0.getFieldType();
      int int0 = years0.get(durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Months months0 = Months.MIN_VALUE;
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      int int0 = months0.get(durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Years years0 = Years.THREE;
      // Undeclared exception!
      try { 
        years0.getValue(27);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 27
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Weeks weeks0 = Weeks.TWO;
      Hours hours0 = weeks0.toStandardHours();
      // Undeclared exception!
      try { 
        hours0.getFieldType(27);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 27
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = BaseSingleFieldPeriod.standardPeriodIn((ReadablePeriod) null, (-1L));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MutablePeriod mutablePeriod0 = new MutablePeriod((long) 0);
      Seconds seconds0 = Seconds.standardSecondsIn(mutablePeriod0);
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Months months0 = Months.TWELVE;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.halfdayOfDay();
      Partial partial0 = new Partial(dateTimeFieldType0, 0);
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.year();
      Partial partial1 = partial0.with(dateTimeFieldType1, (-154));
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(partial1, partial1, months0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must be contiguous
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1399, 1399, 1);
      LocalTime localTime0 = LocalTime.fromCalendarFields(mockGregorianCalendar0);
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
      // Undeclared exception!
      try { 
        Seconds.secondsBetween((ReadablePartial) localTime0, (ReadablePartial) localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay((-2228L));
      LocalDate localDate0 = monthDay0.toLocalDate((-25647986));
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(localDate0, monthDay0, (ReadablePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      Period period0 = new Period((-1753L));
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(localDate0, (ReadablePartial) null, period0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay((Object) null);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between((ReadablePartial) null, monthDay0, (ReadablePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Instant instant0 = new Instant((long) (-801));
      // Undeclared exception!
      try { 
        Months.monthsBetween((ReadableInstant) instant0, (ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DateTime dateTime0 = new DateTime(3392L);
      DateMidnight dateMidnight0 = dateTime0.toDateMidnight();
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      int int0 = BaseSingleFieldPeriod.between(dateMidnight0, dateTime0, durationFieldType0);
      assertEquals(3392, int0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Weeks weeks0 = Weeks.TWO;
      weeks0.toMutablePeriod();
      assertEquals(2, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Months months0 = Months.TWELVE;
      months0.hashCode();
      assertEquals(12, months0.getMonths());
  }
}
