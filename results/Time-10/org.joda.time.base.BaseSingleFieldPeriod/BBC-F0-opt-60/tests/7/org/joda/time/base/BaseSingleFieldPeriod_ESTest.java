/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 02:05:57 GMT 2021
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSingleFieldPeriod_ESTest extends BaseSingleFieldPeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Months months0 = Months.NINE;
      Months months1 = Months.SEVEN;
      boolean boolean0 = months0.equals(months1);
      assertEquals(7, months1.getMonths());
      assertFalse(boolean0);
      assertFalse(months1.equals((Object)months0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Weeks weeks0 = Weeks.MAX_VALUE;
      // Undeclared exception!
      try { 
        weeks0.getValue((-2018));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -2018
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Hours hours0 = Hours.hours(26);
      // Undeclared exception!
      try { 
        hours0.getFieldType(26);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 26
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      YearMonth yearMonth0 = YearMonth.now();
      // Undeclared exception!
      try { 
        Days.daysBetween((ReadablePartial) yearMonth0, (ReadablePartial) localTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Weeks weeks0 = Weeks.weeks((-15428571));
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(weeks0, (-15428571));
      assertEquals(604800000, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Duration duration0 = Duration.standardMinutes(599L);
      Minutes minutes0 = duration0.toStandardMinutes();
      minutes0.size();
      assertEquals(599, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      Days days0 = Days.daysBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      int int0 = days0.getValue(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Days days0 = Days.MAX_VALUE;
      int int0 = days0.getValue(0);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Hours hours0 = Hours.MAX_VALUE;
      Hours hours1 = hours0.negated();
      int int0 = hours1.getValue(0);
      assertEquals((-2147483647), int0);
      assertEquals(Integer.MAX_VALUE, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Days days0 = Days.FIVE;
      PeriodType periodType0 = days0.getPeriodType();
      assertEquals("Days", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Duration duration0 = new Duration(1356L);
      Minutes minutes0 = duration0.toStandardMinutes();
      DurationFieldType durationFieldType0 = minutes0.getFieldType(0);
      assertEquals("minutes", durationFieldType0.getName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      Hours hours0 = seconds0.toStandardHours();
      hours0.getFieldType();
      assertEquals((-596523), hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Days days0 = Days.FIVE;
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      int int0 = days0.get(durationFieldType0);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Days days0 = Days.FIVE;
      LocalTime localTime0 = LocalTime.now();
      int int0 = BaseSingleFieldPeriod.between(localTime0, localTime0, days0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2326));
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      DateTime dateTime0 = DateTime.now((Chronology) islamicChronology0);
      Hours hours0 = Hours.hoursBetween((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      MonthDay monthDay0 = new MonthDay(1, 1);
      MonthDay monthDay1 = new MonthDay(63158400000L);
      BaseSingleFieldPeriod.between(monthDay0, monthDay1, hours0);
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Days days0 = Days.FIVE;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-2326));
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance(dateTimeZone0);
      DateTime dateTime0 = DateTime.now((Chronology) islamicChronology0);
      Hours hours0 = Hours.hoursBetween((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      MonthDay monthDay0 = new MonthDay(1, 1);
      MonthDay monthDay1 = monthDay0.minus(days0);
      int int0 = BaseSingleFieldPeriod.between(monthDay1, monthDay0, hours0);
      assertEquals(0, hours0.getHours());
      assertEquals((-8640), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTime dateTime0 = DateTime.now((Chronology) buddhistChronology0);
      DateTime dateTime1 = dateTime0.plusDays(8);
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      int int0 = BaseSingleFieldPeriod.between(dateTime0, dateTime1, durationFieldType0);
      assertEquals(691200000, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      DateTime dateTime1 = dateTime0.minusMillis(1);
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      int int0 = BaseSingleFieldPeriod.between(dateTime0, dateTime1, durationFieldType0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Days days0 = Days.parseDays((String) null);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(days0, 0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Weeks weeks0 = Weeks.MIN_VALUE;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(weeks0, 3);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -432932703436800000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Days days0 = Days.TWO;
      // Undeclared exception!
      try { 
        days0.compareTo((BaseSingleFieldPeriod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(" i!je'M+ %");
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone(timeZone0);
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0, 1);
      YearMonth yearMonth0 = new YearMonth(19900, 1, copticChronology0);
      YearMonth yearMonth1 = yearMonth0.minusYears(5062500);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(yearMonth1, yearMonth0, (ReadablePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (CopticChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay(0L);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(monthDay0, monthDay0, (ReadablePeriod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LocalDate localDate0 = LocalDate.now();
      Seconds seconds0 = Seconds.secondsBetween((ReadablePartial) localDate0, (ReadablePartial) localDate0);
      LocalDate localDate1 = localDate0.withYear(2631);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(localDate1, localDate0, seconds0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -19470585600
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0);
      MutableDateTime mutableDateTime0 = MutableDateTime.now((Chronology) gJChronology0);
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(mutableDateTime0, mutableDateTime0, durationFieldType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      StrictChronology strictChronology0 = StrictChronology.getInstance(buddhistChronology0);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(strictChronology0, fixedDateTimeZone0);
      MutableDateTime mutableDateTime0 = new MutableDateTime((Chronology) zonedChronology0);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(mutableDateTime0, mutableDateTime0, (DurationFieldType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTime dateTime0 = DateTime.now((Chronology) buddhistChronology0);
      DateTime dateTime1 = dateTime0.withMillis(1);
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(dateTime0, dateTime1, durationFieldType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -1392409281319
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Days days0 = Days.FIVE;
      Days days1 = Days.MAX_VALUE;
      int int0 = days0.compareTo((BaseSingleFieldPeriod) days1);
      assertEquals((-1), int0);
      assertEquals(Integer.MAX_VALUE, days1.getDays());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Days days0 = Days.TWO;
      Days days1 = Days.MAX_VALUE;
      int int0 = days1.compareTo((BaseSingleFieldPeriod) days0);
      assertEquals(1, int0);
      assertEquals(Integer.MAX_VALUE, days1.getDays());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Seconds seconds0 = Seconds.TWO;
      Days days0 = Days.parseDays((String) null);
      Weeks weeks0 = days0.toStandardWeeks();
      // Undeclared exception!
      try { 
        seconds0.compareTo((BaseSingleFieldPeriod) weeks0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class org.joda.time.Seconds cannot be compared to class org.joda.time.Weeks
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Days days0 = Days.MAX_VALUE;
      int int0 = days0.compareTo((BaseSingleFieldPeriod) days0);
      assertEquals(Integer.MAX_VALUE, days0.getDays());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Months months0 = Months.NINE;
      Months months1 = Months.TEN;
      boolean boolean0 = months0.equals(months1);
      assertFalse(months1.equals((Object)months0));
      assertEquals(10, months1.getMonths());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Days days0 = Days.FIVE;
      Months months0 = Months.TEN;
      boolean boolean0 = months0.equals(days0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Months months0 = Months.NINE;
      Period period0 = new Period(months0, (Chronology) null);
      boolean boolean0 = months0.equals(period0);
      assertTrue(boolean0);
      assertEquals(9, months0.getMonths());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Months months0 = Months.SIX;
      boolean boolean0 = months0.equals(months0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Days days0 = Days.FIVE;
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      boolean boolean0 = days0.equals(durationFieldType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Months months0 = Months.NINE;
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      boolean boolean0 = months0.isSupported(durationFieldType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Days days0 = Days.FIVE;
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      boolean boolean0 = days0.isSupported(durationFieldType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      DurationFieldType durationFieldType0 = days0.getFieldType();
      int int0 = days0.get(durationFieldType0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Hours hours0 = Hours.FOUR;
      Weeks weeks0 = hours0.toStandardWeeks();
      Seconds seconds0 = Seconds.ZERO;
      DurationFieldType durationFieldType0 = seconds0.getFieldType();
      int int0 = weeks0.get(durationFieldType0);
      assertEquals(4, hours0.getHours());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Years years0 = Years.ZERO;
      // Undeclared exception!
      try { 
        years0.getValue(51);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 51
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Days days0 = Days.MAX_VALUE;
      // Undeclared exception!
      try { 
        days0.getFieldType((-544));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -544
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Months months0 = Months.NINE;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(months0, 100000000000000000L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot convert period to duration as months is not precise in the period P9M
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Days days0 = Days.FIVE;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(days0, (-368L));
      assertEquals((-1173913), int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Seconds seconds0 = Seconds.standardSecondsIn((ReadablePeriod) null);
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) iSOChronology0);
      Partial partial0 = new Partial(localDateTime0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.monthOfYear();
      Partial partial1 = partial0.without(dateTimeFieldType0);
      // Undeclared exception!
      try { 
        Days.daysBetween((ReadablePartial) partial1, (ReadablePartial) partial1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must be contiguous
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LocalTime localTime0 = new LocalTime();
      LocalDateTime localDateTime0 = new LocalDateTime((-1547L));
      // Undeclared exception!
      try { 
        Days.daysBetween((ReadablePartial) localTime0, (ReadablePartial) localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds(0);
      Weeks weeks0 = seconds0.toStandardWeeks();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(58, 0, 0, 0, 58);
      LocalDateTime localDateTime0 = LocalDateTime.fromCalendarFields(mockGregorianCalendar0);
      YearMonth yearMonth0 = new YearMonth(3172L, (Chronology) null);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(localDateTime0, yearMonth0, weeks0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      // Undeclared exception!
      try { 
        Days.daysBetween((ReadablePartial) yearMonth0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      try { 
        Months.monthsBetween((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Instant instant0 = Instant.now();
      // Undeclared exception!
      try { 
        Seconds.secondsBetween((ReadableInstant) instant0, (ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      int int0 = BaseSingleFieldPeriod.between(dateTime0, dateTime0, durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Minutes minutes0 = Minutes.THREE;
      Days days0 = minutes0.toStandardDays();
      Seconds seconds0 = days0.toStandardSeconds();
      DurationFieldType durationFieldType0 = seconds0.getFieldType();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between((ReadableInstant) null, (ReadableInstant) null, durationFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Months months0 = Months.TWELVE;
      months0.toMutablePeriod();
      assertEquals(12, months0.getMonths());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Months months0 = Months.TWO;
      months0.toPeriod();
      assertEquals(2, months0.getMonths());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Days days0 = Days.FIVE;
      days0.hashCode();
      assertEquals(5, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      Days days0 = Days.daysBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(days0, 1);
      assertEquals(0, int0);
  }
}
