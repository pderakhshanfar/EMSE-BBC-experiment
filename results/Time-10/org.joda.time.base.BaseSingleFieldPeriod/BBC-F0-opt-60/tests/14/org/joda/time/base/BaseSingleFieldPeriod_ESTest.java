/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 00:25:45 GMT 2021
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.LenientChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSingleFieldPeriod_ESTest extends BaseSingleFieldPeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Years years0 = Years.ONE;
      years0.hashCode();
      assertEquals(1, years0.getYears());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Hours hours0 = Hours.ONE;
      Minutes minutes0 = hours0.toStandardMinutes();
      Minutes minutes1 = minutes0.multipliedBy((-1098));
      boolean boolean0 = minutes1.equals(minutes0);
      assertEquals(60, minutes0.getMinutes());
      assertFalse(minutes0.equals((Object)minutes1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Days days0 = Days.days((-2857));
      // Undeclared exception!
      try { 
        days0.getValue((-2857));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -2857
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Years years0 = Years.TWO;
      // Undeclared exception!
      try { 
        years0.getFieldType((-1157));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -1157
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDate localDate0 = localDateTime0.toLocalDate();
      // Undeclared exception!
      try { 
        Days.daysBetween((ReadablePartial) monthDay0, (ReadablePartial) localDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Days days0 = Days.ZERO;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(days0, (-2519L));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Days days0 = Days.FIVE;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(days0, 1530);
      assertEquals(282352, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Hours hours0 = Hours.EIGHT;
      Hours hours1 = hours0.plus((-724));
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(hours1, 301L);
      assertEquals((-8563455), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Weeks weeks0 = Weeks.THREE;
      int int0 = weeks0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      Hours hours0 = Hours.hoursBetween((ReadablePartial) monthDay0, (ReadablePartial) monthDay0);
      int int0 = hours0.getValue(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Seconds seconds0 = Seconds.THREE;
      int int0 = seconds0.getValue(0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      int int0 = seconds0.getValue(0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Instant instant0 = Instant.now();
      Chronology chronology0 = instant0.getChronology();
      LocalTime localTime0 = LocalTime.fromMillisOfDay(10000000000000L, chronology0);
      Years years0 = Years.yearsBetween((ReadablePartial) localTime0, (ReadablePartial) localTime0);
      PeriodType periodType0 = years0.getPeriodType();
      assertEquals("Years", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds((-205));
      seconds0.getFieldType(0);
      assertEquals((-205), seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Instant instant0 = Instant.now();
      Chronology chronology0 = instant0.getChronology();
      LocalTime localTime0 = LocalTime.fromMillisOfDay(10000000000000L, chronology0);
      Years years0 = Years.yearsBetween((ReadablePartial) localTime0, (ReadablePartial) localTime0);
      DurationFieldType durationFieldType0 = years0.getFieldType();
      assertEquals("years", durationFieldType0.getName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Seconds seconds0 = Seconds.THREE;
      MutableDateTime mutableDateTime0 = new MutableDateTime(0L);
      PeriodType periodType0 = PeriodType.yearMonthDayTime();
      MutablePeriod mutablePeriod0 = new MutablePeriod(mutableDateTime0, mutableDateTime0, periodType0);
      DurationFieldType durationFieldType0 = mutablePeriod0.getFieldType(5);
      int int0 = seconds0.get(durationFieldType0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Weeks weeks0 = Weeks.TWO;
      Seconds seconds0 = weeks0.toStandardSeconds();
      Partial partial0 = new Partial();
      BaseSingleFieldPeriod.between(partial0, partial0, seconds0);
      assertEquals(1209600, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Weeks weeks0 = Weeks.TWO;
      Seconds seconds0 = weeks0.toStandardSeconds();
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime localDateTime1 = localDateTime0.plusSeconds(8);
      BaseSingleFieldPeriod.between(localDateTime0, localDateTime1, seconds0);
      assertEquals(1209600, seconds0.getSeconds());
      assertEquals(2, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Weeks weeks0 = Weeks.TWO;
      Seconds seconds0 = weeks0.toStandardSeconds();
      assertEquals(1, seconds0.size());
      
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.plusWeeks(1);
      BaseSingleFieldPeriod.between(localDateTime1, localDateTime0, seconds0);
      assertEquals(1209600, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Instant instant0 = Instant.now();
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      int int0 = BaseSingleFieldPeriod.between(instant0, instant0, durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateMidnight dateMidnight0 = new DateMidnight((DateTimeZone) fixedDateTimeZone0);
      DateMidnight dateMidnight1 = dateMidnight0.minus((long) 1);
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      MutableDateTime mutableDateTime0 = dateMidnight1.toMutableDateTime((Chronology) julianChronology0);
      Days days0 = Days.ZERO;
      DurationFieldType durationFieldType0 = days0.getFieldType();
      int int0 = BaseSingleFieldPeriod.between(mutableDateTime0, dateMidnight0, durationFieldType0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      DateTime dateTime0 = DateTime.now((Chronology) copticChronology0);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      YearMonth yearMonth0 = new YearMonth((Chronology) buddhistChronology0);
      DateTime dateTime1 = dateTime0.withFields(yearMonth0);
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      int int0 = BaseSingleFieldPeriod.between(dateTime1, dateTime0, durationFieldType0);
      assertEquals((-7246608), int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Months months0 = Months.months(2636);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(months0, (-231L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot convert period to duration as months is not precise in the period P2636M
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Weeks weeks0 = Weeks.ONE;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(weeks0, 0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Days days0 = Days.MAX_VALUE;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(days0, 1530);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 121269664771764
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Seconds seconds0 = Seconds.THREE;
      // Undeclared exception!
      try { 
        seconds0.compareTo((BaseSingleFieldPeriod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockDate mockDate0 = new MockDate(1874L);
      LocalTime localTime0 = LocalTime.fromDateFields(mockDate0);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(localTime0, localTime0, (ReadablePeriod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      Hours hours0 = Hours.hoursBetween((ReadablePartial) monthDay0, (ReadablePartial) monthDay0);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      LocalDate localDate0 = new LocalDate(2342L, dateTimeZone0);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(localDate0, monthDay0, hours0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) ethiopicChronology0);
      Duration duration0 = new Duration((long) 0);
      PeriodType periodType0 = PeriodType.hours();
      PeriodType periodType1 = periodType0.withHoursRemoved();
      Period period0 = duration0.toPeriod(periodType1, (Chronology) ethiopicChronology0);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(localDateTime0, localDateTime0, period0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Weeks weeks0 = Weeks.TWO;
      Seconds seconds0 = weeks0.toStandardSeconds();
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime localDateTime1 = new LocalDateTime(8, 8, 8, 8, 8, 8);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(localDateTime1, localDateTime0, seconds0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 63288130393
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Instant instant0 = new Instant();
      Chronology chronology0 = instant0.getChronology();
      DateTime dateTime0 = new DateTime(chronology0);
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(dateTime0, instant0, durationFieldType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      StrictChronology strictChronology0 = StrictChronology.getInstance(buddhistChronology0);
      LenientChronology lenientChronology0 = LenientChronology.getInstance(strictChronology0);
      DateTime dateTime0 = DateTime.now((Chronology) lenientChronology0);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(dateTime0, dateTime0, (DurationFieldType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateMidnight dateMidnight0 = new DateMidnight((DateTimeZone) fixedDateTimeZone0);
      DateMidnight dateMidnight1 = dateMidnight0.withEra(0);
      JulianChronology julianChronology0 = JulianChronology.getInstance();
      MutableDateTime mutableDateTime0 = dateMidnight1.toMutableDateTime((Chronology) julianChronology0);
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(mutableDateTime0, dateMidnight0, durationFieldType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 127111420800000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      Seconds seconds1 = Seconds.MAX_VALUE;
      int int0 = seconds0.compareTo((BaseSingleFieldPeriod) seconds1);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Seconds seconds0 = Seconds.THREE;
      Interval interval0 = new Interval(0, 0);
      Seconds seconds1 = Seconds.secondsIn(interval0);
      int int0 = seconds0.compareTo((BaseSingleFieldPeriod) seconds1);
      assertEquals(1, int0);
      assertEquals(0, seconds1.getSeconds());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      Hours hours0 = Hours.hoursBetween((ReadablePartial) monthDay0, (ReadablePartial) monthDay0);
      Seconds seconds0 = Seconds.MIN_VALUE;
      // Undeclared exception!
      try { 
        seconds0.compareTo((BaseSingleFieldPeriod) hours0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class org.joda.time.Seconds cannot be compared to class org.joda.time.Hours
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Seconds seconds0 = Seconds.THREE;
      int int0 = seconds0.compareTo((BaseSingleFieldPeriod) seconds0);
      assertEquals(0, int0);
      assertEquals(3, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Weeks weeks0 = Weeks.THREE;
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      DateMidnight dateMidnight0 = DateMidnight.now(dateTimeZone0);
      Interval interval0 = new Interval(weeks0, dateMidnight0);
      Hours hours0 = Hours.FOUR;
      Minutes minutes0 = hours0.toStandardMinutes();
      Minutes minutes1 = Minutes.minutesIn(interval0);
      boolean boolean0 = minutes1.equals(minutes0);
      assertEquals(30240, minutes1.getMinutes());
      assertFalse(boolean0);
      assertFalse(minutes0.equals((Object)minutes1));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Weeks weeks0 = Weeks.THREE;
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      DateMidnight dateMidnight0 = DateMidnight.now(dateTimeZone0);
      Interval interval0 = new Interval(weeks0, dateMidnight0);
      Hours hours0 = Hours.hoursIn(interval0);
      Minutes minutes0 = hours0.toStandardMinutes();
      Minutes minutes1 = Minutes.minutesIn(interval0);
      boolean boolean0 = minutes1.equals(minutes0);
      assertEquals(30240, minutes1.getMinutes());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Weeks weeks0 = Weeks.THREE;
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      DateMidnight dateMidnight0 = DateMidnight.now(dateTimeZone0);
      Interval interval0 = new Interval(weeks0, dateMidnight0);
      Hours hours0 = Hours.hoursIn(interval0);
      boolean boolean0 = hours0.equals("R@4NM1A_H((NMyO");
      assertEquals(504, hours0.getHours());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Seconds seconds0 = Seconds.THREE;
      Minutes minutes0 = seconds0.toStandardMinutes();
      boolean boolean0 = minutes0.equals(minutes0);
      assertTrue(boolean0);
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Weeks weeks0 = Weeks.THREE;
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      DateMidnight dateMidnight0 = DateMidnight.now(dateTimeZone0);
      Interval interval0 = new Interval(weeks0, dateMidnight0);
      Hours hours0 = Hours.hoursIn(interval0);
      Minutes minutes0 = hours0.toStandardMinutes();
      boolean boolean0 = minutes0.equals(weeks0);
      assertEquals(504, hours0.getHours());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Months months0 = Months.TEN;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null);
      DateMidnight dateMidnight0 = new DateMidnight((Chronology) islamicChronology0);
      MutableDateTime mutableDateTime0 = dateMidnight0.toMutableDateTime();
      Interval interval0 = new Interval(months0, mutableDateTime0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.dayOfYear();
      Years years0 = Years.yearsIn(interval0);
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getRangeDurationType();
      boolean boolean0 = years0.isSupported(durationFieldType0);
      assertTrue(boolean0);
      assertEquals(0, years0.getYears());
      assertEquals(10, months0.getMonths());
      assertEquals(1, years0.size());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Duration duration0 = Duration.ZERO;
      Days days0 = duration0.toStandardDays();
      Seconds seconds0 = days0.toStandardSeconds();
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      boolean boolean0 = seconds0.isSupported(durationFieldType0);
      assertFalse(boolean0);
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      int int0 = seconds0.get(durationFieldType0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Days days0 = Days.ZERO;
      DurationFieldType durationFieldType0 = DurationFieldType.centuries();
      int int0 = days0.get(durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Seconds seconds0 = Seconds.MAX_VALUE;
      // Undeclared exception!
      try { 
        seconds0.getValue(27);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 27
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Instant instant0 = Instant.now();
      Chronology chronology0 = instant0.getChronology();
      LocalTime localTime0 = LocalTime.fromMillisOfDay(10000000000000L, chronology0);
      Years years0 = Years.yearsBetween((ReadablePartial) localTime0, (ReadablePartial) localTime0);
      // Undeclared exception!
      try { 
        years0.getFieldType(2632);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 2632
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Weeks weeks0 = Weeks.standardWeeksIn((ReadablePeriod) null);
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forTimeZone((TimeZone) null);
      YearMonth yearMonth0 = new YearMonth(0L);
      MonthDay monthDay0 = MonthDay.now(dateTimeZone0);
      // Undeclared exception!
      try { 
        Hours.hoursBetween((ReadablePartial) yearMonth0, (ReadablePartial) monthDay0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      YearMonth yearMonth0 = new YearMonth(248L, (Chronology) gJChronology0);
      // Undeclared exception!
      try { 
        Seconds.secondsBetween((ReadablePartial) yearMonth0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        Days.daysBetween((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      // Undeclared exception!
      try { 
        Seconds.secondsBetween((ReadableInstant) dateTime0, (ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between((ReadableInstant) null, (ReadableInstant) null, (DurationFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Months months0 = Months.months(2636);
      months0.toMutablePeriod();
      assertEquals(1, months0.size());
      assertEquals(2636, months0.getMonths());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Days days0 = Days.ZERO;
      days0.toPeriod();
      assertEquals(1, days0.size());
      assertEquals(0, days0.getDays());
  }
}
