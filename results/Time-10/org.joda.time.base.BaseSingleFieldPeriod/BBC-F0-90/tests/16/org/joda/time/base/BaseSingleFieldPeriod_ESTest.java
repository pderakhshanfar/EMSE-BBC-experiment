/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 15:54:17 GMT 2021
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutableInterval;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.LimitChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.format.DateTimeFormatter;
import org.joda.time.format.DateTimeParser;
import org.joda.time.format.DateTimePrinter;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSingleFieldPeriod_ESTest extends BaseSingleFieldPeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Months months0 = Months.SEVEN;
      months0.hashCode();
      assertEquals(7, months0.getMonths());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeParser0);
      LocalDate localDate0 = LocalDate.parse("", dateTimeFormatter0);
      Interval interval0 = localDate0.toInterval();
      Months months0 = Months.monthsIn(interval0);
      Months months1 = Months.NINE;
      boolean boolean0 = months1.equals(months0);
      assertFalse(boolean0);
      assertFalse(months0.equals((Object)months1));
      assertEquals(0, months0.getMonths());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Days days0 = Days.MAX_VALUE;
      // Undeclared exception!
      try { 
        days0.getValue(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds(828);
      Instant instant0 = Instant.now();
      MutableInterval mutableInterval0 = new MutableInterval(instant0, seconds0);
      Years years0 = Years.yearsIn(mutableInterval0);
      // Undeclared exception!
      try { 
        years0.getFieldType(828);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 828
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      LocalTime localTime0 = LocalTime.now(dateTimeZone0);
      MonthDay monthDay0 = MonthDay.now(dateTimeZone0);
      // Undeclared exception!
      try { 
        Years.yearsBetween((ReadablePartial) monthDay0, (ReadablePartial) localTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds(828);
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(seconds0, 26607895200000L);
      assertEquals(828, seconds0.getSeconds());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Hours hours0 = Hours.hours((-724));
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(hours0, 1535L);
      assertEquals((-1697980), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Years years0 = Years.ONE;
      int int0 = years0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Years years0 = Years.years(0);
      int int0 = years0.getValue(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Weeks weeks0 = Weeks.TWO;
      Days days0 = weeks0.toStandardDays();
      int int0 = days0.getValue(0);
      assertEquals(14, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Years years0 = Years.MIN_VALUE;
      int int0 = years0.getValue(0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Hours hours0 = Hours.standardHoursIn((ReadablePeriod) null);
      hours0.getPeriodType();
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Years years0 = Years.TWO;
      DurationFieldType durationFieldType0 = years0.getFieldType(0);
      assertEquals("years", durationFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Days days0 = Days.SEVEN;
      Seconds seconds0 = days0.toStandardSeconds();
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      int int0 = seconds0.get(durationFieldType0);
      assertEquals(604800, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(84).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeParser0);
      LocalDate localDate0 = LocalDate.parse("", dateTimeFormatter0);
      Interval interval0 = localDate0.toInterval();
      Months months0 = Months.monthsIn(interval0);
      Months months1 = Months.NINE;
      Months months2 = months0.minus(months1);
      DurationFieldType durationFieldType0 = months0.getFieldType();
      int int0 = months2.get(durationFieldType0);
      assertEquals((-9), int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Years years0 = Years.ONE;
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      int int0 = BaseSingleFieldPeriod.between(localTime0, localTime0, years0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Hours hours0 = Hours.hours((-133));
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      LocalDate localDate0 = LocalDate.now(dateTimeZone0);
      LocalDate localDate1 = localDate0.minusMonths(435);
      BaseSingleFieldPeriod.between(localDate1, localDate0, hours0);
      assertEquals((-133), hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Years years0 = Years.MIN_VALUE;
      YearMonth yearMonth0 = YearMonth.now();
      YearMonth yearMonth1 = yearMonth0.plusYears(1);
      int int0 = BaseSingleFieldPeriod.between(yearMonth1, yearMonth0, years0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds(828);
      Instant instant0 = Instant.now();
      MutableInterval mutableInterval0 = new MutableInterval(instant0, seconds0);
      Years years0 = Years.yearsIn(mutableInterval0);
      DurationFieldType durationFieldType0 = years0.getFieldType();
      int int0 = BaseSingleFieldPeriod.between(instant0, instant0, durationFieldType0);
      assertEquals(0, int0);
      assertEquals(828, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateTime dateTime0 = new DateTime(1083L);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateMidnight dateMidnight0 = new DateMidnight((long) 2, (DateTimeZone) fixedDateTimeZone0);
      Hours hours0 = Hours.hoursBetween((ReadableInstant) dateMidnight0, (ReadableInstant) dateMidnight0);
      DurationFieldType durationFieldType0 = hours0.getFieldType();
      DateMidnight dateMidnight1 = dateMidnight0.plusYears(1);
      int int0 = BaseSingleFieldPeriod.between(dateTime0, dateMidnight1, durationFieldType0);
      assertEquals(8759, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime((Chronology) iSOChronology0);
      DateTime dateTime1 = dateTime0.plusHours(Integer.MAX_VALUE);
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      int int0 = BaseSingleFieldPeriod.between(dateTime1, dateTime0, durationFieldType0);
      assertEquals((-2939805), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Years years0 = Years.THREE;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(years0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot convert period to duration as years is not precise in the period P3Y
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Minutes minutes0 = Minutes.ZERO;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(minutes0, 0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Weeks weeks0 = Weeks.MAX_VALUE;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(weeks0, (-1664L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -780527710159615
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Seconds seconds0 = Seconds.MAX_VALUE;
      // Undeclared exception!
      try { 
        seconds0.compareTo((BaseSingleFieldPeriod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LocalTime localTime0 = LocalTime.now();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(localTime0, localTime0, (ReadablePeriod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      LocalDate localDate0 = monthDay0.toLocalDate(0);
      LocalDate localDate1 = localDate0.minusMonths(1992);
      PeriodType periodType0 = PeriodType.millis();
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      MutablePeriod mutablePeriod0 = new MutablePeriod(1992, 1, periodType0, copticChronology0);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(localDate1, localDate0, mutablePeriod0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 5238432000000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(copticChronology0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(1, 1);
      DateMidnight dateMidnight0 = new DateMidnight((long) 1, dateTimeZone0);
      MutableDateTime mutableDateTime0 = MutableDateTime.now(dateTimeZone0);
      LimitChronology limitChronology0 = LimitChronology.getInstance(strictChronology0, dateMidnight0, mutableDateTime0);
      MutableDateTime mutableDateTime1 = MutableDateTime.now((Chronology) limitChronology0);
      Months months0 = Months.THREE;
      DurationFieldType durationFieldType0 = months0.getFieldType();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(mutableDateTime1, dateMidnight0, durationFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The subtrahend instant is above the supported maximum of 1730-06-07T20:21:21.320Z (StrictChronology[CopticChronology[UTC]])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Instant instant0 = Instant.now();
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(instant0, instant0, durationFieldType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Instant instant0 = Instant.now();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(instant0, instant0, (DurationFieldType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Years years0 = Years.ONE;
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime((Chronology) gJChronology0);
      Interval interval0 = new Interval(dateTime0, dateTime0);
      Years years1 = Years.yearsIn(interval0);
      int int0 = years1.compareTo((BaseSingleFieldPeriod) years0);
      assertEquals(0, years1.getYears());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Seconds seconds0 = Seconds.MAX_VALUE;
      Seconds seconds1 = seconds0.negated();
      int int0 = seconds0.compareTo((BaseSingleFieldPeriod) seconds1);
      assertEquals((-2147483647), seconds1.getSeconds());
      assertEquals(Integer.MAX_VALUE, seconds0.getSeconds());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Hours hours0 = Hours.THREE;
      Years years0 = Years.years((-123));
      // Undeclared exception!
      try { 
        years0.compareTo((BaseSingleFieldPeriod) hours0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class org.joda.time.Years cannot be compared to class org.joda.time.Hours
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Years years0 = Years.years(27);
      int int0 = years0.compareTo((BaseSingleFieldPeriod) years0);
      assertEquals(0, int0);
      assertEquals(27, years0.getYears());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Years years0 = Years.years(1480);
      Years years1 = Years.years(1480);
      boolean boolean0 = years1.equals(years0);
      assertTrue(boolean0);
      assertEquals(1480, years1.getYears());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Hours hours0 = Hours.THREE;
      Weeks weeks0 = Weeks.weeks(1294);
      Days days0 = weeks0.toStandardDays();
      boolean boolean0 = hours0.equals(days0);
      assertEquals(1294, weeks0.getWeeks());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(0);
      Days days0 = duration0.toStandardDays();
      Weeks weeks0 = Weeks.TWO;
      Days days1 = weeks0.toStandardDays();
      boolean boolean0 = days0.equals(days1);
      assertEquals(2, weeks0.getWeeks());
      assertEquals(14, days1.getDays());
      assertFalse(boolean0);
      assertFalse(days1.equals((Object)days0));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstanceUTC();
      DateTime dateTime0 = new DateTime((Chronology) gJChronology0);
      Interval interval0 = new Interval(dateTime0, dateTime0);
      Duration duration0 = interval0.toDuration();
      Days days0 = duration0.toStandardDays();
      boolean boolean0 = days0.equals(days0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      Weeks weeks0 = Weeks.weeksBetween((ReadablePartial) localTime0, (ReadablePartial) localTime0);
      Days days0 = Days.standardDaysIn(weeks0);
      boolean boolean0 = days0.equals((Object) null);
      assertEquals(0, days0.getDays());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Months months0 = Months.EIGHT;
      DurationFieldType durationFieldType0 = months0.getFieldType();
      boolean boolean0 = months0.isSupported(durationFieldType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Duration duration0 = Duration.standardSeconds(0);
      Days days0 = duration0.toStandardDays();
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      boolean boolean0 = days0.isSupported(durationFieldType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(84).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeParser0);
      LocalDate localDate0 = LocalDate.parse("", dateTimeFormatter0);
      Interval interval0 = localDate0.toInterval();
      Months months0 = Months.monthsIn(interval0);
      DurationFieldType durationFieldType0 = months0.getFieldType();
      int int0 = months0.get(durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DateTimeParser dateTimeParser0 = mock(DateTimeParser.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(dateTimeParser0).parseInto(any(org.joda.time.format.DateTimeParserBucket.class) , anyString() , anyInt());
      DateTimeFormatter dateTimeFormatter0 = new DateTimeFormatter((DateTimePrinter) null, dateTimeParser0);
      LocalDate localDate0 = LocalDate.parse("", dateTimeFormatter0);
      Interval interval0 = localDate0.toInterval();
      Months months0 = Months.monthsIn(interval0);
      Seconds seconds0 = Seconds.MAX_VALUE;
      DurationFieldType durationFieldType0 = months0.getFieldType();
      int int0 = seconds0.get(durationFieldType0);
      assertEquals(0, months0.getMonths());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Weeks weeks0 = Weeks.ZERO;
      // Undeclared exception!
      try { 
        weeks0.getValue((-1582));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -1582
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Days days0 = Days.ZERO;
      // Undeclared exception!
      try { 
        days0.getFieldType((-1916));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -1916
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DateTimeFieldType[] dateTimeFieldTypeArray0 = new DateTimeFieldType[4];
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfEra();
      dateTimeFieldTypeArray0[0] = dateTimeFieldType0;
      DateTimeFieldType dateTimeFieldType1 = DateTimeFieldType.clockhourOfDay();
      dateTimeFieldTypeArray0[1] = dateTimeFieldType1;
      DateTimeFieldType dateTimeFieldType2 = DateTimeFieldType.minuteOfDay();
      dateTimeFieldTypeArray0[2] = dateTimeFieldType2;
      DateTimeFieldType dateTimeFieldType3 = DateTimeFieldType.millisOfDay();
      dateTimeFieldTypeArray0[3] = dateTimeFieldType3;
      int[] intArray0 = new int[4];
      intArray0[0] = 486;
      intArray0[1] = 1;
      Partial partial0 = new Partial(dateTimeFieldTypeArray0, intArray0);
      // Undeclared exception!
      try { 
        Years.yearsBetween((ReadablePartial) partial0, (ReadablePartial) partial0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must be contiguous
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(0);
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      // Undeclared exception!
      try { 
        Hours.hoursBetween((ReadablePartial) localDateTime0, (ReadablePartial) localTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      MockDate mockDate0 = new MockDate(1772, 1772, 1772, 1772, 1772);
      YearMonth yearMonth0 = YearMonth.fromDateFields(mockDate0);
      // Undeclared exception!
      try { 
        Years.yearsBetween((ReadablePartial) localTime0, (ReadablePartial) yearMonth0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(0, 0);
      // Undeclared exception!
      try { 
        Years.yearsBetween((ReadablePartial) localTime0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Years years0 = Years.THREE;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between((ReadablePartial) null, (ReadablePartial) null, years0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateMidnight dateMidnight0 = DateMidnight.now((DateTimeZone) fixedDateTimeZone0);
      MutableDateTime mutableDateTime0 = dateMidnight0.toMutableDateTime();
      // Undeclared exception!
      try { 
        Hours.hoursBetween((ReadableInstant) mutableDateTime0, (ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between((ReadableInstant) null, (ReadableInstant) null, durationFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Hours hours0 = Hours.hours((-133));
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(hours0, (-133));
      assertEquals(3600000, int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Years years0 = Years.years(0);
      years0.toMutablePeriod();
      assertEquals(0, years0.getYears());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      CopticChronology copticChronology0 = CopticChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      MonthDay monthDay0 = MonthDay.now((Chronology) copticChronology0);
      Months months0 = Months.monthsBetween((ReadablePartial) monthDay0, (ReadablePartial) monthDay0);
      months0.toPeriod();
      assertEquals(0, months0.getMonths());
  }
}
