/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 15:59:28 GMT 2021
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.Months;
import org.joda.time.MutableInterval;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSingleFieldPeriod_ESTest extends BaseSingleFieldPeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds((-1687));
      Period period0 = Period.days(0);
      Duration duration0 = period0.toStandardDuration();
      Seconds seconds1 = duration0.toStandardSeconds();
      boolean boolean0 = seconds1.equals(seconds0);
      assertFalse(seconds0.equals((Object)seconds1));
      assertFalse(boolean0);
      assertEquals((-1687), seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Days days0 = Days.ONE;
      // Undeclared exception!
      try { 
        days0.getValue((-878));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -878
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Minutes minutes0 = Minutes.ZERO;
      // Undeclared exception!
      try { 
        minutes0.getFieldType((-1687));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -1687
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds((-1687));
      Weeks weeks0 = Weeks.standardWeeksIn(seconds0);
      assertEquals((-1687), seconds0.getSeconds());
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(13, 13, 13);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstanceUTC();
      YearMonth yearMonth0 = new YearMonth((long) (-125), (Chronology) ethiopicChronology0);
      // Undeclared exception!
      try { 
        Weeks.weeksBetween((ReadablePartial) localTime0, (ReadablePartial) yearMonth0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Seconds seconds0 = Seconds.ZERO;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(seconds0, (-671L));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Minutes minutes0 = Minutes.THREE;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(minutes0, 2252L);
      assertEquals(79, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Seconds seconds0 = Seconds.MAX_VALUE;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(seconds0, (-2444L));
      assertEquals((-878675796), int0);
      assertEquals(Integer.MAX_VALUE, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Weeks weeks0 = Weeks.THREE;
      int int0 = weeks0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Days days0 = Days.parseDays((String) null);
      Minutes minutes0 = days0.toStandardMinutes();
      int int0 = minutes0.getValue(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Days days0 = Days.THREE;
      int int0 = days0.getValue(0);
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Years years0 = Years.MIN_VALUE;
      int int0 = years0.getValue(0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Seconds seconds0 = Seconds.ONE;
      PeriodType periodType0 = seconds0.getPeriodType();
      assertEquals(1, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Seconds seconds0 = Seconds.ZERO;
      Days days0 = seconds0.toStandardDays();
      days0.getFieldType(0);
      assertEquals(0, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      DurationFieldType durationFieldType0 = seconds0.getFieldType();
      int int0 = seconds0.get(durationFieldType0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Seconds seconds0 = Seconds.MAX_VALUE;
      Weeks weeks0 = Weeks.standardWeeksIn(seconds0);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDateTime localDateTime0 = new LocalDateTime((DateTimeZone) fixedDateTimeZone0);
      BaseSingleFieldPeriod.between(localDateTime0, localDateTime0, weeks0);
      assertEquals(Integer.MAX_VALUE, seconds0.getSeconds());
      assertEquals(3550, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Seconds seconds0 = Seconds.MAX_VALUE;
      GJChronology gJChronology0 = GJChronology.getInstance();
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) gJChronology0);
      LocalDateTime localDateTime1 = localDateTime0.minus((ReadablePeriod) seconds0);
      int int0 = BaseSingleFieldPeriod.between(localDateTime1, localDateTime0, seconds0);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Interval interval0 = new Interval(0L, 0L);
      MutableInterval mutableInterval0 = interval0.toMutableInterval();
      Weeks weeks0 = Weeks.weeksIn(mutableInterval0);
      YearMonth yearMonth0 = new YearMonth();
      YearMonth yearMonth1 = yearMonth0.plusYears(950);
      BaseSingleFieldPeriod.between(yearMonth1, yearMonth0, weeks0);
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Hours hours0 = Hours.FOUR;
      DurationFieldType durationFieldType0 = hours0.getFieldType();
      DateTime dateTime0 = new DateTime();
      DateTime dateTime1 = dateTime0.withMillis(0L);
      int int0 = BaseSingleFieldPeriod.between(dateTime1, dateTime0, durationFieldType0);
      assertEquals(386780, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Years years0 = Years.TWO;
      DateMidnight dateMidnight0 = new DateMidnight((long) 0);
      DateTime dateTime0 = dateMidnight0.toDateTime((Chronology) null);
      DateTime dateTime1 = dateTime0.plusDays(784);
      DurationFieldType durationFieldType0 = years0.getFieldType();
      int int0 = BaseSingleFieldPeriod.between(dateTime1, dateTime0, durationFieldType0);
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Hours hours0 = Hours.ZERO;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(hours0, 0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Seconds seconds0 = Seconds.MAX_VALUE;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(seconds0, 178);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 12064514870
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Months months0 = Months.SEVEN;
      // Undeclared exception!
      try { 
        months0.compareTo((BaseSingleFieldPeriod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LocalDate localDate0 = new LocalDate();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(localDate0, localDate0, (ReadablePeriod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Partial partial0 = new Partial();
      Years years0 = Years.ZERO;
      PeriodType periodType0 = years0.getPeriodType();
      PeriodType periodType1 = periodType0.withYearsRemoved();
      MutablePeriod mutablePeriod0 = new MutablePeriod(periodType1);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(partial0, partial0, mutablePeriod0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Seconds seconds0 = Seconds.MAX_VALUE;
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      YearMonth yearMonth0 = YearMonth.now((Chronology) gregorianChronology0);
      YearMonth yearMonth1 = yearMonth0.minusMonths(292271022);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(yearMonth1, yearMonth0, seconds0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 768598551129600
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      LocalDate localDate0 = LocalDate.now((Chronology) buddhistChronology0);
      DateMidnight dateMidnight0 = localDate0.toDateMidnight();
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(dateMidnight0, dateMidnight0, durationFieldType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((DateTimeZone) null);
      Instant instant0 = dateMidnight0.toInstant();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(instant0, instant0, (DurationFieldType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Years years0 = Years.TWO;
      Years years1 = years0.dividedBy((-340));
      int int0 = years1.compareTo((BaseSingleFieldPeriod) years0);
      assertEquals(0, years1.getYears());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Years years0 = Years.TWO;
      Years years1 = Years.years(8);
      int int0 = years1.compareTo((BaseSingleFieldPeriod) years0);
      assertEquals(1, int0);
      assertEquals(8, years1.getYears());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds((-1687));
      Weeks weeks0 = seconds0.toStandardWeeks();
      // Undeclared exception!
      try { 
        seconds0.compareTo((BaseSingleFieldPeriod) weeks0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class org.joda.time.Seconds cannot be compared to class org.joda.time.Weeks
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(13, 13, 13);
      Years years0 = Years.yearsBetween((ReadablePartial) localTime0, (ReadablePartial) localTime0);
      int int0 = years0.compareTo((BaseSingleFieldPeriod) years0);
      assertEquals(0, int0);
      assertEquals(0, years0.getYears());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Seconds seconds0 = Seconds.ZERO;
      Seconds seconds1 = Seconds.MIN_VALUE;
      boolean boolean0 = seconds1.equals(seconds0);
      assertFalse(boolean0);
      assertFalse(seconds0.equals((Object)seconds1));
      assertEquals(Integer.MIN_VALUE, seconds1.getSeconds());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Hours hours0 = Hours.FIVE;
      Minutes minutes0 = hours0.toStandardMinutes();
      Seconds seconds0 = Seconds.standardSecondsIn(hours0);
      Seconds seconds1 = minutes0.toStandardSeconds();
      boolean boolean0 = seconds1.equals(seconds0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Seconds seconds0 = Seconds.ZERO;
      Period period0 = Period.days((-3785));
      Duration duration0 = period0.toStandardDuration();
      boolean boolean0 = seconds0.equals(duration0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Seconds seconds0 = Seconds.ZERO;
      boolean boolean0 = seconds0.equals(seconds0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Months months0 = Months.ONE;
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      boolean boolean0 = months0.isSupported(durationFieldType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Weeks weeks0 = Weeks.MAX_VALUE;
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      boolean boolean0 = weeks0.isSupported(durationFieldType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Days days0 = Days.THREE;
      Seconds seconds0 = days0.toStandardSeconds();
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      int int0 = seconds0.get(durationFieldType0);
      assertEquals(259200, int0);
      assertEquals(3, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds((-1687));
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      int int0 = seconds0.get(durationFieldType0);
      assertEquals(0, int0);
      assertEquals((-1687), seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Years years0 = Years.TWO;
      // Undeclared exception!
      try { 
        years0.getValue(1273);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 1273
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Hours hours0 = Hours.EIGHT;
      // Undeclared exception!
      try { 
        hours0.getFieldType(3410);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 3410
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Years years0 = Years.THREE;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(years0, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot convert period to duration as years is not precise in the period P3Y
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Days days0 = Days.TWO;
      Hours hours0 = Hours.standardHoursIn(days0);
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      YearMonth yearMonth0 = new YearMonth(1245L, (Chronology) buddhistChronology0);
      YearMonth yearMonth1 = yearMonth0.withYear((-326));
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(yearMonth1, yearMonth0, hours0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (BuddhistChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Minutes minutes0 = Minutes.standardMinutesIn((ReadablePeriod) null);
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Years years0 = Years.ONE;
      LocalDateTime localDateTime0 = new LocalDateTime(24L);
      Partial partial0 = new Partial(localDateTime0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.secondOfMinute();
      Partial partial1 = partial0.with(dateTimeFieldType0, 27);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(partial1, partial1, years0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must be contiguous
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(13, 13, 13);
      LocalDateTime localDateTime0 = new LocalDateTime();
      // Undeclared exception!
      try { 
        Weeks.weeksBetween((ReadablePartial) localDateTime0, (ReadablePartial) localTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      LocalDate localDate0 = new LocalDate((long) 0);
      // Undeclared exception!
      try { 
        Days.daysBetween((ReadablePartial) yearMonth0, (ReadablePartial) localDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Years years0 = Years.MIN_VALUE;
      LocalTime localTime0 = new LocalTime();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(localTime0, (ReadablePartial) null, years0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LocalTime localTime0 = new LocalTime(13, 13, 13);
      Years years0 = Years.yearsBetween((ReadablePartial) localTime0, (ReadablePartial) localTime0);
      Hours hours0 = Hours.FIVE;
      Minutes minutes0 = hours0.toStandardMinutes();
      boolean boolean0 = years0.equals(minutes0);
      assertEquals(5, hours0.getHours());
      assertEquals(300, minutes0.getMinutes());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Hours hours0 = Hours.FIVE;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between((ReadablePartial) null, (ReadablePartial) null, hours0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight();
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(dateMidnight0, (ReadableInstant) null, durationFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Hours hours0 = Hours.FOUR;
      DurationFieldType durationFieldType0 = hours0.getFieldType();
      DateTime dateTime0 = new DateTime();
      int int0 = BaseSingleFieldPeriod.between(dateTime0, dateTime0, durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        Hours.hoursBetween((ReadableInstant) null, (ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Weeks weeks0 = Weeks.THREE;
      weeks0.toPeriod();
      assertEquals(3, weeks0.getWeeks());
      assertEquals(1, weeks0.size());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Weeks weeks0 = Weeks.THREE;
      weeks0.hashCode();
      assertEquals(3, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Weeks weeks0 = Weeks.ONE;
      weeks0.toMutablePeriod();
      assertEquals(1, weeks0.size());
      assertEquals(1, weeks0.getWeeks());
  }
}
