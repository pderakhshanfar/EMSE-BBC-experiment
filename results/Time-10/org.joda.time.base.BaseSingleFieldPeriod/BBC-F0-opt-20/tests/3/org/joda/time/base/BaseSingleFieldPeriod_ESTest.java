/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 01:53:50 GMT 2021
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableInterval;
import org.joda.time.Period;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSingleFieldPeriod_ESTest extends BaseSingleFieldPeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(70);
      minutes0.hashCode();
      assertEquals(70, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Hours hours0 = Hours.SIX;
      Minutes minutes0 = Minutes.standardMinutesIn(hours0);
      Minutes minutes1 = minutes0.multipliedBy(902);
      boolean boolean0 = minutes1.equals(minutes0);
      assertEquals(360, minutes0.getMinutes());
      assertFalse(minutes0.equals((Object)minutes1));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Weeks weeks0 = Weeks.THREE;
      // Undeclared exception!
      try { 
        weeks0.getValue(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Years years0 = Years.MAX_VALUE;
      // Undeclared exception!
      try { 
        years0.getFieldType(3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalTime localTime0 = LocalTime.now((DateTimeZone) fixedDateTimeZone0);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      MonthDay monthDay0 = new MonthDay((long) 1, (Chronology) ethiopicChronology0);
      // Undeclared exception!
      try { 
        Minutes.minutesBetween((ReadablePartial) monthDay0, (ReadablePartial) localTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Minutes minutes0 = Minutes.TWO;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(minutes0, 936L);
      assertEquals(128, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Days days0 = Days.FIVE;
      Hours hours0 = days0.toStandardHours();
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(hours0, (-1L));
      assertEquals((-432000000), int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Days days0 = Days.FIVE;
      Weeks weeks0 = days0.toStandardWeeks();
      int int0 = weeks0.getValue(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Hours hours0 = Hours.SIX;
      int int0 = hours0.getValue(0);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes((-1));
      int int0 = minutes0.getValue(0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes(2132);
      minutes0.getPeriodType();
      assertEquals(2132, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Weeks weeks0 = Weeks.TWO;
      DurationFieldType durationFieldType0 = weeks0.getFieldType();
      assertEquals("weeks", durationFieldType0.getName());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Hours hours0 = Hours.MIN_VALUE;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      int int0 = hours0.get(durationFieldType0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      Minutes minutes0 = Minutes.minutesBetween((ReadablePartial) monthDay0, (ReadablePartial) monthDay0);
      int int0 = BaseSingleFieldPeriod.between(monthDay0, monthDay0, minutes0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Days days0 = Days.days(2830);
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      MonthDay monthDay0 = new MonthDay((long) 2830, (Chronology) ethiopicChronology0);
      MonthDay monthDay1 = monthDay0.minusMonths(1);
      BaseSingleFieldPeriod.between(monthDay1, monthDay0, days0);
      assertEquals(2830, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Years years0 = Years.ZERO;
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalDateTime localDateTime1 = localDateTime0.withYear(0);
      int int0 = BaseSingleFieldPeriod.between(localDateTime0, localDateTime1, years0);
      assertEquals((-2014), int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Instant instant0 = new Instant(1440L);
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      int int0 = BaseSingleFieldPeriod.between(instant0, instant0, durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DateTime dateTime0 = DateTime.now();
      DateTime dateTime1 = dateTime0.minusWeeks(2267);
      Weeks weeks0 = Weeks.weeksBetween((ReadableInstant) dateTime1, (ReadableInstant) dateTime1);
      DurationFieldType durationFieldType0 = weeks0.getFieldType();
      int int0 = BaseSingleFieldPeriod.between(dateTime1, dateTime0, durationFieldType0);
      assertEquals(2267, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      DateMidnight dateMidnight1 = dateMidnight0.withYearOfCentury(27);
      DurationFieldType durationFieldType0 = DurationFieldType.months();
      int int0 = BaseSingleFieldPeriod.between(dateMidnight1, dateMidnight0, durationFieldType0);
      assertEquals((-156), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Days days0 = Days.FIVE;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(days0, 0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Weeks weeks0 = Weeks.MIN_VALUE;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(weeks0, 1994L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -651353114498696
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Hours hours0 = Hours.FOUR;
      // Undeclared exception!
      try { 
        hours0.compareTo((BaseSingleFieldPeriod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Years years0 = Years.ZERO;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      MonthDay monthDay0 = new MonthDay((-1L), (Chronology) buddhistChronology0);
      MonthDay monthDay1 = monthDay0.minusMonths(1);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(monthDay1, monthDay1, years0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 31 for dayOfMonth must be in the range [1,30]
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(localDateTime0, localDateTime0, (ReadablePeriod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime();
      LocalDateTime localDateTime1 = localDateTime0.minusYears(2216);
      MutableInterval mutableInterval0 = new MutableInterval();
      Seconds seconds0 = Seconds.secondsIn(mutableInterval0);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(localDateTime0, localDateTime1, seconds0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -69930172800
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateMidnight dateMidnight0 = DateMidnight.now((DateTimeZone) fixedDateTimeZone0);
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      DateMidnight dateMidnight1 = dateMidnight0.withFieldAdded(durationFieldType0, (-1480));
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      DateTime dateTime0 = dateMidnight1.toDateTime((Chronology) islamicChronology0);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(dateTime0, dateMidnight0, durationFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The subtrahend instant is below the supported minimum of 0001-01-01T00:00:00.000Z (IslamicChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Instant instant0 = new Instant(0L);
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(instant0, instant0, durationFieldType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      GJChronology gJChronology0 = GJChronology.getInstance();
      LocalDate localDate0 = LocalDate.now((Chronology) gJChronology0);
      DateMidnight dateMidnight0 = localDate0.toDateMidnight();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(dateMidnight0, dateMidnight0, (DurationFieldType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance((DateTimeZone) null);
      DateTime dateTime0 = new DateTime(100000000L, (Chronology) islamicChronology0);
      DateTime dateTime1 = dateTime0.withCenturyOfEra(1);
      Seconds seconds0 = Seconds.TWO;
      DurationFieldType durationFieldType0 = seconds0.getFieldType();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(dateTime1, dateTime0, durationFieldType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 39802492800
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Days days0 = Days.FIVE;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstance();
      MutableInterval mutableInterval0 = new MutableInterval(1, 1, islamicChronology0);
      mutableInterval0.setPeriodAfterStart(days0);
      assertEquals(432000001L, mutableInterval0.getEndMillis());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Days days0 = Days.FIVE;
      Weeks weeks0 = days0.toStandardWeeks();
      Minutes minutes0 = weeks0.toStandardMinutes();
      minutes0.getFieldType(0);
      assertEquals(5, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Minutes minutes0 = Minutes.THREE;
      int int0 = minutes0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Years years0 = Years.ZERO;
      Years years1 = Years.TWO;
      int int0 = years0.compareTo((BaseSingleFieldPeriod) years1);
      assertEquals((-1), int0);
      assertEquals(0, years0.getYears());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Years years0 = Years.ZERO;
      Years years1 = Years.TWO;
      int int0 = years1.compareTo((BaseSingleFieldPeriod) years0);
      assertEquals(1, int0);
      assertEquals(0, years0.getYears());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Hours hours0 = Hours.SEVEN;
      Months months0 = Months.THREE;
      // Undeclared exception!
      try { 
        hours0.compareTo((BaseSingleFieldPeriod) months0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class org.joda.time.Hours cannot be compared to class org.joda.time.Months
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Hours hours0 = Hours.FOUR;
      int int0 = hours0.compareTo((BaseSingleFieldPeriod) hours0);
      assertEquals(0, int0);
      assertEquals(4, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Hours hours0 = Hours.FOUR;
      Minutes minutes0 = hours0.toStandardMinutes();
      Minutes minutes1 = hours0.toStandardMinutes();
      boolean boolean0 = minutes1.equals(minutes0);
      assertTrue(boolean0);
      assertEquals(240, minutes1.getMinutes());
      assertEquals(4, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Years years0 = Years.MAX_VALUE;
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      Period period0 = new Period(1423L, (-512L), julianChronology0);
      boolean boolean0 = years0.equals(period0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Minutes minutes0 = Minutes.minutes((-1));
      boolean boolean0 = minutes0.equals((Object) null);
      assertEquals((-1), minutes0.getMinutes());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Minutes minutes0 = Minutes.MAX_VALUE;
      boolean boolean0 = minutes0.equals(minutes0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Hours hours0 = Hours.FOUR;
      Hours hours1 = Hours.EIGHT;
      boolean boolean0 = hours0.equals(hours1);
      assertEquals(8, hours1.getHours());
      assertFalse(hours1.equals((Object)hours0));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Years years0 = Years.MIN_VALUE;
      DurationFieldType durationFieldType0 = DurationFieldType.years();
      boolean boolean0 = years0.isSupported(durationFieldType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Years years0 = Years.MAX_VALUE;
      Days days0 = Days.FIVE;
      DurationFieldType durationFieldType0 = days0.getFieldType();
      boolean boolean0 = years0.isSupported(durationFieldType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Hours hours0 = Hours.FOUR;
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.hourOfHalfday();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      int int0 = hours0.get(durationFieldType0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Minutes minutes0 = Minutes.TWO;
      Days days0 = Days.FIVE;
      DurationFieldType durationFieldType0 = minutes0.getFieldType();
      int int0 = days0.get(durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Hours hours0 = Hours.FOUR;
      Minutes minutes0 = Minutes.standardMinutesIn(hours0);
      // Undeclared exception!
      try { 
        minutes0.getValue((-615));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -615
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Years years0 = Years.ONE;
      // Undeclared exception!
      try { 
        years0.getFieldType((-1245));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -1245
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Years years0 = Years.TWO;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(years0, (-2942L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot convert period to duration as years is not precise in the period P2Y
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Hours hours0 = Hours.FOUR;
      Weeks weeks0 = hours0.toStandardWeeks();
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(weeks0, 4046L);
      assertEquals(0, int0);
      assertEquals(4, hours0.getHours());
      assertEquals(1, weeks0.size());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      int int0 = BaseSingleFieldPeriod.standardPeriodIn((ReadablePeriod) null, (-2124L));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      LocalTime localTime0 = new LocalTime(localDateTime0, (Chronology) null);
      Days days0 = Days.SEVEN;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(localDateTime0, localTime0, days0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ISOChronology iSOChronology0 = ISOChronology.getInstance();
      LocalDate localDate0 = new LocalDate((Chronology) iSOChronology0);
      LocalTime localTime0 = new LocalTime();
      LocalDateTime localDateTime0 = localDate0.toLocalDateTime(localTime0);
      // Undeclared exception!
      try { 
        Weeks.weeksBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      // Undeclared exception!
      try { 
        Hours.hoursBetween((ReadablePartial) yearMonth0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        Years.yearsBetween((ReadablePartial) null, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      DateMidnight dateMidnight0 = new DateMidnight((-2124L), (Chronology) gregorianChronology0);
      // Undeclared exception!
      try { 
        Minutes.minutesBetween((ReadableInstant) dateMidnight0, (ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Hours hours0 = Hours.MAX_VALUE;
      DurationFieldType durationFieldType0 = hours0.getFieldType();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between((ReadableInstant) null, (ReadableInstant) null, durationFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Years years0 = Years.ZERO;
      years0.toMutablePeriod();
      assertEquals(0, years0.getYears());
      assertEquals(1, years0.size());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Hours hours0 = Hours.FOUR;
      hours0.toPeriod();
      assertEquals(1, hours0.size());
      assertEquals(4, hours0.getHours());
  }
}
