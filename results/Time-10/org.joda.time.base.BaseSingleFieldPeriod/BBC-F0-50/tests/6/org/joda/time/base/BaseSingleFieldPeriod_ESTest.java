/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 16:41:01 GMT 2021
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableInterval;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.IslamicChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSingleFieldPeriod_ESTest extends BaseSingleFieldPeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Days days0 = Days.MAX_VALUE;
      days0.hashCode();
      assertEquals(Integer.MAX_VALUE, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Days days0 = Days.SIX;
      Seconds seconds0 = Seconds.ONE;
      Days days1 = seconds0.toStandardDays();
      boolean boolean0 = days0.equals(days1);
      assertFalse(days1.equals((Object)days0));
      assertFalse(boolean0);
      assertEquals(0, days1.getDays());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Weeks weeks0 = Weeks.ONE;
      Minutes minutes0 = weeks0.toStandardMinutes();
      // Undeclared exception!
      try { 
        minutes0.getValue(17);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 17
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Hours hours0 = Hours.SIX;
      // Undeclared exception!
      try { 
        hours0.getFieldType((-4841));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -4841
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      Minutes minutes0 = Minutes.standardMinutesIn(seconds0);
      assertEquals((-35791394), minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      LocalTime localTime0 = new LocalTime((Chronology) gregorianChronology0);
      LocalDate localDate0 = LocalDate.now((Chronology) gregorianChronology0);
      // Undeclared exception!
      try { 
        Seconds.secondsBetween((ReadablePartial) localTime0, (ReadablePartial) localDate0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Instant instant0 = new Instant();
      Hours hours0 = Hours.hoursBetween((ReadableInstant) instant0, (ReadableInstant) instant0);
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(hours0, 1544);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Seconds seconds0 = Seconds.TWO;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(seconds0, 1L);
      assertEquals(2000, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Seconds seconds0 = Seconds.MAX_VALUE;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(seconds0, (-1773L));
      assertEquals(Integer.MAX_VALUE, seconds0.getSeconds());
      assertEquals((-1211214690), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Instant instant0 = new Instant();
      Hours hours0 = Hours.hoursBetween((ReadableInstant) instant0, (ReadableInstant) instant0);
      hours0.size();
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockDate mockDate0 = new MockDate(323L);
      MonthDay monthDay0 = MonthDay.fromDateFields(mockDate0);
      Days days0 = Days.daysBetween((ReadablePartial) monthDay0, (ReadablePartial) monthDay0);
      int int0 = days0.getValue(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Seconds seconds0 = Seconds.ONE;
      int int0 = seconds0.getValue(0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      int int0 = seconds0.getValue(0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Instant instant0 = new Instant();
      Hours hours0 = Hours.hoursBetween((ReadableInstant) instant0, (ReadableInstant) instant0);
      hours0.getPeriodType();
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Seconds seconds0 = Seconds.TWO;
      DurationFieldType durationFieldType0 = seconds0.getFieldType();
      assertEquals("seconds", durationFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Years years0 = Years.ONE;
      DurationFieldType durationFieldType0 = years0.getFieldType();
      int int0 = years0.get(durationFieldType0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHoursMinutes(0, 0);
      DateTime dateTime0 = new DateTime(dateTimeZone0);
      Months months0 = Months.monthsBetween((ReadableInstant) dateTime0, (ReadableInstant) dateTime0);
      LocalTime localTime0 = new LocalTime((Object) null);
      BaseSingleFieldPeriod.between(localTime0, localTime0, months0);
      assertEquals(0, months0.getMonths());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockDate mockDate0 = new MockDate(3085, 3085, 815, 844, 3085, 3085);
      LocalDate localDate0 = LocalDate.fromDateFields(mockDate0);
      LocalDate localDate1 = localDate0.minusYears(2424);
      Months months0 = Months.FOUR;
      int int0 = BaseSingleFieldPeriod.between(localDate1, localDate0, months0);
      assertEquals(29088, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(0L);
      Period period0 = new Period(localDateTime0, localDateTime0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance(dateTimeZone0);
      LocalDateTime localDateTime1 = LocalDateTime.now((Chronology) buddhistChronology0);
      int int0 = BaseSingleFieldPeriod.between(localDateTime1, localDateTime0, period0);
      assertEquals((-587), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((long) 0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2138);
      DateTime dateTime0 = DateTime.now(dateTimeZone0);
      Weeks weeks0 = Weeks.weeksBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      DurationFieldType durationFieldType0 = weeks0.getFieldType();
      int int0 = BaseSingleFieldPeriod.between(dateTime0, dateTime0, durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Minutes minutes0 = Minutes.TWO;
      Days days0 = minutes0.toStandardDays();
      DurationFieldType durationFieldType0 = days0.getFieldType();
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateTime dateTime0 = DateTime.now((Chronology) islamicChronology0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.weekyearOfCentury();
      DateTime dateTime1 = dateTime0.withField(dateTimeFieldType0, 1);
      int int0 = BaseSingleFieldPeriod.between(dateTime1, dateTime0, durationFieldType0);
      assertEquals(12404, int0);
      assertEquals(0, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockDate mockDate0 = new MockDate(576L);
      MonthDay monthDay0 = MonthDay.fromDateFields(mockDate0);
      Days days0 = Days.daysBetween((ReadablePartial) monthDay0, (ReadablePartial) monthDay0);
      DurationFieldType durationFieldType0 = days0.getFieldType(0);
      Instant instant0 = Instant.now();
      Days days1 = Days.MAX_VALUE;
      Duration duration0 = days1.toStandardDuration();
      Instant instant1 = instant0.withDurationAdded((ReadableDuration) duration0, 1);
      int int0 = BaseSingleFieldPeriod.between(instant1, instant0, durationFieldType0);
      assertEquals(185543979510081320L, instant1.getMillis());
      assertEquals((-2147483647), int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Period period0 = Period.ZERO;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(period0, 0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Weeks weeks0 = Weeks.MAX_VALUE;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(weeks0, (-1));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -1298798109705600000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Seconds seconds0 = Seconds.THREE;
      // Undeclared exception!
      try { 
        seconds0.compareTo((BaseSingleFieldPeriod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Seconds seconds0 = Seconds.MAX_VALUE;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance();
      YearMonth yearMonth0 = new YearMonth((-1991L), (Chronology) ethiopicChronology0);
      YearMonth yearMonth1 = yearMonth0.minusYears(2027);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(yearMonth1, yearMonth0, seconds0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The resulting instant is below the supported minimum of 0001-01-01T00:00:00.000Z (EthiopicChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay(109L, (Chronology) null);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(localTime0, localTime0, (ReadablePeriod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Seconds seconds0 = Seconds.MAX_VALUE;
      Hours hours0 = Hours.standardHoursIn(seconds0);
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis((-4841));
      LocalDateTime localDateTime0 = new LocalDateTime((-1736L), dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.withPeriodAdded(seconds0, (-4841));
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(localDateTime1, localDateTime0, hours0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 2887768981
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDate localDate0 = new LocalDate((long) 1, (DateTimeZone) fixedDateTimeZone0);
      DateMidnight dateMidnight0 = localDate0.toDateMidnight();
      Instant instant0 = dateMidnight0.toInstant();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(instant0, instant0, (DurationFieldType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Instant instant0 = Instant.now();
      Instant instant1 = instant0.withMillis((-1664L));
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.millisOfSecond();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(instant1, instant0, durationFieldType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 1392409282984
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      Seconds seconds1 = Seconds.parseSeconds((String) null);
      int int0 = seconds0.compareTo((BaseSingleFieldPeriod) seconds1);
      assertEquals((-1), int0);
      assertEquals(0, seconds1.getSeconds());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Months months0 = Months.SIX;
      Months months1 = Months.TWO;
      int int0 = months0.compareTo((BaseSingleFieldPeriod) months1);
      assertEquals(1, int0);
      assertEquals(2, months1.getMonths());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Seconds seconds0 = Seconds.ONE;
      MutableInterval mutableInterval0 = new MutableInterval();
      Years years0 = Years.yearsIn(mutableInterval0);
      // Undeclared exception!
      try { 
        seconds0.compareTo((BaseSingleFieldPeriod) years0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class org.joda.time.Seconds cannot be compared to class org.joda.time.Years
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Seconds seconds0 = Seconds.THREE;
      int int0 = seconds0.compareTo((BaseSingleFieldPeriod) seconds0);
      assertEquals(0, int0);
      assertEquals(3, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Months months0 = Months.SEVEN;
      Period period0 = new Period(months0);
      boolean boolean0 = months0.equals(period0);
      assertTrue(boolean0);
      assertEquals(7, months0.getMonths());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Hours hours0 = Hours.FOUR;
      Minutes minutes0 = hours0.toStandardMinutes();
      Weeks weeks0 = Weeks.MAX_VALUE;
      boolean boolean0 = minutes0.equals(weeks0);
      assertFalse(boolean0);
      assertEquals(240, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Months months0 = Months.TWO;
      Months months1 = Months.ONE;
      boolean boolean0 = months1.equals(months0);
      assertEquals(1, months1.getMonths());
      assertFalse(boolean0);
      assertFalse(months0.equals((Object)months1));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Months months0 = Months.TEN;
      boolean boolean0 = months0.equals(months0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Seconds seconds0 = Seconds.THREE;
      Object object0 = new Object();
      boolean boolean0 = seconds0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Years years0 = Years.ONE;
      DurationFieldType durationFieldType0 = years0.getFieldType();
      boolean boolean0 = years0.isSupported(durationFieldType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Months months0 = Months.ELEVEN;
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      boolean boolean0 = months0.isSupported(durationFieldType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      Minutes minutes0 = seconds0.toStandardMinutes();
      DurationFieldType durationFieldType0 = minutes0.getFieldType();
      int int0 = minutes0.get(durationFieldType0);
      assertEquals((-35791394), int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Seconds seconds0 = Seconds.TWO;
      DurationFieldType durationFieldType0 = seconds0.getFieldType();
      Minutes minutes0 = Minutes.minutes(1544);
      Days days0 = minutes0.toStandardDays();
      int int0 = days0.get(durationFieldType0);
      assertEquals(0, int0);
      assertEquals(1544, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Seconds seconds0 = Seconds.ZERO;
      // Undeclared exception!
      try { 
        seconds0.getValue((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockDate mockDate0 = new MockDate(323L);
      MonthDay monthDay0 = MonthDay.fromDateFields(mockDate0);
      Days days0 = Days.daysBetween((ReadablePartial) monthDay0, (ReadablePartial) monthDay0);
      // Undeclared exception!
      try { 
        days0.getFieldType(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Months months0 = Months.TEN;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(months0, 3741L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot convert period to duration as months is not precise in the period P10M
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Hours hours0 = Hours.standardHoursIn((ReadablePeriod) null);
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      YearMonth yearMonth0 = new YearMonth();
      Partial partial0 = new Partial(yearMonth0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.minuteOfDay();
      Partial partial1 = partial0.with(dateTimeFieldType0, 141);
      // Undeclared exception!
      try { 
        Seconds.secondsBetween((ReadablePartial) partial1, (ReadablePartial) partial1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must be contiguous
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      DateTimeZone dateTimeZone0 = buddhistChronology0.getZone();
      YearMonth yearMonth0 = YearMonth.now(dateTimeZone0);
      MockDate mockDate0 = new MockDate(2277L);
      MonthDay monthDay0 = MonthDay.fromDateFields(mockDate0);
      // Undeclared exception!
      try { 
        Days.daysBetween((ReadablePartial) yearMonth0, (ReadablePartial) monthDay0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      MonthDay monthDay0 = MonthDay.fromDateFields(mockDate0);
      CopticChronology copticChronology0 = CopticChronology.getInstance();
      LocalTime localTime0 = LocalTime.fromMillisOfDay(0L, (Chronology) copticChronology0);
      // Undeclared exception!
      try { 
        Days.daysBetween((ReadablePartial) monthDay0, (ReadablePartial) localTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay();
      // Undeclared exception!
      try { 
        Hours.hoursBetween((ReadablePartial) monthDay0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Duration duration0 = Duration.standardDays(0L);
      Period period0 = new Period(duration0, (ReadableInstant) null);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between((ReadablePartial) null, (ReadablePartial) null, period0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Instant instant0 = Instant.now();
      // Undeclared exception!
      try { 
        Months.monthsBetween((ReadableInstant) instant0, (ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.era();
      Instant instant0 = Instant.now();
      DurationFieldType durationFieldType0 = dateTimeFieldType0.getDurationType();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(instant0, instant0, durationFieldType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.halfdays();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between((ReadableInstant) null, (ReadableInstant) null, durationFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Days days0 = Days.FOUR;
      Minutes minutes0 = days0.toStandardMinutes();
      minutes0.toMutablePeriod();
      assertEquals(1, minutes0.size());
      assertEquals(5760, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Minutes minutes0 = Minutes.TWO;
      IslamicChronology islamicChronology0 = IslamicChronology.getInstanceUTC();
      DateTime dateTime0 = DateTime.now((Chronology) islamicChronology0);
      Interval interval0 = new Interval(minutes0, dateTime0);
      Period period0 = interval0.toPeriod();
      Weeks weeks0 = period0.toStandardWeeks();
      weeks0.toPeriod();
      assertEquals(2, minutes0.getMinutes());
      assertEquals(1392409161320L, interval0.getStartMillis());
  }
}
