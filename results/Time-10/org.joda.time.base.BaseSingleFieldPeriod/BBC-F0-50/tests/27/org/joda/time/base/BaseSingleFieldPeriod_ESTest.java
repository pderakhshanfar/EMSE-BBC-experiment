/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 13:30:43 GMT 2021
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateTime;
import org.joda.time.DateTimeFieldType;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSingleFieldPeriod_ESTest extends BaseSingleFieldPeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Months months0 = Months.ONE;
      months0.hashCode();
      assertEquals(1, months0.getMonths());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Months months0 = Months.TWO;
      Months months1 = Months.ZERO;
      boolean boolean0 = months0.equals(months1);
      assertFalse(months1.equals((Object)months0));
      assertFalse(boolean0);
      assertEquals(2, months0.getMonths());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Minutes minutes0 = Minutes.MAX_VALUE;
      // Undeclared exception!
      try { 
        minutes0.getValue((-1272));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -1272
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Months months0 = Months.TEN;
      // Undeclared exception!
      try { 
        months0.getFieldType(2263);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 2263
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      LocalTime localTime0 = LocalTime.MIDNIGHT;
      // Undeclared exception!
      try { 
        Years.yearsBetween((ReadablePartial) localTime0, (ReadablePartial) yearMonth0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Hours hours0 = Hours.FIVE;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(hours0, 100000000000000L);
      assertEquals(5, hours0.getHours());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds((-1006));
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(seconds0, (-4010L));
      assertEquals(250, int0);
      assertEquals((-1006), seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds((-284));
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(seconds0, 555L);
      assertEquals((-511), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Period period0 = Period.months(0);
      Hours hours0 = period0.toStandardHours();
      int int0 = hours0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Seconds seconds0 = Seconds.ZERO;
      int int0 = seconds0.getValue(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Days days0 = Days.ONE;
      int int0 = days0.getValue(0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds((-284));
      Minutes minutes0 = seconds0.toStandardMinutes();
      int int0 = minutes0.getValue(0);
      assertEquals((-284), seconds0.getSeconds());
      assertEquals((-4), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Years years0 = Years.ZERO;
      PeriodType periodType0 = years0.getPeriodType();
      assertEquals(1, periodType0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Days days0 = Days.ONE;
      DurationFieldType durationFieldType0 = days0.getFieldType(0);
      assertEquals("days", durationFieldType0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Months months0 = Months.FOUR;
      DurationFieldType durationFieldType0 = months0.getFieldType();
      int int0 = months0.get(durationFieldType0);
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Years years0 = Years.MIN_VALUE;
      DurationFieldType durationFieldType0 = years0.getFieldType();
      int int0 = years0.get(durationFieldType0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Years years0 = Years.TWO;
      YearMonth yearMonth0 = YearMonth.now();
      int int0 = BaseSingleFieldPeriod.between(yearMonth0, yearMonth0, years0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Seconds seconds0 = Seconds.MIN_VALUE;
      Hours hours0 = seconds0.toStandardHours();
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      LocalDate localDate0 = new LocalDate((Chronology) iSOChronology0);
      LocalDate localDate1 = localDate0.minusDays(1);
      BaseSingleFieldPeriod.between(localDate1, localDate0, hours0);
      assertEquals((-596523), hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MonthDay monthDay0 = MonthDay.now();
      Seconds seconds0 = Seconds.THREE;
      MonthDay monthDay1 = monthDay0.plusMonths(1);
      int int0 = BaseSingleFieldPeriod.between(monthDay1, monthDay0, seconds0);
      assertEquals((-2419200), int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateTime dateTime0 = localDateTime0.toDateTime((DateTimeZone) fixedDateTimeZone0);
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      int int0 = BaseSingleFieldPeriod.between(dateTime0, dateTime0, durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Minutes minutes0 = Minutes.MIN_VALUE;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) null);
      DateTime dateTime0 = localDateTime0.toDateTime((DateTimeZone) fixedDateTimeZone0);
      DateTime dateTime1 = dateTime0.minus((ReadablePeriod) minutes0);
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      int int0 = BaseSingleFieldPeriod.between(dateTime0, dateTime1, durationFieldType0);
      assertEquals(1491308, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LocalDateTime localDateTime0 = LocalDateTime.now();
      DateTime dateTime0 = localDateTime0.toDateTime((DateTimeZone) null);
      DateTime dateTime1 = dateTime0.minusDays((-279));
      DurationFieldType durationFieldType0 = DurationFieldType.seconds();
      int int0 = BaseSingleFieldPeriod.between(dateTime1, dateTime0, durationFieldType0);
      assertEquals((-24105600), int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Minutes minutes0 = Minutes.MAX_VALUE;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(minutes0, 0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Minutes minutes0 = Minutes.MAX_VALUE;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(minutes0, 747L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 172488646345
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Months months0 = Months.ONE;
      // Undeclared exception!
      try { 
        months0.compareTo((BaseSingleFieldPeriod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      LocalDateTime localDateTime0 = new LocalDateTime((-2165L), (Chronology) buddhistChronology0);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(localDateTime0, localDateTime0, (ReadablePeriod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Seconds seconds0 = Seconds.THREE;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(3414);
      LocalDateTime localDateTime0 = LocalDateTime.now(dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.plusMonths((-977));
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(localDateTime1, localDateTime0, seconds0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 2569363200
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      DateTime dateTime0 = new DateTime((long) 1, (DateTimeZone) fixedDateTimeZone0);
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(dateTime0, dateTime0, durationFieldType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Instant instant0 = new Instant();
      DateTime dateTime0 = instant0.toDateTime();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(dateTime0, instant0, (DurationFieldType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Minutes minutes0 = Minutes.MAX_VALUE;
      Weeks weeks0 = Weeks.MAX_VALUE;
      // Undeclared exception!
      try { 
        weeks0.compareTo((BaseSingleFieldPeriod) minutes0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class org.joda.time.Weeks cannot be compared to class org.joda.time.Minutes
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Minutes minutes0 = Minutes.MIN_VALUE;
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) null);
      DateTime dateTime0 = localDateTime0.toDateTime((DateTimeZone) fixedDateTimeZone0);
      DateTime dateTime1 = dateTime0.minus((ReadablePeriod) minutes0);
      DurationFieldType durationFieldType0 = minutes0.getFieldType();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(dateTime0, dateTime1, durationFieldType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 2147483648
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Years years0 = Years.years((-210));
      Years years1 = years0.plus((-12));
      int int0 = years1.compareTo((BaseSingleFieldPeriod) years0);
      assertEquals((-1), int0);
      assertEquals((-222), years1.getYears());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Years years0 = Years.ZERO;
      Years years1 = Years.years(7);
      int int0 = years1.compareTo((BaseSingleFieldPeriod) years0);
      assertEquals(1, int0);
      assertEquals(7, years1.getYears());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Years years0 = Years.ZERO;
      int int0 = years0.compareTo((BaseSingleFieldPeriod) years0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Years years0 = Years.ZERO;
      Years years1 = Years.years(7);
      Years years2 = years0.plus(7);
      boolean boolean0 = years2.equals(years1);
      assertTrue(boolean0);
      assertFalse(years0.equals((Object)years1));
      assertFalse(years2.equals((Object)years0));
      assertEquals(7, years2.getYears());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Minutes minutes0 = Minutes.TWO;
      Months months0 = Months.TEN;
      boolean boolean0 = months0.equals(minutes0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Years years0 = Years.ZERO;
      Years years1 = Years.years(7);
      boolean boolean0 = years0.equals(years1);
      assertFalse(boolean0);
      assertEquals(7, years1.getYears());
      assertFalse(years1.equals((Object)years0));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Years years0 = Years.ZERO;
      boolean boolean0 = years0.equals(years0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Years years0 = Years.ZERO;
      YearMonth yearMonth0 = YearMonth.now();
      boolean boolean0 = years0.equals(yearMonth0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Years years0 = Years.ZERO;
      DurationFieldType durationFieldType0 = years0.getFieldType();
      boolean boolean0 = years0.isSupported(durationFieldType0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Years years0 = Years.ZERO;
      DurationFieldType durationFieldType0 = DurationFieldType.hours();
      boolean boolean0 = years0.isSupported(durationFieldType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Years years0 = Years.ZERO;
      DurationFieldType durationFieldType0 = years0.getFieldType();
      int int0 = years0.get(durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Weeks weeks0 = Weeks.MAX_VALUE;
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      int int0 = weeks0.get(durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Duration duration0 = Duration.millis(0);
      Minutes minutes0 = duration0.toStandardMinutes();
      // Undeclared exception!
      try { 
        minutes0.getValue(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Days days0 = Days.ONE;
      // Undeclared exception!
      try { 
        days0.getFieldType((-750));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -750
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Months months0 = Months.TWELVE;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(months0, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot convert period to duration as months is not precise in the period P12M
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Seconds seconds0 = Seconds.standardSecondsIn((ReadablePeriod) null);
      assertEquals(0, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Years years0 = Years.ZERO;
      assertEquals(0, years0.getYears());
      
      Seconds seconds0 = Seconds.standardSecondsIn(years0);
      assertEquals(0, seconds0.getSeconds());
      assertEquals(1, seconds0.size());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LocalTime localTime0 = LocalTime.fromMillisOfDay(829L);
      Partial partial0 = new Partial(localTime0);
      DateTimeFieldType dateTimeFieldType0 = DateTimeFieldType.yearOfCentury();
      Partial partial1 = partial0.with(dateTimeFieldType0, 5);
      // Undeclared exception!
      try { 
        Seconds.secondsBetween((ReadablePartial) partial1, (ReadablePartial) partial1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must be contiguous
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      MonthDay monthDay0 = MonthDay.now();
      // Undeclared exception!
      try { 
        Years.yearsBetween((ReadablePartial) yearMonth0, (ReadablePartial) monthDay0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      LocalDateTime localDateTime0 = LocalDateTime.now();
      // Undeclared exception!
      try { 
        Weeks.weeksBetween((ReadablePartial) yearMonth0, (ReadablePartial) localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      // Undeclared exception!
      try { 
        Years.yearsBetween((ReadablePartial) yearMonth0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Months months0 = Months.FOUR;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between((ReadablePartial) null, (ReadablePartial) null, months0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Instant instant0 = Instant.now();
      DateTime dateTime0 = instant0.toDateTime();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(dateTime0, (ReadableInstant) null, (DurationFieldType) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between((ReadableInstant) null, (ReadableInstant) null, durationFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Minutes minutes0 = Minutes.MIN_VALUE;
      minutes0.toMutablePeriod();
      assertEquals(Integer.MIN_VALUE, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Minutes minutes0 = Minutes.TWO;
      minutes0.toPeriod();
      assertEquals(2, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
  }
}
