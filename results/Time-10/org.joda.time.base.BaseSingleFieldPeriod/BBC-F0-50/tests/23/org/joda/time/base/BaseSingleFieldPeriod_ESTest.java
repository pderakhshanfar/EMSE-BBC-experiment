/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 13:30:27 GMT 2021
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.Minutes;
import org.joda.time.MonthDay;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutableInterval;
import org.joda.time.MutablePeriod;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadableInterval;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.YearMonth;
import org.joda.time.Years;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.ISOChronology;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSingleFieldPeriod_ESTest extends BaseSingleFieldPeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Days days0 = Days.FIVE;
      days0.hashCode();
      assertEquals(5, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Hours hours0 = Hours.TWO;
      Minutes minutes0 = hours0.toStandardMinutes();
      Minutes minutes1 = minutes0.multipliedBy((-95));
      boolean boolean0 = minutes1.equals(minutes0);
      assertFalse(boolean0);
      assertEquals((-11400), minutes1.getMinutes());
      assertEquals(120, minutes0.getMinutes());
      assertFalse(minutes0.equals((Object)minutes1));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Minutes minutes0 = Minutes.MAX_VALUE;
      // Undeclared exception!
      try { 
        minutes0.getValue((-1610));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -1610
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      Days days0 = Days.daysBetween((ReadableInstant) mutableDateTime0, (ReadableInstant) mutableDateTime0);
      // Undeclared exception!
      try { 
        days0.getFieldType((-936));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -936
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.getDefault();
      ISOChronology iSOChronology0 = ISOChronology.getInstance(dateTimeZone0);
      LocalDateTime localDateTime0 = LocalDateTime.now((Chronology) iSOChronology0);
      MockDate mockDate0 = new MockDate((-1259), (-64), 3600, 2712, (-2999), (-64));
      YearMonth yearMonth0 = YearMonth.fromDateFields(mockDate0);
      // Undeclared exception!
      try { 
        Months.monthsBetween((ReadablePartial) localDateTime0, (ReadablePartial) yearMonth0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = BaseSingleFieldPeriod.standardPeriodIn((ReadablePeriod) null, 1073741823L);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Days days0 = Days.THREE;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(days0, 3208L);
      assertEquals(80798, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Minutes minutes0 = Minutes.ONE;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(minutes0, (-419L));
      assertEquals((-143), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Days days0 = Days.daysIn((ReadableInterval) null);
      int int0 = days0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Minutes minutes0 = Minutes.minutesBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      Days days0 = minutes0.toStandardDays();
      int int0 = days0.getValue(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Days days0 = Days.ONE;
      int int0 = days0.getValue(0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Weeks weeks0 = Weeks.MIN_VALUE;
      int int0 = weeks0.getValue(0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Hours hours0 = Hours.MIN_VALUE;
      PeriodType periodType0 = hours0.getPeriodType();
      assertEquals("Hours", periodType0.getName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Hours hours0 = Hours.FOUR;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Period period0 = new Period(hours0, buddhistChronology0);
      Minutes minutes0 = Minutes.standardMinutesIn(period0);
      minutes0.getFieldType(0);
      assertEquals(4, hours0.getHours());
      assertEquals(240, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Minutes minutes0 = Minutes.ONE;
      DurationFieldType durationFieldType0 = minutes0.getFieldType();
      int int0 = minutes0.get(durationFieldType0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Minutes minutes0 = Minutes.minutesBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      int int0 = BaseSingleFieldPeriod.between(yearMonth0, yearMonth0, minutes0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Weeks weeks0 = Weeks.ONE;
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(176);
      LocalDateTime localDateTime0 = new LocalDateTime(dateTimeZone0);
      LocalDateTime localDateTime1 = localDateTime0.withPeriodAdded(weeks0, (-1498));
      LocalDateTime localDateTime2 = localDateTime1.minusHours((-101));
      int int0 = BaseSingleFieldPeriod.between(localDateTime2, localDateTime0, weeks0);
      assertEquals(1497, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Days days0 = Days.ZERO;
      MonthDay monthDay0 = new MonthDay((long) (-4017));
      LocalDate localDate0 = monthDay0.toLocalDate(1410);
      LocalDate localDate1 = localDate0.minusYears(2773);
      PeriodType periodType0 = days0.getPeriodType();
      MutablePeriod mutablePeriod0 = new MutablePeriod(periodType0);
      int int0 = BaseSingleFieldPeriod.between(localDate0, localDate1, mutablePeriod0);
      assertEquals((-1012817), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(115);
      DateMidnight dateMidnight0 = new DateMidnight(dateTimeZone0);
      DurationFieldType durationFieldType0 = DurationFieldType.weekyears();
      int int0 = BaseSingleFieldPeriod.between(dateMidnight0, dateMidnight0, durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((long) 0);
      DateMidnight dateMidnight1 = dateMidnight0.withWeekyear(0);
      Instant instant0 = dateMidnight1.toInstant();
      DurationFieldType durationFieldType0 = DurationFieldType.days();
      int int0 = BaseSingleFieldPeriod.between(instant0, dateMidnight0, durationFieldType0);
      assertEquals(719523, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((-494L));
      DateMidnight dateMidnight1 = dateMidnight0.plusDays(379);
      Seconds seconds0 = Seconds.ONE;
      DurationFieldType durationFieldType0 = seconds0.getFieldType();
      int int0 = BaseSingleFieldPeriod.between(dateMidnight1, dateMidnight0, durationFieldType0);
      assertEquals((-32745600), int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DateMidnight dateMidnight0 = DateMidnight.now();
      Days days0 = Days.daysBetween((ReadableInstant) dateMidnight0, (ReadableInstant) dateMidnight0);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(days0, 0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Days days0 = Days.MIN_VALUE;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(days0, 3208L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -57837464833915
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Hours hours0 = Hours.THREE;
      // Undeclared exception!
      try { 
        hours0.compareTo((BaseSingleFieldPeriod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MonthDay monthDay0 = new MonthDay((long) (-4017));
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(monthDay0, monthDay0, (ReadablePeriod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      DateMidnight dateMidnight0 = new DateMidnight(1846L);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(dateMidnight0, dateMidnight0, durationFieldType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight((-494L));
      DateMidnight dateMidnight1 = dateMidnight0.withYear((-2746));
      Seconds seconds0 = Seconds.ONE;
      DurationFieldType durationFieldType0 = seconds0.getFieldType();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(dateMidnight1, dateMidnight0, durationFieldType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: 148790995200
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Minutes minutes0 = Minutes.TWO;
      Minutes minutes1 = Minutes.ONE;
      int int0 = minutes1.compareTo((BaseSingleFieldPeriod) minutes0);
      assertEquals(1, minutes1.getMinutes());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Hours hours0 = Hours.TWO;
      Minutes minutes0 = hours0.toStandardMinutes();
      Minutes minutes1 = Minutes.MIN_VALUE;
      int int0 = minutes0.compareTo((BaseSingleFieldPeriod) minutes1);
      assertEquals(2, hours0.getHours());
      assertEquals(120, minutes0.getMinutes());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Hours hours0 = Hours.TWO;
      Minutes minutes0 = hours0.toStandardMinutes();
      Weeks weeks0 = Weeks.standardWeeksIn(minutes0);
      // Undeclared exception!
      try { 
        weeks0.compareTo((BaseSingleFieldPeriod) hours0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class org.joda.time.Weeks cannot be compared to class org.joda.time.Hours
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Days days0 = Days.ZERO;
      Weeks weeks0 = Weeks.standardWeeksIn(days0);
      int int0 = weeks0.compareTo((BaseSingleFieldPeriod) weeks0);
      assertEquals(0, int0);
      assertEquals(0, weeks0.getWeeks());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Period period0 = Period.days((-1));
      Minutes minutes0 = Minutes.standardMinutesIn(period0);
      Hours hours0 = period0.toStandardHours();
      Minutes minutes1 = hours0.toStandardMinutes();
      boolean boolean0 = minutes0.equals(minutes1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Minutes minutes0 = Minutes.ONE;
      Minutes minutes1 = minutes0.multipliedBy(0);
      boolean boolean0 = minutes0.equals(minutes1);
      assertFalse(boolean0);
      assertEquals(1, minutes0.getMinutes());
      assertFalse(minutes1.equals((Object)minutes0));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Minutes minutes0 = Minutes.minutesBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      boolean boolean0 = minutes0.equals(yearMonth0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Minutes minutes0 = Minutes.ONE;
      boolean boolean0 = minutes0.equals(minutes0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Days days0 = Days.ZERO;
      Minutes minutes0 = Minutes.minutes((-4017));
      boolean boolean0 = minutes0.equals(days0);
      assertFalse(boolean0);
      assertEquals((-4017), minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Hours hours0 = Hours.FOUR;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Period period0 = new Period(hours0, buddhistChronology0);
      Minutes minutes0 = Minutes.standardMinutesIn(period0);
      DurationFieldType durationFieldType0 = minutes0.getFieldType();
      boolean boolean0 = minutes0.isSupported(durationFieldType0);
      assertEquals(4, hours0.getHours());
      assertTrue(boolean0);
      assertEquals(240, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Minutes minutes0 = Minutes.MAX_VALUE;
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      boolean boolean0 = minutes0.isSupported(durationFieldType0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Weeks weeks0 = Weeks.MIN_VALUE;
      DurationFieldType durationFieldType0 = DurationFieldType.weeks();
      int int0 = weeks0.get(durationFieldType0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Hours hours0 = Hours.FOUR;
      Minutes minutes0 = hours0.toStandardMinutes();
      Months months0 = Months.months((-476));
      DurationFieldType durationFieldType0 = months0.getFieldType();
      int int0 = minutes0.get(durationFieldType0);
      assertEquals((-476), months0.getMonths());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Days days0 = Days.FIVE;
      // Undeclared exception!
      try { 
        days0.getValue(28265625);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 28265625
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((Object) null);
      Hours hours0 = Hours.hoursIn(mutableInterval0);
      // Undeclared exception!
      try { 
        hours0.getFieldType(373);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 373
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Years years0 = Years.MIN_VALUE;
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(years0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot convert period to duration as years is not precise in the period P-2147483648Y
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      MonthDay monthDay0 = new MonthDay((long) 1);
      // Undeclared exception!
      try { 
        Minutes.minutesBetween((ReadablePartial) yearMonth0, (ReadablePartial) monthDay0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LocalDate localDate0 = new LocalDate((long) 0);
      LocalDateTime localDateTime0 = LocalDateTime.now();
      // Undeclared exception!
      try { 
        Years.yearsBetween((ReadablePartial) localDate0, (ReadablePartial) localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      // Undeclared exception!
      try { 
        Seconds.secondsBetween((ReadablePartial) yearMonth0, (ReadablePartial) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MutableDateTime mutableDateTime0 = new MutableDateTime();
      Days days0 = Days.daysBetween((ReadableInstant) mutableDateTime0, (ReadableInstant) mutableDateTime0);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between((ReadablePartial) null, (ReadablePartial) null, days0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Instant instant0 = new Instant();
      // Undeclared exception!
      try { 
        Days.daysBetween((ReadableInstant) instant0, (ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(27);
      DateMidnight dateMidnight0 = new DateMidnight(0L, dateTimeZone0);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(dateMidnight0, dateMidnight0, (DurationFieldType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.minutes();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between((ReadableInstant) null, (ReadableInstant) null, durationFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      YearMonth yearMonth0 = YearMonth.now();
      Minutes minutes0 = Minutes.minutesBetween((ReadablePartial) yearMonth0, (ReadablePartial) yearMonth0);
      minutes0.toMutablePeriod();
      assertEquals(0, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Hours hours0 = Hours.TWO;
      Minutes minutes0 = hours0.toStandardMinutes();
      minutes0.toPeriod();
      assertEquals(1, minutes0.size());
      assertEquals(120, minutes0.getMinutes());
      assertEquals(2, hours0.getHours());
  }
}
