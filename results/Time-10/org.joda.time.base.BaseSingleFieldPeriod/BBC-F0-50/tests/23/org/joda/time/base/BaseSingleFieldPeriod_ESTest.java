/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 16:48:55 GMT 2021
 */

package org.joda.time.base;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.joda.time.Chronology;
import org.joda.time.DateMidnight;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.joda.time.Days;
import org.joda.time.Duration;
import org.joda.time.DurationFieldType;
import org.joda.time.Hours;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.LocalDate;
import org.joda.time.LocalDateTime;
import org.joda.time.LocalTime;
import org.joda.time.Minutes;
import org.joda.time.Months;
import org.joda.time.MutableDateTime;
import org.joda.time.MutableInterval;
import org.joda.time.MutablePeriod;
import org.joda.time.Partial;
import org.joda.time.Period;
import org.joda.time.PeriodType;
import org.joda.time.ReadableDuration;
import org.joda.time.ReadableInstant;
import org.joda.time.ReadablePartial;
import org.joda.time.ReadablePeriod;
import org.joda.time.Seconds;
import org.joda.time.Weeks;
import org.joda.time.base.BaseSingleFieldPeriod;
import org.joda.time.chrono.BuddhistChronology;
import org.joda.time.chrono.CopticChronology;
import org.joda.time.chrono.EthiopicChronology;
import org.joda.time.chrono.GJChronology;
import org.joda.time.chrono.GregorianChronology;
import org.joda.time.chrono.ISOChronology;
import org.joda.time.chrono.JulianChronology;
import org.joda.time.chrono.StrictChronology;
import org.joda.time.chrono.ZonedChronology;
import org.joda.time.tz.FixedDateTimeZone;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class BaseSingleFieldPeriod_ESTest extends BaseSingleFieldPeriod_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Days days0 = Days.FIVE;
      days0.hashCode();
      assertEquals(5, days0.getDays());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Minutes minutes0 = Minutes.THREE;
      Minutes minutes1 = Minutes.TWO;
      boolean boolean0 = minutes0.equals(minutes1);
      assertFalse(boolean0);
      assertEquals(2, minutes1.getMinutes());
      assertFalse(minutes1.equals((Object)minutes0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Minutes minutes0 = Minutes.MAX_VALUE;
      // Undeclared exception!
      try { 
        minutes0.getValue((-1610));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -1610
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((Object) null);
      Hours hours0 = Hours.hoursIn(mutableInterval0);
      // Undeclared exception!
      try { 
        hours0.getFieldType((-1530));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // -1530
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((Object) null);
      Hours hours0 = Hours.hoursIn(mutableInterval0);
      Weeks weeks0 = Weeks.standardWeeksIn(hours0);
      Partial partial0 = new Partial();
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      StrictChronology strictChronology0 = StrictChronology.getInstance(julianChronology0);
      LocalDate localDate0 = new LocalDate((Chronology) strictChronology0);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(partial0, localDate0, weeks0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = BaseSingleFieldPeriod.standardPeriodIn((ReadablePeriod) null, 1073741823L);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Hours hours0 = Hours.SIX;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(hours0, 1667L);
      assertEquals(12957, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Minutes minutes0 = Minutes.THREE;
      int int0 = BaseSingleFieldPeriod.standardPeriodIn(minutes0, (-70L));
      assertEquals((-2571), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Minutes minutes0 = Minutes.THREE;
      int int0 = minutes0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Days days0 = Days.days(0);
      int int0 = days0.getValue(0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Minutes minutes0 = Minutes.TWO;
      int int0 = minutes0.getValue(0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Minutes minutes0 = Minutes.TWO;
      Minutes minutes1 = minutes0.minus(1849);
      int int0 = minutes1.getValue(0);
      assertEquals((-1847), int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((Object) null);
      Hours hours0 = Hours.hoursIn(mutableInterval0);
      hours0.getPeriodType();
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((Object) null);
      Hours hours0 = Hours.hoursIn(mutableInterval0);
      hours0.getFieldType(0);
      assertEquals(0, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Days days0 = Days.TWO;
      DurationFieldType durationFieldType0 = days0.getFieldType();
      int int0 = days0.get(durationFieldType0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(1805L);
      Period period0 = Period.months(77);
      int int0 = BaseSingleFieldPeriod.between(localDateTime0, localDateTime0, period0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Minutes minutes0 = Minutes.ZERO;
      DateTimeZone dateTimeZone0 = DateTimeZone.forID((String) null);
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance(dateTimeZone0);
      DateMidnight dateMidnight0 = DateMidnight.now((Chronology) ethiopicChronology0);
      LocalDate localDate0 = dateMidnight0.toLocalDate();
      LocalDate localDate1 = localDate0.minusDays(1475);
      int int0 = BaseSingleFieldPeriod.between(localDate1, localDate0, minutes0);
      assertEquals(2124000, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(1805L);
      LocalDateTime localDateTime1 = localDateTime0.minusDays((-873));
      Period period0 = Period.months(77);
      int int0 = BaseSingleFieldPeriod.between(localDateTime1, localDateTime0, period0);
      assertEquals((-2), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Seconds seconds0 = Seconds.ONE;
      DurationFieldType durationFieldType0 = seconds0.getFieldType();
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      DateMidnight dateMidnight1 = DateMidnight.now();
      int int0 = BaseSingleFieldPeriod.between(dateMidnight0, dateMidnight1, durationFieldType0);
      assertEquals(1392336000, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Weeks weeks0 = Weeks.ONE;
      Days days0 = weeks0.toStandardDays();
      Seconds seconds0 = Seconds.THREE;
      DurationFieldType durationFieldType0 = seconds0.getFieldType();
      DateMidnight dateMidnight0 = new DateMidnight(1798L);
      DateMidnight dateMidnight1 = dateMidnight0.minus((ReadablePeriod) days0);
      DateTime dateTime0 = dateMidnight1.toDateTime();
      int int0 = BaseSingleFieldPeriod.between(dateMidnight0, dateTime0, durationFieldType0);
      assertEquals((-604800), int0);
      assertEquals(3, seconds0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Duration duration0 = new Duration((-2136L));
      Period period0 = new Period((ReadableInstant) null, duration0);
      Days days0 = period0.toStandardDays();
      Weeks weeks0 = days0.toStandardWeeks();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(weeks0, 0L);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Duration duration0 = Duration.standardDays(27);
      ISOChronology iSOChronology0 = ISOChronology.getInstanceUTC();
      Period period0 = duration0.toPeriod((Chronology) iSOChronology0);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(period0, (-1L));
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -2332800000
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Minutes minutes0 = Minutes.TWO;
      // Undeclared exception!
      try { 
        minutes0.compareTo((BaseSingleFieldPeriod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetHours(1);
      Instant instant0 = new Instant();
      GJChronology gJChronology0 = GJChronology.getInstance(dateTimeZone0, (ReadableInstant) instant0);
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) gJChronology0);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(localDateTime0, localDateTime0, (ReadablePeriod) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Value 14 for dayOfMonth is not supported
         //
         verifyException("org.joda.time.chrono.GJChronology$CutoverField", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime((-1336L));
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(localDateTime0, localDateTime0, (ReadablePeriod) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.chrono.BaseChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Minutes minutes0 = Minutes.MIN_VALUE;
      LocalDateTime localDateTime0 = new LocalDateTime(0L);
      LocalDateTime localDateTime1 = localDateTime0.plusMonths(13421772);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(localDateTime1, localDateTime0, minutes0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -588264187680
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Minutes minutes0 = Minutes.MAX_VALUE;
      CopticChronology copticChronology0 = CopticChronology.getInstanceUTC();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(1);
      ZonedChronology zonedChronology0 = ZonedChronology.getInstance(copticChronology0, dateTimeZone0);
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) zonedChronology0);
      LocalDate localDate0 = localDateTime0.toLocalDate();
      DateTime dateTime0 = localDate0.toDateTimeAtStartOfDay();
      Duration duration0 = minutes0.toStandardDuration();
      DateTime dateTime1 = dateTime0.minus((ReadableDuration) duration0);
      DurationFieldType durationFieldType0 = DurationFieldType.millis();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(dateTime1, dateTime0, durationFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The subtrahend instant is below the supported minimum of 0001-01-01T00:00:00.000Z (CopticChronology[UTC])
         //
         verifyException("org.joda.time.chrono.LimitChronology", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FixedDateTimeZone fixedDateTimeZone0 = (FixedDateTimeZone)DateTimeZone.UTC;
      EthiopicChronology ethiopicChronology0 = EthiopicChronology.getInstance((DateTimeZone) fixedDateTimeZone0);
      MutableDateTime mutableDateTime0 = new MutableDateTime((long) 1, (Chronology) ethiopicChronology0);
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(mutableDateTime0, mutableDateTime0, durationFieldType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // eras field is unsupported
         //
         verifyException("org.joda.time.field.UnsupportedDurationField", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DateMidnight dateMidnight0 = new DateMidnight(63L);
      DateTime dateTime0 = dateMidnight0.toDateTime();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(dateTime0, dateTime0, (DurationFieldType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Seconds seconds0 = Seconds.seconds((-1453));
      DurationFieldType durationFieldType0 = seconds0.getFieldType();
      DateMidnight dateMidnight0 = new DateMidnight(30962844000000L);
      DateTime dateTime0 = dateMidnight0.toDateTime();
      DateMidnight dateMidnight1 = new DateMidnight();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(dateTime0, dateMidnight1, durationFieldType0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // Value cannot fit in an int: -29570486400
         //
         verifyException("org.joda.time.field.FieldUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Minutes minutes0 = Minutes.ONE;
      Minutes minutes1 = minutes0.negated();
      int int0 = minutes1.compareTo((BaseSingleFieldPeriod) minutes0);
      assertEquals(1, minutes0.getMinutes());
      assertEquals((-1), minutes1.getMinutes());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      LocalDateTime localDateTime0 = new LocalDateTime(31083663600000L, (Chronology) gregorianChronology0);
      Minutes minutes0 = Minutes.minutesBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      Minutes minutes1 = Minutes.ONE;
      Minutes minutes2 = minutes1.negated();
      int int0 = minutes0.compareTo((BaseSingleFieldPeriod) minutes2);
      assertEquals((-1), minutes2.getMinutes());
      assertEquals(1, int0);
      assertEquals(1, minutes1.getMinutes());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Hours hours0 = Hours.FOUR;
      Days days0 = Days.MIN_VALUE;
      Weeks weeks0 = days0.toStandardWeeks();
      // Undeclared exception!
      try { 
        weeks0.compareTo((BaseSingleFieldPeriod) hours0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // class org.joda.time.Weeks cannot be compared to class org.joda.time.Hours
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Minutes minutes0 = Minutes.TWO;
      int int0 = minutes0.compareTo((BaseSingleFieldPeriod) minutes0);
      assertEquals(2, minutes0.getMinutes());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Minutes minutes0 = Minutes.ZERO;
      PeriodType periodType0 = PeriodType.minutes();
      DateTimeZone dateTimeZone0 = DateTimeZone.forOffsetMillis(2);
      CopticChronology copticChronology0 = CopticChronology.getInstance(dateTimeZone0, 2);
      MutablePeriod mutablePeriod0 = new MutablePeriod(minutes0, periodType0, copticChronology0);
      boolean boolean0 = minutes0.equals(mutablePeriod0);
      assertEquals(0, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Interval interval0 = new Interval((ReadableInstant) null, (ReadableInstant) null);
      Duration duration0 = interval0.toDuration();
      Hours hours0 = duration0.toStandardHours();
      Minutes minutes0 = Minutes.THREE;
      Weeks weeks0 = minutes0.toStandardWeeks();
      boolean boolean0 = weeks0.equals(hours0);
      assertEquals(3, minutes0.getMinutes());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Months months0 = Months.MIN_VALUE;
      Object object0 = new Object();
      boolean boolean0 = months0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Hours hours0 = Hours.TWO;
      Minutes minutes0 = hours0.toStandardMinutes();
      boolean boolean0 = minutes0.equals(minutes0);
      assertEquals(2, hours0.getHours());
      assertTrue(boolean0);
      assertEquals(120, minutes0.getMinutes());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Minutes minutes0 = Minutes.TWO;
      Minutes minutes1 = Minutes.THREE;
      boolean boolean0 = minutes0.equals(minutes1);
      assertFalse(minutes1.equals((Object)minutes0));
      assertEquals(3, minutes1.getMinutes());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Hours hours0 = Hours.TWO;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstance();
      Period period0 = new Period(hours0, buddhistChronology0);
      Minutes minutes0 = Minutes.standardMinutesIn(period0);
      DurationFieldType durationFieldType0 = minutes0.getFieldType();
      boolean boolean0 = minutes0.isSupported(durationFieldType0);
      assertEquals(120, minutes0.getMinutes());
      assertTrue(boolean0);
      assertEquals(2, hours0.getHours());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Seconds seconds0 = Seconds.THREE;
      Days days0 = seconds0.toStandardDays();
      Duration duration0 = days0.toStandardDuration();
      JulianChronology julianChronology0 = JulianChronology.getInstanceUTC();
      DateMidnight dateMidnight0 = new DateMidnight(638L, (Chronology) julianChronology0);
      Period period0 = duration0.toPeriodTo((ReadableInstant) dateMidnight0);
      Hours hours0 = period0.toStandardHours();
      DurationFieldType durationFieldType0 = hours0.getFieldType();
      boolean boolean0 = seconds0.isSupported(durationFieldType0);
      assertEquals(3, seconds0.getSeconds());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Minutes minutes0 = Minutes.MIN_VALUE;
      DurationFieldType durationFieldType0 = minutes0.getFieldType();
      int int0 = minutes0.get(durationFieldType0);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Hours hours0 = Hours.FOUR;
      Minutes minutes0 = hours0.toStandardMinutes();
      Months months0 = Months.months((-476));
      DurationFieldType durationFieldType0 = months0.getFieldType();
      int int0 = minutes0.get(durationFieldType0);
      assertEquals((-476), months0.getMonths());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Days days0 = Days.FIVE;
      // Undeclared exception!
      try { 
        days0.getValue(28265625);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 28265625
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MutableInterval mutableInterval0 = new MutableInterval((Object) null);
      Hours hours0 = Hours.hoursIn(mutableInterval0);
      // Undeclared exception!
      try { 
        hours0.getFieldType(18);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // 18
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Period period0 = Period.years((-292));
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.standardPeriodIn(period0, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot convert period to duration as years is not precise in the period P-292Y
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LocalDateTime localDateTime0 = new LocalDateTime(0L, (Chronology) null);
      Date date0 = localDateTime0.toDate();
      LocalTime localTime0 = LocalTime.fromDateFields(date0);
      // Undeclared exception!
      try { 
        Minutes.minutesBetween((ReadablePartial) localTime0, (ReadablePartial) localDateTime0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Hours hours0 = Hours.TWO;
      BuddhistChronology buddhistChronology0 = BuddhistChronology.getInstanceUTC();
      LocalDateTime localDateTime0 = new LocalDateTime((Chronology) buddhistChronology0);
      Partial partial0 = new Partial();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(localDateTime0, partial0, hours0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must have the same set of fields
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstance();
      LocalDateTime localDateTime0 = new LocalDateTime(31083663600000L, (Chronology) gregorianChronology0);
      Minutes minutes0 = Minutes.minutesBetween((ReadablePartial) localDateTime0, (ReadablePartial) localDateTime0);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between(localDateTime0, (ReadablePartial) null, minutes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Hours hours0 = Hours.SIX;
      GregorianChronology gregorianChronology0 = GregorianChronology.getInstanceUTC();
      Partial partial0 = new Partial(gregorianChronology0);
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between((ReadablePartial) null, partial0, hours0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadablePartial objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DateTime dateTime0 = new DateTime();
      DateMidnight dateMidnight0 = dateTime0.toDateMidnight();
      // Undeclared exception!
      try { 
        Hours.hoursBetween((ReadableInstant) dateMidnight0, (ReadableInstant) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Seconds seconds0 = Seconds.ONE;
      DurationFieldType durationFieldType0 = seconds0.getFieldType();
      DateMidnight dateMidnight0 = new DateMidnight(0L);
      int int0 = BaseSingleFieldPeriod.between(dateMidnight0, dateMidnight0, durationFieldType0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DurationFieldType durationFieldType0 = DurationFieldType.eras();
      // Undeclared exception!
      try { 
        BaseSingleFieldPeriod.between((ReadableInstant) null, (ReadableInstant) null, durationFieldType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ReadableInstant objects must not be null
         //
         verifyException("org.joda.time.base.BaseSingleFieldPeriod", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Minutes minutes0 = Minutes.MAX_VALUE;
      minutes0.toMutablePeriod();
      assertEquals(Integer.MAX_VALUE, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Minutes minutes0 = Minutes.TWO;
      minutes0.toPeriod();
      assertEquals(2, minutes0.getMinutes());
      assertEquals(1, minutes0.size());
  }
}
