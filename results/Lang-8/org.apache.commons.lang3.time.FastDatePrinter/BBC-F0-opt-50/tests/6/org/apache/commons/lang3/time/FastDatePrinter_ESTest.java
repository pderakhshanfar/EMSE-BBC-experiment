/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 11:51:07 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.text.FieldPosition;
import java.text.Format;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang3.time.FastDatePrinter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDatePrinter_ESTest extends FastDatePrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.KOREA;
      // Undeclared exception!
      try { 
        FastDatePrinter.getTimeZoneDisplay(timeZone0, true, (-1163), locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal style: -1163
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Locale locale0 = Locale.UK;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(118, "1Z");
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("1Z", simpleTimeZone0, locale0);
      fastDatePrinter0.format((long) 118);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("SS{", timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      fastDatePrinter0.format((Calendar) mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("k");
      Locale locale0 = Locale.KOREA;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("k", timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 1, 58, 58, 3, 2);
      StringWriter stringWriter0 = new StringWriter(3469);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      fastDatePrinter0.applyRules(mockGregorianCalendar0, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.KOREA;
      FastDatePrinter.getTimeZoneDisplay(timeZone0, false, 0, locale0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
      fastDatePrinter0.getTimeZone();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "OXay\"");
      Locale locale0 = Locale.US;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
      fastDatePrinter0.getTimeZone();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(Integer.MIN_VALUE, "B");
      Locale locale0 = Locale.TAIWAN;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
      fastDatePrinter0.getTimeZone();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.KOREA;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      fastDatePrinter0.getPattern();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("&]>F}", (TimeZone) null, locale0);
      fastDatePrinter0.getMaxLengthEstimate();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.KOREA;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      MockDate mockDate0 = new MockDate();
      fastDatePrinter0.format((Date) mockDate0, (StringBuffer) null);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.KOREA;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      fastDatePrinter0.format((Date) mockDate0, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.JAPANESE;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z-=Md;,G0", timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      fastDatePrinter0.format(date0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.US;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1047), (-163), (-702), 9, 2859, 39);
      fastDatePrinter0.format((Calendar) mockGregorianCalendar0, (StringBuffer) null);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.KOREA;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 3, 0, 3, 1, 0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.KOREA;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      Calendar calendar0 = MockCalendar.getInstance();
      fastDatePrinter0.format(calendar0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.JAPANESE;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      StringBuffer stringBuffer0 = new StringBuffer();
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
      fastDatePrinter0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.US;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      fastDatePrinter0.format(4027L, (StringBuffer) null);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.KOREA;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      fastDatePrinter0.format((-45L), stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(Integer.MIN_VALUE, "B");
      Locale locale0 = Locale.TAIWAN;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
      fastDatePrinter0.format(0L);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(97, "");
      Locale locale0 = Locale.PRC;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      fastDatePrinter0.applyRules(mockGregorianCalendar0, (StringBuffer) null);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.KOREA;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      fastDatePrinter0.applyRules(mockGregorianCalendar0, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("'`tMXpD", (TimeZone) null, locale0);
      // Undeclared exception!
      try { 
        fastDatePrinter0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.KOREA;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      int[] intArray0 = new int[9];
      // Undeclared exception!
      try { 
        fastDatePrinter0.parseToken("", intArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.KOREA;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDatePrinter0.parseToken("", (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.KOREA;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        fastDatePrinter0.parseToken("", intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDatePrinter.getTimeZoneDisplay((TimeZone) null, false, (-1921), (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("'`tMXpD", (TimeZone) null, locale0);
      MockDate mockDate0 = new MockDate(2, 1, (-1949), (-1949), 1);
      StringBuffer stringBuffer0 = new StringBuffer(2753);
      // Undeclared exception!
      try { 
        fastDatePrinter0.format((Date) mockDate0, stringBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("'`tMXpD", (TimeZone) null, locale0);
      MockDate mockDate0 = new MockDate(0);
      // Undeclared exception!
      try { 
        fastDatePrinter0.format((Date) mockDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("S");
      Locale locale0 = Locale.KOREAN;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("S", timeZone0, locale0);
      Calendar calendar0 = MockCalendar.getInstance();
      // Undeclared exception!
      try { 
        fastDatePrinter0.format(calendar0, (StringBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter$UnpaddedNumberField", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.JAPAN;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter(";\"Z0", timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, (-254), 3);
      mockGregorianCalendar0.setLenient(false);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      // Undeclared exception!
      try { 
        fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // YEAR
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.JAPANESE;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("(\"!*y*z5 ", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDatePrinter0.format((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter$PaddedNumberField", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALY;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("1Z", timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2342), (-2508), 1);
      mockGregorianCalendar0.setLenient(false);
      // Undeclared exception!
      try { 
        fastDatePrinter0.format((Calendar) mockGregorianCalendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // YEAR
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("'`tMXpD", (TimeZone) null, locale0);
      // Undeclared exception!
      try { 
        fastDatePrinter0.format((long) 1, (StringBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("&]>F}", (TimeZone) null, locale0);
      // Undeclared exception!
      try { 
        fastDatePrinter0.format((long) 3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("S");
      Locale locale0 = Locale.KOREAN;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("S", timeZone0, locale0);
      Calendar calendar0 = MockCalendar.getInstance();
      // Undeclared exception!
      try { 
        fastDatePrinter0.applyRules(calendar0, (StringBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter$UnpaddedNumberField", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter(" ;Z0", timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(118, (-434), 100, 2, 116, 122);
      mockGregorianCalendar0.setLenient(false);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        fastDatePrinter0.applyRules(mockGregorianCalendar0, stringBuffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MONTH
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(Integer.MIN_VALUE, "B");
      Locale locale0 = Locale.TAIWAN;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
      MockDate mockDate0 = new MockDate((-3399), Integer.MIN_VALUE, (-3399), Integer.MIN_VALUE, 3);
      fastDatePrinter0.format((Date) mockDate0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.UK;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("1Z", timeZone0, locale0);
      fastDatePrinter0.format(0L);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("k");
      Locale locale0 = Locale.KOREA;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("k", timeZone0, locale0);
      MockDate mockDate0 = new MockDate(0, 1193, 0, 3, 107);
      StringWriter stringWriter0 = new StringWriter(3469);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      fastDatePrinter0.format((Date) mockDate0, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.KOREA;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("Hh(3E", timeZone0, locale0);
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      StringBuffer stringBuffer0 = new StringBuffer(2);
      fastDatePrinter0.format(calendar0, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("SS{", timeZone0, locale0);
      fastDatePrinter0.format((long) 3);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Locale locale0 = Locale.UK;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("(\"*y*z5 ", timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(93, 93, 1);
      fastDatePrinter0.format((Calendar) mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.FRENCH;
      StringBuffer stringBuffer0 = new StringBuffer();
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("(\"!*y*z5 ", timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 48, (-1047), 48, 3, (-286));
      fastDatePrinter0.applyRules(mockGregorianCalendar0, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "&]>F}", 3, 3, 3, 3, 3, 3, 3, 12, 12);
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z- Md;,G0", simpleTimeZone0, locale0);
      fastDatePrinter0.format(859L);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("~hD'zR}", (TimeZone) null, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 1, 69);
      fastDatePrinter0.format((Calendar) mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("S");
      Locale locale0 = Locale.KOREA;
      Locale locale1 = Locale.CHINESE;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("S", timeZone0, locale1);
      FastDatePrinter fastDatePrinter1 = new FastDatePrinter("S", timeZone0, locale0);
      fastDatePrinter0.equals(fastDatePrinter1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      ZoneOffset zoneOffset1 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.ITALIAN;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("(\"!*y*z5 ", timeZone0, locale0);
      TimeZone timeZone1 = TimeZone.getTimeZone((ZoneId) zoneOffset1);
      FastDatePrinter fastDatePrinter1 = new FastDatePrinter("(\"!*y*z5 ", timeZone1, locale0);
      fastDatePrinter1.equals(fastDatePrinter0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("S");
      Locale locale0 = Locale.KOREAN;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("S", timeZone0, locale0);
      FastDatePrinter fastDatePrinter1 = new FastDatePrinter("#K'&u}\"/2b;", timeZone0, locale0);
      fastDatePrinter0.equals(fastDatePrinter1);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.FRANCE;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("D8@MMd;", timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 2, 1, 3, 3);
      fastDatePrinter0.equals(mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.ITALIAN;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("(\"!*y*z5 ", timeZone0, locale0);
      fastDatePrinter0.equals(fastDatePrinter0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.JAPANESE;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer();
      FieldPosition fieldPosition0 = new FieldPosition(0);
      // Undeclared exception!
      try { 
        fastDatePrinter0.format((Object) null, stringBuffer0, fieldPosition0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: <null>
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "D'zK#R}");
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("D'zK#R}", (TimeZone) null, locale0);
      Long long0 = new Long(1L);
      FieldPosition fieldPosition0 = new FieldPosition(3);
      // Undeclared exception!
      try { 
        fastDatePrinter0.format((Object) long0, stringBuffer0, fieldPosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("|");
      Locale locale0 = new Locale("|", "|", "|");
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("|", timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(96, 1, 96, 2, 3);
      StringBuffer stringBuffer0 = new StringBuffer();
      FieldPosition fieldPosition0 = new FieldPosition(96);
      fastDatePrinter0.format((Object) mockGregorianCalendar0, stringBuffer0, fieldPosition0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREA;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("SS{", timeZone0, locale0);
      Object object0 = new Object();
      StringBuffer stringBuffer0 = new StringBuffer("1Z");
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 32);
      // Undeclared exception!
      try { 
        fastDatePrinter0.format(object0, stringBuffer0, fieldPosition0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: java.lang.Object
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("D'K'z#R}", (TimeZone) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("{'", timeZone0, locale0);
      int[] intArray0 = new int[5];
      fastDatePrinter0.parseToken("zV$]", intArray0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-29), "|& T8~`(.");
      Locale locale0 = Locale.KOREA;
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("w2 1xpJIl,fe/Q3Pc", simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: x
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("zMMd;v0");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("zMMd;v0", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: v
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("u#WU'br}A{", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: u
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("s6+tB", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: t
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      ZoneId zoneId1 = zoneId0.normalized();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId1);
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("French", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: r
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.KOREA;
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("@mqE", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: q
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("S");
      Locale locale0 = Locale.KOREAN;
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("pwT6e{c-s", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: p
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      ZoneId zoneId1 = zoneId0.normalized();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId1);
      Locale locale0 = Locale.KOREA;
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("Korean", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALY;
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("amZw}nn2", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: nn
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.KOREA;
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("}+lVV_YKwd j", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: l
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.KOREA;
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("!a[yMzj,LZ&Xab", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: j
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("`$i");
      Locale locale0 = Locale.FRENCH;
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("`$i", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: i
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("6h(''(g");
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("6h(''(g", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: g
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.JAPANESE;
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter(">-fFlXRxT!tE)T@-I\u0007", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: f
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.KOREA;
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("0eMZrt6L ", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: e
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      ZoneId zoneId1 = zoneId0.normalized();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId1);
      Locale locale0 = Locale.JAPANESE;
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("ZcWSxq:0IZI9}]#5", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: c
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINESE;
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("3HWbe", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: b
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("S");
      Locale locale0 = Locale.KOREAN;
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("YC/(^7 e]Uaxn(V4u}", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Y
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3599), "XC^Kd:`TpzA_/5nF2");
      Locale locale0 = Locale.GERMAN;
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("XC^Kd:`TpzA_/5nF2", simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: X
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.JAPANESE;
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("/F0V", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: V
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.PRC;
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("U8p\"c|\u0000NNME*@|m5", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: U
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(130, "S");
      Locale locale0 = Locale.PRC;
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("GMT+00:00", simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("S");
      Locale locale0 = Locale.KOREA;
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("R\"", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: R
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.JAPANESE;
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("4aQ Aihi]@T=\"P1_", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Q
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-892), "J");
      Locale locale0 = Locale.GERMAN;
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("=+P9#^$Kp~$c", simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: P
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.KOREA;
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("2O", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: O
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("[/^Hk)k#N_", (TimeZone) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: N
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.KOREA;
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("L'T", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: L
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.GERMANY;
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("4JV{}Yw5j.IzulfQ~`c", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: J
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINESE;
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("(I<`S6QX", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: I
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(15, "cs0x");
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("&]>F}", simpleTimeZone0, locale0);
      fastDatePrinter0.getTimeZone();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMAN;
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("Cw|~b]ha", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: C
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.GERMAN;
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("B=$NEmNR{=REw_[u!Z", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: B
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.KOREA;
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("+ A%mK8t}ZhH8U", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: A
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.JAPANESE;
      StringBuffer stringBuffer0 = new StringBuffer();
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("Wyy-", timeZone0, locale0);
      fastDatePrinter0.format((-1397L), stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.forLanguageTag("3SS");
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("3SS", timeZone0, locale0);
      fastDatePrinter0.format(2100L);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TAIWAN;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("a6=Dk^ZZ`/", timeZone0, locale0);
      fastDatePrinter0.format(2268L);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "z- Md;,G0", 3, 3, 3, 3, 3, 3, 3, 3, 3);
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z- Md;,G0", simpleTimeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 0);
      fastDatePrinter0.format((Calendar) mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "z- Md;,G0", 3, 3, 3, 3, 3, 3, 3, 3, 3);
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z- Md;,G0", simpleTimeZone0, locale0);
      fastDatePrinter0.getTimeZone();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.KOREA;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("Hh(3E", timeZone0, locale0);
      fastDatePrinter0.getPattern();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Locale locale0 = Locale.UK;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("(\"*y*z5 ", timeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer(93);
      fastDatePrinter0.format((long) 0, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALIAN;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      MockDate mockDate0 = new MockDate(2608L);
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 1000);
      fastDatePrinter0.format((Object) mockDate0, (StringBuffer) null, fieldPosition0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.KOREA;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      fastDatePrinter0.hashCode();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("|");
      Locale locale0 = new Locale("|", "|", "|");
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("|", timeZone0, locale0);
      fastDatePrinter0.getLocale();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "z- Md;,G0", 3, 3, 3, 3, 3, 3, 3, 3, 3);
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z- Md;,G0", simpleTimeZone0, locale0);
      String string0 = fastDatePrinter0.toString();
      assertEquals("FastDatePrinter[z- Md;,G0,fr,z- Md;,G0]", string0);
      assertEquals(29, fastDatePrinter0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "OXay\"");
      Locale locale0 = Locale.US;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
      int int0 = fastDatePrinter0.getMaxLengthEstimate();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("zD8@MMy;0");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("zD8@MMy;0", timeZone0, locale0);
      fastDatePrinter0.format(1L);
      assertEquals(18, fastDatePrinter0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("33a*y[G^", timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1004, 3, (-1476));
      String string0 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0);
      assertEquals("33AM*1000[AD^", string0);
      assertEquals(13, fastDatePrinter0.getMaxLengthEstimate());
  }
}
