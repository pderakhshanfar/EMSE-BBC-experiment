/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 07:21:13 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.FieldPosition;
import java.text.Format;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang3.time.FastDatePrinter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDatePrinter_ESTest extends FastDatePrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(48, "{l>l!TfJHry)I<");
      assertNotNull(simpleTimeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id={l>l!TfJHry)I<,offset=48,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(48, simpleTimeZone0.getRawOffset());
      assertEquals("{l>l!TfJHry)I<", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      Locale locale0 = new Locale(";QJk1S(b=[n!!(z1t", "{l>l!TfJHry)I<");
      assertNotNull(locale0);
      assertEquals("{L>L!TFJHRY)I<", locale0.getCountry());
      assertEquals(";qjk1s(b=[n!!(z1t_{L>L!TFJHRY)I<", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(";qjk1s(b=[n!!(z1t", locale0.getLanguage());
      
      // Undeclared exception!
      try { 
        FastDatePrinter.getTimeZoneDisplay(simpleTimeZone0, true, (-1), locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal style: -1
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("Z", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("Z", fastDatePrinter0.getPattern());
      assertEquals(5, fastDatePrinter0.getMaxLengthEstimate());
      
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone1 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertNotSame(timeZone1, timeZone0);
      assertNotNull(timeZone1);
      assertEquals("GMT+18:00", timeZone1.getID());
      assertFalse(timeZone1.equals((Object)timeZone0));
      
      Calendar calendar0 = MockCalendar.getInstance(timeZone1, locale0);
      assertNotSame(timeZone1, timeZone0);
      assertNotNull(calendar0);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("GMT+18:00", timeZone1.getID());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+18:00\",offset=64800000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=46,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=64800000,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertFalse(timeZone1.equals((Object)timeZone0));
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "Z");
      assertNotNull(stringBuffer0);
      assertEquals("Z", stringBuffer0.toString());
      assertEquals(1, stringBuffer0.length());
      
      StringBuffer stringBuffer1 = fastDatePrinter0.format(calendar0, stringBuffer0);
      assertNotSame(timeZone0, timeZone1);
      assertNotSame(timeZone1, timeZone0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("JP", locale0.getCountry());
      assertEquals("Z", fastDatePrinter0.getPattern());
      assertEquals(5, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("GMT+18:00", timeZone1.getID());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+18:00\",offset=64800000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=46,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=64800000,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals("Z+1800", stringBuffer0.toString());
      assertEquals(6, stringBuffer0.length());
      assertEquals(6, stringBuffer1.length());
      assertEquals("Z+1800", stringBuffer1.toString());
      assertFalse(timeZone0.equals((Object)timeZone1));
      assertFalse(timeZone1.equals((Object)timeZone0));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("85MMh", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("85MMh", fastDatePrinter0.getPattern());
      assertEquals(8, fastDatePrinter0.getMaxLengthEstimate());
      
      String string0 = fastDatePrinter0.format(1L);
      assertNotNull(string0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("85MMh", fastDatePrinter0.getPattern());
      assertEquals(8, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("850112", string0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("DD", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals(2, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("DD", fastDatePrinter0.getPattern());
      
      String string0 = fastDatePrinter0.format((-565L));
      assertNotNull(string0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals(2, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("DD", fastDatePrinter0.getPattern());
      assertEquals("365", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("y`", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("y`", fastDatePrinter0.getPattern());
      assertEquals(5, fastDatePrinter0.getMaxLengthEstimate());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1000, 2, 82, 20, 1, (-1329));
      assertNotNull(mockGregorianCalendar0);
      
      // Undeclared exception!
      try { 
        fastDatePrinter0.applyRules(mockGregorianCalendar0, (StringBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter$PaddedNumberField", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("85M,h", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("85M,h", fastDatePrinter0.getPattern());
      assertEquals(9, fastDatePrinter0.getMaxLengthEstimate());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      StringBuffer stringBuffer1 = fastDatePrinter0.format((-1L), stringBuffer0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("85M,h", fastDatePrinter0.getPattern());
      assertEquals(9, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(7, stringBuffer0.length());
      assertEquals("8512,11", stringBuffer0.toString());
      assertEquals(7, stringBuffer1.length());
      assertEquals("8512,11", stringBuffer1.toString());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      
      StringBuffer stringBuffer0 = new StringBuffer(1210);
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(103, 2, 104, 1210, 2, 2);
      assertNotNull(mockGregorianCalendar0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("S*$H\",", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals(12, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("S*$H\",", fastDatePrinter0.getPattern());
      
      StringBuffer stringBuffer1 = fastDatePrinter0.applyRules(mockGregorianCalendar0, stringBuffer0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("0*$10\",", stringBuffer0.toString());
      assertEquals(7, stringBuffer0.length());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-58898584678000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=103,MONTH=7,WEEK_OF_YEAR=31,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=213,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=10,HOUR_OF_DAY=10,MINUTE=2,SECOND=2,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(12, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("S*$H\",", fastDatePrinter0.getPattern());
      assertEquals(7, stringBuffer1.length());
      assertEquals("0*$10\",", stringBuffer1.toString());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "f<*A");
      assertNotNull(simpleTimeZone0);
      assertEquals("java.util.SimpleTimeZone[id=f<*A,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("f<*A", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      
      String string0 = FastDatePrinter.getTimeZoneDisplay(simpleTimeZone0, false, 0, locale0);
      assertNotNull(string0);
      assertEquals("java.util.SimpleTimeZone[id=f<*A,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("f<*A", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("GMT+00:00", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("!S*$'G\"2", (TimeZone) null, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("!S*$'G\"2", fastDatePrinter0.getPattern());
      assertEquals(10, fastDatePrinter0.getMaxLengthEstimate());
      
      TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
      assertNull(timeZone0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("!S*$'G\"2", fastDatePrinter0.getPattern());
      assertEquals(10, fastDatePrinter0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      assertNotNull(simpleTimeZone0);
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      
      TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
      assertSame(simpleTimeZone0, timeZone0);
      assertSame(timeZone0, simpleTimeZone0);
      assertNotNull(timeZone0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      assertFalse(timeZone0.useDaylightTime());
      assertEquals("", timeZone0.getID());
      assertEquals(0, timeZone0.getRawOffset());
      assertEquals(0, timeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-293), "");
      assertNotNull(simpleTimeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-293), simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=,offset=-293,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-293), simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=,offset=-293,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      
      TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
      assertSame(simpleTimeZone0, timeZone0);
      assertSame(timeZone0, simpleTimeZone0);
      assertNotNull(timeZone0);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-293), simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=,offset=-293,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertFalse(timeZone0.useDaylightTime());
      assertEquals((-293), timeZone0.getRawOffset());
      assertEquals("", timeZone0.getID());
      assertEquals(0, timeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,offset=-293,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(86, "bF>^384(-");
      assertNotNull(simpleTimeZone0);
      assertEquals("java.util.SimpleTimeZone[id=bF>^384(-,offset=86,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("bF>^384(-", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(86, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals("java.util.SimpleTimeZone[id=bF>^384(-,offset=86,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("bF>^384(-", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(86, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      
      TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
      assertSame(simpleTimeZone0, timeZone0);
      assertSame(timeZone0, simpleTimeZone0);
      assertNotNull(timeZone0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals("java.util.SimpleTimeZone[id=bF>^384(-,offset=86,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("bF>^384(-", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(86, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertFalse(timeZone0.useDaylightTime());
      assertEquals("bF>^384(-", timeZone0.getID());
      assertEquals(0, timeZone0.getDSTSavings());
      assertEquals(86, timeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=bF>^384(-,offset=86,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      assertNotNull(simpleTimeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      
      String string0 = fastDatePrinter0.getPattern();
      assertNotNull(string0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertNotNull(timeZone0);
      assertEquals("GMT+18:00", timeZone0.getID());
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals("GMT+18:00", timeZone0.getID());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      
      int int0 = fastDatePrinter0.getMaxLengthEstimate();
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals("GMT+18:00", timeZone0.getID());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      
      MockDate mockDate0 = new MockDate((-1L));
      assertNotNull(mockDate0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3134), "org.apache.commons.lang3.time.FastDatePrinter$TwelveHourField");
      assertNotNull(simpleTimeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=org.apache.commons.lang3.time.FastDatePrinter$TwelveHourField,offset=-3134,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-3134), simpleTimeZone0.getRawOffset());
      assertEquals("org.apache.commons.lang3.time.FastDatePrinter$TwelveHourField", simpleTimeZone0.getID());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=org.apache.commons.lang3.time.FastDatePrinter$TwelveHourField,offset=-3134,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-3134), simpleTimeZone0.getRawOffset());
      assertEquals("org.apache.commons.lang3.time.FastDatePrinter$TwelveHourField", simpleTimeZone0.getID());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      
      StringBuffer stringBuffer0 = fastDatePrinter0.format((Date) mockDate0, (StringBuffer) null);
      assertNull(stringBuffer0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("Wed Dec 31 23:59:59 GMT 1969", mockDate0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=org.apache.commons.lang3.time.FastDatePrinter$TwelveHourField,offset=-3134,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-3134), simpleTimeZone0.getRawOffset());
      assertEquals("org.apache.commons.lang3.time.FastDatePrinter$TwelveHourField", simpleTimeZone0.getID());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-794), "");
      assertNotNull(simpleTimeZone0);
      assertEquals((-794), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=,offset=-794,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals((-794), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=,offset=-794,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertNotNull(date0);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      StringBuffer stringBuffer1 = fastDatePrinter0.format(date0, stringBuffer0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals((-794), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=,offset=-794,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(0, stringBuffer1.length());
      assertEquals("", stringBuffer1.toString());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      
      MockDate mockDate0 = new MockDate(0, 0, (-443), 3, 0, 1);
      assertNotNull(mockDate0);
      
      String string0 = fastDatePrinter0.format((Date) mockDate0);
      assertNotNull(string0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals("Fri Oct 14 03:00:01 GMT 1898", mockDate0.toString());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1725, "M;)D8oDSAfqY}%<aq");
      assertNotNull(simpleTimeZone0);
      assertEquals("M;)D8oDSAfqY}%<aq", simpleTimeZone0.getID());
      assertEquals(1725, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=M;)D8oDSAfqY}%<aq,offset=1725,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2755), (-1), (-1739), (-2755), 1086);
      assertNotNull(mockGregorianCalendar0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals("M;)D8oDSAfqY}%<aq", simpleTimeZone0.getID());
      assertEquals(1725, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=M;)D8oDSAfqY}%<aq,offset=1725,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      
      StringBuffer stringBuffer0 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, (StringBuffer) null);
      assertNull(stringBuffer0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals("M;)D8oDSAfqY}%<aq", simpleTimeZone0.getID());
      assertEquals(1725, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=M;)D8oDSAfqY}%<aq,offset=1725,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-2755,MONTH=-1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1739,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-2755,HOUR_OF_DAY=-2755,MINUTE=1086,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      
      StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals("", stringBuffer1.toString());
      assertEquals(0, stringBuffer1.length());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      assertNotNull(calendar0);
      assertEquals("GMT", timeZone0.getID());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      
      String string0 = fastDatePrinter0.format(calendar0);
      assertNotNull(string0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1725, "M;)D8oDSAfqY}%<aq");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("M;)D8oDSAfqY}%<aq", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=M;)D8oDSAfqY}%<aq,offset=1725,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(1725, simpleTimeZone0.getRawOffset());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
      assertNotNull(fieldPosition0);
      assertEquals(0, fieldPosition0.getBeginIndex());
      assertEquals((-1), fieldPosition0.getField());
      assertEquals(0, fieldPosition0.getEndIndex());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2755), (-1), (-1739), (-2755), 1086);
      assertNotNull(mockGregorianCalendar0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("M;)D8oDSAfqY}%<aq", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=M;)D8oDSAfqY}%<aq,offset=1725,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(1725, simpleTimeZone0.getRawOffset());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      
      StringBuffer stringBuffer0 = fastDatePrinter0.format((Object) mockGregorianCalendar0, (StringBuffer) null, fieldPosition0);
      assertNull(stringBuffer0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("M;)D8oDSAfqY}%<aq", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=M;)D8oDSAfqY}%<aq,offset=1725,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(1725, simpleTimeZone0.getRawOffset());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals(0, fieldPosition0.getBeginIndex());
      assertEquals((-1), fieldPosition0.getField());
      assertEquals(0, fieldPosition0.getEndIndex());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-2755,MONTH=-1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-1739,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=-2755,HOUR_OF_DAY=-2755,MINUTE=1086,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertNotNull(timeZone0);
      assertEquals("UTC", timeZone0.getID());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals("UTC", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      
      StringBuffer stringBuffer0 = fastDatePrinter0.format((-1L), (StringBuffer) null);
      assertNull(stringBuffer0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals("UTC", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-1));
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      StringBuffer stringBuffer1 = fastDatePrinter0.format((long) 3, stringBuffer0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(0, stringBuffer1.length());
      assertEquals("", stringBuffer1.toString());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertNotNull(timeZone0);
      assertEquals("UTC", timeZone0.getID());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals("UTC", timeZone0.getID());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      
      String string0 = fastDatePrinter0.format(0L);
      assertNotNull(string0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals("UTC", timeZone0.getID());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", simpleTimeZone0.getID());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      
      Calendar calendar0 = MockCalendar.getInstance();
      assertNotNull(calendar0);
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      
      StringBuffer stringBuffer0 = fastDatePrinter0.applyRules(calendar0, (StringBuffer) null);
      assertNull(stringBuffer0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 1, 1);
      assertNotNull(mockGregorianCalendar0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      StringBuffer stringBuffer1 = fastDatePrinter0.applyRules(mockGregorianCalendar0, stringBuffer0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=3,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(0, stringBuffer1.length());
      assertEquals("", stringBuffer1.toString());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("W[-'#(Xnx6tb6~P,", (TimeZone) null, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(18, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("W[-'#(Xnx6tb6~P,", fastDatePrinter0.getPattern());
      
      // Undeclared exception!
      try { 
        fastDatePrinter0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "7");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("7", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=7,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("7", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=7,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      
      int[] intArray0 = new int[3];
      // Undeclared exception!
      try { 
        fastDatePrinter0.parseToken("", intArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds((-1));
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de_DE", locale0.toString());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      
      int[] intArray0 = new int[5];
      // Undeclared exception!
      try { 
        fastDatePrinter0.parseToken((String) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      assertNotNull(simpleTimeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        fastDatePrinter0.parseToken("", intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("vvEH2");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      // Undeclared exception!
      try { 
        FastDatePrinter.getTimeZoneDisplay(timeZone0, false, (-2655), (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter$TimeZoneDisplayKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("!S*$'G\"2", (TimeZone) null, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals(10, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("!S*$'G\"2", fastDatePrinter0.getPattern());
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      MockDate mockDate0 = new MockDate(0, (-678), 1);
      assertNotNull(mockDate0);
      
      // Undeclared exception!
      try { 
        fastDatePrinter0.format((Date) mockDate0, stringBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("!S*$'G2", (TimeZone) null, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(9, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("!S*$'G2", fastDatePrinter0.getPattern());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      // Undeclared exception!
      try { 
        fastDatePrinter0.format((Date) mockDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertNotNull(timeZone0);
      assertEquals("GMT+18:00", timeZone0.getID());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("6'|P", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("GMT+18:00", timeZone0.getID());
      assertEquals(3, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("6'|P", fastDatePrinter0.getPattern());
      
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      assertNotNull(calendar0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      
      // Undeclared exception!
      try { 
        fastDatePrinter0.format(calendar0, (StringBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter$StringLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("!S*$G\"2", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("!S*$G\"2", fastDatePrinter0.getPattern());
      assertEquals(11, fastDatePrinter0.getMaxLengthEstimate());
      
      // Undeclared exception!
      try { 
        fastDatePrinter0.format((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter$UnpaddedNumberField", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("y>", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals(5, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("y>", fastDatePrinter0.getPattern());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(991, 2, 3, 991, 1, 2);
      assertNotNull(mockGregorianCalendar0);
      
      mockGregorianCalendar0.setLenient(false);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertFalse(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=991,MONTH=2,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=3,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=991,HOUR_OF_DAY=991,MINUTE=1,SECOND=2,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      
      // Undeclared exception!
      try { 
        fastDatePrinter0.format((Calendar) mockGregorianCalendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // HOUR_OF_DAY
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("!S*$'G\"2", (TimeZone) null, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals(10, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("!S*$'G\"2", fastDatePrinter0.getPattern());
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      // Undeclared exception!
      try { 
        fastDatePrinter0.format(0L, stringBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      
      // Undeclared exception!
      try { 
        fastDatePrinter0.format(0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      
      // Undeclared exception!
      try { 
        fastDatePrinter0.equals(fastDatePrinter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(85, 3773, (-2147), 1171, 1000, 85);
      assertNotNull(mockGregorianCalendar0);
      
      mockGregorianCalendar0.setLenient(false);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertFalse(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=85,MONTH=3773,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-2147,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=1171,HOUR_OF_DAY=1171,MINUTE=1000,SECOND=85,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      
      StringBuffer stringBuffer0 = new StringBuffer("");
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("*H%|", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("*H%|", fastDatePrinter0.getPattern());
      assertEquals(7, fastDatePrinter0.getMaxLengthEstimate());
      
      // Undeclared exception!
      try { 
        fastDatePrinter0.applyRules(mockGregorianCalendar0, stringBuffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MONTH
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("s4y");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter((String) null, timeZone0, (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("S$?H\",", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("S$?H\",", fastDatePrinter0.getPattern());
      assertEquals(12, fastDatePrinter0.getMaxLengthEstimate());
      
      StringBuffer stringBuffer0 = new StringBuffer(3);
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      StringBuffer stringBuffer1 = fastDatePrinter0.format(100L, stringBuffer0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("US", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_US", locale0.toString());
      assertEquals("S$?H\",", fastDatePrinter0.getPattern());
      assertEquals(12, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("100$?0\",", stringBuffer0.toString());
      assertEquals(8, stringBuffer0.length());
      assertEquals("100$?0\",", stringBuffer1.toString());
      assertEquals(8, stringBuffer1.length());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("mm", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("mm", fastDatePrinter0.getPattern());
      assertEquals(2, fastDatePrinter0.getMaxLengthEstimate());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertNotNull(date0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      StringBuffer stringBuffer0 = new StringBuffer("The validated array contains null element at index: %d");
      assertNotNull(stringBuffer0);
      assertEquals("The validated array contains null element at index: %d", stringBuffer0.toString());
      assertEquals(54, stringBuffer0.length());
      
      StringBuffer stringBuffer1 = fastDatePrinter0.format(date0, stringBuffer0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("mm", fastDatePrinter0.getPattern());
      assertEquals(2, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals("The validated array contains null element at index: %d00", stringBuffer0.toString());
      assertEquals(56, stringBuffer0.length());
      assertEquals("The validated array contains null element at index: %d00", stringBuffer1.toString());
      assertEquals(56, stringBuffer1.length());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("1ZZ'hiiIg", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("1ZZ'hiiIg", fastDatePrinter0.getPattern());
      assertEquals(11, fastDatePrinter0.getMaxLengthEstimate());
      
      String string0 = fastDatePrinter0.format((-2853L));
      assertNotNull(string0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("1ZZ'hiiIg", fastDatePrinter0.getPattern());
      assertEquals(11, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("1+00:00hiiIg", string0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("k", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("k", fastDatePrinter0.getPattern());
      assertEquals(4, fastDatePrinter0.getMaxLengthEstimate());
      
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      assertNotNull(calendar0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      StringBuffer stringBuffer1 = fastDatePrinter0.applyRules(calendar0, stringBuffer0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("k", fastDatePrinter0.getPattern());
      assertEquals(4, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertEquals("20", stringBuffer0.toString());
      assertEquals(2, stringBuffer0.length());
      assertEquals("20", stringBuffer1.toString());
      assertEquals(2, stringBuffer1.length());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.forLanguageTag("!S*$G\"2");
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("DD", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("DD", fastDatePrinter0.getPattern());
      assertEquals(2, fastDatePrinter0.getMaxLengthEstimate());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 3, 3, 0, 1);
      assertNotNull(mockGregorianCalendar0);
      
      mockGregorianCalendar0.roll(3, true);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=3,WEEK_OF_YEAR=15,WEEK_OF_MONTH=2,DAY_OF_MONTH=3,DAY_OF_YEAR=93,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      
      String string0 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0);
      assertNotNull(string0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("DD", fastDatePrinter0.getPattern());
      assertEquals(2, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62095679940000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=3,WEEK_OF_YEAR=15,WEEK_OF_MONTH=3,DAY_OF_MONTH=10,DAY_OF_YEAR=100,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals("100", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("y`", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("y`", fastDatePrinter0.getPattern());
      assertEquals(5, fastDatePrinter0.getMaxLengthEstimate());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(86, 2, (-640));
      assertNotNull(mockGregorianCalendar0);
      
      StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("0084`", stringBuffer0.toString());
      assertEquals(5, stringBuffer0.length());
      assertEquals("y`", fastDatePrinter0.getPattern());
      assertEquals(5, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-59503680000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=84,MONTH=4,WEEK_OF_YEAR=22,WEEK_OF_MONTH=5,DAY_OF_MONTH=29,DAY_OF_YEAR=150,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("0084`", stringBuffer1.toString());
      assertEquals(5, stringBuffer1.length());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("85M,h", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("85M,h", fastDatePrinter0.getPattern());
      assertEquals(9, fastDatePrinter0.getMaxLengthEstimate());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(108, 1, 99);
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertNotNull(date0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=108,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=99,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      String string0 = fastDatePrinter0.format(date0);
      assertNotNull(string0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("85M,h", fastDatePrinter0.getPattern());
      assertEquals(9, fastDatePrinter0.getMaxLengthEstimate());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=108,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=99,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertEquals("8510,12", string0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("sw;", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("sw;", fastDatePrinter0.getPattern());
      assertEquals(9, fastDatePrinter0.getMaxLengthEstimate());
      
      Locale locale1 = Locale.ITALIAN;
      assertNotSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals("", locale1.getCountry());
      assertEquals("it", locale1.toString());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertFalse(locale1.equals((Object)locale0));
      
      FastDatePrinter fastDatePrinter1 = new FastDatePrinter("sw;", timeZone0, locale1);
      assertNotNull(fastDatePrinter1);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale1.getCountry());
      assertEquals("it", locale1.toString());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertEquals(9, fastDatePrinter1.getMaxLengthEstimate());
      assertEquals("sw;", fastDatePrinter1.getPattern());
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(fastDatePrinter1.equals((Object)fastDatePrinter0));
      
      boolean boolean0 = fastDatePrinter0.equals(fastDatePrinter1);
      assertNotSame(locale0, locale1);
      assertNotSame(fastDatePrinter0, fastDatePrinter1);
      assertNotSame(locale1, locale0);
      assertNotSame(fastDatePrinter1, fastDatePrinter0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("sw;", fastDatePrinter0.getPattern());
      assertEquals(9, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", locale1.getCountry());
      assertEquals("it", locale1.toString());
      assertEquals("ita", locale1.getISO3Language());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", locale1.getVariant());
      assertEquals("it", locale1.getLanguage());
      assertEquals(9, fastDatePrinter1.getMaxLengthEstimate());
      assertEquals("sw;", fastDatePrinter1.getPattern());
      assertFalse(boolean0);
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(fastDatePrinter0.equals((Object)fastDatePrinter1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(fastDatePrinter1.equals((Object)fastDatePrinter0));
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(2);
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-4773), "`,5~");
      assertNotNull(simpleTimeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("`,5~", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=`,5~,offset=-4773,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals((-4773), simpleTimeZone0.getRawOffset());
      
      FastDatePrinter fastDatePrinter1 = new FastDatePrinter("", simpleTimeZone0, locale0);
      assertNotNull(fastDatePrinter1);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("`,5~", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=`,5~,offset=-4773,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals((-4773), simpleTimeZone0.getRawOffset());
      assertEquals("", fastDatePrinter1.getPattern());
      assertEquals(0, fastDatePrinter1.getMaxLengthEstimate());
      assertFalse(fastDatePrinter1.equals((Object)fastDatePrinter0));
      
      boolean boolean0 = fastDatePrinter0.equals(fastDatePrinter1);
      assertNotSame(fastDatePrinter0, fastDatePrinter1);
      assertNotSame(fastDatePrinter1, fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("`,5~", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=`,5~,offset=-4773,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals((-4773), simpleTimeZone0.getRawOffset());
      assertEquals("", fastDatePrinter1.getPattern());
      assertEquals(0, fastDatePrinter1.getMaxLengthEstimate());
      assertFalse(boolean0);
      assertFalse(fastDatePrinter0.equals((Object)fastDatePrinter1));
      assertFalse(fastDatePrinter1.equals((Object)fastDatePrinter0));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("y`", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("y`", fastDatePrinter0.getPattern());
      assertEquals(5, fastDatePrinter0.getMaxLengthEstimate());
      
      FastDatePrinter fastDatePrinter1 = new FastDatePrinter("`,5~", timeZone0, locale0);
      assertNotNull(fastDatePrinter1);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("`,5~", fastDatePrinter1.getPattern());
      assertEquals(4, fastDatePrinter1.getMaxLengthEstimate());
      assertFalse(fastDatePrinter1.equals((Object)fastDatePrinter0));
      
      boolean boolean0 = fastDatePrinter0.equals(fastDatePrinter1);
      assertNotSame(fastDatePrinter0, fastDatePrinter1);
      assertNotSame(fastDatePrinter1, fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("y`", fastDatePrinter0.getPattern());
      assertEquals(5, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("`,5~", fastDatePrinter1.getPattern());
      assertEquals(4, fastDatePrinter1.getMaxLengthEstimate());
      assertFalse(boolean0);
      assertFalse(fastDatePrinter0.equals((Object)fastDatePrinter1));
      assertFalse(fastDatePrinter1.equals((Object)fastDatePrinter0));
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("y`", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(5, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("y`", fastDatePrinter0.getPattern());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean0 = fastDatePrinter0.equals(object0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(5, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("y`", fastDatePrinter0.getPattern());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("mm", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("mm", fastDatePrinter0.getPattern());
      assertEquals(2, fastDatePrinter0.getMaxLengthEstimate());
      
      boolean boolean0 = fastDatePrinter0.equals(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("mm", fastDatePrinter0.getPattern());
      assertEquals(2, fastDatePrinter0.getMaxLengthEstimate());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("!S*$'G\"2", (TimeZone) null, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals(10, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("!S*$'G\"2", fastDatePrinter0.getPattern());
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
      assertNotNull(fieldPosition0);
      assertEquals((-1), fieldPosition0.getField());
      assertEquals(0, fieldPosition0.getBeginIndex());
      assertEquals(0, fieldPosition0.getEndIndex());
      
      // Undeclared exception!
      try { 
        fastDatePrinter0.format((Object) "!S*$'G\"2", stringBuffer0, fieldPosition0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: java.lang.String
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("!S*$G\"2", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals(11, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("!S*$G\"2", fastDatePrinter0.getPattern());
      
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      assertNotNull(calendar0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      
      FieldPosition fieldPosition0 = new FieldPosition(2);
      assertNotNull(fieldPosition0);
      assertEquals("java.text.FieldPosition[field=2,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
      assertEquals(2, fieldPosition0.getField());
      assertEquals(0, fieldPosition0.getEndIndex());
      assertEquals(0, fieldPosition0.getBeginIndex());
      
      // Undeclared exception!
      try { 
        fastDatePrinter0.format((Object) calendar0, (StringBuffer) null, fieldPosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter$CharacterLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      
      MockDate mockDate0 = new MockDate(1);
      assertNotNull(mockDate0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      FieldPosition fieldPosition0 = new FieldPosition(0);
      assertNotNull(fieldPosition0);
      assertEquals(0, fieldPosition0.getBeginIndex());
      assertEquals("java.text.FieldPosition[field=0,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
      assertEquals(0, fieldPosition0.getField());
      assertEquals(0, fieldPosition0.getEndIndex());
      
      StringBuffer stringBuffer1 = fastDatePrinter0.format((Object) mockDate0, stringBuffer0, fieldPosition0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(0, fieldPosition0.getBeginIndex());
      assertEquals("java.text.FieldPosition[field=0,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
      assertEquals(0, fieldPosition0.getField());
      assertEquals(0, fieldPosition0.getEndIndex());
      assertEquals(0, stringBuffer1.length());
      assertEquals("", stringBuffer1.toString());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3130, "!S*$'G\"2");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=!S*$'G\"2,offset=3130,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(3130, simpleTimeZone0.getRawOffset());
      assertEquals("!S*$'G\"2", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("'-QwU}(L&T'''W:Uw", simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: U
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("'", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertEquals("'", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = new Locale("15MMM", "15MMM");
      assertNotNull(locale0);
      assertEquals("15mmm_15MMM", locale0.toString());
      assertEquals("15MMM", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("15mmm", locale0.getLanguage());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("15MMM", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("15mmm_15MMM", locale0.toString());
      assertEquals("15MMM", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("15mmm", locale0.getLanguage());
      assertEquals(5, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("15MMM", fastDatePrinter0.getPattern());
      
      int[] intArray0 = new int[2];
      String string0 = fastDatePrinter0.parseToken("H{-|jm65^[", intArray0);
      assertNotNull(string0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("15mmm_15MMM", locale0.toString());
      assertEquals("15MMM", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("15mmm", locale0.getLanguage());
      assertEquals(5, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("15MMM", fastDatePrinter0.getPattern());
      assertEquals("H", string0);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertEquals(2, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("/_[x_V(S:jGfh", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: x
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      assertNotNull(simpleTimeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("0&W>&Dwv1&&S9M_$3", simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: v
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("-0ka(uw>mV}<-GfU4", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: u
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("FastDatePrinter[[^k#8,en_GB,GMT]", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: t
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertNotNull(timeZone0);
      assertEquals("GMT+18:00", timeZone0.getID());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("WroJD<j}#C", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: r
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertNotNull(timeZone0);
      assertEquals("GMT+18:00", timeZone0.getID());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("{#sqT%C&3[", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: q
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3130, "!S*$'G\"2");
      assertNotNull(simpleTimeZone0);
      assertEquals("java.util.SimpleTimeZone[id=!S*$'G\"2,offset=3130,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("!S*$'G\"2", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(3130, simpleTimeZone0.getRawOffset());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("p<er1RaYh[3", simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: p
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("org.apache.commons.lang3.time.FastDatePrinter$TwoDigitNumberField", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertNotNull(timeZone0);
      assertEquals("GMT+18:00", timeZone0.getID());
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("nyO,)A3q]>853Wqb1x", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: n
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.CANADA;
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("mm", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals(2, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("mm", fastDatePrinter0.getPattern());
      
      StringBuffer stringBuffer0 = new StringBuffer("The validated array contains null element at index: %d");
      assertNotNull(stringBuffer0);
      assertEquals("The validated array contains null element at index: %d", stringBuffer0.toString());
      assertEquals(54, stringBuffer0.length());
      
      // Undeclared exception!
      try { 
        fastDatePrinter0.format((Object) null, stringBuffer0, (FieldPosition) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: <null>
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(48, "");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,offset=48,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(48, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("ja", locale0.toString());
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("{l>l!TfJHry)I<", simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: l
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-395), "}nU(9yjQNG%(ZM");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-395), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=}nU(9yjQNG%(ZM,offset=-395,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("}nU(9yjQNG%(ZM", simpleTimeZone0.getID());
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("jZid+%OP!X", simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: j
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      
      Locale locale0 = Locale.JAPAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JP", locale0.getCountry());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("]/ ,;}i8*}7Q# ", simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: i
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("g!wMdaKfC+");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = new Locale("GB^_d", "g!wMdaKfC+");
      assertNotNull(locale0);
      assertEquals("gb^_d", locale0.getLanguage());
      assertEquals("gb^_d_G!WMDAKFC+", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("G!WMDAKFC+", locale0.getCountry());
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("g!wMdaKfC+", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: g
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3130, "!S*$'G\"2");
      assertNotNull(simpleTimeZone0);
      assertEquals(3130, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("!S*$'G\"2", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=!S*$'G\"2,offset=3130,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("f.r#1uvh1_  N!", simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: f
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("MdHsekhXNU", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: e
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-395), "jZid+%OP!X");
      assertNotNull(simpleTimeZone0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("jZid+%OP!X", simpleTimeZone0.getID());
      assertEquals((-395), simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=jZid+%OP!X,offset=-395,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("<bCV*, $BiL1bi99y!", simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: b
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "QT$W");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=QT$W,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("QT$W", simpleTimeZone0.getID());
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("YxEyP&[ Q6bhpP-", simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Y
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3130, "!S*$'G\"2");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("!S*$'G\"2", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=!S*$'G\"2,offset=3130,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(3130, simpleTimeZone0.getRawOffset());
      
      Locale locale0 = Locale.JAPANESE;
      assertNotNull(locale0);
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("|Xk0TO,@", simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: X
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("`VJ$]TU:Y{l@qgqY", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: V
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertNotNull(timeZone0);
      assertEquals("GMT+18:00", timeZone0.getID());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("T`5CZ |", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getCountry());
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("ayy>R)O%", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: R
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      assertNotNull(simpleTimeZone0);
      assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("0WQaDfgk^3T8LFCixC", simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Q
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter(":7yP=a4^LuzgIGKW{aI", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: P
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertNotNull(timeZone0);
      assertEquals("GMT+18:00", timeZone0.getID());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter(":<?OQE<j[t?[TW", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: O
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("'Z'wN", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: N
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("0E89ZZL-", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: L
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("K*1c'", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: c
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("|J*", (TimeZone) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: J
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1393), "F)@");
      assertNotNull(simpleTimeZone0);
      assertEquals((-1393), simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=F)@,offset=-1393,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("F)@", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("Illegal pattern component: ", simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: I
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("y5F`", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals(10, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("y5F`", fastDatePrinter0.getPattern());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, (-1181), 3, 99, 0, (-1181));
      assertNotNull(mockGregorianCalendar0);
      
      // Undeclared exception!
      try { 
        fastDatePrinter0.applyRules(mockGregorianCalendar0, (StringBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter$PaddedNumberField", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.UK;
      assertNotNull(locale0);
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("6wCgbGmO1VyLdc\"d", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: C
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("B", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: B
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("Afmf6=", (TimeZone) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: A
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.forLanguageTag("!S*$G\"2");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("DD", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals(2, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("DD", fastDatePrinter0.getPattern());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 3, 3, 0, 1);
      assertNotNull(mockGregorianCalendar0);
      
      String string0 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0);
      assertNotNull(string0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals(2, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("DD", fastDatePrinter0.getPattern());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62096284740000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=3,WEEK_OF_YEAR=14,WEEK_OF_MONTH=2,DAY_OF_MONTH=3,DAY_OF_YEAR=93,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("93", string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("85M,h", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(9, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("85M,h", fastDatePrinter0.getPattern());
      
      StringBuffer stringBuffer1 = fastDatePrinter0.format(2112L, stringBuffer0);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("851,12", stringBuffer0.toString());
      assertEquals(6, stringBuffer0.length());
      assertEquals(9, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("85M,h", fastDatePrinter0.getPattern());
      assertEquals(6, stringBuffer1.length());
      assertEquals("851,12", stringBuffer1.toString());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("85MMh", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(8, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("85MMh", fastDatePrinter0.getPattern());
      
      String string0 = fastDatePrinter0.getPattern();
      assertNotNull(string0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(8, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("85MMh", fastDatePrinter0.getPattern());
      assertEquals("85MMh", string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.forLanguageTag("!S*$G\"2");
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("!S*$G\"2", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals(11, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("!S*$G\"2", fastDatePrinter0.getPattern());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 3, 3, 0, 1);
      assertNotNull(mockGregorianCalendar0);
      
      String string0 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0);
      assertNotNull(string0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals(11, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("!S*$G\"2", fastDatePrinter0.getPattern());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62096284740000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=3,WEEK_OF_YEAR=14,WEEK_OF_MONTH=2,DAY_OF_MONTH=3,DAY_OF_YEAR=93,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=1,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("!0*$AD\"2", string0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1966), "Z");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("Z", simpleTimeZone0.getID());
      assertEquals((-1966), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=Z,offset=-1966,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("Z", simpleTimeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("Z", simpleTimeZone0.getID());
      assertEquals((-1966), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=Z,offset=-1966,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("Z", fastDatePrinter0.getPattern());
      assertEquals(5, fastDatePrinter0.getMaxLengthEstimate());
      
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      StringBuffer stringBuffer1 = fastDatePrinter0.format((Object) long0, stringBuffer0, (FieldPosition) null);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("Z", simpleTimeZone0.getID());
      assertEquals((-1966), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=Z,offset=-1966,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("Z", fastDatePrinter0.getPattern());
      assertEquals(5, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("-0000", stringBuffer0.toString());
      assertEquals(5, stringBuffer0.length());
      assertEquals("-0000", stringBuffer1.toString());
      assertEquals(5, stringBuffer1.length());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("!S*$'G\"2", (TimeZone) null, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("!S*$'G\"2", fastDatePrinter0.getPattern());
      assertEquals(10, fastDatePrinter0.getMaxLengthEstimate());
      
      fastDatePrinter0.hashCode();
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("!S*$'G\"2", fastDatePrinter0.getPattern());
      assertEquals(10, fastDatePrinter0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.CHINESE;
      assertNotNull(locale0);
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("85MMh", timeZone0, locale0);
      assertNotNull(fastDatePrinter0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("85MMh", fastDatePrinter0.getPattern());
      assertEquals(8, fastDatePrinter0.getMaxLengthEstimate());
      
      Locale locale1 = fastDatePrinter0.getLocale();
      assertSame(locale0, locale1);
      assertSame(locale1, locale0);
      assertNotNull(locale1);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("85MMh", fastDatePrinter0.getPattern());
      assertEquals(8, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("zh", locale1.toString());
      assertEquals("zho", locale1.getISO3Language());
      assertEquals("", locale1.getVariant());
      assertEquals("zh", locale1.getLanguage());
      assertEquals("", locale1.getCountry());
      assertEquals("", locale1.getISO3Country());
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("!S*$G\"2", timeZone0, locale0);
      String string0 = fastDatePrinter0.toString();
      assertEquals("FastDatePrinter[!S*$G\"2,fr,GMT]", string0);
      assertEquals(18, fastDatePrinter0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TAIWAN;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("85M,h", timeZone0, locale0);
      int int0 = fastDatePrinter0.getMaxLengthEstimate();
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      Locale locale0 = Locale.GERMANY;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z", simpleTimeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, (-2513), 2127, 2127);
      String string0 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0);
      assertEquals("GMT+00:00", string0);
      assertEquals(9, fastDatePrinter0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("ya`yykG2S", "ya`yykG2S");
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("ya`yykG2S", timeZone0, locale0);
      String string0 = fastDatePrinter0.format(4375L);
      assertEquals(20, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("1970AM`7024AD2375", string0);
  }
}
