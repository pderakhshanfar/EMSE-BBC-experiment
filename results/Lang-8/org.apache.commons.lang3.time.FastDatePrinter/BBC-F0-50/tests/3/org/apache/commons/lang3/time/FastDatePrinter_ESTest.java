/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 04:12:55 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.text.FieldPosition;
import java.text.Format;
import java.time.LocalDateTime;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang3.time.FastDatePrinter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockLocalDateTime;
import org.evosuite.runtime.mock.java.time.MockZonedDateTime;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDatePrinter_ESTest extends FastDatePrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      // Undeclared exception!
      try { 
        FastDatePrinter.getTimeZoneDisplay(timeZone0, true, (-2226), locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal style: -2226
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = new Locale("6Z0h", "6Z0h", "6Z0h");
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("6Z0h", timeZone0, locale0);
      LocalDateTime localDateTime0 = MockLocalDateTime.now();
      ZoneOffset zoneOffset0 = ZoneOffset.ofHoursMinutes(16, 3);
      ZonedDateTime zonedDateTime0 = MockZonedDateTime.ofStrict(localDateTime0, zoneOffset0, zoneOffset0);
      GregorianCalendar gregorianCalendar0 = MockGregorianCalendar.from(zonedDateTime0);
      StringBuffer stringBuffer0 = new StringBuffer("&");
      fastDatePrinter0.format((Calendar) gregorianCalendar0, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREAN;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("0#kHa6`Z&}y}", timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1000, 2, 3);
      fastDatePrinter0.format((Calendar) mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(90, 90, 982);
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("{:.#&4sy", timeZone0, locale0);
      fastDatePrinter0.format((Calendar) mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      TimeZone timeZone0 = TimeZone.getDefault();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 44, 1183);
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M", timeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer();
      fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("(KD]", timeZone0, locale0);
      MockDate mockDate0 = new MockDate(105, (-1783), 2138, 68, 0);
      fastDatePrinter0.format((Date) mockDate0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.UK;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("(KD]", timeZone0, locale0);
      MockDate mockDate0 = new MockDate(99, 1, 2, 1246, 0);
      fastDatePrinter0.format((Date) mockDate0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2213), "");
      Locale locale0 = Locale.forLanguageTag("");
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
      int[] intArray0 = new int[2];
      fastDatePrinter0.parseToken(".a*g}+0A~KH5 h", intArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      Locale locale0 = Locale.ENGLISH;
      FastDatePrinter.getTimeZoneDisplay(simpleTimeZone0, false, 1, locale0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
      fastDatePrinter0.getTimeZone();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      Locale locale0 = Locale.US;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
      fastDatePrinter0.getTimeZone();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2213), "");
      Locale locale0 = Locale.JAPAN;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
      fastDatePrinter0.getTimeZone();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(952, "pv[t^fU!NvK0}2<{#|)");
      Locale locale0 = Locale.JAPAN;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
      fastDatePrinter0.getTimeZone();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "0#WkHa6`Z.z}y", 2, 2, 1, 104, 1, 2, 1, 1);
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("0#WkHa6`Z.z}y", simpleTimeZone0, locale0);
      fastDatePrinter0.getTimeZone();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(Integer.MIN_VALUE, "]'cH>-z)_U:`uLqz");
      Locale locale0 = Locale.KOREA;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
      fastDatePrinter0.getPattern();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2213), "");
      Locale locale0 = Locale.forLanguageTag("");
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
      fastDatePrinter0.getMaxLengthEstimate();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2213), "");
      Locale locale0 = Locale.forLanguageTag("");
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0, locale0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      fastDatePrinter0.format(date0, (StringBuffer) null);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "Y");
      Locale locale0 = Locale.US;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      MockDate mockDate0 = new MockDate(1);
      fastDatePrinter0.format((Date) mockDate0, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("0#kHa6`&}y}", timeZone0, locale0);
      MockDate mockDate0 = new MockDate();
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      fastDatePrinter0.format((Date) mockDate0, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "Y");
      Locale locale0 = Locale.US;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
      MockDate mockDate0 = new MockDate(1);
      fastDatePrinter0.format((Date) mockDate0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2213), "");
      Locale locale0 = Locale.forLanguageTag("");
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0, locale0);
      fastDatePrinter0.format((Calendar) mockGregorianCalendar0, (StringBuffer) null);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRENCH;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("+6M", timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      StringBuffer stringBuffer0 = new StringBuffer("+6M");
      fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 2, 0, 2128, 1529);
      fastDatePrinter0.format((Calendar) mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      MockDate mockDate0 = new MockDate(1, 3, 120, 3, (-1858), 104);
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
      fastDatePrinter0.format((Object) mockDate0, (StringBuffer) null, fieldPosition0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertNotNull(locale0);
      
      MockDate mockDate0 = new MockDate(1);
      assertNotNull(mockDate0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      FieldPosition fieldPosition0 = new FieldPosition(0);
      assertEquals(0, fieldPosition0.getField());
      assertEquals("java.text.FieldPosition[field=0,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
      assertEquals(0, fieldPosition0.getEndIndex());
      assertEquals(0, fieldPosition0.getBeginIndex());
      assertNotNull(fieldPosition0);
      
      StringBuffer stringBuffer1 = fastDatePrinter0.format((Object) mockDate0, stringBuffer0, fieldPosition0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(0, fieldPosition0.getField());
      assertEquals("java.text.FieldPosition[field=0,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
      assertEquals(0, fieldPosition0.getEndIndex());
      assertEquals(0, fieldPosition0.getBeginIndex());
      assertEquals(0, stringBuffer1.length());
      assertEquals("", stringBuffer1.toString());
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2213), "");
      assertEquals((-2213), simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=-2213,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.forLanguageTag("");
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
      assertEquals((-2213), simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=-2213,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertNotNull(fastDatePrinter0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      
      StringBuffer stringBuffer0 = fastDatePrinter0.format(263L, (StringBuffer) null);
      assertEquals((-2213), simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=-2213,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertNull(stringBuffer0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2213), "");
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-2213), simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=,offset=-2213,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertNotNull(simpleTimeZone0);
      
      StringBuffer stringBuffer0 = new StringBuffer("");
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-2213), simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=,offset=-2213,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertNotNull(fastDatePrinter0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      
      StringBuffer stringBuffer1 = fastDatePrinter0.format((-1L), stringBuffer0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals((-2213), simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=,offset=-2213,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JP", locale0.getCountry());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", stringBuffer1.toString());
      assertEquals(0, stringBuffer1.length());
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2213), "");
      assertEquals((-2213), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=-2213,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", simpleTimeZone0.getID());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.forLanguageTag("");
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
      assertEquals((-2213), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=-2213,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      assertNotNull(fastDatePrinter0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      
      String string0 = fastDatePrinter0.format((long) (-2213));
      assertEquals((-2213), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=-2213,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2213), "");
      assertEquals("", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-2213), simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,offset=-2213,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.forLanguageTag("");
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
      assertEquals("", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-2213), simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,offset=-2213,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertNotNull(fastDatePrinter0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0, locale0);
      assertNotNull(mockGregorianCalendar0);
      
      StringBuffer stringBuffer0 = fastDatePrinter0.applyRules(mockGregorianCalendar0, (StringBuffer) null);
      assertEquals("", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-2213), simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,offset=-2213,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=,offset=-2213,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=19,MILLISECOND=107,ZONE_OFFSET=-2213,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertNull(stringBuffer0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2213), "");
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals((-2213), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=-2213,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertNotNull(simpleTimeZone0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      StringBuffer stringBuffer0 = new StringBuffer("");
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals((-2213), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=-2213,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      
      StringBuffer stringBuffer1 = fastDatePrinter0.applyRules(mockGregorianCalendar0, stringBuffer0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals((-2213), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=-2213,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(0, stringBuffer1.length());
      assertEquals("", stringBuffer1.toString());
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      
      // Undeclared exception!
      try { 
        fastDatePrinter0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.ITALIAN;
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("]", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals(1, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("]", fastDatePrinter0.getPattern());
      assertNotNull(fastDatePrinter0);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 3;
      // Undeclared exception!
      try { 
        fastDatePrinter0.parseToken("\"~", intArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Locale locale0 = Locale.UK;
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertNotNull(fastDatePrinter0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      
      int[] intArray0 = new int[7];
      // Undeclared exception!
      try { 
        fastDatePrinter0.parseToken((String) null, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertNotNull(fastDatePrinter0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        fastDatePrinter0.parseToken("", intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        FastDatePrinter.getTimeZoneDisplay((TimeZone) null, false, 0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      assertNotNull(fastDatePrinter0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      
      MockDate mockDate0 = new MockDate(1, 1, (-800), 2, 3, 104);
      assertNotNull(mockDate0);
      
      // Undeclared exception!
      try { 
        fastDatePrinter0.format((Date) mockDate0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.UK;
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("}h", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals(5, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("}h", fastDatePrinter0.getPattern());
      assertNotNull(fastDatePrinter0);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      
      // Undeclared exception!
      try { 
        fastDatePrinter0.format((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter$TwelveHourField", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.GERMAN;
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("z", fastDatePrinter0.getPattern());
      assertEquals(3, fastDatePrinter0.getMaxLengthEstimate());
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      
      // Undeclared exception!
      try { 
        fastDatePrinter0.format((-1L), (StringBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Locale locale0 = Locale.UK;
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertNotNull(fastDatePrinter0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      
      // Undeclared exception!
      try { 
        fastDatePrinter0.format(0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("Da8");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("Da8", timeZone0, locale0);
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(7, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("Da8", fastDatePrinter0.getPattern());
      assertNotNull(fastDatePrinter0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      // Undeclared exception!
      try { 
        fastDatePrinter0.applyRules(mockGregorianCalendar0, (StringBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter$UnpaddedNumberField", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Locale locale0 = new Locale("TU!ar1>{})zr", "[\"c", "");
      assertEquals("[\"C", locale0.getCountry());
      assertEquals("tu!ar1>{})zr_[\"C", locale0.toString());
      assertEquals("tu!ar1>{})zr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter((String) null, (TimeZone) null, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.ENGLISH;
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
      assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertNotNull(fastDatePrinter0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 1, 0, 2);
      assertNotNull(mockGregorianCalendar0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
      assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=1,MONTH=1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=1,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=2,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(0, stringBuffer1.length());
      assertEquals("", stringBuffer1.toString());
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        FastDatePrinter.getTimeZoneDisplay(timeZone0, true, 110, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal style: 110
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertNotNull(locale0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "0#kHa6`Z+.z}y}", 2, 2, 2, 86, 2, 2, 1, 62);
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertEquals(3600000, simpleTimeZone0.getDSTSavings());
      assertTrue(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=0#kHa6`Z+.z}y},offset=1,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=2,startDayOfWeek=2,startTime=86,startTimeMode=0,endMode=2,endMonth=2,endDay=2,endDayOfWeek=1,endTime=62,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("0#kHa6`Z+.z}y}", simpleTimeZone0.getID());
      assertNotNull(simpleTimeZone0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("0#kHa6`Z+.z}y}", simpleTimeZone0, locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertEquals(3600000, simpleTimeZone0.getDSTSavings());
      assertTrue(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=0#kHa6`Z+.z}y},offset=1,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=2,startDayOfWeek=2,startTime=86,startTimeMode=0,endMode=2,endMonth=2,endDay=2,endDayOfWeek=1,endTime=62,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("0#kHa6`Z+.z}y}", simpleTimeZone0.getID());
      assertEquals("0#kHa6`Z+.z}y}", fastDatePrinter0.getPattern());
      assertEquals(36, fastDatePrinter0.getMaxLengthEstimate());
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      
      String string0 = fastDatePrinter0.format(971L);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertEquals(3600000, simpleTimeZone0.getDSTSavings());
      assertTrue(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=0#kHa6`Z+.z}y},offset=1,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=2,startDayOfWeek=2,startTime=86,startTimeMode=0,endMode=2,endMonth=2,endDay=2,endDayOfWeek=1,endTime=62,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("0#kHa6`Z+.z}y}", simpleTimeZone0.getID());
      assertEquals("0#kHa6`Z+.z}y}", fastDatePrinter0.getPattern());
      assertEquals(36, fastDatePrinter0.getMaxLengthEstimate());
      assertNotNull(string0);
      assertEquals("0#11AM6`+0100+.GMT+01:00}1970}", string0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertNotNull(locale0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "0#WkHa6`Z.z}y", 2, 2, 1, 104, 1, 2, 1, 1);
      assertTrue(simpleTimeZone0.useDaylightTime());
      assertEquals("0#WkHa6`Z.z}y", simpleTimeZone0.getID());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertEquals(3600000, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=0#WkHa6`Z.z}y,offset=1,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=2,startDayOfWeek=1,startTime=104,startTimeMode=0,endMode=2,endMonth=1,endDay=2,endDayOfWeek=1,endTime=1,endTimeMode=0]", simpleTimeZone0.toString());
      assertNotNull(simpleTimeZone0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("0#WkHa6`Z.z}y", simpleTimeZone0, locale0);
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertTrue(simpleTimeZone0.useDaylightTime());
      assertEquals("0#WkHa6`Z.z}y", simpleTimeZone0.getID());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertEquals(3600000, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=0#WkHa6`Z.z}y,offset=1,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=2,startDayOfWeek=1,startTime=104,startTimeMode=0,endMode=2,endMonth=1,endDay=2,endDayOfWeek=1,endTime=1,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(38, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("0#WkHa6`Z.z}y", fastDatePrinter0.getPattern());
      assertNotNull(fastDatePrinter0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1815, 1, 1912);
      assertNotNull(mockGregorianCalendar0);
      
      String string0 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0);
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertTrue(simpleTimeZone0.useDaylightTime());
      assertEquals("0#WkHa6`Z.z}y", simpleTimeZone0.getID());
      assertEquals(1, simpleTimeZone0.getRawOffset());
      assertEquals(3600000, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=0#WkHa6`Z.z}y,offset=1,dstSavings=3600000,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=2,startDayOfWeek=1,startTime=104,startTimeMode=0,endMode=2,endMonth=1,endDay=2,endDayOfWeek=1,endTime=1,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(38, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("0#WkHa6`Z.z}y", fastDatePrinter0.getPattern());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-4723574400000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1820,MONTH=3,WEEK_OF_YEAR=18,WEEK_OF_MONTH=5,DAY_OF_MONTH=26,DAY_OF_YEAR=117,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertNotNull(string0);
      assertEquals("0#5240AM6`+0000.GMT+00:00}1820", string0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = new Locale("6Z0h", "6Z0h", "6Z0h");
      assertEquals("6z0h_6Z0H_6Z0h", locale0.toString());
      assertEquals("6z0h", locale0.getLanguage());
      assertEquals("6Z0H", locale0.getCountry());
      assertEquals("6Z0h", locale0.getVariant());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("6Z0h", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("6z0h_6Z0H_6Z0h", locale0.toString());
      assertEquals("6z0h", locale0.getLanguage());
      assertEquals("6Z0H", locale0.getCountry());
      assertEquals("6Z0h", locale0.getVariant());
      assertEquals(11, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("6Z0h", fastDatePrinter0.getPattern());
      assertNotNull(fastDatePrinter0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      
      String string0 = fastDatePrinter0.format(0L);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("6z0h_6Z0H_6Z0h", locale0.toString());
      assertEquals("6z0h", locale0.getLanguage());
      assertEquals("6Z0H", locale0.getCountry());
      assertEquals("6Z0h", locale0.getVariant());
      assertEquals(11, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("6Z0h", fastDatePrinter0.getPattern());
      assertNotNull(string0);
      assertEquals("6+0000012", string0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      assertNotNull(mockGregorianCalendar0);
      
      StringBuffer stringBuffer0 = new StringBuffer("+6M");
      assertEquals(3, stringBuffer0.length());
      assertEquals("+6M", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("{/DSS", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("{/DSS", fastDatePrinter0.getPattern());
      assertEquals(8, fastDatePrinter0.getMaxLengthEstimate());
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      
      StringBuffer stringBuffer1 = fastDatePrinter0.applyRules(mockGregorianCalendar0, stringBuffer0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("+6M{/45320", stringBuffer0.toString());
      assertEquals(10, stringBuffer0.length());
      assertEquals("{/DSS", fastDatePrinter0.getPattern());
      assertEquals(8, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(10, stringBuffer1.length());
      assertEquals("+6M{/45320", stringBuffer1.toString());
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("0#kHa6`Z+.z}y}", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("0#kHa6`Z+.z}y}", fastDatePrinter0.getPattern());
      assertEquals(30, fastDatePrinter0.getMaxLengthEstimate());
      assertNotNull(fastDatePrinter0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, (-666), 171);
      assertNotNull(mockGregorianCalendar0);
      
      String string0 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("0#kHa6`Z+.z}y}", fastDatePrinter0.getPattern());
      assertEquals(30, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-63904204800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=57,MONTH=11,WEEK_OF_YEAR=51,WEEK_OF_MONTH=3,DAY_OF_MONTH=18,DAY_OF_YEAR=353,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertNotNull(string0);
      assertEquals("0#240AM6`+0000+.GMT}0057}", string0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("yydM", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("yydM", fastDatePrinter0.getPattern());
      assertEquals(8, fastDatePrinter0.getMaxLengthEstimate());
      assertNotNull(fastDatePrinter0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertNotNull(date0);
      
      String string0 = fastDatePrinter0.format(date0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("yydM", fastDatePrinter0.getPattern());
      assertEquals(8, fastDatePrinter0.getMaxLengthEstimate());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertNotNull(string0);
      assertEquals("821510", string0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      
      Locale locale1 = new Locale("&)lT");
      assertEquals("&)lt", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("&)lt", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertFalse(locale1.equals((Object)locale0));
      assertNotNull(locale1);
      
      FastDatePrinter fastDatePrinter1 = new FastDatePrinter("", timeZone0, locale1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("&)lt", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("&)lt", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", fastDatePrinter1.getPattern());
      assertEquals(0, fastDatePrinter1.getMaxLengthEstimate());
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(fastDatePrinter1.equals((Object)fastDatePrinter0));
      assertNotNull(fastDatePrinter1);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      
      boolean boolean0 = fastDatePrinter1.equals(fastDatePrinter0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals("&)lt", locale1.getLanguage());
      assertEquals("", locale1.getVariant());
      assertEquals("", locale1.getCountry());
      assertEquals("&)lt", locale1.toString());
      assertEquals("", locale1.getISO3Country());
      assertEquals("", fastDatePrinter1.getPattern());
      assertEquals(0, fastDatePrinter1.getMaxLengthEstimate());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(fastDatePrinter0.equals((Object)fastDatePrinter1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(fastDatePrinter1.equals((Object)fastDatePrinter0));
      assertNotSame(locale0, locale1);
      assertNotSame(fastDatePrinter0, fastDatePrinter1);
      assertNotSame(locale1, locale0);
      assertNotSame(fastDatePrinter1, fastDatePrinter0);
      assertFalse(boolean0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.ITALIAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("4H'", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("4H'", fastDatePrinter0.getPattern());
      assertEquals(5, fastDatePrinter0.getMaxLengthEstimate());
      assertNotNull(fastDatePrinter0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "4H'", 3, 0, 1, 0, 1, 0, 1, 1, 1);
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=4H',offset=0,dstSavings=1,useDaylight=false,startYear=0,startMode=0,startMonth=3,startDay=0,startDayOfWeek=1,startTime=0,startTimeMode=0,endMode=0,endMonth=1,endDay=0,endDayOfWeek=1,endTime=1,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("4H'", simpleTimeZone0.getID());
      assertNotNull(simpleTimeZone0);
      
      FastDatePrinter fastDatePrinter1 = new FastDatePrinter("4H'", simpleTimeZone0, locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=4H',offset=0,dstSavings=1,useDaylight=false,startYear=0,startMode=0,startMonth=3,startDay=0,startDayOfWeek=1,startTime=0,startTimeMode=0,endMode=0,endMonth=1,endDay=0,endDayOfWeek=1,endTime=1,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("4H'", simpleTimeZone0.getID());
      assertEquals(5, fastDatePrinter1.getMaxLengthEstimate());
      assertEquals("4H'", fastDatePrinter1.getPattern());
      assertFalse(fastDatePrinter1.equals((Object)fastDatePrinter0));
      assertNotNull(fastDatePrinter1);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      
      boolean boolean0 = fastDatePrinter0.equals(fastDatePrinter1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("4H'", fastDatePrinter0.getPattern());
      assertEquals(5, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=4H',offset=0,dstSavings=1,useDaylight=false,startYear=0,startMode=0,startMonth=3,startDay=0,startDayOfWeek=1,startTime=0,startTimeMode=0,endMode=0,endMonth=1,endDay=0,endDayOfWeek=1,endTime=1,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("4H'", simpleTimeZone0.getID());
      assertEquals(5, fastDatePrinter1.getMaxLengthEstimate());
      assertEquals("4H'", fastDatePrinter1.getPattern());
      assertFalse(fastDatePrinter0.equals((Object)fastDatePrinter1));
      assertFalse(fastDatePrinter1.equals((Object)fastDatePrinter0));
      assertNotSame(fastDatePrinter0, fastDatePrinter1);
      assertNotSame(fastDatePrinter1, fastDatePrinter0);
      assertFalse(boolean0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(3, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("z", fastDatePrinter0.getPattern());
      assertNotNull(fastDatePrinter0);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      
      FastDatePrinter fastDatePrinter1 = new FastDatePrinter("", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(0, fastDatePrinter1.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter1.getPattern());
      assertFalse(fastDatePrinter1.equals((Object)fastDatePrinter0));
      assertNotNull(fastDatePrinter1);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      
      boolean boolean0 = fastDatePrinter1.equals(fastDatePrinter0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(3, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("z", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter1.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter1.getPattern());
      assertFalse(fastDatePrinter0.equals((Object)fastDatePrinter1));
      assertFalse(fastDatePrinter1.equals((Object)fastDatePrinter0));
      assertNotSame(fastDatePrinter0, fastDatePrinter1);
      assertNotSame(fastDatePrinter1, fastDatePrinter0);
      assertFalse(boolean0);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter(".Zm~9MMh", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(18, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(".Zm~9MMh", fastDatePrinter0.getPattern());
      assertNotNull(fastDatePrinter0);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      
      boolean boolean0 = fastDatePrinter0.equals(".Zm~9MMh");
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(18, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(".Zm~9MMh", fastDatePrinter0.getPattern());
      assertFalse(boolean0);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals(3, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("z", fastDatePrinter0.getPattern());
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      
      boolean boolean0 = fastDatePrinter0.equals(fastDatePrinter0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals(3, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("z", fastDatePrinter0.getPattern());
      assertTrue(boolean0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2213), "");
      assertEquals((-2213), simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=-2213,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.forLanguageTag("");
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
      assertEquals((-2213), simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=-2213,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      assertNotNull(fastDatePrinter0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      FieldPosition fieldPosition0 = new FieldPosition((Format.Field) null, 3);
      assertEquals("java.text.FieldPosition[field=3,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
      assertEquals(0, fieldPosition0.getEndIndex());
      assertEquals(0, fieldPosition0.getBeginIndex());
      assertEquals(3, fieldPosition0.getField());
      assertNotNull(fieldPosition0);
      
      // Undeclared exception!
      try { 
        fastDatePrinter0.format((Object) null, stringBuffer0, fieldPosition0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: <null>
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("z", fastDatePrinter0.getPattern());
      assertEquals(3, fastDatePrinter0.getMaxLengthEstimate());
      assertNotNull(fastDatePrinter0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      
      Long long0 = new Long(0L);
      assertNotNull(long0);
      assertEquals(0L, (long)long0);
      
      // Undeclared exception!
      try { 
        fastDatePrinter0.format((Object) long0, (StringBuffer) null, (FieldPosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("0#kHa6`Z&}y}", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals(26, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("0#kHa6`Z&}y}", fastDatePrinter0.getPattern());
      assertNotNull(fastDatePrinter0);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1000, 2, 3);
      assertNotNull(mockGregorianCalendar0);
      
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, (-2414));
      assertEquals((-2414), fieldPosition0.getField());
      assertEquals(0, fieldPosition0.getBeginIndex());
      assertEquals(0, fieldPosition0.getEndIndex());
      assertNotNull(fieldPosition0);
      
      // Undeclared exception!
      try { 
        fastDatePrinter0.format((Object) mockGregorianCalendar0, (StringBuffer) null, fieldPosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter$StringLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("z", fastDatePrinter0.getPattern());
      assertEquals(3, fastDatePrinter0.getMaxLengthEstimate());
      assertNotNull(fastDatePrinter0);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      
      MockDate mockDate0 = new MockDate(1);
      assertNotNull(mockDate0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      FieldPosition fieldPosition0 = new FieldPosition(0);
      assertEquals(0, fieldPosition0.getBeginIndex());
      assertEquals(0, fieldPosition0.getEndIndex());
      assertEquals(0, fieldPosition0.getField());
      assertEquals("java.text.FieldPosition[field=0,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
      assertNotNull(fieldPosition0);
      
      StringBuffer stringBuffer1 = fastDatePrinter0.format((Object) mockDate0, stringBuffer0, fieldPosition0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("z", fastDatePrinter0.getPattern());
      assertEquals(3, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", mockDate0.toString());
      assertEquals("GMT", stringBuffer0.toString());
      assertEquals(3, stringBuffer0.length());
      assertEquals(0, fieldPosition0.getBeginIndex());
      assertEquals(0, fieldPosition0.getEndIndex());
      assertEquals(0, fieldPosition0.getField());
      assertEquals("java.text.FieldPosition[field=0,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
      assertEquals("GMT", stringBuffer1.toString());
      assertEquals(3, stringBuffer1.length());
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Locale locale0 = Locale.UK;
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertNotNull(locale0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("xu}kW", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: x
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("v0`{p'", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: v
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.GERMAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("u;6H", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: u
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("7'ol+'t", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: t
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("{:.#&4sy", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("FR", locale0.getCountry());
      assertEquals(14, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("{:.#&4sy", fastDatePrinter0.getPattern());
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 2, 490);
      assertNotNull(mockGregorianCalendar0);
      
      mockGregorianCalendar0.setLenient(false);
      assertFalse(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=0,MONTH=2,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=490,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      
      // Undeclared exception!
      try { 
        fastDatePrinter0.format((Calendar) mockGregorianCalendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // YEAR
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("rj )P ", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: r
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("&ZkHWqL9R/MrOe", (TimeZone) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: q
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      assertEquals("de", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2209), "pf~EO ?S)/KoA8G% ");
      assertEquals("java.util.SimpleTimeZone[id=pf~EO ?S)/KoA8G% ,offset=-2209,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("pf~EO ?S)/KoA8G% ", simpleTimeZone0.getID());
      assertEquals((-2209), simpleTimeZone0.getRawOffset());
      assertNotNull(simpleTimeZone0);
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("pf~EO ?S)/KoA8G% ", simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: p
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.UK;
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("3o:Md7]LpOcdnD/[;i", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getCountry());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ja", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("$Mw[n)X?U'bpEztMVP", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: n
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter(" lYCj`O,Q", (TimeZone) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: l
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Locale locale0 = Locale.UK;
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("jj2nWH((", (TimeZone) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: jj
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-587), "8BRq:+");
      assertEquals("java.util.SimpleTimeZone[id=8BRq:+,offset=-587,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("8BRq:+", simpleTimeZone0.getID());
      assertEquals((-587), simpleTimeZone0.getRawOffset());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("i8<T#*o(0Vv!MJ", simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: i
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("{yg~G7P");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("{yg~G7P", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: g
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Locale locale0 = Locale.UK;
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("Ff~(g#x", (TimeZone) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: f
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_CA", locale0.toString());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("50!%]y@'IWM+'&M~eC", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: e
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Locale locale0 = Locale.UK;
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertNotNull(locale0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("coreano", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: c
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("3b89N6L9(y#=2!AYG8", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: b
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Locale locale0 = Locale.UK;
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("YPX:Fb=~", (TimeZone) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Y
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-482), "");
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,offset=-482,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals((-482), simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("FX-FZ", simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: X
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("DFdVJ7^ H9'd,i\"", (TimeZone) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: V
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fr_CA", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("UdX", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: U
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("KTY", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("it_IT", locale0.toString());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("<_MM*Ra(320u1iE|", (TimeZone) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: R
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "QQudzvjpfc:");
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("QQudzvjpfc:", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=QQudzvjpfc:,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("QQudzvjpfc:", simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: QQ
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.GERMAN;
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("P}*/&mwPgy,7%", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: P
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Locale locale0 = Locale.UK;
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_GB", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("F~EK<O%zN2CGu_*", (TimeZone) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: O
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.GERMAN;
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("de", locale0.toString());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("_K%w>Ns4fzK", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: N
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.UK;
      assertEquals("en", locale0.getLanguage());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("@Lpq", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: L
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("(KD]", timeZone0, locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(11, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("(KD]", fastDatePrinter0.getPattern());
      assertNotNull(fastDatePrinter0);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      
      MockDate mockDate0 = new MockDate(3, 0, 1246, 0, 0, 1);
      assertNotNull(mockDate0);
      
      String string0 = fastDatePrinter0.format((Date) mockDate0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(11, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("(KD]", fastDatePrinter0.getPattern());
      assertEquals("Wed May 30 00:00:01 GMT 1906", mockDate0.toString());
      assertNotNull(string0);
      assertEquals("(0150]", string0);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("ZZ{M1mJ^'zz-'", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: J
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.UK;
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GB", locale0.getCountry());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("5a%@''I+'&M~\"C", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: I
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-259), "A\"Pt3+dM;R:]+");
      assertEquals("A\"Pt3+dM;R:]+", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-259), simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=A\"Pt3+dM;R:]+,offset=-259,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.forLanguageTag("G[{");
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("G[{", simpleTimeZone0, locale0);
      assertEquals("A\"Pt3+dM;R:]+", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-259), simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=A\"Pt3+dM;R:]+,offset=-259,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("G[{", fastDatePrinter0.getPattern());
      assertEquals(4, fastDatePrinter0.getMaxLengthEstimate());
      assertNotNull(fastDatePrinter0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "A\"Pt3+dM;R:]+");
      assertEquals(14, stringBuffer0.length());
      assertEquals("A\"Pt3+dM;R:]+", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      // Undeclared exception!
      try { 
        fastDatePrinter0.format((Calendar) null, stringBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter$TextField", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("{yg~G7P");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("/E", timeZone0, locale0);
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(4, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("/E", fastDatePrinter0.getPattern());
      assertNotNull(fastDatePrinter0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("0F`hhC^zl3A3xyY", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: C
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(449, "Negative values should not be possible");
      assertEquals("Negative values should not be possible", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(449, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=Negative values should not be possible,offset=449,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("de_DE", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("8BRq:+", simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: B
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("G[{");
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertNotNull(locale0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("A\"Pt3+dM;R:]+", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: A
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter(".Zm~9MMh", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals(".Zm~9MMh", fastDatePrinter0.getPattern());
      assertEquals(18, fastDatePrinter0.getMaxLengthEstimate());
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 1, 2, 1646, 1);
      assertNotNull(mockGregorianCalendar0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) ".Zm~9MMh");
      assertEquals(8, stringBuffer0.length());
      assertEquals(".Zm~9MMh", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      StringBuffer stringBuffer1 = fastDatePrinter0.applyRules(mockGregorianCalendar0, stringBuffer0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals(".Zm~9MMh", fastDatePrinter0.getPattern());
      assertEquals(18, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62095543140000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2,MONTH=3,WEEK_OF_YEAR=15,WEEK_OF_MONTH=3,DAY_OF_MONTH=11,DAY_OF_YEAR=101,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=1,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(20, stringBuffer0.length());
      assertEquals(".Zm~9MMh.+00001~9042", stringBuffer0.toString());
      assertEquals(".Zm~9MMh.+00001~9042", stringBuffer1.toString());
      assertEquals(20, stringBuffer1.length());
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("dd!{:.#&4y", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("dd!{:.#&4y", fastDatePrinter0.getPattern());
      assertEquals(13, fastDatePrinter0.getMaxLengthEstimate());
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      
      MockDate mockDate0 = new MockDate(1, 3, 0);
      assertNotNull(mockDate0);
      
      String string0 = fastDatePrinter0.format((Date) mockDate0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("dd!{:.#&4y", fastDatePrinter0.getPattern());
      assertEquals(13, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("Sun Mar 31 00:00:00 GMT 1901", mockDate0.toString());
      assertNotNull(string0);
      assertEquals("31!{:.#&41901", string0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = new Locale("6Z0h", "6Z0h", "6Z0h");
      assertEquals("6Z0H", locale0.getCountry());
      assertEquals("6Z0h", locale0.getVariant());
      assertEquals("6z0h_6Z0H_6Z0h", locale0.toString());
      assertEquals("6z0h", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("6Z0h", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("6Z0H", locale0.getCountry());
      assertEquals("6Z0h", locale0.getVariant());
      assertEquals("6z0h_6Z0H_6Z0h", locale0.toString());
      assertEquals("6z0h", locale0.getLanguage());
      assertEquals(11, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("6Z0h", fastDatePrinter0.getPattern());
      assertNotNull(fastDatePrinter0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      StringBuffer stringBuffer0 = new StringBuffer("&");
      assertEquals(1, stringBuffer0.length());
      assertEquals("&", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      FieldPosition fieldPosition0 = new FieldPosition(16);
      assertEquals(16, fieldPosition0.getField());
      assertEquals("java.text.FieldPosition[field=16,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
      assertEquals(0, fieldPosition0.getBeginIndex());
      assertEquals(0, fieldPosition0.getEndIndex());
      assertNotNull(fieldPosition0);
      
      // Undeclared exception!
      try { 
        fastDatePrinter0.format(object0, stringBuffer0, fieldPosition0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: java.lang.Object
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("z", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals(3, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("z", fastDatePrinter0.getPattern());
      assertNotNull(fastDatePrinter0);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      
      String string0 = fastDatePrinter0.getPattern();
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals(3, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("z", fastDatePrinter0.getPattern());
      assertNotNull(string0);
      assertEquals("z", string0);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "0#kHa6`Z+.z}y}");
      assertEquals("java.util.SimpleTimeZone[id=0#kHa6`Z+.z}y},offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertEquals("0#kHa6`Z+.z}y}", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.TAIWAN;
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("0#kHa6`Z+.z}y}", simpleTimeZone0, locale0);
      assertEquals("java.util.SimpleTimeZone[id=0#kHa6`Z+.z}y},offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertEquals("0#kHa6`Z+.z}y}", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("0#kHa6`Z+.z}y}", fastDatePrinter0.getPattern());
      assertEquals(36, fastDatePrinter0.getMaxLengthEstimate());
      assertNotNull(fastDatePrinter0);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      assertEquals("", stringWriter0.toString());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      StringBuffer stringBuffer1 = fastDatePrinter0.format((long) (-1), stringBuffer0);
      assertEquals("java.util.SimpleTimeZone[id=0#kHa6`Z+.z}y},offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertEquals("0#kHa6`Z+.z}y}", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("0#kHa6`Z+.z}y}", fastDatePrinter0.getPattern());
      assertEquals(36, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("0#2323\u4E0B\u53486`-0000+.GMT+00:00}1969}", stringWriter0.toString());
      assertEquals("0#2323\u4E0B\u53486`-0000+.GMT+00:00}1969}", stringBuffer0.toString());
      assertEquals(32, stringBuffer0.length());
      assertEquals(32, stringBuffer1.length());
      assertEquals("0#2323\u4E0B\u53486`-0000+.GMT+00:00}1969}", stringBuffer1.toString());
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertNotNull(stringBuffer1);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("0#WkHa6`Z.z}y", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("0#WkHa6`Z.z}y", fastDatePrinter0.getPattern());
      assertEquals(32, fastDatePrinter0.getMaxLengthEstimate());
      assertNotNull(fastDatePrinter0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      // Undeclared exception!
      try { 
        fastDatePrinter0.format((Date) null, stringBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Locale locale0 = Locale.UK;
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      
      fastDatePrinter0.hashCode();
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "0#kHa6`Z+.z}y}");
      Locale locale0 = Locale.TAIWAN;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("0#kHa6`Z+.z}y}", simpleTimeZone0, locale0);
      fastDatePrinter0.getLocale();
      assertEquals(36, fastDatePrinter0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "0#kHa6`Z+.z}y}");
      Locale locale0 = Locale.TAIWAN;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("0#kHa6`Z+.z}y}", simpleTimeZone0, locale0);
      String string0 = fastDatePrinter0.toString();
      assertEquals("FastDatePrinter[0#kHa6`Z+.z}y},zh_TW,0#kHa6`Z+.z}y}]", string0);
      assertEquals(36, fastDatePrinter0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "0#kHa6`Z+.z}y}");
      Locale locale0 = Locale.TAIWAN;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("0#kHa6`Z+.z}y}", simpleTimeZone0, locale0);
      int int0 = fastDatePrinter0.getMaxLengthEstimate();
      assertEquals(36, int0);
  }
}
