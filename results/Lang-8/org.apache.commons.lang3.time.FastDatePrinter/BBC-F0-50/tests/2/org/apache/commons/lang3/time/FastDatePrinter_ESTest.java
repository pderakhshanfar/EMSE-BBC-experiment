/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 05:10:12 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.text.FieldPosition;
import java.text.Format;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang3.time.FastDatePrinter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDatePrinter_ESTest extends FastDatePrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("M%0m(|]s3");
      Locale locale0 = Locale.FRANCE;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter(":kk|", timeZone0, locale0);
      fastDatePrinter0.format((long) 1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("S{ay0m<", (TimeZone) null, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1000, 1, 3);
      StringBuffer stringBuffer0 = new StringBuffer("S{ay0m<");
      fastDatePrinter0.applyRules(mockGregorianCalendar0, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("S{a7y0m<", (TimeZone) null, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(114, (-1492), 2);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "S{a7y0m<");
      fastDatePrinter0.applyRules(mockGregorianCalendar0, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(99, "Q4,u?-Ir>D");
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("S{ay0m<", simpleTimeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(119, (-222), 2);
      StringBuffer stringBuffer0 = new StringBuffer("S{ay0m<");
      fastDatePrinter0.applyRules(mockGregorianCalendar0, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Locale locale0 = Locale.UK;
      TimeZone timeZone0 = TimeZone.getTimeZone("M%0m(|]s3");
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%0m(|]s3", timeZone0, locale0);
      MockDate mockDate0 = new MockDate((-2468), 1, 31, (-1569), 2, 85);
      fastDatePrinter0.format((Date) mockDate0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(99, "S{ay0m<");
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("S{ay0m<", simpleTimeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      fastDatePrinter0.applyRules(mockGregorianCalendar0, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1039, "");
      Locale locale0 = Locale.KOREA;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("mSm'&YyS|\"%St}=zhAW", simpleTimeZone0, locale0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.UK;
      Locale locale1 = Locale.PRC;
      FastDatePrinter.getTimeZoneDisplay(timeZone0, false, 1, locale0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
      int[] intArray0 = new int[5];
      fastDatePrinter0.parseToken("E", intArray0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      TimeZone timeZone0 = TimeZone.getDefault();
      FastDatePrinter.getTimeZoneDisplay(timeZone0, false, 0, locale0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Locale locale0 = Locale.ITALY;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
      fastDatePrinter0.getTimeZone();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      Locale locale0 = Locale.KOREAN;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
      fastDatePrinter0.getTimeZone();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-723), "hz");
      Locale locale0 = Locale.KOREA;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("hz", simpleTimeZone0, locale0);
      fastDatePrinter0.getTimeZone();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Locale locale0 = Locale.UK;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
      fastDatePrinter0.getPattern();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      TimeZone timeZone0 = TimeZone.getTimeZone("PH< #KlK");
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      fastDatePrinter0.getMaxLengthEstimate();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1039, "");
      Locale locale0 = Locale.KOREA;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      fastDatePrinter0.format(date0, (StringBuffer) null);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1039, "");
      Locale locale0 = Locale.KOREA;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      fastDatePrinter0.format((Date) mockDate0, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1039, "");
      Locale locale0 = Locale.KOREA;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
      MockDate mockDate0 = new MockDate(2, 3, 119);
      StringWriter stringWriter0 = new StringWriter(108);
      StringWriter stringWriter1 = stringWriter0.append('\"');
      StringBuffer stringBuffer0 = stringWriter1.getBuffer();
      fastDatePrinter0.format((Date) mockDate0, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1039, "");
      Locale locale0 = Locale.KOREA;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
      MockDate mockDate0 = new MockDate((-921), 700, (-628), 0, (-628), (-1398));
      fastDatePrinter0.format((Date) mockDate0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.KOREAN;
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      
      StringBuffer stringBuffer0 = fastDatePrinter0.format((Calendar) null, (StringBuffer) null);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      assertNull(stringBuffer0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1039, "");
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(1039, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=,offset=1039,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(1039, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=,offset=1039,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      
      StringBuffer stringBuffer0 = new StringBuffer(0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 0, 3600000, 3600000, (-2052), 0);
      assertNotNull(mockGregorianCalendar0);
      
      StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(1039, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=,offset=1039,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=3,MONTH=0,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=3600000,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=3600000,HOUR_OF_DAY=3600000,MINUTE=-2052,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(0, stringBuffer1.length());
      assertEquals("", stringBuffer1.toString());
      assertNotNull(stringBuffer1);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1039, "");
      assertEquals("", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=,offset=1039,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1039, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("/m", simpleTimeZone0, locale0);
      assertEquals("", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=,offset=1039,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1039, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertEquals("/m", fastDatePrinter0.getPattern());
      assertEquals(5, fastDatePrinter0.getMaxLengthEstimate());
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      assertNotNull(mockGregorianCalendar0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      StringBuffer stringBuffer1 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
      assertEquals("", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=,offset=1039,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1039, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertEquals("/m", fastDatePrinter0.getPattern());
      assertEquals(5, fastDatePrinter0.getMaxLengthEstimate());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("/21", stringBuffer0.toString());
      assertEquals(3, stringBuffer0.length());
      assertEquals("/21", stringBuffer1.toString());
      assertEquals(3, stringBuffer1.length());
      assertNotNull(stringBuffer1);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertNotNull(locale0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0, locale0);
      assertNotNull(mockGregorianCalendar0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      
      String string0 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      
      FieldPosition fieldPosition0 = new FieldPosition((Format.Field) null, 3);
      assertEquals("java.text.FieldPosition[field=3,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
      assertEquals(0, fieldPosition0.getBeginIndex());
      assertEquals(3, fieldPosition0.getField());
      assertEquals(0, fieldPosition0.getEndIndex());
      assertNotNull(fieldPosition0);
      
      Calendar calendar0 = MockCalendar.getInstance();
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertNotNull(calendar0);
      
      StringBuffer stringBuffer0 = fastDatePrinter0.format((Object) calendar0, (StringBuffer) null, fieldPosition0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("java.text.FieldPosition[field=3,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
      assertEquals(0, fieldPosition0.getBeginIndex());
      assertEquals(3, fieldPosition0.getField());
      assertEquals(0, fieldPosition0.getEndIndex());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertNull(stringBuffer0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertNotNull(calendar0);
      
      StringBuffer stringBuffer0 = new StringBuffer("");
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      StringBuffer stringBuffer1 = fastDatePrinter0.format((Object) calendar0, stringBuffer0, (FieldPosition) null);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer1.toString());
      assertEquals(0, stringBuffer1.length());
      assertNotNull(stringBuffer1);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      
      StringBuffer stringBuffer0 = fastDatePrinter0.format((-1L), (StringBuffer) null);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      assertNull(stringBuffer0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1039, "");
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(1039, simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,offset=1039,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(1039, simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,offset=1039,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      StringBuffer stringBuffer1 = fastDatePrinter0.format((long) 2, stringBuffer0);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(1039, simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,offset=1039,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer1.toString());
      assertEquals(0, stringBuffer1.length());
      assertNotNull(stringBuffer1);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertNotNull(locale0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1000, "", 4007, 0, 15, 96, 114, 0, 114, 0);
      assertEquals(1000, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=,offset=1000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=4007,startDay=0,startDayOfWeek=15,startTime=96,startTimeMode=0,endMode=0,endMonth=114,endDay=0,endDayOfWeek=114,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", simpleTimeZone0.getID());
      assertNotNull(simpleTimeZone0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals(1000, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=,offset=1000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=4007,startDay=0,startDayOfWeek=15,startTime=96,startTimeMode=0,endMode=0,endMonth=114,endDay=0,endDayOfWeek=114,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertNotNull(fastDatePrinter0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      
      String string0 = fastDatePrinter0.format((long) 4007);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals(1000, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=,offset=1000,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=4007,startDay=0,startDayOfWeek=15,startTime=96,startTimeMode=0,endMode=0,endMonth=114,endDay=0,endDayOfWeek=114,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 118, 355, 118, 0, 355, 0, 355);
      assertEquals("", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=355,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=118,startTime=355,startTimeMode=0,endMode=0,endMonth=118,endDay=0,endDayOfWeek=355,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
      assertEquals("", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=355,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=118,startTime=355,startTimeMode=0,endMode=0,endMonth=118,endDay=0,endDayOfWeek=355,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      assertNotNull(fastDatePrinter0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      
      StringBuffer stringBuffer0 = fastDatePrinter0.applyRules((Calendar) null, (StringBuffer) null);
      assertEquals("", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=355,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=118,startTime=355,startTimeMode=0,endMode=0,endMonth=118,endDay=0,endDayOfWeek=355,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      assertNull(stringBuffer0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 118, 355, 118, 0, 355, 0, 355);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=355,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=118,startTime=355,startTimeMode=0,endMode=0,endMonth=118,endDay=0,endDayOfWeek=355,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=355,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=118,startTime=355,startTimeMode=0,endMode=0,endMonth=118,endDay=0,endDayOfWeek=355,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertNotNull(fastDatePrinter0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      assertNotNull(mockGregorianCalendar0);
      
      StringBuffer stringBuffer0 = new StringBuffer(355);
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      StringBuffer stringBuffer1 = fastDatePrinter0.applyRules(mockGregorianCalendar0, stringBuffer0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=355,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=118,startTime=355,startTimeMode=0,endMode=0,endMonth=118,endDay=0,endDayOfWeek=355,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertEquals(0, stringBuffer1.length());
      assertEquals("", stringBuffer1.toString());
      assertNotNull(stringBuffer1);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertNotNull(fastDatePrinter0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      
      int[] intArray0 = new int[2];
      // Undeclared exception!
      try { 
        fastDatePrinter0.parseToken("", intArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("G", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("G", fastDatePrinter0.getPattern());
      assertEquals(2, fastDatePrinter0.getMaxLengthEstimate());
      assertNotNull(fastDatePrinter0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      
      // Undeclared exception!
      try { 
        fastDatePrinter0.parseToken((String) null, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("'", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("'", fastDatePrinter0.getPattern());
      assertNotNull(fastDatePrinter0);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        fastDatePrinter0.parseToken("", intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(289, "");
      assertEquals("java.util.SimpleTimeZone[id=,offset=289,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(289, simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertNotNull(simpleTimeZone0);
      
      // Undeclared exception!
      try { 
        FastDatePrinter.getTimeZoneDisplay(simpleTimeZone0, true, 1, (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter$TimeZoneDisplayKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1039, "");
      assertEquals(1039, simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=,offset=1039,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertEquals(1039, simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=,offset=1039,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=,offset=1039,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=22,MILLISECOND=359,ZONE_OFFSET=1039,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertNotNull(date0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertNotNull(fastDatePrinter0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      
      // Undeclared exception!
      try { 
        fastDatePrinter0.format(date0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Locale locale0 = Locale.UK;
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertNotNull(locale0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("M%0m(|]s3");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%0m(|]s3", timeZone0, locale0);
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("M%0m(|]s3", fastDatePrinter0.getPattern());
      assertEquals(16, fastDatePrinter0.getMaxLengthEstimate());
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      
      // Undeclared exception!
      try { 
        fastDatePrinter0.format((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter$UnpaddedMonthField", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("G", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals(2, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("G", fastDatePrinter0.getPattern());
      assertNotNull(fastDatePrinter0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      
      // Undeclared exception!
      try { 
        fastDatePrinter0.format(723L, (StringBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter$TextField", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      assertNotNull(fastDatePrinter0);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      
      // Undeclared exception!
      try { 
        fastDatePrinter0.format(1L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      
      // Undeclared exception!
      try { 
        fastDatePrinter0.equals(fastDatePrinter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1039, "");
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=1039,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1039, simpleTimeZone0.getRawOffset());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("5H^", simpleTimeZone0, locale0);
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=1039,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1039, simpleTimeZone0.getRawOffset());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("5H^", fastDatePrinter0.getPattern());
      assertEquals(6, fastDatePrinter0.getMaxLengthEstimate());
      assertNotNull(fastDatePrinter0);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      // Undeclared exception!
      try { 
        fastDatePrinter0.applyRules((Calendar) null, stringBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter$UnpaddedNumberField", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2733, "");
      assertEquals(2733, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=,offset=2733,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter((String) null, simpleTimeZone0, locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "", 0, 0, 118, 355, 118, 0, 355, 0, 355);
      assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=355,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=118,startTime=355,startTimeMode=0,endMode=0,endMonth=118,endDay=0,endDayOfWeek=355,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        FastDatePrinter.getTimeZoneDisplay(simpleTimeZone0, true, (-2101), locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal style: -2101
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Locale locale0 = new Locale("M5;mmk", "M5;mmk", "M5;mmk");
      assertEquals("m5;mmk", locale0.getLanguage());
      assertEquals("M5;mmk", locale0.getVariant());
      assertEquals("M5;MMK", locale0.getCountry());
      assertEquals("m5;mmk_M5;MMK_M5;mmk", locale0.toString());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M8;ZZ", (TimeZone) null, locale0);
      assertEquals("m5;mmk", locale0.getLanguage());
      assertEquals("M5;mmk", locale0.getVariant());
      assertEquals("M5;MMK", locale0.getCountry());
      assertEquals("m5;mmk_M5;MMK_M5;mmk", locale0.toString());
      assertEquals(9, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("M8;ZZ", fastDatePrinter0.getPattern());
      assertNotNull(fastDatePrinter0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, (-3597), 11);
      assertNotNull(mockGregorianCalendar0);
      
      // Undeclared exception!
      try { 
        fastDatePrinter0.format((Calendar) mockGregorianCalendar0, (StringBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter$UnpaddedMonthField", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("S{a7y0m<", (TimeZone) null, locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(18, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("S{a7y0m<", fastDatePrinter0.getPattern());
      assertNotNull(fastDatePrinter0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(114, (-1492), 2);
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=114,MONTH=-1492,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=2,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      assertNotNull(date0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "S{a7y0m<");
      assertEquals("S{a7y0m<", stringBuffer0.toString());
      assertEquals(8, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      // Undeclared exception!
      try { 
        fastDatePrinter0.format(date0, stringBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Locale locale0 = new Locale("M5;mmk", "M5;mmk", "M5;mmk");
      assertEquals("m5;mmk", locale0.getLanguage());
      assertEquals("m5;mmk_M5;MMK_M5;mmk", locale0.toString());
      assertEquals("M5;mmk", locale0.getVariant());
      assertEquals("M5;MMK", locale0.getCountry());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M8;ZZ", (TimeZone) null, locale0);
      assertEquals("m5;mmk", locale0.getLanguage());
      assertEquals("m5;mmk_M5;MMK_M5;mmk", locale0.toString());
      assertEquals("M5;mmk", locale0.getVariant());
      assertEquals("M5;MMK", locale0.getCountry());
      assertEquals(9, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("M8;ZZ", fastDatePrinter0.getPattern());
      assertNotNull(fastDatePrinter0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, (-3597), 11);
      assertNotNull(mockGregorianCalendar0);
      
      String string0 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0);
      assertEquals("m5;mmk", locale0.getLanguage());
      assertEquals("m5;mmk_M5;MMK_M5;mmk", locale0.toString());
      assertEquals("M5;mmk", locale0.getVariant());
      assertEquals("M5;MMK", locale0.getCountry());
      assertEquals(9, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("M8;ZZ", fastDatePrinter0.getPattern());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-71278876800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=0,YEAR=290,MONTH=3,WEEK_OF_YEAR=15,WEEK_OF_MONTH=3,DAY_OF_MONTH=11,DAY_OF_YEAR=101,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertNotNull(string0);
      assertEquals("48;+00:00", string0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter(")2h,Z", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(12, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(")2h,Z", fastDatePrinter0.getPattern());
      assertNotNull(fastDatePrinter0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone1 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertEquals("GMT-18:00", timeZone1.getID());
      assertNotNull(timeZone1);
      assertFalse(timeZone1.equals((Object)timeZone0));
      assertNotSame(timeZone1, timeZone0);
      
      Calendar calendar0 = MockCalendar.getInstance(timeZone1, locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("GMT-18:00", timeZone1.getID());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-18:00\",offset=-64800000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=2,HOUR_OF_DAY=2,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=-64800000,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertNotNull(calendar0);
      assertFalse(timeZone1.equals((Object)timeZone0));
      assertNotSame(timeZone1, timeZone0);
      
      String string0 = fastDatePrinter0.format(calendar0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(12, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(")2h,Z", fastDatePrinter0.getPattern());
      assertEquals("GMT-18:00", timeZone1.getID());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT-18:00\",offset=-64800000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=0,HOUR=2,HOUR_OF_DAY=2,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=-64800000,DST_OFFSET=0]", calendar0.toString());
      assertTrue(calendar0.isLenient());
      assertNotNull(string0);
      assertFalse(timeZone0.equals((Object)timeZone1));
      assertFalse(timeZone1.equals((Object)timeZone0));
      assertNotSame(timeZone0, timeZone1);
      assertNotSame(timeZone1, timeZone0);
      assertEquals(")22,-1800", string0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(4, "WhZz", 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4);
      assertEquals(4, simpleTimeZone0.getDSTSavings());
      assertEquals("WhZz", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=WhZz,offset=4,dstSavings=4,useDaylight=true,startYear=0,startMode=2,startMonth=4,startDay=4,startDayOfWeek=4,startTime=4,startTimeMode=4,endMode=2,endMonth=4,endDay=4,endDayOfWeek=4,endTime=4,endTimeMode=4]", simpleTimeZone0.toString());
      assertEquals(4, simpleTimeZone0.getRawOffset());
      assertTrue(simpleTimeZone0.useDaylightTime());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      simpleTimeZone0.setEndRule(4, 4, 4);
      assertEquals("java.util.SimpleTimeZone[id=WhZz,offset=4,dstSavings=4,useDaylight=true,startYear=0,startMode=2,startMonth=4,startDay=4,startDayOfWeek=4,startTime=4,startTimeMode=4,endMode=1,endMonth=4,endDay=4,endDayOfWeek=0,endTime=4,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(4, simpleTimeZone0.getDSTSavings());
      assertEquals("WhZz", simpleTimeZone0.getID());
      assertEquals(4, simpleTimeZone0.getRawOffset());
      assertTrue(simpleTimeZone0.useDaylightTime());
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("WhZz", simpleTimeZone0, locale0);
      assertEquals("java.util.SimpleTimeZone[id=WhZz,offset=4,dstSavings=4,useDaylight=true,startYear=0,startMode=2,startMonth=4,startDay=4,startDayOfWeek=4,startTime=4,startTimeMode=4,endMode=1,endMonth=4,endDay=4,endDayOfWeek=0,endTime=4,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(4, simpleTimeZone0.getDSTSavings());
      assertEquals("WhZz", simpleTimeZone0.getID());
      assertEquals(4, simpleTimeZone0.getRawOffset());
      assertTrue(simpleTimeZone0.useDaylightTime());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("WhZz", fastDatePrinter0.getPattern());
      assertEquals(22, fastDatePrinter0.getMaxLengthEstimate());
      assertNotNull(fastDatePrinter0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      
      String string0 = fastDatePrinter0.format((long) 2);
      assertEquals("java.util.SimpleTimeZone[id=WhZz,offset=4,dstSavings=4,useDaylight=true,startYear=0,startMode=2,startMonth=4,startDay=4,startDayOfWeek=4,startTime=4,startTimeMode=4,endMode=1,endMonth=4,endDay=4,endDayOfWeek=0,endTime=4,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(4, simpleTimeZone0.getDSTSavings());
      assertEquals("WhZz", simpleTimeZone0.getID());
      assertEquals(4, simpleTimeZone0.getRawOffset());
      assertTrue(simpleTimeZone0.useDaylightTime());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("WhZz", fastDatePrinter0.getPattern());
      assertEquals(22, fastDatePrinter0.getMaxLengthEstimate());
      assertNotNull(string0);
      assertEquals("112+0000GMT+00:00", string0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-723), "hz");
      assertEquals((-723), simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=hz,offset=-723,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("hz", simpleTimeZone0.getID());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("hz", simpleTimeZone0, locale0);
      assertEquals((-723), simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=hz,offset=-723,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("hz", simpleTimeZone0.getID());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("hz", fastDatePrinter0.getPattern());
      assertEquals(13, fastDatePrinter0.getMaxLengthEstimate());
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      
      MockDate mockDate0 = new MockDate(1, (-723), 1533, 0, (-961));
      assertNotNull(mockDate0);
      
      String string0 = fastDatePrinter0.format((Date) mockDate0);
      assertEquals((-723), simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=hz,offset=-723,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("hz", simpleTimeZone0.getID());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("hz", fastDatePrinter0.getPattern());
      assertEquals(13, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("Tue Dec 10 07:59:00 GMT 1844", mockDate0.toString());
      assertNotNull(string0);
      assertEquals("7GMT+00:00", string0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("M%0m(|]s3");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter(":k|", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals(":k|", fastDatePrinter0.getPattern());
      assertEquals(6, fastDatePrinter0.getMaxLengthEstimate());
      assertNotNull(fastDatePrinter0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      
      Calendar calendar0 = MockCalendar.getInstance();
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertNotNull(calendar0);
      
      String string0 = fastDatePrinter0.format(calendar0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals(":k|", fastDatePrinter0.getPattern());
      assertEquals(6, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertTrue(calendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertNotNull(string0);
      assertEquals(":20|", string0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Locale locale0 = Locale.UK;
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertNotNull(locale0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("M%0m(|]s3");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%0m(|]s3", timeZone0, locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(16, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("M%0m(|]s3", fastDatePrinter0.getPattern());
      assertNotNull(fastDatePrinter0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      
      MockDate mockDate0 = new MockDate(118, (-967), (-967), 7, 1, (-3052));
      assertNotNull(mockDate0);
      
      String string0 = fastDatePrinter0.format((Date) mockDate0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(16, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("M%0m(|]s3", fastDatePrinter0.getPattern());
      assertEquals("Sun Oct 07 06:10:08 GMT 1934", mockDate0.toString());
      assertNotNull(string0);
      assertEquals("10%010(|]83", string0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertNotNull(locale0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(4902, "");
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(4902, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=,offset=4902,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("", simpleTimeZone0.getID());
      assertNotNull(simpleTimeZone0);
      
      Locale locale1 = Locale.KOREA;
      assertEquals("", locale1.getVariant());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("ko_KR", locale1.toString());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("KR", locale1.getCountry());
      assertEquals("KOR", locale1.getISO3Country());
      assertNotNull(locale1);
      assertFalse(locale1.equals((Object)locale0));
      assertNotSame(locale1, locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(4902, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=,offset=4902,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertNotNull(fastDatePrinter0);
      assertFalse(locale0.equals((Object)locale1));
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      
      FastDatePrinter fastDatePrinter1 = new FastDatePrinter("", simpleTimeZone0, locale1);
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(4902, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=,offset=4902,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals("", locale1.getVariant());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("ko_KR", locale1.toString());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("KR", locale1.getCountry());
      assertEquals("KOR", locale1.getISO3Country());
      assertEquals(0, fastDatePrinter1.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter1.getPattern());
      assertNotNull(fastDatePrinter1);
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(fastDatePrinter1.equals((Object)fastDatePrinter0));
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      
      boolean boolean0 = fastDatePrinter1.equals(fastDatePrinter0);
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getLanguage());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(4902, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=,offset=4902,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals("", locale1.getVariant());
      assertEquals("ko", locale1.getLanguage());
      assertEquals("ko_KR", locale1.toString());
      assertEquals("kor", locale1.getISO3Language());
      assertEquals("KR", locale1.getCountry());
      assertEquals("KOR", locale1.getISO3Country());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(0, fastDatePrinter1.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter1.getPattern());
      assertFalse(locale0.equals((Object)locale1));
      assertFalse(locale1.equals((Object)locale0));
      assertFalse(fastDatePrinter0.equals((Object)fastDatePrinter1));
      assertFalse(fastDatePrinter1.equals((Object)fastDatePrinter0));
      assertNotSame(locale0, locale1);
      assertNotSame(locale1, locale0);
      assertNotSame(fastDatePrinter0, fastDatePrinter1);
      assertNotSame(fastDatePrinter1, fastDatePrinter0);
      assertFalse(boolean0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2798, "JFle");
      assertEquals(2798, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=JFle,offset=2798,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("JFle", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertNotNull(simpleTimeZone0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("a", simpleTimeZone0, locale0);
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(2798, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=JFle,offset=2798,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("JFle", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(2, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("a", fastDatePrinter0.getPattern());
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      
      FastDatePrinter fastDatePrinter1 = new FastDatePrinter("a", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(2, fastDatePrinter1.getMaxLengthEstimate());
      assertEquals("a", fastDatePrinter1.getPattern());
      assertNotNull(fastDatePrinter1);
      assertFalse(fastDatePrinter1.equals((Object)fastDatePrinter0));
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      
      boolean boolean0 = fastDatePrinter0.equals(fastDatePrinter1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals(2798, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=JFle,offset=2798,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("JFle", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(2, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("a", fastDatePrinter0.getPattern());
      assertEquals(2, fastDatePrinter1.getMaxLengthEstimate());
      assertEquals("a", fastDatePrinter1.getPattern());
      assertFalse(fastDatePrinter0.equals((Object)fastDatePrinter1));
      assertFalse(fastDatePrinter1.equals((Object)fastDatePrinter0));
      assertNotSame(fastDatePrinter0, fastDatePrinter1);
      assertNotSame(fastDatePrinter1, fastDatePrinter0);
      assertFalse(boolean0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.UK;
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("5H^", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("5H^", fastDatePrinter0.getPattern());
      assertEquals(6, fastDatePrinter0.getMaxLengthEstimate());
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      
      FastDatePrinter fastDatePrinter1 = new FastDatePrinter("", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("", fastDatePrinter1.getPattern());
      assertEquals(0, fastDatePrinter1.getMaxLengthEstimate());
      assertNotNull(fastDatePrinter1);
      assertFalse(fastDatePrinter1.equals((Object)fastDatePrinter0));
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      
      boolean boolean0 = fastDatePrinter1.equals(fastDatePrinter0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertEquals("5H^", fastDatePrinter0.getPattern());
      assertEquals(6, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter1.getPattern());
      assertEquals(0, fastDatePrinter1.getMaxLengthEstimate());
      assertFalse(fastDatePrinter0.equals((Object)fastDatePrinter1));
      assertFalse(fastDatePrinter1.equals((Object)fastDatePrinter0));
      assertNotSame(fastDatePrinter0, fastDatePrinter1);
      assertNotSame(fastDatePrinter1, fastDatePrinter0);
      assertFalse(boolean0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.UK;
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("8[';)]C-SUmzc^ Sc", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(16, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("8[';)]C-SUmzc^ Sc", fastDatePrinter0.getPattern());
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      
      boolean boolean0 = fastDatePrinter0.equals("8[';)]C-SUmzc^ Sc");
      assertEquals("GMT", timeZone0.getID());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(16, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("8[';)]C-SUmzc^ Sc", fastDatePrinter0.getPattern());
      assertFalse(boolean0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertNotNull(locale0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2798, "JFle");
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=JFle,offset=2798,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(2798, simpleTimeZone0.getRawOffset());
      assertEquals("JFle", simpleTimeZone0.getID());
      assertNotNull(simpleTimeZone0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("a", simpleTimeZone0, locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=JFle,offset=2798,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(2798, simpleTimeZone0.getRawOffset());
      assertEquals("JFle", simpleTimeZone0.getID());
      assertEquals(2, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("a", fastDatePrinter0.getPattern());
      assertNotNull(fastDatePrinter0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      
      boolean boolean0 = fastDatePrinter0.equals(fastDatePrinter0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=JFle,offset=2798,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(2798, simpleTimeZone0.getRawOffset());
      assertEquals("JFle", simpleTimeZone0.getID());
      assertEquals(2, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("a", fastDatePrinter0.getPattern());
      assertTrue(boolean0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("G", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("G", fastDatePrinter0.getPattern());
      assertEquals(2, fastDatePrinter0.getMaxLengthEstimate());
      assertNotNull(fastDatePrinter0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 0);
      assertEquals(0, fieldPosition0.getBeginIndex());
      assertEquals(0, fieldPosition0.getEndIndex());
      assertEquals(0, fieldPosition0.getField());
      assertNotNull(fieldPosition0);
      
      // Undeclared exception!
      try { 
        fastDatePrinter0.format((Object) locale0, (StringBuffer) null, fieldPosition0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: java.util.Locale
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("4sIdR4zAtFhJ$hE");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.PRC;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      assertNotNull(fastDatePrinter0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      
      Long long0 = new Long(2);
      assertNotNull(long0);
      assertEquals(2L, (long)long0);
      
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "4sIdR4zAtFhJ$hE");
      assertEquals("4sIdR4zAtFhJ$hE", stringBuffer0.toString());
      assertEquals(16, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      FieldPosition fieldPosition0 = new FieldPosition(104);
      assertEquals(0, fieldPosition0.getEndIndex());
      assertEquals("java.text.FieldPosition[field=104,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
      assertEquals(104, fieldPosition0.getField());
      assertEquals(0, fieldPosition0.getBeginIndex());
      assertNotNull(fieldPosition0);
      
      StringBuffer stringBuffer1 = fastDatePrinter0.format((Object) long0, stringBuffer0, fieldPosition0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("", fastDatePrinter0.getPattern());
      assertEquals("4sIdR4zAtFhJ$hE", stringBuffer0.toString());
      assertEquals(16, stringBuffer0.length());
      assertEquals(0, fieldPosition0.getEndIndex());
      assertEquals("java.text.FieldPosition[field=104,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
      assertEquals(104, fieldPosition0.getField());
      assertEquals(0, fieldPosition0.getBeginIndex());
      assertEquals(16, stringBuffer1.length());
      assertEquals("4sIdR4zAtFhJ$hE", stringBuffer1.toString());
      assertNotNull(stringBuffer1);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("M%0m(|]s3");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertNotNull(locale0);
      
      MockDate mockDate0 = new MockDate((-21), (-21), 1, (-21), 1, (-21));
      assertNotNull(mockDate0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%0m(|]s3", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals(16, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("M%0m(|]s3", fastDatePrinter0.getPattern());
      assertNotNull(fastDatePrinter0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      
      // Undeclared exception!
      try { 
        fastDatePrinter0.format((Object) mockDate0, (StringBuffer) null, (FieldPosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter$UnpaddedMonthField", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(",");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("^", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals(1, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("^", fastDatePrinter0.getPattern());
      assertNotNull(fastDatePrinter0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      assertNotNull(stringBuffer0);
      
      FieldPosition fieldPosition0 = new FieldPosition(1427);
      assertEquals(0, fieldPosition0.getBeginIndex());
      assertEquals(0, fieldPosition0.getEndIndex());
      assertEquals("java.text.FieldPosition[field=1427,attribute=null,beginIndex=0,endIndex=0]", fieldPosition0.toString());
      assertEquals(1427, fieldPosition0.getField());
      assertNotNull(fieldPosition0);
      
      // Undeclared exception!
      try { 
        fastDatePrinter0.format((Object) null, stringBuffer0, fieldPosition0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: <null>
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertNotNull(locale0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("_");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("-',EBp[*'y'Y=EL_|", timeZone0, locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("GMT", timeZone0.getID());
      assertEquals(17, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("-',EBp[*'y'Y=EL_|", fastDatePrinter0.getPattern());
      assertNotNull(fastDatePrinter0);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("'", (TimeZone) null, locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals(0, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("'", fastDatePrinter0.getPattern());
      assertNotNull(fastDatePrinter0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      
      // Undeclared exception!
      try { 
        fastDatePrinter0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1039, "");
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,offset=1039,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1039, simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("xAN", simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: x
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertEquals("UTC", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("dv6", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: v
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Locale locale0 = Locale.UK;
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertNotNull(locale0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "");
      assertEquals("", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertNotNull(simpleTimeZone0);
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("&E-|uwg2d,^|n3,", simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: u
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("%t.v6WYVWD@Op>3K\"V", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: t
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1039, "r:");
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=r:,offset=1039,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("r:", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(1039, simpleTimeZone0.getRawOffset());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("r:", simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: r
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("%]KaqY|", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: q
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertNotNull(locale0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(65, "5H^");
      assertEquals("java.util.SimpleTimeZone[id=5H^,offset=65,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("5H^", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(65, simpleTimeZone0.getRawOffset());
      assertNotNull(simpleTimeZone0);
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("^pk3", simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: p
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1039, "h,");
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("h,", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=h,,offset=1039,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1039, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule", simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertEquals("UTC", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("_>\"/nA?[#FH", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: n
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1039, "");
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=,offset=1039,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1039, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("=WlU", simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: l
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "");
      assertEquals(3, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("=)jq@3/HI~[9h=7ckv", simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: j
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(0);
      assertNotNull(zoneOffset0);
      
      Locale locale0 = Locale.PRC;
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertEquals("UTC", timeZone0.getID());
      assertNotNull(timeZone0);
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("&FiiXu4fR)R", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: ii
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1039, "");
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=,offset=1039,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1039, simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("KR", locale0.getCountry());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("gKn^O+(Z-", simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: g
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertEquals("UTC", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.JAPANESE;
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.toString());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter(".fw`.(#.bO [7^,", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: f
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.ITALIAN;
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.toString());
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter(",e\"eNE8>J>tR", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: e
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("z]c`bpY(K", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: c
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone(" ");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.GERMANY;
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DE", locale0.getCountry());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("W2`ssb5c>0", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: b
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1561, "mY:7Q8Gf0j6");
      assertEquals(1561, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=mY:7Q8Gf0j6,offset=1561,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("mY:7Q8Gf0j6", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.ITALIAN;
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("it", locale0.toString());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("mY:7Q8Gf0j6", simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Y
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(93, ">DG1*XlwG=qHn");
      assertEquals("java.util.SimpleTimeZone[id=>DG1*XlwG=qHn,offset=93,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(">DG1*XlwG=qHn", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(93, simpleTimeZone0.getRawOffset());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter(">DG1*XlwG=qHn", simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: X
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1039, ";`_?VaOU;Zy{PB");
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(";`_?VaOU;Zy{PB", simpleTimeZone0.getID());
      assertEquals(1039, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=;`_?VaOU;Zy{PB,offset=1039,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter(";`_?VaOU;Zy{PB", simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: V
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1039, "U5#N2<");
      assertEquals(1039, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=U5#N2<,offset=1039,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("U5#N2<", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertNotNull(simpleTimeZone0);
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("U5#N2<", simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: U
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(99, "T~u");
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("T~u", simpleTimeZone0.getID());
      assertEquals(99, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=T~u,offset=99,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("T~u", simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("Unknown class: ");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.FRENCH;
      assertEquals("", locale0.getCountry());
      assertEquals("fr", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("Ry=jRl-vMH<", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: R
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.UK;
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("0MQ'//+NE>/%h", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Q
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("M%0m(|]s3");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.CANADA;
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("MM|Z>P", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: P
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("O6uK{m", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: O
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1039, "");
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=,offset=1039,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1039, simpleTimeZone0.getRawOffset());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KR", locale0.getCountry());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("Negative values should not be possible", simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: N
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.UK;
      assertEquals("GB", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_GB", locale0.toString());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("[E4y!>>LbBP", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: L
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("KR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("J5@T3C&/MPi}", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: J
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("yI00?SMWX\"nTs=", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: I
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone("''\"H8s!8]m_C)fU");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("''\"H8s!8]m_C)fU", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: C
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertNotNull(locale0);
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2312, "d'cm");
      assertEquals("java.util.SimpleTimeZone[id=d'cm,offset=2312,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("d'cm", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(2312, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertNotNull(simpleTimeZone0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("Zw/EGs", simpleTimeZone0, locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("java.util.SimpleTimeZone[id=d'cm,offset=2312,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("d'cm", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(2312, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(20, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("Zw/EGs", fastDatePrinter0.getPattern());
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("D~D{y0m=K?<", (TimeZone) null, locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("D~D{y0m=K?<", fastDatePrinter0.getPattern());
      assertEquals(26, fastDatePrinter0.getMaxLengthEstimate());
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(105, 105, 105);
      assertNotNull(mockGregorianCalendar0);
      
      mockGregorianCalendar0.setLenient(false);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=105,MONTH=105,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=105,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertFalse(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      
      // Undeclared exception!
      try { 
        fastDatePrinter0.format((Calendar) mockGregorianCalendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MONTH
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Locale locale0 = Locale.UK;
      assertEquals("en_GB", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("GBR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("GB", locale0.getCountry());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("1^BLhWQ_#&})qw", (TimeZone) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: B
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1039, "");
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=,offset=1039,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(1039, simpleTimeZone0.getRawOffset());
      assertEquals("", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.CHINA;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("{==Afa(z&L", simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: A
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Locale locale0 = Locale.US;
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("MM|>", timeZone0, locale0);
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("MM|>", fastDatePrinter0.getPattern());
      assertEquals(4, fastDatePrinter0.getMaxLengthEstimate());
      assertNotNull(fastDatePrinter0);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      
      MockDate mockDate0 = new MockDate(106, 1, 87);
      assertNotNull(mockDate0);
      
      String string0 = fastDatePrinter0.format((Date) mockDate0);
      assertEquals("US", locale0.getCountry());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("GMT", timeZone0.getID());
      assertEquals("MM|>", fastDatePrinter0.getPattern());
      assertEquals(4, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("Fri Apr 28 00:00:00 GMT 2006", mockDate0.toString());
      assertNotNull(string0);
      assertEquals("04|>", string0);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("S{yy0m<", (TimeZone) null, locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals(13, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("S{yy0m<", fastDatePrinter0.getPattern());
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(541, 0, 58);
      assertNotNull(mockGregorianCalendar0);
      
      StringBuffer stringBuffer0 = new StringBuffer("S{yy0m<");
      assertEquals("S{yy0m<", stringBuffer0.toString());
      assertEquals(7, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      StringBuffer stringBuffer1 = fastDatePrinter0.applyRules(mockGregorianCalendar0, stringBuffer0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals(13, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("S{yy0m<", fastDatePrinter0.getPattern());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-45089740800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=541,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=5,DAY_OF_MONTH=27,DAY_OF_YEAR=58,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("S{yy0m<0{4100<", stringBuffer0.toString());
      assertEquals(14, stringBuffer0.length());
      assertEquals("S{yy0m<0{4100<", stringBuffer1.toString());
      assertEquals(14, stringBuffer1.length());
      assertNotNull(stringBuffer1);
      assertSame(stringBuffer0, stringBuffer1);
      assertSame(stringBuffer1, stringBuffer0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("3Ndz;E/");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.ENGLISH;
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("mm3_", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals(4, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("mm3_", fastDatePrinter0.getPattern());
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
      
      String string0 = fastDatePrinter0.format(0L);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals(4, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("mm3_", fastDatePrinter0.getPattern());
      assertNotNull(string0);
      assertEquals("003_", string0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(0, FastDatePrinter.FULL);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "hz", 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2);
      assertEquals(2, simpleTimeZone0.getDSTSavings());
      assertEquals("hz", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=hz,offset=2,dstSavings=2,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=2,startDayOfWeek=2,startTime=2,startTimeMode=2,endMode=2,endMonth=2,endDay=2,endDayOfWeek=2,endTime=2,endTimeMode=2]", simpleTimeZone0.toString());
      assertTrue(simpleTimeZone0.useDaylightTime());
      assertEquals(2, simpleTimeZone0.getRawOffset());
      assertNotNull(simpleTimeZone0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("hz", simpleTimeZone0, locale0);
      assertEquals(2, simpleTimeZone0.getDSTSavings());
      assertEquals("hz", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=hz,offset=2,dstSavings=2,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=2,startDayOfWeek=2,startTime=2,startTimeMode=2,endMode=2,endMonth=2,endDay=2,endDayOfWeek=2,endTime=2,endTimeMode=2]", simpleTimeZone0.toString());
      assertTrue(simpleTimeZone0.useDaylightTime());
      assertEquals(2, simpleTimeZone0.getRawOffset());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("hz", fastDatePrinter0.getPattern());
      assertEquals(13, fastDatePrinter0.getMaxLengthEstimate());
      assertNotNull(fastDatePrinter0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
      
      TimeZone timeZone0 = fastDatePrinter0.getTimeZone();
      assertEquals(2, simpleTimeZone0.getDSTSavings());
      assertEquals("hz", simpleTimeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=hz,offset=2,dstSavings=2,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=2,startDayOfWeek=2,startTime=2,startTimeMode=2,endMode=2,endMonth=2,endDay=2,endDayOfWeek=2,endTime=2,endTimeMode=2]", simpleTimeZone0.toString());
      assertTrue(simpleTimeZone0.useDaylightTime());
      assertEquals(2, simpleTimeZone0.getRawOffset());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("hz", fastDatePrinter0.getPattern());
      assertEquals(13, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("hz", timeZone0.getID());
      assertEquals(2, timeZone0.getDSTSavings());
      assertEquals(2, timeZone0.getRawOffset());
      assertTrue(timeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=hz,offset=2,dstSavings=2,useDaylight=true,startYear=0,startMode=2,startMonth=2,startDay=2,startDayOfWeek=2,startTime=2,startTimeMode=2,endMode=2,endMonth=2,endDay=2,endDayOfWeek=2,endTime=2,endTimeMode=2]", timeZone0.toString());
      assertNotNull(timeZone0);
      assertSame(simpleTimeZone0, timeZone0);
      assertSame(timeZone0, simpleTimeZone0);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(3, FastDatePrinter.SHORT);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("M%0m(|]s3");
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.FRANCE;
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("M%0m(|]s3", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(16, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("M%0m(|]s3", fastDatePrinter0.getPattern());
      assertNotNull(fastDatePrinter0);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
      
      String string0 = fastDatePrinter0.getPattern();
      assertEquals("GMT", timeZone0.getID());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals(16, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("M%0m(|]s3", fastDatePrinter0.getPattern());
      assertNotNull(string0);
      assertEquals("M%0m(|]s3", string0);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      assertEquals(2, FastDatePrinter.MEDIUM);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertEquals("GMT", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.PRC;
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("Mmmmk|", timeZone0, locale0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("Mmmmk|", fastDatePrinter0.getPattern());
      assertEquals(11, fastDatePrinter0.getMaxLengthEstimate());
      assertNotNull(fastDatePrinter0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(89, 678, 1);
      assertNotNull(mockGregorianCalendar0);
      
      String string0 = fastDatePrinter0.format((Calendar) mockGregorianCalendar0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("Mmmmk|", fastDatePrinter0.getPattern());
      assertEquals(11, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-57575836800000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=145,MONTH=6,WEEK_OF_YEAR=27,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=182,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertNotNull(string0);
      assertEquals("700024|", string0);
      assertEquals(2, FastDatePrinter.MEDIUM);
      assertEquals(3, FastDatePrinter.SHORT);
      assertEquals(0, FastDatePrinter.FULL);
      assertEquals(1, FastDatePrinter.LONG);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(99, "S{ay0m<");
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("S{ay0m<", simpleTimeZone0, locale0);
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      fastDatePrinter0.format(1L, stringBuffer0);
      assertEquals(13, stringBuffer0.length());
      assertEquals("100{\uC624\uC804197000<", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.UK;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("8[';)]C-SUmzc^ Sc", timeZone0, locale0);
      fastDatePrinter0.hashCode();
      assertEquals(16, fastDatePrinter0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "hz", 2, 2, 2, 2, 2, 2, 2, 2, 2);
      Locale locale0 = Locale.KOREA;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("hz", simpleTimeZone0, locale0);
      fastDatePrinter0.getLocale();
      assertEquals(13, fastDatePrinter0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("3Ndz;E/");
      Locale locale0 = Locale.ENGLISH;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("mm3_", timeZone0, locale0);
      String string0 = fastDatePrinter0.toString();
      assertEquals(4, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("FastDatePrinter[mm3_,en,GMT]", string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("=:/kG1h*`", timeZone0, locale0);
      int int0 = fastDatePrinter0.getMaxLengthEstimate();
      assertEquals(17, int0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(4, "WhZz", 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4);
      Locale locale0 = Locale.CHINA;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("WhZz", simpleTimeZone0, locale0);
      String string0 = fastDatePrinter0.format((long) 2);
      assertEquals(22, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("112+0000GMT+00:00", string0);
  }
}
