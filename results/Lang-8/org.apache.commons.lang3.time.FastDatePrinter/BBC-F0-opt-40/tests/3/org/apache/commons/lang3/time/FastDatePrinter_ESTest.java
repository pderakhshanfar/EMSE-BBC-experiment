/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 12 08:45:42 GMT 2021
 */

package org.apache.commons.lang3.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.text.FieldPosition;
import java.text.Format;
import java.time.Instant;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.apache.commons.lang3.time.FastDatePrinter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class FastDatePrinter_ESTest extends FastDatePrinter_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("Z");
      Locale locale0 = new Locale("Z", "Z", "Z");
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("Z", timeZone0, locale0);
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone1 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Calendar calendar0 = MockCalendar.getInstance(timeZone1, locale0);
      StringBuffer stringBuffer0 = new StringBuffer();
      fastDatePrinter0.format(calendar0, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("Sh(F");
      Locale locale0 = Locale.forLanguageTag("h}K/Mh'U");
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("h}K/Mh'U", timeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "FastDatePrinter[h}K/Mh'U,,GMT]");
      fastDatePrinter0.format((-505L), stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("Sw");
      Locale locale0 = Locale.TAIWAN;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("Sw", timeZone0, locale0);
      fastDatePrinter0.format((-1899L));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("<nl9>");
      Locale locale0 = Locale.FRANCE;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter(".w", timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 2, 0);
      fastDatePrinter0.format((Calendar) mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("<null>");
      Locale locale0 = Locale.FRANCE;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("+_z[/", timeZone0, locale0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Locale locale0 = Locale.UK;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "+_z'/", 2, 2, 2, 2, 2, 2, 2, 2);
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("+_z'/", simpleTimeZone0, locale0);
      int[] intArray0 = new int[2];
      fastDatePrinter0.parseToken("ji~R?blfO", intArray0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("xe!Gdw]`g=!pJ");
      Locale locale0 = Locale.FRANCE;
      FastDatePrinter.getTimeZoneDisplay(timeZone0, false, 1, locale0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
      fastDatePrinter0.getTimeZone();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-874), "");
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
      fastDatePrinter0.getTimeZone();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(13);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.ITALIAN;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      fastDatePrinter0.getPattern();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-874), "");
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
      fastDatePrinter0.getMaxLengthEstimate();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("Q");
      Locale locale0 = Locale.ITALY;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      MockDate mockDate0 = new MockDate((-3113), 2, 2);
      fastDatePrinter0.format((Date) mockDate0, (StringBuffer) null);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("Q");
      Locale locale0 = Locale.ITALY;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      MockDate mockDate0 = new MockDate(5520L);
      StringBuffer stringBuffer0 = new StringBuffer(3);
      fastDatePrinter0.format((Date) mockDate0, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(13);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.CHINA;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      Instant instant0 = MockInstant.now();
      Date date0 = Date.from(instant0);
      fastDatePrinter0.format(date0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.FRENCH;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      fastDatePrinter0.format(calendar0, (StringBuffer) null);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(13);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.ITALIAN;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer();
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      fastDatePrinter0.format(calendar0, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
      Calendar calendar0 = MockCalendar.getInstance();
      fastDatePrinter0.format(calendar0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(71, "");
      Locale locale0 = Locale.CHINESE;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
      fastDatePrinter0.format(156L, (StringBuffer) null);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(13);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.ITALIAN;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer();
      fastDatePrinter0.format((long) 0, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofHours(13);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.ITALIAN;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      fastDatePrinter0.format(0L);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.FRENCH;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      fastDatePrinter0.applyRules(calendar0, (StringBuffer) null);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      fastDatePrinter0.applyRules(mockGregorianCalendar0, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
      // Undeclared exception!
      try { 
        fastDatePrinter0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
      int[] intArray0 = new int[7];
      // Undeclared exception!
      try { 
        fastDatePrinter0.parseToken("", intArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("<null>");
      Locale locale0 = Locale.FRANCE;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("$(s", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDatePrinter0.parseToken("l", (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        fastDatePrinter0.parseToken("0HGw", intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      // Undeclared exception!
      try { 
        FastDatePrinter.getTimeZoneDisplay((TimeZone) null, true, (-309), (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter$TimeZoneDisplayKey", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "+_z'/", 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2);
      Locale locale0 = Locale.UK;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("+_z'/", simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDatePrinter0.format((Date) null, (StringBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("ya");
      Locale locale0 = Locale.CHINA;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("ya", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDatePrinter0.format((Date) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Calendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("ya");
      Locale locale0 = Locale.CHINA;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("ya", timeZone0, locale0);
      Calendar calendar0 = MockCalendar.getInstance(timeZone0);
      // Undeclared exception!
      try { 
        fastDatePrinter0.format(calendar0, (StringBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter$PaddedNumberField", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("T%DNwvU5|g7Rb3C+EE3");
      Locale locale0 = Locale.FRANCE;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter(".w", timeZone0, locale0);
      // Undeclared exception!
      try { 
        fastDatePrinter0.format((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter$UnpaddedNumberField", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("ya");
      Locale locale0 = Locale.CHINA;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("ya", timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1305, (-3010), 2);
      mockGregorianCalendar0.setLenient(false);
      // Undeclared exception!
      try { 
        fastDatePrinter0.format((Calendar) mockGregorianCalendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MONTH
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
      // Undeclared exception!
      try { 
        fastDatePrinter0.format(145L, (StringBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", (TimeZone) null, locale0);
      // Undeclared exception!
      try { 
        fastDatePrinter0.format(118L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("ya");
      Locale locale0 = Locale.CHINA;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("ya", timeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, (-2870), (-2870));
      mockGregorianCalendar0.setLenient(false);
      // Undeclared exception!
      try { 
        fastDatePrinter0.applyRules(mockGregorianCalendar0, stringBuffer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // MONTH
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("k/5Fu[w6G;;", (TimeZone) null, (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = new Locale("hd} k.&$", "xUHikUNm6<xST", "--f29=yurt");
      // Undeclared exception!
      try { 
        FastDatePrinter.getTimeZoneDisplay(timeZone0, false, 45, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal style: 45
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.FRANCE;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("+_z[/", timeZone0, locale0);
      MockDate mockDate0 = new MockDate(0, 1, 2);
      fastDatePrinter0.format((Date) mockDate0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "+_z'/", 2, 2, 2, 2, 2, 2, 2, 2, 2);
      Locale locale0 = Locale.TAIWAN;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("+_z'/", simpleTimeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(99, 108, (-1826), 99, 3);
      StringBuffer stringBuffer0 = new StringBuffer(2);
      fastDatePrinter0.format((Calendar) mockGregorianCalendar0, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "+_z'/", 2, 2, 2, 2, 2, 2, 2, 2, 2);
      Locale locale0 = Locale.TAIWAN;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("+_z'/", simpleTimeZone0, locale0);
      fastDatePrinter0.format(0L);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("S/h(^F");
      Locale locale0 = new Locale(",~OQ1*.%' k-c3g?H/0", "S/h(^F", ",~OQ1*.%' k-c3g?H/0");
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("kZ>8 m5'0fy", timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 0, 3);
      fastDatePrinter0.format((Calendar) mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-552), "SSZ h(");
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("SSZ h(", simpleTimeZone0, locale0);
      fastDatePrinter0.format((-1233L));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("k");
      Locale locale0 = Locale.GERMAN;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("SSZ h(", timeZone0, locale0);
      fastDatePrinter0.format((long) 100);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("ya");
      Locale locale0 = Locale.CHINA;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("ya", timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 3, 0);
      StringBuffer stringBuffer0 = new StringBuffer();
      fastDatePrinter0.applyRules(mockGregorianCalendar0, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("Anl4");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 895, 3010);
      Locale locale0 = Locale.forLanguageTag("h}K/Mh'U");
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("h}K/Mh'U", timeZone0, locale0);
      fastDatePrinter0.format((Calendar) mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("T%DNwvU5|g7Rb3C+EE3");
      Locale locale0 = Locale.FRANCE;
      Locale locale1 = Locale.CANADA_FRENCH;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale1);
      FastDatePrinter fastDatePrinter1 = new FastDatePrinter("", timeZone0, locale0);
      fastDatePrinter0.equals(fastDatePrinter1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("Q");
      Locale locale0 = Locale.ITALY;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      fastDatePrinter0.equals(fastDatePrinter0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("<nll>");
      Locale locale0 = Locale.ITALY;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("a", timeZone0, locale0);
      FastDatePrinter fastDatePrinter1 = new FastDatePrinter("a", (TimeZone) null, locale0);
      fastDatePrinter0.equals(fastDatePrinter1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.FRENCH;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("8;'$l=h", timeZone0, locale0);
      FastDatePrinter fastDatePrinter1 = new FastDatePrinter("", timeZone0, locale0);
      fastDatePrinter1.equals(fastDatePrinter0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Locale locale0 = Locale.ENGLISH;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("y", (TimeZone) null, locale0);
      // Undeclared exception!
      try { 
        fastDatePrinter0.equals(fastDatePrinter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("Q");
      Locale locale0 = Locale.ITALY;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      FieldPosition fieldPosition0 = new FieldPosition(58);
      // Undeclared exception!
      try { 
        fastDatePrinter0.format((Object) null, stringBuffer0, fieldPosition0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: <null>
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("<nll>");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("+_z'/", timeZone0, locale0);
      FieldPosition fieldPosition0 = new FieldPosition(0);
      Long long0 = Long.getLong("<nll>", 210L);
      StringBuffer stringBuffer0 = new StringBuffer();
      fastDatePrinter0.format((Object) long0, stringBuffer0, fieldPosition0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("SSh(^F");
      Locale locale0 = Locale.ROOT;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("SSh(^F", timeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "SSh(^F");
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
      // Undeclared exception!
      try { 
        fastDatePrinter0.format((Object) timeZone0, stringBuffer0, fieldPosition0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown class: sun.util.calendar.ZoneInfo
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.KOREAN;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", timeZone0, locale0);
      MockDate mockDate0 = new MockDate(1, 1, 2528, 0, 96, (-895));
      StringBuffer stringBuffer0 = new StringBuffer(2402);
      fastDatePrinter0.format((Object) mockDate0, stringBuffer0, (FieldPosition) null);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("<nll>");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(105, 0, 0);
      Locale locale0 = Locale.US;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("+_z'/", timeZone0, locale0);
      FieldPosition fieldPosition0 = new FieldPosition(612);
      // Undeclared exception!
      try { 
        fastDatePrinter0.format((Object) mockGregorianCalendar0, (StringBuffer) null, fieldPosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter$StringLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter(".'7r,'1+Ds", (TimeZone) null, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      // Undeclared exception!
      try { 
        fastDatePrinter0.applyRules(mockGregorianCalendar0, (StringBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter$StringLiteral", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("<nll>");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("+_z'", timeZone0, locale0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("Q");
      Locale locale0 = Locale.CHINESE;
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("x]!~`&4m", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: x
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("Sw");
      Locale locale0 = Locale.TAIWAN;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("Sw", timeZone0, locale0);
      fastDatePrinter0.format(1100L);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("(~6;,-k");
      Locale locale0 = new Locale("(~6;,-k");
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("MM*v_N.-i0[zUqo3", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: v
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("<nll>");
      Locale locale0 = Locale.CHINA;
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("7|uf62d\"", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: u
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ROOT;
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("FastDatePrinter[", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: t
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("MrGw&\"\"QcW*:VCD]Xy");
      Locale locale0 = Locale.JAPAN;
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("MrGw&\"\"QcW*:VCD]Xy", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: r
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("qr", (TimeZone) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: q
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.CHINA;
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("p~7S=3p3?C`m", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: p
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("<null>");
      Locale locale0 = Locale.CHINA;
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("<null>", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: n
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(442, "<null>");
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("l", simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: l
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("PT02JA#>2'p");
      Locale locale0 = Locale.UK;
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("s9Kjc!Z!>{", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: j
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.FRANCE;
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("Sib4(", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: i
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.ITALIAN;
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("ggz@'ue<m*,3", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: gg
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-523), "w51&|ao?r4{Me(2");
      Locale locale0 = new Locale("QMWC3.i~44\"JF", "");
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("fH", simpleTimeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: f
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("Anll4");
      Locale locale0 = Locale.CHINA;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("|dk", timeZone0, locale0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("3c;[*N", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: c
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("b#v/", (TimeZone) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: b
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("<null>");
      Locale locale0 = Locale.FRANCE;
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("&(KmYW", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Y
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("X");
      Locale locale0 = Locale.FRENCH;
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("X", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: X
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("<Vull>");
      Locale locale0 = Locale.CHINA;
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("<Vull>", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: V
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.US;
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter(";UK-<5$olTUd", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: U
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("T%DNwvU5|g7Rb3C+EE3");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("T%DNwvU5|g7Rb3C+EE3", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: T
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("-RF", (TimeZone) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: R
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("MrGw&\"\"QcW*:VCD]Xy");
      Locale locale0 = new Locale("MrGw&\"\"QcW*:VCD]Xy");
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("5MP%&j-", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: P
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("ya");
      Locale locale0 = Locale.UK;
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("SZZOO;M", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: OO
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.UK;
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("%~-3N3SH`]| Q)R", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: N
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("Ly51", (TimeZone) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: L
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.FRENCH;
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("KFFa*[JC``", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: J
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.ROOT;
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("IWi=1E1\"3R6", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: I
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("<Vull>");
      Locale locale0 = Locale.FRANCE;
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("Heure de Greenwich", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: e
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("T%DNwvU5|g7Rb3C+EE3");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("0G (@{", timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2, 2, 3, (-1), 0);
      fastDatePrinter0.equals(mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("ED3F;ow7IL;", (TimeZone) null, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: o
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("SSh(^F");
      Locale locale0 = Locale.ROOT;
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("DQF@i|NAJ@]%VYP`6", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: Q
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("2b)*FJj&J0 |9:");
      Locale locale0 = Locale.forLanguageTag("2b)*FJj&J0 |9:");
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("$*C98G+*)TO3IJ Y/px", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: C
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("9!5  .yOS$md7h(c");
      Locale locale0 = Locale.CANADA_FRENCH;
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("{%39hF$Sh7Bq2z .=", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: B
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.ROOT;
      FastDatePrinter fastDatePrinter0 = null;
      try {
        fastDatePrinter0 = new FastDatePrinter("^#1.W>A=.%}lq$9y", timeZone0, locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern component: A
         //
         verifyException("org.apache.commons.lang3.time.FastDatePrinter", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("S/h(^F");
      Locale locale0 = new Locale(",~OQ1*.%' k-c3g?H/0", "S/h(^F", ",~OQ1*.%' k-c3g?H/0");
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("kZ>8 m5'0fy", timeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer();
      MockDate mockDate0 = new MockDate((-837L));
      fastDatePrinter0.format((Date) mockDate0, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Locale locale0 = Locale.UK;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "+_z'/", 2, 2, 2, 2, 2, 2, 2, 2);
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("+_z'/", simpleTimeZone0, locale0);
      fastDatePrinter0.getTimeZone();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("SSh(^F");
      Locale locale0 = Locale.ROOT;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("SSh(^F", timeZone0, locale0);
      fastDatePrinter0.getPattern();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("y");
      Locale locale0 = Locale.PRC;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("y", timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-758), (-2891), 1);
      fastDatePrinter0.format((Calendar) mockGregorianCalendar0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("SSh(^F");
      Locale locale0 = Locale.ROOT;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("SSh(^F", timeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "SSh(^F");
      fastDatePrinter0.format(91L, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.US;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("yy|", timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(3, 0, 108, 3, 3);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      StringBuffer stringBuffer0 = new StringBuffer();
      fastDatePrinter0.format(date0, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(5361, "");
      Locale locale0 = Locale.KOREAN;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("", simpleTimeZone0, locale0);
      fastDatePrinter0.hashCode();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.US;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("yy|", timeZone0, locale0);
      fastDatePrinter0.getLocale();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ZoneId zoneId0 = ZoneId.systemDefault();
      TimeZone timeZone0 = TimeZone.getTimeZone(zoneId0);
      Locale locale0 = Locale.US;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("yy|", timeZone0, locale0);
      fastDatePrinter0.toString();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(119, "org.apache.commons.lang3.time.FastDatePrinter$TimeZoneNameRule");
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("+_z'/", simpleTimeZone0, locale0);
      int int0 = fastDatePrinter0.getMaxLengthEstimate();
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2, "Z}K/Mh'TU", 2, 2, 0, 2, (-300), 0, 2, 0, 102, (-1267), 2812);
      Locale locale0 = Locale.GERMANY;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("Z}K/Mh'TU", simpleTimeZone0, locale0);
      String string0 = fastDatePrinter0.format(0L);
      assertEquals(19, fastDatePrinter0.getMaxLengthEstimate());
      assertEquals("+0000}0/112TU", string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("6$_z''(");
      Locale locale0 = new Locale("6$_z''(");
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("6$_z''(", timeZone0, locale0);
      assertEquals(8, fastDatePrinter0.getMaxLengthEstimate());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("ya");
      Locale locale0 = Locale.CHINA;
      FastDatePrinter fastDatePrinter0 = new FastDatePrinter("ya", timeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(96, 61, 11, (-2870), 2, 2);
      fastDatePrinter0.applyRules(mockGregorianCalendar0, stringBuffer0);
      assertEquals(6, stringBuffer0.length());
      assertEquals(6, fastDatePrinter0.getMaxLengthEstimate());
  }
}
