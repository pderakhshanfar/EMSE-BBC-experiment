/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 14:48:42 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(Integer.MAX_VALUE, Integer.MAX_VALUE, 258);
      assertEquals(258, hypergeometricDistribution0.getSampleSize());
      assertEquals(Integer.MAX_VALUE, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals((-1.2014061218134156E-7), hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(Integer.MAX_VALUE, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(258, hypergeometricDistribution0.getSampleSize());
      assertEquals(Integer.MAX_VALUE, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals((-1.2014061218134156E-7), hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(Integer.MAX_VALUE, hypergeometricDistribution0.getPopulationSize());
      assertEquals((-1.2014061218134156E-7), double0, 0.01);
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(258, hypergeometricDistribution0.getSampleSize());
      assertEquals(Integer.MAX_VALUE, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals((-1.2014061218134156E-7), hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(Integer.MAX_VALUE, hypergeometricDistribution0.getPopulationSize());
      assertEquals(258, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3168, 714, 714);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(714, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(714, hypergeometricDistribution0.getSampleSize());
      assertEquals(3168, hypergeometricDistribution0.getPopulationSize());
      assertEquals(160.92045454545453, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(577);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 1115;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2876, 1115, 1115);
      assertEquals(1115, hypergeometricDistribution0.getSampleSize());
      assertEquals(432.2757301808067, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1115, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2876, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability(2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2355, 0, 1);
      assertEquals(2355, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(2355, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, double0, 0.01);
      
      double double1 = hypergeometricDistribution0.cumulativeProbability(1);
      assertEquals(2355, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      hypergeometricDistribution0.reseedRandomGenerator(2355);
      assertEquals(2355, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double2 = hypergeometricDistribution0.probability(2355);
      assertEquals(2355, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(2355, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, int0);
      
      int[] intArray0 = hypergeometricDistribution0.sample(2355);
      assertEquals(2355, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(intArray0);
      assertEquals(2355, intArray0.length);
      
      int int1 = hypergeometricDistribution0.solveInverseCumulativeProbability(0, 1, 0);
      assertEquals(2355, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = hypergeometricDistribution0.inverseCumulativeProbability(0.0);
      assertEquals(2355, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      double double3 = hypergeometricDistribution0.cumulativeProbability(1);
      assertEquals(2355, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1.0, double3, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      
      double double4 = hypergeometricDistribution0.upperCumulativeProbability((-2304));
      assertEquals(2355, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1.0, double4, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      
      int int3 = hypergeometricDistribution0.inverseCumulativeProbability(0);
      assertEquals(2355, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, int3);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      
      System.setCurrentTimeMillis(0L);
      double double5 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(2355, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, double5, 0.01);
      assertEquals(double5, double2, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertEquals(double5, double0, 0.01);
      assertNotEquals(double5, double3, 0.01);
      
      int int4 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(2355, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, int4);
      assertTrue(int4 == int0);
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      
      int int5 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(2355, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, int5);
      assertTrue(int5 == int1);
      assertTrue(int5 == int3);
      assertTrue(int5 == int0);
      assertTrue(int5 == int2);
      assertTrue(int5 == int4);
      
      Random.setNextRandom(506);
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertEquals(2355, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertTrue(boolean0);
      
      int int6 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(2355, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2355, int6);
      assertFalse(int6 == int0);
      assertFalse(int6 == int3);
      assertFalse(int6 == int1);
      assertFalse(int6 == int4);
      assertFalse(int6 == int2);
      assertFalse(int6 == int5);
      
      int int7 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(2355, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, int7);
      assertFalse(int7 == int6);
      assertTrue(int7 == int5);
      assertTrue(int7 == int4);
      assertTrue(int7 == int2);
      assertTrue(int7 == int3);
      assertTrue(int7 == int1);
      assertTrue(int7 == int0);
      
      double double6 = hypergeometricDistribution0.probability((-2163));
      assertEquals(2355, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, double6, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertEquals(double6, double2, 0.01);
      assertEquals(double6, double5, 0.01);
      assertEquals(double6, double0, 0.01);
      
      Random.setNextRandom(0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Well512a well512a0 = new Well512a(2266);
      assertNotNull(well512a0);
      
      double double0 = well512a0.nextDouble();
      assertEquals(0.6963972538401448, double0, 0.01);
      
      well512a0.setSeed((int[]) null);
      double double1 = well512a0.nextDouble();
      assertEquals(0.5476909198201638, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = well512a0.nextDouble();
      assertEquals(0.7794648283453469, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      Well512a well512a1 = new Well512a((int[]) null);
      assertNotNull(well512a1);
      assertFalse(well512a1.equals((Object)well512a0));
      
      int int0 = 895;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a1, 2266, 2, 895);
      assertEquals(2266, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.7899382171226832, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(895, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      assertFalse(well512a1.equals((Object)well512a0));
      
      hypergeometricDistribution0.reseedRandomGenerator(2266);
      assertEquals(2266, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.7899382171226832, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(895, hypergeometricDistribution0.getSampleSize());
      assertNotSame(well512a1, well512a0);
      assertFalse(well512a1.equals((Object)well512a0));
      
      double double3 = hypergeometricDistribution0.cumulativeProbability(895);
      assertEquals(2266, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.7899382171226832, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(895, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.0, double3, 0.01);
      assertNotSame(well512a1, well512a0);
      assertFalse(well512a1.equals((Object)well512a0));
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      
      int int1 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(2266, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.7899382171226832, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(895, hypergeometricDistribution0.getSampleSize());
      assertEquals(2, int1);
      assertNotSame(well512a1, well512a0);
      assertFalse(well512a1.equals((Object)well512a0));
      assertFalse(int1 == int0);
      
      int int2 = hypergeometricDistribution0.sample();
      assertEquals(2266, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.7899382171226832, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(895, hypergeometricDistribution0.getSampleSize());
      assertEquals(1, int2);
      assertNotSame(well512a1, well512a0);
      assertFalse(well512a1.equals((Object)well512a0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      double double4 = hypergeometricDistribution0.cumulativeProbability(1);
      assertEquals(2266, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.7899382171226832, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(895, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.8441049081440002, double4, 0.01);
      assertNotSame(well512a1, well512a0);
      assertFalse(well512a1.equals((Object)well512a0));
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      
      int int3 = hypergeometricDistribution0.inverseCumulativeProbability(0.6963972538401448);
      assertEquals(2266, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.7899382171226832, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(895, hypergeometricDistribution0.getSampleSize());
      assertEquals(1, int3);
      assertNotSame(well512a1, well512a0);
      assertFalse(well512a1.equals((Object)well512a0));
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      
      double double5 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(2266, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.7899382171226832, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(895, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.7899382171226832, double5, 0.01);
      assertNotSame(well512a1, well512a0);
      assertFalse(well512a1.equals((Object)well512a0));
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double4, 0.01);
      
      double double6 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(2266, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.7899382171226832, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(895, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.4777260139637193, double6, 0.01);
      assertNotSame(well512a1, well512a0);
      assertFalse(well512a1.equals((Object)well512a0));
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double1, 0.01);
      
      double double7 = hypergeometricDistribution0.upperCumulativeProbability(2);
      assertEquals(2266, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.7899382171226832, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(895, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.15589509185599984, double7, 0.01);
      assertNotSame(well512a1, well512a0);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertFalse(well512a1.equals((Object)well512a0));
      
      double double8 = hypergeometricDistribution0.cumulativeProbability(895);
      assertEquals(2266, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.7899382171226832, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(895, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.0, double8, 0.01);
      assertNotSame(well512a1, well512a0);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertEquals(double8, double3, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertFalse(well512a1.equals((Object)well512a0));
      
      double double9 = hypergeometricDistribution0.upperCumulativeProbability(1);
      assertEquals(2266, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.7899382171226832, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(895, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.6340431252666836, double9, 0.01);
      assertNotSame(well512a1, well512a0);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertFalse(well512a1.equals((Object)well512a0));
      
      int int4 = well512a0.nextInt();
      assertEquals(1506372673, int4);
      assertNotSame(well512a0, well512a1);
      assertFalse(well512a0.equals((Object)well512a1));
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      
      int int5 = well512a0.nextInt();
      assertEquals((-1502707985), int5);
      assertNotSame(well512a0, well512a1);
      assertFalse(well512a0.equals((Object)well512a1));
      assertFalse(int5 == int1);
      assertFalse(int5 == int3);
      assertFalse(int5 == int4);
      assertFalse(int5 == int2);
      assertFalse(int5 == int0);
      
      double double10 = hypergeometricDistribution0.cumulativeProbability(4230);
      assertEquals(2266, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.7899382171226832, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(895, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.0, double10, 0.01);
      assertNotSame(well512a1, well512a0);
      assertNotEquals(double10, double2, 0.01);
      assertNotEquals(double10, double6, 0.01);
      assertNotEquals(double10, double1, 0.01);
      assertNotEquals(double10, double0, 0.01);
      assertNotEquals(double10, double5, 0.01);
      assertNotEquals(double10, double7, 0.01);
      assertNotEquals(double10, double9, 0.01);
      assertEquals(double10, double8, 0.01);
      assertEquals(double10, double3, 0.01);
      assertNotEquals(double10, double4, 0.01);
      assertFalse(well512a1.equals((Object)well512a0));
      
      long long0 = well512a1.nextLong();
      assertEquals(3370349331545964271L, long0);
      assertNotSame(well512a1, well512a0);
      assertFalse(well512a1.equals((Object)well512a0));
      
      HypergeometricDistribution hypergeometricDistribution1 = null;
      try {
        hypergeometricDistribution1 = new HypergeometricDistribution(1, 282, (-372));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-372)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(2329L);
      assertNotNull(mersenneTwister0);
      
      int int0 = 5592;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 5592, 2482, 2482);
      assertEquals(5592, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2482, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2482, hypergeometricDistribution0.getSampleSize());
      assertEquals(1101.631616595136, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      int int1 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(5592, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2482, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2482, hypergeometricDistribution0.getSampleSize());
      assertEquals(1101.631616595136, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2482, int1);
      assertFalse(int1 == int0);
      
      // Undeclared exception!
      hypergeometricDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Well512a well512a0 = new Well512a(2266);
      assertNotNull(well512a0);
      
      double double0 = well512a0.nextDouble();
      assertEquals(0.6963972538401448, double0, 0.01);
      
      well512a0.setSeed((int[]) null);
      double double1 = well512a0.nextDouble();
      assertEquals(0.5476909198201638, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      Well512a well512a1 = new Well512a((int[]) null);
      assertNotNull(well512a1);
      assertFalse(well512a1.equals((Object)well512a0));
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a1, 2266, 2, 895);
      assertEquals(0.7899382171226832, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(895, hypergeometricDistribution0.getSampleSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2266, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      assertFalse(well512a1.equals((Object)well512a0));
      
      hypergeometricDistribution0.reseedRandomGenerator(2266);
      assertEquals(0.7899382171226832, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(895, hypergeometricDistribution0.getSampleSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2266, hypergeometricDistribution0.getPopulationSize());
      assertNotSame(well512a1, well512a0);
      assertFalse(well512a1.equals((Object)well512a0));
      
      double double2 = hypergeometricDistribution0.cumulativeProbability(895);
      assertEquals(0.7899382171226832, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(895, hypergeometricDistribution0.getSampleSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2266, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.0, double2, 0.01);
      assertNotSame(well512a1, well512a0);
      assertFalse(well512a1.equals((Object)well512a0));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(0.7899382171226832, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(895, hypergeometricDistribution0.getSampleSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2266, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, int0);
      assertNotSame(well512a1, well512a0);
      assertFalse(well512a1.equals((Object)well512a0));
      
      int int1 = hypergeometricDistribution0.sample();
      assertEquals(0.7899382171226832, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(895, hypergeometricDistribution0.getSampleSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2266, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, int1);
      assertNotSame(well512a1, well512a0);
      assertFalse(well512a1.equals((Object)well512a0));
      assertFalse(int1 == int0);
      
      double double3 = hypergeometricDistribution0.cumulativeProbability(1);
      assertEquals(0.7899382171226832, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(895, hypergeometricDistribution0.getSampleSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2266, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.8441049081440002, double3, 0.01);
      assertNotSame(well512a1, well512a0);
      assertFalse(well512a1.equals((Object)well512a0));
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      
      int int2 = hypergeometricDistribution0.inverseCumulativeProbability(0.6963972538401448);
      assertEquals(0.7899382171226832, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(895, hypergeometricDistribution0.getSampleSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2266, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, int2);
      assertNotSame(well512a1, well512a0);
      assertFalse(well512a1.equals((Object)well512a0));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      double double4 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(0.7899382171226832, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(895, hypergeometricDistribution0.getSampleSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2266, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.7899382171226832, double4, 0.01);
      assertNotSame(well512a1, well512a0);
      assertFalse(well512a1.equals((Object)well512a0));
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      
      double double5 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.7899382171226832, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(895, hypergeometricDistribution0.getSampleSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2266, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.4777260139637193, double5, 0.01);
      assertNotSame(well512a1, well512a0);
      assertFalse(well512a1.equals((Object)well512a0));
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double4, 0.01);
      
      double double6 = hypergeometricDistribution0.upperCumulativeProbability(2);
      assertEquals(0.7899382171226832, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(895, hypergeometricDistribution0.getSampleSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2266, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.15589509185599984, double6, 0.01);
      assertNotSame(well512a1, well512a0);
      assertFalse(well512a1.equals((Object)well512a0));
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double4, 0.01);
      
      System.setCurrentTimeMillis((-1230L));
      double double7 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.7899382171226832, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(895, hypergeometricDistribution0.getSampleSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2266, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.4777260139637193, double7, 0.01);
      assertNotSame(well512a1, well512a0);
      assertNotEquals(double7, double6, 0.01);
      assertEquals(double7, double5, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertFalse(well512a1.equals((Object)well512a0));
      
      int int3 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(0.7899382171226832, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(895, hypergeometricDistribution0.getSampleSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2266, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, int3);
      assertNotSame(well512a1, well512a0);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(well512a1.equals((Object)well512a0));
      
      double double8 = hypergeometricDistribution0.probability((-1943));
      assertEquals(0.7899382171226832, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(895, hypergeometricDistribution0.getSampleSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2266, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double8, 0.01);
      assertNotSame(well512a1, well512a0);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertFalse(well512a1.equals((Object)well512a0));
      
      int int4 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(0.7899382171226832, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(895, hypergeometricDistribution0.getSampleSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2266, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2266, int4);
      assertNotSame(well512a1, well512a0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(well512a1.equals((Object)well512a0));
      
      double double9 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(0.7899382171226832, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(895, hypergeometricDistribution0.getSampleSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2266, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.7899382171226832, double9, 0.01);
      assertNotSame(well512a1, well512a0);
      assertNotEquals(double9, double2, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertEquals(double9, double4, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertFalse(well512a1.equals((Object)well512a0));
      
      int int5 = (-1275);
      HypergeometricDistribution hypergeometricDistribution1 = null;
      try {
        hypergeometricDistribution1 = new HypergeometricDistribution(1, (-1275), (-1943));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-1,275)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1, 1, 1);
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.solveInverseCumulativeProbability(1, 1, 1);
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(1, int0);
      
      double double0 = hypergeometricDistribution0.probability((-405));
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double0, 0.01);
      
      double double1 = hypergeometricDistribution0.upperCumulativeProbability(1);
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      int int1 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(1, int1);
      assertTrue(int1 == int0);
      
      double double2 = hypergeometricDistribution0.cumulativeProbability((-405));
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double2, 0.01);
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      double double3 = hypergeometricDistribution0.cumulativeProbability((-405));
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double3, 0.01);
      assertEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      
      int int2 = hypergeometricDistribution0.sample();
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(1, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      double double4 = hypergeometricDistribution0.cumulativeProbability((-2553));
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double4, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(double4, double2, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(double4, double3, 0.01);
      
      double double5 = hypergeometricDistribution0.probability(1);
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(Double.NaN, double5, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double0, 0.01);
      
      int int3 = hypergeometricDistribution0.solveInverseCumulativeProbability(Double.NaN, (-405), 1347);
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(1347, int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      
      int int4 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(1, int4);
      assertTrue(int4 == int0);
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      assertFalse(int4 == int3);
      
      double double6 = hypergeometricDistribution0.upperCumulativeProbability((-2553));
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.0, double6, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertEquals(double6, double1, 0.01);
      assertNotEquals(double6, double5, 0.01);
      
      int int5 = hypergeometricDistribution0.inverseCumulativeProbability(1);
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(1, int5);
      assertTrue(int5 == int0);
      assertTrue(int5 == int2);
      assertTrue(int5 == int1);
      assertFalse(int5 == int3);
      assertTrue(int5 == int4);
      
      double double7 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.0, double7, 0.01);
      assertEquals(double7, double6, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertEquals(double7, double1, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double3, 0.01);
      
      double double8 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(Double.NaN, double8, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertEquals(double8, double5, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double3, 0.01);
      
      double double9 = hypergeometricDistribution0.upperCumulativeProbability(2);
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double9, 0.01);
      assertEquals(double9, double2, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertEquals(double9, double0, 0.01);
      assertEquals(double9, double4, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertEquals(double9, double3, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double7, 0.01);
      
      System.setCurrentTimeMillis(2005L);
      double double10 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(Double.NaN, double10, 0.01);
      assertNotEquals(double10, double7, 0.01);
      assertNotEquals(double10, double6, 0.01);
      assertNotEquals(double10, double0, 0.01);
      assertEquals(double10, double5, 0.01);
      assertNotEquals(double10, double3, 0.01);
      assertNotEquals(double10, double1, 0.01);
      assertEquals(double10, double8, 0.01);
      assertNotEquals(double10, double9, 0.01);
      assertNotEquals(double10, double2, 0.01);
      assertNotEquals(double10, double4, 0.01);
      
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(1, 1, 0);
      assertEquals(1, hypergeometricDistribution1.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution1.getSampleSize());
      assertEquals(1, hypergeometricDistribution1.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution1.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution1.isSupportConnected());
      assertNotNull(hypergeometricDistribution1);
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      
      double double11 = hypergeometricDistribution1.cumulativeProbability((-405));
      assertEquals(1, hypergeometricDistribution1.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution1.getSampleSize());
      assertEquals(1, hypergeometricDistribution1.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution1.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution1.isSupportConnected());
      assertEquals(0.0, double11, 0.01);
      assertNotSame(hypergeometricDistribution1, hypergeometricDistribution0);
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      assertNotEquals(double11, double10, 0.01);
      assertEquals(double11, double0, 0.01);
      assertEquals(double11, double2, 0.01);
      assertNotEquals(double11, double5, 0.01);
      assertEquals(double11, double9, 0.01);
      assertEquals(double11, double3, 0.01);
      assertNotEquals(double11, double8, 0.01);
      assertNotEquals(double11, double1, 0.01);
      assertEquals(double11, double4, 0.01);
      assertNotEquals(double11, double7, 0.01);
      assertNotEquals(double11, double6, 0.01);
      
      int int6 = hypergeometricDistribution1.getPopulationSize();
      assertEquals(1, hypergeometricDistribution1.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution1.getSampleSize());
      assertEquals(1, hypergeometricDistribution1.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution1.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution1.isSupportConnected());
      assertEquals(1, int6);
      assertNotSame(hypergeometricDistribution1, hypergeometricDistribution0);
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      assertTrue(int6 == int5);
      assertTrue(int6 == int2);
      assertTrue(int6 == int0);
      assertTrue(int6 == int4);
      assertFalse(int6 == int3);
      assertTrue(int6 == int1);
      
      double double12 = hypergeometricDistribution1.getNumericalMean();
      assertEquals(1, hypergeometricDistribution1.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution1.getSampleSize());
      assertEquals(1, hypergeometricDistribution1.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution1.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution1.isSupportConnected());
      assertEquals(0.0, double12, 0.01);
      assertNotSame(hypergeometricDistribution1, hypergeometricDistribution0);
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      assertEquals(double12, double11, 0.01);
      assertEquals(double12, double3, 0.01);
      assertEquals(double12, double9, 0.01);
      assertNotEquals(double12, double1, 0.01);
      assertNotEquals(double12, double6, 0.01);
      assertNotEquals(double12, double10, 0.01);
      assertNotEquals(double12, double7, 0.01);
      assertEquals(double12, double0, 0.01);
      assertEquals(double12, double4, 0.01);
      assertNotEquals(double12, double5, 0.01);
      assertNotEquals(double12, double8, 0.01);
      assertEquals(double12, double2, 0.01);
      
      double double13 = hypergeometricDistribution1.probability(5768);
      assertEquals(1, hypergeometricDistribution1.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution1.getSampleSize());
      assertEquals(1, hypergeometricDistribution1.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution1.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution1.isSupportConnected());
      assertEquals(0.0, double13, 0.01);
      assertNotSame(hypergeometricDistribution1, hypergeometricDistribution0);
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      assertNotEquals(double13, double8, 0.01);
      assertNotEquals(double13, double6, 0.01);
      assertNotEquals(double13, double10, 0.01);
      assertNotEquals(double13, double7, 0.01);
      assertEquals(double13, double0, 0.01);
      assertNotEquals(double13, double5, 0.01);
      assertEquals(double13, double3, 0.01);
      assertEquals(double13, double4, 0.01);
      assertEquals(double13, double9, 0.01);
      assertEquals(double13, double11, 0.01);
      assertEquals(double13, double12, 0.01);
      assertNotEquals(double13, double1, 0.01);
      assertEquals(double13, double2, 0.01);
      
      double double14 = hypergeometricDistribution1.getNumericalVariance();
      assertEquals(1, hypergeometricDistribution1.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution1.getSampleSize());
      assertEquals(1, hypergeometricDistribution1.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution1.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution1.isSupportConnected());
      assertEquals(Double.NaN, double14, 0.01);
      assertNotSame(hypergeometricDistribution1, hypergeometricDistribution0);
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      assertNotEquals(double14, double1, 0.01);
      assertNotEquals(double14, double6, 0.01);
      assertNotEquals(double14, double7, 0.01);
      assertNotEquals(double14, double0, 0.01);
      assertNotEquals(double14, double12, 0.01);
      assertNotEquals(double14, double2, 0.01);
      assertEquals(double14, double10, 0.01);
      assertNotEquals(double14, double3, 0.01);
      assertNotEquals(double14, double9, 0.01);
      assertNotEquals(double14, double11, 0.01);
      assertNotEquals(double14, double13, 0.01);
      assertEquals(double14, double5, 0.01);
      assertEquals(double14, double8, 0.01);
      assertNotEquals(double14, double4, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Well512a well512a0 = new Well512a(2301);
      assertNotNull(well512a0);
      
      double double0 = well512a0.nextGaussian();
      assertEquals(0.356656318775449, double0, 0.01);
      
      double double1 = well512a0.nextDouble();
      assertEquals(0.019850919118966193, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      well512a0.setSeed((int[]) null);
      double double2 = well512a0.nextDouble();
      assertEquals(0.5476909198201638, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      Well512a well512a1 = new Well512a((int[]) null);
      assertNotNull(well512a1);
      assertFalse(well512a1.equals((Object)well512a0));
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a1, 2301, 2, 895);
      assertEquals(895, hypergeometricDistribution0.getSampleSize());
      assertEquals(2301, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.777922642329422, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      assertFalse(well512a1.equals((Object)well512a0));
      
      hypergeometricDistribution0.reseedRandomGenerator(2301);
      assertEquals(895, hypergeometricDistribution0.getSampleSize());
      assertEquals(2301, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.777922642329422, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotSame(well512a1, well512a0);
      assertFalse(well512a1.equals((Object)well512a0));
      
      double double3 = hypergeometricDistribution0.cumulativeProbability(895);
      assertEquals(895, hypergeometricDistribution0.getSampleSize());
      assertEquals(2301, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.777922642329422, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double3, 0.01);
      assertNotSame(well512a1, well512a0);
      assertFalse(well512a1.equals((Object)well512a0));
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(895, hypergeometricDistribution0.getSampleSize());
      assertEquals(2301, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.777922642329422, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2, int0);
      assertNotSame(well512a1, well512a0);
      assertFalse(well512a1.equals((Object)well512a0));
      
      int int1 = hypergeometricDistribution0.sample();
      assertEquals(895, hypergeometricDistribution0.getSampleSize());
      assertEquals(2301, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.777922642329422, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, int1);
      assertNotSame(well512a1, well512a0);
      assertFalse(well512a1.equals((Object)well512a0));
      assertFalse(int1 == int0);
      
      double double4 = hypergeometricDistribution0.cumulativeProbability(0);
      assertEquals(895, hypergeometricDistribution0.getSampleSize());
      assertEquals(2301, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.777922642329422, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.37326493207112266, double4, 0.01);
      assertNotSame(well512a1, well512a0);
      assertFalse(well512a1.equals((Object)well512a0));
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      
      double double5 = hypergeometricDistribution0.upperCumulativeProbability(2301);
      assertEquals(895, hypergeometricDistribution0.getSampleSize());
      assertEquals(2301, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.777922642329422, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double5, 0.01);
      assertNotSame(well512a1, well512a0);
      assertFalse(well512a1.equals((Object)well512a0));
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double0, 0.01);
      
      double double6 = hypergeometricDistribution0.cumulativeProbability((-1));
      assertEquals(895, hypergeometricDistribution0.getSampleSize());
      assertEquals(2301, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.777922642329422, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double6, 0.01);
      assertNotSame(well512a1, well512a0);
      assertFalse(well512a1.equals((Object)well512a0));
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertEquals(double6, double5, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double2, 0.01);
      
      int int2 = hypergeometricDistribution0.inverseCumulativeProbability(0.0);
      assertEquals(895, hypergeometricDistribution0.getSampleSize());
      assertEquals(2301, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.777922642329422, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, int2);
      assertNotSame(well512a1, well512a0);
      assertFalse(well512a1.equals((Object)well512a0));
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(2705, 2, 1009);
      assertEquals(2, hypergeometricDistribution1.getNumberOfSuccesses());
      assertEquals(1009, hypergeometricDistribution1.getSampleSize());
      assertTrue(hypergeometricDistribution1.isSupportConnected());
      assertEquals(0.7460258780036969, hypergeometricDistribution1.getNumericalMean(), 0.01);
      assertEquals(2705, hypergeometricDistribution1.getPopulationSize());
      assertNotNull(hypergeometricDistribution1);
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      
      System.setCurrentTimeMillis((-954L));
      double double7 = hypergeometricDistribution1.cumulativeProbability((-1012));
      assertEquals(2, hypergeometricDistribution1.getNumberOfSuccesses());
      assertEquals(1009, hypergeometricDistribution1.getSampleSize());
      assertTrue(hypergeometricDistribution1.isSupportConnected());
      assertEquals(0.7460258780036969, hypergeometricDistribution1.getNumericalMean(), 0.01);
      assertEquals(2705, hypergeometricDistribution1.getPopulationSize());
      assertEquals(0.0, double7, 0.01);
      assertNotSame(hypergeometricDistribution1, hypergeometricDistribution0);
      assertEquals(double7, double6, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertEquals(double7, double5, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      
      HypergeometricDistribution hypergeometricDistribution2 = null;
      try {
        hypergeometricDistribution2 = new HypergeometricDistribution((-1012), 2, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-1,012)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Well512a well512a0 = new Well512a(2266);
      assertNotNull(well512a0);
      
      double double0 = well512a0.nextDouble();
      assertEquals(0.6963972538401448, double0, 0.01);
      
      well512a0.setSeed((int[]) null);
      double double1 = well512a0.nextDouble();
      assertEquals(0.5476909198201638, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      Well512a well512a1 = new Well512a((int[]) null);
      assertNotNull(well512a1);
      assertFalse(well512a1.equals((Object)well512a0));
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a1, 2266, 2, 895);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2266, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.7899382171226832, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(895, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      assertFalse(well512a1.equals((Object)well512a0));
      
      hypergeometricDistribution0.reseedRandomGenerator(2266);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2266, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.7899382171226832, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(895, hypergeometricDistribution0.getSampleSize());
      assertNotSame(well512a1, well512a0);
      assertFalse(well512a1.equals((Object)well512a0));
      
      double double2 = hypergeometricDistribution0.cumulativeProbability(895);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2266, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.7899382171226832, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(895, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.0, double2, 0.01);
      assertNotSame(well512a1, well512a0);
      assertFalse(well512a1.equals((Object)well512a0));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2266, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.7899382171226832, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(895, hypergeometricDistribution0.getSampleSize());
      assertEquals(2, int0);
      assertNotSame(well512a1, well512a0);
      assertFalse(well512a1.equals((Object)well512a0));
      
      int int1 = hypergeometricDistribution0.sample();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2266, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.7899382171226832, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(895, hypergeometricDistribution0.getSampleSize());
      assertEquals(1, int1);
      assertNotSame(well512a1, well512a0);
      assertFalse(well512a1.equals((Object)well512a0));
      assertFalse(int1 == int0);
      
      double double3 = hypergeometricDistribution0.cumulativeProbability(1);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2266, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.7899382171226832, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(895, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.8441049081440002, double3, 0.01);
      assertNotSame(well512a1, well512a0);
      assertFalse(well512a1.equals((Object)well512a0));
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      
      double double4 = hypergeometricDistribution0.upperCumulativeProbability(2266);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2266, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.7899382171226832, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(895, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double4, 0.01);
      assertNotSame(well512a1, well512a0);
      assertFalse(well512a1.equals((Object)well512a0));
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      
      double double5 = hypergeometricDistribution0.cumulativeProbability((-1));
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2266, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.7899382171226832, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(895, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double5, 0.01);
      assertNotSame(well512a1, well512a0);
      assertFalse(well512a1.equals((Object)well512a0));
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertEquals(double5, double4, 0.01);
      
      int int2 = hypergeometricDistribution0.inverseCumulativeProbability(0.0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2266, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.7899382171226832, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(895, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, int2);
      assertNotSame(well512a1, well512a0);
      assertFalse(well512a1.equals((Object)well512a0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      double double6 = hypergeometricDistribution0.getNumericalVariance();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2266, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.7899382171226832, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(895, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.4777260139637193, double6, 0.01);
      assertNotSame(well512a1, well512a0);
      assertFalse(well512a1.equals((Object)well512a0));
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double0, 0.01);
      
      int int3 = hypergeometricDistribution0.getSupportLowerBound();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2266, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.7899382171226832, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(895, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, int3);
      assertNotSame(well512a1, well512a0);
      assertFalse(well512a1.equals((Object)well512a0));
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(2266, 1, 895);
      assertTrue(hypergeometricDistribution1.isSupportConnected());
      assertEquals(2266, hypergeometricDistribution1.getPopulationSize());
      assertEquals(1, hypergeometricDistribution1.getNumberOfSuccesses());
      assertEquals(0.3949691085613416, hypergeometricDistribution1.getNumericalMean(), 0.01);
      assertEquals(895, hypergeometricDistribution1.getSampleSize());
      assertNotNull(hypergeometricDistribution1);
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      
      int int4 = hypergeometricDistribution1.getPopulationSize();
      assertTrue(hypergeometricDistribution1.isSupportConnected());
      assertEquals(2266, hypergeometricDistribution1.getPopulationSize());
      assertEquals(1, hypergeometricDistribution1.getNumberOfSuccesses());
      assertEquals(0.3949691085613416, hypergeometricDistribution1.getNumericalMean(), 0.01);
      assertEquals(895, hypergeometricDistribution1.getSampleSize());
      assertEquals(2266, int4);
      assertNotSame(hypergeometricDistribution1, hypergeometricDistribution0);
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      
      int int5 = hypergeometricDistribution1.getNumberOfSuccesses();
      assertTrue(hypergeometricDistribution1.isSupportConnected());
      assertEquals(2266, hypergeometricDistribution1.getPopulationSize());
      assertEquals(1, hypergeometricDistribution1.getNumberOfSuccesses());
      assertEquals(0.3949691085613416, hypergeometricDistribution1.getNumericalMean(), 0.01);
      assertEquals(895, hypergeometricDistribution1.getSampleSize());
      assertEquals(1, int5);
      assertNotSame(hypergeometricDistribution1, hypergeometricDistribution0);
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      assertTrue(int5 == int1);
      assertFalse(int5 == int0);
      assertFalse(int5 == int4);
      assertFalse(int5 == int2);
      assertFalse(int5 == int3);
      
      HypergeometricDistribution hypergeometricDistribution2 = null;
      try {
        hypergeometricDistribution2 = new HypergeometricDistribution(well512a0, 1244, 0, 2266);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (2,266) must be less than or equal to population size (1,244)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      assertNotNull(well44497b0);
      
      well44497b0.clear();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 396, 396, 396);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(396.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(396, hypergeometricDistribution0.getSampleSize());
      assertEquals(396, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(396, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(396);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(396.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(396, hypergeometricDistribution0.getSampleSize());
      assertEquals(396, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(396, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.0, double0, 0.01);
      
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(396.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(396, hypergeometricDistribution0.getSampleSize());
      assertEquals(396, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(396, hypergeometricDistribution0.getPopulationSize());
      assertTrue(boolean0);
      
      double double1 = well44497b0.nextDouble();
      assertEquals(0.8205931517948541, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = hypergeometricDistribution0.cumulativeProbability(396, 1415);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(396.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(396, hypergeometricDistribution0.getSampleSize());
      assertEquals(396, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(396, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      well44497b0.setSeed((long) 396);
      well44497b0.setSeed((-441L));
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(396.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(396, hypergeometricDistribution0.getSampleSize());
      assertEquals(396, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(396, hypergeometricDistribution0.getPopulationSize());
      assertEquals(396, int0);
      
      double double3 = hypergeometricDistribution0.cumulativeProbability(396);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(396.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(396, hypergeometricDistribution0.getSampleSize());
      assertEquals(396, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(396, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.0, double3, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      
      double double4 = hypergeometricDistribution0.probability(1414);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(396.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(396, hypergeometricDistribution0.getSampleSize());
      assertEquals(396, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(396, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double4, 0.01);
      assertEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      
      double double5 = hypergeometricDistribution0.upperCumulativeProbability(891);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(396.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(396, hypergeometricDistribution0.getSampleSize());
      assertEquals(396, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(396, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double5, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertEquals(double5, double4, 0.01);
      assertEquals(double5, double2, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double0, 0.01);
      
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(well44497b0, 3287, 891, 396);
      assertTrue(hypergeometricDistribution1.isSupportConnected());
      assertEquals(107.342865835108, hypergeometricDistribution1.getNumericalMean(), 0.01);
      assertEquals(396, hypergeometricDistribution1.getSampleSize());
      assertEquals(3287, hypergeometricDistribution1.getPopulationSize());
      assertEquals(891, hypergeometricDistribution1.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution1);
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      
      double double6 = hypergeometricDistribution1.getNumericalVariance();
      assertTrue(hypergeometricDistribution1.isSupportConnected());
      assertEquals(107.342865835108, hypergeometricDistribution1.getNumericalMean(), 0.01);
      assertEquals(396, hypergeometricDistribution1.getSampleSize());
      assertEquals(3287, hypergeometricDistribution1.getPopulationSize());
      assertEquals(891, hypergeometricDistribution1.getNumberOfSuccesses());
      assertEquals(68.8399946792179, double6, 0.01);
      assertNotSame(hypergeometricDistribution1, hypergeometricDistribution0);
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double5, 0.01);
      
      double double7 = hypergeometricDistribution1.calculateNumericalVariance();
      assertTrue(hypergeometricDistribution1.isSupportConnected());
      assertEquals(107.342865835108, hypergeometricDistribution1.getNumericalMean(), 0.01);
      assertEquals(396, hypergeometricDistribution1.getSampleSize());
      assertEquals(3287, hypergeometricDistribution1.getPopulationSize());
      assertEquals(891, hypergeometricDistribution1.getNumberOfSuccesses());
      assertEquals(68.8399946792179, double7, 0.01);
      assertNotSame(hypergeometricDistribution1, hypergeometricDistribution0);
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertEquals(double7, double6, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double3, 0.01);
      
      double double8 = hypergeometricDistribution0.calculateNumericalVariance();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(396.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(396, hypergeometricDistribution0.getSampleSize());
      assertEquals(396, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(396, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double8, 0.01);
      assertNotSame(hypergeometricDistribution0, hypergeometricDistribution1);
      assertEquals(double8, double5, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertEquals(double8, double4, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertEquals(double8, double2, 0.01);
      assertFalse(hypergeometricDistribution0.equals((Object)hypergeometricDistribution1));
      
      double double9 = hypergeometricDistribution0.getNumericalMean();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(396.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(396, hypergeometricDistribution0.getSampleSize());
      assertEquals(396, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(396, hypergeometricDistribution0.getPopulationSize());
      assertEquals(396.0, double9, 0.01);
      assertNotSame(hypergeometricDistribution0, hypergeometricDistribution1);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertFalse(hypergeometricDistribution0.equals((Object)hypergeometricDistribution1));
      
      int int1 = hypergeometricDistribution0.getSupportLowerBound();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(396.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(396, hypergeometricDistribution0.getSampleSize());
      assertEquals(396, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(396, hypergeometricDistribution0.getPopulationSize());
      assertEquals(396, int1);
      assertNotSame(hypergeometricDistribution0, hypergeometricDistribution1);
      assertTrue(int1 == int0);
      assertFalse(hypergeometricDistribution0.equals((Object)hypergeometricDistribution1));
      
      int int2 = hypergeometricDistribution0.getSupportLowerBound();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(396.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(396, hypergeometricDistribution0.getSampleSize());
      assertEquals(396, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(396, hypergeometricDistribution0.getPopulationSize());
      assertEquals(396, int2);
      assertNotSame(hypergeometricDistribution0, hypergeometricDistribution1);
      assertFalse(hypergeometricDistribution0.equals((Object)hypergeometricDistribution1));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2285, 1255, 2285);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2285, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2285, hypergeometricDistribution0.getSampleSize());
      assertEquals(1255.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1255, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      hypergeometricDistribution0.reseedRandomGenerator(1255);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2285, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2285, hypergeometricDistribution0.getSampleSize());
      assertEquals(1255.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1255, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2285, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2285, hypergeometricDistribution0.getSampleSize());
      assertEquals(1255.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1255, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1255, int0);
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(1672);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2285, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2285, hypergeometricDistribution0.getSampleSize());
      assertEquals(1255.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1255, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.0, double0, 0.01);
      
      int int1 = hypergeometricDistribution0.sample();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2285, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2285, hypergeometricDistribution0.getSampleSize());
      assertEquals(1255.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1255, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1255, int1);
      assertTrue(int1 == int0);
      
      double double1 = hypergeometricDistribution0.cumulativeProbability(1255);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2285, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2285, hypergeometricDistribution0.getSampleSize());
      assertEquals(1255.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1255, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      int int2 = hypergeometricDistribution0.getPopulationSize();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2285, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2285, hypergeometricDistribution0.getSampleSize());
      assertEquals(1255.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1255, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2285, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      double double2 = hypergeometricDistribution0.getNumericalMean();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2285, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2285, hypergeometricDistribution0.getSampleSize());
      assertEquals(1255.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1255, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1255.0, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      double double3 = hypergeometricDistribution0.probability(1255);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2285, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2285, hypergeometricDistribution0.getSampleSize());
      assertEquals(1255.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1255, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.0, double3, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      
      int int3 = hypergeometricDistribution0.getPopulationSize();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2285, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2285, hypergeometricDistribution0.getSampleSize());
      assertEquals(1255.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1255, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2285, int3);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      
      int int4 = hypergeometricDistribution0.getSupportLowerBound();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2285, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2285, hypergeometricDistribution0.getSampleSize());
      assertEquals(1255.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1255, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1255, int4);
      assertTrue(int4 == int1);
      assertFalse(int4 == int2);
      assertTrue(int4 == int0);
      assertFalse(int4 == int3);
      
      int int5 = hypergeometricDistribution0.getSupportLowerBound();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2285, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2285, hypergeometricDistribution0.getSampleSize());
      assertEquals(1255.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1255, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1255, int5);
      assertFalse(int5 == int2);
      assertTrue(int5 == int0);
      assertTrue(int5 == int4);
      assertTrue(int5 == int1);
      assertFalse(int5 == int3);
      
      double double4 = hypergeometricDistribution0.getNumericalVariance();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2285, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2285, hypergeometricDistribution0.getSampleSize());
      assertEquals(1255.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1255, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double4, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      
      int int6 = hypergeometricDistribution0.getPopulationSize();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2285, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2285, hypergeometricDistribution0.getSampleSize());
      assertEquals(1255.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1255, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2285, int6);
      assertFalse(int6 == int5);
      assertFalse(int6 == int4);
      assertTrue(int6 == int3);
      assertFalse(int6 == int1);
      assertTrue(int6 == int2);
      assertFalse(int6 == int0);
      
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2285, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2285, hypergeometricDistribution0.getSampleSize());
      assertEquals(1255.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1255, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(boolean0);
      
      int int7 = hypergeometricDistribution0.getSupportUpperBound();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2285, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2285, hypergeometricDistribution0.getSampleSize());
      assertEquals(1255.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1255, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1255, int7);
      assertTrue(int7 == int0);
      assertTrue(int7 == int4);
      assertTrue(int7 == int5);
      assertTrue(int7 == int1);
      assertFalse(int7 == int3);
      assertFalse(int7 == int6);
      assertFalse(int7 == int2);
      
      int int8 = hypergeometricDistribution0.getPopulationSize();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2285, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2285, hypergeometricDistribution0.getSampleSize());
      assertEquals(1255.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1255, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2285, int8);
      assertFalse(int8 == int1);
      assertTrue(int8 == int2);
      assertFalse(int8 == int0);
      assertTrue(int8 == int6);
      assertTrue(int8 == int3);
      assertFalse(int8 == int7);
      assertFalse(int8 == int5);
      assertFalse(int8 == int4);
      
      int int9 = hypergeometricDistribution0.getPopulationSize();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2285, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2285, hypergeometricDistribution0.getSampleSize());
      assertEquals(1255.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1255, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2285, int9);
      assertTrue(int9 == int2);
      assertFalse(int9 == int1);
      assertTrue(int9 == int6);
      assertFalse(int9 == int4);
      assertTrue(int9 == int8);
      assertFalse(int9 == int5);
      assertFalse(int9 == int0);
      assertTrue(int9 == int3);
      assertFalse(int9 == int7);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Well512a well512a0 = new Well512a(2266);
      assertNotNull(well512a0);
      
      double double0 = well512a0.nextDouble();
      assertEquals(0.6963972538401448, double0, 0.01);
      
      well512a0.setSeed((int[]) null);
      double double1 = well512a0.nextDouble();
      assertEquals(0.5476909198201638, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      Well512a well512a1 = new Well512a((int[]) null);
      assertNotNull(well512a1);
      assertFalse(well512a1.equals((Object)well512a0));
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a1, 2266, 2, 895);
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.7899382171226832, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2266, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(895, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      assertFalse(well512a1.equals((Object)well512a0));
      
      hypergeometricDistribution0.reseedRandomGenerator(2266);
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.7899382171226832, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2266, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(895, hypergeometricDistribution0.getSampleSize());
      assertNotSame(well512a1, well512a0);
      assertFalse(well512a1.equals((Object)well512a0));
      
      double double2 = hypergeometricDistribution0.cumulativeProbability(895);
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.7899382171226832, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2266, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(895, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.0, double2, 0.01);
      assertNotSame(well512a1, well512a0);
      assertFalse(well512a1.equals((Object)well512a0));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.7899382171226832, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2266, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(895, hypergeometricDistribution0.getSampleSize());
      assertEquals(2, int0);
      assertNotSame(well512a1, well512a0);
      assertFalse(well512a1.equals((Object)well512a0));
      
      int int1 = hypergeometricDistribution0.sample();
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.7899382171226832, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2266, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(895, hypergeometricDistribution0.getSampleSize());
      assertEquals(1, int1);
      assertNotSame(well512a1, well512a0);
      assertFalse(well512a1.equals((Object)well512a0));
      assertFalse(int1 == int0);
      
      double double3 = hypergeometricDistribution0.cumulativeProbability(1);
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.7899382171226832, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2266, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(895, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.8441049081440002, double3, 0.01);
      assertNotSame(well512a1, well512a0);
      assertFalse(well512a1.equals((Object)well512a0));
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      
      double double4 = hypergeometricDistribution0.upperCumulativeProbability(2266);
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.7899382171226832, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2266, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(895, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double4, 0.01);
      assertNotSame(well512a1, well512a0);
      assertFalse(well512a1.equals((Object)well512a0));
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      
      double double5 = hypergeometricDistribution0.cumulativeProbability((-1));
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.7899382171226832, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2266, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(895, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double5, 0.01);
      assertNotSame(well512a1, well512a0);
      assertFalse(well512a1.equals((Object)well512a0));
      assertEquals(double5, double4, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double1, 0.01);
      
      int int2 = hypergeometricDistribution0.inverseCumulativeProbability(0.0);
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.7899382171226832, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2266, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(895, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, int2);
      assertNotSame(well512a1, well512a0);
      assertFalse(well512a1.equals((Object)well512a0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      double double6 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.7899382171226832, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2266, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(895, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.4777260139637193, double6, 0.01);
      assertNotSame(well512a1, well512a0);
      assertFalse(well512a1.equals((Object)well512a0));
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double4, 0.01);
      
      int int3 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.7899382171226832, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2266, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(895, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, int3);
      assertNotSame(well512a1, well512a0);
      assertFalse(well512a1.equals((Object)well512a0));
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      
      HypergeometricDistribution hypergeometricDistribution1 = null;
      try {
        hypergeometricDistribution1 = new HypergeometricDistribution(0, 1, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Well512a well512a0 = new Well512a(2266);
      assertNotNull(well512a0);
      
      double double0 = well512a0.nextDouble();
      assertEquals(0.6963972538401448, double0, 0.01);
      
      well512a0.setSeed((int[]) null);
      double double1 = well512a0.nextDouble();
      assertEquals(0.5476909198201638, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 2, 0, 0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      hypergeometricDistribution0.reseedRandomGenerator((-1206));
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      
      double double2 = hypergeometricDistribution0.cumulativeProbability((-1206));
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      double double3 = hypergeometricDistribution0.cumulativeProbability(1679);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.0, double3, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(2, int0);
      
      double double4 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.0, double4, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(double4, double3, 0.01);
      
      int int1 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      double double5 = hypergeometricDistribution0.probability(2682);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double5, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertEquals(double5, double2, 0.01);
      
      double double6 = hypergeometricDistribution0.probability(0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(Double.NaN, double6, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double1, 0.01);
      
      int int2 = hypergeometricDistribution0.getSampleSize();
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[1];
      int int0 = 2077;
      intArray0[0] = 2077;
      Well512a well512a0 = new Well512a(intArray0);
      assertNotNull(well512a0);
      assertArrayEquals(new int[] {2077}, intArray0);
      assertEquals(1, intArray0.length);
      
      int int1 = well512a0.nextInt();
      assertEquals(312839189, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new int[] {2077}, intArray0);
      assertEquals(1, intArray0.length);
      
      well512a0.clear();
      assertArrayEquals(new int[] {2077}, intArray0);
      assertEquals(1, intArray0.length);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 618, 2077, 2077);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (2,077) must be less than or equal to population size (618)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2381, 2381, 2381);
      assertEquals(2381, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2381, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2381.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2381, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      hypergeometricDistribution0.reseedRandomGenerator(2918L);
      assertEquals(2381, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2381, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2381.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2381, hypergeometricDistribution0.getSampleSize());
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(2381, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2381, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2381.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2381, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double0, 0.01);
      
      int int0 = hypergeometricDistribution0.solveInverseCumulativeProbability(8.098545495417704E274, 0, 2);
      assertEquals(2381, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2381, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2381.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2381, hypergeometricDistribution0.getSampleSize());
      assertEquals(2, int0);
      
      int int1 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(2381, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2381, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2381.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2381, hypergeometricDistribution0.getSampleSize());
      assertEquals(2381, int1);
      assertFalse(int1 == int0);
      
      int int2 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(2381, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2381, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2381.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2381, hypergeometricDistribution0.getSampleSize());
      assertEquals(2381, int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      double double1 = hypergeometricDistribution0.probability(2381);
      assertEquals(2381, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2381, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2381.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2381, hypergeometricDistribution0.getSampleSize());
      assertEquals(Double.NaN, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      int int3 = hypergeometricDistribution0.solveInverseCumulativeProbability((-570.7647742057327), 2381, 1424);
      assertEquals(2381, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2381, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2381.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2381, hypergeometricDistribution0.getSampleSize());
      assertEquals(1424, int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      
      double double2 = hypergeometricDistribution0.cumulativeProbability(1424);
      assertEquals(2381, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2381, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2381.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2381, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      
      hypergeometricDistribution0.reseedRandomGenerator(1424);
      assertEquals(2381, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2381, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2381.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2381, hypergeometricDistribution0.getSampleSize());
      
      double double3 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(2381, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2381, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2381.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2381, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double3, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      
      double double4 = hypergeometricDistribution0.cumulativeProbability(1424);
      assertEquals(2381, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2381, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2381.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2381, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double4, 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      
      int[] intArray0 = hypergeometricDistribution0.sample(1307);
      assertEquals(2381, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2381, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2381.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2381, hypergeometricDistribution0.getSampleSize());
      assertNotNull(intArray0);
      assertEquals(1307, intArray0.length);
      
      double double5 = hypergeometricDistribution0.cumulativeProbability((-1), 0);
      assertEquals(2381, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2381, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2381.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2381, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double5, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertEquals(double5, double4, 0.01);
      assertEquals(double5, double2, 0.01);
      assertEquals(double5, double3, 0.01);
      assertEquals(double5, double0, 0.01);
      
      int int4 = hypergeometricDistribution0.getSampleSize();
      assertEquals(2381, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2381, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2381.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2381, hypergeometricDistribution0.getSampleSize());
      assertEquals(2381, int4);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      
      double double6 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(2381, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2381, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2381.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2381, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double6, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertEquals(double6, double4, 0.01);
      assertEquals(double6, double3, 0.01);
      assertEquals(double6, double5, 0.01);
      assertEquals(double6, double0, 0.01);
      assertEquals(double6, double2, 0.01);
      
      int int5 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(2381, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2381, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2381.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2381, hypergeometricDistribution0.getSampleSize());
      assertEquals(2381, int5);
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      assertTrue(int5 == int2);
      assertTrue(int5 == int1);
      assertTrue(int5 == int4);
      
      double double7 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(2381, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2381, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2381.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2381, hypergeometricDistribution0.getSampleSize());
      assertEquals(2381.0, double7, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double0, 0.01);
      
      double double8 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(2381, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2381, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2381.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2381, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double8, 0.01);
      assertEquals(double8, double4, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertEquals(double8, double6, 0.01);
      assertEquals(double8, double3, 0.01);
      assertEquals(double8, double5, 0.01);
      assertEquals(double8, double2, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertEquals(double8, double0, 0.01);
      
      int int6 = hypergeometricDistribution0.getSampleSize();
      assertEquals(2381, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2381, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2381.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2381, hypergeometricDistribution0.getSampleSize());
      assertEquals(2381, int6);
      assertFalse(int6 == int0);
      assertTrue(int6 == int2);
      assertTrue(int6 == int4);
      assertFalse(int6 == int3);
      assertTrue(int6 == int1);
      assertTrue(int6 == int5);
      
      int int7 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(2381, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2381, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2381.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2381, hypergeometricDistribution0.getSampleSize());
      assertEquals(2381, int7);
      assertFalse(int7 == int0);
      assertTrue(int7 == int4);
      assertTrue(int7 == int1);
      assertFalse(int7 == int3);
      assertTrue(int7 == int6);
      assertTrue(int7 == int2);
      assertTrue(int7 == int5);
      
      int int8 = hypergeometricDistribution0.getSampleSize();
      assertEquals(2381, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2381, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2381.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2381, hypergeometricDistribution0.getSampleSize());
      assertEquals(2381, int8);
      assertFalse(int8 == int3);
      assertTrue(int8 == int7);
      assertTrue(int8 == int5);
      assertTrue(int8 == int2);
      assertFalse(int8 == int0);
      assertTrue(int8 == int6);
      assertTrue(int8 == int1);
      assertTrue(int8 == int4);
      
      double double9 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(2381, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2381, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2381.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2381, hypergeometricDistribution0.getSampleSize());
      assertEquals(2381.0, double9, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertEquals(double9, double7, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertNotEquals(double9, double3, 0.01);
      
      int int9 = hypergeometricDistribution0.getSampleSize();
      assertEquals(2381, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2381, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2381.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2381, hypergeometricDistribution0.getSampleSize());
      assertEquals(2381, int9);
      assertTrue(int9 == int1);
      assertTrue(int9 == int5);
      assertTrue(int9 == int6);
      assertTrue(int9 == int8);
      assertTrue(int9 == int4);
      assertTrue(int9 == int2);
      assertFalse(int9 == int3);
      assertFalse(int9 == int0);
      assertTrue(int9 == int7);
      
      double double10 = hypergeometricDistribution0.cumulativeProbability((-1));
      assertEquals(2381, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2381, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2381.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2381, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double10, 0.01);
      assertNotEquals(double10, double7, 0.01);
      assertEquals(double10, double8, 0.01);
      assertEquals(double10, double6, 0.01);
      assertEquals(double10, double4, 0.01);
      assertNotEquals(double10, double9, 0.01);
      assertEquals(double10, double5, 0.01);
      assertEquals(double10, double0, 0.01);
      assertEquals(double10, double3, 0.01);
      assertEquals(double10, double2, 0.01);
      assertNotEquals(double10, double1, 0.01);
      
      int int10 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(2381, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2381, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2381.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2381, hypergeometricDistribution0.getSampleSize());
      assertEquals(2381, int10);
      assertTrue(int10 == int7);
      assertFalse(int10 == int3);
      assertTrue(int10 == int4);
      assertFalse(int10 == int0);
      assertTrue(int10 == int1);
      assertTrue(int10 == int2);
      assertTrue(int10 == int6);
      assertTrue(int10 == int9);
      assertTrue(int10 == int8);
      assertTrue(int10 == int5);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(1723L);
      assertNotNull(well1024a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 326, 1571, 326);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (1,571) must be less than or equal to population size (326)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 1;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1, 1, (-878));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-878)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Well512a well512a0 = new Well512a(2266);
      assertNotNull(well512a0);
      
      double double0 = well512a0.nextDouble();
      assertEquals(0.6963972538401448, double0, 0.01);
      
      well512a0.setSeed((int[]) null);
      double double1 = well512a0.nextDouble();
      assertEquals(0.5476909198201638, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 2, 0, 0);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      hypergeometricDistribution0.reseedRandomGenerator((-1206));
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double2 = hypergeometricDistribution0.cumulativeProbability((-1206));
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, int0);
      
      int int1 = hypergeometricDistribution0.sample();
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      double double3 = hypergeometricDistribution0.cumulativeProbability(0);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double3, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      
      double double4 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double4, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      
      double double5 = hypergeometricDistribution0.cumulativeProbability(2682);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double5, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertEquals(double5, double4, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertEquals(double5, double3, 0.01);
      
      try { 
        hypergeometricDistribution0.inverseCumulativeProbability((-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1235, 1235, 1235);
      assertEquals(1235, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1235, hypergeometricDistribution0.getSampleSize());
      assertEquals(1235, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1235.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.cumulativeProbability((-1057), 83);
      assertEquals(1235, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1235, hypergeometricDistribution0.getSampleSize());
      assertEquals(1235, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1235.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = hypergeometricDistribution0.cumulativeProbability((-1157));
      assertEquals(1235, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1235, hypergeometricDistribution0.getSampleSize());
      assertEquals(1235, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1235.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double double2 = hypergeometricDistribution0.cumulativeProbability(1431);
      assertEquals(1235, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1235, hypergeometricDistribution0.getSampleSize());
      assertEquals(1235, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1235.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(1235, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1235, hypergeometricDistribution0.getSampleSize());
      assertEquals(1235, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1235.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1235, int0);
      
      double double3 = hypergeometricDistribution0.upperCumulativeProbability(1235);
      assertEquals(1235, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1235, hypergeometricDistribution0.getSampleSize());
      assertEquals(1235, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1235.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double3, 0.01);
      assertEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      
      int int1 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(1235, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1235, hypergeometricDistribution0.getSampleSize());
      assertEquals(1235, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1235.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1235, int1);
      assertTrue(int1 == int0);
      
      double double4 = hypergeometricDistribution0.probability(1235);
      assertEquals(1235, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1235, hypergeometricDistribution0.getSampleSize());
      assertEquals(1235, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1235.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(Double.NaN, double4, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      
      double double5 = hypergeometricDistribution0.probability(1282);
      assertEquals(1235, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1235, hypergeometricDistribution0.getSampleSize());
      assertEquals(1235, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1235.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double5, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertEquals(double5, double1, 0.01);
      assertEquals(double5, double0, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double3, 0.01);
      
      int int2 = hypergeometricDistribution0.getSampleSize();
      assertEquals(1235, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1235, hypergeometricDistribution0.getSampleSize());
      assertEquals(1235, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1235.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1235, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(2165, (-1), 1184);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-1)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      well44497b0.clear();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 396, 396, 396);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(396);
      assertEquals(1.0, double0, 0.01);
      
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      
      well44497b0.nextDouble();
      double double1 = hypergeometricDistribution0.cumulativeProbability(396, 1415);
      well44497b0.setSeed((long) 396);
      well44497b0.setSeed((-441L));
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.upperCumulativeProbability((-88));
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.getNumericalVariance();
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(396, int0);
      
      double double2 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(double2, double1, 0.01);
      
      hypergeometricDistribution0.probability((-88));
      hypergeometricDistribution0.sample(396);
      double double3 = hypergeometricDistribution0.probability(396);
      assertEquals(Double.NaN, double3, 0.01);
      
      double double4 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(396.0, double4, 0.01);
      
      double double5 = hypergeometricDistribution0.upperCumulativeProbability(1454);
      assertEquals(0.0, double5, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 1469;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(900, 900, 1469);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (1,469) must be less than or equal to population size (900)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 1407;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((-3068), 1407, 1407);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-3,068)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 2285;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2285, 1255, 2285);
      hypergeometricDistribution0.reseedRandomGenerator(1255);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.cumulativeProbability(1672);
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.sample(1290);
      int int1 = 2;
      hypergeometricDistribution0.getSupportUpperBound();
      try { 
        hypergeometricDistribution0.inverseCumulativeProbability(1255);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1,255 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 119;
      int int1 = 0;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(119, 119, 0);
      try { 
        hypergeometricDistribution0.inverseCumulativeProbability((-391.805531));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -391.806 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 1371;
      Well19937c well19937c0 = new Well19937c(1371);
      well19937c0.nextLong(1L);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }
}
