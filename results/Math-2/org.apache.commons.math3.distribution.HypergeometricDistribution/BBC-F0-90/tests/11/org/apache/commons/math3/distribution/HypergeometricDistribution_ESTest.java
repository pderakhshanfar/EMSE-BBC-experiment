/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 14:59:22 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2574, 94, 94);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(94, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3.432789432789433, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2574, hypergeometricDistribution0.getPopulationSize());
      assertEquals(94, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(94);
      assertEquals(1.533765945559669E-174, double0, 0.01);
      assertEquals(94, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3.432789432789433, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2574, hypergeometricDistribution0.getPopulationSize());
      assertEquals(94, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(352, 352, 352);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(352, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(352, hypergeometricDistribution0.getPopulationSize());
      assertEquals(352.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(352, hypergeometricDistribution0.getSampleSize());
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(352);
      assertEquals(1.0, double0, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(352, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(352, hypergeometricDistribution0.getPopulationSize());
      assertEquals(352.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(352, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(352, 352, 352);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(352, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(352, hypergeometricDistribution0.getSampleSize());
      assertEquals(352.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(352, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(352, 1461);
      assertEquals(0.0, double0, 0.01);
      assertEquals(352, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(352, hypergeometricDistribution0.getSampleSize());
      assertEquals(352.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(352, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((-2898), (-2898), 1732);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-2,898)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2574, 94, 94);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(94, hypergeometricDistribution0.getSampleSize());
      assertEquals(3.432789432789433, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(94, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2574, hypergeometricDistribution0.getPopulationSize());
      
      double double0 = hypergeometricDistribution0.probability(2);
      assertEquals(0.19006278574686078, double0, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(94, hypergeometricDistribution0.getSampleSize());
      assertEquals(3.432789432789433, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(94, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2574, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[7];
      Well1024a well1024a0 = new Well1024a(intArray0);
      assertNotNull(well1024a0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 206, 0, 6);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(7, intArray0.length);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(206, hypergeometricDistribution0.getPopulationSize());
      assertEquals(6, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(0, int0);
      assertEquals(7, intArray0.length);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(206, hypergeometricDistribution0.getPopulationSize());
      assertEquals(6, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(352, 352, 352);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(352, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(352, hypergeometricDistribution0.getSampleSize());
      assertEquals(352, hypergeometricDistribution0.getPopulationSize());
      assertEquals(352.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(352, int0);
      assertEquals(352, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(352, hypergeometricDistribution0.getSampleSize());
      assertEquals(352, hypergeometricDistribution0.getPopulationSize());
      assertEquals(352.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2937, 0, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2937, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(0, int0);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2937, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2937, 0, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2937, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2937, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2283, 1850, 2);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1.6206745510293474, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2283, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(1850, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.30724685253900214, double0, 0.01);
      assertEquals(1.6206745510293474, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2283, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(1850, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[7];
      Well1024a well1024a0 = new Well1024a(intArray0);
      assertNotNull(well1024a0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 206, 0, 6);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(7, intArray0.length);
      assertEquals(206, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(6, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(0.0, double0, 0.01);
      assertEquals(7, intArray0.length);
      assertEquals(206, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(6, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      assertNotNull(well44497a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 882, 882, 681);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(882, hypergeometricDistribution0.getPopulationSize());
      assertEquals(681, hypergeometricDistribution0.getSampleSize());
      assertEquals(681.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(882, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(681.0, double0, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(882, hypergeometricDistribution0.getPopulationSize());
      assertEquals(681, hypergeometricDistribution0.getSampleSize());
      assertEquals(681.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(882, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1591, 0, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1591, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(0, int0);
      assertEquals(1591, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(352, 352, 352);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(352.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(352, hypergeometricDistribution0.getSampleSize());
      assertEquals(352, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(352, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      assertEquals(352.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(352, hypergeometricDistribution0.getSampleSize());
      assertEquals(352, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(352, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2283, 1850, 2);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1.6206745510293474, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(2283, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1850, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.30724685253900214, double0, 0.01);
      assertEquals(1.6206745510293474, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(2283, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1850, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(352, 352, 352);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(352, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(352, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(352, hypergeometricDistribution0.getPopulationSize());
      assertEquals(352.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double0 = hypergeometricDistribution0.probability(352);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(352, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(352, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(352, hypergeometricDistribution0.getPopulationSize());
      assertEquals(352.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      assertNotNull(well44497b0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 2, 2, 2);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(2, int0);
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(352, 352, 352);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(352, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(352, hypergeometricDistribution0.getSampleSize());
      assertEquals(352.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(352, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(352, int0);
      assertEquals(352, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(352, hypergeometricDistribution0.getSampleSize());
      assertEquals(352.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(352, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(352, 352, 352);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(352, hypergeometricDistribution0.getPopulationSize());
      assertEquals(352, hypergeometricDistribution0.getSampleSize());
      assertEquals(352.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(352, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(352, int0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(352, hypergeometricDistribution0.getPopulationSize());
      assertEquals(352, hypergeometricDistribution0.getSampleSize());
      assertEquals(352.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(352, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2574, 94, 94);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(94, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(94, hypergeometricDistribution0.getSampleSize());
      assertEquals(2574, hypergeometricDistribution0.getPopulationSize());
      assertEquals(3.432789432789433, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(901);
      assertEquals(0.0, double0, 0.01);
      assertEquals(94, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(94, hypergeometricDistribution0.getSampleSize());
      assertEquals(2574, hypergeometricDistribution0.getPopulationSize());
      assertEquals(3.432789432789433, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2574, 94, 94);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(94, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3.432789432789433, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(94, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2574, hypergeometricDistribution0.getPopulationSize());
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability((-1));
      assertEquals(1.0, double0, 0.01);
      assertEquals(94, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3.432789432789433, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(94, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2574, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2987, 1271, 1071);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(455.72179444258455, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1271, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1071, hypergeometricDistribution0.getSampleSize());
      assertEquals(2987, hypergeometricDistribution0.getPopulationSize());
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(373);
      assertEquals(0.9999999999458301, double0, 0.01);
      assertEquals(455.72179444258455, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1271, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1071, hypergeometricDistribution0.getSampleSize());
      assertEquals(2987, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2574, 94, 94);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(2574, hypergeometricDistribution0.getPopulationSize());
      assertEquals(3.432789432789433, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(94, hypergeometricDistribution0.getSampleSize());
      assertEquals(94, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.probability(2574);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2574, hypergeometricDistribution0.getPopulationSize());
      assertEquals(3.432789432789433, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(94, hypergeometricDistribution0.getSampleSize());
      assertEquals(94, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2937, 0, 0);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2937, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      
      double double0 = hypergeometricDistribution0.probability((-1));
      assertEquals(0.0, double0, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2937, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2987, 1271, 1071);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2987, hypergeometricDistribution0.getPopulationSize());
      assertEquals(455.72179444258455, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1071, hypergeometricDistribution0.getSampleSize());
      assertEquals(1271, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(2987);
      assertEquals(1.0, double0, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2987, hypergeometricDistribution0.getPopulationSize());
      assertEquals(455.72179444258455, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1071, hypergeometricDistribution0.getSampleSize());
      assertEquals(1271, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(352, 352, 352);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(352, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(352, hypergeometricDistribution0.getSampleSize());
      assertEquals(352.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(352, hypergeometricDistribution0.getPopulationSize());
      
      double double0 = hypergeometricDistribution0.cumulativeProbability((-481));
      assertEquals(0.0, double0, 0.01);
      assertEquals(352, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(352, hypergeometricDistribution0.getSampleSize());
      assertEquals(352.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(352, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(782, 549, 2054);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (2,054) must be less than or equal to population size (782)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      assertNotNull(mersenneTwister0);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 1, 338, 2787);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (338) must be less than or equal to population size (1)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 1, 1, (-751));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-751)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(2574, (-276), 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-276)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int[] intArray0 = new int[2];
      Well512a well512a0 = new Well512a(intArray0);
      assertNotNull(well512a0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 0, 2, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(352, 352, 352);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(352.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(352, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(352, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(352, hypergeometricDistribution0.getSampleSize());
      
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      assertEquals(352.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(352, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(352, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(352, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2574, 94, 94);
      // Undeclared exception!
      hypergeometricDistribution0.sample(1280);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3905, 1106, 1497);
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(959);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3905, 1106, 1497);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(0, int0);
      assertEquals(423.9902688860435, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3905, 1106, 1497);
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(423.9902688860435, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1106, int0);
  }
}
