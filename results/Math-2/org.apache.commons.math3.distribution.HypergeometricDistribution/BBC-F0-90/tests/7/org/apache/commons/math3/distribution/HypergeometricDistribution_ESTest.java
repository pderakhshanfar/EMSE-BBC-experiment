/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 14:47:44 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(5032, 743, 1);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(0.1476550079491256, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(5032, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(743, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(1);
      assertEquals(0.14765500794912556, double0, 0.01);
      assertEquals(0.1476550079491256, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(5032, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(743, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(316, 316, 316);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(316, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(316.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(316, hypergeometricDistribution0.getPopulationSize());
      assertEquals(316, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(316);
      assertEquals(1.0, double0, 0.01);
      assertEquals(316, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(316.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(316, hypergeometricDistribution0.getPopulationSize());
      assertEquals(316, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      assertNotNull(well512a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 1247, 1247, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1247, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1247, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(0);
      assertEquals(1.0, double0, 0.01);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1247, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1247, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(0, 1234, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(5032, 743, 1);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(5032, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.1476550079491256, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(743, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      
      double double0 = hypergeometricDistribution0.probability(1);
      assertEquals(0.14765500794912556, double0, 0.01);
      assertEquals(5032, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.1476550079491256, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(743, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1543, 0, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1543, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(0, int0);
      assertEquals(1543, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(5032, 743, 1);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(5032, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.1476550079491256, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(743, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(1, int0);
      assertEquals(5032, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.1476550079491256, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(743, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(5032, 743, 12);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(743, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(5032, hypergeometricDistribution0.getPopulationSize());
      assertEquals(12, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1.7718600953895072, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(0, int0);
      assertEquals(743, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(5032, hypergeometricDistribution0.getPopulationSize());
      assertEquals(12, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1.7718600953895072, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(0L);
      assertNotNull(mersenneTwister0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 6, 2, 6);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(6, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(6, hypergeometricDistribution0.getSampleSize());
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(2, int0);
      assertEquals(6, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(6, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      assertNotNull(well512a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 1247, 1247, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1247, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1247, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(0, int0);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1247, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1247, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(316, 316, 316);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(316, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(316, hypergeometricDistribution0.getSampleSize());
      assertEquals(316.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(316, hypergeometricDistribution0.getPopulationSize());
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      assertEquals(316, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(316, hypergeometricDistribution0.getSampleSize());
      assertEquals(316.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(316, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(5032, 743, 1);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(0.1476550079491256, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(743, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(5032, hypergeometricDistribution0.getPopulationSize());
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.12585300657666926, double0, 0.01);
      assertEquals(0.1476550079491256, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(743, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(5032, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      assertNotNull(well512a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 1247, 1247, 0);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1247, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1247, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(0.0, double0, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1247, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1247, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(5032, 743, 1);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(5032, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(743, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.1476550079491256, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(0.1476550079491256, double0, 0.01);
      assertEquals(5032, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(743, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.1476550079491256, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1543, 0, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1543, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(0, int0);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1543, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(316, 316, 316);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(316, hypergeometricDistribution0.getSampleSize());
      assertEquals(316.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(316, hypergeometricDistribution0.getPopulationSize());
      assertEquals(316, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      assertEquals(316, hypergeometricDistribution0.getSampleSize());
      assertEquals(316.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(316, hypergeometricDistribution0.getPopulationSize());
      assertEquals(316, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(5032, 743, 1);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(743, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.1476550079491256, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(5032, hypergeometricDistribution0.getPopulationSize());
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.12585300657666926, double0, 0.01);
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(743, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.1476550079491256, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(5032, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1543, 0, 0);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1543, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double0 = hypergeometricDistribution0.probability(0);
      assertEquals(Double.NaN, double0, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1543, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(5032, 743, 12);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(5032, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(12, hypergeometricDistribution0.getSampleSize());
      assertEquals(743, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.7718600953895072, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(5032, int0);
      assertEquals(5032, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(12, hypergeometricDistribution0.getSampleSize());
      assertEquals(743, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.7718600953895072, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(5032, 743, 12);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(5032, hypergeometricDistribution0.getPopulationSize());
      assertEquals(12, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(743, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.7718600953895072, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(743, int0);
      assertEquals(5032, hypergeometricDistribution0.getPopulationSize());
      assertEquals(12, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(743, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.7718600953895072, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(5032, 743, 12);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(5032, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.7718600953895072, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(12, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(743, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(12, int0);
      assertEquals(5032, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.7718600953895072, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(12, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(743, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(5032, 743, 12);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(12, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(743, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.7718600953895072, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(5032, hypergeometricDistribution0.getPopulationSize());
      
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(3, int0);
      assertEquals(12, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(743, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.7718600953895072, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(5032, hypergeometricDistribution0.getPopulationSize());
      
      int int1 = hypergeometricDistribution0.inverseCumulativeProbability(0.03580562078629552);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(12, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(743, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.7718600953895072, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(5032, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(5032, 743, 1);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(743, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.1476550079491256, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(5032, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(4);
      assertEquals(0.0, double0, 0.01);
      assertEquals(743, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.1476550079491256, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(5032, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1543, 0, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1543, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability((-1));
      assertEquals(1.0, double0, 0.01);
      assertEquals(1543, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(5032, 743, 12);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(1);
      assertEquals(0.8533113374686161, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(5032, 743, 1);
      double double0 = hypergeometricDistribution0.probability(1271);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.1476550079491256, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 1247, 1247, 0);
      double double0 = hypergeometricDistribution0.probability((-439));
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1247, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1247, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(5032, 743, 1);
      double double0 = hypergeometricDistribution0.cumulativeProbability(2883);
      assertEquals(1.0, double0, 0.01);
      assertEquals(0.1476550079491256, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(5032, 743, 1);
      double double0 = hypergeometricDistribution0.cumulativeProbability((-1955));
      assertEquals(0.1476550079491256, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int[] intArray0 = new int[3];
      Well44497b well44497b0 = new Well44497b(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 479, 0, 2881);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (2,881) must be less than or equal to population size (479)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(2480, 4944, 2156);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (4,944) must be less than or equal to population size (2,480)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int[] intArray0 = new int[7];
      Well1024a well1024a0 = new Well1024a(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 199, 0, (-3451));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-3,451)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(2430, (-739), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-739)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a((int[]) null);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, (-835), (-3705), (byte) (-74));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-835)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(5032, 743, 1);
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertEquals(0.1476550079491256, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3189, 937, 1817);
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(713);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(8388607, 8388607, 8388607);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals((-2.0000001192093038), double0, 0.01);
  }
}
