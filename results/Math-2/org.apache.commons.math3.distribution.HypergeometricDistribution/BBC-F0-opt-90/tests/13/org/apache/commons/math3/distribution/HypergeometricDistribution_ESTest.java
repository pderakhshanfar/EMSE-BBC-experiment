/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 06:39:10 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom((-1866L));
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 2, 2, 2);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(2);
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1, 2, 833);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (2) must be less than or equal to population size (1)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[9];
      Well19937a well19937a0 = new Well19937a(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, (-3534), 1039, 2568);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-3,534)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 2031, 2031, 0);
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(2031, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, int0);
      assertEquals(2031, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2, 2, 2);
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 2031, 2031, 0);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(2031, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, int0);
      assertEquals(2031, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom((-1866L));
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 2, 2, 2);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 2031, 2031, 0);
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(2031, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2031, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Well512a well512a0 = new Well512a(1029);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 1029, 1029, 0);
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(1029, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1029, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Well512a well512a0 = new Well512a(0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 600, 0, 0);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(0.0, double0, 0.01);
      assertEquals(600, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(987, 259, 259);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(67.9645390070922, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 2031, 2031, 0);
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(2031, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2031, int0);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 2031, 2031, 0);
      double double0 = hypergeometricDistribution0.cumulativeProbability(2031);
      assertEquals(2031, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.0, double0, 0.01);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2031, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom((-1866L));
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 2, 2, 2);
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(987, 259, 259);
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(37.012725513968356, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(635);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 1405, 702, 138);
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(78, int0);
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(78);
      assertEquals(0.956698286019121, double0, 0.01);
      assertEquals(68.9508896797153, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(987, 235, 235);
      double double0 = hypergeometricDistribution0.probability(63);
      assertEquals(0.032170336139661804, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(941, 941, 941);
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(941.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(941, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2031, 0, 0);
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(2031, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(987, 259, 259);
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(67.9645390070922, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(259, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(987, 235, 235);
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(63, int0);
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(32.513235179129126, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(987, 259, 259);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(1037);
      assertEquals(0.0, double0, 0.01);
      assertEquals(67.9645390070922, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(941, 941, 941);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(2);
      assertEquals(941.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(987, 259, 259);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(259);
      assertEquals(6.68425579386029E-246, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2031, 0, 0);
      double double0 = hypergeometricDistribution0.probability(1587);
      assertEquals(2031, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(358L);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 692, 13, 0);
      double double0 = hypergeometricDistribution0.probability((-379));
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(692, hypergeometricDistribution0.getPopulationSize());
      assertEquals(13, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a((long) 0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 4508, 2309, 4508);
      double double0 = hypergeometricDistribution0.cumulativeProbability((-1417));
      assertEquals(2309.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(935, 2, 3951);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (3,951) must be less than or equal to population size (935)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int[] intArray0 = new int[6];
      Well19937a well19937a0 = new Well19937a(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 2, 1121, 1121);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (1,121) must be less than or equal to population size (2)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(2, 0, (-2570));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-2,570)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int[] intArray0 = new int[7];
      Well1024a well1024a0 = new Well1024a(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 1442, (-1877), 82);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-1,877)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(0, 0, 580);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2031, 0, 0);
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertEquals(2031, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(987, 259, 259);
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.upperCumulativeProbability(76);
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability(76);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2013265989, 2013265989, 2013265989);
      double double0 = hypergeometricDistribution0.cumulativeProbability(2013265989, 2013265989);
      assertEquals(0.0, double0, 0.01);
      assertEquals((-0.6666642790040199), hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2013265989, 2013265989, 2013265989);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals((-0.6666642790040199), double0, 0.01);
  }
}
