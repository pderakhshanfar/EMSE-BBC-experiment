/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 16:15:00 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomAdaptor;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937c;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1776, 1776, 1776);
      hypergeometricDistribution0.getSupportLowerBound();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1776, 1776, 1776);
      hypergeometricDistribution0.upperCumulativeProbability(1180);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int[] intArray0 = new int[7];
      Well1024a well1024a0 = new Well1024a(intArray0);
      RandomAdaptor randomAdaptor0 = new RandomAdaptor(well1024a0);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(randomAdaptor0, 4273, (-615), (-2411));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-615)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 0, (-1), 1022);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2, 2, 0);
      hypergeometricDistribution0.getSupportUpperBound();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 1180, 884, 959);
      hypergeometricDistribution0.getSupportUpperBound();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2, 2, 0);
      hypergeometricDistribution0.getSupportLowerBound();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 1180, 884, 959);
      hypergeometricDistribution0.getSampleSize();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(49, 2, 2);
      hypergeometricDistribution0.getNumericalVariance();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2, 2, 0);
      hypergeometricDistribution0.getNumericalMean();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1776, 1776, 1776);
      hypergeometricDistribution0.getNumericalMean();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(0L);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 2, 0, 2);
      hypergeometricDistribution0.getNumberOfSuccesses();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1776, 1776, 1776);
      hypergeometricDistribution0.cumulativeProbability(0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2, 2, 0);
      hypergeometricDistribution0.cumulativeProbability(0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2, 2, 0);
      hypergeometricDistribution0.calculateNumericalVariance();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 1180, 884, 959);
      hypergeometricDistribution0.calculateNumericalVariance();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2269, 1734, 1734);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(1336);
      assertEquals(0.11429015059591367, double0, 0.01);
      
      double double1 = hypergeometricDistribution0.upperCumulativeProbability(1336);
      assertEquals(0.11429015059591367, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3469, 1349, 1349);
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(960);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(282, 988, 988);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (988) must be less than or equal to population size (282)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 2409, 1, 786);
      double double0 = hypergeometricDistribution0.probability(0);
      assertEquals(0.6737235367372352, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2, 2, 0);
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2, 2, 0);
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(2, int0);
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2, 2, 0);
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2, 2, 0);
      hypergeometricDistribution0.getNumericalVariance();
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2269, 1734, 1734);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(2269);
      assertEquals(1325.145879241957, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2, 2, 0);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2, 2, 0);
      double double0 = hypergeometricDistribution0.probability(1);
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1776, 1776, 1776);
      double double0 = hypergeometricDistribution0.probability(928);
      assertEquals(1776.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2, 2, 0);
      double double0 = hypergeometricDistribution0.cumulativeProbability((-3101), 2);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.0, double0, 0.01);
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(1130);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 1062, 549, 3595);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (3,595) must be less than or equal to population size (1,062)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 237, 4756, 237);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (4,756) must be less than or equal to population size (237)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 2513, 2513, (-31));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-31)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(735, (-1494), (-1494));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-1,494)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((-5897), 822, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-5,897)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2, 2, 0);
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2269, 1738, 1738);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(1738);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1331.2666372851477, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }
}
