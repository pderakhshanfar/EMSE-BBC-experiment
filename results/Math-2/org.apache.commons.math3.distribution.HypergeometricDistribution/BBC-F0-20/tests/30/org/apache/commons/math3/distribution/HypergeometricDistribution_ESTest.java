/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 16:39:48 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(51605477, 51605477, 793);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.solveInverseCumulativeProbability(0.0, 1061, 793);
      System.setCurrentTimeMillis(793);
      Random.setNextRandom(1415);
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.upperCumulativeProbability(14);
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getNumericalMean();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4406, 1275, 1275);
      hypergeometricDistribution0.cumulativeProbability(4406);
      hypergeometricDistribution0.upperCumulativeProbability(583);
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(360);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4406, 1275, 1275);
      int int0 = 583;
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability(303);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3279, 161, 2132);
      hypergeometricDistribution0.reseedRandomGenerator(161);
      hypergeometricDistribution0.upperCumulativeProbability(161);
      well1024a0.setSeed((-2563));
      hypergeometricDistribution0.probability((-1));
      hypergeometricDistribution0.cumulativeProbability(53);
      hypergeometricDistribution0.upperCumulativeProbability(53);
      hypergeometricDistribution0.isSupportConnected();
      HypergeometricDistribution hypergeometricDistribution1 = null;
      try {
        hypergeometricDistribution1 = new HypergeometricDistribution(well1024a0, 87, 2132, 53);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (2,132) must be less than or equal to population size (87)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3279, 161, 2132);
      hypergeometricDistribution0.reseedRandomGenerator(161);
      hypergeometricDistribution0.upperCumulativeProbability(161);
      hypergeometricDistribution0.probability((-1));
      hypergeometricDistribution0.cumulativeProbability(53);
      HypergeometricDistribution hypergeometricDistribution1 = null;
      try {
        hypergeometricDistribution1 = new HypergeometricDistribution(well1024a0, 87, 2132, 53);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (2,132) must be less than or equal to population size (87)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(524, 524, 524);
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.sample(524);
      hypergeometricDistribution0.probability(621);
      hypergeometricDistribution0.probability(621);
      hypergeometricDistribution0.upperCumulativeProbability(2084);
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(2468, 621, 524);
      hypergeometricDistribution1.cumulativeProbability((-2595));
      hypergeometricDistribution0.getSampleSize();
      System.setCurrentTimeMillis(524);
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution1.calculateNumericalVariance();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      int int0 = 161;
      int int1 = 3279;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3279, 161, 2132);
      hypergeometricDistribution0.reseedRandomGenerator(3279);
      // Undeclared exception!
      hypergeometricDistribution0.sample(566);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1019, 1019, 1019);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.getNumericalVariance();
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(1019, 0, 532);
      hypergeometricDistribution1.getSupportUpperBound();
      HypergeometricDistribution hypergeometricDistribution2 = null;
      try {
        hypergeometricDistribution2 = new HypergeometricDistribution(532, 532, 1861);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (1,861) must be less than or equal to population size (532)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(0L);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 1870, 1, 1652);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.probability(0);
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.getSampleSize();
      HypergeometricDistribution hypergeometricDistribution1 = null;
      try {
        hypergeometricDistribution1 = new HypergeometricDistribution(0, 1652, 1652);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(0L);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 2657, 1870, 145);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.probability(145);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      int int0 = 0;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 2084, 0, 0);
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.reseedRandomGenerator((-2001L));
      hypergeometricDistribution0.cumulativeProbability((-980), 0);
      hypergeometricDistribution0.probability(1375);
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.getSampleSize();
      try { 
        hypergeometricDistribution0.inverseCumulativeProbability((-502.9174385032861));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -502.917 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(0L);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 1870, 1, 1652);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.probability((-1022));
      hypergeometricDistribution0.probability((-748));
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.getPopulationSize();
      HypergeometricDistribution hypergeometricDistribution1 = null;
      try {
        hypergeometricDistribution1 = new HypergeometricDistribution(1870, 2423, 957);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (2,423) must be less than or equal to population size (1,870)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(0L);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 1870, 1870, 26);
      hypergeometricDistribution0.solveInverseCumulativeProbability(0.0, 1870, 26);
      hypergeometricDistribution0.probability(26);
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.getNumericalVariance();
      HypergeometricDistribution hypergeometricDistribution1 = null;
      try {
        hypergeometricDistribution1 = new HypergeometricDistribution(well1024a0, 26, (-980), 1870);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-980)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(0L);
      int int0 = 1870;
      int int1 = 1;
      int int2 = 1652;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 1870, 1, 1652);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.upperCumulativeProbability(1652);
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.sample(641);
      int int3 = 621;
      HypergeometricDistribution hypergeometricDistribution1 = null;
      try {
        hypergeometricDistribution1 = new HypergeometricDistribution(well1024a0, 2355, (-1521), 1870);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-1,521)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1019, 1019, 1019);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.probability((-434));
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.sample(1019);
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.cumulativeProbability((-114), 1019);
      hypergeometricDistribution0.probability((-114));
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.inverseCumulativeProbability(0.0);
      hypergeometricDistribution0.upperCumulativeProbability(369);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(0L);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 1870, 1870, 26);
      hypergeometricDistribution0.solveInverseCumulativeProbability(0.0, 1870, 26);
      hypergeometricDistribution0.upperCumulativeProbability(1870);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.probability(1870);
      hypergeometricDistribution0.cumulativeProbability(971);
      hypergeometricDistribution0.cumulativeProbability(1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1019, 1019, 1019);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.probability((-434));
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.sample(1019);
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.cumulativeProbability((-434), 1019);
      hypergeometricDistribution0.probability(1019);
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.inverseCumulativeProbability(0.0);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.upperCumulativeProbability(1019);
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.sample(1019);
      hypergeometricDistribution0.probability(1019);
      hypergeometricDistribution0.probability(1019);
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.getPopulationSize();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(0L);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 1870, 1870, 26);
      hypergeometricDistribution0.solveInverseCumulativeProbability(1870, 26, 1870);
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.cumulativeProbability(1870);
      hypergeometricDistribution0.getPopulationSize();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(524, 524, 524);
      hypergeometricDistribution0.solveInverseCumulativeProbability(1245.90613212171, 1840, 3074);
      hypergeometricDistribution0.getSupportLowerBound();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2063, 2063, 994);
      hypergeometricDistribution0.solveInverseCumulativeProbability(2063, 2083, 2083);
      hypergeometricDistribution0.cumulativeProbability(30);
      hypergeometricDistribution0.reseedRandomGenerator(994);
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getNumericalMean();
      try { 
        hypergeometricDistribution0.inverseCumulativeProbability((-502.3));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -502.3 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 2;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 2, 2, 4917);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (4,917) must be less than or equal to population size (2)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 1;
      int int1 = 3044;
      int int2 = 3412;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1, 3044, 3412);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (3,044) must be less than or equal to population size (1)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1352, 1352, 994);
      hypergeometricDistribution0.solveInverseCumulativeProbability(1352, 2083, 2083);
      hypergeometricDistribution0.cumulativeProbability(30);
      hypergeometricDistribution0.reseedRandomGenerator(994);
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getNumericalMean();
      try { 
        hypergeometricDistribution0.inverseCumulativeProbability((-502.3));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -502.3 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1019, 1019, 1019);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.probability((-434));
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.sample(1019);
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.cumulativeProbability((-114), 1019);
      hypergeometricDistribution0.probability((-114));
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.inverseCumulativeProbability(0.0);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.upperCumulativeProbability(1019);
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.sample(1019);
      hypergeometricDistribution0.probability(621);
      hypergeometricDistribution0.probability((-114));
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getNumericalMean();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1262, 149, 149);
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.probability((-2341));
      hypergeometricDistribution0.getSupportLowerBound();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(934, 934, (-1863));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1,863)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(524, 1891, 524);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (1,891) must be less than or equal to population size (524)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3074, 3074, 3074);
      hypergeometricDistribution0.sample(3074);
      hypergeometricDistribution0.probability(113);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.solveInverseCumulativeProbability(1559, (-484), 778);
      hypergeometricDistribution0.solveInverseCumulativeProbability(395.000531, 3074, 1559);
      try { 
        hypergeometricDistribution0.inverseCumulativeProbability((-473.9650797));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -473.965 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 2084, 2084, 2084);
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      assertEquals(2084.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = 348;
      intArray0[1] = 4003;
      Well44497b well44497b0 = new Well44497b(intArray0);
      well44497b0.nextLong((long) 1694);
      well44497b0.nextFloat();
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 1694, (-1294), 1694);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-1,294)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(0L);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 1870, 1870, 26);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(1870);
      assertEquals(26.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = (-1259);
      intArray0[1] = 166;
      intArray0[2] = 0;
      intArray0[3] = 1001;
      intArray0[4] = 3807;
      intArray0[5] = 0;
      intArray0[6] = (-1562);
      intArray0[7] = (-2318);
      intArray0[8] = 0;
      Well1024a well1024a0 = new Well1024a(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 3671, 1001, 2216);
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(604.2538817760828, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1001, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3142, 0, 0);
      hypergeometricDistribution0.solveInverseCumulativeProbability(3142, (-339), 0);
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(0, int0);
      assertEquals(3142, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 756;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(756, 0, 3000);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (3,000) must be less than or equal to population size (756)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(223, 52, 0);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(0.0, double0, 0.01);
      assertEquals(223, hypergeometricDistribution0.getPopulationSize());
      assertEquals(52, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      long long0 = (-1031L);
      Well44497a well44497a0 = new Well44497a((-1031L));
      int int0 = 578;
      well44497a0.nextBoolean();
      well44497a0.nextInt(1363);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 0, 578, 578);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister((-1578L));
      int int0 = 1017;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, (-3880), 1017, 1017);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-3,880)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = (-1);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((-1), (-1764), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-1)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }
}
