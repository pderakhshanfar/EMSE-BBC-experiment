/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 16:36:35 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomAdaptor;
import org.apache.commons.math3.random.SynchronizedRandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(19650208, 19650208, 2148);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(19650208, hypergeometricDistribution0.getPopulationSize());
      assertEquals((-37.710856597548485), hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2148, hypergeometricDistribution0.getSampleSize());
      assertEquals(19650208, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(2148, int0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(19650208, hypergeometricDistribution0.getPopulationSize());
      assertEquals((-37.710856597548485), hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2148, hypergeometricDistribution0.getSampleSize());
      assertEquals(19650208, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals((-37.710856597548485), double0, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(19650208, hypergeometricDistribution0.getPopulationSize());
      assertEquals((-37.710856597548485), hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2148, hypergeometricDistribution0.getSampleSize());
      assertEquals(19650208, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double1 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.0, double1, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(19650208, hypergeometricDistribution0.getPopulationSize());
      assertEquals((-37.710856597548485), hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2148, hypergeometricDistribution0.getSampleSize());
      assertEquals(19650208, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2770, 817, 817);
      assertEquals(240.9707581227437, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(817, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2770, hypergeometricDistribution0.getPopulationSize());
      assertEquals(817, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(472);
      assertEquals(1.0000000000000002, double0, 0.01);
      assertEquals(240.9707581227437, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(817, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2770, hypergeometricDistribution0.getPopulationSize());
      assertEquals(817, hypergeometricDistribution0.getSampleSize());
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(817, int0);
      assertEquals(240.9707581227437, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(817, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2770, hypergeometricDistribution0.getPopulationSize());
      assertEquals(817, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      assertNotNull(mersenneTwister0);
      
      byte[] byteArray0 = new byte[0];
      mersenneTwister0.nextBytes(byteArray0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 2516, 2162, 2162);
      assertEquals(2516, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1857.8076311605723, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2162, hypergeometricDistribution0.getSampleSize());
      assertEquals(2162, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.probability(1);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2516, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1857.8076311605723, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2162, hypergeometricDistribution0.getSampleSize());
      assertEquals(2162, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(1869, int0);
      assertEquals(2516, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1857.8076311605723, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2162, hypergeometricDistribution0.getSampleSize());
      assertEquals(2162, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability(1904);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 850;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1534, 850, 850);
      assertEquals(850, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1534, hypergeometricDistribution0.getPopulationSize());
      assertEquals(850, hypergeometricDistribution0.getSampleSize());
      assertEquals(470.99087353324643, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      int int1 = 256;
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(256);
      assertEquals(1.0, double0, 0.01);
      assertEquals(850, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1534, hypergeometricDistribution0.getPopulationSize());
      assertEquals(850, hypergeometricDistribution0.getSampleSize());
      assertEquals(470.99087353324643, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      // Undeclared exception!
      hypergeometricDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      assertNotNull(mersenneTwister0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 2516, 2162, 2162);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1857.8076311605723, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2516, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2162, hypergeometricDistribution0.getSampleSize());
      assertEquals(2162, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(256);
      assertEquals(1.0, double0, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1857.8076311605723, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2516, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2162, hypergeometricDistribution0.getSampleSize());
      assertEquals(2162, hypergeometricDistribution0.getNumberOfSuccesses());
      
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1857.8076311605723, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2516, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2162, hypergeometricDistribution0.getSampleSize());
      assertEquals(2162, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double1 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(36.79244423862521, double1, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1857.8076311605723, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2516, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2162, hypergeometricDistribution0.getSampleSize());
      assertEquals(2162, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotEquals(double1, double0, 0.01);
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(2162, int0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1857.8076311605723, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2516, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2162, hypergeometricDistribution0.getSampleSize());
      assertEquals(2162, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int1 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(2162, int1);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1857.8076311605723, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2516, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2162, hypergeometricDistribution0.getSampleSize());
      assertEquals(2162, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(int1 == int0);
      
      double double2 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(36.79244423862521, double2, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1857.8076311605723, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2516, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2162, hypergeometricDistribution0.getSampleSize());
      assertEquals(2162, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      
      int int2 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(1808, int2);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1857.8076311605723, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2516, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2162, hypergeometricDistribution0.getSampleSize());
      assertEquals(2162, hypergeometricDistribution0.getNumberOfSuccesses());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      assertNotNull(mersenneTwister0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 2516, 2162, 2162);
      assertEquals(1857.8076311605723, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2162, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2162, hypergeometricDistribution0.getSampleSize());
      assertEquals(2516, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(256);
      assertEquals(1.0, double0, 0.01);
      assertEquals(1857.8076311605723, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2162, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2162, hypergeometricDistribution0.getSampleSize());
      assertEquals(2516, hypergeometricDistribution0.getPopulationSize());
      
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(1854, int0);
      assertEquals(1857.8076311605723, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2162, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2162, hypergeometricDistribution0.getSampleSize());
      assertEquals(2516, hypergeometricDistribution0.getPopulationSize());
      
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      assertEquals(1857.8076311605723, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2162, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2162, hypergeometricDistribution0.getSampleSize());
      assertEquals(2516, hypergeometricDistribution0.getPopulationSize());
      
      int int1 = hypergeometricDistribution0.getSampleSize();
      assertEquals(2162, int1);
      assertEquals(1857.8076311605723, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2162, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2162, hypergeometricDistribution0.getSampleSize());
      assertEquals(2516, hypergeometricDistribution0.getPopulationSize());
      assertFalse(int1 == int0);
      
      double double1 = hypergeometricDistribution0.upperCumulativeProbability(2162);
      assertEquals(0.0, double1, 0.01);
      assertEquals(1857.8076311605723, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2162, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2162, hypergeometricDistribution0.getSampleSize());
      assertEquals(2516, hypergeometricDistribution0.getPopulationSize());
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4562, 565, 4562);
      assertEquals(4562, hypergeometricDistribution0.getPopulationSize());
      assertEquals(4562, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(565, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(565.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      int[] intArray0 = hypergeometricDistribution0.sample(1967);
      assertEquals(4562, hypergeometricDistribution0.getPopulationSize());
      assertEquals(4562, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(565, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(565.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(intArray0);
      assertEquals(1967, intArray0.length);
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(565, int0);
      assertEquals(4562, hypergeometricDistribution0.getPopulationSize());
      assertEquals(4562, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(565, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(565.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      assertEquals(4562, hypergeometricDistribution0.getPopulationSize());
      assertEquals(4562, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(565, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(565.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double1 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(565.0, double1, 0.01);
      assertEquals(4562, hypergeometricDistribution0.getPopulationSize());
      assertEquals(4562, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(565, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(565.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      int[] intArray1 = hypergeometricDistribution0.sample(565);
      assertEquals(4562, hypergeometricDistribution0.getPopulationSize());
      assertEquals(4562, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(565, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(565.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(565, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int int1 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(565, int1);
      assertEquals(4562, hypergeometricDistribution0.getPopulationSize());
      assertEquals(4562, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(565, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(565.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(int1 == int0);
      
      int int2 = hypergeometricDistribution0.inverseCumulativeProbability(0.0);
      assertEquals(565, int2);
      assertEquals(4562, hypergeometricDistribution0.getPopulationSize());
      assertEquals(4562, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(565, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(565.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      double double2 = hypergeometricDistribution0.upperCumulativeProbability(1122);
      assertEquals(0.0, double2, 0.01);
      assertEquals(4562, hypergeometricDistribution0.getPopulationSize());
      assertEquals(4562, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(565, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(565.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      double double3 = hypergeometricDistribution0.probability(0);
      assertEquals(0.0, double3, 0.01);
      assertEquals(4562, hypergeometricDistribution0.getPopulationSize());
      assertEquals(4562, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(565, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(565.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      
      int int3 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(565, int3);
      assertEquals(4562, hypergeometricDistribution0.getPopulationSize());
      assertEquals(4562, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(565, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(565.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      
      int int4 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(4562, int4);
      assertEquals(4562, hypergeometricDistribution0.getPopulationSize());
      assertEquals(4562, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(565, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(565.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      assertEquals(4562, hypergeometricDistribution0.getPopulationSize());
      assertEquals(4562, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(565, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(565.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int5 = hypergeometricDistribution0.getSampleSize();
      assertEquals(4562, int5);
      assertEquals(4562, hypergeometricDistribution0.getPopulationSize());
      assertEquals(4562, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(565, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(565.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(int5 == int4);
      assertFalse(int5 == int3);
      assertFalse(int5 == int0);
      assertFalse(int5 == int1);
      assertFalse(int5 == int2);
      
      int int6 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(565, int6);
      assertEquals(4562, hypergeometricDistribution0.getPopulationSize());
      assertEquals(4562, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(565, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(565.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertFalse(int6 == int5);
      assertTrue(int6 == int2);
      assertTrue(int6 == int0);
      assertFalse(int6 == int4);
      assertTrue(int6 == int1);
      assertTrue(int6 == int3);
      
      double double4 = hypergeometricDistribution0.upperCumulativeProbability(386);
      assertEquals(1.0, double4, 0.01);
      assertEquals(4562, hypergeometricDistribution0.getPopulationSize());
      assertEquals(4562, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(565, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(565.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      
      int int7 = hypergeometricDistribution0.getSampleSize();
      assertEquals(4562, int7);
      assertEquals(4562, hypergeometricDistribution0.getPopulationSize());
      assertEquals(4562, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(565, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(565.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertFalse(int7 == int6);
      assertTrue(int7 == int4);
      assertFalse(int7 == int2);
      assertFalse(int7 == int0);
      assertTrue(int7 == int5);
      assertFalse(int7 == int3);
      assertFalse(int7 == int1);
      
      double double5 = hypergeometricDistribution0.probability(565);
      assertEquals(1.0, double5, 0.01);
      assertEquals(4562, hypergeometricDistribution0.getPopulationSize());
      assertEquals(4562, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(565, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(565.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertEquals(double5, double4, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(392, 357, 188);
      assertEquals(188, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(357, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(171.21428571428572, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(392, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(1381);
      assertEquals(0.0, double0, 0.01);
      assertEquals(188, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(357, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(171.21428571428572, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(392, hypergeometricDistribution0.getPopulationSize());
      
      double double1 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(7.975820763087844, double1, 0.01);
      assertEquals(188, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(357, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(171.21428571428572, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(392, hypergeometricDistribution0.getPopulationSize());
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(832, 0, 832);
      assertEquals(832, hypergeometricDistribution0.getPopulationSize());
      assertEquals(832, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.cumulativeProbability((-706));
      assertEquals(0.0, double0, 0.01);
      assertEquals(832, hypergeometricDistribution0.getPopulationSize());
      assertEquals(832, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double1 = hypergeometricDistribution0.cumulativeProbability(832);
      assertEquals(1.0, double1, 0.01);
      assertEquals(832, hypergeometricDistribution0.getPopulationSize());
      assertEquals(832, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(0, int0);
      assertEquals(832, hypergeometricDistribution0.getPopulationSize());
      assertEquals(832, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int1 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(0, int1);
      assertEquals(832, hypergeometricDistribution0.getPopulationSize());
      assertEquals(832, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(int1 == int0);
      
      hypergeometricDistribution0.reseedRandomGenerator((-706));
      assertEquals(832, hypergeometricDistribution0.getPopulationSize());
      assertEquals(832, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double2 = hypergeometricDistribution0.probability((-2065));
      assertEquals(0.0, double2, 0.01);
      assertEquals(832, hypergeometricDistribution0.getPopulationSize());
      assertEquals(832, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      int int2 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(0, int2);
      assertEquals(832, hypergeometricDistribution0.getPopulationSize());
      assertEquals(832, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      double double3 = hypergeometricDistribution0.probability(0);
      assertEquals(Double.NaN, double3, 0.01);
      assertEquals(832, hypergeometricDistribution0.getPopulationSize());
      assertEquals(832, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      
      double double4 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(0.0, double4, 0.01);
      assertEquals(832, hypergeometricDistribution0.getPopulationSize());
      assertEquals(832, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      
      double double5 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.0, double5, 0.01);
      assertEquals(832, hypergeometricDistribution0.getPopulationSize());
      assertEquals(832, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(double5, double2, 0.01);
      assertEquals(double5, double0, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertEquals(double5, double4, 0.01);
      assertNotEquals(double5, double3, 0.01);
      
      hypergeometricDistribution0.reseedRandomGenerator((-104L));
      assertEquals(832, hypergeometricDistribution0.getPopulationSize());
      assertEquals(832, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int3 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(0, int3);
      assertEquals(832, hypergeometricDistribution0.getPopulationSize());
      assertEquals(832, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      
      int int4 = hypergeometricDistribution0.inverseCumulativeProbability(0.0);
      assertEquals(0, int4);
      assertEquals(832, hypergeometricDistribution0.getPopulationSize());
      assertEquals(832, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      
      double double6 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.0, double6, 0.01);
      assertEquals(832, hypergeometricDistribution0.getPopulationSize());
      assertEquals(832, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertEquals(double6, double4, 0.01);
      assertEquals(double6, double0, 0.01);
      assertEquals(double6, double2, 0.01);
      assertEquals(double6, double5, 0.01);
      assertNotEquals(double6, double3, 0.01);
      
      int int5 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(0, int5);
      assertEquals(832, hypergeometricDistribution0.getPopulationSize());
      assertEquals(832, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(int5 == int0);
      assertTrue(int5 == int1);
      assertTrue(int5 == int2);
      assertTrue(int5 == int3);
      assertTrue(int5 == int4);
      
      int int6 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(0, int6);
      assertEquals(832, hypergeometricDistribution0.getPopulationSize());
      assertEquals(832, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(int6 == int3);
      assertTrue(int6 == int1);
      assertTrue(int6 == int5);
      assertTrue(int6 == int2);
      assertTrue(int6 == int0);
      assertTrue(int6 == int4);
      
      int int7 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(0, int7);
      assertEquals(832, hypergeometricDistribution0.getPopulationSize());
      assertEquals(832, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(int7 == int0);
      assertTrue(int7 == int5);
      assertTrue(int7 == int6);
      assertTrue(int7 == int1);
      assertTrue(int7 == int2);
      assertTrue(int7 == int3);
      assertTrue(int7 == int4);
      
      int int8 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(0, int8);
      assertEquals(832, hypergeometricDistribution0.getPopulationSize());
      assertEquals(832, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(int8 == int1);
      assertTrue(int8 == int5);
      assertTrue(int8 == int0);
      assertTrue(int8 == int2);
      assertTrue(int8 == int6);
      assertTrue(int8 == int7);
      assertTrue(int8 == int3);
      assertTrue(int8 == int4);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 288;
      intArray0[3] = 0;
      intArray0[4] = (-4417);
      intArray0[5] = 0;
      Well44497a well44497a0 = new Well44497a(intArray0);
      assertNotNull(well44497a0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {1, 0, 288, 0, (-4417), 0}, intArray0);
      
      RandomAdaptor randomAdaptor0 = new RandomAdaptor(well44497a0);
      assertNotNull(randomAdaptor0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {1, 0, 288, 0, (-4417), 0}, intArray0);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 106, 256, 288);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (256) must be less than or equal to population size (106)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      assertNotNull(mersenneTwister0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 1256, 1256, 0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1256, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1256, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(256);
      assertEquals(0.0, double0, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1256, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1256, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(0, int0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1256, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1256, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1256, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1256, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      
      int int1 = hypergeometricDistribution0.getSampleSize();
      assertEquals(0, int1);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1256, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1256, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(int1 == int0);
      
      int int2 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(1256, int2);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1256, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1256, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      double double1 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.0, double1, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1256, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1256, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(double1, double0, 0.01);
      
      double double2 = hypergeometricDistribution0.probability(1256);
      assertEquals(0.0, double2, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1256, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1256, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      
      double double3 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.0, double3, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1256, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1256, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(629, 629, 629);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(629.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(629, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(629, hypergeometricDistribution0.getPopulationSize());
      assertEquals(629, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(629, int0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(629.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(629, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(629, hypergeometricDistribution0.getPopulationSize());
      assertEquals(629, hypergeometricDistribution0.getSampleSize());
      
      int int1 = hypergeometricDistribution0.sample();
      assertEquals(629, int1);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(629.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(629, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(629, hypergeometricDistribution0.getPopulationSize());
      assertEquals(629, hypergeometricDistribution0.getSampleSize());
      assertTrue(int1 == int0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(629);
      assertEquals(1.0, double0, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(629.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(629, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(629, hypergeometricDistribution0.getPopulationSize());
      assertEquals(629, hypergeometricDistribution0.getSampleSize());
      
      try { 
        hypergeometricDistribution0.inverseCumulativeProbability(629);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 629 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(188, 1381, 188);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (1,381) must be less than or equal to population size (188)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(1L);
      assertNotNull(well44497a0);
      
      int int0 = 4394;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1296, 1296, 4394);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (4,394) must be less than or equal to population size (1,296)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 341;
      int int1 = 1445;
      int int2 = (-1070);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(341, 1445, (-1070));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1,070)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4562, 571, 4562);
      assertEquals(4562, hypergeometricDistribution0.getPopulationSize());
      assertEquals(571, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(4562, hypergeometricDistribution0.getSampleSize());
      assertEquals(571.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      int[] intArray0 = hypergeometricDistribution0.sample(1967);
      assertEquals(4562, hypergeometricDistribution0.getPopulationSize());
      assertEquals(571, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(4562, hypergeometricDistribution0.getSampleSize());
      assertEquals(571.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(intArray0);
      assertEquals(1967, intArray0.length);
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(571, int0);
      assertEquals(4562, hypergeometricDistribution0.getPopulationSize());
      assertEquals(571, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(4562, hypergeometricDistribution0.getSampleSize());
      assertEquals(571.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(571);
      assertEquals(1.0, double0, 0.01);
      assertEquals(4562, hypergeometricDistribution0.getPopulationSize());
      assertEquals(571, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(4562, hypergeometricDistribution0.getSampleSize());
      assertEquals(571.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double1 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(571.0, double1, 0.01);
      assertEquals(4562, hypergeometricDistribution0.getPopulationSize());
      assertEquals(571, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(4562, hypergeometricDistribution0.getSampleSize());
      assertEquals(571.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotEquals(double1, double0, 0.01);
      
      int[] intArray1 = hypergeometricDistribution0.sample(571);
      assertEquals(4562, hypergeometricDistribution0.getPopulationSize());
      assertEquals(571, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(4562, hypergeometricDistribution0.getSampleSize());
      assertEquals(571.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(571, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      
      int int1 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(571, int1);
      assertEquals(4562, hypergeometricDistribution0.getPopulationSize());
      assertEquals(571, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(4562, hypergeometricDistribution0.getSampleSize());
      assertEquals(571.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertTrue(int1 == int0);
      
      int int2 = hypergeometricDistribution0.inverseCumulativeProbability(0.0);
      assertEquals(571, int2);
      assertEquals(4562, hypergeometricDistribution0.getPopulationSize());
      assertEquals(571, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(4562, hypergeometricDistribution0.getSampleSize());
      assertEquals(571.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      double double2 = hypergeometricDistribution0.upperCumulativeProbability(1122);
      assertEquals(0.0, double2, 0.01);
      assertEquals(4562, hypergeometricDistribution0.getPopulationSize());
      assertEquals(571, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(4562, hypergeometricDistribution0.getSampleSize());
      assertEquals(571.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      double double3 = hypergeometricDistribution0.probability(0);
      assertEquals(0.0, double3, 0.01);
      assertEquals(4562, hypergeometricDistribution0.getPopulationSize());
      assertEquals(571, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(4562, hypergeometricDistribution0.getSampleSize());
      assertEquals(571.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      
      int int3 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(571, int3);
      assertEquals(4562, hypergeometricDistribution0.getPopulationSize());
      assertEquals(571, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(4562, hypergeometricDistribution0.getSampleSize());
      assertEquals(571.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      
      int int4 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(4562, int4);
      assertEquals(4562, hypergeometricDistribution0.getPopulationSize());
      assertEquals(571, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(4562, hypergeometricDistribution0.getSampleSize());
      assertEquals(571.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      assertEquals(4562, hypergeometricDistribution0.getPopulationSize());
      assertEquals(571, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(4562, hypergeometricDistribution0.getSampleSize());
      assertEquals(571.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int5 = hypergeometricDistribution0.getSampleSize();
      assertEquals(4562, int5);
      assertEquals(4562, hypergeometricDistribution0.getPopulationSize());
      assertEquals(571, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(4562, hypergeometricDistribution0.getSampleSize());
      assertEquals(571.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      assertFalse(int5 == int3);
      assertTrue(int5 == int4);
      assertFalse(int5 == int1);
      
      int int6 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(571, int6);
      assertEquals(4562, hypergeometricDistribution0.getPopulationSize());
      assertEquals(571, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(4562, hypergeometricDistribution0.getSampleSize());
      assertEquals(571.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertFalse(int6 == int4);
      assertTrue(int6 == int1);
      assertFalse(int6 == int5);
      assertTrue(int6 == int3);
      assertTrue(int6 == int0);
      assertTrue(int6 == int2);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(0);
      assertNotNull(mersenneTwister0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 1423, 1423, 1423);
      assertEquals(1423, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1423, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1423.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1423, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      int[] intArray0 = hypergeometricDistribution0.sample(1423);
      assertEquals(1423, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1423, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1423.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1423, hypergeometricDistribution0.getSampleSize());
      assertNotNull(intArray0);
      assertEquals(1423, intArray0.length);
      
      double double0 = mersenneTwister0.nextDouble();
      assertEquals(0.31654112150630254, double0, 0.01);
      
      double double1 = hypergeometricDistribution0.cumulativeProbability(0);
      assertEquals(0.0, double1, 0.01);
      assertEquals(1423, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1423, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1423.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1423, hypergeometricDistribution0.getSampleSize());
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = mersenneTwister0.nextGaussian();
      assertEquals((-0.4984520970948414), double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(1423, int0);
      assertEquals(1423, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1423, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1423.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1423, hypergeometricDistribution0.getSampleSize());
      
      hypergeometricDistribution0.reseedRandomGenerator(0L);
      assertEquals(1423, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1423, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1423.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1423, hypergeometricDistribution0.getSampleSize());
      
      double double3 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.0, double3, 0.01);
      assertEquals(1423, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1423, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1423.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1423, hypergeometricDistribution0.getSampleSize());
      assertNotEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      
      float float0 = mersenneTwister0.nextFloat();
      assertEquals(0.15071714F, float0, 0.01F);
      
      mersenneTwister0.setSeed(0);
      double double4 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double4, 0.01);
      assertEquals(1423, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1423, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1423.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1423, hypergeometricDistribution0.getSampleSize());
      assertEquals(double4, double1, 0.01);
      assertEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      
      int int1 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(1423, int1);
      assertEquals(1423, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1423, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1423.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1423, hypergeometricDistribution0.getSampleSize());
      assertTrue(int1 == int0);
      
      double double5 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertEquals(1.0, double5, 0.01);
      assertEquals(1423, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1423, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1423.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1423, hypergeometricDistribution0.getSampleSize());
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double2, 0.01);
      
      double double6 = hypergeometricDistribution0.probability(1377);
      assertEquals(0.0, double6, 0.01);
      assertEquals(1423, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1423, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1423.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1423, hypergeometricDistribution0.getSampleSize());
      assertNotEquals(double6, double0, 0.01);
      assertEquals(double6, double3, 0.01);
      assertEquals(double6, double4, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertEquals(double6, double1, 0.01);
      assertNotEquals(double6, double2, 0.01);
      
      int int2 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(1423, int2);
      assertEquals(1423, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1423, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1423.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1423, hypergeometricDistribution0.getSampleSize());
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      int int3 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(1423, int3);
      assertEquals(1423, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1423, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1423.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1423, hypergeometricDistribution0.getSampleSize());
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      
      int int4 = hypergeometricDistribution0.getSampleSize();
      assertEquals(1423, int4);
      assertEquals(1423, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1423, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1423.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1423, hypergeometricDistribution0.getSampleSize());
      assertTrue(int4 == int1);
      assertTrue(int4 == int0);
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 876;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(876, 0, 0);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(876, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(876, hypergeometricDistribution0.getPopulationSize());
      
      double double1 = hypergeometricDistribution0.probability(0);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(876, hypergeometricDistribution0.getPopulationSize());
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = hypergeometricDistribution0.cumulativeProbability(876, 876);
      assertEquals(0.0, double2, 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(876, hypergeometricDistribution0.getPopulationSize());
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      double double3 = Double.NaN;
      try { 
        hypergeometricDistribution0.inverseCumulativeProbability(876);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 876 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 2651;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(2651, (-1343), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-1,343)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 554;
      int int0 = 0;
      intArray0[1] = 0;
      intArray0[2] = 860;
      Well1024a well1024a0 = new Well1024a(intArray0);
      assertNotNull(well1024a0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {554, 0, 860}, intArray0);
      
      well1024a0.setSeed(860);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {554, 0, 860}, intArray0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 860, 860, 0);
      assertEquals(860, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(860, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {554, 0, 860}, intArray0);
      
      int int1 = 902;
      try { 
        hypergeometricDistribution0.inverseCumulativeProbability(554);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 554 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 795;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(795, 0, 1269);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (1,269) must be less than or equal to population size (795)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 1459;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1459, 1459, 1459);
      assertEquals(1459, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1459.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1459, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1459, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      hypergeometricDistribution0.reseedRandomGenerator(1459);
      assertEquals(1459, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1459.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1459, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1459, hypergeometricDistribution0.getSampleSize());
      
      int int1 = hypergeometricDistribution0.sample();
      assertEquals(1459, int1);
      assertEquals(1459, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1459.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1459, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1459, hypergeometricDistribution0.getSampleSize());
      assertTrue(int1 == int0);
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(1459);
      assertEquals(1.0, double0, 0.01);
      assertEquals(1459, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1459.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1459, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1459, hypergeometricDistribution0.getSampleSize());
      
      int int2 = 1461;
      int[] intArray0 = hypergeometricDistribution0.sample(1461);
      assertEquals(1459, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1459.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1459, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1459, hypergeometricDistribution0.getSampleSize());
      assertNotNull(intArray0);
      assertEquals(1461, intArray0.length);
      
      try { 
        hypergeometricDistribution0.inverseCumulativeProbability(1461);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1,461 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(832, 0, 832);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(832, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(832, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.cumulativeProbability((-706));
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(832, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(832, hypergeometricDistribution0.getSampleSize());
      
      double double1 = hypergeometricDistribution0.cumulativeProbability(832);
      assertEquals(1.0, double1, 0.01);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(832, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(832, hypergeometricDistribution0.getSampleSize());
      assertNotEquals(double1, double0, 0.01);
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(0, int0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(832, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(832, hypergeometricDistribution0.getSampleSize());
      
      int int1 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(0, int1);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(832, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(832, hypergeometricDistribution0.getSampleSize());
      assertTrue(int1 == int0);
      
      hypergeometricDistribution0.reseedRandomGenerator(832);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(832, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(832, hypergeometricDistribution0.getSampleSize());
      
      double double2 = hypergeometricDistribution0.probability(0);
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(832, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(832, hypergeometricDistribution0.getSampleSize());
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      int int2 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(0, int2);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(832, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(832, hypergeometricDistribution0.getSampleSize());
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      double double3 = hypergeometricDistribution0.probability(0);
      assertEquals(Double.NaN, double3, 0.01);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(832, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(832, hypergeometricDistribution0.getSampleSize());
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      
      double double4 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(0.0, double4, 0.01);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(832, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(832, hypergeometricDistribution0.getSampleSize());
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      
      double double5 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.0, double5, 0.01);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(832, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(832, hypergeometricDistribution0.getSampleSize());
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertEquals(double5, double4, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertEquals(double5, double0, 0.01);
      
      hypergeometricDistribution0.reseedRandomGenerator(0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(832, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(832, hypergeometricDistribution0.getSampleSize());
      
      int int3 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(0, int3);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(832, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(832, hypergeometricDistribution0.getSampleSize());
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      
      try { 
        hypergeometricDistribution0.inverseCumulativeProbability((-1962.6602));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,962.66 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1534, 850, 850);
      int int0 = (-1423);
      hypergeometricDistribution0.probability((-994));
      // Undeclared exception!
      hypergeometricDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Well512a well512a0 = new Well512a((-1));
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(well512a0);
      synchronizedRandomGenerator0.nextBoolean();
      well512a0.nextDouble();
      well512a0.nextGaussian();
      well512a0.nextInt();
      int int0 = (-1482);
      well512a0.nextInt();
      synchronizedRandomGenerator0.nextBoolean();
      well512a0.setSeed((long) (-1));
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(synchronizedRandomGenerator0, (-1), 0, (-1482));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-1)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(0, 0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }
}
