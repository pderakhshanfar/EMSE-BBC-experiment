/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 14:24:06 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(264, 0, 0);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertEquals(264, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.0, double0, 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((-1), 0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-1)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1187, 1187, 727);
      double double0 = hypergeometricDistribution0.probability(727);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c((long) 2274);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 3115, 0, 0);
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, int0);
      assertEquals(3115, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3115, 3115, 3115);
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(3115.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3115, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3115, 3115, 3115);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(3115, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(264, 0, 0);
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(0, int0);
      assertEquals(264, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3115, 3115, 3115);
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(3115.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2213, 199, 199);
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(14.827814176270829, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2213, 0, 2213);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(2213, hypergeometricDistribution0.getSampleSize());
      assertEquals(2213, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3115, 3115, 3115);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(3115.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(264, 0, 0);
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(264, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, int0);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3115, 3115, 3115);
      double double0 = hypergeometricDistribution0.cumulativeProbability(1557);
      assertEquals(3115.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(264, 0, 0);
      double double0 = hypergeometricDistribution0.cumulativeProbability(0);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.0, double0, 0.01);
      assertEquals(264, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1187, 1187, 727);
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(727, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(264, 6, 6);
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.13073091788957672, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3435, 1409, 1360);
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability(193);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3119, 1578, 1578);
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(1083);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1340, 2178, 2178);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (2,178) must be less than or equal to population size (1,340)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3115, 3115, 3115);
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(3115.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3115, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3115, 3115, 3115);
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(3115.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3115, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3115, 3115, 3115);
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(3115.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3115, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2213, 0, 2213);
      hypergeometricDistribution0.sample();
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(2213, hypergeometricDistribution0.getSampleSize());
      assertEquals(2213, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(264, 6, 6);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(1);
      assertEquals(0.13001327313078348, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2213, 199, 199);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(2213);
      assertEquals(17.894713059195663, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(264, 6, 6);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(6);
      assertEquals(2.251945679123341E-12, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(264, 6, 6);
      double double0 = hypergeometricDistribution0.probability(291);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.13636363636363635, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2213, 199, 199);
      double double0 = hypergeometricDistribution0.probability((-744));
      assertEquals(17.894713059195663, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(264, 6, 6);
      double double0 = hypergeometricDistribution0.cumulativeProbability(0, 291);
      assertEquals(0.13001327313078348, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int[] intArray0 = new int[0];
      Well512a well512a0 = new Well512a(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 1686, 0, 1722);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (1,722) must be less than or equal to population size (1,686)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom();
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 1, 1936, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (1,936) must be less than or equal to population size (1)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(633, 170, (-771));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-771)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int[] intArray0 = new int[4];
      Well44497b well44497b0 = new Well44497b(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 1717, (-1624), 979);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-1,624)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(0);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 0, (-1487), 220);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3115, 3115, 3115);
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      assertEquals(3115.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(264, 6, 6);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability((-18));
      assertEquals(0.13636363636363635, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(264, 6, 6);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(0.13636363636363635, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, int0);
  }
}
