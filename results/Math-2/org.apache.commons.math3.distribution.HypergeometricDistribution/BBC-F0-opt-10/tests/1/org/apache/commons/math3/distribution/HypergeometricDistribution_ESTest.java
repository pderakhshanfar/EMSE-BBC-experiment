/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 19 14:23:26 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(579, 579, 579);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(2);
      assertEquals(1.0, double0, 0.01);
      assertEquals(579.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(1976);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1976, 1976, 0);
      double double0 = hypergeometricDistribution0.cumulativeProbability(0);
      assertEquals(1976, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.0, double0, 0.01);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1976, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((-713), (-5232), (-1057));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-713)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[8];
      Well19937c well19937c0 = new Well19937c(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 2466, 322, 2036);
      double double0 = hypergeometricDistribution0.probability(1);
      assertEquals(2.095469005105064E-306, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(1976);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1976, 1976, 0);
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(1976, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1976, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1277, 1277, 1277);
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(1277.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1277, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(1976);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1976, 1976, 0);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(1976, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, int0);
      assertEquals(1976, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(579, 579, 579);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(579, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(1976);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1976, 1976, 0);
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(1976, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1976, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1735, 193, 193);
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(16.96818201147812, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(1976);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1976, 1976, 0);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1976, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1976, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(579, 579, 579);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(579.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1308, 0, 0);
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(0, int0);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1308, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(1976);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1976, 1976, 0);
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(1976, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1976, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1735, 193, 193);
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(16.96818201147812, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2466, 585, 1337);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(1);
      assertEquals(2466, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.0000000000000002, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(2, 805, 805);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (805) must be less than or equal to population size (2)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(1976);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1976, 1976, 0);
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(1976, int0);
      assertEquals(1976, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(1976);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1976, 1976, 0);
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(1976, int0);
      assertEquals(1976, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(187, 0, 187);
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(187, int0);
      assertEquals(187, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(579, 579, 579);
      hypergeometricDistribution0.getNumericalVariance();
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(579.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1151, 805, 71);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(71);
      assertEquals(3.5559528203973268E-12, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1, 0, 1);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1, 0, 1);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(71);
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 12, 0, 0);
      double double0 = hypergeometricDistribution0.probability(12);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(12, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3102, 2472, 149);
      double double0 = hypergeometricDistribution0.probability((-120));
      assertEquals(118.73887814313346, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1, 0, 1);
      double double0 = hypergeometricDistribution0.cumulativeProbability(1151);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1735, 193, 193);
      double double0 = hypergeometricDistribution0.cumulativeProbability((-1488));
      assertEquals(21.469164265129685, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 2366, 1, 3228);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (3,228) must be less than or equal to population size (2,366)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int[] intArray0 = new int[8];
      Well19937c well19937c0 = new Well19937c(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 1, 353, 2466);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (353) must be less than or equal to population size (1)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(6415);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 201, 0, (-349));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-349)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(3498, (-1), 3498);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-1)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 0, (-404), (-404));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1735, 193, 193);
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      assertEquals(21.469164265129685, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3102, 2472, 149);
      hypergeometricDistribution0.sample();
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(125);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(8388548, 8388548, 8388548);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals((-120.00042915651196), double0, 0.01);
  }
}
