/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 06:47:06 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 3010, 12, 18);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(12);
      assertEquals(1.6434082527178334E-29, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(179, 179, 179);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(179);
      assertEquals(1.0, double0, 0.01);
      assertEquals(179, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(493, 0, 493);
      double double0 = hypergeometricDistribution0.cumulativeProbability(0);
      assertEquals(1.0, double0, 0.01);
      assertEquals(493, hypergeometricDistribution0.getPopulationSize());
      assertEquals(493, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((-1727), (-1727), (-1727));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-1,727)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(493, 0, 493);
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(493, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, int0);
      assertEquals(493, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(179, 179, 179);
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(179.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(179, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(493, 0, 493);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(493, hypergeometricDistribution0.getSampleSize());
      assertEquals(493, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(179, 179, 179);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(179, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1673, 252, 0);
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1673, hypergeometricDistribution0.getPopulationSize());
      assertEquals(252, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(493, 0, 493);
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(493, hypergeometricDistribution0.getSampleSize());
      assertEquals(493, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(493, 0, 493);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(493, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double0, 0.01);
      assertEquals(493, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(179, 179, 179);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(179.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(280, 0, 0);
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(280, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(351, 351, 351);
      double double0 = hypergeometricDistribution0.cumulativeProbability(257);
      assertEquals(0.0, double0, 0.01);
      assertEquals(351.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(493, 0, 493);
      double double0 = hypergeometricDistribution0.cumulativeProbability(493);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
      assertEquals(493, hypergeometricDistribution0.getSampleSize());
      assertEquals(493, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(179, 179, 179);
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(179.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(318, 252, 9);
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(1.4428858120529664, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a((-1318L));
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 3501, 2416, 2503);
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability(1421);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3104, 1203, 1137);
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(942);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(811, 811, 308);
      double double0 = hypergeometricDistribution0.probability(308);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(318, 252, 9);
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(7.132075471698113, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(318, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(318, 252, 9);
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(7.132075471698113, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(252, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(318, 252, 9);
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(7.132075471698113, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(351, 351, 351);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability((-600));
      assertEquals(351.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(318, 252, 9);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(318);
      assertEquals(0.0, double0, 0.01);
      assertEquals(7.132075471698113, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a((-1318L));
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 3501, 2416, 2503);
      double double0 = hypergeometricDistribution0.probability(2503);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1727.291630962582, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(347, 0, 1639);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (1,639) must be less than or equal to population size (347)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int[] intArray0 = new int[0];
      Well1024a well1024a0 = new Well1024a(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 765, 1285, 938);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (1,285) must be less than or equal to population size (765)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(357, 0, (-2475));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-2,475)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(4294967291L);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 1, (-21), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-21)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int[] intArray0 = new int[3];
      Well44497a well44497a0 = new Well44497a(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 0, (-2824), 138);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(318, 252, 9);
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertEquals(7.132075471698113, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(318, 252, 9);
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(1.4428858120529664, double0, 0.01);
      
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(8388607, 8388607, 867);
      double double0 = hypergeometricDistribution0.probability(708);
      assertEquals(0.0, double0, 0.01);
      assertEquals((-157.00012207032705), hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(8388607, 8388607, 867);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals((-157.00012207032705), double0, 0.01);
  }
}
