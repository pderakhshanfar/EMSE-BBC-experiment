/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 15:12:08 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(0L);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1499, 238, 238);
      hypergeometricDistribution0.upperCumulativeProbability(238);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(0L);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1499, 238, 238);
      hypergeometricDistribution0.upperCumulativeProbability((-1594));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 1798, 432, 153);
      hypergeometricDistribution0.cumulativeProbability(922);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(0L);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1499, 238, 238);
      double double0 = hypergeometricDistribution0.cumulativeProbability(0);
      assertEquals(2.409360262207034E-20, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((-328), 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-328)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(0L);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1499, 238, 238);
      double double0 = hypergeometricDistribution0.probability(2);
      assertEquals(3.651728925987254E-17, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Well512a well512a0 = new Well512a(1422);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 1422, 0, 1422);
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(1422, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, int0);
      assertEquals(1422, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1408, 1408, 1408);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(1408, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(jDKRandomGenerator0, 1408, 145, 0);
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(145, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1408, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(jDKRandomGenerator0, 1408, 145, 0);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(0.0, double0, 0.01);
      assertEquals(145, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1408, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1, 1, 1);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[6];
      Well512a well512a0 = new Well512a(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 3330, 0, 773);
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(773, hypergeometricDistribution0.getSampleSize());
      assertEquals(3330, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1408, 1408, 1408);
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1408.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(0L);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1499, 238, 238);
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(26.758946311770814, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[6];
      Well512a well512a0 = new Well512a(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 3330, 1019, 773);
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability(85);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 157, 1408, 1408);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (1,408) must be less than or equal to population size (157)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(0L);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1499, 238, 238);
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(37.78785857238159, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1499, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(0L);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1499, 238, 238);
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(37.78785857238159, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(238, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(0L);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1499, 238, 238);
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(37.78785857238159, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(238, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Well512a well512a0 = new Well512a(1422);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 1422, 0, 1422);
      hypergeometricDistribution0.getNumericalVariance();
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1422, hypergeometricDistribution0.getSampleSize());
      assertEquals(1422, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[6];
      Well512a well512a0 = new Well512a(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 3330, 0, 773);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(85);
      assertEquals(0.0, double0, 0.01);
      assertEquals(773, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3330, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(0L);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1499, 238, 238);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertEquals(37.78785857238159, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(0L);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1499, 238, 238);
      double double0 = hypergeometricDistribution0.probability(1457);
      assertEquals(37.78785857238159, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(0L);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1499, 238, 238);
      double double0 = hypergeometricDistribution0.probability((-5469));
      assertEquals(37.78785857238159, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(0L);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1499, 238, 238);
      double double0 = hypergeometricDistribution0.cumulativeProbability(238);
      assertEquals(1.0, double0, 0.01);
      assertEquals(37.78785857238159, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(0L);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1499, 238, 238);
      double double0 = hypergeometricDistribution0.cumulativeProbability((-5079));
      assertEquals(37.78785857238159, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(238, 81, 1499);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (1,499) must be less than or equal to population size (238)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(238, 1961, 1029);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (1,961) must be less than or equal to population size (238)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 4016, 4016, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(154);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 154, (-244), 1974);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-244)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(0, 498, 1019);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(0L);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1499, 238, 238);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(37.78785857238159, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(0L);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1499, 238, 238);
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(37.78785857238159, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(238, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(0L);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1499, 238, 238);
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertEquals(37.78785857238159, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2647, 1386, 1386);
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(164.76270418400685, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2647, 1386, 1386);
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(1013);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(19650172, 19650172, 19650172);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals((-60.31411348460461), double0, 0.01);
  }
}
