/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 15:11:15 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3512, 865, 2394);
      hypergeometricDistribution0.upperCumulativeProbability(865);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1399, 0, 493);
      hypergeometricDistribution0.upperCumulativeProbability(0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 489, 1, 489);
      hypergeometricDistribution0.cumulativeProbability(489);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(0, 373, 373);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1399, 0, 469);
      hypergeometricDistribution0.getSupportUpperBound();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1399, 0, 493);
      hypergeometricDistribution0.getSupportLowerBound();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1997, 2, 1997);
      hypergeometricDistribution0.getSupportLowerBound();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(832, 832, 0);
      hypergeometricDistribution0.getSampleSize();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1399, 0, 493);
      hypergeometricDistribution0.getNumericalVariance();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1399, 0, 493);
      hypergeometricDistribution0.getNumericalMean();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1997, 2, 1997);
      hypergeometricDistribution0.getNumericalMean();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1997, 2, 1997);
      hypergeometricDistribution0.getNumberOfSuccesses();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 949, 949, 949);
      hypergeometricDistribution0.cumulativeProbability((-497));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1997, 2, 1997);
      hypergeometricDistribution0.calculateNumericalVariance();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3512, 865, 2394);
      hypergeometricDistribution0.calculateNumericalVariance();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(jDKRandomGenerator0, 2471, 994, 994);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(276);
      assertEquals(0.9999999999999998, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3512, 865, 2394);
      hypergeometricDistribution0.cumulativeProbability(558);
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(570);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 676, 700, (-5258));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-5,258)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1399, 0, 493);
      double double0 = hypergeometricDistribution0.probability(0);
      assertEquals(1.0, double0, 0.01);
      assertEquals(1399, hypergeometricDistribution0.getPopulationSize());
      assertEquals(493, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 489, 1, 489);
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(489, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1399, 0, 493);
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(1399, hypergeometricDistribution0.getPopulationSize());
      assertEquals(493, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1399, 0, 493);
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(1399, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(493, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2394, 865, 865);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(837);
      assertEquals(0.0, double0, 0.01);
      assertEquals(312.5417710944027, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3512, 865, 2394);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability((-2068));
      assertEquals(1.0, double0, 0.01);
      assertEquals(589.6383826879271, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1997, 2, 1997);
      double double0 = hypergeometricDistribution0.probability(1997);
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1399, 0, 493);
      double double0 = hypergeometricDistribution0.probability((-2936));
      assertEquals(493, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1399, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1399, 0, 493);
      hypergeometricDistribution0.cumulativeProbability(0, 0);
      assertEquals(1399, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(493, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(947, 1, 2451);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (2,451) must be less than or equal to population size (947)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 1264, 1999, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (1,999) must be less than or equal to population size (1,264)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(2, (-522), 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-522)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((-1875), 0, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-1,875)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3512, 865, 2394);
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(589.6383826879271, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(865, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(131033, 131033, 131033);
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertEquals((-78.01160776292996), hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3512, 865, 2394);
      hypergeometricDistribution0.getNumericalVariance();
      // Undeclared exception!
      hypergeometricDistribution0.sample(2713);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3512, 865, 2394);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(3512);
      assertEquals(589.6383826879271, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(131033, 131033, 131033);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals((-78.01160776292996), double0, 0.01);
  }
}
