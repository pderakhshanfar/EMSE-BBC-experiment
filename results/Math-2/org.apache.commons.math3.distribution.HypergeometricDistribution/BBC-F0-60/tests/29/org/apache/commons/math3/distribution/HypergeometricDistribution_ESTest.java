/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 15:24:27 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.SynchronizedRandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 3080;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(6245, 3080, 3080);
      hypergeometricDistribution0.upperCumulativeProbability(3080);
      hypergeometricDistribution0.reseedRandomGenerator(3080);
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability(1802);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Random.setNextRandom(4877);
      ISAACRandom iSAACRandom0 = new ISAACRandom();
      int int0 = 985;
      iSAACRandom0.clear();
      iSAACRandom0.nextGaussian();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 4877, 1119, 985);
      iSAACRandom0.nextFloat();
      hypergeometricDistribution0.reseedRandomGenerator(985);
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(559);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      well44497b0.nextInt(689);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(689, 561, 689);
      hypergeometricDistribution0.cumulativeProbability(561);
      well44497b0.nextLong();
      hypergeometricDistribution0.cumulativeProbability(689);
      hypergeometricDistribution0.getSupportUpperBound();
      well44497b0.nextLong();
      well44497b0.nextLong();
      hypergeometricDistribution0.reseedRandomGenerator((-7438746737830737824L));
      hypergeometricDistribution0.getSupportUpperBound();
      well44497b0.setSeed(561);
      well44497b0.nextDouble();
      hypergeometricDistribution0.getNumericalVariance();
      well44497b0.nextDouble();
      well44497b0.setSeed(0);
      well44497b0.nextDouble();
      hypergeometricDistribution0.probability(561);
      well44497b0.setSeed(0L);
      hypergeometricDistribution0.sample();
      well44497b0.setSeed((-7438746737830737824L));
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.upperCumulativeProbability(561);
      hypergeometricDistribution0.upperCumulativeProbability(1118);
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(689, 1315, (-865));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2443, 0, 2);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.getSupportUpperBound();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2617, 2393, 2393);
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.probability(2393);
      hypergeometricDistribution0.getNumericalVariance();
      Well44497b well44497b0 = new Well44497b((long) 2393);
      well44497b0.nextDouble();
      int int0 = 0;
      well44497b0.setSeed(2393);
      well44497b0.nextDouble();
      hypergeometricDistribution0.probability(0);
      well44497b0.setSeed(1073741824L);
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.upperCumulativeProbability(2193);
      hypergeometricDistribution0.upperCumulativeProbability((-1407));
      HypergeometricDistribution hypergeometricDistribution1 = null;
      try {
        hypergeometricDistribution1 = new HypergeometricDistribution(2153, 16, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2617, 2393, 2393);
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.upperCumulativeProbability(5502);
      hypergeometricDistribution0.probability(2393);
      int[] intArray0 = new int[4];
      intArray0[0] = 2393;
      intArray0[1] = 5502;
      intArray0[2] = 2617;
      intArray0[3] = 5502;
      Well44497b well44497b0 = new Well44497b(intArray0);
      well44497b0.nextDouble();
      hypergeometricDistribution0.getNumericalVariance();
      Well44497b well44497b1 = new Well44497b();
      well44497b1.nextDouble();
      well44497b0.setSeed((-1177));
      well44497b1.nextDouble();
      hypergeometricDistribution0.probability(1378);
      well44497b0.setSeed((long) (-1177));
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.upperCumulativeProbability(2905);
      hypergeometricDistribution0.upperCumulativeProbability(2393);
      HypergeometricDistribution hypergeometricDistribution1 = null;
      try {
        hypergeometricDistribution1 = new HypergeometricDistribution(0, 2617, 1313);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      well44497b0.nextInt(689);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(689, 561, 689);
      hypergeometricDistribution0.cumulativeProbability(561);
      well44497b0.nextLong();
      hypergeometricDistribution0.cumulativeProbability(689);
      hypergeometricDistribution0.getSupportUpperBound();
      well44497b0.nextLong();
      well44497b0.nextLong();
      hypergeometricDistribution0.getSupportUpperBound();
      well44497b0.setSeed(561);
      well44497b0.nextDouble();
      hypergeometricDistribution0.getNumericalVariance();
      well44497b0.nextDouble();
      well44497b0.setSeed(0);
      well44497b0.nextDouble();
      hypergeometricDistribution0.probability(561);
      well44497b0.setSeed(0L);
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.upperCumulativeProbability(561);
      hypergeometricDistribution0.upperCumulativeProbability(1118);
      HypergeometricDistribution hypergeometricDistribution1 = null;
      try {
        hypergeometricDistribution1 = new HypergeometricDistribution(689, 1315, (-865));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-865)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2393, 2262, 2263);
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.probability((-582));
      hypergeometricDistribution0.inverseCumulativeProbability(1.0);
      int int0 = 4550;
      HypergeometricDistribution hypergeometricDistribution1 = null;
      try {
        hypergeometricDistribution1 = new HypergeometricDistribution(2281, 1, 4550);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (4,550) must be less than or equal to population size (2,281)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 2617;
      int int1 = 2393;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2617, 2393, 2393);
      hypergeometricDistribution0.isSupportConnected();
      double double0 = 0.2145126760005951;
      hypergeometricDistribution0.getNumericalVariance();
      // Undeclared exception!
      hypergeometricDistribution0.inverseCumulativeProbability(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(422);
      well44497b0.setSeed((-2812L));
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 2260, 2, 422);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.upperCumulativeProbability(2260);
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.cumulativeProbability(0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 2617;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2617, 2393, 2393);
      hypergeometricDistribution0.probability((-441));
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.probability(2393);
      // Undeclared exception!
      hypergeometricDistribution0.inverseCumulativeProbability(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      well44497b0.setSeed((long) 1748);
      well44497b0.nextFloat();
      int int0 = 689;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 1748, 689, (-1929));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1,929)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      well44497b0.nextInt(689);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 689, 689, 689);
      hypergeometricDistribution0.getNumericalVariance();
      well44497b0.nextLong();
      hypergeometricDistribution0.cumulativeProbability(689);
      hypergeometricDistribution0.getSupportUpperBound();
      well44497b0.nextLong();
      well44497b0.nextLong();
      hypergeometricDistribution0.getSupportUpperBound();
      well44497b0.setSeed(86);
      well44497b0.nextDouble();
      HypergeometricDistribution hypergeometricDistribution1 = null;
      try {
        hypergeometricDistribution1 = new HypergeometricDistribution(561, 689, 2569);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (689) must be less than or equal to population size (561)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c((-702));
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 1365, 1365, 1690);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (1,690) must be less than or equal to population size (1,365)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister((-9L));
      mersenneTwister0.nextGaussian();
      mersenneTwister0.nextGaussian();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 1167, 2, 0);
      hypergeometricDistribution0.upperCumulativeProbability(1167);
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.probability(2);
      mersenneTwister0.nextLong();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.cumulativeProbability(2);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.getSupportLowerBound();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2541, 0, 2541);
      hypergeometricDistribution0.probability(0);
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.cumulativeProbability(2);
      hypergeometricDistribution0.getSampleSize();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(100, 100, 0);
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.inverseCumulativeProbability(0.0);
      hypergeometricDistribution0.cumulativeProbability(0);
      hypergeometricDistribution0.cumulativeProbability(0);
      hypergeometricDistribution0.solveInverseCumulativeProbability(1.0, 0, 2457);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.probability(0);
      hypergeometricDistribution0.getSampleSize();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(422, 422, 0);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.inverseCumulativeProbability(0);
      int int0 = 1175;
      hypergeometricDistribution0.reseedRandomGenerator(0);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.upperCumulativeProbability(1175);
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.getSupportUpperBound();
      try { 
        hypergeometricDistribution0.inverseCumulativeProbability(2507.3784);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2,507.378 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 1396, 1396, 960);
      hypergeometricDistribution0.solveInverseCumulativeProbability(1396, 5123, 5123);
      hypergeometricDistribution0.getNumericalVariance();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      well44497b0.nextInt(689);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 689, 689, 689);
      hypergeometricDistribution0.getNumericalVariance();
      well44497b0.nextLong();
      hypergeometricDistribution0.cumulativeProbability(689);
      hypergeometricDistribution0.getSupportUpperBound();
      well44497b0.nextLong();
      well44497b0.nextLong();
      hypergeometricDistribution0.getSupportUpperBound();
      well44497b0.setSeed(86);
      well44497b0.nextDouble();
      hypergeometricDistribution0.sample(815);
      hypergeometricDistribution0.getNumericalVariance();
      well44497b0.nextDouble();
      well44497b0.setSeed(0);
      well44497b0.nextDouble();
      hypergeometricDistribution0.probability(689);
      well44497b0.setSeed(0L);
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.upperCumulativeProbability(689);
      hypergeometricDistribution0.upperCumulativeProbability(1118);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.calculateNumericalVariance();
      int[] intArray0 = new int[1];
      intArray0[0] = 86;
      well44497b0.setSeed(intArray0);
      hypergeometricDistribution0.upperCumulativeProbability((-317));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 2617;
      int int1 = 2393;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2617, 2393, 2393);
      hypergeometricDistribution0.isSupportConnected();
      double double0 = 0.2145126760005951;
      hypergeometricDistribution0.probability(2393);
      // Undeclared exception!
      hypergeometricDistribution0.inverseCumulativeProbability(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 1283;
      intArray0[2] = (-849);
      intArray0[3] = 782;
      intArray0[4] = 0;
      intArray0[5] = 2286;
      Well1024a well1024a0 = new Well1024a(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 1283, 0, 0);
      hypergeometricDistribution0.getNumericalVariance();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2929, 2929, 0);
      hypergeometricDistribution0.upperCumulativeProbability(0);
      hypergeometricDistribution0.getSupportUpperBound();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 0, 627, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3081, 3081, 3081);
      hypergeometricDistribution0.sample(3081);
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.sample();
      double double0 = hypergeometricDistribution0.cumulativeProbability(3081, 3081);
      assertEquals(0.0, double0, 0.01);
      
      hypergeometricDistribution0.upperCumulativeProbability(0);
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.cumulativeProbability(256);
      hypergeometricDistribution0.cumulativeProbability(1103);
      hypergeometricDistribution0.solveInverseCumulativeProbability((-626.71745974), 0, 1);
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.solveInverseCumulativeProbability((-578.50291), 0, 0);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.getSupportUpperBound();
      double double1 = hypergeometricDistribution0.probability(3081);
      assertEquals(Double.NaN, double1, 0.01);
      
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.inverseCumulativeProbability(0.0);
      hypergeometricDistribution0.upperCumulativeProbability(0);
      hypergeometricDistribution0.cumulativeProbability(0);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getSampleSize();
      double double2 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(3081.0, double2, 0.01);
      
      double double3 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double3, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 1236;
      int int1 = (-2163);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1236, (-2163), 1236);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-2,163)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1096, 1096, 1096);
      double double0 = hypergeometricDistribution0.cumulativeProbability(179);
      assertEquals(0.0, double0, 0.01);
      
      hypergeometricDistribution0.reseedRandomGenerator(179);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.isSupportConnected();
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(1096, int0);
      
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.calculateNumericalVariance();
      double double1 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.0, double1, 0.01);
      
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.cumulativeProbability(0, 0);
      double double2 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertEquals(1.0, double2, 0.01);
      
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((-2024), (-2024), (-902));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-2,024)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator((RandomGenerator) null);
      int int0 = 1;
      int int1 = 1314;
      int int2 = 0;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(synchronizedRandomGenerator0, 1, 1314, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (1,314) must be less than or equal to population size (1)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }
}
