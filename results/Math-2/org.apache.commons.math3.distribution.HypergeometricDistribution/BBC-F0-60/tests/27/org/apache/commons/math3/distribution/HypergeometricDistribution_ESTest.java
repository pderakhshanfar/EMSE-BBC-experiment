/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 15:14:06 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497b;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 8388607;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(8388607, 8388607, 8388607);
      assertEquals((-2.0000001192093038), hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(8388607, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(8388607, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(8388607, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(8388607);
      assertEquals((-2.0000001192093038), hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(8388607, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(8388607, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(8388607, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.0, double0, 0.01);
      
      int int1 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals((-2.0000001192093038), hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(8388607, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(8388607, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(8388607, hypergeometricDistribution0.getSampleSize());
      assertEquals(8388607, int1);
      assertTrue(int1 == int0);
      
      double double1 = hypergeometricDistribution0.upperCumulativeProbability(1);
      assertEquals((-2.0000001192093038), hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(8388607, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(8388607, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(8388607, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double double2 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals((-2.0000001192093038), hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(8388607, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(8388607, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(8388607, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      double double3 = hypergeometricDistribution0.getNumericalMean();
      assertEquals((-2.0000001192093038), hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(8388607, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(8388607, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(8388607, hypergeometricDistribution0.getSampleSize());
      assertEquals((-2.0000001192093038), double3, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      
      int int2 = hypergeometricDistribution0.solveInverseCumulativeProbability((-268.0), (-803), 3570);
      assertEquals((-2.0000001192093038), hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(8388607, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(8388607, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(8388607, hypergeometricDistribution0.getSampleSize());
      assertEquals((-802), int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = hypergeometricDistribution0.getSampleSize();
      assertEquals((-2.0000001192093038), hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(8388607, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(8388607, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(8388607, hypergeometricDistribution0.getSampleSize());
      assertEquals(8388607, int3);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      
      int int4 = hypergeometricDistribution0.solveInverseCumulativeProbability(8388607, 8388607, 8388607);
      assertEquals((-2.0000001192093038), hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(8388607, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(8388607, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(8388607, hypergeometricDistribution0.getSampleSize());
      assertEquals(8388607, int4);
      assertTrue(int4 == int3);
      assertTrue(int4 == int0);
      assertFalse(int4 == int2);
      assertTrue(int4 == int1);
      
      double double4 = hypergeometricDistribution0.cumulativeProbability(8388607);
      assertEquals((-2.0000001192093038), hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(8388607, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(8388607, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(8388607, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.0, double4, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(double4, double1, 0.01);
      
      // Undeclared exception!
      hypergeometricDistribution0.sample(8388607);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3332, 1403, 1403);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(590.7590036014406, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1403, hypergeometricDistribution0.getSampleSize());
      assertEquals(1403, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3332, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability(2);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 866;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3371, 866, 866);
      assertEquals(222.47285671907446, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(866, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3371, hypergeometricDistribution0.getPopulationSize());
      assertEquals(866, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(749);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3259, 1990, 3259);
      assertEquals(1990.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3259, hypergeometricDistribution0.getSampleSize());
      assertEquals(3259, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1990, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(1990.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3259, hypergeometricDistribution0.getSampleSize());
      assertEquals(3259, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1990, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1990, int0);
      
      int int1 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(1990.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3259, hypergeometricDistribution0.getSampleSize());
      assertEquals(3259, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1990, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1990, int1);
      assertTrue(int1 == int0);
      
      hypergeometricDistribution0.reseedRandomGenerator(0L);
      assertEquals(1990.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3259, hypergeometricDistribution0.getSampleSize());
      assertEquals(3259, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1990, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double0 = hypergeometricDistribution0.probability(1990);
      assertEquals(1990.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3259, hypergeometricDistribution0.getSampleSize());
      assertEquals(3259, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1990, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1.0, double0, 0.01);
      
      int int2 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(1990.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3259, hypergeometricDistribution0.getSampleSize());
      assertEquals(3259, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1990, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1990, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[0];
      Well44497b well44497b0 = new Well44497b(intArray0);
      assertNotNull(well44497b0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(371, 2, 2);
      assertEquals(371, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.01078167115902965, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(1301, 2, 1154);
      assertEquals(1.7740199846272098, hypergeometricDistribution1.getNumericalMean(), 0.01);
      assertEquals(1154, hypergeometricDistribution1.getSampleSize());
      assertEquals(2, hypergeometricDistribution1.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution1.isSupportConnected());
      assertEquals(1301, hypergeometricDistribution1.getPopulationSize());
      assertNotNull(hypergeometricDistribution1);
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(371, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.01078167115902965, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotSame(hypergeometricDistribution0, hypergeometricDistribution1);
      assertEquals(2, int0);
      assertFalse(hypergeometricDistribution0.equals((Object)hypergeometricDistribution1));
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(371, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.01078167115902965, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotSame(hypergeometricDistribution0, hypergeometricDistribution1);
      assertEquals(0.010694566377829359, double0, 0.01);
      assertFalse(hypergeometricDistribution0.equals((Object)hypergeometricDistribution1));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[0];
      Well44497b well44497b0 = new Well44497b(intArray0);
      assertNotNull(well44497b0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      int int0 = well44497b0.nextInt();
      assertEquals(1660468040, int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      float float0 = well44497b0.nextFloat();
      assertEquals(0.3943137F, float0, 0.01F);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      well44497b0.clear();
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      well44497b0.setSeed(214L);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      float float1 = well44497b0.nextFloat();
      assertEquals(0.29454076F, float1, 0.01F);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(0, intArray0.length);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 2192, 2, 1294);
      assertEquals(2192, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.1806569343065694, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1294, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      int int1 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(2192, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.1806569343065694, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1294, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, int1);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(int1 == int0);
      assertEquals(0, intArray0.length);
      
      int int2 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(2192, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.1806569343065694, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1294, hypergeometricDistribution0.getSampleSize());
      assertEquals(2, int2);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, intArray0.length);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(2);
      assertEquals(2192, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.1806569343065694, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1294, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.3483773199585564, double0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      well44497b0.setSeed(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      int int3 = well44497b0.nextInt();
      assertEquals(1401855556, int3);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(0, intArray0.length);
      
      well44497b0.clear();
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      int int4 = hypergeometricDistribution0.sample();
      assertEquals(2192, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.1806569343065694, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1294, hypergeometricDistribution0.getSampleSize());
      assertEquals(1, int4);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertEquals(0, intArray0.length);
      
      double double1 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(2192, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.1806569343065694, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1294, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.1806569343065694, double1, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0, intArray0.length);
      
      double double2 = hypergeometricDistribution0.upperCumulativeProbability(2);
      assertEquals(2192, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.1806569343065694, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1294, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.3483773199585564, double2, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(0, intArray0.length);
      
      int int5 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(2192, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.1806569343065694, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1294, hypergeometricDistribution0.getSampleSize());
      assertEquals(2, int5);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(int5 == int0);
      assertTrue(int5 == int2);
      assertFalse(int5 == int4);
      assertFalse(int5 == int1);
      assertFalse(int5 == int3);
      assertEquals(0, intArray0.length);
      
      int int6 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(2192, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.1806569343065694, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1294, hypergeometricDistribution0.getSampleSize());
      assertEquals(2192, int6);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(int6 == int3);
      assertFalse(int6 == int5);
      assertFalse(int6 == int1);
      assertFalse(int6 == int0);
      assertFalse(int6 == int2);
      assertFalse(int6 == int4);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = (-1085);
      intArray0[1] = (-1085);
      intArray0[2] = (-1085);
      intArray0[3] = (-1085);
      intArray0[4] = (-1085);
      intArray0[5] = (-1085);
      ISAACRandom iSAACRandom0 = new ISAACRandom(intArray0);
      assertNotNull(iSAACRandom0);
      assertArrayEquals(new int[] {(-1085), (-1085), (-1085), (-1085), (-1085), (-1085)}, intArray0);
      assertEquals(6, intArray0.length);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 3222, 1755, 5948);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (5,948) must be less than or equal to population size (3,222)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[0];
      Well44497b well44497b0 = new Well44497b(intArray0);
      assertNotNull(well44497b0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      int int0 = well44497b0.nextInt();
      assertEquals(1660468040, int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      float float0 = well44497b0.nextFloat();
      assertEquals(0.3943137F, float0, 0.01F);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      int int1 = 20;
      long long0 = well44497b0.nextLong();
      assertEquals(2402720575636481141L, long0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      well44497b0.clear();
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      float float1 = well44497b0.nextFloat();
      assertEquals(0.6303209F, float1, 0.01F);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(0, intArray0.length);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 2, 2, 20);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (20) must be less than or equal to population size (2)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 8388607;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(8388607, 467, 467);
      assertEquals(467, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.025998237848071794, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(467, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(8388607, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      int[] intArray0 = hypergeometricDistribution0.sample(467);
      assertEquals(467, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.025998237848071794, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(467, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(8388607, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(intArray0);
      assertEquals(467, intArray0.length);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(8388607);
      assertEquals(467, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.025998237848071794, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(467, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(8388607, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double0, 0.01);
      
      int int1 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(467, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.025998237848071794, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(467, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(8388607, hypergeometricDistribution0.getPopulationSize());
      assertEquals(467, int1);
      assertFalse(int1 == int0);
      
      double double1 = hypergeometricDistribution0.cumulativeProbability((-1219), 1);
      assertEquals(467, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.025998237848071794, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(467, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(8388607, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.9996692188583585, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = hypergeometricDistribution0.upperCumulativeProbability(1);
      assertEquals(467, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.025998237848071794, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(467, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(8388607, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.025664602241711514, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      double double3 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(467, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.025998237848071794, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(467, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(8388607, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.02599534634500157, double3, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(double3, double2, 0.01);
      
      double double4 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(467, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.025998237848071794, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(467, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(8388607, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.025998237848071794, double4, 0.01);
      assertEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      
      int int2 = hypergeometricDistribution0.solveInverseCumulativeProbability((-268.0), (-803), 3570);
      assertEquals(467, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.025998237848071794, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(467, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(8388607, hypergeometricDistribution0.getPopulationSize());
      assertEquals((-802), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      int int3 = hypergeometricDistribution0.getSampleSize();
      assertEquals(467, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.025998237848071794, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(467, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(8388607, hypergeometricDistribution0.getPopulationSize());
      assertEquals(467, int3);
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      
      int int4 = hypergeometricDistribution0.solveInverseCumulativeProbability(467, 467, 467);
      assertEquals(467, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.025998237848071794, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(467, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(8388607, hypergeometricDistribution0.getPopulationSize());
      assertEquals(467, int4);
      assertTrue(int4 == int3);
      assertTrue(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      
      double double5 = hypergeometricDistribution0.cumulativeProbability(467);
      assertEquals(467, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.025998237848071794, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(467, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(8388607, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.0, double5, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertEquals(double5, double1, 0.01);
      
      int[] intArray1 = hypergeometricDistribution0.sample(467);
      assertEquals(467, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.025998237848071794, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(467, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(8388607, hypergeometricDistribution0.getPopulationSize());
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(467, intArray1.length);
      
      double double6 = hypergeometricDistribution0.probability(467);
      assertEquals(467, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.025998237848071794, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(467, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(8388607, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double6, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertEquals(double6, double0, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double5, 0.01);
      
      int int5 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(467, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.025998237848071794, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(467, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(8388607, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, int5);
      assertFalse(int5 == int4);
      assertFalse(int5 == int1);
      assertFalse(int5 == int3);
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      
      int int6 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(467, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.025998237848071794, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(467, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(8388607, hypergeometricDistribution0.getPopulationSize());
      assertEquals(467, int6);
      assertFalse(int6 == int2);
      assertFalse(int6 == int5);
      assertTrue(int6 == int4);
      assertFalse(int6 == int0);
      assertTrue(int6 == int1);
      assertTrue(int6 == int3);
      
      int int7 = hypergeometricDistribution0.getSampleSize();
      assertEquals(467, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.025998237848071794, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(467, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(8388607, hypergeometricDistribution0.getPopulationSize());
      assertEquals(467, int7);
      assertTrue(int7 == int6);
      assertFalse(int7 == int5);
      assertTrue(int7 == int3);
      assertFalse(int7 == int2);
      assertFalse(int7 == int0);
      assertTrue(int7 == int1);
      assertTrue(int7 == int4);
      
      double double7 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(467, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.025998237848071794, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(467, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(8388607, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.02599534634500157, double7, 0.01);
      assertEquals(double7, double4, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertEquals(double7, double3, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertEquals(double7, double2, 0.01);
      
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertEquals(467, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.025998237848071794, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(467, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(8388607, hypergeometricDistribution0.getPopulationSize());
      assertTrue(boolean0);
      
      double double8 = hypergeometricDistribution0.cumulativeProbability(467);
      assertEquals(467, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.025998237848071794, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(467, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(8388607, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.0, double8, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertEquals(double8, double1, 0.01);
      assertEquals(double8, double5, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double7, 0.01);
      
      int int8 = hypergeometricDistribution0.sample();
      assertEquals(467, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.025998237848071794, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(467, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(8388607, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, int8);
      assertFalse(int8 == int4);
      assertFalse(int8 == int2);
      assertFalse(int8 == int0);
      assertFalse(int8 == int6);
      assertTrue(int8 == int5);
      assertFalse(int8 == int7);
      assertFalse(int8 == int3);
      assertFalse(int8 == int1);
      
      int int9 = 1478;
      int int10 = hypergeometricDistribution0.sample();
      assertEquals(467, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.025998237848071794, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(467, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(8388607, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, int10);
      assertTrue(int10 == int5);
      assertFalse(int10 == int9);
      assertFalse(int10 == int7);
      assertFalse(int10 == int2);
      assertFalse(int10 == int6);
      assertTrue(int10 == int8);
      assertFalse(int10 == int1);
      assertFalse(int10 == int4);
      assertFalse(int10 == int3);
      assertFalse(int10 == int0);
      
      // Undeclared exception!
      try { 
        hypergeometricDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(616, 0, 0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(616, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(616, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double0, 0.01);
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(616, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, int0);
      
      double double1 = hypergeometricDistribution0.cumulativeProbability(0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(616, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = hypergeometricDistribution0.cumulativeProbability(0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(616, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.0, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      
      int int1 = hypergeometricDistribution0.solveInverseCumulativeProbability(1850.443006123954, 2, (-571));
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(616, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals((-571), int1);
      assertFalse(int1 == int0);
      
      double double3 = hypergeometricDistribution0.cumulativeProbability((-1441));
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(616, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double3, 0.01);
      assertEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      
      double double4 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(616, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double4, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(double4, double0, 0.01);
      
      double double5 = hypergeometricDistribution0.cumulativeProbability(0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(616, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.0, double5, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertEquals(double5, double1, 0.01);
      assertEquals(double5, double2, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double4, 0.01);
      
      int int2 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(616, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      double double6 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(616, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double6, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertEquals(double6, double3, 0.01);
      assertEquals(double6, double0, 0.01);
      assertEquals(double6, double4, 0.01);
      assertNotEquals(double6, double5, 0.01);
      
      double double7 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(616, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double7, 0.01);
      assertEquals(double7, double0, 0.01);
      assertEquals(double7, double4, 0.01);
      assertEquals(double7, double6, 0.01);
      assertEquals(double7, double3, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double5, 0.01);
      
      int int3 = hypergeometricDistribution0.sample();
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(616, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, int3);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      
      int int4 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(616, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, int4);
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      assertFalse(int4 == int1);
      assertTrue(int4 == int0);
      
      int int5 = hypergeometricDistribution0.getSampleSize();
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(616, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, int5);
      assertTrue(int5 == int3);
      assertTrue(int5 == int0);
      assertTrue(int5 == int2);
      assertFalse(int5 == int1);
      assertTrue(int5 == int4);
      
      hypergeometricDistribution0.reseedRandomGenerator(0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(616, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double8 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(616, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.0, double8, 0.01);
      assertEquals(double8, double1, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertEquals(double8, double2, 0.01);
      assertEquals(double8, double5, 0.01);
      
      int int6 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(616, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, int6);
      assertTrue(int6 == int0);
      assertTrue(int6 == int4);
      assertTrue(int6 == int5);
      assertTrue(int6 == int3);
      assertFalse(int6 == int1);
      assertTrue(int6 == int2);
      
      double double9 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(616, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double9, 0.01);
      assertEquals(double9, double7, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertEquals(double9, double4, 0.01);
      assertEquals(double9, double6, 0.01);
      assertEquals(double9, double3, 0.01);
      assertEquals(double9, double0, 0.01);
      
      double double10 = hypergeometricDistribution0.cumulativeProbability(0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(616, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.0, double10, 0.01);
      assertNotEquals(double10, double9, 0.01);
      assertEquals(double10, double8, 0.01);
      assertEquals(double10, double2, 0.01);
      assertNotEquals(double10, double0, 0.01);
      assertEquals(double10, double5, 0.01);
      assertEquals(double10, double1, 0.01);
      assertNotEquals(double10, double3, 0.01);
      assertNotEquals(double10, double4, 0.01);
      assertNotEquals(double10, double6, 0.01);
      assertNotEquals(double10, double7, 0.01);
      
      int int7 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(616, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, int7);
      assertTrue(int7 == int6);
      assertTrue(int7 == int4);
      assertTrue(int7 == int0);
      assertTrue(int7 == int3);
      assertFalse(int7 == int1);
      assertTrue(int7 == int2);
      assertTrue(int7 == int5);
      
      double double11 = hypergeometricDistribution0.probability(286);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(616, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double11, 0.01);
      assertEquals(double11, double9, 0.01);
      assertNotEquals(double11, double10, 0.01);
      assertNotEquals(double11, double1, 0.01);
      assertEquals(double11, double7, 0.01);
      assertNotEquals(double11, double5, 0.01);
      assertNotEquals(double11, double8, 0.01);
      assertNotEquals(double11, double2, 0.01);
      assertEquals(double11, double3, 0.01);
      assertEquals(double11, double4, 0.01);
      assertEquals(double11, double6, 0.01);
      assertEquals(double11, double0, 0.01);
      
      double double12 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(616, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double12, 0.01);
      assertNotEquals(double12, double1, 0.01);
      assertEquals(double12, double6, 0.01);
      assertNotEquals(double12, double2, 0.01);
      assertEquals(double12, double3, 0.01);
      assertEquals(double12, double0, 0.01);
      assertEquals(double12, double4, 0.01);
      assertEquals(double12, double7, 0.01);
      assertNotEquals(double12, double8, 0.01);
      assertNotEquals(double12, double10, 0.01);
      assertEquals(double12, double9, 0.01);
      assertEquals(double12, double11, 0.01);
      assertNotEquals(double12, double5, 0.01);
      
      double double13 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(616, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double13, 0.01);
      assertEquals(double13, double4, 0.01);
      assertEquals(double13, double12, 0.01);
      assertNotEquals(double13, double5, 0.01);
      assertNotEquals(double13, double2, 0.01);
      assertNotEquals(double13, double8, 0.01);
      assertEquals(double13, double7, 0.01);
      assertEquals(double13, double0, 0.01);
      assertEquals(double13, double6, 0.01);
      assertNotEquals(double13, double1, 0.01);
      assertEquals(double13, double3, 0.01);
      assertEquals(double13, double11, 0.01);
      assertNotEquals(double13, double10, 0.01);
      assertEquals(double13, double9, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 2;
      int int1 = 4741;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(2, 2, 4741);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (4,741) must be less than or equal to population size (2)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(906, 906, 906);
      assertEquals(906, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(906.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(906, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(906, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(906, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(906.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(906, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(906, hypergeometricDistribution0.getPopulationSize());
      assertEquals(906, int0);
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(0);
      assertEquals(906, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(906.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(906, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(906, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double0, 0.01);
      
      int int1 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(906, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(906.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(906, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(906, hypergeometricDistribution0.getPopulationSize());
      assertEquals(906, int1);
      assertTrue(int1 == int0);
      
      hypergeometricDistribution0.reseedRandomGenerator(0);
      assertEquals(906, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(906.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(906, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(906, hypergeometricDistribution0.getPopulationSize());
      
      int int2 = hypergeometricDistribution0.solveInverseCumulativeProbability(5.077824728028163E-274, 0, (-266));
      assertEquals(906, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(906.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(906, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(906, hypergeometricDistribution0.getPopulationSize());
      assertEquals((-266), int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      double double1 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(906, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(906.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(906, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(906, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double double2 = hypergeometricDistribution0.cumulativeProbability((-1892), 2);
      assertEquals(906, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(906.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(906, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(906, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double2, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      
      double double3 = hypergeometricDistribution0.cumulativeProbability(906, 906);
      assertEquals(906, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(906.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(906, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(906, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double3, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      
      double double4 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(906, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(906.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(906, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(906, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double4, 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(double4, double2, 0.01);
      
      double double5 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertEquals(906, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(906.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(906, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(906, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.0, double5, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double3, 0.01);
      
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertEquals(906, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(906.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(906, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(906, hypergeometricDistribution0.getPopulationSize());
      assertTrue(boolean0);
      
      double double6 = hypergeometricDistribution0.cumulativeProbability(0);
      assertEquals(906, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(906.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(906, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(906, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double6, 0.01);
      assertEquals(double6, double0, 0.01);
      assertEquals(double6, double3, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertEquals(double6, double2, 0.01);
      assertEquals(double6, double4, 0.01);
      assertEquals(double6, double1, 0.01);
      
      int int3 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(906, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(906.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(906, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(906, hypergeometricDistribution0.getPopulationSize());
      assertEquals(906, int3);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 707;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(707, (-3573), 218);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-3,573)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 8388607;
      int int1 = 467;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(8388607, 467, 467);
      assertEquals(8388607, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.025998237848071794, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(467, hypergeometricDistribution0.getSampleSize());
      assertEquals(467, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      int[] intArray0 = hypergeometricDistribution0.sample(467);
      assertEquals(8388607, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.025998237848071794, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(467, hypergeometricDistribution0.getSampleSize());
      assertEquals(467, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(intArray0);
      assertEquals(467, intArray0.length);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(8388607);
      assertEquals(8388607, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.025998237848071794, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(467, hypergeometricDistribution0.getSampleSize());
      assertEquals(467, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double0, 0.01);
      
      int int2 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(8388607, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.025998237848071794, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(467, hypergeometricDistribution0.getSampleSize());
      assertEquals(467, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(467, int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      double double1 = hypergeometricDistribution0.cumulativeProbability((-1219), 1);
      assertEquals(8388607, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.025998237848071794, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(467, hypergeometricDistribution0.getSampleSize());
      assertEquals(467, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.9996692188583585, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = hypergeometricDistribution0.upperCumulativeProbability(1);
      assertEquals(8388607, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.025998237848071794, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(467, hypergeometricDistribution0.getSampleSize());
      assertEquals(467, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.025664602241711514, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      double double3 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(8388607, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.025998237848071794, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(467, hypergeometricDistribution0.getSampleSize());
      assertEquals(467, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.02599534634500157, double3, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(double3, double2, 0.01);
      
      try { 
        hypergeometricDistribution0.cumulativeProbability(467, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lower endpoint (467) must be less than or equal to upper endpoint (0)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2, 2, 2);
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.probability(0);
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, double0, 0.01);
      
      hypergeometricDistribution0.reseedRandomGenerator(2);
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, int0);
      
      int int1 = hypergeometricDistribution0.sample();
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, int1);
      assertTrue(int1 == int0);
      
      double double1 = hypergeometricDistribution0.cumulativeProbability((-1438));
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double double2 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, double2, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      
      int int2 = hypergeometricDistribution0.inverseCumulativeProbability(0.0);
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      try { 
        hypergeometricDistribution0.inverseCumulativeProbability(716.1418402862);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 716.142 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[0];
      Well44497b well44497b0 = new Well44497b(intArray0);
      assertNotNull(well44497b0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      int int0 = well44497b0.nextInt();
      assertEquals(1660468040, int0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      float float0 = well44497b0.nextFloat();
      assertEquals(0.3943137F, float0, 0.01F);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      long long0 = well44497b0.nextLong();
      assertEquals(2402720575636481141L, long0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      well44497b0.clear();
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      float float1 = well44497b0.nextFloat();
      assertEquals(0.6303209F, float1, 0.01F);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(0, intArray0.length);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 2, 2, 0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      int int1 = hypergeometricDistribution0.getSupportLowerBound();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, int1);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(int1 == int0);
      assertEquals(0, intArray0.length);
      
      int int2 = hypergeometricDistribution0.getSupportUpperBound();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, int2);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, intArray0.length);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.0, double0, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      well44497b0.setSeed(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      int int3 = well44497b0.nextInt();
      assertEquals((-2130712539), int3);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(0, intArray0.length);
      
      well44497b0.clear();
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      int int4 = hypergeometricDistribution0.getPopulationSize();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(2, int4);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertEquals(0, intArray0.length);
      
      int int5 = hypergeometricDistribution0.sample();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, int5);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(int5 == int2);
      assertFalse(int5 == int3);
      assertTrue(int5 == int1);
      assertFalse(int5 == int4);
      assertFalse(int5 == int0);
      assertEquals(0, intArray0.length);
      
      double double1 = hypergeometricDistribution0.cumulativeProbability(1);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.0, double1, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0, intArray0.length);
      
      double double2 = hypergeometricDistribution0.upperCumulativeProbability(2);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double2, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0, intArray0.length);
      
      double double3 = hypergeometricDistribution0.getNumericalMean();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double3, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(0, intArray0.length);
      
      double double4 = hypergeometricDistribution0.cumulativeProbability(0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.0, double4, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(0, intArray0.length);
      
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(boolean0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      
      double double5 = hypergeometricDistribution0.cumulativeProbability(1660468040);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.0, double5, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(double5, double4, 0.01);
      assertEquals(double5, double1, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertEquals(double5, double0, 0.01);
      assertEquals(0, intArray0.length);
      
      double double6 = hypergeometricDistribution0.probability(3);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double6, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(double6, double2, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertEquals(double6, double3, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertEquals(0, intArray0.length);
      
      double double7 = hypergeometricDistribution0.getNumericalMean();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double7, 0.01);
      assertArrayEquals(new int[] {}, intArray0);
      assertNotEquals(double7, double0, 0.01);
      assertEquals(double7, double2, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertEquals(double7, double6, 0.01);
      assertEquals(double7, double3, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertEquals(0, intArray0.length);
      
      int int6 = hypergeometricDistribution0.getSampleSize();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, int6);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(int6 == int5);
      assertFalse(int6 == int4);
      assertTrue(int6 == int1);
      assertFalse(int6 == int3);
      assertTrue(int6 == int2);
      assertFalse(int6 == int0);
      assertEquals(0, intArray0.length);
      
      int int7 = hypergeometricDistribution0.getSupportLowerBound();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, int7);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(int7 == int1);
      assertTrue(int7 == int5);
      assertFalse(int7 == int4);
      assertFalse(int7 == int0);
      assertFalse(int7 == int3);
      assertTrue(int7 == int6);
      assertTrue(int7 == int2);
      assertEquals(0, intArray0.length);
      
      int int8 = hypergeometricDistribution0.getPopulationSize();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(2, int8);
      assertArrayEquals(new int[] {}, intArray0);
      assertFalse(int8 == int7);
      assertFalse(int8 == int6);
      assertTrue(int8 == int4);
      assertFalse(int8 == int3);
      assertFalse(int8 == int5);
      assertFalse(int8 == int1);
      assertFalse(int8 == int0);
      assertFalse(int8 == int2);
      assertEquals(0, intArray0.length);
      
      int int9 = hypergeometricDistribution0.getSampleSize();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, int9);
      assertArrayEquals(new int[] {}, intArray0);
      assertTrue(int9 == int2);
      assertTrue(int9 == int7);
      assertTrue(int9 == int1);
      assertTrue(int9 == int6);
      assertFalse(int9 == int4);
      assertFalse(int9 == int8);
      assertFalse(int9 == int0);
      assertFalse(int9 == int3);
      assertTrue(int9 == int5);
      assertEquals(0, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(123, 123, 123);
      hypergeometricDistribution0.upperCumulativeProbability(3878);
      hypergeometricDistribution0.probability(123);
      hypergeometricDistribution0.upperCumulativeProbability(123);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.sample(1871);
      hypergeometricDistribution0.solveInverseCumulativeProbability(Double.NaN, 123, 3708);
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.getNumericalVariance();
      try { 
        hypergeometricDistribution0.cumulativeProbability(4270, 123);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lower endpoint (4,270) must be less than or equal to upper endpoint (123)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 573;
      int int1 = 0;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(573, 831, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (831) must be less than or equal to population size (573)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1395, 0, 1395);
      hypergeometricDistribution0.isSupportConnected();
      double double0 = hypergeometricDistribution0.probability(1395);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1395, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1395, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = (-1);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((-1), (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-1)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-1848);
      intArray0[3] = 1192;
      intArray0[4] = 3514;
      int int0 = 0;
      intArray0[5] = 0;
      intArray0[6] = (-3352);
      intArray0[7] = 3003;
      intArray0[8] = (-2060);
      Well19937c well19937c0 = new Well19937c(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 0, 2, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2695;
      intArray0[1] = 1636;
      intArray0[2] = 0;
      intArray0[3] = (-1378);
      intArray0[4] = (-1990);
      intArray0[5] = 0;
      intArray0[6] = (-1);
      Well19937c well19937c0 = new Well19937c(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, (-1), 1479, 416);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-1)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = (-2257);
      Well19937a well19937a0 = new Well19937a(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 4, 4, (-2257));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-2,257)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }
}
