/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 14:48:24 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomAdaptor;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(721, 721, 721);
      hypergeometricDistribution0.sample(3331);
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.upperCumulativeProbability(721);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getNumericalMean();
      Well512a well512a0 = new Well512a((long) 721);
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(well512a0, 721, 721, 721);
      hypergeometricDistribution1.getPopulationSize();
      // Undeclared exception!
      hypergeometricDistribution0.getSampleSize();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 721;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(721, 721, 721);
      hypergeometricDistribution0.sample(3331);
      hypergeometricDistribution0.sample();
      int int1 = 742;
      hypergeometricDistribution0.upperCumulativeProbability(742);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getSupportUpperBound();
      // Undeclared exception!
      hypergeometricDistribution0.getNumericalMean();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 721;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(721, 721, 721);
      hypergeometricDistribution0.sample(3331);
      hypergeometricDistribution0.sample();
      int int1 = 742;
      hypergeometricDistribution0.upperCumulativeProbability(742);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getSupportUpperBound();
      // Undeclared exception!
      hypergeometricDistribution0.calculateNumericalVariance();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-638);
      intArray0[1] = (-3017);
      intArray0[2] = 8388607;
      intArray0[3] = 2508;
      intArray0[4] = (-1196);
      Well19937c well19937c0 = new Well19937c(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 8388607, 2508, 8388607);
      hypergeometricDistribution0.getNumericalMean();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 721;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(721, 721, 721);
      hypergeometricDistribution0.sample(3331);
      hypergeometricDistribution0.sample();
      int int1 = 742;
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.getSupportLowerBound();
      // Undeclared exception!
      hypergeometricDistribution0.getSupportLowerBound();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1334, 953, 733);
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.cumulativeProbability(612);
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.getSupportLowerBound();
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(654);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(721, 721, 721);
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.upperCumulativeProbability(721);
      hypergeometricDistribution0.getSupportLowerBound();
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(5558, 721, 721);
      hypergeometricDistribution1.cumulativeProbability((-77));
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution1.getNumericalVariance();
      hypergeometricDistribution0.isSupportConnected();
      // Undeclared exception!
      hypergeometricDistribution1.upperCumulativeProbability(13);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 700;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1165, 700, 700);
      hypergeometricDistribution0.upperCumulativeProbability(265);
      hypergeometricDistribution0.getSupportLowerBound();
      HypergeometricDistribution hypergeometricDistribution1 = null;
      try {
        hypergeometricDistribution1 = new HypergeometricDistribution(0, 351, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 721;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(721, 721, 721);
      hypergeometricDistribution0.sample(3331);
      hypergeometricDistribution0.sample();
      int int1 = 742;
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.getSupportLowerBound();
      // Undeclared exception!
      hypergeometricDistribution0.getSupportUpperBound();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(721, 721, 721);
      hypergeometricDistribution0.sample();
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(742);
      assertEquals(0.0, double0, 0.01);
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(721, int0);
      
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(5558, 742, 721);
      hypergeometricDistribution1.cumulativeProbability((-77));
      hypergeometricDistribution0.getNumberOfSuccesses();
      double double1 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double1, 0.01);
      
      double double2 = hypergeometricDistribution1.cumulativeProbability(13);
      assertEquals(2.1853438311871657E-31, double2, 0.01);
      
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution1.probability(1105);
      assertEquals(96.2544080604534, hypergeometricDistribution1.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(721, 721, 721);
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.upperCumulativeProbability(742);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getSupportUpperBound();
      Well512a well512a0 = new Well512a((long) 721);
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(well512a0, 742, 721, 721);
      hypergeometricDistribution1.upperCumulativeProbability(721);
      hypergeometricDistribution1.probability(0);
      hypergeometricDistribution0.getNumericalVariance();
      HypergeometricDistribution hypergeometricDistribution2 = null;
      try {
        hypergeometricDistribution2 = new HypergeometricDistribution(742, 1105, (-762));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-762)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(721, 721, 721);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.sample();
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(742);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(721, int0);
      
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(5558, 742, 721);
      double double1 = hypergeometricDistribution0.probability(5558);
      assertEquals(double1, double0, 0.01);
      
      hypergeometricDistribution0.getNumericalVariance();
      double double2 = hypergeometricDistribution1.upperCumulativeProbability((-1));
      assertEquals(1.0, double2, 0.01);
      
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      
      double double3 = hypergeometricDistribution1.calculateNumericalVariance();
      assertEquals(96.2544080604534, hypergeometricDistribution1.getNumericalMean(), 0.01);
      assertEquals(72.59793271164746, double3, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a((long) (-3959));
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 742, 2, 2);
      hypergeometricDistribution0.upperCumulativeProbability(1242);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getSupportUpperBound();
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(0, int0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability((-9));
      assertEquals(1.0, double0, 0.01);
      
      double double1 = hypergeometricDistribution0.probability(0);
      assertEquals(0.9946128019613617, double1, 0.01);
      
      double double2 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.005369049553023193, double2, 0.01);
      
      double double3 = hypergeometricDistribution0.upperCumulativeProbability(3654);
      assertEquals(0.0, double3, 0.01);
      
      hypergeometricDistribution0.isSupportConnected();
      assertEquals(742, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(721, 721, 721);
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.upperCumulativeProbability(742);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(721, int0);
      
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(5558, 742, 721);
      hypergeometricDistribution0.getNumberOfSuccesses();
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = hypergeometricDistribution1.cumulativeProbability(0);
      assertEquals(4.793517320257102E-49, double1, 0.01);
      assertEquals(96.2544080604534, hypergeometricDistribution1.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(721, 721, 721);
      hypergeometricDistribution0.sample();
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(742);
      assertEquals(0.0, double0, 0.01);
      
      hypergeometricDistribution0.getSupportLowerBound();
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(721, int0);
      
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(5558, 742, 721);
      hypergeometricDistribution0.getNumberOfSuccesses();
      double double1 = hypergeometricDistribution1.probability(721);
      assertEquals(96.2544080604534, hypergeometricDistribution1.getNumericalMean(), 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(721, 721, 721);
      hypergeometricDistribution0.sample();
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(742);
      assertEquals(0.0, double0, 0.01);
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(721, int0);
      
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(5558, 742, 721);
      hypergeometricDistribution0.getNumberOfSuccesses();
      int int1 = hypergeometricDistribution1.getSampleSize();
      assertEquals(96.2544080604534, hypergeometricDistribution1.getNumericalMean(), 0.01);
      assertEquals(721, int1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1217, 0, 0);
      hypergeometricDistribution0.cumulativeProbability(1126, 2661);
      hypergeometricDistribution0.getPopulationSize();
      double double0 = hypergeometricDistribution0.cumulativeProbability(1439);
      assertEquals(1.0, double0, 0.01);
      
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(1217, int0);
      
      hypergeometricDistribution0.solveInverseCumulativeProbability(0.0, 1217, 1126);
      hypergeometricDistribution0.getNumberOfSuccesses();
      double double1 = hypergeometricDistribution0.probability(0);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(721, 721, 721);
      int int0 = 1755;
      hypergeometricDistribution0.upperCumulativeProbability(1630);
      Well44497b well44497b0 = new Well44497b();
      RandomAdaptor randomAdaptor0 = new RandomAdaptor(well44497b0);
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(randomAdaptor0, 1755, 721, 1755);
      hypergeometricDistribution1.probability(721);
      hypergeometricDistribution1.getSupportLowerBound();
      hypergeometricDistribution1.upperCumulativeProbability(771);
      hypergeometricDistribution0.upperCumulativeProbability(1);
      hypergeometricDistribution1.calculateNumericalVariance();
      try { 
        hypergeometricDistribution1.inverseCumulativeProbability((-153.3495548104425));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -153.35 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(5558, 0, 0);
      hypergeometricDistribution0.upperCumulativeProbability(0);
      int int0 = 766;
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(766, 302, 766);
      hypergeometricDistribution1.upperCumulativeProbability((-2351));
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution1.inverseCumulativeProbability(1.0);
      hypergeometricDistribution0.solveInverseCumulativeProbability((-1.0), 302, 0);
      Well19937a well19937a0 = new Well19937a(1L);
      HypergeometricDistribution hypergeometricDistribution2 = null;
      try {
        hypergeometricDistribution2 = new HypergeometricDistribution(well19937a0, 766, 0, (-1202));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1,202)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 5558;
      int int1 = 0;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(5558, 0, 0);
      hypergeometricDistribution0.cumulativeProbability(5558);
      hypergeometricDistribution0.probability(0);
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.sample();
      int int2 = 1159;
      MersenneTwister mersenneTwister0 = new MersenneTwister(1159);
      mersenneTwister0.nextGaussian();
      try { 
        mersenneTwister0.nextLong((long) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.random.BitsStreamGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 2740;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(2325, 2740, 2740);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (2,740) must be less than or equal to population size (2,325)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(589L);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1331, 1331, 0);
      double double0 = hypergeometricDistribution0.cumulativeProbability(1331);
      assertEquals(1.0, double0, 0.01);
      
      hypergeometricDistribution0.solveInverseCumulativeProbability(1.0, 0, 0);
      hypergeometricDistribution0.calculateNumericalVariance();
      well44497a0.setSeed((-3304));
      hypergeometricDistribution0.solveInverseCumulativeProbability(0.0, 0, 0);
      hypergeometricDistribution0.getSampleSize();
      double double1 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.0, double1, 0.01);
      
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(1331, int0);
      
      double double2 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(0.0, double2, 0.01);
      assertEquals(1331, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 2;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(514, 0, 2);
      try { 
        hypergeometricDistribution0.inverseCumulativeProbability(2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 493;
      Well44497a well44497a0 = new Well44497a(493);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 609, 493, 1994);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (1,994) must be less than or equal to population size (609)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(296);
      well44497a0.clear();
      well44497a0.nextLong();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 296, 296, 296);
      well44497a0.nextBoolean();
      hypergeometricDistribution0.cumulativeProbability(1439, 1439);
      hypergeometricDistribution0.getPopulationSize();
      double double0 = hypergeometricDistribution0.cumulativeProbability(296);
      assertEquals(1.0, double0, 0.01);
      
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(296, int0);
      
      hypergeometricDistribution0.getNumberOfSuccesses();
      double double1 = hypergeometricDistribution0.cumulativeProbability(1439);
      assertEquals(1.0, double1, 0.01);
      
      double double2 = hypergeometricDistribution0.probability(296);
      assertEquals(Double.NaN, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-3186);
      intArray0[1] = 872;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = (-1224);
      ISAACRandom iSAACRandom0 = new ISAACRandom(intArray0);
      iSAACRandom0.nextInt();
      iSAACRandom0.nextDouble();
      iSAACRandom0.setSeed(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 1446, (-565), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-565)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(721, 721, 721);
      hypergeometricDistribution0.sample();
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(742);
      assertEquals(0.0, double0, 0.01);
      
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getSupportUpperBound();
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(721, int0);
      
      double double1 = hypergeometricDistribution0.upperCumulativeProbability(721);
      assertEquals(1.0, double1, 0.01);
      
      hypergeometricDistribution0.probability(0);
      double double2 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double2, 0.01);
      
      hypergeometricDistribution0.upperCumulativeProbability((-4349));
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1140, 1140, 1140);
      double double0 = hypergeometricDistribution0.cumulativeProbability((-3348), 2562);
      hypergeometricDistribution0.reseedRandomGenerator(0L);
      double double1 = hypergeometricDistribution0.upperCumulativeProbability(425);
      assertEquals(double1, double0, 0.01);
      
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.inverseCumulativeProbability(0.0);
      hypergeometricDistribution0.solveInverseCumulativeProbability(1140, 766, 1140);
      hypergeometricDistribution0.cumulativeProbability(0);
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.solveInverseCumulativeProbability(1140, (-593), 1140);
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.reseedRandomGenerator(0);
      double double2 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(1140.0, double2, 0.01);
      
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.isSupportConnected();
      assertEquals(1140, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 2145;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((-3084), 2145, 2145);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-3,084)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 326;
      Well1024a well1024a0 = new Well1024a(326);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 326, 326, 326);
      hypergeometricDistribution0.cumulativeProbability(326);
      hypergeometricDistribution0.inverseCumulativeProbability(1.0);
      try { 
        hypergeometricDistribution0.inverseCumulativeProbability(1971.080359022);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1,971.08 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 0;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(5558, 0, 0);
      hypergeometricDistribution0.upperCumulativeProbability(0);
      hypergeometricDistribution0.probability(1755);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.upperCumulativeProbability(0);
      hypergeometricDistribution0.cumulativeProbability(0);
      hypergeometricDistribution0.calculateNumericalVariance();
      try { 
        hypergeometricDistribution0.inverseCumulativeProbability((-1133.4251382287482));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,133.425 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 1087;
      int int1 = (-4507);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1087, 1087, (-4507));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-4,507)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(0);
      well44497b0.nextLong((long) 2);
      well44497b0.nextInt(2824);
      int[] intArray0 = new int[0];
      well44497b0.nextLong();
      well44497b0.setSeed(intArray0);
      well44497b0.nextFloat();
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 2, 1900, 303);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (1,900) must be less than or equal to population size (2)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom(0L);
      int int0 = (-1);
      iSAACRandom0.setSeed(0L);
      iSAACRandom0.nextGaussian();
      iSAACRandom0.nextFloat();
      iSAACRandom0.nextBoolean();
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, (-1), (-1), 1461);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-1)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 0;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      int int0 = 0;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(jDKRandomGenerator0, 0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }
}
