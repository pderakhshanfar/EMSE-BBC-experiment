/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 15:12:33 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1001, 462, 194);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(194, hypergeometricDistribution0.getSampleSize());
      assertEquals(1001, hypergeometricDistribution0.getPopulationSize());
      assertEquals(462, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(89.53846153846153, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(194);
      assertEquals(194, hypergeometricDistribution0.getSampleSize());
      assertEquals(1001, hypergeometricDistribution0.getPopulationSize());
      assertEquals(462, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(89.53846153846153, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(6.431676263975136E-78, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Well512a well512a0 = new Well512a(0L);
      assertNotNull(well512a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 990, 990, 990);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(990.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(990, hypergeometricDistribution0.getPopulationSize());
      assertEquals(990, hypergeometricDistribution0.getSampleSize());
      assertEquals(990, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(741);
      assertEquals(990.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(990, hypergeometricDistribution0.getPopulationSize());
      assertEquals(990, hypergeometricDistribution0.getSampleSize());
      assertEquals(990, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3635, 114, 0);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(3635, hypergeometricDistribution0.getPopulationSize());
      assertEquals(114, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(275);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(3635, hypergeometricDistribution0.getPopulationSize());
      assertEquals(114, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(229, 914, 914);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (914) must be less than or equal to population size (229)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(0, 199, (-2063));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1001, 462, 194);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(89.53846153846153, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(462, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1001, hypergeometricDistribution0.getPopulationSize());
      assertEquals(194, hypergeometricDistribution0.getSampleSize());
      
      double double0 = hypergeometricDistribution0.probability(194);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(89.53846153846153, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(462, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1001, hypergeometricDistribution0.getPopulationSize());
      assertEquals(194, hypergeometricDistribution0.getSampleSize());
      assertEquals(6.431676263975136E-78, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3635, 114, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(114, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3635, hypergeometricDistribution0.getPopulationSize());
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(114, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3635, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Well512a well512a0 = new Well512a(0L);
      assertNotNull(well512a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 990, 990, 990);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(990, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(990.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(990, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(990, hypergeometricDistribution0.getSampleSize());
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(990, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(990.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(990, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(990, hypergeometricDistribution0.getSampleSize());
      assertEquals(990, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      assertNotNull(mersenneTwister0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 769, 769, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(769, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(769, hypergeometricDistribution0.getPopulationSize());
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(769, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(769, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(551, 551, 551);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(551, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(551, hypergeometricDistribution0.getSampleSize());
      assertEquals(551.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(551, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(551, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(551, hypergeometricDistribution0.getSampleSize());
      assertEquals(551.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(551, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(551, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Well512a well512a0 = new Well512a(0L);
      assertNotNull(well512a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 990, 990, 990);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(990, hypergeometricDistribution0.getSampleSize());
      assertEquals(990, hypergeometricDistribution0.getPopulationSize());
      assertEquals(990, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(990.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(990, hypergeometricDistribution0.getSampleSize());
      assertEquals(990, hypergeometricDistribution0.getPopulationSize());
      assertEquals(990, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(990.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(990, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3635, 114, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3635, hypergeometricDistribution0.getPopulationSize());
      assertEquals(114, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3635, hypergeometricDistribution0.getPopulationSize());
      assertEquals(114, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1815, 1527, 1194);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1815, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1194, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1527, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1004.5388429752066, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(1815, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1194, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1527, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1004.5388429752066, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(54.56785849527542, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      assertNotNull(mersenneTwister0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 769, 769, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(769, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(769, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(769, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(769, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Well512a well512a0 = new Well512a(0L);
      assertNotNull(well512a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 990, 990, 990);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(990, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(990.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(990, hypergeometricDistribution0.getPopulationSize());
      assertEquals(990, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(990, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(990.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(990, hypergeometricDistribution0.getPopulationSize());
      assertEquals(990, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(990.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3635, 114, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(114, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3635, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(114, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3635, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(114, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      assertNotNull(mersenneTwister0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 769, 769, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(769, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(769, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(769, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(769, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2922, 1506, 1506);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1506, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1506, hypergeometricDistribution0.getSampleSize());
      assertEquals(2922, hypergeometricDistribution0.getPopulationSize());
      assertEquals(776.1930184804928, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(1506, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1506, hypergeometricDistribution0.getSampleSize());
      assertEquals(2922, hypergeometricDistribution0.getPopulationSize());
      assertEquals(776.1930184804928, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(182.34105795091213, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1001, 462, 194);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(462, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(89.53846153846153, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1001, hypergeometricDistribution0.getPopulationSize());
      assertEquals(194, hypergeometricDistribution0.getSampleSize());
      
      int int0 = hypergeometricDistribution0.sample();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(462, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(89.53846153846153, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1001, hypergeometricDistribution0.getPopulationSize());
      assertEquals(194, hypergeometricDistribution0.getSampleSize());
      assertEquals(98, int0);
      
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(98);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(268, 491, 268);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (491) must be less than or equal to population size (268)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Well512a well512a0 = new Well512a(0L);
      assertNotNull(well512a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 990, 990, 990);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(990, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(990, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(990, hypergeometricDistribution0.getSampleSize());
      assertEquals(990.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(990, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(990, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(990, hypergeometricDistribution0.getSampleSize());
      assertEquals(990.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(990, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(271);
      assertNotNull(well44497b0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 271, 0, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(271, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(271, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(271);
      assertNotNull(well44497b0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 271, 0, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(271, hypergeometricDistribution0.getPopulationSize());
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(271, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1001, 462, 194);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(462, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(89.53846153846153, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(194, hypergeometricDistribution0.getSampleSize());
      assertEquals(1001, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(462, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(89.53846153846153, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(194, hypergeometricDistribution0.getSampleSize());
      assertEquals(1001, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(98, int0);
      
      // Undeclared exception!
      hypergeometricDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(573, 573, 573);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(573, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(573.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(573, hypergeometricDistribution0.getPopulationSize());
      assertEquals(573, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(677);
      assertEquals(573, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(573.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(573, hypergeometricDistribution0.getPopulationSize());
      assertEquals(573, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(573, 573, 573);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(573, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(573, hypergeometricDistribution0.getPopulationSize());
      assertEquals(573.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(573, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(573);
      assertEquals(573, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(573, hypergeometricDistribution0.getPopulationSize());
      assertEquals(573.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(573, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(5217L);
      assertNotNull(well19937a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 785, 2, 1);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(785, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0025477707006369425, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.probability(651);
      assertEquals(785, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0025477707006369425, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Well512a well512a0 = new Well512a(0L);
      assertNotNull(well512a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 990, 990, 990);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(990.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(990, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(990, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(990, hypergeometricDistribution0.getSampleSize());
      
      double double0 = hypergeometricDistribution0.probability((-1));
      assertEquals(990.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(990, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(990, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(990, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1264, 2, 300);
      double double0 = hypergeometricDistribution0.cumulativeProbability(0);
      assertEquals(0.5815042544875073, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(573, 573, 573);
      double double0 = hypergeometricDistribution0.cumulativeProbability((-1973));
      assertEquals(573.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(271);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 271, 0, 0);
      double double0 = hypergeometricDistribution0.cumulativeProbability(0);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.0, double0, 0.01);
      assertEquals(271, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a((long) 1410);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1410, 843, 2724);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (2,724) must be less than or equal to population size (1,410)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(2, 1, (-189));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-189)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(2, (-505), 4562);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-505)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(5217L);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, (-2269), 1394, (-3443));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-2,269)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1815, 1527, 1194);
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertEquals(1004.5388429752066, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3268, 1322, 1091);
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability(1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(Integer.MAX_VALUE, Integer.MAX_VALUE, 374);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals((-1.741573215341928E-7), double0, 0.01);
  }
}
