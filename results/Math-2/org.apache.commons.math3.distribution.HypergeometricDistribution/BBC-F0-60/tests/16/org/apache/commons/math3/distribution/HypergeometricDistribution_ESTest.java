/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 15:00:01 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(273, 273, 0);
      assertEquals(273, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(273, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertEquals(273, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(273, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(927, 0, 927);
      assertEquals(927, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(927, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(927);
      assertEquals(927, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(927, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(273, 273, 0);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(273, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(273, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(0);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(273, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(273, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[2];
      MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {0, 0}, intArray0);
      assertNotNull(mersenneTwister0);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 41, 598, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (598) must be less than or equal to population size (41)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(0, (-3019), 82);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      assertNotNull(mersenneTwister0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 1398, 536, 536);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(205.5050071530758, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1398, hypergeometricDistribution0.getPopulationSize());
      assertEquals(536, hypergeometricDistribution0.getSampleSize());
      assertEquals(536, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.probability(70);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(205.5050071530758, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1398, hypergeometricDistribution0.getPopulationSize());
      assertEquals(536, hypergeometricDistribution0.getSampleSize());
      assertEquals(536, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.2100402502109012E-57, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(927, 0, 927);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(927, hypergeometricDistribution0.getSampleSize());
      assertEquals(927, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(927, hypergeometricDistribution0.getSampleSize());
      assertEquals(927, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 1031, 1020, 1020);
      assertEquals(1020, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1031, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1009.117361784675, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1020, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(1020, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1031, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1009.117361784675, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1020, hypergeometricDistribution0.getSampleSize());
      assertEquals(1020, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(927, 0, 927);
      assertEquals(927, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(927, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(927, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(927, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      assertNotNull(well44497a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1, 1, 1);
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(0);
      assertNotNull(well1024a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 363, 0, 0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(363, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(363, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(927, 0, 927);
      assertEquals(927, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(927, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(927, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(927, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      assertNotNull(well44497a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1, 1, 1);
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(0L);
      assertNotNull(mersenneTwister0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 2632, 2632, 2632);
      assertEquals(2632, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2632, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2632.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2632, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(2632, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2632, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2632.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2632, hypergeometricDistribution0.getSampleSize());
      assertEquals(2632, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(927, 0, 927);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(927, hypergeometricDistribution0.getPopulationSize());
      assertEquals(927, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(927, hypergeometricDistribution0.getPopulationSize());
      assertEquals(927, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 1031, 1020, 1020);
      assertEquals(1020, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1020, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1031, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1009.117361784675, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(1020, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1020, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1031, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1009.117361784675, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.11498234419966069, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(1385);
      assertNotNull(mersenneTwister0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 1385, 536, 536);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(207.43393501805053, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(536, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1385, hypergeometricDistribution0.getPopulationSize());
      assertEquals(536, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(2);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(207.43393501805053, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(536, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1385, hypergeometricDistribution0.getPopulationSize());
      assertEquals(536, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.0000000000000002, double0, 0.01);
      
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability(2);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(1);
      assertNotNull(well44497b0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(951, 951, 1);
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(951, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(951, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      Well44497a well44497a0 = new Well44497a();
      assertNotNull(well44497a0);
      
      hypergeometricDistribution0.reseedRandomGenerator((-2132L));
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(951, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(951, hypergeometricDistribution0.getPopulationSize());
      
      well44497a0.setSeed((-166));
      Well44497a well44497a1 = new Well44497a(232);
      assertNotNull(well44497a1);
      assertFalse(well44497a1.equals((Object)well44497a0));
      
      int[] intArray0 = new int[3];
      well44497a1.setSeed(intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertNotSame(well44497a1, well44497a0);
      assertFalse(well44497a1.equals((Object)well44497a0));
      
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(17, 927, (-2212));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(927, 0, 927);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(927, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(927, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.probability(0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(927, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(927, hypergeometricDistribution0.getSampleSize());
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(273, 273, 0);
      assertEquals(273, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(273, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(273, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(273, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(273, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(927, 0, 927);
      assertEquals(927, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(927, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(927, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(927, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(927, 0, 927);
      assertEquals(927, hypergeometricDistribution0.getPopulationSize());
      assertEquals(927, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(927, hypergeometricDistribution0.getPopulationSize());
      assertEquals(927, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(927, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(0);
      assertNotNull(well1024a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 363, 0, 14);
      assertEquals(363, hypergeometricDistribution0.getPopulationSize());
      assertEquals(14, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(363, hypergeometricDistribution0.getPopulationSize());
      assertEquals(14, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double0, 0.01);
      
      double double1 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(363, hypergeometricDistribution0.getPopulationSize());
      assertEquals(14, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(1398);
      assertNotNull(mersenneTwister0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 1398, 536, 536);
      assertEquals(536, hypergeometricDistribution0.getSampleSize());
      assertEquals(1398, hypergeometricDistribution0.getPopulationSize());
      assertEquals(205.5050071530758, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(536, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(536);
      assertEquals(536, hypergeometricDistribution0.getSampleSize());
      assertEquals(1398, hypergeometricDistribution0.getPopulationSize());
      assertEquals(205.5050071530758, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(536, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(1398);
      assertNotNull(mersenneTwister0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 1398, 536, 536);
      assertEquals(1398, hypergeometricDistribution0.getPopulationSize());
      assertEquals(205.5050071530758, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(536, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(536, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability((-491));
      assertEquals(1398, hypergeometricDistribution0.getPopulationSize());
      assertEquals(205.5050071530758, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(536, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(536, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(1398);
      assertNotNull(mersenneTwister0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 1398, 536, 536);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(536, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(205.5050071530758, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1398, hypergeometricDistribution0.getPopulationSize());
      assertEquals(536, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(659);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(536, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(205.5050071530758, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1398, hypergeometricDistribution0.getPopulationSize());
      assertEquals(536, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(273, 273, 0);
      assertEquals(273, hypergeometricDistribution0.getPopulationSize());
      assertEquals(273, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.probability(273);
      assertEquals(273, hypergeometricDistribution0.getPopulationSize());
      assertEquals(273, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(1398);
      assertNotNull(mersenneTwister0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 1398, 536, 536);
      assertEquals(536, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(536, hypergeometricDistribution0.getSampleSize());
      assertEquals(205.5050071530758, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1398, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.probability((-4240));
      assertEquals(536, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(536, hypergeometricDistribution0.getSampleSize());
      assertEquals(205.5050071530758, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1398, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(0);
      assertNotNull(well1024a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 363, 0, 14);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(14, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(363, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.cumulativeProbability((-548));
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(14, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(363, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1051, 0, 1141);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (1,141) must be less than or equal to population size (1,051)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      assertNotNull(well44497b0);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 698, 2238, (-62));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-62)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(337, (-2641), 337);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-2,641)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((-1873), 1398, 1398);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-1,873)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(1398);
      assertNotNull(mersenneTwister0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 1398, 536, 536);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(536, hypergeometricDistribution0.getSampleSize());
      assertEquals(536, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1398, hypergeometricDistribution0.getPopulationSize());
      assertEquals(205.5050071530758, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(536, hypergeometricDistribution0.getSampleSize());
      assertEquals(536, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1398, hypergeometricDistribution0.getPopulationSize());
      assertEquals(205.5050071530758, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(1398);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 1398, 536, 536);
      // Undeclared exception!
      hypergeometricDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 3442, 952, 952);
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(808);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 3442, 952, 952);
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(137.83711875233877, double0, 0.01);
  }
}
