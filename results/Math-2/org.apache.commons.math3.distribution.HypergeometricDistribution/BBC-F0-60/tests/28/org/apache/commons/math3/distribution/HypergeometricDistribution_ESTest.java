/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 15:21:50 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomAdaptor;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(44497, 2030, 455);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(20.757579162640177, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2030, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(455, hypergeometricDistribution0.getSampleSize());
      assertEquals(44497, hypergeometricDistribution0.getPopulationSize());
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(20.757579162640177, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2030, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(455, hypergeometricDistribution0.getSampleSize());
      assertEquals(44497, hypergeometricDistribution0.getPopulationSize());
      assertEquals(19.60846576936202, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(351, 157, 157);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(70.22507122507122, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(157, hypergeometricDistribution0.getSampleSize());
      assertEquals(157, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(351, hypergeometricDistribution0.getPopulationSize());
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(157);
      assertEquals(70.22507122507122, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(157, hypergeometricDistribution0.getSampleSize());
      assertEquals(157, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(351, hypergeometricDistribution0.getPopulationSize());
      assertEquals(3.594050564475375E-104, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(282, 282, 282);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(282.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(282, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(282, hypergeometricDistribution0.getSampleSize());
      assertEquals(282, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability((-1));
      assertEquals(282.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(282, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(282, hypergeometricDistribution0.getSampleSize());
      assertEquals(282, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(282, 282, 282);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(282, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(282, hypergeometricDistribution0.getPopulationSize());
      assertEquals(282.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(282, hypergeometricDistribution0.getSampleSize());
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(282, 282);
      assertEquals(282, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(282, hypergeometricDistribution0.getPopulationSize());
      assertEquals(282.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(282, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(0, 0, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(351, 157, 157);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(351, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(70.22507122507122, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(157, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(157, hypergeometricDistribution0.getSampleSize());
      
      double double0 = hypergeometricDistribution0.probability(157);
      assertEquals(351, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(70.22507122507122, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(157, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(157, hypergeometricDistribution0.getSampleSize());
      assertEquals(3.594050564475375E-104, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1084, 1084, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1084, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1084, hypergeometricDistribution0.getPopulationSize());
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(1084, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1084, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      RandomAdaptor randomAdaptor0 = new RandomAdaptor((RandomGenerator) null);
      assertNotNull(randomAdaptor0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(randomAdaptor0, 911, 0, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(911, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(911, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(282, 282, 282);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(282.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(282, hypergeometricDistribution0.getPopulationSize());
      assertEquals(282, hypergeometricDistribution0.getSampleSize());
      assertEquals(282, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(282.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(282, hypergeometricDistribution0.getPopulationSize());
      assertEquals(282, hypergeometricDistribution0.getSampleSize());
      assertEquals(282, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(282, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(157, 157, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(157, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(157, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(157, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(157, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(282, 282, 282);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(282, hypergeometricDistribution0.getPopulationSize());
      assertEquals(282, hypergeometricDistribution0.getSampleSize());
      assertEquals(282.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(282, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(282, hypergeometricDistribution0.getPopulationSize());
      assertEquals(282, hypergeometricDistribution0.getSampleSize());
      assertEquals(282.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(282, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      RandomAdaptor randomAdaptor0 = new RandomAdaptor((RandomGenerator) null);
      assertNotNull(randomAdaptor0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(randomAdaptor0, 911, 0, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(911, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(911, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(282, 282, 282);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(282, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(282.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(282, hypergeometricDistribution0.getSampleSize());
      assertEquals(282, hypergeometricDistribution0.getPopulationSize());
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(282, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(282.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(282, hypergeometricDistribution0.getSampleSize());
      assertEquals(282, hypergeometricDistribution0.getPopulationSize());
      assertEquals(282, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(282, 282, 282);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(282.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(282, hypergeometricDistribution0.getPopulationSize());
      assertEquals(282, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(282, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(282.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(282, hypergeometricDistribution0.getPopulationSize());
      assertEquals(282, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(282, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(351, 157, 157);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(157, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(351, hypergeometricDistribution0.getPopulationSize());
      assertEquals(70.22507122507122, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(157, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(157, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(351, hypergeometricDistribution0.getPopulationSize());
      assertEquals(70.22507122507122, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(157, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(21.513966468268464, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(1625L);
      assertNotNull(mersenneTwister0);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 282, 282, 1073);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (1,073) must be less than or equal to population size (282)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(282, 282, 282);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(282, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(282, hypergeometricDistribution0.getPopulationSize());
      assertEquals(282.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(282, hypergeometricDistribution0.getSampleSize());
      
      double double0 = hypergeometricDistribution0.probability(282);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(282, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(282, hypergeometricDistribution0.getPopulationSize());
      assertEquals(282.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(282, hypergeometricDistribution0.getSampleSize());
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(351, 157, 157);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(351, hypergeometricDistribution0.getPopulationSize());
      assertEquals(157, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(70.22507122507122, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(157, hypergeometricDistribution0.getSampleSize());
      
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(351, hypergeometricDistribution0.getPopulationSize());
      assertEquals(157, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(70.22507122507122, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(157, hypergeometricDistribution0.getSampleSize());
      assertEquals(351, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1120, 0, 276);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(276, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1120, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(276, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1120, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(351, 157, 157);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(70.22507122507122, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(351, hypergeometricDistribution0.getPopulationSize());
      assertEquals(157, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(157, hypergeometricDistribution0.getSampleSize());
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(70.22507122507122, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(351, hypergeometricDistribution0.getPopulationSize());
      assertEquals(157, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(157, hypergeometricDistribution0.getSampleSize());
      assertEquals(157, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(351, 157, 157);
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(76, int0);
      
      int int1 = hypergeometricDistribution0.sample();
      assertEquals(70.22507122507122, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(72, int1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      RandomAdaptor randomAdaptor0 = new RandomAdaptor((RandomGenerator) null);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(randomAdaptor0, 911, 0, 0);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(1487);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double0, 0.01);
      assertEquals(911, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(351, 157, 157);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertEquals(70.22507122507122, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1120, 0, 276);
      double double0 = hypergeometricDistribution0.probability(2177);
      assertEquals(1120, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double0, 0.01);
      assertEquals(276, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(282, 282, 282);
      double double0 = hypergeometricDistribution0.probability(0);
      assertEquals(282.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(351, 157, 157);
      double double0 = hypergeometricDistribution0.cumulativeProbability(0);
      assertEquals(2.959025663309257E-64, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(351, 157, 157);
      double double0 = hypergeometricDistribution0.cumulativeProbability((-1629));
      assertEquals(70.22507122507122, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(351, 157, 157);
      double double0 = hypergeometricDistribution0.cumulativeProbability(1426);
      assertEquals(1.0, double0, 0.01);
      assertEquals(70.22507122507122, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1460, 186, 2202);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (2,202) must be less than or equal to population size (1,460)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(157, 891, 1478);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (891) must be less than or equal to population size (157)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1205, 1205, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int[] intArray0 = new int[2];
      Well512a well512a0 = new Well512a(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 2, (-1679), (-278));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-1,679)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((-161), 1218, 1218);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-161)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(351, 157, 157);
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(70.22507122507122, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(157, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(351, 157, 157);
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertEquals(70.22507122507122, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(351, 157, 157);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(70.22507122507122, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3161, 1245, 1245);
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability(117);
  }
}
