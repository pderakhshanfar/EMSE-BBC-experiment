/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 20:41:19 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497b;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1791, 1791, 1791);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(1791);
      assertEquals(1791.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1791, 1791, 1791);
      double double0 = hypergeometricDistribution0.cumulativeProbability(307, 1791);
      assertEquals(1791.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1280, 305, 2);
      int int0 = hypergeometricDistribution0.inverseCumulativeProbability(Double.NaN);
      assertEquals(0.4765625, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(0L);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1280, 764, 2);
      double double0 = hypergeometricDistribution0.probability(2);
      assertEquals(0.35607163799843616, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2018, 2018, 0);
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(2018, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, int0);
      assertEquals(2018, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1268, 454, 764);
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(273.54574132492115, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(454, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1280, 305, 2);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(0.4765625, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1379, 1379, 1379);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(1379, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[4];
      MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 450, 450, 450);
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(450.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(450, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4588, 4588, 4588);
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      assertEquals(4588.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1280, 764, 2);
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.4808542134968726, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[0];
      Well19937c well19937c0 = new Well19937c(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 2, 2, 0);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4588, 4588, 4588);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(4588.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 2194, 853, 853);
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(331.6358249772106, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(853, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[0];
      Well19937c well19937c0 = new Well19937c(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 2, 2, 0);
      double double0 = hypergeometricDistribution0.cumulativeProbability((-1233));
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1280, 764, 2);
      double double0 = hypergeometricDistribution0.cumulativeProbability(1280);
      assertEquals(1.19375, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1791, 1791, 1791);
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(1791.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1280, 764, 2);
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.4808542134968726, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[8];
      Well44497b well44497b0 = new Well44497b(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 2509, 1586, 1150);
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability(377);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 2194, 853, 853);
      double double0 = hypergeometricDistribution0.cumulativeProbability(756);
      assertEquals(853, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 2194, 853, 853);
      double double0 = hypergeometricDistribution0.probability(756);
      assertEquals(0.0, double0, 0.01);
      assertEquals(331.6358249772106, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 2194, 853, 853);
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(331.6358249772106, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2194, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(51, 0, 51);
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(51, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(51, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int[] intArray0 = new int[0];
      Well19937c well19937c0 = new Well19937c(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 2, 2, 0);
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 2194, 853, 853);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(2995);
      assertEquals(0.0, double0, 0.01);
      assertEquals(331.6358249772106, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1379, 1379, 1379);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability((-1953));
      assertEquals(1.0, double0, 0.01);
      assertEquals(1379.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1280, 764, 2);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(2);
      assertEquals(0.35607163799843616, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1379, 1379, 1379);
      double double0 = hypergeometricDistribution0.probability(1509);
      assertEquals(1379.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1379, 1379, 1379);
      double double0 = hypergeometricDistribution0.probability((-164));
      assertEquals(0.0, double0, 0.01);
      assertEquals(1379.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(2);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 2, 0, 1280);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (1,280) must be less than or equal to population size (2)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1709, 1784, 14);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (1,784) must be less than or equal to population size (1,709)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(56, 0, (-2676));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-2,676)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(2, (-1844), (-1570));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-1,844)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, (-2366), (-1872), 918);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-2,366)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int[] intArray0 = new int[4];
      MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 450, 450, 450);
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertEquals(450.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1280, 764, 2);
      int int0 = hypergeometricDistribution0.sample();
      int int1 = hypergeometricDistribution0.sample();
      assertFalse(int1 == int0);
      assertEquals(1.19375, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, int1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(8388607, 8388607, 8388607);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals((-2.0000001192093038), double0, 0.01);
  }
}
