/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 20:29:56 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.SynchronizedRandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      System.setCurrentTimeMillis(598L);
      Well1024a well1024a0 = new Well1024a(598L);
      well1024a0.nextInt();
      well1024a0.setSeed(3332);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 3332, 3332, 531);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getPopulationSize();
      int[] intArray0 = new int[4];
      intArray0[0] = 3332;
      intArray0[1] = 3332;
      intArray0[2] = 3332;
      hypergeometricDistribution0.reseedRandomGenerator(531);
      intArray0[3] = (-816767119);
      well1024a0.setSeed(intArray0);
      well1024a0.nextLong((long) 531);
      hypergeometricDistribution0.cumulativeProbability(531, 2391);
      hypergeometricDistribution0.sample(3332);
      well1024a0.nextDouble();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.cumulativeProbability(3332);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.isSupportConnected();
      // Undeclared exception!
      hypergeometricDistribution0.getNumericalMean();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      System.setCurrentTimeMillis(598L);
      Well1024a well1024a0 = new Well1024a(598L);
      well1024a0.nextInt();
      well1024a0.setSeed(3332);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 3332, 3332, 531);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getPopulationSize();
      int[] intArray0 = new int[4];
      intArray0[0] = 3332;
      intArray0[1] = 3332;
      intArray0[2] = 3332;
      hypergeometricDistribution0.reseedRandomGenerator(531);
      intArray0[3] = (-816767119);
      well1024a0.setSeed(intArray0);
      well1024a0.nextLong((long) 531);
      hypergeometricDistribution0.cumulativeProbability(531, 2391);
      hypergeometricDistribution0.sample(3332);
      well1024a0.nextDouble();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.cumulativeProbability(3332);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.probability(3332);
      // Undeclared exception!
      hypergeometricDistribution0.getSampleSize();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      System.setCurrentTimeMillis(598L);
      Well1024a well1024a0 = new Well1024a();
      well1024a0.nextInt();
      well1024a0.setSeed(3332);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 3332, 3332, 531);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getPopulationSize();
      int[] intArray0 = new int[4];
      intArray0[0] = 3332;
      intArray0[1] = 3332;
      intArray0[2] = 3332;
      hypergeometricDistribution0.reseedRandomGenerator(531);
      intArray0[3] = 944134050;
      well1024a0.setSeed(intArray0);
      well1024a0.nextLong((long) 531);
      hypergeometricDistribution0.cumulativeProbability(531, 2391);
      hypergeometricDistribution0.sample(3332);
      well1024a0.nextDouble();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.cumulativeProbability(3332);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.isSupportConnected();
      // Undeclared exception!
      hypergeometricDistribution0.calculateNumericalVariance();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      System.setCurrentTimeMillis(598L);
      Well1024a well1024a0 = new Well1024a();
      well1024a0.nextInt();
      well1024a0.setSeed(3332);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 3332, 3332, 531);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getPopulationSize();
      int[] intArray0 = new int[4];
      intArray0[0] = 3332;
      intArray0[1] = 3332;
      intArray0[2] = 3332;
      intArray0[3] = 944134050;
      well1024a0.setSeed(intArray0);
      well1024a0.nextDouble();
      well1024a0.nextLong((long) 531);
      hypergeometricDistribution0.cumulativeProbability(531, 2391);
      hypergeometricDistribution0.sample(3332);
      well1024a0.nextDouble();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.cumulativeProbability(3332);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.isSupportConnected();
      // Undeclared exception!
      hypergeometricDistribution0.getSupportUpperBound();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator((RandomGenerator) null);
      int int0 = 461;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 3299, 1036, 850);
      int int1 = 1399;
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(461);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(8388554, 8388554, 8388554);
      hypergeometricDistribution0.getNumericalMean();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(6754, 3564, 3564);
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability(1346);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      System.setCurrentTimeMillis(598L);
      Well1024a well1024a0 = new Well1024a();
      well1024a0.nextInt();
      well1024a0.setSeed(3332);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 3332, 3332, 531);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getPopulationSize();
      int[] intArray0 = new int[4];
      intArray0[0] = 944134050;
      intArray0[1] = 3332;
      intArray0[2] = 3332;
      intArray0[3] = 944134050;
      well1024a0.setSeed(intArray0);
      well1024a0.nextLong((long) 531);
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.sample(3332);
      well1024a0.nextDouble();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.cumulativeProbability(3332);
      // Undeclared exception!
      hypergeometricDistribution0.getSupportLowerBound();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      System.setCurrentTimeMillis(598L);
      Well1024a well1024a0 = new Well1024a();
      well1024a0.nextInt();
      well1024a0.setSeed(3332);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 3332, 3332, 531);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getPopulationSize();
      int[] intArray0 = new int[4];
      intArray0[0] = 3332;
      intArray0[1] = 3332;
      intArray0[2] = 3332;
      intArray0[3] = 944134050;
      well1024a0.setSeed(intArray0);
      well1024a0.nextLong((long) 531);
      hypergeometricDistribution0.cumulativeProbability(531, 2391);
      hypergeometricDistribution0.sample(3332);
      well1024a0.nextDouble();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.cumulativeProbability(3332);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.isSupportConnected();
      // Undeclared exception!
      hypergeometricDistribution0.getNumberOfSuccesses();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4815, 0, 0);
      hypergeometricDistribution0.getNumberOfSuccesses();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3154, 0, 0);
      hypergeometricDistribution0.upperCumulativeProbability((-2192));
      hypergeometricDistribution0.solveInverseCumulativeProbability((-2192), 212, 1903);
      hypergeometricDistribution0.reseedRandomGenerator(0L);
      hypergeometricDistribution0.upperCumulativeProbability(218);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.cumulativeProbability(669);
      System.setCurrentTimeMillis(0);
      hypergeometricDistribution0.upperCumulativeProbability(3154);
      hypergeometricDistribution0.getNumericalMean();
      Random.setNextRandom(0);
      Random.setNextRandom(0);
      hypergeometricDistribution0.upperCumulativeProbability(5036);
      hypergeometricDistribution0.getSupportUpperBound();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator((RandomGenerator) null);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 3299, 1036, 850);
      int int0 = 1399;
      hypergeometricDistribution0.upperCumulativeProbability(1399);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.upperCumulativeProbability(461);
      int int1 = (-398);
      // Undeclared exception!
      hypergeometricDistribution0.solveInverseCumulativeProbability(2164.5, (-398), 1403);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator((RandomGenerator) null);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(synchronizedRandomGenerator0, 850, 461, 461);
      hypergeometricDistribution0.upperCumulativeProbability(461);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.upperCumulativeProbability((-547));
      hypergeometricDistribution0.solveInverseCumulativeProbability(1.2794996377383974E-8, 850, 461);
      hypergeometricDistribution0.solveInverseCumulativeProbability(1.0274705017906923E-253, 850, 4247);
      hypergeometricDistribution0.solveInverseCumulativeProbability(1.2794996377383974E-8, (-423), 0);
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.upperCumulativeProbability(460);
      HypergeometricDistribution hypergeometricDistribution1 = null;
      try {
        hypergeometricDistribution1 = new HypergeometricDistribution(850, 851, (-605));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-605)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator((RandomGenerator) null);
      int int0 = 461;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(synchronizedRandomGenerator0, 1847, 461, 461);
      hypergeometricDistribution0.upperCumulativeProbability(461);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.solveInverseCumulativeProbability(1.2794996377383974E-8, 1847, 461);
      hypergeometricDistribution0.calculateNumericalVariance();
      int int1 = 644;
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution((RandomGenerator) null, 644, 644, 461);
      HypergeometricDistribution hypergeometricDistribution2 = null;
      try {
        hypergeometricDistribution2 = new HypergeometricDistribution(461, 2036, 461);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (2,036) must be less than or equal to population size (461)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1968, 1167, 1968);
      hypergeometricDistribution0.reseedRandomGenerator(0L);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.solveInverseCumulativeProbability(1167, 1968, 0);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(1375);
      assertEquals(0.0, double0, 0.01);
      
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.solveInverseCumulativeProbability(1167, 1167, 1167);
      hypergeometricDistribution0.calculateNumericalVariance();
      double double1 = hypergeometricDistribution0.cumulativeProbability(1167);
      hypergeometricDistribution0.probability((-913));
      double double2 = hypergeometricDistribution0.cumulativeProbability(0);
      hypergeometricDistribution0.getSupportLowerBound();
      double double3 = hypergeometricDistribution0.upperCumulativeProbability((-913));
      assertEquals(double3, double1, 0.01);
      
      hypergeometricDistribution0.calculateNumericalVariance();
      double double4 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(1167.0, double4, 0.01);
      
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      
      hypergeometricDistribution0.calculateNumericalVariance();
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(1167, 431, 968);
      double double5 = hypergeometricDistribution1.probability(968);
      assertEquals(double5, double2, 0.01);
      
      int int0 = hypergeometricDistribution1.inverseCumulativeProbability(0.0);
      assertEquals(232, int0);
      
      double double6 = hypergeometricDistribution1.cumulativeProbability(232);
      assertEquals(6.546046058074331E-103, double6, 0.01);
      
      double double7 = hypergeometricDistribution1.calculateNumericalVariance();
      assertEquals(38.48072587635179, double7, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator((RandomGenerator) null);
      int int0 = 850;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(synchronizedRandomGenerator0, 850, 461, 461);
      hypergeometricDistribution0.upperCumulativeProbability(461);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.solveInverseCumulativeProbability(1.2794996377383974E-8, 850, 461);
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.calculateNumericalVariance();
      int int1 = 669;
      HypergeometricDistribution hypergeometricDistribution1 = null;
      try {
        hypergeometricDistribution1 = new HypergeometricDistribution((RandomGenerator) null, 850, 669, 1167);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (1,167) must be less than or equal to population size (850)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(544, 544, 544);
      hypergeometricDistribution0.cumulativeProbability(544);
      hypergeometricDistribution0.solveInverseCumulativeProbability(544, 544, 544);
      hypergeometricDistribution0.inverseCumulativeProbability(1.0);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.upperCumulativeProbability(0);
      hypergeometricDistribution0.inverseCumulativeProbability(0);
      hypergeometricDistribution0.cumulativeProbability(1044);
      hypergeometricDistribution0.cumulativeProbability(0);
      hypergeometricDistribution0.reseedRandomGenerator(0);
      hypergeometricDistribution0.cumulativeProbability(1);
      hypergeometricDistribution0.cumulativeProbability((-2935));
      hypergeometricDistribution0.cumulativeProbability(0, 0);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.upperCumulativeProbability(544);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.solveInverseCumulativeProbability(1.0, 544, 0);
      hypergeometricDistribution0.probability(544);
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.getNumberOfSuccesses();
      Random.setNextRandom(2161);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1968, 1167, 1968);
      hypergeometricDistribution0.reseedRandomGenerator(0L);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.solveInverseCumulativeProbability(1167, 1968, 0);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(1375);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.solveInverseCumulativeProbability(1167, 1167, 1167);
      hypergeometricDistribution0.calculateNumericalVariance();
      double double1 = hypergeometricDistribution0.cumulativeProbability(1167);
      assertEquals(1.0, double1, 0.01);
      
      hypergeometricDistribution0.probability((-913));
      double double2 = hypergeometricDistribution0.cumulativeProbability(0);
      assertEquals(double2, double0, 0.01);
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(1167, int0);
      
      hypergeometricDistribution0.upperCumulativeProbability((-913));
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.calculateNumericalVariance();
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(1167, 431, 968);
      double double3 = hypergeometricDistribution1.getNumericalVariance();
      assertEquals(38.48072587635179, double3, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1968, 1156, 1968);
      hypergeometricDistribution0.reseedRandomGenerator(0L);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.solveInverseCumulativeProbability(1156, 1968, 0);
      hypergeometricDistribution0.sample();
      HypergeometricDistribution hypergeometricDistribution1 = null;
      try {
        hypergeometricDistribution1 = new HypergeometricDistribution(710, 2537, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (2,537) must be less than or equal to population size (710)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 850, 1, 0);
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      
      hypergeometricDistribution0.getSupportUpperBound();
      double double1 = hypergeometricDistribution0.cumulativeProbability(456);
      assertEquals(1.0, double1, 0.01);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(850, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(544, 544, 544);
      double double0 = hypergeometricDistribution0.cumulativeProbability(544);
      hypergeometricDistribution0.solveInverseCumulativeProbability(544, 544, 544);
      hypergeometricDistribution0.inverseCumulativeProbability(1.0);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.upperCumulativeProbability(0);
      hypergeometricDistribution0.inverseCumulativeProbability(0);
      double double1 = hypergeometricDistribution0.cumulativeProbability(1044);
      assertEquals(1.0, double1, 0.01);
      
      hypergeometricDistribution0.cumulativeProbability(0);
      hypergeometricDistribution0.reseedRandomGenerator(0);
      hypergeometricDistribution0.cumulativeProbability(1);
      hypergeometricDistribution0.cumulativeProbability((-2935));
      hypergeometricDistribution0.cumulativeProbability(0, 0);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getSupportLowerBound();
      double double2 = hypergeometricDistribution0.upperCumulativeProbability(544);
      assertEquals(double2, double0, 0.01);
      
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.solveInverseCumulativeProbability(1.0, 544, 0);
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.cumulativeProbability(0);
      double double3 = hypergeometricDistribution0.probability((-81));
      double double4 = hypergeometricDistribution0.cumulativeProbability(0);
      assertEquals(0.0, double4, 0.01);
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(544, int0);
      
      double double5 = hypergeometricDistribution0.upperCumulativeProbability(2161);
      assertEquals(double5, double3, 0.01);
      
      hypergeometricDistribution0.calculateNumericalVariance();
      double double6 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(544.0, double6, 0.01);
      
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      
      hypergeometricDistribution0.calculateNumericalVariance();
      double double7 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double7, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1968, 1156, 1968);
      hypergeometricDistribution0.reseedRandomGenerator(0L);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.solveInverseCumulativeProbability(1156, 1968, 0);
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.probability(1156);
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.getNumberOfSuccesses();
      Random.setNextRandom(0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 1968;
      int int1 = 2830;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1968, 2830, 1968);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (2,830) must be less than or equal to population size (1,968)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 2;
      intArray0[1] = 1126;
      intArray0[2] = 0;
      intArray0[3] = 884;
      intArray0[4] = (-1305);
      intArray0[5] = 341;
      intArray0[6] = 0;
      Well19937c well19937c0 = new Well19937c(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 417, 394, 1426);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (1,426) must be less than or equal to population size (417)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 2024, 0, 0);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.cumulativeProbability(2024, 2024);
      hypergeometricDistribution0.getSupportUpperBound();
      try { 
        hypergeometricDistribution0.inverseCumulativeProbability(2024);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2,024 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(406, 406, 406);
      int int0 = 0;
      hypergeometricDistribution0.probability(0);
      hypergeometricDistribution0.cumulativeProbability(406);
      hypergeometricDistribution0.reseedRandomGenerator(4499201580859392L);
      hypergeometricDistribution0.reseedRandomGenerator(0L);
      int int1 = 0;
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.solveInverseCumulativeProbability(4499201580859392L, 360, 0);
      hypergeometricDistribution0.cumulativeProbability(0, 0);
      hypergeometricDistribution0.reseedRandomGenerator((-1026L));
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.probability(794);
      try { 
        hypergeometricDistribution0.cumulativeProbability((-1), (-1908));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lower endpoint (-1) must be less than or equal to upper endpoint (-1,908)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 248;
      Well44497a well44497a0 = new Well44497a(248);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 248, 248, 248);
      int int1 = 0;
      try { 
        hypergeometricDistribution0.cumulativeProbability(248, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lower endpoint (248) must be less than or equal to upper endpoint (0)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 625;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(625, 625, (-3049));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-3,049)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 885;
      intArray0[1] = 1174;
      intArray0[2] = 0;
      ISAACRandom iSAACRandom0 = new ISAACRandom(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 885, 885, 1174);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (1,174) must be less than or equal to population size (885)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 845;
      int int1 = 1376;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(845, 845, 1376);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (1,376) must be less than or equal to population size (845)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(544, 544, 544);
      hypergeometricDistribution0.cumulativeProbability(544);
      hypergeometricDistribution0.solveInverseCumulativeProbability(544, 544, 544);
      hypergeometricDistribution0.inverseCumulativeProbability(1.0);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getNumericalVariance();
      int int0 = 0;
      hypergeometricDistribution0.upperCumulativeProbability(0);
      hypergeometricDistribution0.inverseCumulativeProbability(0);
      hypergeometricDistribution0.cumulativeProbability(1044);
      hypergeometricDistribution0.cumulativeProbability(0);
      hypergeometricDistribution0.reseedRandomGenerator(0);
      hypergeometricDistribution0.cumulativeProbability(1);
      hypergeometricDistribution0.cumulativeProbability((-2935));
      hypergeometricDistribution0.cumulativeProbability(0, 0);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.upperCumulativeProbability(544);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.solveInverseCumulativeProbability(1.0, 544, 0);
      hypergeometricDistribution0.calculateNumericalVariance();
      // Undeclared exception!
      try { 
        hypergeometricDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 2;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2, 2, 2);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.solveInverseCumulativeProbability(0.0, 2, 1355);
      try { 
        hypergeometricDistribution0.cumulativeProbability(2281, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lower endpoint (2,281) must be less than or equal to upper endpoint (0)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 3063;
      int int1 = (-845);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 3063, (-845), 1157);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-845)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 0;
      int int1 = 147;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(0, 147, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = (-1029);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, (-1029), (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-1,029)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }
}
