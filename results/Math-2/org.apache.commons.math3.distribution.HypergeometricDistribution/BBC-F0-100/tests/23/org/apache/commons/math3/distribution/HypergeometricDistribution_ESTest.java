/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 07 01:01:18 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomAdaptor;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(191, 0, 100);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertEquals(191, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
      assertEquals(100, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(167, 0, 167);
      double double0 = hypergeometricDistribution0.cumulativeProbability(0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(167, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.0, double0, 0.01);
      assertEquals(167, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1093, 1, 1);
      double double0 = hypergeometricDistribution0.cumulativeProbability(0, 0);
      assertEquals(9.149130832570906E-4, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b((-697));
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 1848, 1100, 2);
      double double0 = hypergeometricDistribution0.probability(2);
      assertEquals(0.35417794621909404, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(191, 0, 100);
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(191, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, int0);
      assertEquals(100, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b((-697));
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 1848, 1100, 2);
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(1.1904761904761905, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(167, 0, 167);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(0, int0);
      assertEquals(167, hypergeometricDistribution0.getSampleSize());
      assertEquals(167, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1093, 1093, 1093);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(1093, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(181, 0, 0);
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(181, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, int0);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(181, 0, 0);
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(181, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(191, 0, 100);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(100, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double0, 0.01);
      assertEquals(191, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(167, 0, 167);
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(167, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(167, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1093, 1093, 1093);
      double double0 = hypergeometricDistribution0.cumulativeProbability((-4693));
      assertEquals(0.0, double0, 0.01);
      assertEquals(1093.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4799, 244, 4799);
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(244, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(6114, 1091, 2639);
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability(2);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(5648769086999809661L);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 3488, 906, 906);
      double double0 = hypergeometricDistribution0.probability(840);
      assertEquals(235.33142201834863, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4799, 244, 4799);
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(244.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(4799, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b((-697));
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 1848, 1100, 2);
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(1.1904761904761905, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1100, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1071, 1071, 1071);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(1102);
      assertEquals(1071.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4799, 244, 4799);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertEquals(244.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b((-697));
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 1848, 1100, 2);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(2);
      assertEquals(0.35417794621909404, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[1];
      MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 2, 2, 2);
      double double0 = hypergeometricDistribution0.probability(81);
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b((-697));
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 1848, 1100, 2);
      double double0 = hypergeometricDistribution0.cumulativeProbability(1233);
      assertEquals(1.0, double0, 0.01);
      assertEquals(1.1904761904761905, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(5648769086999809661L);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 3488, 906, 906);
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(840);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int[] intArray0 = new int[2];
      Well512a well512a0 = new Well512a(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 560, 0, 1396);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (1,396) must be less than or equal to population size (560)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(2, 248, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (248) must be less than or equal to population size (2)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 762, 784, (-1338));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1,338)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom((-121L));
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 246, (-1882), (-235));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-1,882)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(34L);
      RandomAdaptor randomAdaptor0 = new RandomAdaptor(well19937c0);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(randomAdaptor0, (-1), 714, 292);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-1)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b((-697));
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 1848, 1100, 2);
      hypergeometricDistribution0.sample();
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.4815985228236756, double0, 0.01);
      assertEquals(1.1904761904761905, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b((-697));
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 1848, 1100, 2);
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertEquals(1.1904761904761905, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(5648769086999809661L);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 3488, 906, 906);
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(128.9923548872757, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(6114, 1091, 2639);
      double double0 = hypergeometricDistribution0.probability((-3728));
      assertEquals(470.91086032057575, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(6114, 1091, 2639);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(470.91086032057575, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(6114, 1091, 2639);
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(470.91086032057575, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2639, int0);
  }
}
