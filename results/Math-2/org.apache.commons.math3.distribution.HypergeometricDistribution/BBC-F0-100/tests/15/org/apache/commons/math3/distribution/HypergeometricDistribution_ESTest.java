/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 20:29:06 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1098, 1, 1);
      hypergeometricDistribution0.upperCumulativeProbability(1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 968, 968, 23);
      hypergeometricDistribution0.upperCumulativeProbability(23);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(0, 717, 717);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 968, 968, 23);
      hypergeometricDistribution0.getSupportUpperBound();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(727, 727, 1);
      hypergeometricDistribution0.getSupportLowerBound();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 968, 968, 23);
      hypergeometricDistribution0.getSampleSize();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(727, 727, 1);
      hypergeometricDistribution0.getNumericalVariance();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(727, 727, 1);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 968, 968, 23);
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(23.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(968, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(727, 727, 1);
      double double0 = hypergeometricDistribution0.cumulativeProbability(540);
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(727, 727, 1);
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(452, 426, 130);
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(5.031862435683427, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2976, 1316, 1316);
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability(20);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, (-247), 0, (-2144));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-247)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[6];
      Well44497b well44497b0 = new Well44497b(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 792, 4174, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (4,174) must be less than or equal to population size (792)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1098, 32, 32);
      double double0 = hypergeometricDistribution0.probability(32);
      assertEquals(2.084415742947493E-62, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom(1402L);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 570, 0, 570);
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(570, hypergeometricDistribution0.getSampleSize());
      assertEquals(570, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1040, 0, 1040);
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1040, hypergeometricDistribution0.getSampleSize());
      assertEquals(1040, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int[] intArray0 = new int[9];
      Well19937a well19937a0 = new Well19937a(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 435, 126, 126);
      // Undeclared exception!
      hypergeometricDistribution0.sample(1486);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(727, 727, 1);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(433);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(727, 727, 1);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability((-1719));
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(727, 727, 1);
      double double0 = hypergeometricDistribution0.probability(3253);
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(1186);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1186, 2, 1186);
      double double0 = hypergeometricDistribution0.probability(0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom(1402L);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 570, 0, 570);
      double double0 = hypergeometricDistribution0.cumulativeProbability(0, 570);
      assertEquals(570, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double0, 0.01);
      assertEquals(570, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(727, 727, 1);
      double double0 = hypergeometricDistribution0.cumulativeProbability(0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(727, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1156, 1, 1341);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (1,341) must be less than or equal to population size (1,156)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(2934, 0, (-326));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-326)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1181, (-1719), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-1,719)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom(1402L);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 570, 0, 570);
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(0, int0);
      assertEquals(570, hypergeometricDistribution0.getPopulationSize());
      assertEquals(570, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(727, 727, 1);
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1098, 32, 32);
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.8798386950746153, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2976, 0, 2976);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(2976, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double0, 0.01);
      assertEquals(2976, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3115, 1113, 1032);
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(525);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2976, 0, 2976);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(0, int0);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2976, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2976, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1356, 1356, 0);
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(1356, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1356, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, int0);
  }
}
