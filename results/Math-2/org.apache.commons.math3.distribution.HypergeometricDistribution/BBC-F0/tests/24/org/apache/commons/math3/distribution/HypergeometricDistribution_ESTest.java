/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 08:03:09 GMT 2020
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2526, 829, 829);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(829, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(272.0669041963579, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(829, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2526, hypergeometricDistribution0.getPopulationSize());
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(0, int0);
      assertEquals(829, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(272.0669041963579, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(829, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2526, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(701, 701, 701);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(701, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(701, hypergeometricDistribution0.getSampleSize());
      assertEquals(701, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(701.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(701);
      assertEquals(1.0, double0, 0.01);
      assertEquals(701, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(701, hypergeometricDistribution0.getSampleSize());
      assertEquals(701, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(701.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(0, 276, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom(0L);
      assertNotNull(iSAACRandom0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 826, 826, 701);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(826, hypergeometricDistribution0.getPopulationSize());
      assertEquals(701.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(826, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(701, hypergeometricDistribution0.getSampleSize());
      
      double double0 = hypergeometricDistribution0.probability(701);
      assertEquals(1.0, double0, 0.01);
      assertEquals(826, hypergeometricDistribution0.getPopulationSize());
      assertEquals(701.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(826, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(701, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1033, 1033, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1033, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1033, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(0, int0);
      assertEquals(1033, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1033, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2526, 828, 2526);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(2526, hypergeometricDistribution0.getSampleSize());
      assertEquals(828, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2526, hypergeometricDistribution0.getPopulationSize());
      assertEquals(828.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(828, int0);
      assertEquals(2526, hypergeometricDistribution0.getSampleSize());
      assertEquals(828, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2526, hypergeometricDistribution0.getPopulationSize());
      assertEquals(828.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(719, 701, 701);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(683.4506258692629, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(719, hypergeometricDistribution0.getPopulationSize());
      assertEquals(701, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(701, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(683, int0);
      assertEquals(683.4506258692629, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(719, hypergeometricDistribution0.getPopulationSize());
      assertEquals(701, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(701, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1033, 1033, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1033, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1033, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(0, int0);
      assertEquals(1033, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1033, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1033, 1033, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1033, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1033, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1033, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1033, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3119, 701, 647);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(3119, hypergeometricDistribution0.getPopulationSize());
      assertEquals(145.41423533183712, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(647, hypergeometricDistribution0.getSampleSize());
      assertEquals(701, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(89.37585330655114, double0, 0.01);
      assertEquals(3119, hypergeometricDistribution0.getPopulationSize());
      assertEquals(145.41423533183712, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(647, hypergeometricDistribution0.getSampleSize());
      assertEquals(701, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1033, 1033, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1033, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1033, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1033, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1033, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1927, 1927, 1927);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1927, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1927, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1927.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1927, hypergeometricDistribution0.getSampleSize());
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(1927.0, double0, 0.01);
      assertEquals(1927, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1927, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1927.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1927, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(430, 0, 430);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(430, hypergeometricDistribution0.getPopulationSize());
      assertEquals(430, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(0, int0);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(430, hypergeometricDistribution0.getPopulationSize());
      assertEquals(430, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(701, 701, 701);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(701, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(701, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(701.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(701, hypergeometricDistribution0.getPopulationSize());
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(701);
      assertEquals(1.0, double0, 0.01);
      assertEquals(701, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(701, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(701.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(701, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1033, 1033, 0);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1033, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1033, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1033, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1033, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3119, 701, 647);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(647, hypergeometricDistribution0.getSampleSize());
      assertEquals(145.41423533183712, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3119, hypergeometricDistribution0.getPopulationSize());
      assertEquals(701, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(33);
      assertEquals(0.9999999999999997, double0, 0.01);
      assertEquals(647, hypergeometricDistribution0.getSampleSize());
      assertEquals(145.41423533183712, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3119, hypergeometricDistribution0.getPopulationSize());
      assertEquals(701, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(2, 0, 1456);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (1,456) must be less than or equal to population size (2)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(701, 701, 701);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(701, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(701.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(701, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(701, hypergeometricDistribution0.getSampleSize());
      
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(701, int0);
      assertEquals(701, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(701.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(701, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(701, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(701, 701, 701);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(701.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(701, hypergeometricDistribution0.getPopulationSize());
      assertEquals(701, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(701, hypergeometricDistribution0.getSampleSize());
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(701, int0);
      assertEquals(701.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(701, hypergeometricDistribution0.getPopulationSize());
      assertEquals(701, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(701, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1927, 1927, 1927);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1927, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1927.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1927, hypergeometricDistribution0.getSampleSize());
      assertEquals(1927, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(1927, int0);
      assertEquals(1927, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1927.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1927, hypergeometricDistribution0.getSampleSize());
      assertEquals(1927, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(719, 701, 701);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(701, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(701, hypergeometricDistribution0.getSampleSize());
      assertEquals(683.4506258692629, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(719, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(701);
      assertEquals(3.0088182881264497E-36, double0, 0.01);
      assertEquals(701, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(701, hypergeometricDistribution0.getSampleSize());
      assertEquals(683.4506258692629, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(719, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(701, 701, 701);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(701, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(701, hypergeometricDistribution0.getPopulationSize());
      assertEquals(701.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(701, hypergeometricDistribution0.getSampleSize());
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability((-1));
      assertEquals(1.0, double0, 0.01);
      assertEquals(701, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(701, hypergeometricDistribution0.getPopulationSize());
      assertEquals(701.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(701, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2526, 828, 2526);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(2526, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2526, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(828.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(828, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.probability(848);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2526, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2526, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(828.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(828, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2526, 828, 2526);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(828, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2526, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2526, hypergeometricDistribution0.getPopulationSize());
      assertEquals(828.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double0 = hypergeometricDistribution0.probability(826);
      assertEquals(0.0, double0, 0.01);
      assertEquals(828, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2526, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2526, hypergeometricDistribution0.getPopulationSize());
      assertEquals(828.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(701, 701, 701);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(701.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(701, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(701, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(701, hypergeometricDistribution0.getPopulationSize());
      
      int int0 = hypergeometricDistribution0.solveInverseCumulativeProbability(647, 177, 782);
      assertEquals(782, int0);
      assertEquals(701.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(701, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(701, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(701, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(701, 701, 701);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(701, hypergeometricDistribution0.getPopulationSize());
      assertEquals(701.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(701, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(701, hypergeometricDistribution0.getSampleSize());
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(647);
      assertEquals(0.0, double0, 0.01);
      assertEquals(701, hypergeometricDistribution0.getPopulationSize());
      assertEquals(701.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(701, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(701, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 986, 986, 1911);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (1,911) must be less than or equal to population size (986)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 647, 782, 686);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (782) must be less than or equal to population size (647)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(2, 2, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int[] intArray0 = new int[5];
      Well512a well512a0 = new Well512a(intArray0);
      assertNotNull(well512a0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 1285, (-855), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-855)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((-565), 1235, 701);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-565)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(701, 701, 701);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(701, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(701.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(701, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(701, hypergeometricDistribution0.getPopulationSize());
      
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      assertEquals(701, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(701.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(701, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(701, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(719, 701, 701);
      // Undeclared exception!
      hypergeometricDistribution0.sample(1235);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(719, 701, 701);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(719);
      assertEquals(0.0, double0, 0.01);
      assertEquals(683.4506258692629, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(719, 701, 701);
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.42894224565541195, double0, 0.01);
  }
}
