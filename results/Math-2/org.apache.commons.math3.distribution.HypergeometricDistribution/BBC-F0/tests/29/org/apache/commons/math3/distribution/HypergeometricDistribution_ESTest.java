/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 08:06:23 GMT 2020
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.RandomAdaptor;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(8388607, 8388607, 8388607);
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.cumulativeProbability(1342);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4144, 2015, 996);
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(821);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 1785;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1785, 324, 324);
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.reseedRandomGenerator(324);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.probability(0);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.reseedRandomGenerator(0);
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability(2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1785, 324, 324);
      hypergeometricDistribution0.reseedRandomGenerator(324);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.reseedRandomGenerator(390L);
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.upperCumulativeProbability(1785);
      hypergeometricDistribution0.sample();
      int int0 = (-717);
      hypergeometricDistribution0.solveInverseCumulativeProbability((-1063.1656252769408), 324, 1785);
      hypergeometricDistribution0.sample();
      Well19937c well19937c0 = new Well19937c((long) 0);
      well19937c0.nextDouble();
      int int1 = 909;
      int int2 = 14;
      hypergeometricDistribution0.probability(45);
      HypergeometricDistribution hypergeometricDistribution1 = null;
      try {
        hypergeometricDistribution1 = new HypergeometricDistribution(well19937c0, int0, int1, int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-717)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 2829;
      int int1 = 1;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2829, 1, 1495);
      hypergeometricDistribution0.upperCumulativeProbability(1);
      // Undeclared exception!
      hypergeometricDistribution0.sample(3542);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1785, 324, 324);
      hypergeometricDistribution0.reseedRandomGenerator(324);
      hypergeometricDistribution0.probability(0);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.reseedRandomGenerator(0);
      hypergeometricDistribution0.upperCumulativeProbability(2);
      hypergeometricDistribution0.solveInverseCumulativeProbability(0.0, 444, 1785);
      // Undeclared exception!
      hypergeometricDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3542, 0, 0);
      hypergeometricDistribution0.sample(2);
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.solveInverseCumulativeProbability((-3211.6853828), 0, (-1485));
      HypergeometricDistribution hypergeometricDistribution1 = null;
      try {
        hypergeometricDistribution1 = new HypergeometricDistribution(59, (-1485), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-1,485)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2, 2, 2);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.sample(2);
      hypergeometricDistribution0.cumulativeProbability(2);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.reseedRandomGenerator(2);
      hypergeometricDistribution0.solveInverseCumulativeProbability(5.111952261540649E-283, 2, 2);
      hypergeometricDistribution0.cumulativeProbability(685);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.solveInverseCumulativeProbability(2073.657650855336, 1, 2);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.solveInverseCumulativeProbability(2, 2, 2);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.upperCumulativeProbability(2);
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.upperCumulativeProbability(0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1785, 324, 324);
      hypergeometricDistribution0.reseedRandomGenerator(324);
      HypergeometricDistribution hypergeometricDistribution1 = null;
      try {
        hypergeometricDistribution1 = new HypergeometricDistribution((RandomGenerator) null, 324, 2864, 324);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (2,864) must be less than or equal to population size (324)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1599, 1599, 1599);
      hypergeometricDistribution0.probability(1599);
      hypergeometricDistribution0.reseedRandomGenerator(1599);
      hypergeometricDistribution0.upperCumulativeProbability(1599);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.probability(0);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.probability((-956));
      hypergeometricDistribution0.probability((-3350));
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.probability((-3350));
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.getSampleSize();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 659;
      int int1 = (-174);
      int int2 = (-2293);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(659, (-174), (-2293));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-174)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 0;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(637, 828, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (828) must be less than or equal to population size (637)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 2509;
      intArray0[1] = 0;
      intArray0[2] = 211;
      intArray0[3] = 4993;
      Well512a well512a0 = new Well512a(intArray0);
      well512a0.nextFloat();
      RandomAdaptor randomAdaptor0 = new RandomAdaptor(well512a0);
      randomAdaptor0.nextInt();
      well512a0.nextInt();
      randomAdaptor0.setSeed(0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(randomAdaptor0, 211, 211, 0);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.cumulativeProbability(1301);
      hypergeometricDistribution0.solveInverseCumulativeProbability(0.7440431F, 0, 2509);
      well512a0.nextInt();
      hypergeometricDistribution0.sample(211);
      RandomAdaptor.createAdaptor(randomAdaptor0);
      randomAdaptor0.setSeed((-1751));
      hypergeometricDistribution0.probability(10);
      hypergeometricDistribution0.getSupportUpperBound();
      well512a0.nextInt(4993);
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.getSampleSize();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 714;
      intArray0[1] = 1011;
      intArray0[2] = 2949;
      intArray0[3] = (-136);
      Well1024a well1024a0 = new Well1024a(intArray0);
      well1024a0.nextLong();
      int int0 = 733;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 1265, 733, (-136));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-136)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 966;
      Well512a well512a0 = new Well512a(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 966, 966, 966);
      well512a0.setSeed((-399));
      hypergeometricDistribution0.isSupportConnected();
      double double0 = hypergeometricDistribution0.cumulativeProbability(966);
      assertEquals(1.0, double0, 0.01);
      
      well512a0.nextInt();
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.cumulativeProbability((-521));
      well512a0.nextBoolean();
      hypergeometricDistribution0.cumulativeProbability(966, 966);
      hypergeometricDistribution0.getSupportLowerBound();
      well512a0.setSeed(intArray0);
      hypergeometricDistribution0.getNumericalVariance();
      double double1 = hypergeometricDistribution0.probability((-521));
      assertEquals(0.0, double1, 0.01);
      
      hypergeometricDistribution0.getPopulationSize();
      well512a0.setSeed(intArray0);
      double double2 = hypergeometricDistribution0.probability(966);
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = hypergeometricDistribution0.upperCumulativeProbability(1452);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(966, int0);
      
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.getPopulationSize();
      double double4 = hypergeometricDistribution0.cumulativeProbability(345);
      assertEquals(double4, double3, 0.01);
      
      double double5 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.0, double5, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 1173;
      int int1 = (-3923);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1173, (-3923), (-3923));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-3,923)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      well19937c0.nextDouble();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 450, 0, 450);
      hypergeometricDistribution0.solveInverseCumulativeProbability(0, 865, 0);
      hypergeometricDistribution0.solveInverseCumulativeProbability((-1553.77425), 450, 389);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(0, int0);
      
      hypergeometricDistribution0.getSupportUpperBound();
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(450, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double0, 0.01);
      assertEquals(450, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2, 2, 2);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.sample(2);
      hypergeometricDistribution0.cumulativeProbability(2);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.reseedRandomGenerator(2);
      hypergeometricDistribution0.solveInverseCumulativeProbability(5.111952261540649E-283, 2, 2);
      hypergeometricDistribution0.cumulativeProbability(685);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.solveInverseCumulativeProbability(2073.657650855336, 1, 2);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.solveInverseCumulativeProbability(2, 2, 2);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.isSupportConnected();
      try { 
        hypergeometricDistribution0.cumulativeProbability(732, (-843));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lower endpoint (732) must be less than or equal to upper endpoint (-843)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 1579;
      int int1 = 1778;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1579, 0, 1778);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (1,778) must be less than or equal to population size (1,579)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1785, 324, 324);
      hypergeometricDistribution0.reseedRandomGenerator(324);
      double double0 = hypergeometricDistribution0.probability(0);
      assertEquals(3.507578673157835E-32, double0, 0.01);
      
      double double1 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(39.42023067839639, double1, 0.01);
      
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.reseedRandomGenerator(0);
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.solveInverseCumulativeProbability(4.903687986212687E-49, 324, (-717));
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(63, int0);
      
      hypergeometricDistribution0.probability(0);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getNumericalVariance();
      int int1 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(0, int1);
      
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.cumulativeProbability(796);
      double double2 = hypergeometricDistribution0.cumulativeProbability(796);
      assertEquals(1.0, double2, 0.01);
      
      double double3 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(39.42023067839639, double3, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      well44497a0.nextLong(4305L);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, (-430), 1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-430)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 0;
      int int1 = 2;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(0, 0, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }
}
