/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 08:05:09 GMT 2020
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.SynchronizedRandomGenerator;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(870, 0, 870);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(870, hypergeometricDistribution0.getPopulationSize());
      assertEquals(870, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(0, int0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(870, hypergeometricDistribution0.getPopulationSize());
      assertEquals(870, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.probability(870);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(870, hypergeometricDistribution0.getPopulationSize());
      assertEquals(870, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      
      hypergeometricDistribution0.reseedRandomGenerator(870);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(870, hypergeometricDistribution0.getPopulationSize());
      assertEquals(870, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double1 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.0, double1, 0.01);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(870, hypergeometricDistribution0.getPopulationSize());
      assertEquals(870, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double2 = hypergeometricDistribution0.probability(870);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(870, hypergeometricDistribution0.getPopulationSize());
      assertEquals(870, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int1 = hypergeometricDistribution0.sample();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(870, hypergeometricDistribution0.getPopulationSize());
      assertEquals(870, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      
      try { 
        hypergeometricDistribution0.inverseCumulativeProbability((-4.191810118556531E-11));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -0 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 578;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2047, 578, 578);
      assertEquals(578, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2047, hypergeometricDistribution0.getPopulationSize());
      assertEquals(163.2066438690767, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(578, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(1);
      assertEquals(1.0000000000000002, double0, 0.01);
      assertEquals(578, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2047, hypergeometricDistribution0.getPopulationSize());
      assertEquals(163.2066438690767, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(578, hypergeometricDistribution0.getSampleSize());
      
      double double1 = hypergeometricDistribution0.probability(2047);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(578, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2047, hypergeometricDistribution0.getPopulationSize());
      assertEquals(163.2066438690767, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(578, hypergeometricDistribution0.getSampleSize());
      
      hypergeometricDistribution0.reseedRandomGenerator((-1507));
      assertEquals(578, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2047, hypergeometricDistribution0.getPopulationSize());
      assertEquals(163.2066438690767, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(578, hypergeometricDistribution0.getSampleSize());
      
      int int1 = hypergeometricDistribution0.inverseCumulativeProbability(0L);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertEquals(578, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2047, hypergeometricDistribution0.getPopulationSize());
      assertEquals(163.2066438690767, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(578, hypergeometricDistribution0.getSampleSize());
      
      double double2 = hypergeometricDistribution0.probability(2047);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertEquals(578, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2047, hypergeometricDistribution0.getPopulationSize());
      assertEquals(163.2066438690767, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(578, hypergeometricDistribution0.getSampleSize());
      
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(345);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2047, 578, 578);
      assertEquals(2047, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(578, hypergeometricDistribution0.getSampleSize());
      assertEquals(163.2066438690767, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(578, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.cumulativeProbability((-1), 3396);
      assertEquals(1.0, double0, 0.01);
      assertEquals(2047, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(578, hypergeometricDistribution0.getSampleSize());
      assertEquals(163.2066438690767, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(578, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double1 = hypergeometricDistribution0.getNumericalVariance();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(84.09263357299852, double1, 0.01);
      assertEquals(2047, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(578, hypergeometricDistribution0.getSampleSize());
      assertEquals(163.2066438690767, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(578, hypergeometricDistribution0.getNumberOfSuccesses());
      
      hypergeometricDistribution0.reseedRandomGenerator(1);
      assertEquals(2047, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(578, hypergeometricDistribution0.getSampleSize());
      assertEquals(163.2066438690767, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(578, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double2 = hypergeometricDistribution0.probability(2047);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertEquals(2047, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(578, hypergeometricDistribution0.getSampleSize());
      assertEquals(163.2066438690767, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(578, hypergeometricDistribution0.getNumberOfSuccesses());
      
      hypergeometricDistribution0.reseedRandomGenerator((-1507));
      assertEquals(2047, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(578, hypergeometricDistribution0.getSampleSize());
      assertEquals(163.2066438690767, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(578, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int0 = hypergeometricDistribution0.inverseCumulativeProbability(0L);
      assertEquals(0, int0);
      assertEquals(2047, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(578, hypergeometricDistribution0.getSampleSize());
      assertEquals(163.2066438690767, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(578, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double3 = hypergeometricDistribution0.probability(2047);
      assertEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(0.0, double3, 0.01);
      assertEquals(2047, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(578, hypergeometricDistribution0.getSampleSize());
      assertEquals(163.2066438690767, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(578, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double4 = hypergeometricDistribution0.cumulativeProbability(345);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(1.0000000000000007, double4, 0.01);
      assertEquals(2047, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(578, hypergeometricDistribution0.getSampleSize());
      assertEquals(163.2066438690767, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(578, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int1 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertFalse(int1 == int0);
      assertEquals(578, int1);
      assertEquals(2047, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(578, hypergeometricDistribution0.getSampleSize());
      assertEquals(163.2066438690767, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(578, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double5 = hypergeometricDistribution0.cumulativeProbability(578);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertEquals(double5, double0, 0.01);
      assertEquals(double5, double4, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertEquals(1.0, double5, 0.01);
      assertEquals(2047, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(578, hypergeometricDistribution0.getSampleSize());
      assertEquals(163.2066438690767, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(578, hypergeometricDistribution0.getNumberOfSuccesses());
      
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability(1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(578, 1, 1);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(578, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0017301038062283738, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(1);
      assertEquals(0.0017301038062283733, double0, 0.01);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(578, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0017301038062283738, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double1 = hypergeometricDistribution0.upperCumulativeProbability(1);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0017301038062283733, double1, 0.01);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(578, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0017301038062283738, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(1, int0);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(578, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0017301038062283738, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double2 = hypergeometricDistribution0.cumulativeProbability(578);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(1.0, double2, 0.01);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(578, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0017301038062283738, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      MersenneTwister mersenneTwister0 = new MersenneTwister(2147);
      assertNotNull(mersenneTwister0);
      
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(2147, 767, 267);
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      assertEquals(767, hypergeometricDistribution1.getNumberOfSuccesses());
      assertEquals(267, hypergeometricDistribution1.getSampleSize());
      assertEquals(2147, hypergeometricDistribution1.getPopulationSize());
      assertTrue(hypergeometricDistribution1.isSupportConnected());
      assertEquals(95.38379133674896, hypergeometricDistribution1.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution1);
      
      int int1 = hypergeometricDistribution1.solveInverseCumulativeProbability(2147, 0, 4778);
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      assertFalse(int1 == int0);
      assertNotSame(hypergeometricDistribution1, hypergeometricDistribution0);
      assertEquals(4778, int1);
      assertEquals(767, hypergeometricDistribution1.getNumberOfSuccesses());
      assertEquals(267, hypergeometricDistribution1.getSampleSize());
      assertEquals(2147, hypergeometricDistribution1.getPopulationSize());
      assertTrue(hypergeometricDistribution1.isSupportConnected());
      assertEquals(95.38379133674896, hypergeometricDistribution1.getNumericalMean(), 0.01);
      
      double double3 = hypergeometricDistribution1.upperCumulativeProbability(1);
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertNotSame(hypergeometricDistribution1, hypergeometricDistribution0);
      assertEquals(0.9999999999999996, double3, 0.01);
      assertEquals(767, hypergeometricDistribution1.getNumberOfSuccesses());
      assertEquals(267, hypergeometricDistribution1.getSampleSize());
      assertEquals(2147, hypergeometricDistribution1.getPopulationSize());
      assertTrue(hypergeometricDistribution1.isSupportConnected());
      assertEquals(95.38379133674896, hypergeometricDistribution1.getNumericalMean(), 0.01);
      
      boolean boolean0 = hypergeometricDistribution1.isSupportConnected();
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      assertNotSame(hypergeometricDistribution1, hypergeometricDistribution0);
      assertTrue(boolean0);
      assertEquals(767, hypergeometricDistribution1.getNumberOfSuccesses());
      assertEquals(267, hypergeometricDistribution1.getSampleSize());
      assertEquals(2147, hypergeometricDistribution1.getPopulationSize());
      assertTrue(hypergeometricDistribution1.isSupportConnected());
      assertEquals(95.38379133674896, hypergeometricDistribution1.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      assertNotNull(well512a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 3137, 3137, 0);
      assertEquals(3137, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(3137, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      int[] intArray0 = hypergeometricDistribution0.sample(3137);
      assertEquals(3137, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(3137, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3137, intArray0.length);
      assertNotNull(intArray0);
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(0, int0);
      assertEquals(3137, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(3137, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(0, 0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3137, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(3137, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double1 = well512a0.nextDouble();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.04560935093558438, double1, 0.01);
      
      well512a0.clear();
      double double2 = hypergeometricDistribution0.getNumericalMean();
      assertNotEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertEquals(3137, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(3137, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int1 = hypergeometricDistribution0.solveInverseCumulativeProbability(0.0, (-927), (-1328));
      assertFalse(int1 == int0);
      assertEquals((-1328), int1);
      assertEquals(3137, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(3137, hypergeometricDistribution0.getNumberOfSuccesses());
      
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      assertEquals(3137, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(3137, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int2 = hypergeometricDistribution0.getPopulationSize();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(3137, int2);
      assertEquals(3137, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(3137, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int3 = hypergeometricDistribution0.getSampleSize();
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(0, int3);
      assertEquals(3137, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(3137, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double3 = hypergeometricDistribution0.cumulativeProbability(281);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(1.0, double3, 0.01);
      assertEquals(3137, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(3137, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int4 = hypergeometricDistribution0.inverseCumulativeProbability(1.0);
      assertTrue(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertTrue(int4 == int3);
      assertEquals(0, int4);
      assertEquals(3137, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(3137, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int5 = hypergeometricDistribution0.getSupportUpperBound();
      assertFalse(int5 == int1);
      assertTrue(int5 == int4);
      assertFalse(int5 == int2);
      assertTrue(int5 == int3);
      assertTrue(int5 == int0);
      assertEquals(0, int5);
      assertEquals(3137, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(3137, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int6 = hypergeometricDistribution0.getSampleSize();
      assertFalse(int6 == int2);
      assertTrue(int6 == int3);
      assertTrue(int6 == int0);
      assertTrue(int6 == int4);
      assertTrue(int6 == int5);
      assertFalse(int6 == int1);
      assertEquals(0, int6);
      assertEquals(3137, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(3137, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int7 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertFalse(int7 == int3);
      assertFalse(int7 == int0);
      assertTrue(int7 == int2);
      assertFalse(int7 == int4);
      assertFalse(int7 == int5);
      assertFalse(int7 == int6);
      assertFalse(int7 == int1);
      assertEquals(3137, int7);
      assertEquals(3137, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(3137, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double4 = hypergeometricDistribution0.probability(0);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
      assertEquals(3137, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(3137, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double5 = well512a0.nextGaussian();
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertEquals(1.2421410806069078, double5, 0.01);
      
      int int8 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertFalse(int8 == int0);
      assertFalse(int8 == int4);
      assertTrue(int8 == int7);
      assertFalse(int8 == int1);
      assertTrue(int8 == int2);
      assertFalse(int8 == int6);
      assertFalse(int8 == int3);
      assertFalse(int8 == int5);
      assertEquals(3137, int8);
      assertEquals(3137, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(3137, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int9 = hypergeometricDistribution0.getSupportLowerBound();
      assertFalse(int9 == int2);
      assertFalse(int9 == int7);
      assertFalse(int9 == int8);
      assertTrue(int9 == int4);
      assertFalse(int9 == int1);
      assertTrue(int9 == int0);
      assertTrue(int9 == int6);
      assertTrue(int9 == int5);
      assertTrue(int9 == int3);
      assertEquals(0, int9);
      assertEquals(3137, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(3137, hypergeometricDistribution0.getNumberOfSuccesses());
      
      boolean boolean1 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(3137, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(3137, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double6 = hypergeometricDistribution0.calculateNumericalVariance();
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertEquals(double6, double0, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertEquals(double6, double2, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertEquals(0.0, double6, 0.01);
      assertEquals(3137, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(3137, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int10 = well512a0.nextInt();
      assertFalse(int10 == int3);
      assertFalse(int10 == int5);
      assertFalse(int10 == int7);
      assertFalse(int10 == int0);
      assertFalse(int10 == int4);
      assertFalse(int10 == int2);
      assertFalse(int10 == int8);
      assertFalse(int10 == int6);
      assertFalse(int10 == int9);
      assertFalse(int10 == int1);
      assertEquals((-2095462900), int10);
      
      double double7 = hypergeometricDistribution0.calculateNumericalVariance();
      assertNotEquals(double7, double5, 0.01);
      assertEquals(double7, double0, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertEquals(double7, double6, 0.01);
      assertEquals(double7, double2, 0.01);
      assertEquals(0.0, double7, 0.01);
      assertEquals(3137, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(3137, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double8 = hypergeometricDistribution0.cumulativeProbability(537);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertEquals(double8, double3, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertEquals(1.0, double8, 0.01);
      assertEquals(3137, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(3137, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double9 = hypergeometricDistribution0.cumulativeProbability(3137);
      assertNotEquals(double9, double6, 0.01);
      assertEquals(double9, double3, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertEquals(double9, double8, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertEquals(1.0, double9, 0.01);
      assertEquals(3137, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(3137, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int11 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertTrue(int11 == int8);
      assertFalse(int11 == int3);
      assertFalse(int11 == int1);
      assertFalse(int11 == int5);
      assertTrue(int11 == int2);
      assertFalse(int11 == int0);
      assertFalse(int11 == int4);
      assertFalse(int11 == int10);
      assertFalse(int11 == int6);
      assertTrue(int11 == int7);
      assertFalse(int11 == int9);
      assertEquals(3137, int11);
      assertEquals(3137, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(3137, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int12 = hypergeometricDistribution0.getSupportLowerBound();
      assertFalse(int12 == int11);
      assertFalse(int12 == int7);
      assertFalse(int12 == int2);
      assertFalse(int12 == int1);
      assertTrue(int12 == int3);
      assertTrue(int12 == int6);
      assertTrue(int12 == int5);
      assertTrue(int12 == int9);
      assertTrue(int12 == int4);
      assertTrue(int12 == int0);
      assertFalse(int12 == int10);
      assertFalse(int12 == int8);
      assertEquals(0, int12);
      assertEquals(3137, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(3137, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(578, 1, 1);
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0017301038062283738, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(578, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      hypergeometricDistribution0.reseedRandomGenerator(578);
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0017301038062283738, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(578, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.probability((-1507));
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0017301038062283738, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(578, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double1 = hypergeometricDistribution0.upperCumulativeProbability(1);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0017301038062283733, double1, 0.01);
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0017301038062283738, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(578, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2047, 578, 578);
      assertEquals(2047, hypergeometricDistribution0.getPopulationSize());
      assertEquals(163.2066438690767, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(578, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(578, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(84.09263357299852, double0, 0.01);
      assertEquals(2047, hypergeometricDistribution0.getPopulationSize());
      assertEquals(163.2066438690767, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(578, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(578, hypergeometricDistribution0.getSampleSize());
      
      hypergeometricDistribution0.reseedRandomGenerator(1);
      assertEquals(2047, hypergeometricDistribution0.getPopulationSize());
      assertEquals(163.2066438690767, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(578, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(578, hypergeometricDistribution0.getSampleSize());
      
      double double1 = hypergeometricDistribution0.probability(2047);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(2047, hypergeometricDistribution0.getPopulationSize());
      assertEquals(163.2066438690767, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(578, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(578, hypergeometricDistribution0.getSampleSize());
      
      hypergeometricDistribution0.reseedRandomGenerator((-1507));
      assertEquals(2047, hypergeometricDistribution0.getPopulationSize());
      assertEquals(163.2066438690767, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(578, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(578, hypergeometricDistribution0.getSampleSize());
      
      int int0 = hypergeometricDistribution0.inverseCumulativeProbability(0L);
      assertEquals(0, int0);
      assertEquals(2047, hypergeometricDistribution0.getPopulationSize());
      assertEquals(163.2066438690767, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(578, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(578, hypergeometricDistribution0.getSampleSize());
      
      double double2 = hypergeometricDistribution0.probability(2047);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertEquals(2047, hypergeometricDistribution0.getPopulationSize());
      assertEquals(163.2066438690767, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(578, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(578, hypergeometricDistribution0.getSampleSize());
      
      double double3 = hypergeometricDistribution0.cumulativeProbability(345);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(1.0000000000000007, double3, 0.01);
      assertEquals(2047, hypergeometricDistribution0.getPopulationSize());
      assertEquals(163.2066438690767, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(578, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(578, hypergeometricDistribution0.getSampleSize());
      
      int int1 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertFalse(int1 == int0);
      assertEquals(578, int1);
      assertEquals(2047, hypergeometricDistribution0.getPopulationSize());
      assertEquals(163.2066438690767, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(578, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(578, hypergeometricDistribution0.getSampleSize());
      
      double double4 = hypergeometricDistribution0.cumulativeProbability(578);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals(1.0, double4, 0.01);
      assertEquals(2047, hypergeometricDistribution0.getPopulationSize());
      assertEquals(163.2066438690767, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(578, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(578, hypergeometricDistribution0.getSampleSize());
      
      double double5 = hypergeometricDistribution0.probability(578);
      assertNotEquals(double5, double0, 0.01);
      assertEquals(double5, double1, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertEquals(double5, double2, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertEquals(0.0, double5, 0.01);
      assertEquals(2047, hypergeometricDistribution0.getPopulationSize());
      assertEquals(163.2066438690767, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(578, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(578, hypergeometricDistribution0.getSampleSize());
      
      double double6 = hypergeometricDistribution0.getNumericalVariance();
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertEquals(double6, double0, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertEquals(84.09263357299852, double6, 0.01);
      assertEquals(2047, hypergeometricDistribution0.getPopulationSize());
      assertEquals(163.2066438690767, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(578, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(578, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(624, 1, 1);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(624, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0016025641025641025, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      hypergeometricDistribution0.reseedRandomGenerator(624);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(624, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0016025641025641025, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.probability((-1504));
      assertEquals(0.0, double0, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(624, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0016025641025641025, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      
      hypergeometricDistribution0.reseedRandomGenerator(0L);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(624, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0016025641025641025, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int0 = hypergeometricDistribution0.inverseCumulativeProbability(0);
      assertEquals(0, int0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(624, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0016025641025641025, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double1 = hypergeometricDistribution0.cumulativeProbability(0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.9983974358974359, double1, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(624, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0016025641025641025, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int1 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(624, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0016025641025641025, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double2 = hypergeometricDistribution0.cumulativeProbability(1);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(1.0, double2, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(624, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0016025641025641025, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double3 = hypergeometricDistribution0.calculateNumericalVariance();
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(0.0015999958908612755, double3, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(624, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0016025641025641025, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double4 = hypergeometricDistribution0.cumulativeProbability(0);
      assertEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(double4, double2, 0.01);
      assertEquals(0.9983974358974359, double4, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(624, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0016025641025641025, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 578;
      intArray0[1] = 578;
      intArray0[2] = 578;
      intArray0[3] = 1;
      intArray0[4] = 1;
      intArray0[5] = 1;
      intArray0[6] = 578;
      intArray0[7] = 1;
      Well512a well512a0 = new Well512a(intArray0);
      assertArrayEquals(new int[] {578, 578, 578, 1, 1, 1, 578, 1}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(well512a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 578, 91, 3572);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (3,572) must be less than or equal to population size (578)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1231, 1231, 142);
      assertEquals(142.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(142, hypergeometricDistribution0.getSampleSize());
      assertEquals(1231, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1231, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      assertNotNull(jDKRandomGenerator0);
      
      HypergeometricDistribution hypergeometricDistribution1 = null;
      try {
        hypergeometricDistribution1 = new HypergeometricDistribution(jDKRandomGenerator0, 142, 8388608, 1260);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (8,388,608) must be less than or equal to population size (142)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister((int[]) null);
      assertNotNull(mersenneTwister0);
      
      int int0 = 2130;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)16;
      byteArray0[1] = (byte)0;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, (byte)16, 764, (byte)16);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (764) must be less than or equal to population size (16)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 1, 1, 1);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      assertNotNull(jDKRandomGenerator0);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1, 1, 886);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (886) must be less than or equal to population size (1)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(1);
      assertNotNull(well19937c0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 8388608, 1, 0);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(8388608, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.probability(1);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(8388608, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(578, 1, 1);
      assertEquals(0.0017301038062283738, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(578, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      hypergeometricDistribution0.reseedRandomGenerator(578);
      assertEquals(0.0017301038062283738, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(578, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      
      double double0 = hypergeometricDistribution0.probability((-1507));
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0017301038062283738, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(578, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      
      hypergeometricDistribution0.reseedRandomGenerator(2106L);
      assertEquals(0.0017301038062283738, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(578, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      
      int int0 = hypergeometricDistribution0.inverseCumulativeProbability(0);
      assertEquals(0, int0);
      assertEquals(0.0017301038062283738, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(578, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      
      double double1 = hypergeometricDistribution0.cumulativeProbability(0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.9982698961937717, double1, 0.01);
      assertEquals(0.0017301038062283738, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(578, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      
      int int1 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      assertEquals(0.0017301038062283738, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(578, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      assertEquals(0.0017301038062283738, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(578, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      
      double double2 = hypergeometricDistribution0.probability(0);
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.9982698961937717, double2, 0.01);
      assertEquals(0.0017301038062283738, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(578, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 1109;
      int int1 = 461;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1109, 461, 461);
      assertEquals(461, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1109, hypergeometricDistribution0.getPopulationSize());
      assertEquals(191.63300270513977, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(461, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      int int2 = 0;
      double double0 = hypergeometricDistribution0.cumulativeProbability((-381));
      assertEquals(0.0, double0, 0.01);
      assertEquals(461, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1109, hypergeometricDistribution0.getPopulationSize());
      assertEquals(191.63300270513977, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(461, hypergeometricDistribution0.getSampleSize());
      
      double double1 = hypergeometricDistribution0.upperCumulativeProbability(1753);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(461, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1109, hypergeometricDistribution0.getPopulationSize());
      assertEquals(191.63300270513977, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(461, hypergeometricDistribution0.getSampleSize());
      
      int int3 = hypergeometricDistribution0.getSupportLowerBound();
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(0, int3);
      assertEquals(461, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1109, hypergeometricDistribution0.getPopulationSize());
      assertEquals(191.63300270513977, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(461, hypergeometricDistribution0.getSampleSize());
      
      try { 
        hypergeometricDistribution0.inverseCumulativeProbability((-618.008956427));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -618.009 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(586, 586, 586);
      assertEquals(586, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(586, hypergeometricDistribution0.getSampleSize());
      assertEquals(586, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(586.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.cumulativeProbability((-4018), 586);
      assertEquals(1.0, double0, 0.01);
      assertEquals(586, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(586, hypergeometricDistribution0.getSampleSize());
      assertEquals(586, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(586.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      hypergeometricDistribution0.reseedRandomGenerator((-4997L));
      assertEquals(586, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(586, hypergeometricDistribution0.getSampleSize());
      assertEquals(586, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(586.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(586, int0);
      assertEquals(586, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(586, hypergeometricDistribution0.getSampleSize());
      assertEquals(586, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(586.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int1 = hypergeometricDistribution0.getSupportLowerBound();
      assertTrue(int1 == int0);
      assertEquals(586, int1);
      assertEquals(586, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(586, hypergeometricDistribution0.getSampleSize());
      assertEquals(586, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(586.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double1 = hypergeometricDistribution0.probability(0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(586, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(586, hypergeometricDistribution0.getSampleSize());
      assertEquals(586, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(586.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int2 = hypergeometricDistribution0.getSupportUpperBound();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(586, int2);
      assertEquals(586, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(586, hypergeometricDistribution0.getSampleSize());
      assertEquals(586, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(586.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double2 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertEquals(586, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(586, hypergeometricDistribution0.getSampleSize());
      assertEquals(586, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(586.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int3 = hypergeometricDistribution0.getPopulationSize();
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals(586, int3);
      assertEquals(586, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(586, hypergeometricDistribution0.getSampleSize());
      assertEquals(586, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(586.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      assertEquals(586, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(586, hypergeometricDistribution0.getSampleSize());
      assertEquals(586, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(586.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int4 = hypergeometricDistribution0.getSupportUpperBound();
      assertTrue(int4 == int3);
      assertTrue(int4 == int0);
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      assertEquals(586, int4);
      assertEquals(586, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(586, hypergeometricDistribution0.getSampleSize());
      assertEquals(586, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(586.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double3 = hypergeometricDistribution0.probability(0);
      assertEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(0.0, double3, 0.01);
      assertEquals(586, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(586, hypergeometricDistribution0.getSampleSize());
      assertEquals(586, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(586.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double4 = hypergeometricDistribution0.cumulativeProbability(586, 586);
      assertEquals(double4, double2, 0.01);
      assertEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals(0.0, double4, 0.01);
      assertEquals(586, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(586, hypergeometricDistribution0.getSampleSize());
      assertEquals(586, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(586.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int5 = hypergeometricDistribution0.getPopulationSize();
      assertTrue(int5 == int2);
      assertTrue(int5 == int0);
      assertTrue(int5 == int4);
      assertTrue(int5 == int3);
      assertTrue(int5 == int1);
      assertEquals(586, int5);
      assertEquals(586, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(586, hypergeometricDistribution0.getSampleSize());
      assertEquals(586, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(586.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double5 = hypergeometricDistribution0.probability((-4189));
      assertEquals(double5, double2, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertEquals(double5, double3, 0.01);
      assertEquals(double5, double1, 0.01);
      assertEquals(double5, double4, 0.01);
      assertEquals(0.0, double5, 0.01);
      assertEquals(586, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(586, hypergeometricDistribution0.getSampleSize());
      assertEquals(586, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(586.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      boolean boolean1 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(586, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(586, hypergeometricDistribution0.getSampleSize());
      assertEquals(586, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(586.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int6 = hypergeometricDistribution0.getSupportUpperBound();
      assertTrue(int6 == int2);
      assertTrue(int6 == int5);
      assertTrue(int6 == int1);
      assertTrue(int6 == int3);
      assertTrue(int6 == int4);
      assertTrue(int6 == int0);
      assertEquals(586, int6);
      assertEquals(586, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(586, hypergeometricDistribution0.getSampleSize());
      assertEquals(586, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(586.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int7 = hypergeometricDistribution0.getSupportUpperBound();
      assertTrue(int7 == int2);
      assertTrue(int7 == int3);
      assertTrue(int7 == int4);
      assertTrue(int7 == int0);
      assertTrue(int7 == int6);
      assertTrue(int7 == int1);
      assertTrue(int7 == int5);
      assertEquals(586, int7);
      assertEquals(586, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(586, hypergeometricDistribution0.getSampleSize());
      assertEquals(586, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(586.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int8 = hypergeometricDistribution0.getSupportUpperBound();
      assertTrue(int8 == int5);
      assertTrue(int8 == int0);
      assertTrue(int8 == int2);
      assertTrue(int8 == int3);
      assertTrue(int8 == int6);
      assertTrue(int8 == int1);
      assertTrue(int8 == int4);
      assertTrue(int8 == int7);
      assertEquals(586, int8);
      assertEquals(586, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(586, hypergeometricDistribution0.getSampleSize());
      assertEquals(586, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(586.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double6 = hypergeometricDistribution0.cumulativeProbability(586, 586);
      assertEquals(double6, double2, 0.01);
      assertEquals(double6, double4, 0.01);
      assertEquals(double6, double5, 0.01);
      assertEquals(double6, double1, 0.01);
      assertEquals(double6, double3, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertEquals(0.0, double6, 0.01);
      assertEquals(586, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(586, hypergeometricDistribution0.getSampleSize());
      assertEquals(586, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(586.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double7 = hypergeometricDistribution0.probability(586);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertEquals(Double.NaN, double7, 0.01);
      assertEquals(586, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(586, hypergeometricDistribution0.getSampleSize());
      assertEquals(586, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(586.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int9 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertTrue(int9 == int4);
      assertTrue(int9 == int7);
      assertTrue(int9 == int3);
      assertTrue(int9 == int0);
      assertTrue(int9 == int8);
      assertTrue(int9 == int6);
      assertTrue(int9 == int1);
      assertTrue(int9 == int2);
      assertTrue(int9 == int5);
      assertEquals(586, int9);
      assertEquals(586, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(586, hypergeometricDistribution0.getSampleSize());
      assertEquals(586, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(586.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int10 = hypergeometricDistribution0.getSupportUpperBound();
      assertTrue(int10 == int6);
      assertTrue(int10 == int7);
      assertTrue(int10 == int3);
      assertTrue(int10 == int4);
      assertTrue(int10 == int0);
      assertTrue(int10 == int9);
      assertTrue(int10 == int1);
      assertTrue(int10 == int2);
      assertTrue(int10 == int5);
      assertTrue(int10 == int8);
      assertEquals(586, int10);
      assertEquals(586, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(586, hypergeometricDistribution0.getSampleSize());
      assertEquals(586, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(586.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int11 = hypergeometricDistribution0.getPopulationSize();
      assertTrue(int11 == int5);
      assertTrue(int11 == int0);
      assertTrue(int11 == int4);
      assertTrue(int11 == int7);
      assertTrue(int11 == int3);
      assertTrue(int11 == int9);
      assertTrue(int11 == int8);
      assertTrue(int11 == int10);
      assertTrue(int11 == int2);
      assertTrue(int11 == int6);
      assertTrue(int11 == int1);
      assertEquals(586, int11);
      assertEquals(586, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(586, hypergeometricDistribution0.getSampleSize());
      assertEquals(586, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(586.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int12 = hypergeometricDistribution0.getSampleSize();
      assertTrue(int12 == int2);
      assertTrue(int12 == int10);
      assertTrue(int12 == int0);
      assertTrue(int12 == int4);
      assertTrue(int12 == int3);
      assertTrue(int12 == int9);
      assertTrue(int12 == int6);
      assertTrue(int12 == int1);
      assertTrue(int12 == int7);
      assertTrue(int12 == int11);
      assertTrue(int12 == int5);
      assertTrue(int12 == int8);
      assertEquals(586, int12);
      assertEquals(586, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(586, hypergeometricDistribution0.getSampleSize());
      assertEquals(586, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(586.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int13 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertTrue(int13 == int4);
      assertTrue(int13 == int10);
      assertTrue(int13 == int0);
      assertTrue(int13 == int3);
      assertTrue(int13 == int2);
      assertTrue(int13 == int11);
      assertTrue(int13 == int7);
      assertTrue(int13 == int1);
      assertTrue(int13 == int6);
      assertTrue(int13 == int9);
      assertTrue(int13 == int12);
      assertTrue(int13 == int5);
      assertTrue(int13 == int8);
      assertEquals(586, int13);
      assertEquals(586, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(586, hypergeometricDistribution0.getSampleSize());
      assertEquals(586, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(586.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int14 = hypergeometricDistribution0.getPopulationSize();
      assertTrue(int14 == int4);
      assertTrue(int14 == int10);
      assertTrue(int14 == int0);
      assertTrue(int14 == int3);
      assertTrue(int14 == int2);
      assertTrue(int14 == int11);
      assertTrue(int14 == int7);
      assertTrue(int14 == int6);
      assertTrue(int14 == int1);
      assertTrue(int14 == int9);
      assertTrue(int14 == int13);
      assertTrue(int14 == int12);
      assertTrue(int14 == int8);
      assertTrue(int14 == int5);
      assertEquals(586, int14);
      assertEquals(586, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(586, hypergeometricDistribution0.getSampleSize());
      assertEquals(586, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(586.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double8 = hypergeometricDistribution0.probability(586);
      assertEquals(double8, double7, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertEquals(Double.NaN, double8, 0.01);
      assertEquals(586, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(586, hypergeometricDistribution0.getSampleSize());
      assertEquals(586, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(586.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int15 = hypergeometricDistribution0.getPopulationSize();
      assertTrue(int15 == int14);
      assertTrue(int15 == int10);
      assertTrue(int15 == int4);
      assertTrue(int15 == int11);
      assertTrue(int15 == int0);
      assertTrue(int15 == int13);
      assertTrue(int15 == int1);
      assertTrue(int15 == int2);
      assertTrue(int15 == int6);
      assertTrue(int15 == int8);
      assertTrue(int15 == int12);
      assertTrue(int15 == int7);
      assertTrue(int15 == int9);
      assertTrue(int15 == int5);
      assertTrue(int15 == int3);
      assertEquals(586, int15);
      assertEquals(586, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(586, hypergeometricDistribution0.getSampleSize());
      assertEquals(586, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(586.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double9 = hypergeometricDistribution0.getNumericalMean();
      assertNotEquals(double9, double6, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertEquals(586.0, double9, 0.01);
      assertEquals(586, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(586, hypergeometricDistribution0.getSampleSize());
      assertEquals(586, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(586.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int16 = hypergeometricDistribution0.getSampleSize();
      assertTrue(int16 == int8);
      assertTrue(int16 == int12);
      assertTrue(int16 == int6);
      assertTrue(int16 == int1);
      assertTrue(int16 == int3);
      assertTrue(int16 == int4);
      assertTrue(int16 == int7);
      assertTrue(int16 == int11);
      assertTrue(int16 == int10);
      assertTrue(int16 == int14);
      assertTrue(int16 == int2);
      assertTrue(int16 == int5);
      assertTrue(int16 == int0);
      assertTrue(int16 == int13);
      assertTrue(int16 == int15);
      assertTrue(int16 == int9);
      assertEquals(586, int16);
      assertEquals(586, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(586, hypergeometricDistribution0.getSampleSize());
      assertEquals(586, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(586.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1622, 1622, 378);
      assertEquals(378.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1622, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1622, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(378, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(2199);
      assertEquals(0.0, double0, 0.01);
      assertEquals(378.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1622, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1622, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(378, hypergeometricDistribution0.getSampleSize());
      
      double double1 = hypergeometricDistribution0.probability(378);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.0, double1, 0.01);
      assertEquals(378.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1622, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1622, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(378, hypergeometricDistribution0.getSampleSize());
      
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(1622, int0);
      assertEquals(378.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1622, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1622, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(378, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister((int[]) null);
      assertNotNull(mersenneTwister0);
      
      int int0 = 1662;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)16;
      byte byte0 = (byte)0;
      byteArray0[1] = (byte)0;
      mersenneTwister0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)2, (byte)86}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 1662, 1662, 2130);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (2,130) must be less than or equal to population size (1,662)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(565, 0, 0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(565, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(0, int0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(565, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1231, 1231, 142);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(142, hypergeometricDistribution0.getSampleSize());
      assertEquals(1231, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1231, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(142.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(142, int0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(142, hypergeometricDistribution0.getSampleSize());
      assertEquals(1231, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1231, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(142.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int1 = hypergeometricDistribution0.getSupportUpperBound();
      assertTrue(int1 == int0);
      assertEquals(142, int1);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(142, hypergeometricDistribution0.getSampleSize());
      assertEquals(1231, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1231, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(142.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      hypergeometricDistribution0.reseedRandomGenerator(142);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(142, hypergeometricDistribution0.getSampleSize());
      assertEquals(1231, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1231, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(142.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(142);
      assertEquals(1.0, double0, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(142, hypergeometricDistribution0.getSampleSize());
      assertEquals(1231, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1231, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(142.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int2 = hypergeometricDistribution0.getPopulationSize();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1231, int2);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(142, hypergeometricDistribution0.getSampleSize());
      assertEquals(1231, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1231, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(142.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int3 = hypergeometricDistribution0.getSupportLowerBound();
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals(142, int3);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(142, hypergeometricDistribution0.getSampleSize());
      assertEquals(1231, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1231, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(142.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(142, hypergeometricDistribution0.getSampleSize());
      assertEquals(1231, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1231, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(142.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double1 = hypergeometricDistribution0.upperCumulativeProbability(940);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(142, hypergeometricDistribution0.getSampleSize());
      assertEquals(1231, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1231, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(142.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int4 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertFalse(int4 == int3);
      assertTrue(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertEquals(1231, int4);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(142, hypergeometricDistribution0.getSampleSize());
      assertEquals(1231, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1231, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(142.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double2 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(142, hypergeometricDistribution0.getSampleSize());
      assertEquals(1231, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1231, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(142.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double3 = hypergeometricDistribution0.getNumericalMean();
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(142.0, double3, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(142, hypergeometricDistribution0.getSampleSize());
      assertEquals(1231, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1231, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(142.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int5 = hypergeometricDistribution0.getSupportLowerBound();
      assertTrue(int5 == int1);
      assertFalse(int5 == int4);
      assertTrue(int5 == int3);
      assertTrue(int5 == int0);
      assertFalse(int5 == int2);
      assertEquals(142, int5);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(142, hypergeometricDistribution0.getSampleSize());
      assertEquals(1231, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1231, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(142.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(2);
      assertNotNull(well44497a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1453, 2, 1453);
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1453, hypergeometricDistribution0.getSampleSize());
      assertEquals(1453, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      int[] intArray0 = new int[6];
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(2, int0);
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1453, hypergeometricDistribution0.getSampleSize());
      assertEquals(1453, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertEquals(1.0, double0, 0.01);
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1453, hypergeometricDistribution0.getSampleSize());
      assertEquals(1453, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int1 = hypergeometricDistribution0.solveInverseCumulativeProbability(2, 959, 477);
      assertFalse(int1 == int0);
      assertEquals(477, int1);
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1453, hypergeometricDistribution0.getSampleSize());
      assertEquals(1453, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      intArray0[0] = 0;
      double double1 = hypergeometricDistribution0.getNumericalVariance();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1453, hypergeometricDistribution0.getSampleSize());
      assertEquals(1453, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      intArray0[1] = 1453;
      intArray0[2] = 0;
      intArray0[3] = 1453;
      intArray0[4] = 2;
      intArray0[5] = 2;
      int int2 = hypergeometricDistribution0.sample();
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(2, int2);
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1453, hypergeometricDistribution0.getSampleSize());
      assertEquals(1453, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      well44497a0.setSeed(intArray0);
      assertArrayEquals(new int[] {0, 1453, 0, 1453, 2, 2}, intArray0);
      assertEquals(6, intArray0.length);
      
      int int3 = well44497a0.nextInt();
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(1380754278, int3);
      
      double double2 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(1.0, double2, 0.01);
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1453, hypergeometricDistribution0.getSampleSize());
      assertEquals(1453, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double3 = hypergeometricDistribution0.getNumericalMean();
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(2.0, double3, 0.01);
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1453, hypergeometricDistribution0.getSampleSize());
      assertEquals(1453, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double4 = hypergeometricDistribution0.cumulativeProbability(1453);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(double4, double2, 0.01);
      assertEquals(1.0, double4, 0.01);
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1453, hypergeometricDistribution0.getSampleSize());
      assertEquals(1453, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double5 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(double5, double3, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertEquals(2.0, double5, 0.01);
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1453, hypergeometricDistribution0.getSampleSize());
      assertEquals(1453, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      assertNotNull(well512a0);
      
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(well512a0);
      assertNotNull(synchronizedRandomGenerator0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-51);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte)21;
      byteArray0[5] = (byte) (-28);
      byteArray0[6] = (byte) (-45);
      byteArray0[7] = (byte)0;
      well512a0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte) (-51), (byte)120, (byte)53, (byte) (-116), (byte) (-123), (byte)105, (byte) (-58), (byte)115}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      well512a0.setSeed(664);
      int int0 = synchronizedRandomGenerator0.nextInt();
      assertEquals((-370065821), int0);
      
      float float0 = synchronizedRandomGenerator0.nextFloat();
      assertEquals(0.138767F, float0, 0.01F);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(synchronizedRandomGenerator0, 2956, 2956, 2956);
      assertEquals(2956.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2956, hypergeometricDistribution0.getSampleSize());
      assertEquals(2956, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2956, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      int int1 = hypergeometricDistribution0.getSupportUpperBound();
      assertFalse(int1 == int0);
      assertEquals(2956, int1);
      assertEquals(2956.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2956, hypergeometricDistribution0.getSampleSize());
      assertEquals(2956, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2956, hypergeometricDistribution0.getPopulationSize());
      
      int int2 = hypergeometricDistribution0.getSupportUpperBound();
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(2956, int2);
      assertEquals(2956.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2956, hypergeometricDistribution0.getSampleSize());
      assertEquals(2956, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2956, hypergeometricDistribution0.getPopulationSize());
      
      int int3 = hypergeometricDistribution0.sample();
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(2956, int3);
      assertEquals(2956.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2956, hypergeometricDistribution0.getSampleSize());
      assertEquals(2956, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2956, hypergeometricDistribution0.getPopulationSize());
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      assertEquals(2956.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2956, hypergeometricDistribution0.getSampleSize());
      assertEquals(2956, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2956, hypergeometricDistribution0.getPopulationSize());
      
      double double1 = hypergeometricDistribution0.getNumericalMean();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2956.0, double1, 0.01);
      assertEquals(2956.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2956, hypergeometricDistribution0.getSampleSize());
      assertEquals(2956, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2956, hypergeometricDistribution0.getPopulationSize());
      
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      assertEquals(2956.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2956, hypergeometricDistribution0.getSampleSize());
      assertEquals(2956, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2956, hypergeometricDistribution0.getPopulationSize());
      
      int int4 = hypergeometricDistribution0.getSupportLowerBound();
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      assertTrue(int4 == int1);
      assertFalse(int4 == int0);
      assertEquals(2956, int4);
      assertEquals(2956.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2956, hypergeometricDistribution0.getSampleSize());
      assertEquals(2956, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2956, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int[] intArray0 = new int[7];
      int int0 = 0;
      intArray0[0] = 0;
      intArray0[1] = (-2217);
      intArray0[2] = 3652;
      intArray0[3] = 0;
      int int1 = (-575);
      intArray0[4] = (-575);
      intArray0[5] = (-1198);
      intArray0[6] = 0;
      Well19937c well19937c0 = new Well19937c(intArray0);
      assertArrayEquals(new int[] {0, (-2217), 3652, 0, (-575), (-1198), 0}, intArray0);
      assertEquals(7, intArray0.length);
      assertNotNull(well19937c0);
      
      well19937c0.clear();
      assertArrayEquals(new int[] {0, (-2217), 3652, 0, (-575), (-1198), 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      int int2 = 309;
      well19937c0.setSeed(3652);
      assertArrayEquals(new int[] {0, (-2217), 3652, 0, (-575), (-1198), 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 309, 641, (-2217));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-2,217)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 1;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1, 1, 1);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      int int1 = hypergeometricDistribution0.getSupportLowerBound();
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      try { 
        hypergeometricDistribution0.cumulativeProbability(672, (-1394));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lower endpoint (672) must be less than or equal to upper endpoint (-1,394)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 298;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 298, 298, 278);
      assertEquals(278.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(298, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(278, hypergeometricDistribution0.getSampleSize());
      assertEquals(298, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(278);
      assertEquals(1.0, double0, 0.01);
      assertEquals(278.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(298, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(278, hypergeometricDistribution0.getSampleSize());
      assertEquals(298, hypergeometricDistribution0.getPopulationSize());
      
      double double1 = hypergeometricDistribution0.getNumericalVariance();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(278.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(298, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(278, hypergeometricDistribution0.getSampleSize());
      assertEquals(298, hypergeometricDistribution0.getPopulationSize());
      
      // Undeclared exception!
      try { 
        hypergeometricDistribution0.sample(298);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 1, 1, 1);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(1);
      assertEquals(1.0, double0, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(590, 0, 590);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(590, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(590, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(0, int0);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(590, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(590, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(590, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(590, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int1 = hypergeometricDistribution0.sample();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(590, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(590, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int2 = hypergeometricDistribution0.getSupportLowerBound();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(590, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(590, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(590, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(590, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int3 = hypergeometricDistribution0.solveInverseCumulativeProbability(590, 242, 0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals(0, int3);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(590, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(590, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double1 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.0, double1, 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(590, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(590, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int4 = hypergeometricDistribution0.getSupportLowerBound();
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      assertEquals(0, int4);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(590, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(590, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int5 = hypergeometricDistribution0.getPopulationSize();
      assertFalse(int5 == int4);
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      assertFalse(int5 == int2);
      assertFalse(int5 == int1);
      assertEquals(590, int5);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(590, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(590, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int6 = hypergeometricDistribution0.inverseCumulativeProbability(0.0);
      assertTrue(int6 == int2);
      assertTrue(int6 == int1);
      assertTrue(int6 == int4);
      assertTrue(int6 == int0);
      assertTrue(int6 == int3);
      assertFalse(int6 == int5);
      assertEquals(0, int6);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(590, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(590, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      boolean boolean1 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(590, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(590, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double2 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(590, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(590, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 1083;
      int int1 = 611;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1083, 611, 611);
      hypergeometricDistribution0.solveInverseCumulativeProbability(1083, 611, 611);
      hypergeometricDistribution0.cumulativeProbability(611);
      hypergeometricDistribution0.cumulativeProbability(611);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.cumulativeProbability(611);
      hypergeometricDistribution0.probability((-137));
      // Undeclared exception!
      try { 
        hypergeometricDistribution0.sample((-1253));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1,253)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(626, (-1908), (-1176));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-1,908)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1444, 2, 1444);
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      
      hypergeometricDistribution0.sample(1444);
      hypergeometricDistribution0.reseedRandomGenerator(1444);
      double double1 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(2.0, double1, 0.01);
      
      hypergeometricDistribution0.getNumberOfSuccesses();
      double double2 = hypergeometricDistribution0.upperCumulativeProbability(1444);
      assertEquals(0.0, double2, 0.01);
      
      hypergeometricDistribution0.probability(2);
      double double3 = hypergeometricDistribution0.probability(2);
      assertEquals(1.0, double3, 0.01);
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(1444, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-2459);
      intArray0[1] = 173;
      intArray0[2] = 0;
      intArray0[3] = (-382);
      intArray0[4] = 0;
      intArray0[5] = (-572);
      intArray0[6] = (-1);
      ISAACRandom iSAACRandom0 = new ISAACRandom(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, (-382), 173, (-572));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-382)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }
}
