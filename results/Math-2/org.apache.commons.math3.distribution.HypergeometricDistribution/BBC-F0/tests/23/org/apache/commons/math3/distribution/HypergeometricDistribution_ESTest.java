/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 08:02:48 GMT 2020
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[4];
      Well512a well512a0 = new Well512a(intArray0);
      assertNotNull(well512a0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 480, 1, 2);
      assertNotNull(hypergeometricDistribution0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(480, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.004166666666666667, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(4, intArray0.length);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(1);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(0.0041666666666666675, double0, 0.01);
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(480, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.004166666666666667, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(4, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(781, 781, 781);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(781, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(781, hypergeometricDistribution0.getSampleSize());
      assertEquals(781.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(781, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(781);
      assertEquals(1.0, double0, 0.01);
      assertEquals(781, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(781, hypergeometricDistribution0.getSampleSize());
      assertEquals(781.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(781, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(223);
      assertNotNull(well19937c0);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 608, 223, 1417);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (1,417) must be less than or equal to population size (608)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((-1725), (-1725), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-1,725)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2158, 142, 196);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(2158, hypergeometricDistribution0.getPopulationSize());
      assertEquals(12.897126969416126, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(142, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(196, hypergeometricDistribution0.getSampleSize());
      
      double double0 = hypergeometricDistribution0.probability(0);
      assertEquals(8.259364932199582E-7, double0, 0.01);
      assertEquals(2158, hypergeometricDistribution0.getPopulationSize());
      assertEquals(12.897126969416126, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(142, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(196, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(388, 0, 0);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(388, hypergeometricDistribution0.getPopulationSize());
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(0, int0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(388, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(700, 700, 700);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(700, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(700, hypergeometricDistribution0.getPopulationSize());
      assertEquals(700.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(700, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(700, int0);
      assertEquals(700, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(700, hypergeometricDistribution0.getPopulationSize());
      assertEquals(700.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(700, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(388, 0, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(388, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(0, int0);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(388, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(781, 781, 781);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(781, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(781, hypergeometricDistribution0.getSampleSize());
      assertEquals(781, hypergeometricDistribution0.getPopulationSize());
      assertEquals(781.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(781, int0);
      assertEquals(781, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(781, hypergeometricDistribution0.getSampleSize());
      assertEquals(781, hypergeometricDistribution0.getPopulationSize());
      assertEquals(781.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(291, 291, 291);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(291, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(291.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(291, hypergeometricDistribution0.getSampleSize());
      assertEquals(291, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(291, int0);
      assertEquals(291, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(291.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(291, hypergeometricDistribution0.getSampleSize());
      assertEquals(291, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(781, 781, 781);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(781.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(781, hypergeometricDistribution0.getPopulationSize());
      assertEquals(781, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(781, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      assertEquals(781.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(781, hypergeometricDistribution0.getPopulationSize());
      assertEquals(781, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(781, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2158, 142, 196);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(12.897126969416126, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2158, hypergeometricDistribution0.getPopulationSize());
      assertEquals(196, hypergeometricDistribution0.getSampleSize());
      assertEquals(142, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(10.959252187483816, double0, 0.01);
      assertEquals(12.897126969416126, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2158, hypergeometricDistribution0.getPopulationSize());
      assertEquals(196, hypergeometricDistribution0.getSampleSize());
      assertEquals(142, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1198, 1198, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1198, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1198, hypergeometricDistribution0.getPopulationSize());
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1198, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1198, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(700, 700, 700);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(700, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(700, hypergeometricDistribution0.getSampleSize());
      assertEquals(700.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(700, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(700.0, double0, 0.01);
      assertEquals(700, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(700, hypergeometricDistribution0.getSampleSize());
      assertEquals(700.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(700, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(388, 0, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(388, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(0, int0);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(388, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(781, 781, 781);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(781, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(781.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(781, hypergeometricDistribution0.getPopulationSize());
      assertEquals(781, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(781);
      assertEquals(1.0, double0, 0.01);
      assertEquals(781, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(781.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(781, hypergeometricDistribution0.getPopulationSize());
      assertEquals(781, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(388, 0, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(388, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(388, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Well512a well512a0 = new Well512a((-9223372036854775808L));
      assertNotNull(well512a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 2059, 781, 781);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(781, hypergeometricDistribution0.getSampleSize());
      assertEquals(2059, hypergeometricDistribution0.getPopulationSize());
      assertEquals(781, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(296.2413793103448, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(114.18412066712196, double0, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(781, hypergeometricDistribution0.getSampleSize());
      assertEquals(2059, hypergeometricDistribution0.getPopulationSize());
      assertEquals(781, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(296.2413793103448, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(781, 618, 618);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(618, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(618, hypergeometricDistribution0.getSampleSize());
      assertEquals(489.01920614596673, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(781, hypergeometricDistribution0.getPopulationSize());
      
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      assertNotNull(mersenneTwister0);
      
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(mersenneTwister0, 2059, 473, 724);
      assertNotNull(hypergeometricDistribution1);
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      assertEquals(473, hypergeometricDistribution1.getNumberOfSuccesses());
      assertEquals(724, hypergeometricDistribution1.getSampleSize());
      assertEquals(166.31957260806217, hypergeometricDistribution1.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution1.isSupportConnected());
      assertEquals(2059, hypergeometricDistribution1.getPopulationSize());
      
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(495, int0);
      assertFalse(hypergeometricDistribution0.equals((Object)hypergeometricDistribution1));
      assertNotSame(hypergeometricDistribution0, hypergeometricDistribution1);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(618, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(618, hypergeometricDistribution0.getSampleSize());
      assertEquals(489.01920614596673, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(781, hypergeometricDistribution0.getPopulationSize());
      
      // Undeclared exception!
      hypergeometricDistribution1.upperCumulativeProbability(89);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(781, 781, 781);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(781, hypergeometricDistribution0.getSampleSize());
      assertEquals(781, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(781, hypergeometricDistribution0.getPopulationSize());
      assertEquals(781.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(781, int0);
      assertEquals(781, hypergeometricDistribution0.getSampleSize());
      assertEquals(781, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(781, hypergeometricDistribution0.getPopulationSize());
      assertEquals(781.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(781, 781, 781);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(781, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(781, hypergeometricDistribution0.getPopulationSize());
      assertEquals(781.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(781, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(781, int0);
      assertEquals(781, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(781, hypergeometricDistribution0.getPopulationSize());
      assertEquals(781.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(781, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(388, 0, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(388, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(0, int0);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(388, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(388, 0, 0);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(3132);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(388, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(781, 618, 618);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability((-1228));
      assertEquals(1.0, double0, 0.01);
      assertEquals(489.01920614596673, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(388, 0, 0);
      double double0 = hypergeometricDistribution0.probability(388);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(388, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(781, 781, 781);
      double double0 = hypergeometricDistribution0.probability(399);
      assertEquals(0.0, double0, 0.01);
      assertEquals(781.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(388, 0, 0);
      hypergeometricDistribution0.solveInverseCumulativeProbability(388, 89, 649);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(388, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(781, 618, 618);
      double double0 = hypergeometricDistribution0.cumulativeProbability((-582));
      assertEquals(489.01920614596673, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1, 1, 480);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (480) must be less than or equal to population size (1)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 1779, 2112, 1882);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (2,112) must be less than or equal to population size (1,779)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, (byte)77, 0, (byte) (-94));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-94)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1198, (-1), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-1)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(0, (-1), 388);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(781, 781, 781);
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      assertEquals(781.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3723, 1067, 1692);
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(677);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int[] intArray0 = new int[4];
      Well512a well512a0 = new Well512a(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 480, 1, 2);
      hypergeometricDistribution0.sample();
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(0.004166666666666667, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, int0);
  }
}
