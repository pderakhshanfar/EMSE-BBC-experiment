/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 20:25:03 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 412, 412, 2);
      hypergeometricDistribution0.upperCumulativeProbability((-1042));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(586, 586, 0);
      double double0 = hypergeometricDistribution0.cumulativeProbability(0);
      assertEquals(1.0, double0, 0.01);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(0);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 0, (-4007), (-4007));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, (-2669), (-2669), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-2,669)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3187, 0, 1647);
      double double0 = hypergeometricDistribution0.probability(0);
      assertEquals(3187, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.0, double0, 0.01);
      assertEquals(1647, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(586, 586, 0);
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(0, int0);
      assertEquals(586, hypergeometricDistribution0.getPopulationSize());
      assertEquals(586, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(50, 50, 2);
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(586, 586, 0);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(586, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, int0);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(586, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1047, 1047, 1047);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(1047, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(50, 50, 2);
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(586, 586, 0);
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      assertEquals(586, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(586, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4047, 586, 586);
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(62.07348709866877, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(586, 586, 0);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(586, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double0, 0.01);
      assertEquals(586, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom((int[]) null);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 1264, 809, 809);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(517.7856012658228, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1744, 0, 912);
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(0, int0);
      assertEquals(912, hypergeometricDistribution0.getSampleSize());
      assertEquals(1744, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom((int[]) null);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 1264, 809, 809);
      double double0 = hypergeometricDistribution0.cumulativeProbability((-564));
      assertEquals(0.0, double0, 0.01);
      assertEquals(517.7856012658228, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(586, 586, 0);
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      assertEquals(586, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(586, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom((int[]) null);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 1264, 809, 809);
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(67.14633889953156, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3915, 1666, 2227);
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability(457);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4047, 586, 586);
      double double0 = hypergeometricDistribution0.probability(586);
      assertEquals(0.0, double0, 0.01);
      assertEquals(84.85198912774895, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(586, 586, 0);
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(586, int0);
      assertEquals(586, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1744, 1744, 0);
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(1744, int0);
      assertEquals(1744, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(586, 586, 0);
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(586, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(586, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3868, 386, 386);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(2667);
      assertEquals(0.0, double0, 0.01);
      assertEquals(38.52016546018614, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3187, 0, 1647);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertEquals(3187, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.0, double0, 0.01);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1647, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3868, 386, 386);
      double double0 = hypergeometricDistribution0.probability(3868);
      assertEquals(38.52016546018614, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1744, 1744, 0);
      hypergeometricDistribution0.probability((-160));
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1744, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1744, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3868, 386, 386);
      double double0 = hypergeometricDistribution0.cumulativeProbability(416);
      assertEquals(38.52016546018614, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3936, 2093, 2093);
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(1313);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1595, 364, 1771);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (1,771) must be less than or equal to population size (1,595)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 2, 1452, 289);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (1,452) must be less than or equal to population size (2)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1, 713, (-2319));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-2,319)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1226, (-2560), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-2,560)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3187, 0, 1647);
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(boolean0);
      assertEquals(3187, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1647, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2466, 2379, 2);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(2);
      assertEquals(0.9306712466008299, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2466, 2379, 2);
      hypergeometricDistribution0.sample(23);
      assertEquals(1.9294403892944039, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }
}
