/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 06:55:18 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2991, 732, 584);
      hypergeometricDistribution0.cumulativeProbability(565);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(134217729, 134217729, 594);
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.getSampleSize();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1645, 688, 688);
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(2078, 1645, 1317);
      hypergeometricDistribution1.getSupportLowerBound();
      hypergeometricDistribution1.calculateNumericalVariance();
      hypergeometricDistribution1.isSupportConnected();
      hypergeometricDistribution1.cumulativeProbability((-2769));
      hypergeometricDistribution0.upperCumulativeProbability(268);
      int int0 = hypergeometricDistribution1.solveInverseCumulativeProbability(1645, 0, (-607));
      hypergeometricDistribution0.upperCumulativeProbability(268);
      hypergeometricDistribution1.isSupportConnected();
      hypergeometricDistribution1.getSupportUpperBound();
      int int1 = 228;
      HypergeometricDistribution hypergeometricDistribution2 = null;
      try {
        hypergeometricDistribution2 = new HypergeometricDistribution(int0, int1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-607)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(5393, 5393, 5393);
      hypergeometricDistribution0.cumulativeProbability(5393, 5393);
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(5393, 5393, 5393);
      hypergeometricDistribution1.upperCumulativeProbability(5393);
      hypergeometricDistribution1.getNumberOfSuccesses();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(118L);
      well1024a0.nextLong();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 2090, 2090, 2090);
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.solveInverseCumulativeProbability(1865.618028033307, 2090, 1321);
      hypergeometricDistribution0.sample(2090);
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.upperCumulativeProbability(1321);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.probability(2090);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.upperCumulativeProbability(1135);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.cumulativeProbability(1603);
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(well1024a0, 2090, 175, 0);
      hypergeometricDistribution1.cumulativeProbability(2090);
      hypergeometricDistribution1.getNumericalVariance();
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.calculateNumericalVariance();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1645, 688, 688);
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(2078, 1645, 1317);
      hypergeometricDistribution1.getSupportLowerBound();
      hypergeometricDistribution1.calculateNumericalVariance();
      hypergeometricDistribution1.isSupportConnected();
      hypergeometricDistribution1.cumulativeProbability((-2769));
      hypergeometricDistribution0.upperCumulativeProbability(268);
      hypergeometricDistribution1.solveInverseCumulativeProbability(1645, 0, (-607));
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution1.isSupportConnected();
      hypergeometricDistribution1.getSupportUpperBound();
      HypergeometricDistribution hypergeometricDistribution2 = null;
      try {
        hypergeometricDistribution2 = new HypergeometricDistribution((-607), 228, (-607));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-607)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1645, 688, 688);
      hypergeometricDistribution0.solveInverseCumulativeProbability(1645, 688, 1645);
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.cumulativeProbability(1645);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.reseedRandomGenerator((-1613L));
      hypergeometricDistribution0.probability(236);
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.cumulativeProbability(1645);
      hypergeometricDistribution0.getNumericalMean();
      int int0 = 0;
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(270, 458);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[0];
      Well44497b well44497b0 = new Well44497b(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 1395, 0, 0);
      hypergeometricDistribution0.upperCumulativeProbability(0);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(0.0, double0, 0.01);
      
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getNumericalVariance();
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(0, int0);
      
      double double1 = hypergeometricDistribution0.upperCumulativeProbability((-859));
      assertEquals(1.0, double1, 0.01);
      
      double double2 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double2, 0.01);
      assertEquals(1395, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(118L);
      well1024a0.nextLong();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 2090, 2090, 2090);
      hypergeometricDistribution0.solveInverseCumulativeProbability(1865.618028033307, 2090, 1321);
      hypergeometricDistribution0.sample(2090);
      hypergeometricDistribution0.getNumericalMean();
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(2090, int0);
      
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.upperCumulativeProbability(1321);
      hypergeometricDistribution0.cumulativeProbability((-108), 1272);
      hypergeometricDistribution0.getSampleSize();
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(2090);
      assertEquals(1.0, double0, 0.01);
      
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.getSupportUpperBound();
      double double1 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(2090.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 0;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(16, Integer.MAX_VALUE, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (2,147,483,647) must be less than or equal to population size (16)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1645, 688, 688);
      hypergeometricDistribution0.solveInverseCumulativeProbability(1645, 688, 1645);
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.cumulativeProbability(1645);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.upperCumulativeProbability(688);
      hypergeometricDistribution0.getSampleSize();
      // Undeclared exception!
      hypergeometricDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1102, 0, 1102);
      double double0 = hypergeometricDistribution0.cumulativeProbability(0, 0);
      assertEquals(0.0, double0, 0.01);
      
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.sample();
      double double1 = hypergeometricDistribution0.probability(0);
      assertEquals(Double.NaN, double1, 0.01);
      
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getNumericalVariance();
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(1102, int0);
      
      hypergeometricDistribution0.upperCumulativeProbability(0);
      double double2 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2, 0, 0);
      hypergeometricDistribution0.getSupportLowerBound();
      double double0 = hypergeometricDistribution0.cumulativeProbability(0);
      assertEquals(1.0, double0, 0.01);
      
      hypergeometricDistribution0.isSupportConnected();
      double double1 = hypergeometricDistribution0.cumulativeProbability(2);
      assertEquals(1.0, double1, 0.01);
      
      double double2 = hypergeometricDistribution0.upperCumulativeProbability(2);
      assertEquals(0.0, double2, 0.01);
      
      hypergeometricDistribution0.solveInverseCumulativeProbability(2, 776, 0);
      double double3 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double3, 0.01);
      
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      well1024a0.nextFloat();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 4357, 4357, 4357);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.getSampleSize();
      double double0 = hypergeometricDistribution0.probability(4357);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 482;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 2138;
      intArray0[4] = 0;
      int int0 = 1850;
      intArray0[5] = 1850;
      Well44497a well44497a0 = new Well44497a(intArray0);
      well44497a0.nextBoolean();
      well44497a0.nextGaussian();
      well44497a0.nextFloat();
      well44497a0.clear();
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 2, 0, 136);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (136) must be less than or equal to population size (2)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 0;
      int int1 = (-321);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(0, 0, (-321));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = (-83);
      intArray0[1] = (-128);
      intArray0[2] = 2201;
      intArray0[3] = (-1);
      intArray0[4] = 674;
      Well44497b well44497b0 = new Well44497b(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 674, 0, (-612));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-612)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = (-3592);
      intArray0[0] = (-3592);
      intArray0[1] = 5149;
      Well1024a well1024a0 = new Well1024a(intArray0);
      int int1 = 234;
      well1024a0.nextGaussian();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)1;
      well1024a0.nextBytes(byteArray0);
      well1024a0.clear();
      well1024a0.nextLong(1895L);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 234, (-2125), 5149);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-2,125)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(998, 998, 998);
      hypergeometricDistribution0.reseedRandomGenerator(0L);
      hypergeometricDistribution0.probability(2);
      hypergeometricDistribution0.reseedRandomGenerator(0L);
      hypergeometricDistribution0.solveInverseCumulativeProbability(0.0, 2652, 2652);
      hypergeometricDistribution0.getSupportUpperBound();
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(2652);
      double double1 = hypergeometricDistribution0.upperCumulativeProbability(665);
      hypergeometricDistribution0.probability(2652);
      hypergeometricDistribution0.cumulativeProbability(111, 2652);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.probability(2652);
      hypergeometricDistribution0.reseedRandomGenerator(2365L);
      double double2 = hypergeometricDistribution0.probability(2536);
      assertEquals(double2, double0, 0.01);
      
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.cumulativeProbability(524);
      double double3 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(998.0, double3, 0.01);
      
      double double4 = hypergeometricDistribution0.cumulativeProbability(2, 2536);
      assertEquals(double4, double1, 0.01);
      
      hypergeometricDistribution0.upperCumulativeProbability(0);
      double double5 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double5, 0.01);
      
      double double6 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.0, double6, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 0;
      int int1 = (-3247);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((-1), 0, (-3247));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-1)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = (-3438);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((-3438), (-3438), (-3438));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-3,438)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b((-1116L));
      well44497b0.setSeed((-1116L));
      well44497b0.nextDouble();
      int int0 = 854;
      well44497b0.clear();
      int[] intArray0 = new int[4];
      intArray0[0] = 854;
      intArray0[1] = (-1456);
      well44497b0.setSeed(854);
      intArray0[2] = 854;
      intArray0[3] = 854;
      well44497b0.setSeed(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 854, 854, (-1456));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1,456)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }
}
