/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 06:51:27 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomAdaptor;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[] intArray0 = new int[0];
      Well19937a well19937a0 = new Well19937a(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 1259, 582, 582);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(582);
      assertEquals(0.0, double0, 0.01);
      assertEquals(269.0420969023034, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(1000);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1000, 0, 1000);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1000, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.0, double0, 0.01);
      assertEquals(1000, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(3124);
      RandomAdaptor randomAdaptor0 = new RandomAdaptor(mersenneTwister0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(randomAdaptor0, 3124, 1256, 1350);
      double double0 = hypergeometricDistribution0.cumulativeProbability(1350);
      assertEquals(1.0, double0, 0.01);
      assertEquals(542.7656850192061, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(391, 391, 391);
      double double0 = hypergeometricDistribution0.cumulativeProbability(391);
      assertEquals(1.0, double0, 0.01);
      assertEquals(391.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1477, 582, 1561);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (1,561) must be less than or equal to population size (1,477)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(2, 1939, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (1,939) must be less than or equal to population size (2)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 10000000, 1423, 10000000);
      double double0 = hypergeometricDistribution0.probability(1423);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2898, 340, (byte)0);
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(340, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2898, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[0];
      Well19937a well19937a0 = new Well19937a(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 582, 582, 582);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(582, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2898, 340, (byte)0);
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(340, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2898, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(391, 391, 391);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(391.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(10000000, 10000000, 681);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals((-177.9934592), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(1000);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1000, 0, 1000);
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(1000, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1000, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int[] intArray0 = new int[0];
      Well19937a well19937a0 = new Well19937a(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 582, 582, 582);
      double double0 = hypergeometricDistribution0.cumulativeProbability(80);
      assertEquals(0.0, double0, 0.01);
      assertEquals(582.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[0];
      Well19937a well19937a0 = new Well19937a(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 582, 582, 582);
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(582.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(132755044, 1710, 143);
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.0018419382143115006, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(1000);
      well44497a0.setSeed(1000);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1000, 0, 1000);
      hypergeometricDistribution0.reseedRandomGenerator(17L);
      well44497a0.setSeed(1980);
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(1980, 0, 143);
      hypergeometricDistribution0.reseedRandomGenerator(1980);
      HypergeometricDistribution hypergeometricDistribution2 = new HypergeometricDistribution(132755044, 1710, 143);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(3124);
      RandomAdaptor randomAdaptor0 = new RandomAdaptor(mersenneTwister0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(randomAdaptor0, 3124, 1256, 1350);
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(542.7656850192061, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3124, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(3124);
      RandomAdaptor randomAdaptor0 = new RandomAdaptor(mersenneTwister0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(randomAdaptor0, 3124, 1256, 1350);
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(542.7656850192061, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1256, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(3124);
      RandomAdaptor randomAdaptor0 = new RandomAdaptor(mersenneTwister0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(randomAdaptor0, 3124, 1256, 1350);
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(542.7656850192061, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1350, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 10000000, 1423, 10000000);
      hypergeometricDistribution0.sample();
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(134.5098112, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(582, (byte)16, (byte)16);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(1);
      assertEquals(0.3636188473640992, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(3124);
      RandomAdaptor randomAdaptor0 = new RandomAdaptor(mersenneTwister0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(randomAdaptor0, 3124, 1256, 1350);
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability(257);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int[] intArray0 = new int[0];
      Well19937a well19937a0 = new Well19937a(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 582, 582, 582);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability((-449));
      assertEquals(582.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(3124);
      RandomAdaptor randomAdaptor0 = new RandomAdaptor(mersenneTwister0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(randomAdaptor0, 3124, 1256, 1350);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(3124);
      assertEquals(542.7656850192061, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(1000);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1000, 0, 1000);
      double double0 = hypergeometricDistribution0.probability(1187);
      assertEquals(1000, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double0, 0.01);
      assertEquals(1000, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int[] intArray0 = new int[0];
      Well19937a well19937a0 = new Well19937a(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 582, 582, 582);
      double double0 = hypergeometricDistribution0.probability((-1616));
      assertEquals(0.0, double0, 0.01);
      assertEquals(582.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int[] intArray0 = new int[2];
      Well1024a well1024a0 = new Well1024a(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 339, 681, 681);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (681) must be less than or equal to population size (339)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(224, 681, (-144));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-144)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(1000);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1, (-1), 1187);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-1)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, (byte) (-114), (byte)16, 670);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-114)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(582, (byte)16, (byte)16);
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(0.43986254295532645, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(16, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 10000000, 1423, 10000000);
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertEquals(134.5098112, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(3124);
      RandomAdaptor randomAdaptor0 = new RandomAdaptor(mersenneTwister0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(randomAdaptor0, 3124, 1256, 1350);
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(184.3570969178088, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(1000);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1000, 0, 1000);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(1000, hypergeometricDistribution0.getSampleSize());
      assertEquals(1000, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2766, 770, 1222);
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(536);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2766, 770, 1222);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(340.18076644974695, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, int0);
  }
}
