/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 16:26:29 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Well512a well512a0 = new Well512a((long) 1780);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 1780, 1780, 29);
      hypergeometricDistribution0.getNumericalVariance();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(829, 829, 829);
      hypergeometricDistribution0.upperCumulativeProbability(829);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 2779, 1323, 2280);
      // Undeclared exception!
      hypergeometricDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Well512a well512a0 = new Well512a((long) 1780);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 1780, 1780, 29);
      double double0 = hypergeometricDistribution0.probability(29);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(733, 440, 440);
      double double0 = hypergeometricDistribution0.cumulativeProbability(440);
      assertEquals(264.1200545702592, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(733, 440, 440);
      double double0 = hypergeometricDistribution0.cumulativeProbability(147);
      assertEquals(4.452507326663539E-93, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((-37), (-37), 323);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-37)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(733, 440, 440);
      double double0 = hypergeometricDistribution0.probability(440);
      assertEquals(2.0513109536068006E-213, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(514);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 514, 0, 0);
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(514, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, int0);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(733, 440, 440);
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(264.1200545702592, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(440, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(514);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 514, 0, 0);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(514, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(733, 440, 440);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(147, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[8];
      ISAACRandom iSAACRandom0 = new ISAACRandom(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 1774, 0, 0);
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, int0);
      assertEquals(1774, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(733, 440, 440);
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(42.259228421268574, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(0L);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 482, 0, 0);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(482, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(733, 440, 440);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(264.1200545702592, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(0L);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 482, 0, 0);
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(0, int0);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(482, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(471, 471, 471);
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      assertEquals(471.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(733, 440, 440);
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(42.259228421268574, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(733, 440, 440);
      hypergeometricDistribution0.sample();
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability(232);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1483, 1483, 1830);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (1,830) must be less than or equal to population size (1,483)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(0L);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 482, 0, 0);
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(482, int0);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(733, 440, 440);
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(264.1200545702592, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(440, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(733, 440, 440);
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(264.1200545702592, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(440, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Well512a well512a0 = new Well512a((long) 1780);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 1780, 1780, 29);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(1536);
      assertEquals(0.0, double0, 0.01);
      assertEquals(29.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(733, 440, 440);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability((-1484));
      assertEquals(1.0, double0, 0.01);
      assertEquals(264.1200545702592, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1223, 829, 936);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(829);
      assertEquals(7.90366025099513E-190, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(733, 440, 440);
      double double0 = hypergeometricDistribution0.probability(0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(264.1200545702592, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(733, 440, 440);
      hypergeometricDistribution0.sample();
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(345);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(733, 440, 440);
      double double0 = hypergeometricDistribution0.cumulativeProbability((-1484));
      assertEquals(264.1200545702592, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(829, 829, 829);
      double double0 = hypergeometricDistribution0.cumulativeProbability(936);
      assertEquals(829.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a((int[]) null);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 829, 354, 1166);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (1,166) must be less than or equal to population size (829)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(jDKRandomGenerator0, 1, 1920, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (1,920) must be less than or equal to population size (1)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 550, 735, (-38));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-38)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(201, (-2122), 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-2,122)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(0, (-76), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(514);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 514, 0, 0);
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(boolean0);
      assertEquals(514, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(829, 829, 829);
      double double0 = hypergeometricDistribution0.probability(936);
      assertEquals(0.0, double0, 0.01);
      assertEquals(829.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(829, 829, 829);
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(829.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(829, int0);
  }
}
