/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 16:27:50 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.SynchronizedRandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 4712, 1897, (byte)2);
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(0, int0);
      assertEquals(0.8051782682512734, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Well512a well512a0 = new Well512a(2970);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 2970, 1586, 1586);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(1586);
      assertEquals(846.9346801346801, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 1, 1, 1);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(1);
      assertEquals(1.0, double0, 0.01);
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 1, 1, 1);
      double double0 = hypergeometricDistribution0.cumulativeProbability(264, 283);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(0, 210, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 4712, 1897, (byte)2);
      double double0 = hypergeometricDistribution0.probability(0);
      assertEquals(0.3568486895713134, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(287, 0, 0);
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(287, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, int0);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3408, 3408, 3408);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(3408, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(866);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 1132, 0, 0);
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, int0);
      assertEquals(1132, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3408, 3408, 3408);
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(3408.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int[] intArray0 = new int[4];
      ISAACRandom iSAACRandom0 = new ISAACRandom(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 241, 241, 0);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(241, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double0, 0.01);
      assertEquals(241, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4519, 4519, 4519);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(4519.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3408, 3408, 3408);
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(3408.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3408, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3408, 3408, 3408);
      double double0 = hypergeometricDistribution0.cumulativeProbability((-1141));
      assertEquals(3408.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Well512a well512a0 = new Well512a(2970);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 2970, 1586, 1586);
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(183.97357596080417, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Well512a well512a0 = new Well512a(2970);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 2970, 1586, 1586);
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability(280);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(1637L);
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(mersenneTwister0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(synchronizedRandomGenerator0, 6185, 797, 1362);
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(549);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(238, 279, 238);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (279) must be less than or equal to population size (238)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Well512a well512a0 = new Well512a(2970);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 2970, 1586, 1586);
      double double0 = hypergeometricDistribution0.probability(280);
      assertEquals(0.0, double0, 0.01);
      assertEquals(846.9346801346801, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Well512a well512a0 = new Well512a((int[]) null);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 979, 979, 979);
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(979.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(979, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(866);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 1132, 0, 0);
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(0, int0);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1132, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Well512a well512a0 = new Well512a(2970);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 2970, 1586, 1586);
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(846.9346801346801, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1586, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Well512a well512a0 = new Well512a(2970);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 2970, 1586, 1586);
      hypergeometricDistribution0.getNumericalVariance();
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(183.97357596080417, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Well512a well512a0 = new Well512a(2970);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 2970, 1586, 1586);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability((-2142));
      assertEquals(846.9346801346801, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 4712, 1897, (byte)2);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(1176);
      assertEquals(0.8051782682512734, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Well512a well512a0 = new Well512a(2970);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 2970, 1586, 1586);
      double double0 = hypergeometricDistribution0.probability(2970);
      assertEquals(846.9346801346801, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Well512a well512a0 = new Well512a(2970);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 2970, 1586, 1586);
      double double0 = hypergeometricDistribution0.probability((-3395));
      assertEquals(0.0, double0, 0.01);
      assertEquals(846.9346801346801, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Well512a well512a0 = new Well512a(1223);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 4248, 101, 4383);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (4,383) must be less than or equal to population size (4,248)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(1498L);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 165, 981, 981);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (981) must be less than or equal to population size (165)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(737, 737, (-444));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-444)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(4052, (-420), (-1374));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-420)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int[] intArray0 = new int[0];
      Well19937c well19937c0 = new Well19937c(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, (-1), (-1), 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-1)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 4712, 1897, (byte)2);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(0.8051782682512734, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Well512a well512a0 = new Well512a(2970);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 2970, 1586, 1586);
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(846.9346801346801, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1586, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Well512a well512a0 = new Well512a(2970);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 2970, 1586, 1586);
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      assertEquals(846.9346801346801, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(866);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 1132, 0, 0);
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(1132, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(Integer.MAX_VALUE, Integer.MAX_VALUE, 118);
      double double0 = hypergeometricDistribution0.cumulativeProbability(118);
      assertEquals((-5.4948031927900404E-8), hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(Integer.MAX_VALUE, Integer.MAX_VALUE, 118);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals((-5.4948031927900404E-8), double0, 0.01);
  }
}
