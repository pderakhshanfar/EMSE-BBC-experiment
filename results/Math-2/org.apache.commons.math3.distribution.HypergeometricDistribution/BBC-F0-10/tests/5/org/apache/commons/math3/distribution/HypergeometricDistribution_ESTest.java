/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 16:01:42 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497b;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 1768, 1677, 186);
      assertEquals(1677, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1768, hypergeometricDistribution0.getPopulationSize());
      assertEquals(176.4264705882353, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(186, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(186);
      assertEquals(3.049174590702477E-5, double0, 0.01);
      assertEquals(1677, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1768, hypergeometricDistribution0.getPopulationSize());
      assertEquals(176.4264705882353, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(186, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int[] intArray0 = new int[0];
      ISAACRandom iSAACRandom0 = new ISAACRandom(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(iSAACRandom0);
      assertArrayEquals(new int[] {}, intArray0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 1677, 607, 1677);
      assertEquals(0, intArray0.length);
      assertEquals(607.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(607, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1677, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1677, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      assertArrayEquals(new int[] {}, intArray0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(607);
      assertEquals(1.0, double0, 0.01);
      assertEquals(0, intArray0.length);
      assertEquals(607.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(607, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1677, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1677, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(31);
      assertNotNull(well19937c0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 310, 31, 31);
      assertEquals(3.1, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(31, hypergeometricDistribution0.getSampleSize());
      assertEquals(310, hypergeometricDistribution0.getPopulationSize());
      assertEquals(31, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(0, 310);
      assertEquals(0.9681068242455243, double0, 0.01);
      assertEquals(3.1, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(31, hypergeometricDistribution0.getSampleSize());
      assertEquals(310, hypergeometricDistribution0.getPopulationSize());
      assertEquals(31, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((-3904), (-3904), 1258);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-3,904)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      assertNotNull(well1024a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1768, 1175, 0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1175, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1768, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(0, int0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1175, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1768, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2352, 0, 0);
      assertEquals(2352, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(0, int0);
      assertEquals(2352, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 1768, 1677, 186);
      assertEquals(186, hypergeometricDistribution0.getSampleSize());
      assertEquals(176.4264705882353, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1768, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1677, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(95, int0);
      assertEquals(186, hypergeometricDistribution0.getSampleSize());
      assertEquals(176.4264705882353, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1768, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1677, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1258, 1258, 0);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1258, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1258, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(0, int0);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1258, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1258, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[0];
      ISAACRandom iSAACRandom0 = new ISAACRandom(intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(iSAACRandom0);
      assertArrayEquals(new int[] {}, intArray0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 1677, 607, 1677);
      assertEquals(0, intArray0.length);
      assertEquals(607.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(607, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1677, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1677, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      assertArrayEquals(new int[] {}, intArray0);
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, intArray0.length);
      assertEquals(607.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(607, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1677, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1677, hypergeometricDistribution0.getSampleSize());
      assertArrayEquals(new int[] {}, intArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2352, 0, 0);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(2352, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(2352, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1187, 1187, 1187);
      assertEquals(1187, hypergeometricDistribution0.getSampleSize());
      assertEquals(1187, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1187, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1187.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(1187.0, double0, 0.01);
      assertEquals(1187, hypergeometricDistribution0.getSampleSize());
      assertEquals(1187, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1187, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1187.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2352, 0, 0);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(2352, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(0, int0);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(2352, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 1768, 1677, 186);
      assertEquals(1768, hypergeometricDistribution0.getPopulationSize());
      assertEquals(186, hypergeometricDistribution0.getSampleSize());
      assertEquals(176.4264705882353, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1677, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(8.130042342014205, double0, 0.01);
      assertEquals(1768, hypergeometricDistribution0.getPopulationSize());
      assertEquals(186, hypergeometricDistribution0.getSampleSize());
      assertEquals(176.4264705882353, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1677, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      assertNotNull(jDKRandomGenerator0);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(jDKRandomGenerator0, 2, 763, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (763) must be less than or equal to population size (2)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(305, 15, 2);
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.09836065573770492, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(305, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(15, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.probability(2);
      assertEquals(0.002264883520276101, double0, 0.01);
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.09836065573770492, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(305, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(15, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 1768, 1677, 186);
      assertEquals(1677, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(186, hypergeometricDistribution0.getSampleSize());
      assertEquals(1768, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(176.4264705882353, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(1768, int0);
      assertEquals(1677, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(186, hypergeometricDistribution0.getSampleSize());
      assertEquals(1768, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(176.4264705882353, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 1768, 1677, 186);
      assertEquals(176.4264705882353, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(186, hypergeometricDistribution0.getSampleSize());
      assertEquals(1768, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1677, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(1677, int0);
      assertEquals(176.4264705882353, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(186, hypergeometricDistribution0.getSampleSize());
      assertEquals(1768, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1677, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 1768, 1677, 186);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1768, hypergeometricDistribution0.getPopulationSize());
      assertEquals(186, hypergeometricDistribution0.getSampleSize());
      assertEquals(176.4264705882353, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1677, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(186, int0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1768, hypergeometricDistribution0.getPopulationSize());
      assertEquals(186, hypergeometricDistribution0.getSampleSize());
      assertEquals(176.4264705882353, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1677, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 1768, 1677, 186);
      assertEquals(1768, hypergeometricDistribution0.getPopulationSize());
      assertEquals(186, hypergeometricDistribution0.getSampleSize());
      assertEquals(1677, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(176.4264705882353, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(8.130042342014205, double0, 0.01);
      assertEquals(1768, hypergeometricDistribution0.getPopulationSize());
      assertEquals(186, hypergeometricDistribution0.getSampleSize());
      assertEquals(1677, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(176.4264705882353, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double1 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(8.130042342014205, double1, 0.01);
      assertEquals(1768, hypergeometricDistribution0.getPopulationSize());
      assertEquals(186, hypergeometricDistribution0.getSampleSize());
      assertEquals(1677, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(176.4264705882353, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2071, 714, 714);
      assertEquals(246.15934331240948, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2071, hypergeometricDistribution0.getPopulationSize());
      assertEquals(714, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(714, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(9);
      assertEquals(7.366440924203193E-152, double0, 0.01);
      assertEquals(246.15934331240948, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2071, hypergeometricDistribution0.getPopulationSize());
      assertEquals(714, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(714, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(305, 15, 2);
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.09836065573770492, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(15, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(305, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(305);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.09836065573770492, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(15, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(305, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4475, 1901, 818);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability((-441));
      assertEquals(1.0, double0, 0.01);
      assertEquals(347.49005586592176, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 1768, 1677, 186);
      double double0 = hypergeometricDistribution0.probability(1768);
      assertEquals(0.0, double0, 0.01);
      assertEquals(176.4264705882353, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int[] intArray0 = new int[0];
      ISAACRandom iSAACRandom0 = new ISAACRandom(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 1677, 607, 1677);
      double double0 = hypergeometricDistribution0.probability(571);
      assertEquals(0.0, double0, 0.01);
      assertEquals(607.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2071, 714, 714);
      double double0 = hypergeometricDistribution0.cumulativeProbability(714);
      assertEquals(1.0, double0, 0.01);
      assertEquals(246.15934331240948, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2071, 714, 714);
      double double0 = hypergeometricDistribution0.cumulativeProbability((-142));
      assertEquals(0.0, double0, 0.01);
      assertEquals(246.15934331240948, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4475, 1901, 818);
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(561);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(291, 2, 766);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (766) must be less than or equal to population size (291)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(907, 1638, 1638);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (1,638) must be less than or equal to population size (907)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(601, 1092, (-3147));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-3,147)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(1943);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 1943, (-1025), (-4210));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-1,025)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(31);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, (-963), 999, (-963));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-963)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 1768, 1677, 186);
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(176.4264705882353, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(186, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(305, 305, 305);
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      assertEquals(305.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(305, 305, 305);
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(305.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3134, 1266, 1266);
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability(2);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(8388588, 8388588, 8388588);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals((-40.00004768382951), double0, 0.01);
  }
}
