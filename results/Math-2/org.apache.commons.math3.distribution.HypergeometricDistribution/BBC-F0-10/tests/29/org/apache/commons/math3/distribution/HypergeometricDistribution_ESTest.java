/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 16:38:28 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3095, 1451, 32);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3095, hypergeometricDistribution0.getPopulationSize());
      assertEquals(32, hypergeometricDistribution0.getSampleSize());
      assertEquals(1451, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(15.002261712439418, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(32);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3095, hypergeometricDistribution0.getPopulationSize());
      assertEquals(32, hypergeometricDistribution0.getSampleSize());
      assertEquals(1451, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(15.002261712439418, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2.468940445276637E-11, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1313, 1313, 33);
      assertEquals(33, hypergeometricDistribution0.getSampleSize());
      assertEquals(1313, hypergeometricDistribution0.getPopulationSize());
      assertEquals(33.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1313, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability((-611));
      assertEquals(33, hypergeometricDistribution0.getSampleSize());
      assertEquals(1313, hypergeometricDistribution0.getPopulationSize());
      assertEquals(33.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1313, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(207, 207, 0);
      assertEquals(207, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(207, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(207);
      assertEquals(207, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(207, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(1250);
      assertNotNull(well19937c0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 1250, 217, 0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(217, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1250, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(217, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1250, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(1259);
      assertNotNull(well44497a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 3095, 3095, 87);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3095, hypergeometricDistribution0.getPopulationSize());
      assertEquals(87, hypergeometricDistribution0.getSampleSize());
      assertEquals(87.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3095, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3095, hypergeometricDistribution0.getPopulationSize());
      assertEquals(87, hypergeometricDistribution0.getSampleSize());
      assertEquals(87.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3095, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(87, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(207, 207, 0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(207, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(207, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(207, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(207, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1313, 1313, 33);
      assertEquals(1313, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(33, hypergeometricDistribution0.getSampleSize());
      assertEquals(33.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1313, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(1313, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(33, hypergeometricDistribution0.getSampleSize());
      assertEquals(33.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1313, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Well512a well512a0 = new Well512a(4607182418800017408L);
      assertNotNull(well512a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 2259, 975, 975);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(420.8167330677291, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(975, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2259, hypergeometricDistribution0.getPopulationSize());
      assertEquals(975, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(420.8167330677291, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(975, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2259, hypergeometricDistribution0.getPopulationSize());
      assertEquals(975, hypergeometricDistribution0.getSampleSize());
      assertEquals(136.01377030457246, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a((-1724L));
      assertNotNull(well44497a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 4807, 4807, 0);
      assertEquals(4807, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(4807, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(4807, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(4807, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Well512a well512a0 = new Well512a(4607182418800017408L);
      assertNotNull(well512a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 2259, 975, 975);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(975, hypergeometricDistribution0.getSampleSize());
      assertEquals(420.8167330677291, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(975, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2259, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(975, hypergeometricDistribution0.getSampleSize());
      assertEquals(420.8167330677291, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(975, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2259, hypergeometricDistribution0.getPopulationSize());
      assertEquals(420.8167330677291, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(568, 0, 121);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(568, hypergeometricDistribution0.getPopulationSize());
      assertEquals(121, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(568, hypergeometricDistribution0.getPopulationSize());
      assertEquals(121, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      assertNotNull(jDKRandomGenerator0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(jDKRandomGenerator0, 1364, 0, 0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1364, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1364, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Well512a well512a0 = new Well512a(4607182418800017408L);
      assertNotNull(well512a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 2259, 975, 975);
      assertEquals(975, hypergeometricDistribution0.getSampleSize());
      assertEquals(2259, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(975, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(420.8167330677291, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(701);
      assertEquals(975, hypergeometricDistribution0.getSampleSize());
      assertEquals(2259, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(975, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(420.8167330677291, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.9999999999999998, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 709, (-866), 709);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-866)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3095, 1451, 32);
      assertEquals(32, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1451, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3095, hypergeometricDistribution0.getPopulationSize());
      assertEquals(15.002261712439418, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.probability(32);
      assertEquals(32, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1451, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3095, hypergeometricDistribution0.getPopulationSize());
      assertEquals(15.002261712439418, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2.468940445276637E-11, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Well512a well512a0 = new Well512a(4607182418800017408L);
      assertNotNull(well512a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 2259, 975, 975);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(975, hypergeometricDistribution0.getSampleSize());
      assertEquals(2259, hypergeometricDistribution0.getPopulationSize());
      assertEquals(420.8167330677291, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(975, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(975, hypergeometricDistribution0.getSampleSize());
      assertEquals(2259, hypergeometricDistribution0.getPopulationSize());
      assertEquals(420.8167330677291, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(975, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2259, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Well512a well512a0 = new Well512a(4607182418800017408L);
      assertNotNull(well512a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 2259, 975, 975);
      assertEquals(420.8167330677291, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(975, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2259, hypergeometricDistribution0.getPopulationSize());
      assertEquals(975, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(420.8167330677291, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(975, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2259, hypergeometricDistribution0.getPopulationSize());
      assertEquals(975, hypergeometricDistribution0.getSampleSize());
      assertEquals(975, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3095, 849, 849);
      assertEquals(232.89208400646203, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(849, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3095, hypergeometricDistribution0.getPopulationSize());
      assertEquals(849, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(232.89208400646203, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(849, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3095, hypergeometricDistribution0.getPopulationSize());
      assertEquals(849, hypergeometricDistribution0.getSampleSize());
      assertEquals(849, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(755, 755, 755);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(755, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(755, hypergeometricDistribution0.getPopulationSize());
      assertEquals(755.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(755, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      int[] intArray0 = hypergeometricDistribution0.sample(755);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(755, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(755, hypergeometricDistribution0.getPopulationSize());
      assertEquals(755.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(755, hypergeometricDistribution0.getSampleSize());
      assertEquals(755, intArray0.length);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1313, 1313, 33);
      assertEquals(1313, hypergeometricDistribution0.getPopulationSize());
      assertEquals(33.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(33, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1313, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(137);
      assertEquals(1313, hypergeometricDistribution0.getPopulationSize());
      assertEquals(33.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(33, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1313, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(755, 755, 755);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(755, hypergeometricDistribution0.getSampleSize());
      assertEquals(755.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(755, hypergeometricDistribution0.getPopulationSize());
      assertEquals(755, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(755);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(755, hypergeometricDistribution0.getSampleSize());
      assertEquals(755.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(755, hypergeometricDistribution0.getPopulationSize());
      assertEquals(755, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a((-1724L));
      assertNotNull(well44497a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 4807, 4807, 0);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(4807, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(4807, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.probability(2272);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(4807, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(4807, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(755, 755, 755);
      assertEquals(755, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(755, hypergeometricDistribution0.getSampleSize());
      assertEquals(755.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(755, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.probability(296);
      assertEquals(755, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(755, hypergeometricDistribution0.getSampleSize());
      assertEquals(755.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(755, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Well512a well512a0 = new Well512a(4607182418800017408L);
      assertNotNull(well512a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 2259, 975, 975);
      assertEquals(420.8167330677291, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(975, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(975, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2259, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(0);
      assertEquals(420.8167330677291, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(975, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(975, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2259, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3095, 1451, 32);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(15.002261712439418, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1451, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3095, hypergeometricDistribution0.getPopulationSize());
      assertEquals(32, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.cumulativeProbability((-1225));
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(15.002261712439418, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1451, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3095, hypergeometricDistribution0.getPopulationSize());
      assertEquals(32, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3095, 849, 849);
      assertEquals(849, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(232.89208400646203, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3095, hypergeometricDistribution0.getPopulationSize());
      assertEquals(849, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(849);
      assertEquals(849, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(232.89208400646203, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3095, hypergeometricDistribution0.getPopulationSize());
      assertEquals(849, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1451, 155, 3095);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (3,095) must be less than or equal to population size (1,451)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int[] intArray0 = new int[6];
      Well44497b well44497b0 = new Well44497b(intArray0);
      assertEquals(6, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(well44497b0);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 1, 1599, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (1,599) must be less than or equal to population size (1)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(3701, 2661, (-460));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-460)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((-912), 1549, 1510);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-912)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3095, 849, 849);
      assertEquals(849, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(232.89208400646203, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3095, hypergeometricDistribution0.getPopulationSize());
      assertEquals(849, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(849, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(232.89208400646203, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3095, hypergeometricDistribution0.getPopulationSize());
      assertEquals(849, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Well512a well512a0 = new Well512a(4607182418800017408L);
      assertNotNull(well512a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 2259, 975, 975);
      assertEquals(2259, hypergeometricDistribution0.getPopulationSize());
      assertEquals(975, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(975, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(420.8167330677291, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(2259, hypergeometricDistribution0.getPopulationSize());
      assertEquals(975, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(975, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(420.8167330677291, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(975, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3095, 849, 849);
      assertEquals(849, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(232.89208400646203, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3095, hypergeometricDistribution0.getPopulationSize());
      assertEquals(849, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertEquals(849, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(232.89208400646203, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3095, hypergeometricDistribution0.getPopulationSize());
      assertEquals(849, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3095, 849, 849);
      assertEquals(849, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3095, hypergeometricDistribution0.getPopulationSize());
      assertEquals(232.89208400646203, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(849, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(849, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3095, hypergeometricDistribution0.getPopulationSize());
      assertEquals(232.89208400646203, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(849, hypergeometricDistribution0.getSampleSize());
      assertEquals(122.6855087750163, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3228, 1230, 1230);
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability(79);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(8388607, 8388607, 8388607);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals((-2.0000001192093038), double0, 0.01);
  }
}
