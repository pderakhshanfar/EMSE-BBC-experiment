/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 20:21:03 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomAdaptor;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well44497a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1684, 930, 930);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(930);
      assertEquals(0.0, double0, 0.01);
      assertEquals(513.5985748218527, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1684, 0, 215);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability((-1));
      assertEquals(1.0, double0, 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(215, hypergeometricDistribution0.getSampleSize());
      assertEquals(1684, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(704, 704, 704);
      double double0 = hypergeometricDistribution0.cumulativeProbability(704, 2264);
      assertEquals(704.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(1L);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1684, 0, 215);
      double double0 = hypergeometricDistribution0.probability(0);
      assertEquals(1684, hypergeometricDistribution0.getPopulationSize());
      assertEquals(215, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(0L);
      RandomAdaptor randomAdaptor0 = new RandomAdaptor(well44497a0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(randomAdaptor0, 2524, 0, 1103);
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(0, int0);
      assertEquals(1103, hypergeometricDistribution0.getSampleSize());
      assertEquals(2524, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1265, 1265, 1265);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(1265, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 6000, 378, 0);
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(378, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(6000, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1265, 1265, 1265);
      int[] intArray0 = hypergeometricDistribution0.sample(1265);
      Well19937a well19937a0 = new Well19937a(intArray0);
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(well19937a0, 1748, 98, 863);
      double double0 = hypergeometricDistribution1.getNumericalVariance();
      assertEquals(23.136002617033032, double0, 0.01);
      assertEquals(48.38329519450801, hypergeometricDistribution1.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1684, 0, 215);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1684, hypergeometricDistribution0.getPopulationSize());
      assertEquals(215, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(450, 450, 116);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(116.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(0L);
      RandomAdaptor randomAdaptor0 = new RandomAdaptor(well44497a0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(randomAdaptor0, 2524, 0, 1103);
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(2524, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1103, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1265, 1265, 1265);
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(1265.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(0L);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 6004, 1430, 1430);
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(197.7036489308235, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a((-1907L));
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 6004, 378, 862);
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(47, int0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(47);
      assertEquals(0.8818524262894244, double0, 0.01);
      assertEquals(54.269820119920055, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(2699L);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 2, 6004, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (6,004) must be less than or equal to population size (2)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1265, 1265, 1265);
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(1265.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1265, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1265, 1265, 1265);
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(1265.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1265, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1265, 1265, 1265);
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(1265.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1265, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(0L);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 6004, 1430, 1430);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(6004);
      assertEquals(340.5896069287142, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1684, 0, 215);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertEquals(215, hypergeometricDistribution0.getSampleSize());
      assertEquals(1684, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.0, double0, 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a((-1907L));
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 6004, 378, 862);
      double double0 = hypergeometricDistribution0.probability(862);
      assertEquals(54.269820119920055, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(320, 320, 320);
      double double0 = hypergeometricDistribution0.probability(0);
      assertEquals(320.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1684, 0, 215);
      double double0 = hypergeometricDistribution0.cumulativeProbability(1684);
      assertEquals(1.0, double0, 0.01);
      assertEquals(215, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1684, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1265, 1265, 1265);
      double double0 = hypergeometricDistribution0.cumulativeProbability(96);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1265.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(4197, 85, 6004);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (6,004) must be less than or equal to population size (4,197)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1755, 6004, 408);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (6,004) must be less than or equal to population size (1,755)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(2, 108, (-66));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-66)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int[] intArray0 = new int[9];
      ISAACRandom iSAACRandom0 = new ISAACRandom(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 1301, (-986), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-986)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((-1004), 0, 1684);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-1,004)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1684, 0, 215);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(0, int0);
      assertEquals(215, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1684, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(0L);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 6004, 1430, 1430);
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(340.5896069287142, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1430, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(110528808, 110528808, 110528808);
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      assertEquals((-4.195679229617676), hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1684, 0, 215);
      hypergeometricDistribution0.getNumericalVariance();
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      assertEquals(215, hypergeometricDistribution0.getSampleSize());
      assertEquals(1684, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4140, 1331, 1331);
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(1104);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(110528808, 110528808, 110528808);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals((-4.195679229617676), double0, 0.01);
  }
}
