/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 20:19:24 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(736, 534, 736);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(534);
      assertEquals(1.0, double0, 0.01);
      assertEquals(534.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1495, 984, 0);
      double double0 = hypergeometricDistribution0.cumulativeProbability(0, 1495);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1495, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double0, 0.01);
      assertEquals(984, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, (-3013), (-1374), (-3013));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-3,013)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1495, 984, 0);
      double double0 = hypergeometricDistribution0.probability(0);
      assertEquals(1495, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.0, double0, 0.01);
      assertEquals(984, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1383, 0, 115);
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(0, int0);
      assertEquals(1383, hypergeometricDistribution0.getPopulationSize());
      assertEquals(115, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(736, 534, 736);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(534, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1383, 0, 0);
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(1383, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, int0);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(736, 534, 736);
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      assertEquals(534, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4524, 1, 1);
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(2.2099446434029806E-4, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1383, 0, 115);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(115, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double0, 0.01);
      assertEquals(1383, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(1);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 430, 1, 1);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(0.002325581395348837, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1495, 984, 0);
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(984, int0);
      assertEquals(1495, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2, 2, 2);
      double double0 = hypergeometricDistribution0.cumulativeProbability(0);
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1800, 0, 564);
      double double0 = hypergeometricDistribution0.cumulativeProbability(0);
      assertEquals(1.0, double0, 0.01);
      assertEquals(1800, hypergeometricDistribution0.getPopulationSize());
      assertEquals(564, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1960, 1960, 1960);
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1960.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4524, 21, 21);
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.09659857128340747, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(6212, 4639, 588);
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability(2);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(2, 1255, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (1,255) must be less than or equal to population size (2)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(736, 534, 736);
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(534.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(736, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1800, 0, 564);
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(564, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1800, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1171, 1171, 1171);
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(1171.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1171, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4524, 1, 1);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(4524);
      assertEquals(2.2104332449160034E-4, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1171, 1171, 1171);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(687);
      assertEquals(1171.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4524, 21, 21);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(21);
      assertEquals(9.17401546422504E-58, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(736, 534, 736);
      double double0 = hypergeometricDistribution0.probability(736);
      assertEquals(0.0, double0, 0.01);
      assertEquals(534.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(736, 534, 736);
      double double0 = hypergeometricDistribution0.probability(2);
      assertEquals(534.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Well512a well512a0 = new Well512a((long) 736);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 736, 0, 1948);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (1,948) must be less than or equal to population size (736)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(771, 4524, (-2964));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-2,964)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1, (-2511), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-2,511)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int[] intArray0 = new int[6];
      Well1024a well1024a0 = new Well1024a(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 0, 1016, 2080);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1383, 0, 115);
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      assertEquals(1383, hypergeometricDistribution0.getPopulationSize());
      assertEquals(115, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4524, 21, 21);
      // Undeclared exception!
      hypergeometricDistribution0.sample(4524);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4038, 1577, 1218);
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(975);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4524, 21, 21);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(0.09748010610079576, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4524, 21, 21);
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(0.09748010610079576, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(21, int0);
  }
}
