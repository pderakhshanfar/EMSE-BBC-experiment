/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 16:27:43 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2074, 1386, 1386);
      assertEquals(926.2275795564127, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2074, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1386, hypergeometricDistribution0.getSampleSize());
      assertEquals(1386, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.probability(0);
      assertEquals(926.2275795564127, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2074, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1386, hypergeometricDistribution0.getSampleSize());
      assertEquals(1386, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double0, 0.01);
      
      int int0 = 1;
      hypergeometricDistribution0.reseedRandomGenerator((-916L));
      assertEquals(926.2275795564127, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2074, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1386, hypergeometricDistribution0.getSampleSize());
      assertEquals(1386, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double1 = hypergeometricDistribution0.upperCumulativeProbability(1);
      assertEquals(926.2275795564127, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2074, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1386, hypergeometricDistribution0.getSampleSize());
      assertEquals(1386, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = hypergeometricDistribution0.cumulativeProbability(0, 1404);
      assertEquals(926.2275795564127, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2074, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1386, hypergeometricDistribution0.getSampleSize());
      assertEquals(1386, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.0, double2, 0.01);
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      hypergeometricDistribution0.reseedRandomGenerator(1386);
      assertEquals(926.2275795564127, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2074, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1386, hypergeometricDistribution0.getSampleSize());
      assertEquals(1386, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int1 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(926.2275795564127, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2074, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1386, hypergeometricDistribution0.getSampleSize());
      assertEquals(1386, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1386, int1);
      assertFalse(int1 == int0);
      
      int int2 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(926.2275795564127, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2074, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1386, hypergeometricDistribution0.getSampleSize());
      assertEquals(1386, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2074, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      double double3 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(926.2275795564127, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2074, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1386, hypergeometricDistribution0.getSampleSize());
      assertEquals(1386, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(101.97331336254452, double3, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      
      double double4 = hypergeometricDistribution0.upperCumulativeProbability(2074);
      assertEquals(926.2275795564127, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2074, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1386, hypergeometricDistribution0.getSampleSize());
      assertEquals(1386, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double4, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      
      double double5 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(926.2275795564127, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2074, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1386, hypergeometricDistribution0.getSampleSize());
      assertEquals(1386, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(101.97331336254452, double5, 0.01);
      assertEquals(double5, double3, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double4, 0.01);
      
      double double6 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertEquals(926.2275795564127, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2074, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1386, hypergeometricDistribution0.getSampleSize());
      assertEquals(1386, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.0, double6, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertEquals(double6, double1, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertEquals(double6, double2, 0.01);
      
      double double7 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertEquals(926.2275795564127, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2074, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1386, hypergeometricDistribution0.getSampleSize());
      assertEquals(1386, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.0, double7, 0.01);
      assertEquals(double7, double6, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertEquals(double7, double1, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertEquals(double7, double2, 0.01);
      
      int int3 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(926.2275795564127, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2074, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1386, hypergeometricDistribution0.getSampleSize());
      assertEquals(1386, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(698, int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      
      int int4 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(926.2275795564127, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2074, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1386, hypergeometricDistribution0.getSampleSize());
      assertEquals(1386, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1386, int4);
      assertFalse(int4 == int3);
      assertTrue(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      
      double double8 = hypergeometricDistribution0.cumulativeProbability((-1576), 1096);
      assertEquals(926.2275795564127, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2074, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1386, hypergeometricDistribution0.getSampleSize());
      assertEquals(1386, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.9999999999999997, double8, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertEquals(double8, double2, 0.01);
      assertEquals(double8, double1, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertEquals(double8, double7, 0.01);
      assertEquals(double8, double6, 0.01);
      assertNotEquals(double8, double4, 0.01);
      
      double double9 = hypergeometricDistribution0.upperCumulativeProbability(1066);
      assertEquals(926.2275795564127, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2074, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1386, hypergeometricDistribution0.getSampleSize());
      assertEquals(1386, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.1503508664792213E-42, double9, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertEquals(double9, double0, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertEquals(double9, double4, 0.01);
      assertNotEquals(double9, double5, 0.01);
      
      Well1024a well1024a0 = new Well1024a(int3);
      assertEquals(926.2275795564127, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2074, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1386, hypergeometricDistribution0.getSampleSize());
      assertEquals(1386, hypergeometricDistribution0.getNumberOfSuccesses());
      assertFalse(int3 == int1);
      assertFalse(int3 == int4);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertNotNull(well1024a0);
      
      int int5 = 800;
      int int6 = 1005;
      int int7 = (-1569);
      HypergeometricDistribution hypergeometricDistribution1 = null;
      try {
        hypergeometricDistribution1 = new HypergeometricDistribution(well1024a0, int6, int7, int5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-1,569)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(4129L);
      assertNotNull(well44497b0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 2484, 2484, 1261);
      assertEquals(2484, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1261.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1261, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2484, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      long long0 = well44497b0.nextLong();
      assertEquals((-3462184206136942508L), long0);
      
      long long1 = well44497b0.nextLong();
      assertEquals(3231779513584179577L, long1);
      assertFalse(long1 == long0);
      
      int[] intArray0 = hypergeometricDistribution0.sample(1261);
      assertEquals(2484, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1261.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1261, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2484, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(intArray0);
      assertEquals(1261, intArray0.length);
      
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(2484, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1261.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1261, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2484, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1261, int0);
      
      double double0 = hypergeometricDistribution0.probability(1261);
      assertEquals(2484, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1261.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1261, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2484, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.0, double0, 0.01);
      
      double double1 = hypergeometricDistribution0.cumulativeProbability(1261, 2484);
      assertEquals(2484, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1261.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1261, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2484, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(2484, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1261.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1261, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2484, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double2, 0.01);
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      double double3 = hypergeometricDistribution0.upperCumulativeProbability(1261);
      assertEquals(2484, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1261.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1261, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2484, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.0, double3, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      
      double double4 = hypergeometricDistribution0.upperCumulativeProbability(1261);
      assertEquals(2484, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1261.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1261, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2484, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.0, double4, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      
      int int1 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(2484, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1261.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1261, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2484, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1261, int1);
      assertTrue(int1 == int0);
      
      int int2 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(2484, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1261.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1261, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2484, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1261, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      double double5 = hypergeometricDistribution0.upperCumulativeProbability(2484);
      assertEquals(2484, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1261.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1261, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2484, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double5, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertEquals(double5, double1, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertEquals(double5, double2, 0.01);
      
      int int3 = hypergeometricDistribution0.solveInverseCumulativeProbability((-3462184206136942508L), (-1421), 1263);
      assertEquals(2484, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1261.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1261, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2484, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals((-1420), int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      
      double double6 = hypergeometricDistribution0.cumulativeProbability(1261);
      assertEquals(2484, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1261.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1261, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2484, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.0, double6, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertEquals(double6, double0, 0.01);
      assertEquals(double6, double3, 0.01);
      assertEquals(double6, double4, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double2, 0.01);
      
      int int4 = well44497b0.nextInt();
      assertEquals((-454922106), int4);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      
      double double7 = hypergeometricDistribution0.cumulativeProbability(1261);
      assertEquals(2484, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1261.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1261, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2484, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.0, double7, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertEquals(double7, double3, 0.01);
      assertEquals(double7, double0, 0.01);
      assertEquals(double7, double4, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertEquals(double7, double6, 0.01);
      assertNotEquals(double7, double2, 0.01);
      
      int int5 = hypergeometricDistribution0.sample();
      assertEquals(2484, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1261.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1261, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2484, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1261, int5);
      assertTrue(int5 == int1);
      assertTrue(int5 == int0);
      assertTrue(int5 == int2);
      assertFalse(int5 == int4);
      assertFalse(int5 == int3);
      
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertEquals(2484, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1261.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1261, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2484, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(boolean0);
      
      int int6 = hypergeometricDistribution0.getSampleSize();
      assertEquals(2484, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1261.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1261, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2484, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1261, int6);
      assertFalse(int6 == int3);
      assertFalse(int6 == int4);
      assertTrue(int6 == int1);
      assertTrue(int6 == int0);
      assertTrue(int6 == int5);
      assertTrue(int6 == int2);
      
      int int7 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(2484, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1261.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1261, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2484, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1261, int7);
      assertTrue(int7 == int2);
      assertTrue(int7 == int0);
      assertTrue(int7 == int6);
      assertTrue(int7 == int1);
      assertFalse(int7 == int3);
      assertFalse(int7 == int4);
      assertTrue(int7 == int5);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(385, 0, 8);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(385, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(8, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      int[] intArray0 = hypergeometricDistribution0.sample(8);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(385, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(8, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(8, intArray0.length);
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(385, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(8, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, int0);
      
      int int1 = hypergeometricDistribution0.getSupportUpperBound();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(385, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(8, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(406);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(385, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(8, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.0, double0, 0.01);
      
      double double1 = hypergeometricDistribution0.cumulativeProbability(2);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(385, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(8, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      int int2 = hypergeometricDistribution0.getSupportUpperBound();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(385, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(8, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      hypergeometricDistribution0.reseedRandomGenerator(8);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(385, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(8, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int3 = hypergeometricDistribution0.inverseCumulativeProbability(0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(385, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(8, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, int3);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      
      int int4 = hypergeometricDistribution0.getSupportUpperBound();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(385, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(8, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, int4);
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      
      int[] intArray1 = hypergeometricDistribution0.sample(1787);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(385, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(8, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(1787, intArray1.length);
      
      double double2 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(385, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(8, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.0, double2, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      
      double double3 = hypergeometricDistribution0.cumulativeProbability(0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(385, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(8, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.0, double3, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double2, 0.01);
      
      int int5 = hypergeometricDistribution0.getPopulationSize();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(385, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(8, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(385, int5);
      assertFalse(int5 == int3);
      assertFalse(int5 == int1);
      assertFalse(int5 == int2);
      assertFalse(int5 == int4);
      assertFalse(int5 == int0);
      
      int int6 = hypergeometricDistribution0.getSupportLowerBound();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(385, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(8, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, int6);
      assertTrue(int6 == int4);
      assertTrue(int6 == int0);
      assertTrue(int6 == int1);
      assertTrue(int6 == int3);
      assertTrue(int6 == int2);
      assertFalse(int6 == int5);
      
      int int7 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(385, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(8, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, int7);
      assertTrue(int7 == int3);
      assertTrue(int7 == int6);
      assertTrue(int7 == int2);
      assertTrue(int7 == int1);
      assertTrue(int7 == int4);
      assertTrue(int7 == int0);
      assertFalse(int7 == int5);
      
      int int8 = hypergeometricDistribution0.sample();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(385, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(8, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, int8);
      assertTrue(int8 == int1);
      assertTrue(int8 == int3);
      assertTrue(int8 == int4);
      assertTrue(int8 == int0);
      assertTrue(int8 == int6);
      assertTrue(int8 == int7);
      assertTrue(int8 == int2);
      assertFalse(int8 == int5);
      
      double double4 = hypergeometricDistribution0.calculateNumericalVariance();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(385, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(8, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double4, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      
      double double5 = hypergeometricDistribution0.cumulativeProbability(2);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(385, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(8, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.0, double5, 0.01);
      assertEquals(double5, double2, 0.01);
      assertEquals(double5, double3, 0.01);
      assertEquals(double5, double1, 0.01);
      assertEquals(double5, double0, 0.01);
      assertNotEquals(double5, double4, 0.01);
      
      double double6 = hypergeometricDistribution0.getNumericalVariance();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(385, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(8, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double6, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertEquals(double6, double4, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double2, 0.01);
      
      double double7 = hypergeometricDistribution0.probability(0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(385, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(8, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(Double.NaN, double7, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double3, 0.01);
      
      double double8 = hypergeometricDistribution0.getNumericalMean();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(385, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(8, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double8, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertEquals(double8, double4, 0.01);
      assertEquals(double8, double6, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double2, 0.01);
      
      int int9 = hypergeometricDistribution0.sample();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(385, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(8, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, int9);
      assertTrue(int9 == int3);
      assertTrue(int9 == int6);
      assertTrue(int9 == int2);
      assertTrue(int9 == int1);
      assertTrue(int9 == int7);
      assertTrue(int9 == int4);
      assertFalse(int9 == int5);
      assertTrue(int9 == int0);
      assertTrue(int9 == int8);
      
      double double9 = hypergeometricDistribution0.getNumericalVariance();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(385, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(8, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double9, 0.01);
      assertEquals(double9, double4, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertEquals(double9, double6, 0.01);
      assertEquals(double9, double8, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double3, 0.01);
      
      int int10 = hypergeometricDistribution0.getSampleSize();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(385, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(8, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(8, int10);
      assertFalse(int10 == int6);
      assertFalse(int10 == int8);
      assertFalse(int10 == int3);
      assertFalse(int10 == int5);
      assertFalse(int10 == int0);
      assertFalse(int10 == int4);
      assertFalse(int10 == int9);
      assertFalse(int10 == int2);
      assertFalse(int10 == int7);
      assertFalse(int10 == int1);
      
      int int11 = hypergeometricDistribution0.getSupportLowerBound();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(385, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(8, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, int11);
      assertTrue(int11 == int6);
      assertTrue(int11 == int1);
      assertTrue(int11 == int3);
      assertTrue(int11 == int0);
      assertTrue(int11 == int8);
      assertTrue(int11 == int4);
      assertTrue(int11 == int9);
      assertTrue(int11 == int7);
      assertTrue(int11 == int2);
      assertFalse(int11 == int5);
      assertFalse(int11 == int10);
      
      int int12 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(385, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(8, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, int12);
      assertTrue(int12 == int0);
      assertTrue(int12 == int4);
      assertTrue(int12 == int9);
      assertTrue(int12 == int2);
      assertTrue(int12 == int11);
      assertFalse(int12 == int10);
      assertTrue(int12 == int6);
      assertTrue(int12 == int8);
      assertTrue(int12 == int3);
      assertFalse(int12 == int5);
      assertTrue(int12 == int7);
      assertTrue(int12 == int1);
      
      int int13 = hypergeometricDistribution0.getSupportLowerBound();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(385, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(8, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, int13);
      assertTrue(int13 == int3);
      assertFalse(int13 == int5);
      assertTrue(int13 == int2);
      assertTrue(int13 == int1);
      assertTrue(int13 == int11);
      assertFalse(int13 == int10);
      assertTrue(int13 == int12);
      assertTrue(int13 == int9);
      assertTrue(int13 == int7);
      assertTrue(int13 == int8);
      assertTrue(int13 == int0);
      assertTrue(int13 == int6);
      assertTrue(int13 == int4);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2074, 1386, 1386);
      assertEquals(926.2275795564127, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2074, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1386, hypergeometricDistribution0.getSampleSize());
      assertEquals(1386, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.probability(0);
      assertEquals(926.2275795564127, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2074, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1386, hypergeometricDistribution0.getSampleSize());
      assertEquals(1386, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double0, 0.01);
      
      int int0 = 1;
      hypergeometricDistribution0.reseedRandomGenerator((-916L));
      assertEquals(926.2275795564127, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2074, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1386, hypergeometricDistribution0.getSampleSize());
      assertEquals(1386, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double1 = hypergeometricDistribution0.upperCumulativeProbability(1);
      assertEquals(926.2275795564127, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2074, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1386, hypergeometricDistribution0.getSampleSize());
      assertEquals(1386, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = hypergeometricDistribution0.cumulativeProbability(0, 1404);
      assertEquals(926.2275795564127, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2074, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1386, hypergeometricDistribution0.getSampleSize());
      assertEquals(1386, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.0, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      
      hypergeometricDistribution0.reseedRandomGenerator(1386);
      assertEquals(926.2275795564127, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2074, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1386, hypergeometricDistribution0.getSampleSize());
      assertEquals(1386, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int1 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(926.2275795564127, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2074, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1386, hypergeometricDistribution0.getSampleSize());
      assertEquals(1386, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1386, int1);
      assertFalse(int1 == int0);
      
      int int2 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(926.2275795564127, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2074, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1386, hypergeometricDistribution0.getSampleSize());
      assertEquals(1386, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2074, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      double double3 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(926.2275795564127, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2074, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1386, hypergeometricDistribution0.getSampleSize());
      assertEquals(1386, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(101.97331336254452, double3, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      
      double double4 = hypergeometricDistribution0.upperCumulativeProbability(2074);
      assertEquals(926.2275795564127, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2074, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1386, hypergeometricDistribution0.getSampleSize());
      assertEquals(1386, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double4, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      
      double double5 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(926.2275795564127, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2074, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1386, hypergeometricDistribution0.getSampleSize());
      assertEquals(1386, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(101.97331336254452, double5, 0.01);
      assertEquals(double5, double3, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double0, 0.01);
      
      double double6 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertEquals(926.2275795564127, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2074, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1386, hypergeometricDistribution0.getSampleSize());
      assertEquals(1386, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.0, double6, 0.01);
      assertEquals(double6, double1, 0.01);
      assertEquals(double6, double2, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double3, 0.01);
      
      double double7 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertEquals(926.2275795564127, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2074, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1386, hypergeometricDistribution0.getSampleSize());
      assertEquals(1386, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.0, double7, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertEquals(double7, double2, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertEquals(double7, double1, 0.01);
      assertEquals(double7, double6, 0.01);
      assertNotEquals(double7, double0, 0.01);
      
      int int3 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(926.2275795564127, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2074, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1386, hypergeometricDistribution0.getSampleSize());
      assertEquals(1386, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(698, int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      
      int int4 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(926.2275795564127, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2074, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1386, hypergeometricDistribution0.getSampleSize());
      assertEquals(1386, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1386, int4);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertTrue(int4 == int1);
      assertFalse(int4 == int0);
      
      double double8 = hypergeometricDistribution0.upperCumulativeProbability(1066);
      assertEquals(926.2275795564127, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2074, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1386, hypergeometricDistribution0.getSampleSize());
      assertEquals(1386, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.1503508664792213E-42, double8, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertEquals(double8, double4, 0.01);
      assertEquals(double8, double0, 0.01);
      
      Well1024a well1024a0 = new Well1024a(698);
      assertNotNull(well1024a0);
      
      HypergeometricDistribution hypergeometricDistribution1 = null;
      try {
        hypergeometricDistribution1 = new HypergeometricDistribution(well1024a0, 1005, (-1569), 800);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-1,569)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 1386;
      Well512a well512a0 = new Well512a(1386);
      assertNotNull(well512a0);
      
      double double0 = well512a0.nextGaussian();
      assertEquals((-0.7402774887187424), double0, 0.01);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(915, 474, 1386);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (1,386) must be less than or equal to population size (915)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 2074;
      int int1 = 1386;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2074, 1386, 1386);
      assertEquals(926.2275795564127, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1386, hypergeometricDistribution0.getSampleSize());
      assertEquals(2074, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1386, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      int int2 = 0;
      double double0 = hypergeometricDistribution0.probability(595);
      assertEquals(926.2275795564127, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1386, hypergeometricDistribution0.getSampleSize());
      assertEquals(2074, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1386, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double0, 0.01);
      
      // Undeclared exception!
      hypergeometricDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = (-1377);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(275, 2628, 1488);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (2,628) must be less than or equal to population size (275)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 0;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(582, 0, 0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(582, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      int int1 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(582, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      hypergeometricDistribution0.reseedRandomGenerator(0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(582, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int2 = hypergeometricDistribution0.getSampleSize();
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(582, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      int int3 = (-373);
      HypergeometricDistribution hypergeometricDistribution1 = null;
      try {
        hypergeometricDistribution1 = new HypergeometricDistribution((-373), (-373), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-373)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Well512a well512a0 = new Well512a(2);
      assertNotNull(well512a0);
      
      int int0 = 474;
      double double0 = well512a0.nextGaussian();
      assertEquals((-0.36161127030456236), double0, 0.01);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 474, 474, 1066);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (1,066) must be less than or equal to population size (474)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a((int[]) null);
      assertNotNull(well19937a0);
      
      well19937a0.setSeed(1063);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 113, 113, 0);
      assertEquals(113, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(113, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.inverseCumulativeProbability(0.007244554301320383);
      assertEquals(113, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(113, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, int0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability((-136));
      assertEquals(113, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(113, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1.0, double0, 0.01);
      
      double double1 = hypergeometricDistribution0.upperCumulativeProbability((-1791));
      assertEquals(113, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(113, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double double2 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(113, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(113, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      float float0 = well19937a0.nextFloat();
      assertEquals(0.11390102F, float0, 0.01F);
      
      double double3 = hypergeometricDistribution0.cumulativeProbability(0);
      assertEquals(113, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(113, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1.0, double3, 0.01);
      assertEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      
      int int1 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(113, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(113, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(113, int1);
      assertFalse(int1 == int0);
      
      double double4 = hypergeometricDistribution0.probability(547);
      assertEquals(113, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(113, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, double4, 0.01);
      assertEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      
      double double5 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(113, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(113, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, double5, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertEquals(double5, double4, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertEquals(double5, double2, 0.01);
      assertNotEquals(double5, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      assertNotNull(jDKRandomGenerator0);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(jDKRandomGenerator0, 1957, 4580, (-1053));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1,053)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 1;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1, 2053, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (2,053) must be less than or equal to population size (1)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(4129L);
      assertNotNull(well44497b0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 2484, 2484, 1267);
      assertEquals(1267.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2484, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2484, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1267, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      long long0 = well44497b0.nextLong();
      assertEquals((-3462184206136942508L), long0);
      
      long long1 = well44497b0.nextLong();
      assertEquals(3231779513584179577L, long1);
      assertFalse(long1 == long0);
      
      int[] intArray0 = hypergeometricDistribution0.sample(1267);
      assertEquals(1267.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2484, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2484, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1267, hypergeometricDistribution0.getSampleSize());
      assertNotNull(intArray0);
      assertEquals(1267, intArray0.length);
      
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(1267.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2484, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2484, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1267, hypergeometricDistribution0.getSampleSize());
      assertEquals(1267, int0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability((-802));
      assertEquals(1267.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2484, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2484, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1267, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.0, double0, 0.01);
      
      int[] intArray1 = hypergeometricDistribution0.sample(1267);
      assertEquals(1267.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2484, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2484, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1267, hypergeometricDistribution0.getSampleSize());
      assertNotSame(intArray1, intArray0);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotNull(intArray1);
      assertEquals(1267, intArray1.length);
      
      double double1 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(1267.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2484, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2484, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1267, hypergeometricDistribution0.getSampleSize());
      assertEquals(1267.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      int int1 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(1267.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2484, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2484, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1267, hypergeometricDistribution0.getSampleSize());
      assertEquals(2484, int1);
      assertFalse(int1 == int0);
      
      double double2 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(1267.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2484, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2484, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1267, hypergeometricDistribution0.getSampleSize());
      assertEquals(1267.0, double2, 0.01);
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      double double3 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(1267.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2484, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2484, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1267, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double3, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      
      int int2 = well44497b0.nextInt();
      assertEquals(212103959, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      double double4 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertEquals(1267.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2484, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2484, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1267, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.0, double4, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      
      int int3 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(1267.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2484, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2484, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1267, hypergeometricDistribution0.getSampleSize());
      assertEquals(1267, int3);
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      
      int int4 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(1267.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2484, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2484, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1267, hypergeometricDistribution0.getSampleSize());
      assertEquals(2484, int4);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertTrue(int4 == int1);
      assertFalse(int4 == int3);
      
      double double5 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(1267.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2484, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2484, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1267, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double5, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertEquals(double5, double3, 0.01);
      assertNotEquals(double5, double0, 0.01);
      
      int int5 = hypergeometricDistribution0.getSampleSize();
      assertEquals(1267.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2484, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2484, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1267, hypergeometricDistribution0.getSampleSize());
      assertEquals(1267, int5);
      assertFalse(int5 == int4);
      assertFalse(int5 == int1);
      assertTrue(int5 == int3);
      assertTrue(int5 == int0);
      assertFalse(int5 == int2);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(482, (-2137), (-1929));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-2,137)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(910, 370, 0);
      assertEquals(910, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(370, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(910, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(370, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, int0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(370);
      assertEquals(910, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(370, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, double0, 0.01);
      
      int int1 = hypergeometricDistribution0.solveInverseCumulativeProbability(3159.794, 0, 0);
      assertEquals(910, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(370, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(910, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(370, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      
      double double1 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(910, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(370, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double double2 = hypergeometricDistribution0.cumulativeProbability(1442);
      assertEquals(910, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(370, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1.0, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      double double3 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(910, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(370, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, double3, 0.01);
      assertEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      
      int int3 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(910, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(370, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, int3);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      
      double double4 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(910, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(370, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, double4, 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(double4, double0, 0.01);
      
      hypergeometricDistribution0.reseedRandomGenerator(582L);
      assertEquals(910, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(370, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double5 = hypergeometricDistribution0.probability(271);
      assertEquals(910, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(370, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, double5, 0.01);
      assertEquals(double5, double4, 0.01);
      assertEquals(double5, double0, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertEquals(double5, double1, 0.01);
      assertEquals(double5, double3, 0.01);
      
      int int4 = hypergeometricDistribution0.solveInverseCumulativeProbability((-1821.723107702258), (-997), 370);
      assertEquals(910, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(370, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals((-996), int4);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      
      int int5 = hypergeometricDistribution0.solveInverseCumulativeProbability(910, 0, 0);
      assertEquals(910, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(370, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, int5);
      assertFalse(int5 == int4);
      assertTrue(int5 == int3);
      assertTrue(int5 == int1);
      assertTrue(int5 == int2);
      assertTrue(int5 == int0);
      
      double double6 = hypergeometricDistribution0.upperCumulativeProbability((-3882));
      assertEquals(910, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(370, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1.0, double6, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertEquals(double6, double2, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double0, 0.01);
      
      double double7 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(910, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(370, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, double7, 0.01);
      assertEquals(double7, double3, 0.01);
      assertEquals(double7, double5, 0.01);
      assertEquals(double7, double0, 0.01);
      assertEquals(double7, double4, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertEquals(double7, double1, 0.01);
      assertNotEquals(double7, double6, 0.01);
      
      double double8 = hypergeometricDistribution0.upperCumulativeProbability((-997));
      assertEquals(910, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(370, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1.0, double8, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertEquals(double8, double2, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertEquals(double8, double6, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double5, 0.01);
      
      double double9 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(910, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(370, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, double9, 0.01);
      assertEquals(double9, double4, 0.01);
      assertEquals(double9, double3, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertEquals(double9, double1, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertEquals(double9, double0, 0.01);
      assertEquals(double9, double5, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertEquals(double9, double7, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2074, 1386, 1386);
      hypergeometricDistribution0.probability(595);
      hypergeometricDistribution0.upperCumulativeProbability((-711));
      hypergeometricDistribution0.reseedRandomGenerator((-916L));
      hypergeometricDistribution0.upperCumulativeProbability(1);
      hypergeometricDistribution0.cumulativeProbability(0, 1404);
      hypergeometricDistribution0.reseedRandomGenerator(1386);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.upperCumulativeProbability(1386);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.upperCumulativeProbability(2074);
      hypergeometricDistribution0.upperCumulativeProbability(1386);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.upperCumulativeProbability(2074);
      hypergeometricDistribution0.solveInverseCumulativeProbability(2730.66275902889, 1263, 0);
      hypergeometricDistribution0.cumulativeProbability((-1564));
      hypergeometricDistribution0.cumulativeProbability(1143);
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.getNumberOfSuccesses();
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(1246);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1, 1, 1);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.upperCumulativeProbability(6344);
      hypergeometricDistribution0.upperCumulativeProbability(0);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(1);
      hypergeometricDistribution0.reseedRandomGenerator(2597L);
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.solveInverseCumulativeProbability(1, 0, (-4377));
      double double1 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(double1, double0, 0.01);
      
      double double2 = hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.probability((-4377));
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.inverseCumulativeProbability(1);
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.probability(1);
      double double3 = hypergeometricDistribution0.probability(1);
      assertEquals(double3, double2, 0.01);
      
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.upperCumulativeProbability(0);
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      int int0 = (-619);
      int int1 = (-1);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, (-619), (-1), (-619));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-619)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(582, 0, 0);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.solveInverseCumulativeProbability(582, (-3402), 582);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.sample(582);
      double double0 = hypergeometricDistribution0.probability(368);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = hypergeometricDistribution0.probability(0);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = hypergeometricDistribution0.upperCumulativeProbability(587);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double3, 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(582, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      Well44497a well44497a0 = new Well44497a(intArray0);
      int int0 = 3413;
      well44497a0.setSeed(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 0, 0, 3413);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = (-773);
      int int1 = (-1384);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((-773), (-773), (-1384));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-773)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }
}
