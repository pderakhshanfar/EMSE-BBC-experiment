/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 16:15:20 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 1063;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2653, 2653, 1063);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.sample(3332);
      hypergeometricDistribution0.cumulativeProbability((-2476));
      hypergeometricDistribution0.cumulativeProbability((-2346));
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.isSupportConnected();
      double double0 = (-2185.0);
      int int1 = (-2351);
      // Undeclared exception!
      hypergeometricDistribution0.calculateNumericalVariance();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 1063;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2653, 2653, 1063);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.sample(3332);
      hypergeometricDistribution0.cumulativeProbability((-2476));
      hypergeometricDistribution0.cumulativeProbability((-2346));
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.isSupportConnected();
      // Undeclared exception!
      hypergeometricDistribution0.getNumericalMean();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 1063;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2653, 2653, 1063);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.sample(3332);
      hypergeometricDistribution0.cumulativeProbability((-2476));
      hypergeometricDistribution0.cumulativeProbability((-2346));
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.getNumericalVariance();
      // Undeclared exception!
      hypergeometricDistribution0.getSampleSize();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 1063;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2653, 2653, 1063);
      hypergeometricDistribution0.reseedRandomGenerator((-1280L));
      int int1 = (-2346);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getSupportLowerBound();
      int int2 = (-2476);
      hypergeometricDistribution0.sample(3332);
      // Undeclared exception!
      hypergeometricDistribution0.getSupportUpperBound();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 1063;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2653, 2653, 1063);
      hypergeometricDistribution0.reseedRandomGenerator((-1280L));
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.sample(3332);
      hypergeometricDistribution0.cumulativeProbability((-2476));
      hypergeometricDistribution0.cumulativeProbability((-2346));
      // Undeclared exception!
      hypergeometricDistribution0.getSupportLowerBound();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2812, 947, 947);
      int int0 = 330;
      hypergeometricDistribution0.cumulativeProbability(330);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getPopulationSize();
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(330);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1126, 1126, 1126);
      hypergeometricDistribution0.cumulativeProbability(1126, 2803);
      hypergeometricDistribution0.upperCumulativeProbability((-4508));
      hypergeometricDistribution0.cumulativeProbability(714);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.sample(1126);
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.cumulativeProbability(1126);
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(2803, 1126, 1126);
      hypergeometricDistribution1.getSupportLowerBound();
      hypergeometricDistribution1.upperCumulativeProbability(1126);
      hypergeometricDistribution1.reseedRandomGenerator(1126);
      hypergeometricDistribution1.getSupportUpperBound();
      hypergeometricDistribution1.getSupportLowerBound();
      hypergeometricDistribution1.probability(38);
      // Undeclared exception!
      hypergeometricDistribution1.sample(1126);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 1126;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1126, 1126, 1126);
      hypergeometricDistribution0.cumulativeProbability(1126, 1126);
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.cumulativeProbability(714);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.sample(1126);
      hypergeometricDistribution0.getPopulationSize();
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(2803, 1126, 1126);
      hypergeometricDistribution1.getSupportLowerBound();
      int int1 = 2345;
      // Undeclared exception!
      hypergeometricDistribution1.upperCumulativeProbability(11);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1122, 1122, 1122);
      hypergeometricDistribution0.cumulativeProbability(1122, 2803);
      hypergeometricDistribution0.upperCumulativeProbability((-4508));
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.cumulativeProbability(1122);
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(2803, 1122, 1122);
      hypergeometricDistribution1.cumulativeProbability(362, 1122);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution1.calculateNumericalVariance();
      hypergeometricDistribution0.getSupportLowerBound();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(0);
      well44497a0.setSeed(346);
      well44497a0.clear();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 145, 145, 0);
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.upperCumulativeProbability(145);
      Well44497a well44497a1 = new Well44497a(0);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.getSupportUpperBound();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1126, 1126, 1126);
      hypergeometricDistribution0.cumulativeProbability(1126, 2803);
      hypergeometricDistribution0.upperCumulativeProbability((-4508));
      hypergeometricDistribution0.cumulativeProbability(714);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.sample(1126);
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.cumulativeProbability(1126);
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(2803, 1126, 1126);
      hypergeometricDistribution1.getSupportLowerBound();
      hypergeometricDistribution1.upperCumulativeProbability(1126);
      Well44497a well44497a0 = new Well44497a();
      HypergeometricDistribution hypergeometricDistribution2 = null;
      try {
        hypergeometricDistribution2 = new HypergeometricDistribution(1126, 2345, 1126);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (2,345) must be less than or equal to population size (1,126)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(0L);
      well19937c0.setSeed(3254);
      int int0 = (-1023);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 3254, (-186), (-1023));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-186)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1042, 0, 1042);
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getSupportUpperBound();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1126, 1126, 1126);
      hypergeometricDistribution0.cumulativeProbability(1126, 2803);
      hypergeometricDistribution0.upperCumulativeProbability((-4508));
      hypergeometricDistribution0.cumulativeProbability(714);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.cumulativeProbability(1126);
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(2803, 1126, 1126);
      hypergeometricDistribution1.getSupportLowerBound();
      hypergeometricDistribution1.getNumericalVariance();
      hypergeometricDistribution0.upperCumulativeProbability(2345);
      // Undeclared exception!
      hypergeometricDistribution1.sample(1126);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(200, 0, 200);
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.inverseCumulativeProbability(1.0);
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.upperCumulativeProbability((-412));
      Well44497a well44497a0 = new Well44497a();
      HypergeometricDistribution hypergeometricDistribution1 = null;
      try {
        hypergeometricDistribution1 = new HypergeometricDistribution(well44497a0, 0, (-2750), 386);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister((int[]) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 1, 858, 2761);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (858) must be less than or equal to population size (1)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 3653;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3653, 3653, 3653);
      hypergeometricDistribution0.getSupportUpperBound();
      int int1 = 1;
      hypergeometricDistribution0.probability(1);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.probability(3653);
      hypergeometricDistribution0.cumulativeProbability(0);
      hypergeometricDistribution0.getPopulationSize();
      // Undeclared exception!
      hypergeometricDistribution0.sample(3653);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(0L);
      int int0 = 3254;
      well19937c0.setSeed(3254);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 3254, 3254, 0);
      hypergeometricDistribution0.cumulativeProbability(916);
      hypergeometricDistribution0.upperCumulativeProbability(0);
      hypergeometricDistribution0.calculateNumericalVariance();
      try { 
        well19937c0.nextInt(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.random.BitsStreamGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1, 1, 1);
      hypergeometricDistribution0.getNumericalVariance();
      double double0 = hypergeometricDistribution0.cumulativeProbability(1, 1336);
      hypergeometricDistribution0.inverseCumulativeProbability(1);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.reseedRandomGenerator((-2L));
      hypergeometricDistribution0.reseedRandomGenerator(1876L);
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.probability((-483));
      hypergeometricDistribution0.cumulativeProbability(1);
      double double1 = hypergeometricDistribution0.probability(0);
      assertEquals(double1, double0, 0.01);
      
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.cumulativeProbability(1);
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.cumulativeProbability(1336, 1459);
      double double2 = hypergeometricDistribution0.cumulativeProbability((-1880));
      assertEquals(0.0, double2, 0.01);
      
      hypergeometricDistribution0.probability(24);
      double double3 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(Double.NaN, double3, 0.01);
      
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.probability(24);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(1, int0);
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1042, 0, 1042);
      double double0 = hypergeometricDistribution0.probability(921);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.sample();
      double double1 = hypergeometricDistribution0.upperCumulativeProbability(858);
      assertEquals(double1, double0, 0.01);
      
      double double2 = hypergeometricDistribution0.cumulativeProbability(1042);
      hypergeometricDistribution0.getSupportLowerBound();
      int int0 = hypergeometricDistribution0.getSampleSize();
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.getSupportUpperBound();
      int int1 = hypergeometricDistribution0.getPopulationSize();
      assertTrue(int1 == int0);
      
      int int2 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(0, int2);
      
      double double3 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertEquals(double3, double2, 0.01);
      
      double double4 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double4, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      well44497a0.clear();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1397, 772, 1397);
      hypergeometricDistribution0.getSupportUpperBound();
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(772.0, double0, 0.01);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-74);
      byteArray0[1] = (byte)0;
      well44497a0.nextBytes(byteArray0);
      hypergeometricDistribution0.getNumberOfSuccesses();
      double double1 = hypergeometricDistribution0.cumulativeProbability(0);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a((-1985));
      well1024a0.setSeed(0);
      int int0 = 3380;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 3380, 3380, 3380);
      well1024a0.nextLong();
      int int1 = 0;
      hypergeometricDistribution0.getSupportLowerBound();
      try { 
        well1024a0.nextInt((-1985));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,985 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.random.BitsStreamGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 1427, 1427, 1427);
      hypergeometricDistribution0.calculateNumericalVariance();
      double double0 = hypergeometricDistribution0.cumulativeProbability(1427);
      assertEquals(1.0, double0, 0.01);
      
      hypergeometricDistribution0.probability((-265));
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.isSupportConnected();
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(1427, int0);
      
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.isSupportConnected();
      double double1 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(0, (-2750), (-2750));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b((-5034868814120038111L));
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 824, 824, (-991));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-991)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(681, 0, 0);
      int int0 = 1;
      int int1 = 0;
      // Undeclared exception!
      try { 
        hypergeometricDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1652, 0, 2325);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (2,325) must be less than or equal to population size (1,652)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(365, 1, 365);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 0;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((-2970), (-2970), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-2,970)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(67, 234, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (234) must be less than or equal to population size (67)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }
}
