/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 16:03:01 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomAdaptor;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4358, 1292, 1292);
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(510);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(8388607, 8388607, 2549);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.upperCumulativeProbability(1455);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.solveInverseCumulativeProbability(0.0, 8388607, 8388607);
      hypergeometricDistribution0.sample(3279);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.cumulativeProbability(2549);
      hypergeometricDistribution0.upperCumulativeProbability((-109));
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.upperCumulativeProbability(2549);
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.upperCumulativeProbability(0);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.getNumericalVariance();
      Random.setNextRandom((-1288));
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.getNumberOfSuccesses();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 1358, 986, 901);
      well44497b0.nextBoolean();
      hypergeometricDistribution0.getSupportLowerBound();
      byte[] byteArray0 = new byte[2];
      hypergeometricDistribution0.getSupportLowerBound();
      byteArray0[0] = (byte)91;
      byteArray0[1] = (byte)1;
      well44497b0.nextBytes(byteArray0);
      hypergeometricDistribution0.probability(2);
      hypergeometricDistribution0.upperCumulativeProbability((-4377));
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.reseedRandomGenerator(0L);
      hypergeometricDistribution0.cumulativeProbability(1098);
      hypergeometricDistribution0.probability(484);
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.cumulativeProbability(1098);
      hypergeometricDistribution0.getSampleSize();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 1;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(986, 11, 1);
      hypergeometricDistribution0.solveInverseCumulativeProbability(11, 1, 1);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.cumulativeProbability(1);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.upperCumulativeProbability(1);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.solveInverseCumulativeProbability(4.2661388254716074E-8, 1, 0);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.probability((-1));
      hypergeometricDistribution0.cumulativeProbability((-96));
      // Undeclared exception!
      try { 
        hypergeometricDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 4458, 4458, 818);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.cumulativeProbability(398);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.upperCumulativeProbability(818);
      hypergeometricDistribution0.solveInverseCumulativeProbability(398, 528, (-4465));
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.probability(818);
      int int0 = (-2037);
      // Undeclared exception!
      try { 
        hypergeometricDistribution0.sample((-2037));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-2,037)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(965, 0, 1);
      hypergeometricDistribution0.solveInverseCumulativeProbability(0, 1, 1);
      hypergeometricDistribution0.cumulativeProbability(1);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.upperCumulativeProbability(1);
      hypergeometricDistribution0.solveInverseCumulativeProbability(4.2661388254716074E-8, 1, 0);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.getSupportLowerBound();
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(2601, 0, 1);
      hypergeometricDistribution1.upperCumulativeProbability(1);
      hypergeometricDistribution1.getSupportUpperBound();
      HypergeometricDistribution hypergeometricDistribution2 = new HypergeometricDistribution(5348, 0, 1117);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution2.getNumberOfSuccesses();
      HypergeometricDistribution hypergeometricDistribution3 = null;
      try {
        hypergeometricDistribution3 = new HypergeometricDistribution(0, 0, 563);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 4495;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4495, 482, 482);
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.getSupportUpperBound();
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability(60);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 503;
      int int1 = 883;
      int int2 = 2384;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(883, 503, 2384);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (2,384) must be less than or equal to population size (883)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(482, 433, 433);
      hypergeometricDistribution0.getNumericalVariance();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(482, 482, 69);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getSampleSize();
      Well19937c well19937c0 = new Well19937c(20);
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(well19937c0, 1970, 381, 706);
      // Undeclared exception!
      hypergeometricDistribution1.sample();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1941, 1941, 1941);
      hypergeometricDistribution0.sample(1941);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.upperCumulativeProbability(1941);
      hypergeometricDistribution0.reseedRandomGenerator(1L);
      // Undeclared exception!
      hypergeometricDistribution0.sample(1941);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(451, 451, 451);
      hypergeometricDistribution0.reseedRandomGenerator((-1286L));
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.cumulativeProbability(1120);
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.probability(1120);
      hypergeometricDistribution0.probability((-2557));
      hypergeometricDistribution0.probability(342);
      hypergeometricDistribution0.cumulativeProbability(1120);
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.cumulativeProbability((-2557));
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.probability(0);
      hypergeometricDistribution0.getSupportLowerBound();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 965;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(965, 0, 1);
      hypergeometricDistribution0.solveInverseCumulativeProbability(0, 1, 1);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.cumulativeProbability(1);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.upperCumulativeProbability(1);
      hypergeometricDistribution0.solveInverseCumulativeProbability(4.2661388254716074E-8, 1, 0);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.cumulativeProbability(0, 0);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.cumulativeProbability((-3249));
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getPopulationSize();
      try { 
        hypergeometricDistribution0.cumulativeProbability(0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lower endpoint (0) must be less than or equal to upper endpoint (-1)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 1284, 0, 0);
      mersenneTwister0.setSeed(0);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.sample();
      mersenneTwister0.setSeed(0L);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.cumulativeProbability(2096);
      hypergeometricDistribution0.solveInverseCumulativeProbability(0.0, 1274, 0);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.probability(0);
      hypergeometricDistribution0.cumulativeProbability(1284);
      mersenneTwister0.setSeed((int[]) null);
      mersenneTwister0.nextFloat();
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.getSupportUpperBound();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte) (-22);
      mersenneTwister0.nextBytes(byteArray0);
      hypergeometricDistribution0.cumulativeProbability(127);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(451, 451, 451);
      hypergeometricDistribution0.reseedRandomGenerator((-1286L));
      hypergeometricDistribution0.inverseCumulativeProbability(0.0);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.cumulativeProbability(0, 451);
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.cumulativeProbability(451);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.inverseCumulativeProbability(1.3088328582956644E-7);
      hypergeometricDistribution0.probability(572);
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.cumulativeProbability(2429);
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getNumericalVariance();
      HypergeometricDistribution hypergeometricDistribution1 = null;
      try {
        hypergeometricDistribution1 = new HypergeometricDistribution(451, 2429, 2409);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (2,429) must be less than or equal to population size (451)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 0;
      intArray0[2] = 0;
      int int0 = 2;
      intArray0[3] = 2;
      intArray0[4] = 2;
      intArray0[5] = (-754);
      intArray0[6] = 1243;
      intArray0[7] = 400;
      intArray0[8] = 0;
      Well512a well512a0 = new Well512a(intArray0);
      well512a0.nextDouble();
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 53, 208, 208);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (208) must be less than or equal to population size (53)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(965, 0, 1);
      hypergeometricDistribution0.solveInverseCumulativeProbability(0, 1, 1);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.cumulativeProbability(1);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.upperCumulativeProbability(1);
      hypergeometricDistribution0.solveInverseCumulativeProbability(4.2661388254716074E-8, 1, 0);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.cumulativeProbability(0, 0);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.cumulativeProbability(965);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.inverseCumulativeProbability(1);
      hypergeometricDistribution0.probability(965);
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.cumulativeProbability(1815);
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.upperCumulativeProbability(1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(799, 433, 799);
      hypergeometricDistribution0.calculateNumericalVariance();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      RandomAdaptor randomAdaptor0 = new RandomAdaptor((RandomGenerator) null);
      int[] intArray0 = new int[6];
      intArray0[0] = 1456;
      intArray0[1] = 0;
      intArray0[2] = 1456;
      intArray0[3] = 1456;
      intArray0[4] = 0;
      intArray0[5] = 0;
      randomAdaptor0.setSeed(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(randomAdaptor0, 1456, 1456, 0);
      hypergeometricDistribution0.getSampleSize();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1531, 1531, 0);
      hypergeometricDistribution0.solveInverseCumulativeProbability(0.5930894613265991, 0, 1531);
      hypergeometricDistribution0.inverseCumulativeProbability(0);
      hypergeometricDistribution0.reseedRandomGenerator(1125L);
      hypergeometricDistribution0.getSupportUpperBound();
      long long0 = 36L;
      hypergeometricDistribution0.getSupportUpperBound();
      try { 
        hypergeometricDistribution0.inverseCumulativeProbability((-1990.2647));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,990.265 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(464, 464, 464);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.cumulativeProbability(2429);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getSupportUpperBound();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 1444;
      int int1 = (-2647);
      int int2 = 0;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1444, (-2647), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-2,647)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 331;
      int int1 = 430;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(331, 430, 331);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (430) must be less than or equal to population size (331)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom();
      int[] intArray0 = new int[0];
      iSAACRandom0.setSeed(intArray0);
      int int0 = 124;
      iSAACRandom0.nextInt();
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 2, 2, 124);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (124) must be less than or equal to population size (2)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Well512a well512a0 = new Well512a(0L);
      int int0 = 759;
      well512a0.nextBoolean();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 759, 759, 759);
      well512a0.nextDouble();
      hypergeometricDistribution0.probability(0);
      try { 
        hypergeometricDistribution0.inverseCumulativeProbability((-2216.33134));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,216.331 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 1349;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1349, 0, 0);
      hypergeometricDistribution0.cumulativeProbability(0, 1349);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.probability(1349);
      hypergeometricDistribution0.cumulativeProbability(1349);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.solveInverseCumulativeProbability((-1.0), 0, 0);
      try { 
        hypergeometricDistribution0.inverseCumulativeProbability(1.3106298446655273);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1.311 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 550;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(550, 550, 773);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (773) must be less than or equal to population size (550)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1941, 1941, 1941);
      hypergeometricDistribution0.sample(1941);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.upperCumulativeProbability((-1));
      hypergeometricDistribution0.reseedRandomGenerator(1L);
      // Undeclared exception!
      hypergeometricDistribution0.sample(1941);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(451, 451, 451);
      hypergeometricDistribution0.reseedRandomGenerator((-1286L));
      hypergeometricDistribution0.inverseCumulativeProbability(0.0);
      hypergeometricDistribution0.sample();
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(451, int0);
      
      double double0 = hypergeometricDistribution0.probability(451);
      assertEquals(Double.NaN, double0, 0.01);
      
      hypergeometricDistribution0.sample(451);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.reseedRandomGenerator(451);
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.getSampleSize();
      int int1 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(451.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(451, int1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1598, 1598, 1598);
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(1598, int0);
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      int int0 = (-672);
      well512a0.setSeed((long) 668);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, (-672), 668, (-1771));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-672)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 0;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(654, 654, 0);
      hypergeometricDistribution0.cumulativeProbability(0, 0);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getNumericalVariance();
      try { 
        hypergeometricDistribution0.cumulativeProbability(654, (-1641));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lower endpoint (654) must be less than or equal to upper endpoint (-1,641)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(252, 1870, (-324));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-324)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 0;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }
}
