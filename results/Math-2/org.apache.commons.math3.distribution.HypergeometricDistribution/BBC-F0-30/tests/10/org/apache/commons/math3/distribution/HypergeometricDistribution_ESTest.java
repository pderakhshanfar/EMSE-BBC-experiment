/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 16:14:41 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 1140;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1140, 1, 1140);
      hypergeometricDistribution0.reseedRandomGenerator(1);
      hypergeometricDistribution0.upperCumulativeProbability(1);
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.sample(3332);
      System.setCurrentTimeMillis(1);
      int int1 = 414;
      hypergeometricDistribution0.inverseCumulativeProbability(1);
      // Undeclared exception!
      hypergeometricDistribution0.getNumericalMean();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 1140;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1140, 1, 1140);
      hypergeometricDistribution0.reseedRandomGenerator(1);
      hypergeometricDistribution0.upperCumulativeProbability(1);
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.sample(3332);
      System.setCurrentTimeMillis(1);
      int int1 = 414;
      hypergeometricDistribution0.inverseCumulativeProbability(1);
      // Undeclared exception!
      hypergeometricDistribution0.getSupportUpperBound();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 1140;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1140, 1, 1140);
      hypergeometricDistribution0.upperCumulativeProbability(1);
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.sample(3332);
      System.setCurrentTimeMillis(1);
      int int1 = 414;
      hypergeometricDistribution0.inverseCumulativeProbability(1);
      // Undeclared exception!
      hypergeometricDistribution0.calculateNumericalVariance();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1140, 1, 1140);
      hypergeometricDistribution0.reseedRandomGenerator(1);
      hypergeometricDistribution0.upperCumulativeProbability(1);
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.sample(3332);
      System.setCurrentTimeMillis(1);
      hypergeometricDistribution0.inverseCumulativeProbability(1);
      hypergeometricDistribution0.cumulativeProbability(4319);
      Random.setNextRandom(414);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.cumulativeProbability(1);
      System.setCurrentTimeMillis(1140);
      System.setCurrentTimeMillis(1140);
      hypergeometricDistribution0.reseedRandomGenerator((-4653L));
      // Undeclared exception!
      hypergeometricDistribution0.getNumberOfSuccesses();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 1140;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1140, 1, 1140);
      hypergeometricDistribution0.reseedRandomGenerator(1);
      hypergeometricDistribution0.upperCumulativeProbability(1);
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.sample(3332);
      System.setCurrentTimeMillis(1);
      hypergeometricDistribution0.inverseCumulativeProbability(1);
      hypergeometricDistribution0.cumulativeProbability(4319);
      Random.setNextRandom(414);
      hypergeometricDistribution0.getNumericalVariance();
      // Undeclared exception!
      hypergeometricDistribution0.getSupportLowerBound();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 3153;
      intArray0[1] = 1356;
      intArray0[2] = (-1674);
      intArray0[3] = 3153;
      intArray0[4] = 3153;
      intArray0[5] = 3153;
      intArray0[6] = 3153;
      intArray0[7] = 3153;
      intArray0[8] = 3153;
      MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
      mersenneTwister0.nextDouble();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 1436, 0, 620);
      hypergeometricDistribution0.getNumberOfSuccesses();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2, 2, 0);
      hypergeometricDistribution0.inverseCumulativeProbability(0.0);
      hypergeometricDistribution0.inverseCumulativeProbability(0.0);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getNumericalMean();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(953, 953, 953);
      hypergeometricDistribution0.reseedRandomGenerator(953);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getNumericalVariance();
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(3523, 953, 1199);
      // Undeclared exception!
      hypergeometricDistribution1.cumulativeProbability(487);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1152, 711, 431);
      hypergeometricDistribution0.cumulativeProbability(475);
      hypergeometricDistribution0.reseedRandomGenerator(475);
      hypergeometricDistribution0.probability(67);
      hypergeometricDistribution0.upperCumulativeProbability(2);
      hypergeometricDistribution0.getSupportUpperBound();
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability(67);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 237;
      intArray0[1] = (-1449);
      intArray0[2] = 0;
      intArray0[3] = 824;
      Well19937a well19937a0 = new Well19937a(intArray0);
      well19937a0.nextGaussian();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 253, 0, 0);
      well19937a0.nextGaussian();
      hypergeometricDistribution0.getSampleSize();
      System.setCurrentTimeMillis(0);
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.isSupportConnected();
      System.setCurrentTimeMillis(237);
      System.setCurrentTimeMillis(237);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(953, 953, 953);
      hypergeometricDistribution0.reseedRandomGenerator(953);
      hypergeometricDistribution0.getSupportLowerBound();
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(2673, 953, 1199);
      hypergeometricDistribution1.cumulativeProbability(487);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1152, 711, 431);
      hypergeometricDistribution0.cumulativeProbability(431);
      hypergeometricDistribution0.reseedRandomGenerator(1152);
      hypergeometricDistribution0.probability(1988);
      hypergeometricDistribution0.upperCumulativeProbability(1);
      hypergeometricDistribution0.getSupportLowerBound();
      Well44497a well44497a0 = new Well44497a(3928L);
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(well44497a0, 1988, 431, 566);
      hypergeometricDistribution1.getNumericalVariance();
      try { 
        hypergeometricDistribution1.inverseCumulativeProbability(1988);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1,988 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 1152;
      int int1 = 431;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1152, 711, 431);
      hypergeometricDistribution0.cumulativeProbability(431);
      hypergeometricDistribution0.reseedRandomGenerator(1152);
      // Undeclared exception!
      hypergeometricDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(822, 822, 822);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(822, int0);
      
      hypergeometricDistribution0.solveInverseCumulativeProbability(822, 0, 822);
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.getNumericalMean();
      double double0 = hypergeometricDistribution0.probability(817);
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.getNumberOfSuccesses();
      double double1 = hypergeometricDistribution0.cumulativeProbability((-664));
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 343;
      Well19937c well19937c0 = new Well19937c(3928L);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 343, (-1867), (-2500));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-1,867)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      well19937c0.setSeed(2466);
      int int0 = 411;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(822, 411, 411);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.probability(822);
      Well19937c well19937c1 = new Well19937c(411);
      well19937c1.clear();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.upperCumulativeProbability(2466);
      HypergeometricDistribution hypergeometricDistribution1 = null;
      try {
        hypergeometricDistribution1 = new HypergeometricDistribution((-2028), (-1065), 1070);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-2,028)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 711;
      int int1 = 431;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(431, 3897, 3897);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (3,897) must be less than or equal to population size (431)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1152, 711, 431);
      double double0 = hypergeometricDistribution0.cumulativeProbability(431);
      assertEquals(1.0, double0, 0.01);
      
      hypergeometricDistribution0.reseedRandomGenerator(1152);
      hypergeometricDistribution0.probability((-4020));
      double double1 = hypergeometricDistribution0.upperCumulativeProbability(431);
      assertEquals(2.2575891139794987E-124, double1, 0.01);
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(0, int0);
      
      double double2 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(63.78821410602533, double2, 0.01);
      
      int int1 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(711, int1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int[] intArray0 = new int[21];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      Well19937c well19937c0 = new Well19937c(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 3372, 809, 0);
      double double0 = hypergeometricDistribution0.cumulativeProbability(817);
      hypergeometricDistribution0.reseedRandomGenerator(2136);
      double double1 = hypergeometricDistribution0.probability((-2650));
      double double2 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertEquals(double2, double0, 0.01);
      
      hypergeometricDistribution0.getSupportUpperBound();
      double double3 = hypergeometricDistribution0.upperCumulativeProbability(515);
      assertEquals(double3, double1, 0.01);
      
      double double4 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.0, double4, 0.01);
      assertEquals(3372, hypergeometricDistribution0.getPopulationSize());
      assertEquals(809, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 3897;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3897, 3897, 1194);
      hypergeometricDistribution0.probability(1194);
      hypergeometricDistribution0.upperCumulativeProbability(1235);
      hypergeometricDistribution0.probability(384);
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.isSupportConnected();
      int int1 = (-1);
      try { 
        hypergeometricDistribution0.inverseCumulativeProbability((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1152, 711, 431);
      double double0 = hypergeometricDistribution0.cumulativeProbability(431);
      assertEquals(1.0, double0, 0.01);
      
      hypergeometricDistribution0.reseedRandomGenerator(1152);
      double double1 = hypergeometricDistribution0.probability((-4020));
      assertEquals(0.0, double1, 0.01);
      
      double double2 = hypergeometricDistribution0.upperCumulativeProbability(431);
      assertEquals(2.2575891139794987E-124, double2, 0.01);
      
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.upperCumulativeProbability((-4020));
      double double3 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(63.78821410602533, double3, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(822, 822, 822);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(822, int0);
      
      hypergeometricDistribution0.solveInverseCumulativeProbability(822, 0, 822);
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.sample(498);
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.getSupportUpperBound();
      double double0 = hypergeometricDistribution0.probability(822);
      assertEquals(Double.NaN, double0, 0.01);
      
      hypergeometricDistribution0.getNumberOfSuccesses();
      double double1 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(822.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(953, 953, 953);
      hypergeometricDistribution0.reseedRandomGenerator(953);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      double double0 = hypergeometricDistribution0.probability(953);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = hypergeometricDistribution0.cumulativeProbability(953);
      assertEquals(1.0, double1, 0.01);
      
      hypergeometricDistribution0.reseedRandomGenerator((-1446L));
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.getNumericalVariance();
      double double2 = hypergeometricDistribution0.getNumericalVariance();
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      hypergeometricDistribution0.getNumberOfSuccesses();
      int int1 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(953, int1);
      
      int int2 = hypergeometricDistribution0.getSampleSize();
      assertTrue(int2 == int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 3222;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3222, 3222, 3222);
      hypergeometricDistribution0.probability(3222);
      hypergeometricDistribution0.solveInverseCumulativeProbability(Double.NaN, 3222, 0);
      // Undeclared exception!
      try { 
        hypergeometricDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int[] intArray0 = new int[1];
      intArray0[0] = 359;
      Well19937c well19937c0 = new Well19937c(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 359, 359, 2);
      int int0 = 0;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      hypergeometricDistribution0.solveInverseCumulativeProbability((-2.9031739430339586E-28), (-2204), 0);
      byteArray0[2] = (byte)0;
      try { 
        well19937c0.nextInt((int) (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.random.BitsStreamGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      Well19937c well19937c0 = new Well19937c(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 2136, (-1020), (-1020));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-1,020)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(1);
      mersenneTwister0.nextDouble();
      mersenneTwister0.setSeed((-4035746434778044925L));
      mersenneTwister0.setSeed((-4035746434778044925L));
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 1, 1, 1);
      mersenneTwister0.nextGaussian();
      double double0 = hypergeometricDistribution0.cumulativeProbability(1);
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.cumulativeProbability(1);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte) (-2);
      mersenneTwister0.nextBytes(byteArray0);
      hypergeometricDistribution0.isSupportConnected();
      double double1 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(double1, double0, 0.01);
      
      mersenneTwister0.nextInt();
      hypergeometricDistribution0.getNumberOfSuccesses();
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 1329, 0, 650);
      hypergeometricDistribution0.cumulativeProbability(0, 495);
      int int0 = 2;
      // Undeclared exception!
      try { 
        hypergeometricDistribution0.sample(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom();
      int[] intArray0 = new int[8];
      intArray0[0] = 2445;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 1203;
      intArray0[4] = 2445;
      intArray0[5] = 2445;
      intArray0[6] = 2445;
      intArray0[7] = 2445;
      iSAACRandom0.setSeed(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 2445, 2445, 0);
      // Undeclared exception!
      try { 
        hypergeometricDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2, 2, 0);
      hypergeometricDistribution0.inverseCumulativeProbability(0.0);
      hypergeometricDistribution0.getSupportLowerBound();
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int int0 = 90;
      int int1 = 861;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(90, 861, 90);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (861) must be less than or equal to population size (90)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 0;
      int int1 = (-1240);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((-1), 0, (-1240));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-1)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(2505, 2505, (-6));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-6)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2466, 343, 2466);
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(343.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2466, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom(0L);
      int int0 = 2;
      int int1 = 1;
      int int2 = 2117;
      iSAACRandom0.nextInt();
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 2, 1, 2117);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (2,117) must be less than or equal to population size (2)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom(3686L);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 0, (-183), 1017);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }
}
