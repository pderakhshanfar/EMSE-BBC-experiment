/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 16:13:53 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well44497b;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(1);
      assertNotNull(well1024a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 2080, 1, 1311);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(2080, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1311, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.6302884615384615, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(1);
      assertEquals(2080, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1311, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.6302884615384615, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.6302884615384615, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2029, 2029, 1311);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(2029, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1311.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1311, hypergeometricDistribution0.getSampleSize());
      assertEquals(2029, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(1);
      assertEquals(2029, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1311.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1311, hypergeometricDistribution0.getSampleSize());
      assertEquals(2029, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3675, 1648, 1135);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(3675, hypergeometricDistribution0.getPopulationSize());
      assertEquals(508.97414965986394, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1135, hypergeometricDistribution0.getSampleSize());
      assertEquals(1648, hypergeometricDistribution0.getNumberOfSuccesses());
      
      // Undeclared exception!
      hypergeometricDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(0);
      assertNotNull(well44497b0);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 0, 2, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2029, 2029, 1311);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2029, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1311, hypergeometricDistribution0.getSampleSize());
      assertEquals(2029, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1311.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double0 = hypergeometricDistribution0.probability(1311);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2029, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1311, hypergeometricDistribution0.getSampleSize());
      assertEquals(2029, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1311.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(125, 0, 125);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(125, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(125, hypergeometricDistribution0.getPopulationSize());
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(125, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(125, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2029, 2029, 1311);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(2029, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1311.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1311, hypergeometricDistribution0.getSampleSize());
      assertEquals(2029, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(2029, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1311.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1311, hypergeometricDistribution0.getSampleSize());
      assertEquals(2029, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1311, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2029, 2029, 1311);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2029, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1311, hypergeometricDistribution0.getSampleSize());
      assertEquals(2029, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1311.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2029, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1311, hypergeometricDistribution0.getSampleSize());
      assertEquals(2029, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1311.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1311, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2029, 2029, 1311);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2029, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1311, hypergeometricDistribution0.getSampleSize());
      assertEquals(2029, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1311.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2029, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1311, hypergeometricDistribution0.getSampleSize());
      assertEquals(2029, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1311.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1311, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(125, 0, 125);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(125, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(125, hypergeometricDistribution0.getPopulationSize());
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(125, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(125, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(1135);
      assertNotNull(well1024a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 1135, 58, 141);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(58, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1135, hypergeometricDistribution0.getPopulationSize());
      assertEquals(7.205286343612335, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(141, hypergeometricDistribution0.getSampleSize());
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(58, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1135, hypergeometricDistribution0.getPopulationSize());
      assertEquals(7.205286343612335, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(141, hypergeometricDistribution0.getSampleSize());
      assertEquals(5.993001912623097, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2, 0, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2029, 2029, 1311);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(2029, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1311.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1311, hypergeometricDistribution0.getSampleSize());
      assertEquals(2029, hypergeometricDistribution0.getPopulationSize());
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(2029, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1311.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1311, hypergeometricDistribution0.getSampleSize());
      assertEquals(2029, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1311.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(125, 0, 125);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(125, hypergeometricDistribution0.getSampleSize());
      assertEquals(125, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(125, hypergeometricDistribution0.getSampleSize());
      assertEquals(125, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2029, 2029, 1311);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(2029, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1311.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1311, hypergeometricDistribution0.getSampleSize());
      assertEquals(2029, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(1311);
      assertEquals(2029, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1311.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1311, hypergeometricDistribution0.getSampleSize());
      assertEquals(2029, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2029, 2029, 1311);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(2029, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1311.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2029, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1311, hypergeometricDistribution0.getSampleSize());
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(2029, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1311.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2029, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1311, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2098, 1290, 2029);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1290, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1247.5738798856053, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2029, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2098, hypergeometricDistribution0.getPopulationSize());
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(1290, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1247.5738798856053, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2029, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2098, hypergeometricDistribution0.getPopulationSize());
      assertEquals(15.809670211015115, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[5];
      Well44497b well44497b0 = new Well44497b(intArray0);
      assertNotNull(well44497b0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, (-2978), 340, (-1371));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-2,978)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2029, 2029, 1311);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1311, hypergeometricDistribution0.getSampleSize());
      assertEquals(2029, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2029, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1311.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1311, hypergeometricDistribution0.getSampleSize());
      assertEquals(2029, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2029, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1311.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2029, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2029, 2029, 1311);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1311.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2029, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1311, hypergeometricDistribution0.getSampleSize());
      assertEquals(2029, hypergeometricDistribution0.getPopulationSize());
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(1311.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2029, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1311, hypergeometricDistribution0.getSampleSize());
      assertEquals(2029, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2029, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(450, 450, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(450, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(450, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(450, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(450, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1135, 1135, 1135);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1135, hypergeometricDistribution0.getSampleSize());
      assertEquals(1135, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1135.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1135, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int[] intArray0 = hypergeometricDistribution0.sample(1044);
      assertNotNull(intArray0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1135, hypergeometricDistribution0.getSampleSize());
      assertEquals(1135, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1135.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1135, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1044, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2029, 1311, 1215);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1215, hypergeometricDistribution0.getSampleSize());
      assertEquals(2029, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1311, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(785.0492853622474, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(588);
      assertEquals(1215, hypergeometricDistribution0.getSampleSize());
      assertEquals(2029, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1311, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(785.0492853622474, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0000000000000007, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2027, 1135, 1135);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(272);
      assertEquals(0.9999999999999999, double0, 0.01);
      assertEquals(2027, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(450, 450, 0);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertEquals(450, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(450, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(450, 450, 0);
      double double0 = hypergeometricDistribution0.probability(450);
      assertEquals(450, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double0, 0.01);
      assertEquals(450, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(450, 450, 0);
      double double0 = hypergeometricDistribution0.probability((-1142));
      assertEquals(450, hypergeometricDistribution0.getPopulationSize());
      assertEquals(450, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2027, 1135, 1135);
      double double0 = hypergeometricDistribution0.cumulativeProbability(1044);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(450, 450, 0);
      double double0 = hypergeometricDistribution0.cumulativeProbability((-719));
      assertEquals(450, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(450, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(450, 450, 0);
      int int0 = hypergeometricDistribution0.solveInverseCumulativeProbability(0.0, 402, 411);
      assertEquals(450, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(403, int0);
      assertEquals(450, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(215);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 2029, 446, 2080);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (2,080) must be less than or equal to population size (2,029)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1290, 2100, 2899);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (2,100) must be less than or equal to population size (1,290)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(771, 771, (-229));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-229)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(892, (-3870), 370);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-3,870)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(450, 450, 0);
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertEquals(450, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(450, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(450, 450, 0);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(411);
      assertEquals(450, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double0, 0.01);
      assertEquals(450, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(450, 450, 0);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(450, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, int0);
      assertEquals(450, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
  }
}
