/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 16:27:57 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(8388607, 8388607, 8388607);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.reseedRandomGenerator(0L);
      hypergeometricDistribution0.reseedRandomGenerator(8388607);
      hypergeometricDistribution0.cumulativeProbability(8388607);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.upperCumulativeProbability((-1216));
      hypergeometricDistribution0.reseedRandomGenerator(8388607);
      int int0 = 1555;
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.probability(1555);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.probability((-1292));
      hypergeometricDistribution0.calculateNumericalVariance();
      try { 
        hypergeometricDistribution0.inverseCumulativeProbability(8388607);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8,388,607 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2289, 734, 821);
      hypergeometricDistribution0.upperCumulativeProbability(2289);
      hypergeometricDistribution0.getNumberOfSuccesses();
      System.setCurrentTimeMillis(734);
      hypergeometricDistribution0.cumulativeProbability(622);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2153, 2153, 0);
      hypergeometricDistribution0.cumulativeProbability(2153);
      hypergeometricDistribution0.reseedRandomGenerator(0L);
      hypergeometricDistribution0.inverseCumulativeProbability(1.0);
      hypergeometricDistribution0.cumulativeProbability(390, 2153);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.probability(2153);
      hypergeometricDistribution0.probability(2153);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.sample(1284);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.probability(0);
      hypergeometricDistribution0.upperCumulativeProbability(0);
      hypergeometricDistribution0.upperCumulativeProbability((-1665));
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.probability(209);
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.cumulativeProbability((-2828));
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.upperCumulativeProbability(0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4269, 704, 704);
      System.setCurrentTimeMillis((-897L));
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability(2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2127, 0, 0);
      hypergeometricDistribution0.cumulativeProbability((-938));
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.getSupportLowerBound();
      System.setCurrentTimeMillis((-100L));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      well512a0.nextGaussian();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 1108, 4, 226);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.probability(0);
      hypergeometricDistribution0.sample(226);
      hypergeometricDistribution0.solveInverseCumulativeProbability(0, 1108, 2);
      hypergeometricDistribution0.upperCumulativeProbability(2);
      HypergeometricDistribution hypergeometricDistribution1 = null;
      try {
        hypergeometricDistribution1 = new HypergeometricDistribution(2, (-2486), 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-2,486)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      well512a0.nextGaussian();
      well512a0.nextDouble();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 1108, 2, 226);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.probability(226);
      hypergeometricDistribution0.sample(226);
      hypergeometricDistribution0.solveInverseCumulativeProbability(0.0, 599, 1738);
      hypergeometricDistribution0.solveInverseCumulativeProbability(1269.0813862813943, (-1220), 0);
      hypergeometricDistribution0.upperCumulativeProbability(0);
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.getNumberOfSuccesses();
      well512a0.nextInt();
      System.setCurrentTimeMillis(0L);
      hypergeometricDistribution0.upperCumulativeProbability(518);
      hypergeometricDistribution0.upperCumulativeProbability(2);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      well512a0.nextGaussian();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 1108, 28, 226);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.probability(226);
      // Undeclared exception!
      hypergeometricDistribution0.sample(226);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      well512a0.nextGaussian();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 1108, 2, 226);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.probability(226);
      hypergeometricDistribution0.sample(226);
      hypergeometricDistribution0.solveInverseCumulativeProbability(651.9022604857028, 0, 1604);
      hypergeometricDistribution0.upperCumulativeProbability(516);
      hypergeometricDistribution0.solveInverseCumulativeProbability(516, (-2441), (-960));
      HypergeometricDistribution hypergeometricDistribution1 = null;
      try {
        hypergeometricDistribution1 = new HypergeometricDistribution(well512a0, 0, 776, (-2441));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 1090, 1090, 1090);
      hypergeometricDistribution0.sample();
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(well512a0, 1603, 1090, 1090);
      hypergeometricDistribution1.getSupportLowerBound();
      hypergeometricDistribution1.calculateNumericalVariance();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution1.isSupportConnected();
      hypergeometricDistribution1.getSupportLowerBound();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 687;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1445, 687, 1603);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (1,603) must be less than or equal to population size (1,445)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1605, 1605, 1605);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1605, hypergeometricDistribution0.getSampleSize());
      assertEquals(1605, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1605.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1605, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.cumulativeProbability((-624), (-624));
      assertEquals(0.0, double0, 0.01);
      assertEquals(1605, hypergeometricDistribution0.getSampleSize());
      assertEquals(1605, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1605.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1605, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(1605, int0);
      assertEquals(1605, hypergeometricDistribution0.getSampleSize());
      assertEquals(1605, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1605.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1605, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double1 = hypergeometricDistribution0.probability(2);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(1605, hypergeometricDistribution0.getSampleSize());
      assertEquals(1605, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1605.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1605, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int[] intArray0 = hypergeometricDistribution0.sample(1605);
      assertNotNull(intArray0);
      assertEquals(1605, intArray0.length);
      assertEquals(1605, hypergeometricDistribution0.getSampleSize());
      assertEquals(1605, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1605.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1605, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int1 = hypergeometricDistribution0.solveInverseCumulativeProbability((-1.0), 1605, 776);
      assertFalse(int1 == int0);
      assertEquals(776, int1);
      assertEquals(1605, hypergeometricDistribution0.getSampleSize());
      assertEquals(1605, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1605.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1605, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int2 = hypergeometricDistribution0.solveInverseCumulativeProbability((-1864.172763), (-948), 3270);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-947), int2);
      assertEquals(1605, hypergeometricDistribution0.getSampleSize());
      assertEquals(1605, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1605.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1605, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double2 = hypergeometricDistribution0.upperCumulativeProbability(1888);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertEquals(1605, hypergeometricDistribution0.getSampleSize());
      assertEquals(1605, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1605.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1605, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int3 = hypergeometricDistribution0.solveInverseCumulativeProbability(1605, (-948), 1605);
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(1605, int3);
      assertEquals(1605, hypergeometricDistribution0.getSampleSize());
      assertEquals(1605, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1605.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1605, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double3 = hypergeometricDistribution0.getNumericalMean();
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(1605.0, double3, 0.01);
      assertEquals(1605, hypergeometricDistribution0.getSampleSize());
      assertEquals(1605, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1605.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1605, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int[] intArray1 = hypergeometricDistribution0.sample(1605);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertEquals(1605, intArray1.length);
      assertEquals(1605, hypergeometricDistribution0.getSampleSize());
      assertEquals(1605, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1605.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1605, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int4 = hypergeometricDistribution0.getSupportUpperBound();
      assertTrue(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertTrue(int4 == int0);
      assertEquals(1605, int4);
      assertEquals(1605, hypergeometricDistribution0.getSampleSize());
      assertEquals(1605, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1605.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1605, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int5 = hypergeometricDistribution0.solveInverseCumulativeProbability(776, 2032, 776);
      assertTrue(int5 == int1);
      assertFalse(int5 == int4);
      assertFalse(int5 == int2);
      assertFalse(int5 == int3);
      assertFalse(int5 == int0);
      assertEquals(776, int5);
      assertEquals(1605, hypergeometricDistribution0.getSampleSize());
      assertEquals(1605, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1605.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1605, hypergeometricDistribution0.getNumberOfSuccesses());
      
      hypergeometricDistribution0.reseedRandomGenerator(776);
      assertEquals(1605, hypergeometricDistribution0.getSampleSize());
      assertEquals(1605, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1605.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1605, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double4 = hypergeometricDistribution0.upperCumulativeProbability(2032);
      assertEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(0.0, double4, 0.01);
      assertEquals(1605, hypergeometricDistribution0.getSampleSize());
      assertEquals(1605, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1605.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1605, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int6 = hypergeometricDistribution0.solveInverseCumulativeProbability(1746.91435234338, 776, 2);
      assertFalse(int6 == int4);
      assertFalse(int6 == int2);
      assertFalse(int6 == int5);
      assertFalse(int6 == int0);
      assertFalse(int6 == int1);
      assertFalse(int6 == int3);
      assertEquals(2, int6);
      assertEquals(1605, hypergeometricDistribution0.getSampleSize());
      assertEquals(1605, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1605.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1605, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int7 = hypergeometricDistribution0.sample();
      assertTrue(int7 == int0);
      assertFalse(int7 == int2);
      assertTrue(int7 == int3);
      assertFalse(int7 == int1);
      assertFalse(int7 == int5);
      assertFalse(int7 == int6);
      assertTrue(int7 == int4);
      assertEquals(1605, int7);
      assertEquals(1605, hypergeometricDistribution0.getSampleSize());
      assertEquals(1605, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1605.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1605, hypergeometricDistribution0.getNumberOfSuccesses());
      
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(5249, 1310, 1605);
      assertNotNull(hypergeometricDistribution1);
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      assertEquals(5249, hypergeometricDistribution1.getPopulationSize());
      assertTrue(hypergeometricDistribution1.isSupportConnected());
      assertEquals(400.5620118117737, hypergeometricDistribution1.getNumericalMean(), 0.01);
      assertEquals(1310, hypergeometricDistribution1.getNumberOfSuccesses());
      assertEquals(1605, hypergeometricDistribution1.getSampleSize());
      
      double double5 = hypergeometricDistribution1.probability(776);
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      assertEquals(double5, double1, 0.01);
      assertEquals(double5, double0, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertEquals(double5, double4, 0.01);
      assertEquals(double5, double2, 0.01);
      assertEquals(6.424976320129896E-141, double5, 0.01);
      assertNotSame(hypergeometricDistribution1, hypergeometricDistribution0);
      assertEquals(5249, hypergeometricDistribution1.getPopulationSize());
      assertTrue(hypergeometricDistribution1.isSupportConnected());
      assertEquals(400.5620118117737, hypergeometricDistribution1.getNumericalMean(), 0.01);
      assertEquals(1310, hypergeometricDistribution1.getNumberOfSuccesses());
      assertEquals(1605, hypergeometricDistribution1.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      assertNotNull(mersenneTwister0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 2, 0, 2);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(0, int0);
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(0);
      assertEquals(1.0, double0, 0.01);
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double1 = hypergeometricDistribution0.upperCumulativeProbability(2403);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double2 = hypergeometricDistribution0.getNumericalVariance();
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      
      HypergeometricDistribution hypergeometricDistribution1 = null;
      try {
        hypergeometricDistribution1 = new HypergeometricDistribution((-949), (-48), (-945));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-949)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1605, 1605, 1605);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1605, hypergeometricDistribution0.getSampleSize());
      assertEquals(1605, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1605.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1605, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.cumulativeProbability((-624), (-624));
      assertEquals(0.0, double0, 0.01);
      assertEquals(1605, hypergeometricDistribution0.getSampleSize());
      assertEquals(1605, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1605.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1605, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(1605, int0);
      assertEquals(1605, hypergeometricDistribution0.getSampleSize());
      assertEquals(1605, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1605.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1605, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double1 = hypergeometricDistribution0.probability(2);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(1605, hypergeometricDistribution0.getSampleSize());
      assertEquals(1605, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1605.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1605, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double2 = hypergeometricDistribution0.probability(3247);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertEquals(1605, hypergeometricDistribution0.getSampleSize());
      assertEquals(1605, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1605.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1605, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int[] intArray0 = hypergeometricDistribution0.sample(1605);
      assertNotNull(intArray0);
      assertEquals(1605, intArray0.length);
      assertEquals(1605, hypergeometricDistribution0.getSampleSize());
      assertEquals(1605, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1605.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1605, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int1 = hypergeometricDistribution0.solveInverseCumulativeProbability((-1.0), 1605, 776);
      assertFalse(int1 == int0);
      assertEquals(776, int1);
      assertEquals(1605, hypergeometricDistribution0.getSampleSize());
      assertEquals(1605, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1605.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1605, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int2 = hypergeometricDistribution0.solveInverseCumulativeProbability((-1864.172763), (-948), 3270);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-947), int2);
      assertEquals(1605, hypergeometricDistribution0.getSampleSize());
      assertEquals(1605, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1605.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1605, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int3 = hypergeometricDistribution0.solveInverseCumulativeProbability(1605, (-948), 1605);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertEquals(1605, int3);
      assertEquals(1605, hypergeometricDistribution0.getSampleSize());
      assertEquals(1605, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1605.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1605, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double3 = hypergeometricDistribution0.getNumericalMean();
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(1605.0, double3, 0.01);
      assertEquals(1605, hypergeometricDistribution0.getSampleSize());
      assertEquals(1605, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1605.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1605, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int[] intArray1 = hypergeometricDistribution0.sample(1605);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertEquals(1605, intArray1.length);
      assertEquals(1605, hypergeometricDistribution0.getSampleSize());
      assertEquals(1605, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1605.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1605, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int4 = hypergeometricDistribution0.getSupportUpperBound();
      assertTrue(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertTrue(int4 == int0);
      assertEquals(1605, int4);
      assertEquals(1605, hypergeometricDistribution0.getSampleSize());
      assertEquals(1605, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1605.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1605, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int5 = hypergeometricDistribution0.solveInverseCumulativeProbability(776, 2032, 776);
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      assertTrue(int5 == int1);
      assertFalse(int5 == int3);
      assertFalse(int5 == int4);
      assertEquals(776, int5);
      assertEquals(1605, hypergeometricDistribution0.getSampleSize());
      assertEquals(1605, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1605.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1605, hypergeometricDistribution0.getNumberOfSuccesses());
      
      hypergeometricDistribution0.reseedRandomGenerator(776);
      assertEquals(1605, hypergeometricDistribution0.getSampleSize());
      assertEquals(1605, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1605.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1605, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double4 = hypergeometricDistribution0.upperCumulativeProbability(2032);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(double4, double2, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(0.0, double4, 0.01);
      assertEquals(1605, hypergeometricDistribution0.getSampleSize());
      assertEquals(1605, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1605.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1605, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int6 = hypergeometricDistribution0.solveInverseCumulativeProbability(1746.91435234338, 776, 2);
      assertFalse(int6 == int2);
      assertFalse(int6 == int1);
      assertFalse(int6 == int3);
      assertFalse(int6 == int5);
      assertFalse(int6 == int0);
      assertFalse(int6 == int4);
      assertEquals(2, int6);
      assertEquals(1605, hypergeometricDistribution0.getSampleSize());
      assertEquals(1605, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1605.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1605, hypergeometricDistribution0.getNumberOfSuccesses());
      
      try { 
        hypergeometricDistribution0.cumulativeProbability((-948), (-3143));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lower endpoint (-948) must be less than or equal to upper endpoint (-3,143)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1605, 1605, 1605);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1605.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1605, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1605, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1605, hypergeometricDistribution0.getSampleSize());
      
      double double0 = hypergeometricDistribution0.cumulativeProbability((-624), (-624));
      assertEquals(0.0, double0, 0.01);
      assertEquals(1605.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1605, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1605, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1605, hypergeometricDistribution0.getSampleSize());
      
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(1605, int0);
      assertEquals(1605.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1605, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1605, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1605, hypergeometricDistribution0.getSampleSize());
      
      double double1 = hypergeometricDistribution0.probability(2);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(1605.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1605, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1605, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1605, hypergeometricDistribution0.getSampleSize());
      
      int[] intArray0 = hypergeometricDistribution0.sample(1605);
      assertNotNull(intArray0);
      assertEquals(1605, intArray0.length);
      assertEquals(1605.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1605, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1605, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1605, hypergeometricDistribution0.getSampleSize());
      
      int int1 = hypergeometricDistribution0.solveInverseCumulativeProbability((-1.0), 1605, 776);
      assertFalse(int1 == int0);
      assertEquals(776, int1);
      assertEquals(1605.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1605, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1605, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1605, hypergeometricDistribution0.getSampleSize());
      
      int int2 = hypergeometricDistribution0.solveInverseCumulativeProbability(1605, (-948), 1605);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1605, int2);
      assertEquals(1605.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1605, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1605, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1605, hypergeometricDistribution0.getSampleSize());
      
      double double2 = hypergeometricDistribution0.getNumericalMean();
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(1605.0, double2, 0.01);
      assertEquals(1605.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1605, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1605, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1605, hypergeometricDistribution0.getSampleSize());
      
      int[] intArray1 = hypergeometricDistribution0.sample(1605);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertEquals(1605, intArray1.length);
      assertEquals(1605.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1605, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1605, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1605, hypergeometricDistribution0.getSampleSize());
      
      int int3 = hypergeometricDistribution0.getSupportUpperBound();
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertEquals(1605, int3);
      assertEquals(1605.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1605, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1605, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1605, hypergeometricDistribution0.getSampleSize());
      
      int int4 = hypergeometricDistribution0.solveInverseCumulativeProbability(776, 2032, 776);
      assertFalse(int4 == int2);
      assertTrue(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertEquals(776, int4);
      assertEquals(1605.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1605, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1605, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1605, hypergeometricDistribution0.getSampleSize());
      
      hypergeometricDistribution0.reseedRandomGenerator(776);
      assertEquals(1605.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1605, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1605, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1605, hypergeometricDistribution0.getSampleSize());
      
      double double3 = hypergeometricDistribution0.upperCumulativeProbability(2032);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(0.0, double3, 0.01);
      assertEquals(1605.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1605, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1605, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1605, hypergeometricDistribution0.getSampleSize());
      
      double double4 = hypergeometricDistribution0.getNumericalMean();
      assertNotEquals(double4, double3, 0.01);
      assertEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(1605.0, double4, 0.01);
      assertEquals(1605.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1605, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1605, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1605, hypergeometricDistribution0.getSampleSize());
      
      double double5 = hypergeometricDistribution0.probability(1605);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertEquals(Double.NaN, double5, 0.01);
      assertEquals(1605.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1605, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1605, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1605, hypergeometricDistribution0.getSampleSize());
      
      int int5 = hypergeometricDistribution0.getSampleSize();
      assertTrue(int5 == int0);
      assertTrue(int5 == int2);
      assertFalse(int5 == int4);
      assertTrue(int5 == int3);
      assertFalse(int5 == int1);
      assertEquals(1605, int5);
      assertEquals(1605.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1605, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1605, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1605, hypergeometricDistribution0.getSampleSize());
      
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      assertEquals(1605.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1605, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1605, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1605, hypergeometricDistribution0.getSampleSize());
      
      int int6 = hypergeometricDistribution0.getPopulationSize();
      assertTrue(int6 == int0);
      assertTrue(int6 == int5);
      assertTrue(int6 == int2);
      assertTrue(int6 == int3);
      assertFalse(int6 == int1);
      assertFalse(int6 == int4);
      assertEquals(1605, int6);
      assertEquals(1605.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1605, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1605, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1605, hypergeometricDistribution0.getSampleSize());
      
      double double6 = hypergeometricDistribution0.getNumericalMean();
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertEquals(double6, double4, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertEquals(double6, double2, 0.01);
      assertEquals(1605.0, double6, 0.01);
      assertEquals(1605.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1605, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1605, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1605, hypergeometricDistribution0.getSampleSize());
      
      double double7 = hypergeometricDistribution0.calculateNumericalVariance();
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertEquals(double7, double1, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertEquals(double7, double3, 0.01);
      assertEquals(double7, double0, 0.01);
      assertEquals(0.0, double7, 0.01);
      assertEquals(1605.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1605, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1605, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1605, hypergeometricDistribution0.getSampleSize());
      
      double double8 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(double8, double0, 0.01);
      assertEquals(double8, double1, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertEquals(double8, double7, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertEquals(double8, double3, 0.01);
      assertEquals(0.0, double8, 0.01);
      assertEquals(1605.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1605, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1605, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1605, hypergeometricDistribution0.getSampleSize());
      
      double double9 = hypergeometricDistribution0.getNumericalVariance();
      assertNotEquals(double9, double2, 0.01);
      assertEquals(double9, double3, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertEquals(double9, double1, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertEquals(double9, double8, 0.01);
      assertEquals(double9, double7, 0.01);
      assertEquals(double9, double0, 0.01);
      assertEquals(0.0, double9, 0.01);
      assertEquals(1605.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1605, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1605, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1605, hypergeometricDistribution0.getSampleSize());
      
      double double10 = hypergeometricDistribution0.getNumericalVariance();
      assertNotEquals(double10, double6, 0.01);
      assertEquals(double10, double1, 0.01);
      assertEquals(double10, double9, 0.01);
      assertEquals(double10, double0, 0.01);
      assertNotEquals(double10, double4, 0.01);
      assertNotEquals(double10, double5, 0.01);
      assertEquals(double10, double8, 0.01);
      assertEquals(double10, double7, 0.01);
      assertNotEquals(double10, double2, 0.01);
      assertEquals(double10, double3, 0.01);
      assertEquals(0.0, double10, 0.01);
      assertEquals(1605.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1605, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1605, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1605, hypergeometricDistribution0.getSampleSize());
      
      boolean boolean1 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(1605.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1605, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1605, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1605, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      assertNotNull(mersenneTwister0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 566;
      intArray0[1] = 566;
      intArray0[2] = 566;
      intArray0[3] = 566;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2742, 566, 1);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(566, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2742, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.2064186725018235, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.16381000414440844, double0, 0.01);
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(566, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2742, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.2064186725018235, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(1, int0);
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(566, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2742, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.2064186725018235, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 103;
      MersenneTwister mersenneTwister0 = new MersenneTwister(0L);
      assertNotNull(mersenneTwister0);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 103, 281, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (281) must be less than or equal to population size (103)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3247, 3247, 3247);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(3247, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3247, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3247.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3247, hypergeometricDistribution0.getSampleSize());
      
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      assertEquals(3247, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3247, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3247.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3247, hypergeometricDistribution0.getSampleSize());
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(3247, int0);
      assertEquals(3247, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3247, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3247.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3247, hypergeometricDistribution0.getSampleSize());
      
      double double0 = hypergeometricDistribution0.cumulativeProbability((-1));
      assertEquals(0.0, double0, 0.01);
      assertEquals(3247, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3247, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3247.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3247, hypergeometricDistribution0.getSampleSize());
      
      int int1 = hypergeometricDistribution0.sample();
      assertTrue(int1 == int0);
      assertEquals(3247, int1);
      assertEquals(3247, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3247, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3247.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3247, hypergeometricDistribution0.getSampleSize());
      
      int int2 = hypergeometricDistribution0.getSupportUpperBound();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(3247, int2);
      assertEquals(3247, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3247, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3247.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3247, hypergeometricDistribution0.getSampleSize());
      
      double double1 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(3247, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3247, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3247.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3247, hypergeometricDistribution0.getSampleSize());
      
      double double2 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertEquals(3247, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3247, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3247.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3247, hypergeometricDistribution0.getSampleSize());
      
      double double3 = hypergeometricDistribution0.probability(0);
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(0.0, double3, 0.01);
      assertEquals(3247, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3247, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3247.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3247, hypergeometricDistribution0.getSampleSize());
      
      double double4 = hypergeometricDistribution0.probability(3247);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
      assertEquals(3247, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3247, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3247.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3247, hypergeometricDistribution0.getSampleSize());
      
      int int3 = hypergeometricDistribution0.getSupportUpperBound();
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals(3247, int3);
      assertEquals(3247, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3247, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3247.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3247, hypergeometricDistribution0.getSampleSize());
      
      int int4 = hypergeometricDistribution0.getSupportLowerBound();
      assertTrue(int4 == int0);
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      assertEquals(3247, int4);
      assertEquals(3247, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3247, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3247.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3247, hypergeometricDistribution0.getSampleSize());
      
      int int5 = hypergeometricDistribution0.getSupportLowerBound();
      assertTrue(int5 == int1);
      assertTrue(int5 == int0);
      assertTrue(int5 == int3);
      assertTrue(int5 == int4);
      assertTrue(int5 == int2);
      assertEquals(3247, int5);
      assertEquals(3247, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3247, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3247.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3247, hypergeometricDistribution0.getSampleSize());
      
      hypergeometricDistribution0.reseedRandomGenerator(1L);
      assertEquals(3247, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3247, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3247.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3247, hypergeometricDistribution0.getSampleSize());
      
      double double5 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(double5, double3, 0.01);
      assertEquals(double5, double2, 0.01);
      assertEquals(double5, double1, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertEquals(double5, double0, 0.01);
      assertEquals(0.0, double5, 0.01);
      assertEquals(3247, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3247, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3247.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3247, hypergeometricDistribution0.getSampleSize());
      
      double double6 = hypergeometricDistribution0.probability(1297);
      assertEquals(double6, double5, 0.01);
      assertEquals(double6, double3, 0.01);
      assertEquals(double6, double2, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertEquals(double6, double0, 0.01);
      assertEquals(double6, double1, 0.01);
      assertEquals(0.0, double6, 0.01);
      assertEquals(3247, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3247, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3247.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3247, hypergeometricDistribution0.getSampleSize());
      
      boolean boolean1 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertEquals(3247, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3247, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3247.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3247, hypergeometricDistribution0.getSampleSize());
      
      int int6 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertTrue(int6 == int5);
      assertTrue(int6 == int1);
      assertTrue(int6 == int4);
      assertTrue(int6 == int3);
      assertTrue(int6 == int0);
      assertTrue(int6 == int2);
      assertEquals(3247, int6);
      assertEquals(3247, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3247, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3247.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3247, hypergeometricDistribution0.getSampleSize());
      
      boolean boolean2 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertEquals(3247, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3247, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3247.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3247, hypergeometricDistribution0.getSampleSize());
      
      boolean boolean3 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3);
      assertEquals(3247, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3247, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3247.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3247, hypergeometricDistribution0.getSampleSize());
      
      int int7 = hypergeometricDistribution0.getSampleSize();
      assertTrue(int7 == int6);
      assertTrue(int7 == int0);
      assertTrue(int7 == int3);
      assertTrue(int7 == int5);
      assertTrue(int7 == int4);
      assertTrue(int7 == int1);
      assertTrue(int7 == int2);
      assertEquals(3247, int7);
      assertEquals(3247, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3247, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3247.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3247, hypergeometricDistribution0.getSampleSize());
      
      int int8 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertTrue(int8 == int3);
      assertTrue(int8 == int4);
      assertTrue(int8 == int1);
      assertTrue(int8 == int6);
      assertTrue(int8 == int0);
      assertTrue(int8 == int7);
      assertTrue(int8 == int5);
      assertTrue(int8 == int2);
      assertEquals(3247, int8);
      assertEquals(3247, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3247, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3247.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3247, hypergeometricDistribution0.getSampleSize());
      
      double double7 = hypergeometricDistribution0.upperCumulativeProbability(829);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertEquals(1.0, double7, 0.01);
      assertEquals(3247, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3247, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3247.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3247, hypergeometricDistribution0.getSampleSize());
      
      double double8 = hypergeometricDistribution0.probability((-1));
      assertEquals(double8, double0, 0.01);
      assertEquals(double8, double2, 0.01);
      assertEquals(double8, double5, 0.01);
      assertEquals(double8, double1, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertEquals(double8, double3, 0.01);
      assertEquals(double8, double6, 0.01);
      assertEquals(0.0, double8, 0.01);
      assertEquals(3247, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3247, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3247.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3247, hypergeometricDistribution0.getSampleSize());
      
      double double9 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(double9, double1, 0.01);
      assertEquals(double9, double8, 0.01);
      assertEquals(double9, double0, 0.01);
      assertEquals(double9, double5, 0.01);
      assertEquals(double9, double3, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertEquals(double9, double6, 0.01);
      assertEquals(double9, double2, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertEquals(0.0, double9, 0.01);
      assertEquals(3247, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3247, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3247.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3247, hypergeometricDistribution0.getSampleSize());
      
      double double10 = hypergeometricDistribution0.probability(702);
      assertEquals(double10, double9, 0.01);
      assertEquals(double10, double5, 0.01);
      assertEquals(double10, double6, 0.01);
      assertEquals(double10, double3, 0.01);
      assertEquals(double10, double2, 0.01);
      assertNotEquals(double10, double7, 0.01);
      assertNotEquals(double10, double4, 0.01);
      assertEquals(double10, double8, 0.01);
      assertEquals(double10, double0, 0.01);
      assertEquals(double10, double1, 0.01);
      assertEquals(0.0, double10, 0.01);
      assertEquals(3247, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3247, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3247.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3247, hypergeometricDistribution0.getSampleSize());
      
      int int9 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertTrue(int9 == int1);
      assertTrue(int9 == int8);
      assertTrue(int9 == int2);
      assertTrue(int9 == int4);
      assertTrue(int9 == int7);
      assertTrue(int9 == int6);
      assertTrue(int9 == int0);
      assertTrue(int9 == int3);
      assertTrue(int9 == int5);
      assertEquals(3247, int9);
      assertEquals(3247, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3247, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3247.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3247, hypergeometricDistribution0.getSampleSize());
      
      int int10 = hypergeometricDistribution0.getSupportUpperBound();
      assertTrue(int10 == int7);
      assertTrue(int10 == int6);
      assertTrue(int10 == int2);
      assertTrue(int10 == int1);
      assertTrue(int10 == int8);
      assertTrue(int10 == int3);
      assertTrue(int10 == int0);
      assertTrue(int10 == int9);
      assertTrue(int10 == int5);
      assertTrue(int10 == int4);
      assertEquals(3247, int10);
      assertEquals(3247, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3247, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3247.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3247, hypergeometricDistribution0.getSampleSize());
      
      double double11 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(double11, double5, 0.01);
      assertEquals(double11, double0, 0.01);
      assertEquals(double11, double10, 0.01);
      assertEquals(double11, double8, 0.01);
      assertEquals(double11, double1, 0.01);
      assertNotEquals(double11, double7, 0.01);
      assertEquals(double11, double2, 0.01);
      assertEquals(double11, double9, 0.01);
      assertNotEquals(double11, double4, 0.01);
      assertEquals(double11, double6, 0.01);
      assertEquals(double11, double3, 0.01);
      assertEquals(0.0, double11, 0.01);
      assertEquals(3247, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3247, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3247.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3247, hypergeometricDistribution0.getSampleSize());
      
      int int11 = hypergeometricDistribution0.getSupportUpperBound();
      assertTrue(int11 == int4);
      assertTrue(int11 == int1);
      assertTrue(int11 == int8);
      assertTrue(int11 == int5);
      assertTrue(int11 == int0);
      assertTrue(int11 == int3);
      assertTrue(int11 == int6);
      assertTrue(int11 == int10);
      assertTrue(int11 == int9);
      assertTrue(int11 == int7);
      assertTrue(int11 == int2);
      assertEquals(3247, int11);
      assertEquals(3247, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3247, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3247.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3247, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1760, 1760, 1760);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1760, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1760, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1760.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1760, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(1760, int0);
      assertEquals(1760, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1760, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1760.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1760, hypergeometricDistribution0.getNumberOfSuccesses());
      
      hypergeometricDistribution0.reseedRandomGenerator(0L);
      assertEquals(1760, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1760, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1760.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1760, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.probability(0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1760, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1760, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1760.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1760, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int1 = hypergeometricDistribution0.getSampleSize();
      assertTrue(int1 == int0);
      assertEquals(1760, int1);
      assertEquals(1760, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1760, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1760.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1760, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int2 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1760, int2);
      assertEquals(1760, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1760, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1760.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1760, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int3 = hypergeometricDistribution0.solveInverseCumulativeProbability(2552.9, (-356), 0);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(0, int3);
      assertEquals(1760, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1760, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1760.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1760, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double1 = hypergeometricDistribution0.getNumericalMean();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1760.0, double1, 0.01);
      assertEquals(1760, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1760, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1760.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1760, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int4 = hypergeometricDistribution0.getSampleSize();
      assertTrue(int4 == int2);
      assertFalse(int4 == int3);
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      assertEquals(1760, int4);
      assertEquals(1760, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1760, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1760.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1760, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double2 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(1760.0, double2, 0.01);
      assertEquals(1760, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1760, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1760.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1760, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1917, 1917, 1917);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1917, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1917.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1917, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1917, hypergeometricDistribution0.getPopulationSize());
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(1917, int0);
      assertEquals(1917, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1917.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1917, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1917, hypergeometricDistribution0.getPopulationSize());
      
      int int1 = hypergeometricDistribution0.getSupportUpperBound();
      assertTrue(int1 == int0);
      assertEquals(1917, int1);
      assertEquals(1917, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1917.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1917, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1917, hypergeometricDistribution0.getPopulationSize());
      
      int int2 = hypergeometricDistribution0.getSupportUpperBound();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1917, int2);
      assertEquals(1917, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1917.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1917, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1917, hypergeometricDistribution0.getPopulationSize());
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(1917);
      assertEquals(1.0, double0, 0.01);
      assertEquals(1917, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1917.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1917, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1917, hypergeometricDistribution0.getPopulationSize());
      
      double double1 = hypergeometricDistribution0.upperCumulativeProbability(2);
      assertEquals(double1, double0, 0.01);
      assertEquals(1.0, double1, 0.01);
      assertEquals(1917, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1917.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1917, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1917, hypergeometricDistribution0.getPopulationSize());
      
      double double2 = hypergeometricDistribution0.getNumericalVariance();
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertEquals(1917, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1917.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1917, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1917, hypergeometricDistribution0.getPopulationSize());
      
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      assertEquals(1917, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1917.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1917, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1917, hypergeometricDistribution0.getPopulationSize());
      
      double double3 = hypergeometricDistribution0.cumulativeProbability(0);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(0.0, double3, 0.01);
      assertEquals(1917, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1917.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1917, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1917, hypergeometricDistribution0.getPopulationSize());
      
      int int3 = hypergeometricDistribution0.sample();
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals(1917, int3);
      assertEquals(1917, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1917.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1917, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1917, hypergeometricDistribution0.getPopulationSize());
      
      double double4 = hypergeometricDistribution0.cumulativeProbability(2);
      assertEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(double4, double2, 0.01);
      assertEquals(0.0, double4, 0.01);
      assertEquals(1917, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1917.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1917, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1917, hypergeometricDistribution0.getPopulationSize());
      
      double double5 = hypergeometricDistribution0.upperCumulativeProbability(1917);
      assertEquals(double5, double1, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertEquals(double5, double0, 0.01);
      assertEquals(1.0, double5, 0.01);
      assertEquals(1917, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1917.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1917, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1917, hypergeometricDistribution0.getPopulationSize());
      
      int int4 = hypergeometricDistribution0.solveInverseCumulativeProbability(2, 0, 286);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertEquals(286, int4);
      assertEquals(1917, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1917.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1917, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1917, hypergeometricDistribution0.getPopulationSize());
      
      double double6 = hypergeometricDistribution0.probability(0);
      assertNotEquals(double6, double1, 0.01);
      assertEquals(double6, double3, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertEquals(double6, double4, 0.01);
      assertEquals(double6, double2, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertEquals(0.0, double6, 0.01);
      assertEquals(1917, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1917.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1917, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1917, hypergeometricDistribution0.getPopulationSize());
      
      double double7 = hypergeometricDistribution0.upperCumulativeProbability(3);
      assertEquals(double7, double0, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertEquals(double7, double5, 0.01);
      assertEquals(double7, double1, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertEquals(1.0, double7, 0.01);
      assertEquals(1917, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1917.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1917, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1917, hypergeometricDistribution0.getPopulationSize());
      
      try { 
        hypergeometricDistribution0.inverseCumulativeProbability((-391.106));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -391.106 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int[] intArray0 = new int[3];
      int int0 = (-232);
      intArray0[0] = (-232);
      intArray0[1] = (-759);
      intArray0[2] = 0;
      Well512a well512a0 = new Well512a(intArray0);
      assertNotNull(well512a0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-232), (-759), 0}, intArray0);
      
      float float0 = well512a0.nextFloat();
      assertEquals(0.16800189F, float0, 0.01F);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-232), (-759), 0}, intArray0);
      
      int int1 = well512a0.nextInt();
      assertFalse(int1 == int0);
      assertEquals((-1488705093), int1);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-232), (-759), 0}, intArray0);
      
      int int2 = 0;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 1909, 1035, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(3, intArray0.length);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1035, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1909, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertArrayEquals(new int[] {(-232), (-759), 0}, intArray0);
      
      double double0 = well512a0.nextDouble();
      assertEquals(0.354548238501613, double0, 0.01);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {(-232), (-759), 0}, intArray0);
      
      int int3 = hypergeometricDistribution0.getSampleSize();
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(0, int3);
      assertEquals(3, intArray0.length);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1035, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1909, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertArrayEquals(new int[] {(-232), (-759), 0}, intArray0);
      
      // Undeclared exception!
      try { 
        hypergeometricDistribution0.sample((-232));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-232)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1605, 1605, 1605);
      hypergeometricDistribution0.cumulativeProbability((-624), (-624));
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.probability(2);
      hypergeometricDistribution0.sample(1605);
      hypergeometricDistribution0.solveInverseCumulativeProbability((-1.0), 1605, 776);
      hypergeometricDistribution0.solveInverseCumulativeProbability((-1864.172763), (-948), 3270);
      hypergeometricDistribution0.solveInverseCumulativeProbability(1605, (-948), 1605);
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.sample(1605);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.solveInverseCumulativeProbability(776, 2032, 776);
      hypergeometricDistribution0.reseedRandomGenerator(776);
      hypergeometricDistribution0.upperCumulativeProbability(2032);
      hypergeometricDistribution0.solveInverseCumulativeProbability(1746.91435234338, 776, 2);
      try { 
        hypergeometricDistribution0.cumulativeProbability((-948), (-3143));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lower endpoint (-948) must be less than or equal to upper endpoint (-3,143)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1091, 0, 0);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.reseedRandomGenerator(0L);
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1091, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2121, 2121, 2121);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(687);
      assertEquals(1.0, double0, 0.01);
      
      double double1 = hypergeometricDistribution0.probability(2121);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = hypergeometricDistribution0.cumulativeProbability(2);
      assertEquals(0.0, double2, 0.01);
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(2121, int0);
      
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 2;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(2, (-461), 1208);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-461)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 56;
      int int1 = 2751;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(56, 2751, 56);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (2,751) must be less than or equal to population size (56)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 2;
      int int1 = 913;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 2, 2, 913);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (913) must be less than or equal to population size (2)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(844, 844, (-3472));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-3,472)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a((-1680));
      int[] intArray0 = new int[3];
      intArray0[0] = 40;
      intArray0[1] = (-1680);
      intArray0[2] = 161;
      well19937a0.setSeed(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, (-1680), 40, 197);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-1,680)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = (-1);
      Well44497a well44497a0 = new Well44497a((-1));
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 617, (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-1)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 1090, 1090, 1090);
      hypergeometricDistribution0.sample();
      double double0 = hypergeometricDistribution0.probability(1090);
      assertEquals(1090.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = 0;
      Well44497b well44497b0 = new Well44497b(0);
      int int1 = (-1);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 0, 0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 2153;
      int int1 = 1019;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2153, 1019, 0);
      hypergeometricDistribution0.cumulativeProbability(1019);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.reseedRandomGenerator(0L);
      try { 
        hypergeometricDistribution0.inverseCumulativeProbability((-1257.460464));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,257.46 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }
}
