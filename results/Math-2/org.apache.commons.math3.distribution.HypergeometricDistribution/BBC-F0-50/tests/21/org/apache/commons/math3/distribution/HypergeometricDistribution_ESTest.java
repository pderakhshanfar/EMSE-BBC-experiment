/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 05:43:28 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 4210;
      int int1 = 1763;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4210, 2275, 1763);
      hypergeometricDistribution0.getSupportLowerBound();
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability(529);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(979);
      well44497b0.nextInt(715);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 979, 0, 0);
      well44497b0.nextInt();
      hypergeometricDistribution0.cumulativeProbability(1445);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.probability(0);
      well44497b0.nextBoolean();
      byte[] byteArray0 = new byte[0];
      well44497b0.nextBytes(byteArray0);
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.getPopulationSize();
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 715;
      intArray0[2] = 120;
      intArray0[3] = 715;
      intArray0[4] = 120;
      intArray0[5] = 1445;
      intArray0[6] = 979;
      intArray0[7] = 1445;
      well44497b0.setSeed(intArray0);
      hypergeometricDistribution0.upperCumulativeProbability(979);
      well44497b0.setSeed((long) 0);
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.probability(979);
      hypergeometricDistribution0.getSupportLowerBound();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      well1024a0.setSeed(0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1049, 0, 0);
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(1049, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getNumberOfSuccesses();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3254, 438, 50);
      hypergeometricDistribution0.upperCumulativeProbability(15);
      HypergeometricDistribution hypergeometricDistribution1 = null;
      try {
        hypergeometricDistribution1 = new HypergeometricDistribution(29, 438, 438);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (438) must be less than or equal to population size (29)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 728;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(828, 728, 728);
      hypergeometricDistribution0.cumulativeProbability(728);
      hypergeometricDistribution0.upperCumulativeProbability(915);
      hypergeometricDistribution0.getSupportUpperBound();
      int int1 = 0;
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.probability(0);
      hypergeometricDistribution0.reseedRandomGenerator((-1L));
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.probability(828);
      hypergeometricDistribution0.getNumericalVariance();
      // Undeclared exception!
      hypergeometricDistribution0.sample(828);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3230, 424, 2);
      hypergeometricDistribution0.sample(1718);
      hypergeometricDistribution0.upperCumulativeProbability(2);
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.probability(424);
      hypergeometricDistribution0.cumulativeProbability(1718, 3230);
      hypergeometricDistribution0.sample(2);
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.probability(800);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.upperCumulativeProbability((-1823));
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.getPopulationSize();
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(3230, 2109, 2109);
      // Undeclared exception!
      hypergeometricDistribution1.cumulativeProbability(1767);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      well512a0.setSeed((long) 480);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 669, 480, 2);
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.getSupportLowerBound();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3230, 424, 2);
      hypergeometricDistribution0.sample(1718);
      hypergeometricDistribution0.upperCumulativeProbability(2);
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.probability(424);
      hypergeometricDistribution0.cumulativeProbability(1718, 3230);
      hypergeometricDistribution0.sample(2);
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.probability(800);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.upperCumulativeProbability((-1823));
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.cumulativeProbability(2909);
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.probability(1467);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 542;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(542, 0, 542);
      hypergeometricDistribution0.cumulativeProbability(0, 542);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.upperCumulativeProbability(0);
      hypergeometricDistribution0.inverseCumulativeProbability(1.0);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.cumulativeProbability(827);
      hypergeometricDistribution0.upperCumulativeProbability(0);
      hypergeometricDistribution0.probability(542);
      hypergeometricDistribution0.getPopulationSize();
      // Undeclared exception!
      try { 
        hypergeometricDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(828, 828, 828);
      hypergeometricDistribution0.cumulativeProbability(828);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(915);
      assertEquals(0.0, double0, 0.01);
      
      hypergeometricDistribution0.getSupportUpperBound();
      double double1 = hypergeometricDistribution0.cumulativeProbability(0, 828);
      hypergeometricDistribution0.probability((-19));
      hypergeometricDistribution0.cumulativeProbability(2522);
      hypergeometricDistribution0.reseedRandomGenerator((-1L));
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.calculateNumericalVariance();
      double double2 = hypergeometricDistribution0.probability(828);
      assertEquals(Double.NaN, double2, 0.01);
      
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.sample(828);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.cumulativeProbability(2);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.upperCumulativeProbability(828);
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.cumulativeProbability(2);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(828, int0);
      
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.cumulativeProbability(915);
      hypergeometricDistribution0.upperCumulativeProbability((-19));
      hypergeometricDistribution0.getNumberOfSuccesses();
      double double3 = hypergeometricDistribution0.getNumericalVariance();
      assertNotEquals(double3, double2, 0.01);
      assertEquals(0.0, double3, 0.01);
      
      hypergeometricDistribution0.upperCumulativeProbability(2);
      double double4 = hypergeometricDistribution0.upperCumulativeProbability(828);
      assertEquals(828.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(1.0, double4, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1040, 531, 531);
      double double0 = hypergeometricDistribution0.probability(0);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(65.00434411590713, double1, 0.01);
      
      hypergeometricDistribution0.getSupportLowerBound();
      double double2 = hypergeometricDistribution0.upperCumulativeProbability(1040);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(22, int0);
      
      hypergeometricDistribution0.upperCumulativeProbability(3468);
      double double3 = hypergeometricDistribution0.upperCumulativeProbability(22);
      assertEquals(1.0, double3, 0.01);
      assertNotEquals(double3, double2, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(723, 723, 723);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.sample(723);
      hypergeometricDistribution0.getNumericalVariance();
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(982);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = hypergeometricDistribution0.upperCumulativeProbability(723);
      assertEquals(1.0, double1, 0.01);
      
      hypergeometricDistribution0.sample(723);
      hypergeometricDistribution0.getSupportUpperBound();
      double double2 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double2, 0.01);
      
      double double3 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(723.0, double3, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 542;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(542, 0, 542);
      hypergeometricDistribution0.cumulativeProbability(0, 542);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.upperCumulativeProbability(0);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.inverseCumulativeProbability(1.0);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.inverseCumulativeProbability(0.0);
      hypergeometricDistribution0.cumulativeProbability(827);
      hypergeometricDistribution0.upperCumulativeProbability(0);
      hypergeometricDistribution0.probability(542);
      hypergeometricDistribution0.getNumericalMean();
      // Undeclared exception!
      try { 
        hypergeometricDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      mersenneTwister0.nextDouble();
      mersenneTwister0.setSeed(1754);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 982, 982, 481);
      mersenneTwister0.clear();
      hypergeometricDistribution0.probability(2139);
      hypergeometricDistribution0.solveInverseCumulativeProbability(982, 982, 481);
      hypergeometricDistribution0.probability(2139);
      mersenneTwister0.nextLong(1233L);
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.probability(2139);
      mersenneTwister0.nextBoolean();
      mersenneTwister0.nextInt();
      hypergeometricDistribution0.probability((-51));
      hypergeometricDistribution0.upperCumulativeProbability(481);
      hypergeometricDistribution0.isSupportConnected();
      double double0 = hypergeometricDistribution0.probability(1047);
      assertEquals(0.0, double0, 0.01);
      
      mersenneTwister0.clear();
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.getSampleSize();
      double double1 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertEquals(1.0, double1, 0.01);
      
      double double2 = hypergeometricDistribution0.probability(481);
      assertEquals(1.0, double2, 0.01);
      
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.getSupportUpperBound();
      double double3 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double3, 0.01);
      
      double double4 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double4, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      mersenneTwister0.nextDouble();
      mersenneTwister0.setSeed(1754);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 982, 982, 481);
      mersenneTwister0.clear();
      hypergeometricDistribution0.probability(2139);
      hypergeometricDistribution0.solveInverseCumulativeProbability(982, 982, 481);
      hypergeometricDistribution0.probability(2139);
      mersenneTwister0.nextLong(1233L);
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.probability(2139);
      mersenneTwister0.nextBoolean();
      mersenneTwister0.nextInt();
      hypergeometricDistribution0.probability((-51));
      hypergeometricDistribution0.upperCumulativeProbability(481);
      hypergeometricDistribution0.isSupportConnected();
      double double0 = hypergeometricDistribution0.probability(1047);
      assertEquals(0.0, double0, 0.01);
      
      mersenneTwister0.clear();
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.getSampleSize();
      double double1 = hypergeometricDistribution0.upperCumulativeProbability(0);
      double double2 = hypergeometricDistribution0.probability(481);
      assertEquals(1.0, double2, 0.01);
      assertEquals(double2, double1, 0.01);
      
      hypergeometricDistribution0.getNumberOfSuccesses();
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      
      double double3 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.0, double3, 0.01);
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(481, int0);
      
      int int1 = hypergeometricDistribution0.getSampleSize();
      assertEquals(481, int1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(0L);
      int int0 = 247;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(665, 247, 1320);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (1,320) must be less than or equal to population size (665)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(0L);
      well1024a0.setSeed(0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 1046, 1046, 1046);
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1046.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 745;
      intArray0[1] = 1109;
      intArray0[2] = 0;
      intArray0[3] = (-2541);
      intArray0[4] = 1;
      intArray0[5] = 901;
      intArray0[6] = (-4376);
      intArray0[7] = 2479;
      MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 281, 745, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (745) must be less than or equal to population size (281)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 828;
      int int1 = 728;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(828, 728, 728);
      hypergeometricDistribution0.cumulativeProbability(728);
      hypergeometricDistribution0.upperCumulativeProbability(915);
      hypergeometricDistribution0.getSupportUpperBound();
      int int2 = 0;
      try { 
        hypergeometricDistribution0.cumulativeProbability(0, (-630));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lower endpoint (0) must be less than or equal to upper endpoint (-630)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 2196, 2196, 2196);
      double double0 = hypergeometricDistribution0.cumulativeProbability(0);
      assertEquals(2196.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      int int0 = 1;
      int int1 = 448;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 1, 448, 448);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (448) must be less than or equal to population size (1)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 2;
      Well1024a well1024a0 = new Well1024a(2);
      well1024a0.setSeed((-3737));
      int int1 = (-823);
      well1024a0.nextFloat();
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)87;
      byteArray0[0] = (byte)87;
      well1024a0.nextBytes(byteArray0);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 2, (-823), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-823)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = (-1);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(2, 2, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(723, 723, 723);
      hypergeometricDistribution0.getSupportUpperBound();
      int int0 = 0;
      try { 
        hypergeometricDistribution0.inverseCumulativeProbability((-3008.663205539));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -3,008.663 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 247;
      int int1 = 1453;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(247, 1453, 247);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (1,453) must be less than or equal to population size (247)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 542;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(542, 0, 542);
      hypergeometricDistribution0.cumulativeProbability(0, 542);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.upperCumulativeProbability(0);
      hypergeometricDistribution0.inverseCumulativeProbability(1.0);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.cumulativeProbability(827);
      hypergeometricDistribution0.upperCumulativeProbability(0);
      hypergeometricDistribution0.probability(542);
      // Undeclared exception!
      try { 
        hypergeometricDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 931;
      int int1 = (-179);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(931, (-179), (-179));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-179)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = (-692);
      int int1 = (-1639);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((-692), (-692), (-1639));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-692)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 0;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-7);
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte) (-121);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-96);
      byteArray0[5] = (byte) (-42);
      byteArray0[6] = (byte) (-2);
      iSAACRandom0.nextBytes(byteArray0);
      int int0 = 512;
      int int1 = 2299;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 512, 512, 2299);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (2,299) must be less than or equal to population size (512)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Well512a well512a0 = new Well512a(1L);
      int int0 = (-447);
      int int1 = 2373;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, (-447), 2373, 2373);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-447)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }
}
