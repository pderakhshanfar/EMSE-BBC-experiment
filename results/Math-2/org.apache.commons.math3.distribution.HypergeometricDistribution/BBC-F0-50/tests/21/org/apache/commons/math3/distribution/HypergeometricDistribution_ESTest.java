/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 20:40:16 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.SynchronizedRandomGenerator;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1754, 982, 482);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(482);
      assertEquals(5.308319606137969E-153, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 982, 982, 481);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertEquals(481.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(542, 0, 542);
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(542, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, int0);
      assertEquals(542, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 982, 982, 481);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(481, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom();
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(iSAACRandom0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(synchronizedRandomGenerator0, 1108, 1108, 0);
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(1108, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1108, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1754, 982, 482);
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(86.1830468061398, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(542, 0, 542);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(542, hypergeometricDistribution0.getPopulationSize());
      assertEquals(542, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2257, 2257, 2257);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(2257.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(542, 0, 542);
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(542, hypergeometricDistribution0.getSampleSize());
      assertEquals(542, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 2196, 2196, 2196);
      double double0 = hypergeometricDistribution0.cumulativeProbability(0);
      assertEquals(2196.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(542, 0, 542);
      double double0 = hypergeometricDistribution0.cumulativeProbability(0);
      assertEquals(1.0, double0, 0.01);
      assertEquals(542, hypergeometricDistribution0.getPopulationSize());
      assertEquals(542, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2257, 2257, 2257);
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(2257.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(247, 1453, 247);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (1,453) must be less than or equal to population size (247)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1754, 982, 482);
      double double0 = hypergeometricDistribution0.probability(482);
      assertEquals(5.308319606137969E-153, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(5798, 1582, 5798);
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(1582.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(5798, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1754, 982, 482);
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(269.8540478905359, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(982, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1754, 982, 482);
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(269.8540478905359, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(482, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(542, 0, 542);
      hypergeometricDistribution0.getNumericalVariance();
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(542, hypergeometricDistribution0.getPopulationSize());
      assertEquals(542, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1754, 982, 482);
      hypergeometricDistribution0.upperCumulativeProbability(23);
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability(1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(542, 0, 542);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(542, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.0, double0, 0.01);
      assertEquals(542, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1754, 982, 482);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(1048);
      assertEquals(269.8540478905359, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(542, 0, 542);
      double double0 = hypergeometricDistribution0.probability(542);
      assertEquals(542, hypergeometricDistribution0.getPopulationSize());
      assertEquals(542, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1754, 982, 482);
      double double0 = hypergeometricDistribution0.probability((-51));
      assertEquals(0.0, double0, 0.01);
      assertEquals(269.8540478905359, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(542, 0, 542);
      double double0 = hypergeometricDistribution0.cumulativeProbability(0, 542);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(542, hypergeometricDistribution0.getPopulationSize());
      assertEquals(542, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Well512a well512a0 = new Well512a((-3512299194304650054L));
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 723, 142, 2837);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (2,837) must be less than or equal to population size (723)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int[] intArray0 = new int[8];
      MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 281, 745, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (745) must be less than or equal to population size (281)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(2, 2, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b((long) 1124);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 827, (-1658038633), 542);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-1,658,038,633)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Well512a well512a0 = new Well512a(1L);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, (-447), 2373, 2373);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-447)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1754, 982, 482);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(0, int0);
      assertEquals(269.8540478905359, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1754, 982, 482);
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(269.8540478905359, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(482, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1754, 982, 482);
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      assertEquals(269.8540478905359, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(5, 1, 1);
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.16, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3182, 1084, 1084);
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(828);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2083427391, 2083427391, 2083427391);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals((-0.7369194384370077), double0, 0.01);
  }
}
