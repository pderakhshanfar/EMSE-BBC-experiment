/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 12:15:17 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well44497a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 855;
      int int1 = 585;
      int int2 = 675;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(855, 585, 675);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(675, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(585, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(461.8421052631579, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(855, hypergeometricDistribution0.getPopulationSize());
      
      int int3 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(675, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(585, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(461.8421052631579, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(855, hypergeometricDistribution0.getPopulationSize());
      assertEquals(585, int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      
      int int4 = hypergeometricDistribution0.sample();
      assertEquals(675, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(585, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(461.8421052631579, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(855, hypergeometricDistribution0.getPopulationSize());
      assertEquals(469, int4);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(675, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(585, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(461.8421052631579, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(855, hypergeometricDistribution0.getPopulationSize());
      assertEquals(30.740137660804297, double0, 0.01);
      
      double double1 = hypergeometricDistribution0.probability(855);
      assertEquals(675, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(585, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(461.8421052631579, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(855, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      int int5 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(675, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(585, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(461.8421052631579, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(855, hypergeometricDistribution0.getPopulationSize());
      assertEquals(405, int5);
      assertFalse(int5 == int4);
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      assertFalse(int5 == int1);
      assertFalse(int5 == int2);
      
      double double2 = hypergeometricDistribution0.cumulativeProbability(855, 911);
      assertEquals(675, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(585, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(461.8421052631579, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(855, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double2, 0.01);
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      hypergeometricDistribution0.reseedRandomGenerator(469);
      assertEquals(675, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(585, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(461.8421052631579, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(855, hypergeometricDistribution0.getPopulationSize());
      
      int int6 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(675, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(585, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(461.8421052631579, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(855, hypergeometricDistribution0.getPopulationSize());
      assertEquals(585, int6);
      assertFalse(int6 == int2);
      assertFalse(int6 == int0);
      assertFalse(int6 == int4);
      assertFalse(int6 == int5);
      assertTrue(int6 == int1);
      assertTrue(int6 == int3);
      
      int int7 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(675, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(585, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(461.8421052631579, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(855, hypergeometricDistribution0.getPopulationSize());
      assertEquals(585, int7);
      assertFalse(int7 == int2);
      assertTrue(int7 == int6);
      assertFalse(int7 == int4);
      assertFalse(int7 == int5);
      assertTrue(int7 == int3);
      assertFalse(int7 == int0);
      assertTrue(int7 == int1);
      
      int int8 = hypergeometricDistribution0.inverseCumulativeProbability(1.0);
      assertEquals(675, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(585, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(461.8421052631579, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(855, hypergeometricDistribution0.getPopulationSize());
      assertEquals(585, int8);
      assertFalse(int8 == int4);
      assertFalse(int8 == int2);
      assertTrue(int8 == int6);
      assertTrue(int8 == int3);
      assertFalse(int8 == int0);
      assertTrue(int8 == int1);
      assertTrue(int8 == int7);
      assertFalse(int8 == int5);
      
      int int9 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(675, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(585, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(461.8421052631579, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(855, hypergeometricDistribution0.getPopulationSize());
      assertEquals(585, int9);
      assertFalse(int9 == int2);
      assertTrue(int9 == int3);
      assertTrue(int9 == int6);
      assertFalse(int9 == int4);
      assertFalse(int9 == int5);
      assertTrue(int9 == int7);
      assertTrue(int9 == int1);
      assertFalse(int9 == int0);
      assertTrue(int9 == int8);
      
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(583);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3284, 970, 2353);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(970, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2353, hypergeometricDistribution0.getSampleSize());
      assertEquals(695.0091352009745, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3284, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(2353);
      assertEquals(970, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2353, hypergeometricDistribution0.getSampleSize());
      assertEquals(695.0091352009745, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3284, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1.0, double0, 0.01);
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(970, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2353, hypergeometricDistribution0.getSampleSize());
      assertEquals(695.0091352009745, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3284, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(970, int0);
      
      double double1 = hypergeometricDistribution0.probability(12);
      assertEquals(970, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2353, hypergeometricDistribution0.getSampleSize());
      assertEquals(695.0091352009745, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3284, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = hypergeometricDistribution0.probability((-1060));
      assertEquals(970, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2353, hypergeometricDistribution0.getSampleSize());
      assertEquals(695.0091352009745, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3284, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, double2, 0.01);
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      double double3 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(970, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2353, hypergeometricDistribution0.getSampleSize());
      assertEquals(695.0091352009745, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3284, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(695.0091352009745, double3, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      
      double double4 = hypergeometricDistribution0.probability((-1060));
      assertEquals(970, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2353, hypergeometricDistribution0.getSampleSize());
      assertEquals(695.0091352009745, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3284, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, double4, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      
      int int1 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(970, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2353, hypergeometricDistribution0.getSampleSize());
      assertEquals(695.0091352009745, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3284, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(970, int1);
      assertTrue(int1 == int0);
      
      hypergeometricDistribution0.reseedRandomGenerator(0L);
      assertEquals(970, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2353, hypergeometricDistribution0.getSampleSize());
      assertEquals(695.0091352009745, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3284, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double5 = hypergeometricDistribution0.cumulativeProbability(2353);
      assertEquals(970, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2353, hypergeometricDistribution0.getSampleSize());
      assertEquals(695.0091352009745, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3284, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1.0, double5, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertEquals(double5, double0, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double1, 0.01);
      
      hypergeometricDistribution0.reseedRandomGenerator(970);
      assertEquals(970, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2353, hypergeometricDistribution0.getSampleSize());
      assertEquals(695.0091352009745, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3284, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int2 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(970, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2353, hypergeometricDistribution0.getSampleSize());
      assertEquals(695.0091352009745, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3284, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(970, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      int int3 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(970, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2353, hypergeometricDistribution0.getSampleSize());
      assertEquals(695.0091352009745, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3284, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(970, int3);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      
      double double6 = hypergeometricDistribution0.upperCumulativeProbability((-1));
      assertEquals(970, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2353, hypergeometricDistribution0.getSampleSize());
      assertEquals(695.0091352009745, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3284, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1.0, double6, 0.01);
      assertEquals(double6, double0, 0.01);
      assertEquals(double6, double5, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double2, 0.01);
      
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertEquals(970, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2353, hypergeometricDistribution0.getSampleSize());
      assertEquals(695.0091352009745, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3284, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertTrue(boolean0);
      
      boolean boolean1 = hypergeometricDistribution0.isSupportConnected();
      assertEquals(970, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2353, hypergeometricDistribution0.getSampleSize());
      assertEquals(695.0091352009745, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3284, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int4 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(970, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2353, hypergeometricDistribution0.getSampleSize());
      assertEquals(695.0091352009745, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3284, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(970, int4);
      assertTrue(int4 == int0);
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      
      int int5 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(970, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2353, hypergeometricDistribution0.getSampleSize());
      assertEquals(695.0091352009745, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3284, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(970, int5);
      assertTrue(int5 == int0);
      assertTrue(int5 == int1);
      assertTrue(int5 == int4);
      assertTrue(int5 == int3);
      assertTrue(int5 == int2);
      
      double double7 = hypergeometricDistribution0.upperCumulativeProbability(970);
      assertEquals(970, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2353, hypergeometricDistribution0.getSampleSize());
      assertEquals(695.0091352009745, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3284, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(9.496344081493981E-174, double7, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertEquals(double7, double2, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertEquals(double7, double4, 0.01);
      assertEquals(double7, double1, 0.01);
      
      int int6 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(970, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2353, hypergeometricDistribution0.getSampleSize());
      assertEquals(695.0091352009745, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3284, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(970, int6);
      assertTrue(int6 == int2);
      assertTrue(int6 == int1);
      assertTrue(int6 == int3);
      assertTrue(int6 == int0);
      assertTrue(int6 == int5);
      assertTrue(int6 == int4);
      
      int int7 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(970, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2353, hypergeometricDistribution0.getSampleSize());
      assertEquals(695.0091352009745, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3284, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3284, int7);
      assertFalse(int7 == int6);
      assertFalse(int7 == int4);
      assertFalse(int7 == int5);
      assertFalse(int7 == int1);
      assertFalse(int7 == int2);
      assertFalse(int7 == int0);
      assertFalse(int7 == int3);
      
      double double8 = hypergeometricDistribution0.upperCumulativeProbability(12);
      assertEquals(970, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2353, hypergeometricDistribution0.getSampleSize());
      assertEquals(695.0091352009745, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3284, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1.0, double8, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertEquals(double8, double0, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertEquals(double8, double5, 0.01);
      assertEquals(double8, double6, 0.01);
      
      double double9 = hypergeometricDistribution0.upperCumulativeProbability(2577);
      assertEquals(970, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2353, hypergeometricDistribution0.getSampleSize());
      assertEquals(695.0091352009745, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3284, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, double9, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertEquals(double9, double2, 0.01);
      assertEquals(double9, double7, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertEquals(double9, double4, 0.01);
      assertEquals(double9, double1, 0.01);
      
      int int8 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(970, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2353, hypergeometricDistribution0.getSampleSize());
      assertEquals(695.0091352009745, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3284, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(970, int8);
      assertTrue(int8 == int1);
      assertTrue(int8 == int2);
      assertTrue(int8 == int5);
      assertTrue(int8 == int4);
      assertTrue(int8 == int0);
      assertFalse(int8 == int7);
      assertTrue(int8 == int3);
      assertTrue(int8 == int6);
      
      double double10 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(970, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2353, hypergeometricDistribution0.getSampleSize());
      assertEquals(695.0091352009745, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3284, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(138.87674131586, double10, 0.01);
      assertNotEquals(double10, double2, 0.01);
      assertNotEquals(double10, double7, 0.01);
      assertNotEquals(double10, double6, 0.01);
      assertNotEquals(double10, double5, 0.01);
      assertNotEquals(double10, double9, 0.01);
      assertNotEquals(double10, double3, 0.01);
      assertNotEquals(double10, double4, 0.01);
      assertNotEquals(double10, double0, 0.01);
      assertNotEquals(double10, double1, 0.01);
      assertNotEquals(double10, double8, 0.01);
      
      int int9 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(970, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2353, hypergeometricDistribution0.getSampleSize());
      assertEquals(695.0091352009745, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3284, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(39, int9);
      assertFalse(int9 == int3);
      assertFalse(int9 == int2);
      assertFalse(int9 == int5);
      assertFalse(int9 == int6);
      assertFalse(int9 == int0);
      assertFalse(int9 == int8);
      assertFalse(int9 == int7);
      assertFalse(int9 == int4);
      assertFalse(int9 == int1);
      
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability(50);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3869, 0, 3081);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(3869, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3081, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertEquals(3869, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3081, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1.0, double0, 0.01);
      
      double double1 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(3869, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3081, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = hypergeometricDistribution0.probability(3081);
      assertEquals(3869, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3081, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, double2, 0.01);
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      double double3 = hypergeometricDistribution0.upperCumulativeProbability(607);
      assertEquals(3869, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3081, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, double3, 0.01);
      assertEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(double3, double2, 0.01);
      
      double double4 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(3869, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3081, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, double4, 0.01);
      assertEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals(double4, double2, 0.01);
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(3869, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3081, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, int0);
      
      int[] intArray0 = hypergeometricDistribution0.sample(3081);
      assertNotNull(intArray0);
      assertEquals(3081, intArray0.length);
      assertEquals(3869, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3081, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int1 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(3869, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3081, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      int int2 = (-2365);
      int int3 = hypergeometricDistribution0.solveInverseCumulativeProbability(185.0, 3869, (-2365));
      assertEquals(3869, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3081, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals((-2365), int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      
      double double5 = hypergeometricDistribution0.cumulativeProbability((-432), 0);
      assertEquals(3869, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3081, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1.0, double5, 0.01);
      assertEquals(double5, double0, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double1, 0.01);
      
      int int4 = (-1617);
      double double6 = hypergeometricDistribution0.cumulativeProbability((-1617));
      assertEquals(3869, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3081, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, double6, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertEquals(double6, double3, 0.01);
      assertEquals(double6, double1, 0.01);
      assertEquals(double6, double4, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertEquals(double6, double2, 0.01);
      
      int int5 = 736;
      int int6 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(3869, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3081, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, int6);
      assertTrue(int6 == int1);
      assertFalse(int6 == int3);
      assertTrue(int6 == int0);
      assertFalse(int6 == int4);
      assertFalse(int6 == int5);
      assertFalse(int6 == int2);
      
      int int7 = hypergeometricDistribution0.inverseCumulativeProbability(1.0);
      assertEquals(3869, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3081, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, int7);
      assertFalse(int7 == int4);
      assertFalse(int7 == int2);
      assertTrue(int7 == int0);
      assertFalse(int7 == int5);
      assertFalse(int7 == int3);
      assertTrue(int7 == int1);
      assertTrue(int7 == int6);
      
      // Undeclared exception!
      try { 
        hypergeometricDistribution0.sample((-1944));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1,944)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2260, 717, 26);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(26, hypergeometricDistribution0.getSampleSize());
      assertEquals(717, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(8.248672566371681, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2260, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(26);
      assertEquals(26, hypergeometricDistribution0.getSampleSize());
      assertEquals(717, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(8.248672566371681, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2260, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(7.945782351547793E-14, double0, 0.01);
      
      double double1 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(26, hypergeometricDistribution0.getSampleSize());
      assertEquals(717, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(8.248672566371681, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2260, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(8.248672566371681, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = hypergeometricDistribution0.upperCumulativeProbability(26);
      assertEquals(26, hypergeometricDistribution0.getSampleSize());
      assertEquals(717, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(8.248672566371681, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2260, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(7.945782351547793E-14, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      
      double double3 = hypergeometricDistribution0.upperCumulativeProbability(984);
      assertEquals(26, hypergeometricDistribution0.getSampleSize());
      assertEquals(717, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(8.248672566371681, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2260, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, double3, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double2, 0.01);
      
      double double4 = hypergeometricDistribution0.cumulativeProbability(852);
      assertEquals(26, hypergeometricDistribution0.getSampleSize());
      assertEquals(717, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(8.248672566371681, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2260, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1.0, double4, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1237, 987, 113);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(90.16248989490704, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1237, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(113, hypergeometricDistribution0.getSampleSize());
      assertEquals(987, hypergeometricDistribution0.getNumberOfSuccesses());
      
      hypergeometricDistribution0.reseedRandomGenerator(0L);
      assertEquals(90.16248989490704, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1237, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(113, hypergeometricDistribution0.getSampleSize());
      assertEquals(987, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(84);
      assertEquals(90.16248989490704, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1237, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(113, hypergeometricDistribution0.getSampleSize());
      assertEquals(987, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.946176583087232, double0, 0.01);
      
      double double1 = hypergeometricDistribution0.upperCumulativeProbability(1);
      assertEquals(90.16248989490704, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1237, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(113, hypergeometricDistribution0.getSampleSize());
      assertEquals(987, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.0000000000000002, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      HypergeometricDistribution hypergeometricDistribution1 = null;
      try {
        hypergeometricDistribution1 = new HypergeometricDistribution((-1330), 1274, (-631));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-1,330)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 1237;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1237, 113, 113);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(113, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(10.32255456750202, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(113, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1237, hypergeometricDistribution0.getPopulationSize());
      
      int int1 = 1422;
      // Undeclared exception!
      hypergeometricDistribution0.sample(1422);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1567, 1549, 1549);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1549, hypergeometricDistribution0.getSampleSize());
      assertEquals(1531.2067645181876, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1549, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1567, hypergeometricDistribution0.getPopulationSize());
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1549, hypergeometricDistribution0.getSampleSize());
      assertEquals(1531.2067645181876, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1549, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1567, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1549, int0);
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1549, hypergeometricDistribution0.getSampleSize());
      assertEquals(1531.2067645181876, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1549, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1567, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.2021706442600428, double0, 0.01);
      
      double double1 = hypergeometricDistribution0.getNumericalVariance();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1549, hypergeometricDistribution0.getSampleSize());
      assertEquals(1531.2067645181876, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1549, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1567, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.2021706442600428, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      int int1 = hypergeometricDistribution0.getPopulationSize();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1549, hypergeometricDistribution0.getSampleSize());
      assertEquals(1531.2067645181876, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1549, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1567, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1567, int1);
      assertFalse(int1 == int0);
      
      double double2 = hypergeometricDistribution0.probability(1549);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1549, hypergeometricDistribution0.getSampleSize());
      assertEquals(1531.2067645181876, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1549, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1567, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2.1760146568008057E-42, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1237, 987, 113);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(113, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1237, hypergeometricDistribution0.getPopulationSize());
      assertEquals(987, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(90.16248989490704, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      long long0 = (-3512299194304650054L);
      // Undeclared exception!
      hypergeometricDistribution0.sample(1422);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2256, 2256, 2256);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(2256, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2256, hypergeometricDistribution0.getSampleSize());
      assertEquals(2256, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2256.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(2256, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2256, hypergeometricDistribution0.getSampleSize());
      assertEquals(2256, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2256.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2256, int0);
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(2256);
      assertEquals(2256, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2256, hypergeometricDistribution0.getSampleSize());
      assertEquals(2256, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2256.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
      
      int int1 = hypergeometricDistribution0.solveInverseCumulativeProbability(441.0, 2256, (-2700));
      assertEquals(2256, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2256, hypergeometricDistribution0.getSampleSize());
      assertEquals(2256, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2256.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals((-2700), int1);
      assertFalse(int1 == int0);
      
      double double1 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(2256, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2256, hypergeometricDistribution0.getSampleSize());
      assertEquals(2256, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2256.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      int int2 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(2256, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2256, hypergeometricDistribution0.getSampleSize());
      assertEquals(2256, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2256.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2256, int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      
      int int3 = hypergeometricDistribution0.getSampleSize();
      assertEquals(2256, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2256, hypergeometricDistribution0.getSampleSize());
      assertEquals(2256, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2256.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2256, int3);
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 0;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(451, 0, 2262);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (2,262) must be less than or equal to population size (451)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1549, 1549, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1549, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1549, hypergeometricDistribution0.getPopulationSize());
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(1549);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1549, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1549, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double0, 0.01);
      
      double double1 = hypergeometricDistribution0.upperCumulativeProbability(1549);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1549, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1549, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double double2 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1549, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1549, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double2, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      
      double double3 = hypergeometricDistribution0.upperCumulativeProbability(2);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1549, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1549, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double3, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      
      double double4 = hypergeometricDistribution0.cumulativeProbability(2330);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1549, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1549, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.0, double4, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1549, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1549, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, int0);
      
      double double5 = hypergeometricDistribution0.cumulativeProbability((-1141), 0);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1549, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1549, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.0, double5, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertEquals(double5, double4, 0.01);
      assertNotEquals(double5, double3, 0.01);
      
      int int1 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1549, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1549, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1549, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1549, 1549, 0);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1549, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1549, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(1549);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1549, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1549, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = hypergeometricDistribution0.upperCumulativeProbability(1549);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1549, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1549, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double double2 = hypergeometricDistribution0.getNumericalMean();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1549, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1549, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double2, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      
      double double3 = hypergeometricDistribution0.upperCumulativeProbability(2);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1549, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1549, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double3, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1549, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1549, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, int0);
      
      double double4 = hypergeometricDistribution0.cumulativeProbability((-1141), 0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1549, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1549, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double4, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      
      int int1 = hypergeometricDistribution0.getPopulationSize();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1549, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1549, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1549, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2256, 2256, 2256);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(2256, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2256, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2256, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2256.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(2256, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2256, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2256, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2256.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2256, int0);
      
      double double0 = hypergeometricDistribution0.probability(2256);
      assertEquals(2256, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2256, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2256, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2256.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(2256, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2256, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2256, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2256.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      int int1 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(2256, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2256, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2256, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2256.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2256, int1);
      assertTrue(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      assertNotNull(jDKRandomGenerator0);
      
      IntStream intStream0 = jDKRandomGenerator0.ints(1499L, (-957), 1068);
      assertNotNull(intStream0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(jDKRandomGenerator0, 1032, 1032, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1032, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1032, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      
      hypergeometricDistribution0.reseedRandomGenerator(0);
      assertEquals(1032, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1032, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      
      DoubleStream doubleStream0 = jDKRandomGenerator0.doubles();
      assertNotNull(doubleStream0);
      
      int int0 = hypergeometricDistribution0.solveInverseCumulativeProbability((-415.5527249191), 1068, 1976);
      assertEquals(1032, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1032, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1069, int0);
      
      int int1 = hypergeometricDistribution0.solveInverseCumulativeProbability((-957), 0, 1268);
      assertEquals(1032, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1032, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      
      HypergeometricDistribution hypergeometricDistribution1 = null;
      try {
        hypergeometricDistribution1 = new HypergeometricDistribution(jDKRandomGenerator0, 408, 1068, 1091);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (1,068) must be less than or equal to population size (408)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1549, 1549, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1549, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1549, hypergeometricDistribution0.getNumberOfSuccesses());
      
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(820, 820, 820);
      assertNotNull(hypergeometricDistribution1);
      assertEquals(820, hypergeometricDistribution1.getSampleSize());
      assertEquals(820.0, hypergeometricDistribution1.getNumericalMean(), 0.01);
      assertEquals(820, hypergeometricDistribution1.getPopulationSize());
      assertEquals(820, hypergeometricDistribution1.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution1.isSupportConnected());
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      
      int int0 = hypergeometricDistribution0.solveInverseCumulativeProbability(1773, (-1094), (-346));
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1549, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1549, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals((-346), int0);
      assertFalse(hypergeometricDistribution0.equals((Object)hypergeometricDistribution1));
      assertNotSame(hypergeometricDistribution0, hypergeometricDistribution1);
      
      double double0 = hypergeometricDistribution1.upperCumulativeProbability(1773);
      assertEquals(820, hypergeometricDistribution1.getSampleSize());
      assertEquals(820.0, hypergeometricDistribution1.getNumericalMean(), 0.01);
      assertEquals(820, hypergeometricDistribution1.getPopulationSize());
      assertEquals(820, hypergeometricDistribution1.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution1.isSupportConnected());
      assertEquals(0.0, double0, 0.01);
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      assertNotSame(hypergeometricDistribution1, hypergeometricDistribution0);
      
      double double1 = hypergeometricDistribution1.cumulativeProbability((-1094));
      assertEquals(820, hypergeometricDistribution1.getSampleSize());
      assertEquals(820.0, hypergeometricDistribution1.getNumericalMean(), 0.01);
      assertEquals(820, hypergeometricDistribution1.getPopulationSize());
      assertEquals(820, hypergeometricDistribution1.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution1.isSupportConnected());
      assertEquals(0.0, double1, 0.01);
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      assertEquals(double1, double0, 0.01);
      assertNotSame(hypergeometricDistribution1, hypergeometricDistribution0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2256, 2256, 2256);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2256.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2256, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2256, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2256, hypergeometricDistribution0.getSampleSize());
      
      int int0 = hypergeometricDistribution0.solveInverseCumulativeProbability(1936.3, 1773, 1146);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2256.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2256, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2256, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2256, hypergeometricDistribution0.getSampleSize());
      assertEquals(1146, int0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(1990);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2256.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2256, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2256, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2256, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3211, 919, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3211, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(919, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3211, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(919, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double0, 0.01);
      
      int int0 = hypergeometricDistribution0.solveInverseCumulativeProbability((-1330.0), 1773, (-1094));
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3211, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(919, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals((-1094), int0);
      
      double double1 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3211, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(919, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 2256;
      int int1 = 0;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(670, 2256, 457);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (2,256) must be less than or equal to population size (670)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1549, 1549, 0);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1549, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1549, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(1549);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1549, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1549, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = hypergeometricDistribution0.upperCumulativeProbability(1549);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1549, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1549, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double double2 = hypergeometricDistribution0.getNumericalMean();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1549, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1549, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double2, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      
      double double3 = hypergeometricDistribution0.upperCumulativeProbability(2);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1549, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1549, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double3, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double2, 0.01);
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1549, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1549, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, int0);
      
      double double4 = hypergeometricDistribution0.probability((-429));
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1549, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1549, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double4, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(double4, double2, 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals(double4, double1, 0.01);
      
      double double5 = hypergeometricDistribution0.getNumericalVariance();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1549, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1549, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double5, 0.01);
      assertEquals(double5, double1, 0.01);
      assertEquals(double5, double0, 0.01);
      assertEquals(double5, double2, 0.01);
      assertEquals(double5, double4, 0.01);
      assertEquals(double5, double3, 0.01);
      
      int int1 = hypergeometricDistribution0.getPopulationSize();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1549, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1549, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1549, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      assertNotNull(well44497a0);
      
      boolean boolean0 = well44497a0.nextBoolean();
      assertTrue(boolean0);
      
      int int0 = 765;
      int int1 = 832;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 765, 765, 832);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (832) must be less than or equal to population size (765)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2, 2, 2);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, int0);
      
      int int1 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, int1);
      assertTrue(int1 == int0);
      
      hypergeometricDistribution0.reseedRandomGenerator(236L);
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double0 = hypergeometricDistribution0.probability(0);
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, double0, 0.01);
      
      double double1 = hypergeometricDistribution0.upperCumulativeProbability(2);
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      int[] intArray0 = hypergeometricDistribution0.sample(862);
      assertNotNull(intArray0);
      assertEquals(862, intArray0.length);
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double2 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, double2, 0.01);
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      hypergeometricDistribution0.reseedRandomGenerator(2147483648L);
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int2 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertTrue(boolean0);
      
      double double3 = hypergeometricDistribution0.probability(961);
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, double3, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      
      double double4 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2.0, double4, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      
      double double5 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2.0, double5, 0.01);
      assertEquals(double5, double4, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double1, 0.01);
      
      double double6 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, double6, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertEquals(double6, double3, 0.01);
      assertEquals(double6, double0, 0.01);
      assertEquals(double6, double2, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double4, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2, 2, 2);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2, int0);
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2.0, double0, 0.01);
      
      int int1 = 0;
      int int2 = hypergeometricDistribution0.solveInverseCumulativeProbability((-31.6257), 155, 0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      try { 
        hypergeometricDistribution0.inverseCumulativeProbability(2.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      assertNotNull(well1024a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 1052, 0, (-465));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-465)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1483, 1483, 0);
      hypergeometricDistribution0.sample(1483);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.sample(685);
      double double0 = hypergeometricDistribution0.probability(331);
      assertEquals(0.0, double0, 0.01);
      
      int int0 = hypergeometricDistribution0.inverseCumulativeProbability(0);
      assertEquals(0, int0);
      
      double double1 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double1, 0.01);
      
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.probability(0);
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.getSupportUpperBound();
      double double2 = hypergeometricDistribution0.probability(0);
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2256, 2256, 2256);
      try { 
        hypergeometricDistribution0.cumulativeProbability(2256, (-2273));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lower endpoint (2,256) must be less than or equal to upper endpoint (-2,273)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom(0L);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-126);
      byteArray0[1] = (byte)52;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)51;
      iSAACRandom0.nextBytes(byteArray0);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 1413, (-571), 1413);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-571)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a();
      well19937a0.nextGaussian();
      int[] intArray0 = new int[8];
      intArray0[0] = 389;
      intArray0[1] = 389;
      intArray0[2] = 389;
      intArray0[3] = 389;
      intArray0[4] = 389;
      intArray0[5] = 389;
      intArray0[6] = 389;
      intArray0[7] = 389;
      well19937a0.setSeed(intArray0);
      int[] intArray1 = new int[7];
      intArray1[0] = 0;
      intArray1[1] = 389;
      intArray1[2] = 389;
      intArray1[3] = 389;
      well19937a0.setSeed(intArray1);
      intArray1[4] = 389;
      intArray1[5] = 389;
      well19937a0.setSeed(389);
      intArray1[6] = 389;
      well19937a0.setSeed(intArray1);
      int int0 = 847;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 389, 847, (-1389));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1,389)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 0, (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int[] intArray0 = new int[6];
      intArray0[0] = 563;
      intArray0[1] = 1393;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 469;
      intArray0[5] = (-2581);
      ISAACRandom iSAACRandom0 = new ISAACRandom(intArray0);
      iSAACRandom0.nextLong();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte)0;
      iSAACRandom0.nextBytes(byteArray0);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, (-3375), (-498), (-4437));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-3,375)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3211, 919, 0);
      hypergeometricDistribution0.solveInverseCumulativeProbability((-1330.0), 1773, (-1094));
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertEquals(3211, hypergeometricDistribution0.getPopulationSize());
      assertEquals(919, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 1990, 1990, 0);
      double double0 = 0.0;
      int int0 = (-1426);
      try { 
        hypergeometricDistribution0.cumulativeProbability((-586), (-4656));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lower endpoint (-586) must be less than or equal to upper endpoint (-4,656)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = (-1284);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((-1284), (-1284), (-1284));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-1,284)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }
}
