/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 12:15:56 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b((-1443L));
      assertNotNull(well44497b0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 3111, 3111, 3111);
      assertEquals(3111, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3111, hypergeometricDistribution0.getPopulationSize());
      assertEquals(3111, hypergeometricDistribution0.getSampleSize());
      assertEquals(3111.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(3111);
      assertEquals(3111, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3111, hypergeometricDistribution0.getPopulationSize());
      assertEquals(3111, hypergeometricDistribution0.getSampleSize());
      assertEquals(3111.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(233, 1, 625);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (625) must be less than or equal to population size (233)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3111, 3111, 2662);
      assertEquals(3111, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3111, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2662.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2662, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.probability(2662);
      assertEquals(3111, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3111, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2662.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2662, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1387, 0, 0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1387, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1387, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b((-1443L));
      assertNotNull(well44497b0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 3111, 2662, 3111);
      assertEquals(3111, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2662.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3111, hypergeometricDistribution0.getSampleSize());
      assertEquals(2662, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(3111, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2662.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3111, hypergeometricDistribution0.getSampleSize());
      assertEquals(2662, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2662, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(441, 441, 0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(441, hypergeometricDistribution0.getPopulationSize());
      assertEquals(441, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(441, hypergeometricDistribution0.getPopulationSize());
      assertEquals(441, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2586, 2559, 1);
      assertEquals(0.9895591647331786, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(2559, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2586, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.9895591647331786, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(2559, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2586, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.010331824225752446, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(441, 441, 0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(441, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(441, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(441, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(441, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b((-1443L));
      assertNotNull(well44497b0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 3111, 2662, 3111);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2662, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3111, hypergeometricDistribution0.getSampleSize());
      assertEquals(2662.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3111, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2662, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3111, hypergeometricDistribution0.getSampleSize());
      assertEquals(2662.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3111, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2662.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1387, 0, 0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1387, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1387, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b((-1443L));
      assertNotNull(well44497b0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 3111, 2662, 3111);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2662.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2662, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3111, hypergeometricDistribution0.getSampleSize());
      assertEquals(3111, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2662.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2662, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3111, hypergeometricDistribution0.getSampleSize());
      assertEquals(3111, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1980, 980, 980);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1980, hypergeometricDistribution0.getPopulationSize());
      assertEquals(980, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(485.050505050505, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(980, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(1);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1980, hypergeometricDistribution0.getPopulationSize());
      assertEquals(980, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(485.050505050505, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(980, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.0000000000000002, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Well512a well512a0 = new Well512a(1264);
      assertNotNull(well512a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 3187, 1264, 1264);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(501.3165986821462, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1264, hypergeometricDistribution0.getSampleSize());
      assertEquals(3187, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1264, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(925);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(0L);
      assertNotNull(well44497b0);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, (-534), (-534), (-534));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-534)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 1190, 1190, 1679);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (1,679) must be less than or equal to population size (1,190)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2586, 2586, 1);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2586, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2586, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2586, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2586, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(2586, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(441, 441, 0);
      assertEquals(441, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(441, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(441, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(441, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(441, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2586, 2586, 1);
      assertEquals(2586, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2586, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(2586, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2586, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2586, 2586, 1);
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2586, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2586, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2586, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2586, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double0, 0.01);
      
      double double1 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(double1, double0, 0.01);
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2586, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2586, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(822, 1, 2);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(1);
      assertEquals(0.002433090024330899, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Well512a well512a0 = new Well512a(1264);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 3187, 1264, 1264);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability((-946));
      assertEquals(501.3165986821462, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2586, 2586, 1);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(822);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3115, 2, 2);
      double double0 = hypergeometricDistribution0.probability((-1));
      assertEquals(0.0012841091492776886, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2586, 2586, 1);
      double double0 = hypergeometricDistribution0.cumulativeProbability(1, 2218);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b((-1443L));
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 3111, 3111, 3111);
      double double0 = hypergeometricDistribution0.cumulativeProbability(1330);
      assertEquals(3111.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Well512a well512a0 = new Well512a(1264);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 3187, 1264, 1264);
      double double0 = hypergeometricDistribution0.cumulativeProbability(497);
      assertEquals(0.3889686473438443, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1028, 1264, 497);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (1,264) must be less than or equal to population size (1,028)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1768, 1184, (-459));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-459)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1454, (-316), (-1434));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-316)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(0, (-573), (-573));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3115, 2, 2);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(0.0012841091492776886, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2586, 2586, 1);
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1387, 0, 0);
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      assertEquals(1387, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3115, 2, 2);
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.0012828725794281298, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Well512a well512a0 = new Well512a(1264);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 3187, 1264, 1264);
      hypergeometricDistribution0.probability(2299);
      assertEquals(501.3165986821462, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(Integer.MAX_VALUE, 728, Integer.MAX_VALUE);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals((-3.39001417317894E-7), double0, 0.01);
  }
}
