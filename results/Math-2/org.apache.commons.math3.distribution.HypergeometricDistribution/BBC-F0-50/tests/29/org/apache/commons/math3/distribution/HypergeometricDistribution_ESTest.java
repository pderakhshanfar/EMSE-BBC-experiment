/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 12:19:47 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.SynchronizedRandomGenerator;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      assertNotNull(well44497a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1913, 232, 1676);
      assertEquals(1913, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1676, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(232, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(203.25771040250916, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(232);
      assertEquals(1913, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1676, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(232, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(203.25771040250916, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(5.383794584014068E-15, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(206, 206, 206);
      assertEquals(206, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(206, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(206, hypergeometricDistribution0.getSampleSize());
      assertEquals(206.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(206);
      assertEquals(206, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(206, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(206, hypergeometricDistribution0.getSampleSize());
      assertEquals(206.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom(1L);
      assertNotNull(iSAACRandom0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 445, 0, 0);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(445, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(0);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(445, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[8];
      MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertNotNull(mersenneTwister0);
      assertEquals(8, intArray0.length);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 5, (-2548), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-2,548)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[4];
      Well19937c well19937c0 = new Well19937c(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertNotNull(well19937c0);
      assertEquals(4, intArray0.length);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 0, 618, 618);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1255, 2, 1255);
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1255, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1255, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.probability(2);
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1255, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1255, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom(1L);
      assertNotNull(iSAACRandom0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 445, 0, 0);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(445, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(445, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(206, 206, 206);
      assertEquals(206, hypergeometricDistribution0.getSampleSize());
      assertEquals(206, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(206.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(206, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(206, hypergeometricDistribution0.getSampleSize());
      assertEquals(206, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(206.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(206, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(206, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom(1L);
      assertNotNull(iSAACRandom0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 445, 0, 0);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(445, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(445, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(206, 206, 206);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(206, hypergeometricDistribution0.getPopulationSize());
      assertEquals(206.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(206, hypergeometricDistribution0.getSampleSize());
      assertEquals(206, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(206, hypergeometricDistribution0.getPopulationSize());
      assertEquals(206.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(206, hypergeometricDistribution0.getSampleSize());
      assertEquals(206, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(206, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom(1L);
      assertNotNull(iSAACRandom0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 445, 0, 0);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(445, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(445, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(206, 206, 206);
      assertEquals(206, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(206, hypergeometricDistribution0.getPopulationSize());
      assertEquals(206.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(206, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(206, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(206, hypergeometricDistribution0.getPopulationSize());
      assertEquals(206.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(206, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Well512a well512a0 = new Well512a((-1926L));
      assertNotNull(well512a0);
      
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(well512a0);
      assertNotNull(synchronizedRandomGenerator0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(synchronizedRandomGenerator0, 2266, 991, 11);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(11, hypergeometricDistribution0.getSampleSize());
      assertEquals(4.810679611650485, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(991, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2266, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(11, hypergeometricDistribution0.getSampleSize());
      assertEquals(4.810679611650485, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(991, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2266, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2.6948528333122135, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom(1L);
      assertNotNull(iSAACRandom0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 445, 0, 0);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(445, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(445, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1913, 1913, 1913);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1913, hypergeometricDistribution0.getSampleSize());
      assertEquals(1913.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1913, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1913, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1913, hypergeometricDistribution0.getSampleSize());
      assertEquals(1913.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1913, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1913, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1913.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(206, 206, 206);
      assertEquals(206, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(206.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(206, hypergeometricDistribution0.getSampleSize());
      assertEquals(206, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(206, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(206.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(206, hypergeometricDistribution0.getSampleSize());
      assertEquals(206, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(206, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom(4294967295L);
      assertNotNull(iSAACRandom0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 1633, 570, 1167);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1167, hypergeometricDistribution0.getSampleSize());
      assertEquals(570, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1633, hypergeometricDistribution0.getPopulationSize());
      assertEquals(407.3423147581139, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1167, hypergeometricDistribution0.getSampleSize());
      assertEquals(570, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1633, hypergeometricDistribution0.getPopulationSize());
      assertEquals(407.3423147581139, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(75.7133337363079, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1913, 1913, 1913);
      assertEquals(1913, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1913, hypergeometricDistribution0.getSampleSize());
      assertEquals(1913.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1913, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      Well44497a well44497a0 = new Well44497a();
      assertNotNull(well44497a0);
      
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(well44497a0, 1913, 232, 1676);
      assertEquals(232, hypergeometricDistribution1.getNumberOfSuccesses());
      assertEquals(203.25771040250916, hypergeometricDistribution1.getNumericalMean(), 0.01);
      assertEquals(1913, hypergeometricDistribution1.getPopulationSize());
      assertEquals(1676, hypergeometricDistribution1.getSampleSize());
      assertTrue(hypergeometricDistribution1.isSupportConnected());
      assertNotNull(hypergeometricDistribution1);
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      
      int int0 = hypergeometricDistribution1.sample();
      assertEquals(232, hypergeometricDistribution1.getNumberOfSuccesses());
      assertEquals(203.25771040250916, hypergeometricDistribution1.getNumericalMean(), 0.01);
      assertEquals(1913, hypergeometricDistribution1.getPopulationSize());
      assertEquals(1676, hypergeometricDistribution1.getSampleSize());
      assertTrue(hypergeometricDistribution1.isSupportConnected());
      assertNotSame(hypergeometricDistribution1, hypergeometricDistribution0);
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      assertEquals(198, int0);
      
      // Undeclared exception!
      hypergeometricDistribution1.upperCumulativeProbability(1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4932, 786, 786);
      assertEquals(4932, hypergeometricDistribution0.getPopulationSize());
      assertEquals(786, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(786, hypergeometricDistribution0.getSampleSize());
      assertEquals(125.26277372262774, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(445, 786);
      assertEquals(4932, hypergeometricDistribution0.getPopulationSize());
      assertEquals(786, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(786, hypergeometricDistribution0.getSampleSize());
      assertEquals(125.26277372262774, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals((-6.661338147750939E-16), double0, 0.01);
      
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(149);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((-1077), (-1077), (-1077));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-1,077)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom(1L);
      assertNotNull(iSAACRandom0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 445, 0, 0);
      assertEquals(445, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(445, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(445, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom(1L);
      assertNotNull(iSAACRandom0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 445, 0, 0);
      assertEquals(445, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(445, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1913, 1913, 1913);
      assertEquals(1913, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1913.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1913, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1913, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(1913, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1913.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1913, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1913, hypergeometricDistribution0.getSampleSize());
      assertEquals(1913, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1085, 1085, 0);
      // Undeclared exception!
      hypergeometricDistribution0.sample(4606);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Well512a well512a0 = new Well512a((-1926L));
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(well512a0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(synchronizedRandomGenerator0, 2266, 991, 11);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(692);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4.810679611650485, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(205, 205, 205);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(1);
      assertEquals(1.0, double0, 0.01);
      assertEquals(205.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1025, 1025, 2);
      double double0 = hypergeometricDistribution0.probability(1025);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1913, 1913, 1913);
      double double0 = hypergeometricDistribution0.probability(1534);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1913.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1913, 232, 1676);
      double double0 = hypergeometricDistribution0.cumulativeProbability(1285);
      assertEquals(203.25771040250916, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1913, 1913, 1913);
      double double0 = hypergeometricDistribution0.cumulativeProbability(1);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1913.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom(1526);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 1109, 905, 1526);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (1,526) must be less than or equal to population size (1,109)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1025, 2039, 164);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (2,039) must be less than or equal to population size (1,025)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Well512a well512a0 = new Well512a((int[]) null);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 206, 2, (-933));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-933)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1913, 1913, 1913);
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      assertEquals(1913.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1913, 1913, 1913);
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(1913.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }
}
