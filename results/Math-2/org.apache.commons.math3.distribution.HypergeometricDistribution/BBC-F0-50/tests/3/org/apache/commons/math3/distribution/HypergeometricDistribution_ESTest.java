/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 20:29:44 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.SynchronizedRandomGenerator;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497b;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1, 1, 1);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(2);
      assertEquals(0.0, double0, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(1, int0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      
      double double1 = hypergeometricDistribution0.upperCumulativeProbability(1516);
      assertEquals(0.0, double1, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertEquals(double1, double0, 0.01);
      
      double double2 = hypergeometricDistribution0.upperCumulativeProbability((-1));
      assertEquals(1.0, double2, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      hypergeometricDistribution0.reseedRandomGenerator(1);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      
      int[] intArray0 = hypergeometricDistribution0.sample(926);
      assertEquals(926, intArray0.length);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(intArray0);
      
      hypergeometricDistribution0.sample(2405);
      Random.setNextRandom((-354));
      hypergeometricDistribution0.upperCumulativeProbability((-1));
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.cumulativeProbability(1516);
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.cumulativeProbability((-2036));
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.getNumberOfSuccesses();
      // Undeclared exception!
      hypergeometricDistribution0.getSupportUpperBound();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1, 1, 1);
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(2);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      
      int int0 = hypergeometricDistribution0.inverseCumulativeProbability(1);
      assertEquals(1, int0);
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      
      int int1 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(1, int1);
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertTrue(int1 == int0);
      
      int int2 = hypergeometricDistribution0.solveInverseCumulativeProbability(499.75677685, 1, 901);
      assertEquals(901, int2);
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      double double1 = hypergeometricDistribution0.upperCumulativeProbability(1516);
      assertEquals(0.0, double1, 0.01);
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(double1, double0, 0.01);
      
      double double2 = hypergeometricDistribution0.upperCumulativeProbability((-1));
      assertEquals(1.0, double2, 0.01);
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      hypergeometricDistribution0.reseedRandomGenerator(1);
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      
      int[] intArray0 = hypergeometricDistribution0.sample(926);
      assertEquals(926, intArray0.length);
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertNotNull(intArray0);
      
      hypergeometricDistribution0.sample(2405);
      Random.setNextRandom((-354));
      hypergeometricDistribution0.upperCumulativeProbability((-1));
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.cumulativeProbability(1516);
      hypergeometricDistribution0.getSampleSize();
      // Undeclared exception!
      hypergeometricDistribution0.getNumericalMean();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1, 1, 1);
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(2);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int0 = hypergeometricDistribution0.inverseCumulativeProbability(1);
      assertEquals(1, int0);
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int1 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(1, int1);
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(int1 == int0);
      
      int int2 = hypergeometricDistribution0.solveInverseCumulativeProbability(499.75677685, 1, 901);
      assertEquals(901, int2);
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      double double1 = hypergeometricDistribution0.upperCumulativeProbability(1516);
      assertEquals(0.0, double1, 0.01);
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(double1, double0, 0.01);
      
      double double2 = hypergeometricDistribution0.upperCumulativeProbability((-1));
      assertEquals(1.0, double2, 0.01);
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      hypergeometricDistribution0.reseedRandomGenerator(1);
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int[] intArray0 = hypergeometricDistribution0.sample(926);
      assertEquals(926, intArray0.length);
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(intArray0);
      
      hypergeometricDistribution0.sample(2405);
      Random.setNextRandom((-354));
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.cumulativeProbability(1516);
      // Undeclared exception!
      hypergeometricDistribution0.getSampleSize();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 103;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1274, 119, 103);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1274, hypergeometricDistribution0.getPopulationSize());
      assertEquals(119, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(103, hypergeometricDistribution0.getSampleSize());
      assertEquals(9.62087912087912, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      int int1 = hypergeometricDistribution0.solveInverseCumulativeProbability(0.0, (-94), 1274);
      assertEquals((-93), int1);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1274, hypergeometricDistribution0.getPopulationSize());
      assertEquals(119, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(103, hypergeometricDistribution0.getSampleSize());
      assertEquals(9.62087912087912, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertFalse(int1 == int0);
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(8.02335125704902, double0, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1274, hypergeometricDistribution0.getPopulationSize());
      assertEquals(119, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(103, hypergeometricDistribution0.getSampleSize());
      assertEquals(9.62087912087912, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      // Undeclared exception!
      hypergeometricDistribution0.sample(1274);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 164;
      Random.setNextRandom(164);
      Well44497b well44497b0 = new Well44497b(164);
      assertNotNull(well44497b0);
      
      double double0 = well44497b0.nextDouble();
      assertEquals(0.2920042702942909, double0, 0.01);
      
      int int1 = 746;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(746, 0, 0);
      assertEquals(746, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      hypergeometricDistribution0.reseedRandomGenerator(746);
      assertEquals(746, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(well44497b0, 2899, 746, 746);
      assertTrue(hypergeometricDistribution1.isSupportConnected());
      assertEquals(746, hypergeometricDistribution1.getSampleSize());
      assertEquals(746, hypergeometricDistribution1.getNumberOfSuccesses());
      assertEquals(2899, hypergeometricDistribution1.getPopulationSize());
      assertEquals(191.96826491893756, hypergeometricDistribution1.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution1);
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      
      int int2 = 2;
      // Undeclared exception!
      hypergeometricDistribution1.upperCumulativeProbability(2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Random.setNextRandom(164);
      Well44497b well44497b0 = new Well44497b(164);
      assertNotNull(well44497b0);
      
      double double0 = well44497b0.nextDouble();
      assertEquals(0.2920042702942909, double0, 0.01);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(753, 26, 26);
      assertEquals(0.897742363877822, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(753, hypergeometricDistribution0.getPopulationSize());
      assertEquals(26, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(26, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      hypergeometricDistribution0.reseedRandomGenerator(753);
      assertEquals(0.897742363877822, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(753, hypergeometricDistribution0.getPopulationSize());
      assertEquals(26, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(26, hypergeometricDistribution0.getSampleSize());
      
      double double1 = hypergeometricDistribution0.upperCumulativeProbability(753);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.897742363877822, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(753, hypergeometricDistribution0.getPopulationSize());
      assertEquals(26, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(26, hypergeometricDistribution0.getSampleSize());
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = hypergeometricDistribution0.upperCumulativeProbability(2);
      assertEquals(0.22504656612825202, double2, 0.01);
      assertEquals(0.897742363877822, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(753, hypergeometricDistribution0.getPopulationSize());
      assertEquals(26, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(26, hypergeometricDistribution0.getSampleSize());
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      double double3 = hypergeometricDistribution0.upperCumulativeProbability(26);
      assertEquals(9.966590344989797E-49, double3, 0.01);
      assertEquals(0.897742363877822, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(753, hypergeometricDistribution0.getPopulationSize());
      assertEquals(26, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(26, hypergeometricDistribution0.getSampleSize());
      assertNotEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      
      HypergeometricDistribution hypergeometricDistribution1 = null;
      try {
        hypergeometricDistribution1 = new HypergeometricDistribution((-499), 2899, (-499));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-499)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      assertNotNull(well44497b0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1920, 718, 718);
      assertEquals(268.50208333333336, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1920, hypergeometricDistribution0.getPopulationSize());
      assertEquals(718, hypergeometricDistribution0.getSampleSize());
      assertEquals(718, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(0, int0);
      assertEquals(268.50208333333336, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1920, hypergeometricDistribution0.getPopulationSize());
      assertEquals(718, hypergeometricDistribution0.getSampleSize());
      assertEquals(718, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int1 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(0, int1);
      assertEquals(268.50208333333336, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1920, hypergeometricDistribution0.getPopulationSize());
      assertEquals(718, hypergeometricDistribution0.getSampleSize());
      assertEquals(718, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(int1 == int0);
      
      hypergeometricDistribution0.reseedRandomGenerator(4499201580859392L);
      assertEquals(268.50208333333336, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1920, hypergeometricDistribution0.getPopulationSize());
      assertEquals(718, hypergeometricDistribution0.getSampleSize());
      assertEquals(718, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(1920);
      assertEquals(0.0, double0, 0.01);
      assertEquals(268.50208333333336, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1920, hypergeometricDistribution0.getPopulationSize());
      assertEquals(718, hypergeometricDistribution0.getSampleSize());
      assertEquals(718, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int2 = 1;
      double double1 = hypergeometricDistribution0.upperCumulativeProbability(1);
      assertEquals(0.9999999999999999, double1, 0.01);
      assertEquals(268.50208333333336, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1920, hypergeometricDistribution0.getPopulationSize());
      assertEquals(718, hypergeometricDistribution0.getSampleSize());
      assertEquals(718, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotEquals(double1, double0, 0.01);
      
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(358, 0, 2);
      assertTrue(hypergeometricDistribution1.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution1.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution1.getNumberOfSuccesses());
      assertEquals(2, hypergeometricDistribution1.getSampleSize());
      assertEquals(358, hypergeometricDistribution1.getPopulationSize());
      assertNotNull(hypergeometricDistribution1);
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      
      int int3 = 0;
      int int4 = hypergeometricDistribution1.solveInverseCumulativeProbability(6.151951078101721E-205, 1, 4869);
      assertEquals(2, int4);
      assertTrue(hypergeometricDistribution1.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution1.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution1.getNumberOfSuccesses());
      assertEquals(2, hypergeometricDistribution1.getSampleSize());
      assertEquals(358, hypergeometricDistribution1.getPopulationSize());
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertNotSame(hypergeometricDistribution1, hypergeometricDistribution0);
      
      double double2 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(105.28836742453028, double2, 0.01);
      assertEquals(268.50208333333336, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1920, hypergeometricDistribution0.getPopulationSize());
      assertEquals(718, hypergeometricDistribution0.getSampleSize());
      assertEquals(718, hypergeometricDistribution0.getNumberOfSuccesses());
      assertFalse(hypergeometricDistribution0.equals((Object)hypergeometricDistribution1));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotSame(hypergeometricDistribution0, hypergeometricDistribution1);
      
      int int5 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(718, int5);
      assertEquals(268.50208333333336, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1920, hypergeometricDistribution0.getPopulationSize());
      assertEquals(718, hypergeometricDistribution0.getSampleSize());
      assertEquals(718, hypergeometricDistribution0.getNumberOfSuccesses());
      assertFalse(hypergeometricDistribution0.equals((Object)hypergeometricDistribution1));
      assertFalse(int5 == int1);
      assertFalse(int5 == int2);
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      assertFalse(int5 == int4);
      assertNotSame(hypergeometricDistribution0, hypergeometricDistribution1);
      
      int int6 = hypergeometricDistribution1.getNumberOfSuccesses();
      assertEquals(0, int6);
      assertTrue(hypergeometricDistribution1.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution1.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution1.getNumberOfSuccesses());
      assertEquals(2, hypergeometricDistribution1.getSampleSize());
      assertEquals(358, hypergeometricDistribution1.getPopulationSize());
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      assertFalse(int6 == int5);
      assertFalse(int6 == int2);
      assertTrue(int6 == int0);
      assertTrue(int6 == int3);
      assertTrue(int6 == int1);
      assertFalse(int6 == int4);
      assertNotSame(hypergeometricDistribution1, hypergeometricDistribution0);
      
      HypergeometricDistribution hypergeometricDistribution2 = null;
      try {
        hypergeometricDistribution2 = new HypergeometricDistribution(1534, (-708), 726);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-708)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      assertNotNull(well44497b0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 4869, 0, 0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(4869, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      long long0 = well44497b0.nextLong();
      assertEquals((-3309472111078198868L), long0);
      
      well44497b0.setSeed((long) 0);
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(0, int0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(4869, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(4869, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double1 = hypergeometricDistribution0.cumulativeProbability(4869);
      assertEquals(1.0, double1, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(4869, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = hypergeometricDistribution0.cumulativeProbability(4869);
      assertEquals(1.0, double2, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(4869, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      long long1 = well44497b0.nextLong();
      assertEquals(5747328870099210361L, long1);
      assertFalse(long1 == long0);
      
      int int1 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(0, int1);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(4869, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(int1 == int0);
      
      int int2 = hypergeometricDistribution0.inverseCumulativeProbability(0.0);
      assertEquals(0, int2);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(4869, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      double double3 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertEquals(1.0, double3, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(4869, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      
      int int3 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(0, int3);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(4869, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      
      int int4 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(0, int4);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(4869, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(int4 == int0);
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      assertTrue(int4 == int1);
      
      boolean boolean0 = well44497b0.nextBoolean();
      assertTrue(boolean0);
      
      double double4 = hypergeometricDistribution0.upperCumulativeProbability(1960);
      assertEquals(0.0, double4, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(4869, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(double4, double0, 0.01);
      
      double double5 = hypergeometricDistribution0.cumulativeProbability(0);
      assertEquals(1.0, double5, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(4869, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertEquals(double5, double3, 0.01);
      assertEquals(double5, double1, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertEquals(double5, double2, 0.01);
      
      double double6 = hypergeometricDistribution0.upperCumulativeProbability(469);
      assertEquals(0.0, double6, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(4869, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertEquals(double6, double4, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertEquals(double6, double0, 0.01);
      assertNotEquals(double6, double3, 0.01);
      
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(4002, 1547, 1960);
      assertEquals(1960, hypergeometricDistribution1.getSampleSize());
      assertEquals(757.6511744127936, hypergeometricDistribution1.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution1.isSupportConnected());
      assertEquals(4002, hypergeometricDistribution1.getPopulationSize());
      assertEquals(1547, hypergeometricDistribution1.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution1);
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      
      // Undeclared exception!
      hypergeometricDistribution1.cumulativeProbability(1051);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(393, 393, 393);
      assertEquals(393, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(393.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(393, hypergeometricDistribution0.getSampleSize());
      assertEquals(393, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(393);
      assertEquals(1.0, double0, 0.01);
      assertEquals(393, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(393.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(393, hypergeometricDistribution0.getSampleSize());
      assertEquals(393, hypergeometricDistribution0.getPopulationSize());
      
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(393, int0);
      assertEquals(393, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(393.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(393, hypergeometricDistribution0.getSampleSize());
      assertEquals(393, hypergeometricDistribution0.getPopulationSize());
      
      int int1 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(393, int1);
      assertEquals(393, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(393.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(393, hypergeometricDistribution0.getSampleSize());
      assertEquals(393, hypergeometricDistribution0.getPopulationSize());
      assertTrue(int1 == int0);
      
      double double1 = hypergeometricDistribution0.probability(393);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(393, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(393.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(393, hypergeometricDistribution0.getSampleSize());
      assertEquals(393, hypergeometricDistribution0.getPopulationSize());
      assertNotEquals(double1, double0, 0.01);
      
      int int2 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(393, int2);
      assertEquals(393, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(393.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(393, hypergeometricDistribution0.getSampleSize());
      assertEquals(393, hypergeometricDistribution0.getPopulationSize());
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      int int3 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(393, int3);
      assertEquals(393, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(393.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(393, hypergeometricDistribution0.getSampleSize());
      assertEquals(393, hypergeometricDistribution0.getPopulationSize());
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      
      double double2 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(393.0, double2, 0.01);
      assertEquals(393, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(393.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(393, hypergeometricDistribution0.getSampleSize());
      assertEquals(393, hypergeometricDistribution0.getPopulationSize());
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      double double3 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double3, 0.01);
      assertEquals(393, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(393.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(393, hypergeometricDistribution0.getSampleSize());
      assertEquals(393, hypergeometricDistribution0.getPopulationSize());
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      
      double double4 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double4, 0.01);
      assertEquals(393, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(393.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(393, hypergeometricDistribution0.getSampleSize());
      assertEquals(393, hypergeometricDistribution0.getPopulationSize());
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(double4, double3, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(982, 982, 979);
      assertEquals(979.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(982, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(979, hypergeometricDistribution0.getSampleSize());
      assertEquals(982, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.cumulativeProbability((-3550));
      assertEquals(0.0, double0, 0.01);
      assertEquals(979.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(982, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(979, hypergeometricDistribution0.getSampleSize());
      assertEquals(982, hypergeometricDistribution0.getPopulationSize());
      
      hypergeometricDistribution0.reseedRandomGenerator(982);
      assertEquals(979.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(982, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(979, hypergeometricDistribution0.getSampleSize());
      assertEquals(982, hypergeometricDistribution0.getPopulationSize());
      
      double double1 = hypergeometricDistribution0.probability((-3224));
      assertEquals(0.0, double1, 0.01);
      assertEquals(979.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(982, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(979, hypergeometricDistribution0.getSampleSize());
      assertEquals(982, hypergeometricDistribution0.getPopulationSize());
      assertEquals(double1, double0, 0.01);
      
      int int0 = hypergeometricDistribution0.solveInverseCumulativeProbability(982, 982, 425);
      assertEquals(425, int0);
      assertEquals(979.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(982, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(979, hypergeometricDistribution0.getSampleSize());
      assertEquals(982, hypergeometricDistribution0.getPopulationSize());
      
      double double2 = hypergeometricDistribution0.cumulativeProbability((-3550));
      assertEquals(0.0, double2, 0.01);
      assertEquals(979.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(982, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(979, hypergeometricDistribution0.getSampleSize());
      assertEquals(982, hypergeometricDistribution0.getPopulationSize());
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      
      double double3 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double3, 0.01);
      assertEquals(979.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(982, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(979, hypergeometricDistribution0.getSampleSize());
      assertEquals(982, hypergeometricDistribution0.getPopulationSize());
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      
      double double4 = hypergeometricDistribution0.upperCumulativeProbability(425);
      assertEquals(1.0, double4, 0.01);
      assertEquals(979.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(982, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(979, hypergeometricDistribution0.getSampleSize());
      assertEquals(982, hypergeometricDistribution0.getPopulationSize());
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      
      double double5 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.0, double5, 0.01);
      assertEquals(979.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(982, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(979, hypergeometricDistribution0.getSampleSize());
      assertEquals(982, hypergeometricDistribution0.getPopulationSize());
      assertEquals(double5, double2, 0.01);
      assertEquals(double5, double3, 0.01);
      assertEquals(double5, double1, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertEquals(double5, double0, 0.01);
      
      double double6 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double6, 0.01);
      assertEquals(979.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(982, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(979, hypergeometricDistribution0.getSampleSize());
      assertEquals(982, hypergeometricDistribution0.getPopulationSize());
      assertNotEquals(double6, double4, 0.01);
      assertEquals(double6, double0, 0.01);
      assertEquals(double6, double3, 0.01);
      assertEquals(double6, double5, 0.01);
      assertEquals(double6, double1, 0.01);
      assertEquals(double6, double2, 0.01);
      
      double double7 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(979.0, double7, 0.01);
      assertEquals(979.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(982, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(979, hypergeometricDistribution0.getSampleSize());
      assertEquals(982, hypergeometricDistribution0.getPopulationSize());
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double0, 0.01);
      
      double double8 = hypergeometricDistribution0.probability((-3550));
      assertEquals(0.0, double8, 0.01);
      assertEquals(979.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(982, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(979, hypergeometricDistribution0.getSampleSize());
      assertEquals(982, hypergeometricDistribution0.getPopulationSize());
      assertEquals(double8, double1, 0.01);
      assertEquals(double8, double0, 0.01);
      assertEquals(double8, double6, 0.01);
      assertEquals(double8, double2, 0.01);
      assertEquals(double8, double3, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertEquals(double8, double5, 0.01);
      assertNotEquals(double8, double4, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2581, 0, 1058);
      assertEquals(2581, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1058, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      assertEquals(2581, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1058, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int0 = hypergeometricDistribution0.solveInverseCumulativeProbability(0, 0, 0);
      assertEquals(0, int0);
      assertEquals(2581, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1058, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int1 = hypergeometricDistribution0.solveInverseCumulativeProbability(Double.NaN, 744, 4220);
      assertEquals(4220, int1);
      assertEquals(2581, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1058, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertFalse(int1 == int0);
      
      double double1 = hypergeometricDistribution0.probability(0);
      assertEquals(1.0, double1, 0.01);
      assertEquals(2581, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1058, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertEquals(1.0, double2, 0.01);
      assertEquals(2581, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1058, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      
      int int2 = hypergeometricDistribution0.getSampleSize();
      assertEquals(1058, int2);
      assertEquals(2581, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1058, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(0, int3);
      assertEquals(2581, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1058, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4718, 4718, 2);
      assertEquals(4718, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(4718, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(2, int0);
      assertEquals(4718, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(4718, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      
      double double0 = hypergeometricDistribution0.probability(2);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(4718, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(4718, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      
      double double1 = hypergeometricDistribution0.cumulativeProbability(2, 2);
      assertEquals(0.0, double1, 0.01);
      assertEquals(4718, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(4718, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = hypergeometricDistribution0.probability(4718);
      assertEquals(0.0, double2, 0.01);
      assertEquals(4718, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(4718, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      int int1 = hypergeometricDistribution0.sample();
      assertEquals(2, int1);
      assertEquals(4718, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(4718, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertTrue(int1 == int0);
      
      int int2 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(2, int2);
      assertEquals(4718, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(4718, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      int int3 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(2, int3);
      assertEquals(4718, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(4718, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      
      int int4 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(2, int4);
      assertEquals(4718, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(4718, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertTrue(int4 == int3);
      assertTrue(int4 == int0);
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      
      double double3 = hypergeometricDistribution0.cumulativeProbability(591, 1051);
      assertEquals(0.0, double3, 0.01);
      assertEquals(4718, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(4718, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      
      double double4 = hypergeometricDistribution0.upperCumulativeProbability(1051);
      assertEquals(0.0, double4, 0.01);
      assertEquals(4718, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(4718, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals(double4, double1, 0.01);
      
      double double5 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.0, double5, 0.01);
      assertEquals(4718, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(4718, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(double5, double4, 0.01);
      assertEquals(double5, double3, 0.01);
      assertEquals(double5, double2, 0.01);
      assertEquals(double5, double1, 0.01);
      assertNotEquals(double5, double0, 0.01);
      
      double double6 = hypergeometricDistribution0.probability(2);
      assertEquals(Double.NaN, double6, 0.01);
      assertEquals(4718, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(4718, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertEquals(double6, double0, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double1, 0.01);
      
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      assertEquals(4718, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(4718, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      
      double double7 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(2.0, double7, 0.01);
      assertEquals(4718, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(4718, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double1, 0.01);
      
      double double8 = hypergeometricDistribution0.probability(964);
      assertEquals(0.0, double8, 0.01);
      assertEquals(4718, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(4718, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertNotEquals(double8, double6, 0.01);
      assertEquals(double8, double2, 0.01);
      assertEquals(double8, double4, 0.01);
      assertEquals(double8, double3, 0.01);
      assertEquals(double8, double1, 0.01);
      assertEquals(double8, double5, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double7, 0.01);
      
      int int5 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(4718, int5);
      assertEquals(4718, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(4718, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertFalse(int5 == int3);
      assertFalse(int5 == int1);
      assertFalse(int5 == int2);
      assertFalse(int5 == int4);
      assertFalse(int5 == int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1359, 1315, 1495);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (1,495) must be less than or equal to population size (1,359)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(935, 935, 935);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(935.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(935, hypergeometricDistribution0.getPopulationSize());
      assertEquals(935, hypergeometricDistribution0.getSampleSize());
      assertEquals(935, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(935.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(935, hypergeometricDistribution0.getPopulationSize());
      assertEquals(935, hypergeometricDistribution0.getSampleSize());
      assertEquals(935, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int[] intArray0 = hypergeometricDistribution0.sample(935);
      assertEquals(935, intArray0.length);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(935.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(935, hypergeometricDistribution0.getPopulationSize());
      assertEquals(935, hypergeometricDistribution0.getSampleSize());
      assertEquals(935, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(intArray0);
      
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(935, int0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(935.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(935, hypergeometricDistribution0.getPopulationSize());
      assertEquals(935, hypergeometricDistribution0.getSampleSize());
      assertEquals(935, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int1 = hypergeometricDistribution0.solveInverseCumulativeProbability(935, (-3403), 935);
      assertEquals(935, int1);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(935.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(935, hypergeometricDistribution0.getPopulationSize());
      assertEquals(935, hypergeometricDistribution0.getSampleSize());
      assertEquals(935, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(int1 == int0);
      
      double double1 = hypergeometricDistribution0.cumulativeProbability((-888));
      assertEquals(0.0, double1, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(935.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(935, hypergeometricDistribution0.getPopulationSize());
      assertEquals(935, hypergeometricDistribution0.getSampleSize());
      assertEquals(935, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(double1, double0, 0.01);
      
      double double2 = hypergeometricDistribution0.upperCumulativeProbability(935);
      assertEquals(1.0, double2, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(935.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(935, hypergeometricDistribution0.getPopulationSize());
      assertEquals(935, hypergeometricDistribution0.getSampleSize());
      assertEquals(935, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      double double3 = hypergeometricDistribution0.probability(935);
      assertEquals(Double.NaN, double3, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(935.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(935, hypergeometricDistribution0.getPopulationSize());
      assertEquals(935, hypergeometricDistribution0.getSampleSize());
      assertEquals(935, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      
      double double4 = hypergeometricDistribution0.cumulativeProbability(935, 935);
      assertEquals(0.0, double4, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(935.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(935, hypergeometricDistribution0.getPopulationSize());
      assertEquals(935, hypergeometricDistribution0.getSampleSize());
      assertEquals(935, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(double4, double0, 0.01);
      
      double double5 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double5, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(935.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(935, hypergeometricDistribution0.getPopulationSize());
      assertEquals(935, hypergeometricDistribution0.getSampleSize());
      assertEquals(935, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotEquals(double5, double2, 0.01);
      assertEquals(double5, double0, 0.01);
      assertEquals(double5, double1, 0.01);
      assertEquals(double5, double4, 0.01);
      assertNotEquals(double5, double3, 0.01);
      
      double double6 = hypergeometricDistribution0.cumulativeProbability((-1942));
      assertEquals(0.0, double6, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(935.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(935, hypergeometricDistribution0.getPopulationSize());
      assertEquals(935, hypergeometricDistribution0.getSampleSize());
      assertEquals(935, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(double6, double0, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertEquals(double6, double5, 0.01);
      assertEquals(double6, double1, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertEquals(double6, double4, 0.01);
      
      // Undeclared exception!
      try { 
        hypergeometricDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 982;
      int int1 = 1543;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(982, 1543, 979);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (1,543) must be less than or equal to population size (982)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 935;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(935, 935, 935);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.sample(935);
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.solveInverseCumulativeProbability(935, (-3403), 935);
      try { 
        hypergeometricDistribution0.cumulativeProbability(0, (-888));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lower endpoint (0) must be less than or equal to upper endpoint (-888)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 5939;
      intArray0[1] = 2948;
      intArray0[2] = 3644;
      intArray0[3] = 577;
      intArray0[4] = 0;
      intArray0[5] = 2;
      intArray0[6] = 2;
      Well44497b well44497b0 = new Well44497b(intArray0);
      well44497b0.nextBoolean();
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 577, 3644, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (3,644) must be less than or equal to population size (577)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 963;
      intArray0[1] = 0;
      intArray0[2] = (-2259);
      intArray0[3] = (-1);
      intArray0[4] = 2525;
      int int0 = 1;
      intArray0[5] = 1;
      intArray0[6] = 360;
      intArray0[7] = (-1);
      Well19937c well19937c0 = new Well19937c(intArray0);
      well19937c0.nextGaussian();
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 963, 733, (-120));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-120)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(1058);
      int[] intArray0 = new int[3];
      well44497b0.setSeed((long) 1058);
      intArray0[0] = 1058;
      intArray0[1] = 1058;
      intArray0[2] = 1058;
      well44497b0.setSeed(intArray0);
      well44497b0.nextInt();
      well44497b0.nextDouble();
      well44497b0.setSeed((-466L));
      well44497b0.nextLong();
      well44497b0.nextGaussian();
      well44497b0.nextGaussian();
      well44497b0.nextFloat();
      well44497b0.nextBoolean();
      well44497b0.nextBoolean();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 1058, 0, 849);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(1003);
      hypergeometricDistribution0.upperCumulativeProbability((-394));
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      
      hypergeometricDistribution0.upperCumulativeProbability((-2693));
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(1058, int0);
      
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.cumulativeProbability(1058, 1058);
      hypergeometricDistribution0.getSupportUpperBound();
      int int1 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(0, int1);
      
      hypergeometricDistribution0.getNumberOfSuccesses();
      double double1 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double1, 0.01);
      
      double double2 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(double2, double0, 0.01);
      
      int int2 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(849, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(jDKRandomGenerator0);
      synchronizedRandomGenerator0.setSeed(0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(synchronizedRandomGenerator0, 1047, 0, 0);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.reseedRandomGenerator(1566083941L);
      hypergeometricDistribution0.getPopulationSize();
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      
      hypergeometricDistribution0.sample();
      synchronizedRandomGenerator0.nextDouble();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte)121;
      byteArray0[6] = (byte)96;
      byteArray0[7] = (byte)0;
      synchronizedRandomGenerator0.nextBytes(byteArray0);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(2530);
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(1047, int0);
      
      synchronizedRandomGenerator0.nextInt();
      hypergeometricDistribution0.cumulativeProbability(0);
      double double1 = hypergeometricDistribution0.probability(0);
      assertEquals(Double.NaN, double1, 0.01);
      
      hypergeometricDistribution0.getSupportLowerBound();
      double double2 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      double double3 = hypergeometricDistribution0.cumulativeProbability(0);
      assertEquals(1.0, double3, 0.01);
      
      hypergeometricDistribution0.getSupportLowerBound();
      double double4 = hypergeometricDistribution0.probability(4);
      assertEquals(double4, double0, 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double4, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 4719;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4719, 4719, 2);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.probability(2);
      try { 
        hypergeometricDistribution0.cumulativeProbability(2, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lower endpoint (2) must be less than or equal to upper endpoint (0)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(813, (-1696), 813);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-1,696)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 4869, 0, 0);
      well44497b0.nextLong();
      well44497b0.setSeed((long) 0);
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.getNumericalVariance();
      double double0 = hypergeometricDistribution0.probability(0);
      hypergeometricDistribution0.cumulativeProbability(4869);
      double double1 = hypergeometricDistribution0.cumulativeProbability(4869);
      assertEquals(1.0, double1, 0.01);
      
      well44497b0.nextLong();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.inverseCumulativeProbability(0.0);
      double double2 = hypergeometricDistribution0.upperCumulativeProbability(0);
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.getSupportLowerBound();
      well44497b0.nextBoolean();
      hypergeometricDistribution0.upperCumulativeProbability(1960);
      hypergeometricDistribution0.cumulativeProbability(0);
      hypergeometricDistribution0.upperCumulativeProbability(469);
      hypergeometricDistribution0.calculateNumericalVariance();
      double double3 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(0.0, double3, 0.01);
      
      hypergeometricDistribution0.getSampleSize();
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      double double4 = hypergeometricDistribution0.cumulativeProbability(0);
      assertEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      
      int int1 = hypergeometricDistribution0.getSampleSize();
      assertTrue(int1 == int0);
      
      hypergeometricDistribution0.upperCumulativeProbability(1960);
      double double5 = hypergeometricDistribution0.getNumericalVariance();
      assertNotEquals(double5, double0, 0.01);
      assertEquals(4869, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double5, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom();
      int int0 = 655;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 369, 655, 655);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (655) must be less than or equal to population size (369)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = (-859);
      int int1 = 0;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((-859), (-859), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-859)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(0, 1817, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      int int0 = 0;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 1258;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 1258, 1258, 1258);
      hypergeometricDistribution0.getSampleSize();
      int int1 = (-325);
      // Undeclared exception!
      try { 
        hypergeometricDistribution0.reseedRandomGenerator((-325));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }
}
