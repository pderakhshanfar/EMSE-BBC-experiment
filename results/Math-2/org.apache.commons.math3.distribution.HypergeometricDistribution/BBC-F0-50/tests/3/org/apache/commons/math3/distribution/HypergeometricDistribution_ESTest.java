/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 12:14:46 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.SynchronizedRandomGenerator;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497b;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(9999966, 9999966, 9999966);
      assertEquals(9999966, hypergeometricDistribution0.getPopulationSize());
      assertEquals(9999966, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals((-40.35529840801459), hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(9999966, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      System.setCurrentTimeMillis(9999966);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals((-40.35529840801459), double0, 0.01);
      assertEquals(9999966, hypergeometricDistribution0.getPopulationSize());
      assertEquals(9999966, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals((-40.35529840801459), hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(9999966, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 1244;
      Well44497b well44497b0 = new Well44497b((long) 1244);
      assertNotNull(well44497b0);
      
      long long0 = well44497b0.nextLong();
      assertEquals(6120099329691905677L, long0);
      
      boolean boolean0 = well44497b0.nextBoolean();
      assertTrue(boolean0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 1244, 815, 815);
      assertEquals(815, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(533.9429260450161, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(815, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1244, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(815);
      assertEquals(0.0, double0, 0.01);
      assertEquals(815, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(533.9429260450161, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(815, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1244, hypergeometricDistribution0.getPopulationSize());
      
      int int1 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertFalse(int1 == int0);
      assertEquals(815, int1);
      assertEquals(815, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(533.9429260450161, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(815, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1244, hypergeometricDistribution0.getPopulationSize());
      
      boolean boolean1 = well44497b0.nextBoolean();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int2 = hypergeometricDistribution0.sample();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(526, int2);
      assertEquals(815, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(533.9429260450161, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(815, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1244, hypergeometricDistribution0.getPopulationSize());
      
      double double1 = hypergeometricDistribution0.upperCumulativeProbability(743);
      assertEquals(double1, double0, 0.01);
      assertEquals(1.0259871874037996E-159, double1, 0.01);
      assertEquals(815, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(533.9429260450161, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(815, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1244, hypergeometricDistribution0.getPopulationSize());
      
      double double2 = well44497b0.nextGaussian();
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals((-1.685576264668066), double2, 0.01);
      
      double double3 = hypergeometricDistribution0.cumulativeProbability(int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(1.0, double3, 0.01);
      assertEquals(815, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(533.9429260450161, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(815, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1244, hypergeometricDistribution0.getPopulationSize());
      
      int int3 = 758;
      double double4 = hypergeometricDistribution0.upperCumulativeProbability(int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(6.276228617886378E-187, double4, 0.01);
      assertEquals(815, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(533.9429260450161, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(815, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1244, hypergeometricDistribution0.getPopulationSize());
      
      double double5 = hypergeometricDistribution0.calculateNumericalVariance();
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertEquals(63.55034498804288, double5, 0.01);
      assertEquals(815, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(533.9429260450161, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(815, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1244, hypergeometricDistribution0.getPopulationSize());
      
      double double6 = hypergeometricDistribution0.getNumericalMean();
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertEquals(533.9429260450161, double6, 0.01);
      assertEquals(815, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(533.9429260450161, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(815, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1244, hypergeometricDistribution0.getPopulationSize());
      
      int int4 = 234;
      int int5 = 855;
      HypergeometricDistribution hypergeometricDistribution1 = null;
      try {
        hypergeometricDistribution1 = new HypergeometricDistribution(int4, int0, int5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (1,244) must be less than or equal to population size (234)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 1244;
      Well44497b well44497b0 = new Well44497b((long) 1244);
      assertNotNull(well44497b0);
      
      long long0 = well44497b0.nextLong();
      assertEquals(6120099329691905677L, long0);
      
      boolean boolean0 = well44497b0.nextBoolean();
      assertTrue(boolean0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 1244, 815, 815);
      assertEquals(1244, hypergeometricDistribution0.getPopulationSize());
      assertEquals(533.9429260450161, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(815, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(815, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(815);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1244, hypergeometricDistribution0.getPopulationSize());
      assertEquals(533.9429260450161, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(815, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(815, hypergeometricDistribution0.getSampleSize());
      
      int int1 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertFalse(int1 == int0);
      assertEquals(815, int1);
      assertEquals(1244, hypergeometricDistribution0.getPopulationSize());
      assertEquals(533.9429260450161, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(815, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(815, hypergeometricDistribution0.getSampleSize());
      
      boolean boolean1 = well44497b0.nextBoolean();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      int int2 = hypergeometricDistribution0.sample();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(526, int2);
      assertEquals(1244, hypergeometricDistribution0.getPopulationSize());
      assertEquals(533.9429260450161, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(815, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(815, hypergeometricDistribution0.getSampleSize());
      
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(743);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b((long) 1244);
      assertNotNull(well44497b0);
      
      long long0 = well44497b0.nextLong();
      assertEquals(6120099329691905677L, long0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 1244, 815, 815);
      assertEquals(815, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1244, hypergeometricDistribution0.getPopulationSize());
      assertEquals(533.9429260450161, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(815, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(815);
      assertEquals(0.0, double0, 0.01);
      assertEquals(815, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1244, hypergeometricDistribution0.getPopulationSize());
      assertEquals(533.9429260450161, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(815, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(815, int0);
      assertEquals(815, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1244, hypergeometricDistribution0.getPopulationSize());
      assertEquals(533.9429260450161, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(815, hypergeometricDistribution0.getNumberOfSuccesses());
      
      boolean boolean0 = well44497b0.nextBoolean();
      assertTrue(boolean0);
      
      double double1 = hypergeometricDistribution0.cumulativeProbability(743);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.0, double1, 0.01);
      assertEquals(815, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1244, hypergeometricDistribution0.getPopulationSize());
      assertEquals(533.9429260450161, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(815, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double2 = hypergeometricDistribution0.upperCumulativeProbability(758);
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(6.276228617886378E-187, double2, 0.01);
      assertEquals(815, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1244, hypergeometricDistribution0.getPopulationSize());
      assertEquals(533.9429260450161, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(815, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double3 = hypergeometricDistribution0.calculateNumericalVariance();
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(63.55034498804288, double3, 0.01);
      assertEquals(815, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1244, hypergeometricDistribution0.getPopulationSize());
      assertEquals(533.9429260450161, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(815, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double4 = hypergeometricDistribution0.getNumericalMean();
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(533.9429260450161, double4, 0.01);
      assertEquals(815, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1244, hypergeometricDistribution0.getPopulationSize());
      assertEquals(533.9429260450161, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(815, hypergeometricDistribution0.getNumberOfSuccesses());
      
      HypergeometricDistribution hypergeometricDistribution1 = null;
      try {
        hypergeometricDistribution1 = new HypergeometricDistribution(234, 1244, 855);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (1,244) must be less than or equal to population size (234)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1366, 1237, 1237);
      assertEquals(1237, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1120.1822840409957, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1237, hypergeometricDistribution0.getSampleSize());
      assertEquals(1366, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(9.997347078299363, double0, 0.01);
      assertEquals(1237, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1120.1822840409957, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1237, hypergeometricDistribution0.getSampleSize());
      assertEquals(1366, hypergeometricDistribution0.getPopulationSize());
      
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(1124, int0);
      assertEquals(1237, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1120.1822840409957, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1237, hypergeometricDistribution0.getSampleSize());
      assertEquals(1366, hypergeometricDistribution0.getPopulationSize());
      
      double double1 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(double1, double0, 0.01);
      assertEquals(9.997347078299363, double1, 0.01);
      assertEquals(1237, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1120.1822840409957, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1237, hypergeometricDistribution0.getSampleSize());
      assertEquals(1366, hypergeometricDistribution0.getPopulationSize());
      
      double double2 = hypergeometricDistribution0.probability(1237);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(8.607229196977705E-185, double2, 0.01);
      assertEquals(1237, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1120.1822840409957, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1237, hypergeometricDistribution0.getSampleSize());
      assertEquals(1366, hypergeometricDistribution0.getPopulationSize());
      
      double double3 = hypergeometricDistribution0.probability(1124);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(0.05746803018618022, double3, 0.01);
      assertEquals(1237, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1120.1822840409957, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1237, hypergeometricDistribution0.getSampleSize());
      assertEquals(1366, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 1237;
      Well44497b well44497b0 = new Well44497b((long) 1237);
      assertNotNull(well44497b0);
      
      long long0 = well44497b0.nextLong();
      assertEquals(8949967768705557593L, long0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 1237, 815, 815);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1237, hypergeometricDistribution0.getPopulationSize());
      assertEquals(815, hypergeometricDistribution0.getSampleSize());
      assertEquals(536.9644300727566, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(815, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      int int1 = hypergeometricDistribution0.getSupportUpperBound();
      assertFalse(int1 == int0);
      assertEquals(815, int1);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1237, hypergeometricDistribution0.getPopulationSize());
      assertEquals(815, hypergeometricDistribution0.getSampleSize());
      assertEquals(536.9644300727566, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(815, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(815);
      assertEquals(0.0, double0, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1237, hypergeometricDistribution0.getPopulationSize());
      assertEquals(815, hypergeometricDistribution0.getSampleSize());
      assertEquals(536.9644300727566, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(815, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int2 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(815, int2);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1237, hypergeometricDistribution0.getPopulationSize());
      assertEquals(815, hypergeometricDistribution0.getSampleSize());
      assertEquals(536.9644300727566, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(815, hypergeometricDistribution0.getNumberOfSuccesses());
      
      boolean boolean0 = well44497b0.nextBoolean();
      assertFalse(boolean0);
      
      double double1 = hypergeometricDistribution0.cumulativeProbability(1237);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.0, double1, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1237, hypergeometricDistribution0.getPopulationSize());
      assertEquals(815, hypergeometricDistribution0.getSampleSize());
      assertEquals(536.9644300727566, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(815, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double2 = hypergeometricDistribution0.upperCumulativeProbability(815);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1237, hypergeometricDistribution0.getPopulationSize());
      assertEquals(815, hypergeometricDistribution0.getSampleSize());
      assertEquals(536.9644300727566, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(815, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double3 = hypergeometricDistribution0.calculateNumericalVariance();
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(62.54350982586328, double3, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1237, hypergeometricDistribution0.getPopulationSize());
      assertEquals(815, hypergeometricDistribution0.getSampleSize());
      assertEquals(536.9644300727566, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(815, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double4 = hypergeometricDistribution0.getNumericalMean();
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(536.9644300727566, double4, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1237, hypergeometricDistribution0.getPopulationSize());
      assertEquals(815, hypergeometricDistribution0.getSampleSize());
      assertEquals(536.9644300727566, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(815, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int3 = hypergeometricDistribution0.getSampleSize();
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(815, int3);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1237, hypergeometricDistribution0.getPopulationSize());
      assertEquals(815, hypergeometricDistribution0.getSampleSize());
      assertEquals(536.9644300727566, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(815, hypergeometricDistribution0.getNumberOfSuccesses());
      
      boolean boolean1 = hypergeometricDistribution0.isSupportConnected();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1237, hypergeometricDistribution0.getPopulationSize());
      assertEquals(815, hypergeometricDistribution0.getSampleSize());
      assertEquals(536.9644300727566, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(815, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int4 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertTrue(int4 == int1);
      assertTrue(int4 == int2);
      assertFalse(int4 == int0);
      assertTrue(int4 == int3);
      assertEquals(815, int4);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1237, hypergeometricDistribution0.getPopulationSize());
      assertEquals(815, hypergeometricDistribution0.getSampleSize());
      assertEquals(536.9644300727566, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(815, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int5 = (-4042);
      try { 
        hypergeometricDistribution0.inverseCumulativeProbability(1810.7236860727);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1,810.724 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a();
      assertNotNull(well19937a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 2381, 1237, 1378);
      assertEquals(1378, hypergeometricDistribution0.getSampleSize());
      assertEquals(715.9118017639647, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2381, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1237, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(144.96064970258763, double0, 0.01);
      assertEquals(1378, hypergeometricDistribution0.getSampleSize());
      assertEquals(715.9118017639647, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2381, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1237, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double1 = hypergeometricDistribution0.cumulativeProbability(1237);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.0, double1, 0.01);
      assertEquals(1378, hypergeometricDistribution0.getSampleSize());
      assertEquals(715.9118017639647, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2381, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1237, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1366, 813, 1366);
      assertEquals(1366, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1366, hypergeometricDistribution0.getSampleSize());
      assertEquals(813, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(813.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(813.0, double0, 0.01);
      assertEquals(1366, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1366, hypergeometricDistribution0.getSampleSize());
      assertEquals(813, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(813.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double1 = hypergeometricDistribution0.getNumericalVariance();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(1366, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1366, hypergeometricDistribution0.getSampleSize());
      assertEquals(813, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(813.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double2 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertEquals(1366, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1366, hypergeometricDistribution0.getSampleSize());
      assertEquals(813, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(813.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double3 = hypergeometricDistribution0.probability(813);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(1.0, double3, 0.01);
      assertEquals(1366, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1366, hypergeometricDistribution0.getSampleSize());
      assertEquals(813, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(813.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(539, 539, 539);
      assertEquals(539.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(539, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(539, hypergeometricDistribution0.getSampleSize());
      assertEquals(539, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      hypergeometricDistribution0.reseedRandomGenerator(539);
      assertEquals(539.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(539, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(539, hypergeometricDistribution0.getSampleSize());
      assertEquals(539, hypergeometricDistribution0.getPopulationSize());
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(1, 539);
      assertEquals(1.0, double0, 0.01);
      assertEquals(539.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(539, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(539, hypergeometricDistribution0.getSampleSize());
      assertEquals(539, hypergeometricDistribution0.getPopulationSize());
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(539, int0);
      assertEquals(539.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(539, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(539, hypergeometricDistribution0.getSampleSize());
      assertEquals(539, hypergeometricDistribution0.getPopulationSize());
      
      int int1 = hypergeometricDistribution0.getSupportUpperBound();
      assertTrue(int1 == int0);
      assertEquals(539, int1);
      assertEquals(539.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(539, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(539, hypergeometricDistribution0.getSampleSize());
      assertEquals(539, hypergeometricDistribution0.getPopulationSize());
      
      int int2 = hypergeometricDistribution0.getSupportUpperBound();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(539, int2);
      assertEquals(539.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(539, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(539, hypergeometricDistribution0.getSampleSize());
      assertEquals(539, hypergeometricDistribution0.getPopulationSize());
      
      Random.setNextRandom(1628);
      int int3 = hypergeometricDistribution0.sample();
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals(539, int3);
      assertEquals(539.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(539, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(539, hypergeometricDistribution0.getSampleSize());
      assertEquals(539, hypergeometricDistribution0.getPopulationSize());
      
      double double1 = hypergeometricDistribution0.probability(539);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(539.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(539, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(539, hypergeometricDistribution0.getSampleSize());
      assertEquals(539, hypergeometricDistribution0.getPopulationSize());
      
      int[] intArray0 = hypergeometricDistribution0.sample(1);
      assertArrayEquals(new int[] {539}, intArray0);
      assertEquals(1, intArray0.length);
      assertEquals(539.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(539, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(539, hypergeometricDistribution0.getSampleSize());
      assertEquals(539, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(intArray0);
      
      double double2 = hypergeometricDistribution0.upperCumulativeProbability((-1489));
      assertNotEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(1.0, double2, 0.01);
      assertEquals(539.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(539, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(539, hypergeometricDistribution0.getSampleSize());
      assertEquals(539, hypergeometricDistribution0.getPopulationSize());
      
      int[] intArray1 = hypergeometricDistribution0.sample(2275);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertEquals(2275, intArray1.length);
      assertEquals(539.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(539, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(539, hypergeometricDistribution0.getSampleSize());
      assertEquals(539, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(intArray1);
      
      double double3 = hypergeometricDistribution0.probability(539);
      assertEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
      assertEquals(539.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(539, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(539, hypergeometricDistribution0.getSampleSize());
      assertEquals(539, hypergeometricDistribution0.getPopulationSize());
      
      System.setCurrentTimeMillis(0L);
      Random.setNextRandom(539);
      double double4 = hypergeometricDistribution0.getNumericalVariance();
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(0.0, double4, 0.01);
      assertEquals(539.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(539, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(539, hypergeometricDistribution0.getSampleSize());
      assertEquals(539, hypergeometricDistribution0.getPopulationSize());
      
      double double5 = hypergeometricDistribution0.cumulativeProbability(1);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertEquals(double5, double4, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertEquals(0.0, double5, 0.01);
      assertEquals(539.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(539, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(539, hypergeometricDistribution0.getSampleSize());
      assertEquals(539, hypergeometricDistribution0.getPopulationSize());
      
      int int4 = hypergeometricDistribution0.getSupportLowerBound();
      assertTrue(int4 == int2);
      assertTrue(int4 == int0);
      assertTrue(int4 == int3);
      assertTrue(int4 == int1);
      assertEquals(539, int4);
      assertEquals(539.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(539, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(539, hypergeometricDistribution0.getSampleSize());
      assertEquals(539, hypergeometricDistribution0.getPopulationSize());
      
      int int5 = hypergeometricDistribution0.getSupportLowerBound();
      assertTrue(int5 == int1);
      assertTrue(int5 == int4);
      assertTrue(int5 == int0);
      assertTrue(int5 == int2);
      assertTrue(int5 == int3);
      assertEquals(539, int5);
      assertEquals(539.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(539, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(539, hypergeometricDistribution0.getSampleSize());
      assertEquals(539, hypergeometricDistribution0.getPopulationSize());
      
      Random.setNextRandom(4869);
      int int6 = hypergeometricDistribution0.getPopulationSize();
      assertTrue(int6 == int0);
      assertTrue(int6 == int4);
      assertTrue(int6 == int2);
      assertTrue(int6 == int3);
      assertTrue(int6 == int1);
      assertTrue(int6 == int5);
      assertEquals(539, int6);
      assertEquals(539.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(539, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(539, hypergeometricDistribution0.getSampleSize());
      assertEquals(539, hypergeometricDistribution0.getPopulationSize());
      
      int int7 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertTrue(int7 == int3);
      assertTrue(int7 == int0);
      assertTrue(int7 == int5);
      assertTrue(int7 == int1);
      assertTrue(int7 == int6);
      assertTrue(int7 == int2);
      assertTrue(int7 == int4);
      assertEquals(539, int7);
      assertEquals(539.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(539, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(539, hypergeometricDistribution0.getSampleSize());
      assertEquals(539, hypergeometricDistribution0.getPopulationSize());
      
      System.setCurrentTimeMillis(0L);
      double double6 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(double6, double5, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertEquals(double6, double4, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertEquals(0.0, double6, 0.01);
      assertEquals(539.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(539, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(539, hypergeometricDistribution0.getSampleSize());
      assertEquals(539, hypergeometricDistribution0.getPopulationSize());
      
      int int8 = hypergeometricDistribution0.getPopulationSize();
      assertTrue(int8 == int0);
      assertTrue(int8 == int2);
      assertTrue(int8 == int1);
      assertTrue(int8 == int6);
      assertTrue(int8 == int7);
      assertTrue(int8 == int4);
      assertTrue(int8 == int3);
      assertTrue(int8 == int5);
      assertEquals(539, int8);
      assertEquals(539.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(539, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(539, hypergeometricDistribution0.getSampleSize());
      assertEquals(539, hypergeometricDistribution0.getPopulationSize());
      
      double double7 = hypergeometricDistribution0.getNumericalVariance();
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertEquals(double7, double4, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertEquals(double7, double6, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertEquals(double7, double5, 0.01);
      assertEquals(0.0, double7, 0.01);
      assertEquals(539.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(539, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(539, hypergeometricDistribution0.getSampleSize());
      assertEquals(539, hypergeometricDistribution0.getPopulationSize());
      
      int int9 = hypergeometricDistribution0.getPopulationSize();
      assertTrue(int9 == int1);
      assertTrue(int9 == int0);
      assertTrue(int9 == int2);
      assertTrue(int9 == int4);
      assertTrue(int9 == int3);
      assertTrue(int9 == int8);
      assertTrue(int9 == int5);
      assertTrue(int9 == int7);
      assertTrue(int9 == int6);
      assertEquals(539, int9);
      assertEquals(539.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(539, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(539, hypergeometricDistribution0.getSampleSize());
      assertEquals(539, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      assertNotNull(well44497b0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 4869, 0, 0);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(4869, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      long long0 = well44497b0.nextLong();
      assertEquals((-3309472111078198868L), long0);
      
      well44497b0.setSeed((long) 0);
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(0, int0);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(4869, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double0 = hypergeometricDistribution0.probability(0);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(4869, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double1 = hypergeometricDistribution0.cumulativeProbability(0, 0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(4869, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double2 = hypergeometricDistribution0.probability(4869);
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(4869, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int1 = hypergeometricDistribution0.sample();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(4869, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int2 = hypergeometricDistribution0.getSupportLowerBound();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(4869, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int3 = hypergeometricDistribution0.getSupportLowerBound();
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals(0, int3);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(4869, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int4 = hypergeometricDistribution0.getSupportUpperBound();
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      assertTrue(int4 == int1);
      assertTrue(int4 == int0);
      assertEquals(0, int4);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(4869, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double3 = hypergeometricDistribution0.cumulativeProbability(1, 1051);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(0.0, double3, 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(4869, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double4 = hypergeometricDistribution0.upperCumulativeProbability((-1));
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(1.0, double4, 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(4869, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double5 = hypergeometricDistribution0.calculateNumericalVariance();
      assertNotEquals(double5, double0, 0.01);
      assertEquals(double5, double2, 0.01);
      assertEquals(double5, double1, 0.01);
      assertEquals(double5, double3, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertEquals(0.0, double5, 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(4869, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(4869, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double6 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(double6, double5, 0.01);
      assertEquals(double6, double3, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertEquals(double6, double2, 0.01);
      assertEquals(double6, double1, 0.01);
      assertEquals(0.0, double6, 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(4869, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double7 = hypergeometricDistribution0.probability((-1));
      assertEquals(double7, double2, 0.01);
      assertEquals(double7, double1, 0.01);
      assertEquals(double7, double3, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertEquals(double7, double6, 0.01);
      assertEquals(double7, double5, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertEquals(0.0, double7, 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(4869, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int5 = hypergeometricDistribution0.getPopulationSize();
      assertFalse(int5 == int2);
      assertFalse(int5 == int0);
      assertFalse(int5 == int4);
      assertFalse(int5 == int1);
      assertFalse(int5 == int3);
      assertEquals(4869, int5);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(4869, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      assertNotNull(well44497b0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 4869, 0, 0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(4869, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      long long0 = well44497b0.nextLong();
      assertEquals((-3309472111078198868L), long0);
      
      well44497b0.setSeed((long) 0);
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(0, int0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(4869, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(4869, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double1 = hypergeometricDistribution0.probability(0);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(4869, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double2 = hypergeometricDistribution0.cumulativeProbability(4869);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(1.0, double2, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(4869, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double3 = hypergeometricDistribution0.cumulativeProbability(4869);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(1.0, double3, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(4869, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      
      long long1 = well44497b0.nextLong();
      assertFalse(long1 == long0);
      assertEquals(5747328870099210361L, long1);
      
      int int1 = hypergeometricDistribution0.getSupportUpperBound();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(4869, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int2 = hypergeometricDistribution0.inverseCumulativeProbability(0.0);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(4869, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double4 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(double4, double2, 0.01);
      assertEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(1.0, double4, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(4869, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int3 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals(0, int3);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(4869, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int4 = hypergeometricDistribution0.getSupportLowerBound();
      assertTrue(int4 == int3);
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      assertTrue(int4 == int2);
      assertEquals(0, int4);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(4869, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      
      boolean boolean0 = well44497b0.nextBoolean();
      assertTrue(boolean0);
      
      double double5 = hypergeometricDistribution0.upperCumulativeProbability(1960);
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertEquals(double5, double0, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertEquals(0.0, double5, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(4869, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double6 = hypergeometricDistribution0.cumulativeProbability(0);
      assertNotEquals(double6, double5, 0.01);
      assertEquals(double6, double3, 0.01);
      assertEquals(double6, double2, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertEquals(double6, double4, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertEquals(1.0, double6, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(4869, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double7 = hypergeometricDistribution0.upperCumulativeProbability(469);
      assertEquals(double7, double5, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertEquals(double7, double0, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertEquals(0.0, double7, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(4869, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double8 = hypergeometricDistribution0.calculateNumericalVariance();
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertEquals(double8, double5, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertEquals(double8, double7, 0.01);
      assertEquals(double8, double0, 0.01);
      assertEquals(0.0, double8, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(4869, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double9 = hypergeometricDistribution0.getNumericalMean();
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertEquals(double9, double5, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertEquals(double9, double8, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertEquals(double9, double7, 0.01);
      assertEquals(double9, double0, 0.01);
      assertEquals(0.0, double9, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(4869, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int5 = hypergeometricDistribution0.getSampleSize();
      assertTrue(int5 == int1);
      assertTrue(int5 == int4);
      assertTrue(int5 == int0);
      assertTrue(int5 == int3);
      assertTrue(int5 == int2);
      assertEquals(0, int5);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(4869, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      
      boolean boolean1 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(4869, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double10 = hypergeometricDistribution0.cumulativeProbability((-1501));
      assertEquals(double10, double8, 0.01);
      assertNotEquals(double10, double3, 0.01);
      assertNotEquals(double10, double4, 0.01);
      assertNotEquals(double10, double1, 0.01);
      assertEquals(double10, double9, 0.01);
      assertEquals(double10, double7, 0.01);
      assertEquals(double10, double0, 0.01);
      assertNotEquals(double10, double6, 0.01);
      assertEquals(double10, double5, 0.01);
      assertNotEquals(double10, double2, 0.01);
      assertEquals(0.0, double10, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(4869, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int6 = hypergeometricDistribution0.getSupportUpperBound();
      assertTrue(int6 == int3);
      assertTrue(int6 == int5);
      assertTrue(int6 == int4);
      assertTrue(int6 == int0);
      assertTrue(int6 == int1);
      assertTrue(int6 == int2);
      assertEquals(0, int6);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(4869, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int7 = (-149);
      HypergeometricDistribution hypergeometricDistribution1 = null;
      try {
        hypergeometricDistribution1 = new HypergeometricDistribution((-149), 0, (-149));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-149)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4719, 4719, 2);
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(4719, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(4719, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(2, int0);
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(4719, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(4719, hypergeometricDistribution0.getPopulationSize());
      
      double double0 = hypergeometricDistribution0.probability(2);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(4719, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(4719, hypergeometricDistribution0.getPopulationSize());
      
      double double1 = hypergeometricDistribution0.cumulativeProbability(2, 19);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(4719, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(4719, hypergeometricDistribution0.getPopulationSize());
      
      double double2 = hypergeometricDistribution0.probability(4719);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(4719, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(4719, hypergeometricDistribution0.getPopulationSize());
      
      int int1 = hypergeometricDistribution0.sample();
      assertTrue(int1 == int0);
      assertEquals(2, int1);
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(4719, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(4719, hypergeometricDistribution0.getPopulationSize());
      
      int int2 = hypergeometricDistribution0.getSupportLowerBound();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(2, int2);
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(4719, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(4719, hypergeometricDistribution0.getPopulationSize());
      
      int int3 = hypergeometricDistribution0.getSupportLowerBound();
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals(2, int3);
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(4719, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(4719, hypergeometricDistribution0.getPopulationSize());
      
      int int4 = hypergeometricDistribution0.getSupportUpperBound();
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      assertEquals(2, int4);
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(4719, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(4719, hypergeometricDistribution0.getPopulationSize());
      
      double double3 = hypergeometricDistribution0.cumulativeProbability(591, 1051);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(0.0, double3, 0.01);
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(4719, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(4719, hypergeometricDistribution0.getPopulationSize());
      
      double double4 = hypergeometricDistribution0.upperCumulativeProbability(1051);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(double4, double2, 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals(0.0, double4, 0.01);
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(4719, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(4719, hypergeometricDistribution0.getPopulationSize());
      
      double double5 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(double5, double4, 0.01);
      assertEquals(double5, double2, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertEquals(double5, double3, 0.01);
      assertEquals(double5, double1, 0.01);
      assertEquals(0.0, double5, 0.01);
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(4719, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(4719, hypergeometricDistribution0.getPopulationSize());
      
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(4719, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(4719, hypergeometricDistribution0.getPopulationSize());
      
      double double6 = hypergeometricDistribution0.getNumericalMean();
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertEquals(2.0, double6, 0.01);
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(4719, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(4719, hypergeometricDistribution0.getPopulationSize());
      
      double double7 = hypergeometricDistribution0.probability(964);
      assertEquals(double7, double4, 0.01);
      assertEquals(double7, double2, 0.01);
      assertEquals(double7, double5, 0.01);
      assertEquals(double7, double1, 0.01);
      assertEquals(double7, double3, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertEquals(0.0, double7, 0.01);
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(4719, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(4719, hypergeometricDistribution0.getPopulationSize());
      
      int int5 = hypergeometricDistribution0.getPopulationSize();
      assertFalse(int5 == int4);
      assertFalse(int5 == int1);
      assertFalse(int5 == int3);
      assertFalse(int5 == int2);
      assertFalse(int5 == int0);
      assertEquals(4719, int5);
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(4719, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(4719, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 4719;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4719, 4719, 2);
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(4719, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(4719, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      int int1 = hypergeometricDistribution0.getSupportLowerBound();
      assertFalse(int1 == int0);
      assertEquals(2, int1);
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(4719, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(4719, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      
      HypergeometricDistribution hypergeometricDistribution1 = null;
      try {
        hypergeometricDistribution1 = new HypergeometricDistribution(2, 1, 1378);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (1,378) must be less than or equal to population size (2)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      assertNotNull(mersenneTwister0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 813, 813, 2);
      assertEquals(813, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(813, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      hypergeometricDistribution0.reseedRandomGenerator(2);
      assertEquals(813, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(813, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(2, int0);
      assertEquals(813, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(813, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      
      hypergeometricDistribution0.reseedRandomGenerator(2);
      assertEquals(813, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(813, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      
      HypergeometricDistribution hypergeometricDistribution1 = null;
      try {
        hypergeometricDistribution1 = new HypergeometricDistribution(2, 2030, 886);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (2,030) must be less than or equal to population size (2)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 982;
      int int1 = 1543;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(982, 1543, 979);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (1,543) must be less than or equal to population size (982)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 935;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(935, 935, 935);
      assertEquals(935, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(935.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(935, hypergeometricDistribution0.getSampleSize());
      assertEquals(935, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      assertEquals(935, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(935.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(935, hypergeometricDistribution0.getSampleSize());
      assertEquals(935, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int[] intArray0 = hypergeometricDistribution0.sample(935);
      assertEquals(935, intArray0.length);
      assertEquals(935, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(935.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(935, hypergeometricDistribution0.getSampleSize());
      assertEquals(935, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(intArray0);
      
      int int1 = hypergeometricDistribution0.sample();
      assertTrue(int1 == int0);
      assertEquals(935, int1);
      assertEquals(935, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(935.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(935, hypergeometricDistribution0.getSampleSize());
      assertEquals(935, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int2 = hypergeometricDistribution0.solveInverseCumulativeProbability(935, (-3403), 935);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(935, int2);
      assertEquals(935, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(935.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(935, hypergeometricDistribution0.getSampleSize());
      assertEquals(935, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      try { 
        hypergeometricDistribution0.cumulativeProbability(0, (-888));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lower endpoint (0) must be less than or equal to upper endpoint (-888)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 5939;
      intArray0[1] = 2948;
      intArray0[2] = 3644;
      intArray0[3] = 577;
      intArray0[4] = 0;
      intArray0[5] = 2;
      intArray0[6] = 2;
      Well44497b well44497b0 = new Well44497b(intArray0);
      assertArrayEquals(new int[] {5939, 2948, 3644, 577, 0, 2, 2}, intArray0);
      assertEquals(7, intArray0.length);
      assertNotNull(well44497b0);
      
      boolean boolean0 = well44497b0.nextBoolean();
      assertArrayEquals(new int[] {5939, 2948, 3644, 577, 0, 2, 2}, intArray0);
      assertTrue(boolean0);
      assertEquals(7, intArray0.length);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 577, 3644, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (3,644) must be less than or equal to population size (577)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[8];
      intArray0[0] = 963;
      intArray0[1] = 0;
      intArray0[2] = (-2259);
      intArray0[3] = (-1);
      intArray0[4] = 2525;
      int int0 = 1;
      intArray0[5] = 1;
      intArray0[6] = 360;
      intArray0[7] = (-1);
      Well19937c well19937c0 = new Well19937c(intArray0);
      assertArrayEquals(new int[] {963, 0, (-2259), (-1), 2525, 1, 360, (-1)}, intArray0);
      assertEquals(8, intArray0.length);
      assertNotNull(well19937c0);
      
      double double0 = well19937c0.nextGaussian();
      assertArrayEquals(new int[] {963, 0, (-2259), (-1), 2525, 1, 360, (-1)}, intArray0);
      assertEquals((-1.1037275017647863), double0, 0.01);
      assertEquals(8, intArray0.length);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 963, 733, (-120));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-120)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(1058);
      assertNotNull(well44497b0);
      
      int[] intArray0 = new int[3];
      well44497b0.setSeed((long) 1058);
      intArray0[0] = 1058;
      intArray0[1] = 1058;
      intArray0[2] = 1058;
      well44497b0.setSeed(intArray0);
      assertArrayEquals(new int[] {1058, 1058, 1058}, intArray0);
      assertEquals(3, intArray0.length);
      
      int int0 = well44497b0.nextInt();
      assertEquals(1679924000, int0);
      
      double double0 = well44497b0.nextDouble();
      assertEquals(0.435635486546192, double0, 0.01);
      
      well44497b0.setSeed((-466L));
      long long0 = well44497b0.nextLong();
      assertEquals(7038604729076514465L, long0);
      
      double double1 = well44497b0.nextGaussian();
      assertNotEquals(double1, double0, 0.01);
      assertEquals((-0.04391704241218452), double1, 0.01);
      
      double double2 = well44497b0.nextGaussian();
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals((-1.9777245569533655), double2, 0.01);
      
      float float0 = well44497b0.nextFloat();
      assertEquals(0.5353508F, float0, 0.01F);
      
      boolean boolean0 = well44497b0.nextBoolean();
      assertTrue(boolean0);
      
      boolean boolean1 = well44497b0.nextBoolean();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 1058, 0, 849);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(849, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1058, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      double double3 = hypergeometricDistribution0.upperCumulativeProbability(1003);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(0.0, double3, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(849, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1058, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double4 = hypergeometricDistribution0.upperCumulativeProbability((-394));
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(1.0, double4, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(849, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1058, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      boolean boolean2 = hypergeometricDistribution0.isSupportConnected();
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(849, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1058, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double5 = hypergeometricDistribution0.upperCumulativeProbability((-2693));
      assertNotEquals(double5, double3, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertEquals(double5, double4, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertEquals(1.0, double5, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(849, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1058, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int1 = hypergeometricDistribution0.getPopulationSize();
      assertFalse(int1 == int0);
      assertEquals(1058, int1);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(849, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1058, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double6 = hypergeometricDistribution0.getNumericalVariance();
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertEquals(double6, double3, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertEquals(0.0, double6, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(849, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1058, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double7 = hypergeometricDistribution0.cumulativeProbability(1058, 1058);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertEquals(double7, double3, 0.01);
      assertEquals(double7, double6, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertEquals(0.0, double7, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(849, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1058, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int2 = hypergeometricDistribution0.getSupportUpperBound();
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(849, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1058, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int3 = hypergeometricDistribution0.getSupportLowerBound();
      assertFalse(int3 == int1);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(0, int3);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(849, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1058, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int4 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertTrue(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertTrue(int4 == int2);
      assertEquals(0, int4);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(849, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1058, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double8 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(double8, double3, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertEquals(double8, double6, 0.01);
      assertEquals(double8, double7, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertEquals(0.0, double8, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(849, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1058, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double9 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(double9, double3, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertEquals(double9, double6, 0.01);
      assertEquals(double9, double7, 0.01);
      assertEquals(double9, double8, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertEquals(0.0, double9, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(849, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1058, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int5 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertFalse(int5 == int0);
      assertTrue(int5 == int2);
      assertTrue(int5 == int4);
      assertFalse(int5 == int1);
      assertTrue(int5 == int3);
      assertEquals(0, int5);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(849, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1058, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(jDKRandomGenerator0);
      synchronizedRandomGenerator0.setSeed(0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(synchronizedRandomGenerator0, 1047, 0, 0);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.reseedRandomGenerator(1566083941L);
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.sample();
      synchronizedRandomGenerator0.nextDouble();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-77);
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte) (-92);
      byteArray0[5] = (byte)121;
      byteArray0[6] = (byte)96;
      byteArray0[7] = (byte)0;
      synchronizedRandomGenerator0.nextBytes(byteArray0);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(2530);
      assertEquals(0.0, double0, 0.01);
      
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(1047, int0);
      
      synchronizedRandomGenerator0.nextInt();
      hypergeometricDistribution0.cumulativeProbability(0);
      double double1 = hypergeometricDistribution0.probability(0);
      assertEquals(Double.NaN, double1, 0.01);
      
      hypergeometricDistribution0.getSupportLowerBound();
      double double2 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double2, 0.01);
      
      hypergeometricDistribution0.cumulativeProbability(0);
      int int1 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(0, int1);
      
      hypergeometricDistribution0.probability(4);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 4719;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4719, 4719, 2);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.probability(2);
      try { 
        hypergeometricDistribution0.cumulativeProbability(2, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lower endpoint (2) must be less than or equal to upper endpoint (0)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(813, (-1696), 813);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-1,696)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 4869, 0, 0);
      well44497b0.nextLong();
      well44497b0.setSeed((long) 0);
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.getNumericalVariance();
      double double0 = hypergeometricDistribution0.probability(0);
      assertEquals(Double.NaN, double0, 0.01);
      
      hypergeometricDistribution0.cumulativeProbability(4869);
      double double1 = hypergeometricDistribution0.cumulativeProbability(4869);
      assertEquals(1.0, double1, 0.01);
      
      well44497b0.nextLong();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.inverseCumulativeProbability(0.0);
      hypergeometricDistribution0.upperCumulativeProbability(0);
      hypergeometricDistribution0.getNumberOfSuccesses();
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      well44497b0.nextBoolean();
      hypergeometricDistribution0.upperCumulativeProbability(1960);
      hypergeometricDistribution0.cumulativeProbability(0);
      hypergeometricDistribution0.upperCumulativeProbability(469);
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.isSupportConnected();
      int int1 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertTrue(int1 == int0);
      
      double double2 = hypergeometricDistribution0.cumulativeProbability(0);
      assertEquals(1.0, double2, 0.01);
      
      hypergeometricDistribution0.getSampleSize();
      double double3 = hypergeometricDistribution0.upperCumulativeProbability(1960);
      assertEquals(0.0, double3, 0.01);
      
      double double4 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(4869, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double4, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom();
      int int0 = 655;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 369, 655, 655);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (655) must be less than or equal to population size (369)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = (-859);
      int int1 = 0;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((-859), (-859), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-859)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(0, 1817, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      int int0 = 0;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 1258;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 1258, 1258, 1258);
      hypergeometricDistribution0.getSampleSize();
      int int1 = (-325);
      // Undeclared exception!
      try { 
        hypergeometricDistribution0.reseedRandomGenerator((-325));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }
}
