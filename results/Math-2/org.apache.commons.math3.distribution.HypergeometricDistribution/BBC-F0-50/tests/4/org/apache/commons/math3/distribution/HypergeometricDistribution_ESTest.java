/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 20:29:46 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 619;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(619, 619, 619);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(619, hypergeometricDistribution0.getSampleSize());
      assertEquals(619, hypergeometricDistribution0.getPopulationSize());
      assertEquals(619, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(619.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int1 = hypergeometricDistribution0.getSupportUpperBound();
      assertTrue(int1 == int0);
      assertEquals(619, int1);
      assertEquals(619, hypergeometricDistribution0.getSampleSize());
      assertEquals(619, hypergeometricDistribution0.getPopulationSize());
      assertEquals(619, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(619.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double0 = (-23.8459);
      int int2 = hypergeometricDistribution0.sample();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(619, int2);
      assertEquals(619, hypergeometricDistribution0.getSampleSize());
      assertEquals(619, hypergeometricDistribution0.getPopulationSize());
      assertEquals(619, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(619.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int3 = 1147;
      int int4 = (-5110);
      int int5 = hypergeometricDistribution0.getSupportUpperBound();
      assertFalse(int5 == int3);
      assertTrue(int5 == int2);
      assertFalse(int5 == int4);
      assertTrue(int5 == int0);
      assertTrue(int5 == int1);
      assertEquals(619, int5);
      assertEquals(619, hypergeometricDistribution0.getSampleSize());
      assertEquals(619, hypergeometricDistribution0.getPopulationSize());
      assertEquals(619, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(619.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      hypergeometricDistribution0.sample(3331);
      // Undeclared exception!
      hypergeometricDistribution0.getSupportLowerBound();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(619, 619, 619);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(619.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(619, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(619, hypergeometricDistribution0.getPopulationSize());
      assertEquals(619, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double0 = hypergeometricDistribution0.probability(619);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(619.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(619, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(619, hypergeometricDistribution0.getPopulationSize());
      assertEquals(619, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(619, int0);
      assertEquals(619.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(619, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(619, hypergeometricDistribution0.getPopulationSize());
      assertEquals(619, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int1 = hypergeometricDistribution0.getSupportUpperBound();
      assertTrue(int1 == int0);
      assertEquals(619, int1);
      assertEquals(619.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(619, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(619, hypergeometricDistribution0.getPopulationSize());
      assertEquals(619, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      hypergeometricDistribution0.sample(3331);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.probability((-5110));
      hypergeometricDistribution0.solveInverseCumulativeProbability((-23.8459), 1147, (-5110));
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.upperCumulativeProbability((-1848));
      hypergeometricDistribution0.upperCumulativeProbability((-1848));
      // Undeclared exception!
      hypergeometricDistribution0.getNumberOfSuccesses();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(619, 619, 619);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(619, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(619.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(619, hypergeometricDistribution0.getSampleSize());
      assertEquals(619, hypergeometricDistribution0.getPopulationSize());
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(619, int0);
      assertEquals(619, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(619.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(619, hypergeometricDistribution0.getSampleSize());
      assertEquals(619, hypergeometricDistribution0.getPopulationSize());
      
      int int1 = hypergeometricDistribution0.getSupportUpperBound();
      assertTrue(int1 == int0);
      assertEquals(619, int1);
      assertEquals(619, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(619.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(619, hypergeometricDistribution0.getSampleSize());
      assertEquals(619, hypergeometricDistribution0.getPopulationSize());
      
      hypergeometricDistribution0.sample(3331);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.probability((-5110));
      hypergeometricDistribution0.solveInverseCumulativeProbability((-23.8459), 1147, (-5110));
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.upperCumulativeProbability((-1848));
      // Undeclared exception!
      hypergeometricDistribution0.calculateNumericalVariance();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(619, 619, 619);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(619, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(619.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(619, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(619, hypergeometricDistribution0.getPopulationSize());
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(619, int0);
      assertEquals(619, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(619.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(619, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(619, hypergeometricDistribution0.getPopulationSize());
      
      int int1 = hypergeometricDistribution0.getSupportUpperBound();
      assertTrue(int1 == int0);
      assertEquals(619, int1);
      assertEquals(619, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(619.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(619, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(619, hypergeometricDistribution0.getPopulationSize());
      
      hypergeometricDistribution0.sample(3331);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.probability((-5110));
      hypergeometricDistribution0.solveInverseCumulativeProbability((-23.8459), 1147, (-5110));
      hypergeometricDistribution0.upperCumulativeProbability((-386));
      hypergeometricDistribution0.cumulativeProbability(619, 619);
      hypergeometricDistribution0.upperCumulativeProbability((-1848));
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getSampleSize();
      // Undeclared exception!
      hypergeometricDistribution0.getSupportUpperBound();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(619, 619, 619);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(619, hypergeometricDistribution0.getPopulationSize());
      assertEquals(619, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(619.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(619, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(619, int0);
      assertEquals(619, hypergeometricDistribution0.getPopulationSize());
      assertEquals(619, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(619.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(619, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int1 = hypergeometricDistribution0.getSupportUpperBound();
      assertTrue(int1 == int0);
      assertEquals(619, int1);
      assertEquals(619, hypergeometricDistribution0.getPopulationSize());
      assertEquals(619, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(619.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(619, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      hypergeometricDistribution0.sample(3331);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.probability((-5110));
      hypergeometricDistribution0.solveInverseCumulativeProbability((-23.8459), 1147, (-5110));
      hypergeometricDistribution0.upperCumulativeProbability((-386));
      hypergeometricDistribution0.cumulativeProbability(619, 619);
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.getPopulationSize();
      // Undeclared exception!
      hypergeometricDistribution0.getSampleSize();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      assertNotNull(jDKRandomGenerator0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(jDKRandomGenerator0, 9999959, 9999959, 9999959);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(9999959, hypergeometricDistribution0.getPopulationSize());
      assertEquals((-54.35533155685938), hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(9999959, hypergeometricDistribution0.getSampleSize());
      assertEquals(9999959, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals((-54.35533155685938), double0, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(9999959, hypergeometricDistribution0.getPopulationSize());
      assertEquals((-54.35533155685938), hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(9999959, hypergeometricDistribution0.getSampleSize());
      assertEquals(9999959, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4258, 1036, 1036);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1036, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(252.06575857209958, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(4258, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1036, hypergeometricDistribution0.getSampleSize());
      
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(722);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 3853;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3853, 1139, 1139);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(336.7041266545549, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1139, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3853, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1139, hypergeometricDistribution0.getSampleSize());
      
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability(230);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      assertNotNull(well19937c0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 666, 553, 553);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(666, hypergeometricDistribution0.getPopulationSize());
      assertEquals(553, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(459.17267267267266, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(553, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(464, int0);
      assertEquals(666, hypergeometricDistribution0.getPopulationSize());
      assertEquals(553, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(459.17267267267266, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(553, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(553);
      assertEquals(4.749097480919376E-131, double0, 0.01);
      assertEquals(666, hypergeometricDistribution0.getPopulationSize());
      assertEquals(553, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(459.17267267267266, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(553, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double1 = well19937c0.nextDouble();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.6285316606947873, double1, 0.01);
      
      int int1 = hypergeometricDistribution0.sample();
      assertFalse(int1 == int0);
      assertEquals(460, int1);
      assertEquals(666, hypergeometricDistribution0.getPopulationSize());
      assertEquals(553, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(459.17267267267266, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(553, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double2 = hypergeometricDistribution0.upperCumulativeProbability(470);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(0.0031657958687085533, double2, 0.01);
      assertEquals(666, hypergeometricDistribution0.getPopulationSize());
      assertEquals(553, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(459.17267267267266, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(553, hypergeometricDistribution0.getNumberOfSuccesses());
      
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(952, 952, 1);
      assertNotNull(hypergeometricDistribution1);
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      assertEquals(952, hypergeometricDistribution1.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution1.getSampleSize());
      assertTrue(hypergeometricDistribution1.isSupportConnected());
      assertEquals(1.0, hypergeometricDistribution1.getNumericalMean(), 0.01);
      assertEquals(952, hypergeometricDistribution1.getPopulationSize());
      
      HypergeometricDistribution hypergeometricDistribution2 = null;
      try {
        hypergeometricDistribution2 = new HypergeometricDistribution(well19937c0, (-1548), 952, 553);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-1,548)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(195, 168, 168);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(168, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(144.73846153846154, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(195, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(168, hypergeometricDistribution0.getSampleSize());
      
      double double0 = hypergeometricDistribution0.probability(168);
      assertEquals(1.061233814480226E-33, double0, 0.01);
      assertEquals(168, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(144.73846153846154, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(195, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(168, hypergeometricDistribution0.getSampleSize());
      
      int int0 = 586;
      HypergeometricDistribution hypergeometricDistribution1 = null;
      try {
        hypergeometricDistribution1 = new HypergeometricDistribution(195, 195, 586);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (586) must be less than or equal to population size (195)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(223, 223, 223);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(223, hypergeometricDistribution0.getPopulationSize());
      assertEquals(223.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(223, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(223, hypergeometricDistribution0.getSampleSize());
      
      Well44497a well44497a0 = new Well44497a(223);
      assertNotNull(well44497a0);
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(223, 223);
      assertEquals(0.0, double0, 0.01);
      assertEquals(223, hypergeometricDistribution0.getPopulationSize());
      assertEquals(223.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(223, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(223, hypergeometricDistribution0.getSampleSize());
      
      double double1 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(223, hypergeometricDistribution0.getPopulationSize());
      assertEquals(223.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(223, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(223, hypergeometricDistribution0.getSampleSize());
      
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(well44497a0, 786, 223, 223);
      assertNotNull(hypergeometricDistribution1);
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      assertEquals(786, hypergeometricDistribution1.getPopulationSize());
      assertEquals(223, hypergeometricDistribution1.getNumberOfSuccesses());
      assertEquals(63.26844783715013, hypergeometricDistribution1.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution1.isSupportConnected());
      assertEquals(223, hypergeometricDistribution1.getSampleSize());
      
      double double2 = hypergeometricDistribution1.upperCumulativeProbability(223);
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertNotSame(hypergeometricDistribution1, hypergeometricDistribution0);
      assertEquals(8.073380000264477E-203, double2, 0.01);
      assertEquals(786, hypergeometricDistribution1.getPopulationSize());
      assertEquals(223, hypergeometricDistribution1.getNumberOfSuccesses());
      assertEquals(63.26844783715013, hypergeometricDistribution1.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution1.isSupportConnected());
      assertEquals(223, hypergeometricDistribution1.getSampleSize());
      
      int int0 = hypergeometricDistribution1.getSupportLowerBound();
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      assertNotSame(hypergeometricDistribution1, hypergeometricDistribution0);
      assertEquals(0, int0);
      assertEquals(786, hypergeometricDistribution1.getPopulationSize());
      assertEquals(223, hypergeometricDistribution1.getNumberOfSuccesses());
      assertEquals(63.26844783715013, hypergeometricDistribution1.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution1.isSupportConnected());
      assertEquals(223, hypergeometricDistribution1.getSampleSize());
      
      double double3 = hypergeometricDistribution0.upperCumulativeProbability(223);
      assertFalse(hypergeometricDistribution0.equals((Object)hypergeometricDistribution1));
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotSame(hypergeometricDistribution0, hypergeometricDistribution1);
      assertEquals(1.0, double3, 0.01);
      assertEquals(223, hypergeometricDistribution0.getPopulationSize());
      assertEquals(223.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(223, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(223, hypergeometricDistribution0.getSampleSize());
      
      double double4 = hypergeometricDistribution1.calculateNumericalVariance();
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotSame(hypergeometricDistribution1, hypergeometricDistribution0);
      assertEquals(32.50212580427163, double4, 0.01);
      assertEquals(786, hypergeometricDistribution1.getPopulationSize());
      assertEquals(223, hypergeometricDistribution1.getNumberOfSuccesses());
      assertEquals(63.26844783715013, hypergeometricDistribution1.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution1.isSupportConnected());
      assertEquals(223, hypergeometricDistribution1.getSampleSize());
      
      double double5 = hypergeometricDistribution1.getNumericalVariance();
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertEquals(double5, double4, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotSame(hypergeometricDistribution1, hypergeometricDistribution0);
      assertEquals(32.50212580427163, double5, 0.01);
      assertEquals(786, hypergeometricDistribution1.getPopulationSize());
      assertEquals(223, hypergeometricDistribution1.getNumberOfSuccesses());
      assertEquals(63.26844783715013, hypergeometricDistribution1.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution1.isSupportConnected());
      assertEquals(223, hypergeometricDistribution1.getSampleSize());
      
      HypergeometricDistribution hypergeometricDistribution2 = new HypergeometricDistribution(3662, 143, 0);
      assertNotNull(hypergeometricDistribution2);
      assertFalse(hypergeometricDistribution2.equals((Object)hypergeometricDistribution0));
      assertFalse(hypergeometricDistribution2.equals((Object)hypergeometricDistribution1));
      assertEquals(0.0, hypergeometricDistribution2.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution2.isSupportConnected());
      assertEquals(3662, hypergeometricDistribution2.getPopulationSize());
      assertEquals(0, hypergeometricDistribution2.getSampleSize());
      assertEquals(143, hypergeometricDistribution2.getNumberOfSuccesses());
      
      int int1 = hypergeometricDistribution2.getSampleSize();
      assertFalse(hypergeometricDistribution2.equals((Object)hypergeometricDistribution0));
      assertFalse(hypergeometricDistribution2.equals((Object)hypergeometricDistribution1));
      assertTrue(int1 == int0);
      assertNotSame(hypergeometricDistribution2, hypergeometricDistribution0);
      assertNotSame(hypergeometricDistribution2, hypergeometricDistribution1);
      assertEquals(0, int1);
      assertEquals(0.0, hypergeometricDistribution2.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution2.isSupportConnected());
      assertEquals(3662, hypergeometricDistribution2.getPopulationSize());
      assertEquals(0, hypergeometricDistribution2.getSampleSize());
      assertEquals(143, hypergeometricDistribution2.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      assertNotNull(well19937c0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 666, 553, 553);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(553, hypergeometricDistribution0.getSampleSize());
      assertEquals(666, hypergeometricDistribution0.getPopulationSize());
      assertEquals(553, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(459.17267267267266, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(464, int0);
      assertEquals(553, hypergeometricDistribution0.getSampleSize());
      assertEquals(666, hypergeometricDistribution0.getPopulationSize());
      assertEquals(553, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(459.17267267267266, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(553);
      assertEquals(4.749097480919376E-131, double0, 0.01);
      assertEquals(553, hypergeometricDistribution0.getSampleSize());
      assertEquals(666, hypergeometricDistribution0.getPopulationSize());
      assertEquals(553, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(459.17267267267266, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      HypergeometricDistribution hypergeometricDistribution1 = null;
      try {
        hypergeometricDistribution1 = new HypergeometricDistribution(553, 209, 661);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (661) must be less than or equal to population size (553)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      assertNotNull(well19937c0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 666, 553, 553);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(553, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(553, hypergeometricDistribution0.getSampleSize());
      assertEquals(666, hypergeometricDistribution0.getPopulationSize());
      assertEquals(459.17267267267266, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(553);
      assertEquals(4.749097480919376E-131, double0, 0.01);
      assertEquals(553, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(553, hypergeometricDistribution0.getSampleSize());
      assertEquals(666, hypergeometricDistribution0.getPopulationSize());
      assertEquals(459.17267267267266, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int0 = (-733);
      try { 
        hypergeometricDistribution0.cumulativeProbability(209, (-733));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lower endpoint (209) must be less than or equal to upper endpoint (-733)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1375, 666, 666);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(666, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1375, hypergeometricDistribution0.getPopulationSize());
      assertEquals(666, hypergeometricDistribution0.getSampleSize());
      assertEquals(322.58618181818184, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      hypergeometricDistribution0.reseedRandomGenerator(1375);
      assertEquals(666, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1375, hypergeometricDistribution0.getPopulationSize());
      assertEquals(666, hypergeometricDistribution0.getSampleSize());
      assertEquals(322.58618181818184, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 1375;
      intArray0[1] = 666;
      Well1024a well1024a0 = new Well1024a(intArray0);
      assertNotNull(well1024a0);
      assertArrayEquals(new int[] {1375, 666}, intArray0);
      assertEquals(2, intArray0.length);
      
      int int0 = well1024a0.nextInt();
      assertArrayEquals(new int[] {1375, 666}, intArray0);
      assertEquals((-1015506287), int0);
      assertEquals(2, intArray0.length);
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(1);
      assertEquals(0.0, double0, 0.01);
      assertEquals(666, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1375, hypergeometricDistribution0.getPopulationSize());
      assertEquals(666, hypergeometricDistribution0.getSampleSize());
      assertEquals(322.58618181818184, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double1 = hypergeometricDistribution0.calculateNumericalVariance();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(85.83191449651737, double1, 0.01);
      assertEquals(666, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1375, hypergeometricDistribution0.getPopulationSize());
      assertEquals(666, hypergeometricDistribution0.getSampleSize());
      assertEquals(322.58618181818184, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double2 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(85.83191449651737, double2, 0.01);
      assertEquals(666, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1375, hypergeometricDistribution0.getPopulationSize());
      assertEquals(666, hypergeometricDistribution0.getSampleSize());
      assertEquals(322.58618181818184, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      HypergeometricDistribution hypergeometricDistribution1 = null;
      try {
        hypergeometricDistribution1 = new HypergeometricDistribution(666, (-194), 666);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-194)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      assertNotNull(well19937c0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 666, 553, 553);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(666, hypergeometricDistribution0.getPopulationSize());
      assertEquals(553, hypergeometricDistribution0.getSampleSize());
      assertEquals(553, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(459.17267267267266, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(553);
      assertEquals(4.749097480919376E-131, double0, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(666, hypergeometricDistribution0.getPopulationSize());
      assertEquals(553, hypergeometricDistribution0.getSampleSize());
      assertEquals(553, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(459.17267267267266, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int0 = (-714);
      try { 
        hypergeometricDistribution0.cumulativeProbability(209, (-714));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lower endpoint (209) must be less than or equal to upper endpoint (-714)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(223, 223, 223);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(223, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(223.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(223, hypergeometricDistribution0.getSampleSize());
      assertEquals(223, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      Well44497a well44497a0 = new Well44497a(223);
      assertNotNull(well44497a0);
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(223, 223);
      assertEquals(0.0, double0, 0.01);
      assertEquals(223, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(223.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(223, hypergeometricDistribution0.getSampleSize());
      assertEquals(223, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double1 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(223, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(223.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(223, hypergeometricDistribution0.getSampleSize());
      assertEquals(223, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(well44497a0, 786, 223, 223);
      assertNotNull(hypergeometricDistribution1);
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      assertEquals(786, hypergeometricDistribution1.getPopulationSize());
      assertTrue(hypergeometricDistribution1.isSupportConnected());
      assertEquals(223, hypergeometricDistribution1.getNumberOfSuccesses());
      assertEquals(63.26844783715013, hypergeometricDistribution1.getNumericalMean(), 0.01);
      assertEquals(223, hypergeometricDistribution1.getSampleSize());
      
      double double2 = hypergeometricDistribution0.upperCumulativeProbability(786);
      assertFalse(hypergeometricDistribution0.equals((Object)hypergeometricDistribution1));
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertNotSame(hypergeometricDistribution0, hypergeometricDistribution1);
      assertEquals(0.0, double2, 0.01);
      assertEquals(223, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(223.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(223, hypergeometricDistribution0.getSampleSize());
      assertEquals(223, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double3 = hypergeometricDistribution1.calculateNumericalVariance();
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotSame(hypergeometricDistribution1, hypergeometricDistribution0);
      assertEquals(32.50212580427163, double3, 0.01);
      assertEquals(786, hypergeometricDistribution1.getPopulationSize());
      assertTrue(hypergeometricDistribution1.isSupportConnected());
      assertEquals(223, hypergeometricDistribution1.getNumberOfSuccesses());
      assertEquals(63.26844783715013, hypergeometricDistribution1.getNumericalMean(), 0.01);
      assertEquals(223, hypergeometricDistribution1.getSampleSize());
      
      double double4 = hypergeometricDistribution1.getNumericalVariance();
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(double4, double3, 0.01);
      assertNotSame(hypergeometricDistribution1, hypergeometricDistribution0);
      assertEquals(32.50212580427163, double4, 0.01);
      assertEquals(786, hypergeometricDistribution1.getPopulationSize());
      assertTrue(hypergeometricDistribution1.isSupportConnected());
      assertEquals(223, hypergeometricDistribution1.getNumberOfSuccesses());
      assertEquals(63.26844783715013, hypergeometricDistribution1.getNumericalMean(), 0.01);
      assertEquals(223, hypergeometricDistribution1.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(383, 0, 2);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(383, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      
      int int0 = hypergeometricDistribution0.inverseCumulativeProbability(0.0);
      assertEquals(0, int0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(383, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      
      double double0 = hypergeometricDistribution0.probability(0);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(383, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      
      Well1024a well1024a0 = new Well1024a((long) 2);
      assertNotNull(well1024a0);
      
      well1024a0.setSeed((long) 383);
      int int1 = hypergeometricDistribution0.solveInverseCumulativeProbability(383, (-1041), 0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(383, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      
      double double1 = hypergeometricDistribution0.cumulativeProbability(281);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.0, double1, 0.01);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(383, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      
      double double2 = hypergeometricDistribution0.cumulativeProbability((-1));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(383, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      
      int int2 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(383, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      
      double double3 = hypergeometricDistribution0.probability(0);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(383, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(284, 284, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(284, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(284, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(2511);
      assertEquals(0.0, double0, 0.01);
      assertEquals(284, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(284, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      
      double double1 = hypergeometricDistribution0.probability(2523);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(284, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(284, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(0, int0);
      assertEquals(284, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(284, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      
      int int1 = hypergeometricDistribution0.sample();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(284, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(284, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      
      double double2 = hypergeometricDistribution0.probability(0);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals(284, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(284, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      
      double double3 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(0.0, double3, 0.01);
      assertEquals(284, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(284, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      assertEquals(284, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(284, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      
      int int2 = 244;
      int int3 = hypergeometricDistribution0.solveInverseCumulativeProbability(0.0, 1457, 3763);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(1458, int3);
      assertEquals(284, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(284, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      
      double double4 = hypergeometricDistribution0.probability(0);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(Double.NaN, double4, 0.01);
      assertEquals(284, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(284, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      
      double double5 = hypergeometricDistribution0.upperCumulativeProbability(244);
      assertEquals(double5, double0, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertEquals(double5, double1, 0.01);
      assertEquals(double5, double3, 0.01);
      assertEquals(0.0, double5, 0.01);
      assertEquals(284, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(284, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      
      MersenneTwister mersenneTwister0 = new MersenneTwister(386);
      assertNotNull(mersenneTwister0);
      
      HypergeometricDistribution hypergeometricDistribution1 = null;
      try {
        hypergeometricDistribution1 = new HypergeometricDistribution(mersenneTwister0, 0, 0, 1044);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 0;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 284, 555, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (555) must be less than or equal to population size (284)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 249;
      int int1 = 2529;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(249, 2529, 2529);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (2,529) must be less than or equal to population size (249)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(223, 223, 223);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(223.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(223, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(223, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(223, hypergeometricDistribution0.getSampleSize());
      
      Well44497a well44497a0 = new Well44497a(223);
      assertNotNull(well44497a0);
      
      HypergeometricDistribution hypergeometricDistribution1 = null;
      try {
        hypergeometricDistribution1 = new HypergeometricDistribution(well44497a0, 461, 955, 955);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (955) must be less than or equal to population size (461)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1375, 666, 666);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(666, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(666, hypergeometricDistribution0.getSampleSize());
      assertEquals(322.58618181818184, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1375, hypergeometricDistribution0.getPopulationSize());
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(85.83191449651737, double0, 0.01);
      assertEquals(666, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(666, hypergeometricDistribution0.getSampleSize());
      assertEquals(322.58618181818184, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1375, hypergeometricDistribution0.getPopulationSize());
      
      double double1 = hypergeometricDistribution0.probability(666);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(666, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(666, hypergeometricDistribution0.getSampleSize());
      assertEquals(322.58618181818184, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1375, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(2456);
      assertNotNull(well19937c0);
      
      int int0 = 1;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 2456, 1, 3975);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (3,975) must be less than or equal to population size (2,456)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2489, 2489, 1436);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1436.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1436, hypergeometricDistribution0.getSampleSize());
      assertEquals(2489, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2489, hypergeometricDistribution0.getPopulationSize());
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1436.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1436, hypergeometricDistribution0.getSampleSize());
      assertEquals(2489, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2489, hypergeometricDistribution0.getPopulationSize());
      
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1436.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1436, hypergeometricDistribution0.getSampleSize());
      assertEquals(2489, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2489, hypergeometricDistribution0.getPopulationSize());
      
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(1436, int0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1436.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1436, hypergeometricDistribution0.getSampleSize());
      assertEquals(2489, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2489, hypergeometricDistribution0.getPopulationSize());
      
      int[] intArray0 = hypergeometricDistribution0.sample(410);
      assertNotNull(intArray0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1436.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1436, hypergeometricDistribution0.getSampleSize());
      assertEquals(2489, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2489, hypergeometricDistribution0.getPopulationSize());
      assertEquals(410, intArray0.length);
      
      double double1 = hypergeometricDistribution0.probability(2489);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1436.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1436, hypergeometricDistribution0.getSampleSize());
      assertEquals(2489, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2489, hypergeometricDistribution0.getPopulationSize());
      
      double double2 = hypergeometricDistribution0.upperCumulativeProbability(219);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(1.0, double2, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1436.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1436, hypergeometricDistribution0.getSampleSize());
      assertEquals(2489, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2489, hypergeometricDistribution0.getPopulationSize());
      
      boolean boolean1 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1436.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1436, hypergeometricDistribution0.getSampleSize());
      assertEquals(2489, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2489, hypergeometricDistribution0.getPopulationSize());
      
      try { 
        hypergeometricDistribution0.inverseCumulativeProbability(2489);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2,489 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int[] intArray0 = new int[0];
      Well19937c well19937c0 = new Well19937c(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 2536, 2536, 978);
      well19937c0.clear();
      hypergeometricDistribution0.solveInverseCumulativeProbability(2536, 2536, 2536);
      well19937c0.setSeed(intArray0);
      hypergeometricDistribution0.solveInverseCumulativeProbability(3872.5907195, 1960, 2536);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.cumulativeProbability((-5950));
      well19937c0.nextBoolean();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.solveInverseCumulativeProbability(978, 978, 2536);
      hypergeometricDistribution0.getNumericalVariance();
      well19937c0.clear();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.getSupportLowerBound();
      well19937c0.clear();
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.isSupportConnected();
      double double0 = hypergeometricDistribution0.probability(2536);
      assertEquals(0.0, double0, 0.01);
      
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.getPopulationSize();
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(978, int0);
      
      double double1 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      hypergeometricDistribution0.isSupportConnected();
      assertEquals(978, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 0;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(383, 0, 2);
      hypergeometricDistribution0.inverseCumulativeProbability(0.0);
      hypergeometricDistribution0.probability(0);
      try { 
        hypergeometricDistribution0.cumulativeProbability(2, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lower endpoint (2) must be less than or equal to upper endpoint (1)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 223;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(223, 223, 223);
      int int1 = (-506);
      hypergeometricDistribution0.cumulativeProbability(223, 2120);
      // Undeclared exception!
      try { 
        hypergeometricDistribution0.sample((-506));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-506)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int int0 = 0;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(284, 284, 0);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.upperCumulativeProbability(840);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getSupportLowerBound();
      // Undeclared exception!
      try { 
        hypergeometricDistribution0.sample((-3019));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-3,019)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int[] intArray0 = new int[4];
      int int0 = 230;
      intArray0[0] = 230;
      intArray0[1] = 197;
      intArray0[2] = 0;
      intArray0[3] = 0;
      Well1024a well1024a0 = new Well1024a(intArray0);
      int int1 = 2264;
      well1024a0.nextGaussian();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 2264, 0, 0);
      // Undeclared exception!
      try { 
        hypergeometricDistribution0.sample((-1429));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1,429)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(1L);
      well19937c0.nextInt(870);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 1274, 1274, 1274);
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.sample(2);
      double double0 = hypergeometricDistribution0.cumulativeProbability((-1));
      assertEquals(0.0, double0, 0.01);
      
      hypergeometricDistribution0.solveInverseCumulativeProbability(1274, 2, (-1));
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.getNumberOfSuccesses();
      double double1 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double1, 0.01);
      
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.getPopulationSize();
      well19937c0.setSeed(1088);
      hypergeometricDistribution0.sample();
      well19937c0.clear();
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.sample(1274);
      hypergeometricDistribution0.cumulativeProbability((-5530), 1);
      double double2 = hypergeometricDistribution0.cumulativeProbability(1274);
      assertEquals(1.0, double2, 0.01);
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(1274, int0);
      
      hypergeometricDistribution0.calculateNumericalVariance();
      double double3 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(1274.0, double3, 0.01);
      
      hypergeometricDistribution0.getPopulationSize();
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      
      hypergeometricDistribution0.getSupportUpperBound();
      int int1 = hypergeometricDistribution0.getSampleSize();
      assertEquals(1274, int1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1138, (-162), 1138);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-162)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 1171, 1171, 131);
      hypergeometricDistribution0.sample();
      well1024a0.nextGaussian();
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(131);
      assertEquals(1.0, double0, 0.01);
      
      well1024a0.setSeed(0L);
      hypergeometricDistribution0.reseedRandomGenerator((-1L));
      double double1 = hypergeometricDistribution0.probability((-1));
      assertEquals(0.0, double1, 0.01);
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(131, int0);
      
      int int1 = hypergeometricDistribution0.getSampleSize();
      assertEquals(131.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(131, int1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2646, 0, 2646);
      hypergeometricDistribution0.cumulativeProbability((-1134));
      assertEquals(2646, hypergeometricDistribution0.getSampleSize());
      assertEquals(2646, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = (-2142);
      intArray0[1] = 841;
      int int0 = (-1558);
      intArray0[2] = (-1558);
      intArray0[3] = 0;
      intArray0[4] = (-1667);
      int int1 = 1157;
      intArray0[5] = 1157;
      intArray0[6] = 1068;
      MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
      mersenneTwister0.nextGaussian();
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, (-1558), 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-1,558)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 1231;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1231, 1231, (-2124));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-2,124)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int[] intArray0 = new int[2];
      int int0 = 480;
      intArray0[0] = 480;
      intArray0[1] = 2525;
      Well44497a well44497a0 = new Well44497a(intArray0);
      well44497a0.nextInt();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1219, 480, 2);
      try { 
        well44497a0.nextLong(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.random.BitsStreamGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 3004, 2, 2);
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(0.0013315579227696406, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      int int0 = 1329;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(0, 0, 1329);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }
}
