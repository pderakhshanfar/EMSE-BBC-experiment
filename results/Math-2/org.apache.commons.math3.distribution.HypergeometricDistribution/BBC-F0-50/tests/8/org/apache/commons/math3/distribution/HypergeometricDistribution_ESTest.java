/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 05:42:22 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1142, 1142, 468);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(468, hypergeometricDistribution0.getSampleSize());
      assertEquals(1142, hypergeometricDistribution0.getPopulationSize());
      assertEquals(468.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1142, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int0 = hypergeometricDistribution0.solveInverseCumulativeProbability(1142, 468, 1);
      assertEquals(468, hypergeometricDistribution0.getSampleSize());
      assertEquals(1142, hypergeometricDistribution0.getPopulationSize());
      assertEquals(468.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1142, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, int0);
      
      int int1 = hypergeometricDistribution0.getSupportUpperBound();
      assertFalse(int1 == int0);
      assertEquals(468, hypergeometricDistribution0.getSampleSize());
      assertEquals(1142, hypergeometricDistribution0.getPopulationSize());
      assertEquals(468.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1142, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(468, int1);
      
      int int2 = hypergeometricDistribution0.sample();
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(468, hypergeometricDistribution0.getSampleSize());
      assertEquals(1142, hypergeometricDistribution0.getPopulationSize());
      assertEquals(468.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1142, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(468, int2);
      
      int[] intArray0 = hypergeometricDistribution0.sample(1);
      assertNotNull(intArray0);
      assertArrayEquals(new int[] {468}, intArray0);
      assertEquals(468, hypergeometricDistribution0.getSampleSize());
      assertEquals(1142, hypergeometricDistribution0.getPopulationSize());
      assertEquals(468.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1142, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, intArray0.length);
      
      int int3 = hypergeometricDistribution0.sample();
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals(468, hypergeometricDistribution0.getSampleSize());
      assertEquals(1142, hypergeometricDistribution0.getPopulationSize());
      assertEquals(468.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1142, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(468, int3);
      
      hypergeometricDistribution0.sample(3327);
      hypergeometricDistribution0.upperCumulativeProbability(3327);
      hypergeometricDistribution0.probability(468);
      hypergeometricDistribution0.cumulativeProbability(3570);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.solveInverseCumulativeProbability((-3201.60131), 10, 362);
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.upperCumulativeProbability(3060);
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.reseedRandomGenerator(468);
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.getSupportUpperBound();
      // Undeclared exception!
      hypergeometricDistribution0.getSupportUpperBound();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1142, 1142, 468);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1142, hypergeometricDistribution0.getPopulationSize());
      assertEquals(468.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1142, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(468, hypergeometricDistribution0.getSampleSize());
      
      int int0 = hypergeometricDistribution0.solveInverseCumulativeProbability(1142, 468, 1);
      assertEquals(1142, hypergeometricDistribution0.getPopulationSize());
      assertEquals(468.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1142, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(468, hypergeometricDistribution0.getSampleSize());
      assertEquals(1, int0);
      
      int int1 = hypergeometricDistribution0.getSupportUpperBound();
      assertFalse(int1 == int0);
      assertEquals(1142, hypergeometricDistribution0.getPopulationSize());
      assertEquals(468.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1142, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(468, hypergeometricDistribution0.getSampleSize());
      assertEquals(468, int1);
      
      int int2 = hypergeometricDistribution0.sample();
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1142, hypergeometricDistribution0.getPopulationSize());
      assertEquals(468.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1142, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(468, hypergeometricDistribution0.getSampleSize());
      assertEquals(468, int2);
      
      int int3 = hypergeometricDistribution0.sample();
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals(1142, hypergeometricDistribution0.getPopulationSize());
      assertEquals(468.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1142, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(468, hypergeometricDistribution0.getSampleSize());
      assertEquals(468, int3);
      
      hypergeometricDistribution0.sample(3327);
      hypergeometricDistribution0.upperCumulativeProbability(3327);
      hypergeometricDistribution0.probability(468);
      hypergeometricDistribution0.cumulativeProbability(3570);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.solveInverseCumulativeProbability((-3201.60131), 10, 362);
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.upperCumulativeProbability(3060);
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.reseedRandomGenerator(468);
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.cumulativeProbability(2096);
      hypergeometricDistribution0.upperCumulativeProbability(4353);
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.getSampleSize();
      // Undeclared exception!
      hypergeometricDistribution0.getSupportLowerBound();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(Integer.MAX_VALUE, Integer.MAX_VALUE, 1154);
      assertNotNull(hypergeometricDistribution0);
      assertEquals((-5.37373125803365E-7), hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(Integer.MAX_VALUE, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1154, hypergeometricDistribution0.getSampleSize());
      assertEquals(Integer.MAX_VALUE, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double0 = hypergeometricDistribution0.probability(Integer.MAX_VALUE);
      assertEquals((-5.37373125803365E-7), hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(Integer.MAX_VALUE, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1154, hypergeometricDistribution0.getSampleSize());
      assertEquals(Integer.MAX_VALUE, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, double0, 0.01);
      
      int int0 = hypergeometricDistribution0.solveInverseCumulativeProbability(Integer.MAX_VALUE, 452, 2104);
      assertEquals((-5.37373125803365E-7), hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(Integer.MAX_VALUE, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1154, hypergeometricDistribution0.getSampleSize());
      assertEquals(Integer.MAX_VALUE, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2104, int0);
      
      int int1 = hypergeometricDistribution0.sample();
      assertFalse(int1 == int0);
      assertEquals((-5.37373125803365E-7), hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(Integer.MAX_VALUE, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1154, hypergeometricDistribution0.getSampleSize());
      assertEquals(Integer.MAX_VALUE, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1154, int1);
      
      double double1 = hypergeometricDistribution0.cumulativeProbability((-7711));
      assertEquals(double1, double0, 0.01);
      assertEquals((-5.37373125803365E-7), hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(Integer.MAX_VALUE, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1154, hypergeometricDistribution0.getSampleSize());
      assertEquals(Integer.MAX_VALUE, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, double1, 0.01);
      
      double double2 = hypergeometricDistribution0.probability(Integer.MAX_VALUE);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals((-5.37373125803365E-7), hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(Integer.MAX_VALUE, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1154, hypergeometricDistribution0.getSampleSize());
      assertEquals(Integer.MAX_VALUE, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, double2, 0.01);
      
      double double3 = hypergeometricDistribution0.cumulativeProbability((-527), 2104);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals((-5.37373125803365E-7), hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(Integer.MAX_VALUE, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1154, hypergeometricDistribution0.getSampleSize());
      assertEquals(Integer.MAX_VALUE, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1.0, double3, 0.01);
      
      int int2 = hypergeometricDistribution0.getSupportUpperBound();
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-5.37373125803365E-7), hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(Integer.MAX_VALUE, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1154, hypergeometricDistribution0.getSampleSize());
      assertEquals(Integer.MAX_VALUE, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1154, int2);
      
      int int3 = hypergeometricDistribution0.getSupportUpperBound();
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals((-5.37373125803365E-7), hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(Integer.MAX_VALUE, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1154, hypergeometricDistribution0.getSampleSize());
      assertEquals(Integer.MAX_VALUE, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1154, int3);
      
      int int4 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertEquals((-5.37373125803365E-7), hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(Integer.MAX_VALUE, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1154, hypergeometricDistribution0.getSampleSize());
      assertEquals(Integer.MAX_VALUE, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(Integer.MAX_VALUE, int4);
      
      int int5 = hypergeometricDistribution0.getSampleSize();
      assertTrue(int5 == int3);
      assertFalse(int5 == int0);
      assertTrue(int5 == int2);
      assertTrue(int5 == int1);
      assertFalse(int5 == int4);
      assertEquals((-5.37373125803365E-7), hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(Integer.MAX_VALUE, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1154, hypergeometricDistribution0.getSampleSize());
      assertEquals(Integer.MAX_VALUE, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1154, int5);
      
      int int6 = hypergeometricDistribution0.getSupportUpperBound();
      assertTrue(int6 == int5);
      assertTrue(int6 == int3);
      assertTrue(int6 == int2);
      assertFalse(int6 == int4);
      assertTrue(int6 == int1);
      assertFalse(int6 == int0);
      assertEquals((-5.37373125803365E-7), hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(Integer.MAX_VALUE, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1154, hypergeometricDistribution0.getSampleSize());
      assertEquals(Integer.MAX_VALUE, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1154, int6);
      
      double double4 = hypergeometricDistribution0.probability(1154);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals((-5.37373125803365E-7), hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(Integer.MAX_VALUE, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1154, hypergeometricDistribution0.getSampleSize());
      assertEquals(Integer.MAX_VALUE, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(Double.NaN, double4, 0.01);
      
      double double5 = hypergeometricDistribution0.cumulativeProbability(1154);
      assertNotEquals(double5, double1, 0.01);
      assertEquals(double5, double3, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertEquals((-5.37373125803365E-7), hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(Integer.MAX_VALUE, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1154, hypergeometricDistribution0.getSampleSize());
      assertEquals(Integer.MAX_VALUE, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1.0, double5, 0.01);
      
      int int7 = hypergeometricDistribution0.getSampleSize();
      assertTrue(int7 == int6);
      assertFalse(int7 == int0);
      assertTrue(int7 == int1);
      assertTrue(int7 == int3);
      assertTrue(int7 == int5);
      assertTrue(int7 == int2);
      assertFalse(int7 == int4);
      assertEquals((-5.37373125803365E-7), hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(Integer.MAX_VALUE, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1154, hypergeometricDistribution0.getSampleSize());
      assertEquals(Integer.MAX_VALUE, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1154, int7);
      
      double double6 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(double6, double2, 0.01);
      assertEquals(double6, double1, 0.01);
      assertEquals(double6, double0, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertEquals((-5.37373125803365E-7), hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(Integer.MAX_VALUE, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1154, hypergeometricDistribution0.getSampleSize());
      assertEquals(Integer.MAX_VALUE, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals((-5.37373125803365E-7), double6, 0.01);
      
      int int8 = hypergeometricDistribution0.getPopulationSize();
      assertTrue(int8 == int4);
      assertFalse(int8 == int3);
      assertFalse(int8 == int5);
      assertFalse(int8 == int2);
      assertFalse(int8 == int0);
      assertFalse(int8 == int7);
      assertFalse(int8 == int6);
      assertFalse(int8 == int1);
      assertEquals((-5.37373125803365E-7), hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(Integer.MAX_VALUE, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1154, hypergeometricDistribution0.getSampleSize());
      assertEquals(Integer.MAX_VALUE, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(Integer.MAX_VALUE, int8);
      
      double double7 = hypergeometricDistribution0.probability(1154);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertEquals(double7, double4, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertEquals((-5.37373125803365E-7), hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(Integer.MAX_VALUE, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1154, hypergeometricDistribution0.getSampleSize());
      assertEquals(Integer.MAX_VALUE, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(Double.NaN, double7, 0.01);
      
      Random.setNextRandom(1198);
      int int9 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertFalse(int9 == int5);
      assertFalse(int9 == int7);
      assertTrue(int9 == int4);
      assertFalse(int9 == int1);
      assertTrue(int9 == int8);
      assertFalse(int9 == int3);
      assertFalse(int9 == int6);
      assertFalse(int9 == int0);
      assertFalse(int9 == int2);
      assertEquals((-5.37373125803365E-7), hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(Integer.MAX_VALUE, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1154, hypergeometricDistribution0.getSampleSize());
      assertEquals(Integer.MAX_VALUE, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(Integer.MAX_VALUE, int9);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1142, 1142, 468);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1142, hypergeometricDistribution0.getPopulationSize());
      assertEquals(468.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(468, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1142, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int0 = hypergeometricDistribution0.solveInverseCumulativeProbability(1142, 468, 1);
      assertEquals(1142, hypergeometricDistribution0.getPopulationSize());
      assertEquals(468.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(468, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1142, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, int0);
      
      int int1 = hypergeometricDistribution0.getSupportUpperBound();
      assertFalse(int1 == int0);
      assertEquals(1142, hypergeometricDistribution0.getPopulationSize());
      assertEquals(468.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(468, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1142, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(468, int1);
      
      int int2 = hypergeometricDistribution0.sample();
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1142, hypergeometricDistribution0.getPopulationSize());
      assertEquals(468.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(468, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1142, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(468, int2);
      
      int int3 = hypergeometricDistribution0.sample();
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(1142, hypergeometricDistribution0.getPopulationSize());
      assertEquals(468.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(468, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1142, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(468, int3);
      
      hypergeometricDistribution0.sample(3327);
      hypergeometricDistribution0.upperCumulativeProbability(3327);
      hypergeometricDistribution0.probability(468);
      hypergeometricDistribution0.cumulativeProbability(3570);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.solveInverseCumulativeProbability((-3201.60131), 10, 362);
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.upperCumulativeProbability(3060);
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.reseedRandomGenerator(468);
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.cumulativeProbability(2096);
      hypergeometricDistribution0.upperCumulativeProbability(4353);
      hypergeometricDistribution0.getSampleSize();
      // Undeclared exception!
      hypergeometricDistribution0.getSampleSize();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 1046;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1698, 1046, 1046);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1046, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1046, hypergeometricDistribution0.getSampleSize());
      assertEquals(644.3557126030624, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1698, hypergeometricDistribution0.getPopulationSize());
      
      int int1 = hypergeometricDistribution0.getSampleSize();
      assertTrue(int1 == int0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1046, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1046, hypergeometricDistribution0.getSampleSize());
      assertEquals(644.3557126030624, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1698, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1046, int1);
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(580);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1046, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1046, hypergeometricDistribution0.getSampleSize());
      assertEquals(644.3557126030624, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1698, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.8975892634674063E-11, double0, 0.01);
      
      double double1 = hypergeometricDistribution0.upperCumulativeProbability(458);
      assertNotEquals(double1, double0, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1046, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1046, hypergeometricDistribution0.getSampleSize());
      assertEquals(644.3557126030624, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1698, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.0, double1, 0.01);
      
      double double2 = hypergeometricDistribution0.probability(615);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1046, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1046, hypergeometricDistribution0.getSampleSize());
      assertEquals(644.3557126030624, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1698, hypergeometricDistribution0.getPopulationSize());
      assertEquals(4.315593473405015E-4, double2, 0.01);
      
      int int2 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1046, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1046, hypergeometricDistribution0.getSampleSize());
      assertEquals(644.3557126030624, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1698, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1046, int2);
      
      double double3 = hypergeometricDistribution0.getNumericalVariance();
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1046, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1046, hypergeometricDistribution0.getSampleSize());
      assertEquals(644.3557126030624, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1698, hypergeometricDistribution0.getPopulationSize());
      assertEquals(95.06077407106292, double3, 0.01);
      
      int int3 = hypergeometricDistribution0.getSampleSize();
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1046, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1046, hypergeometricDistribution0.getSampleSize());
      assertEquals(644.3557126030624, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1698, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1046, int3);
      
      int int4 = 579;
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability(int4);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2824, 1053, 1145);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(426.9422804532578, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2824, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1053, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1145, hypergeometricDistribution0.getSampleSize());
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(426.9422804532578, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2824, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1053, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1145, hypergeometricDistribution0.getSampleSize());
      assertEquals(159.24391725198996, double0, 0.01);
      
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(915);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4300, 1063, 1063);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1063, hypergeometricDistribution0.getSampleSize());
      assertEquals(262.783488372093, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(4300, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1063, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(1063, hypergeometricDistribution0.getSampleSize());
      assertEquals(262.783488372093, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(4300, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1063, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(148.95242276853597, double0, 0.01);
      
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability(3);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1222, 843, 843);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1222, hypergeometricDistribution0.getPopulationSize());
      assertEquals(581.5458265139116, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(843, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(843, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(843);
      assertEquals(1222, hypergeometricDistribution0.getPopulationSize());
      assertEquals(581.5458265139116, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(843, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(843, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, double0, 0.01);
      
      double double1 = hypergeometricDistribution0.upperCumulativeProbability(1222);
      assertEquals(double1, double0, 0.01);
      assertEquals(1222, hypergeometricDistribution0.getPopulationSize());
      assertEquals(581.5458265139116, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(843, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(843, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, double1, 0.01);
      
      double double2 = hypergeometricDistribution0.getNumericalMean();
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(1222, hypergeometricDistribution0.getPopulationSize());
      assertEquals(581.5458265139116, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(843, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(843, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(581.5458265139116, double2, 0.01);
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(1222, hypergeometricDistribution0.getPopulationSize());
      assertEquals(581.5458265139116, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(843, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(843, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(464, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(353, 0, 353);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(353, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(353, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      Well1024a well1024a0 = new Well1024a((long) 0);
      assertNotNull(well1024a0);
      
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(well1024a0, 2159, 1046, 484);
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      assertNotNull(hypergeometricDistribution1);
      assertEquals(1046, hypergeometricDistribution1.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution1.isSupportConnected());
      assertEquals(2159, hypergeometricDistribution1.getPopulationSize());
      assertEquals(484, hypergeometricDistribution1.getSampleSize());
      assertEquals(234.49004168596574, hypergeometricDistribution1.getNumericalMean(), 0.01);
      
      double double0 = hypergeometricDistribution1.upperCumulativeProbability(837);
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      assertEquals(1046, hypergeometricDistribution1.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution1.isSupportConnected());
      assertEquals(2159, hypergeometricDistribution1.getPopulationSize());
      assertEquals(484, hypergeometricDistribution1.getSampleSize());
      assertEquals(234.49004168596574, hypergeometricDistribution1.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertNotSame(hypergeometricDistribution1, hypergeometricDistribution0);
      
      double double1 = hypergeometricDistribution1.cumulativeProbability(967);
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1046, hypergeometricDistribution1.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution1.isSupportConnected());
      assertEquals(2159, hypergeometricDistribution1.getPopulationSize());
      assertEquals(484, hypergeometricDistribution1.getSampleSize());
      assertEquals(234.49004168596574, hypergeometricDistribution1.getNumericalMean(), 0.01);
      assertEquals(1.0, double1, 0.01);
      assertNotSame(hypergeometricDistribution1, hypergeometricDistribution0);
      
      double double2 = hypergeometricDistribution1.getNumericalVariance();
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(1046, hypergeometricDistribution1.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution1.isSupportConnected());
      assertEquals(2159, hypergeometricDistribution1.getPopulationSize());
      assertEquals(484, hypergeometricDistribution1.getSampleSize());
      assertEquals(234.49004168596574, hypergeometricDistribution1.getNumericalMean(), 0.01);
      assertEquals(93.82753284075922, double2, 0.01);
      assertNotSame(hypergeometricDistribution1, hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertFalse(hypergeometricDistribution0.equals((Object)hypergeometricDistribution1));
      assertEquals(353, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(353, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, int0);
      assertNotSame(hypergeometricDistribution0, hypergeometricDistribution1);
      
      double double3 = hypergeometricDistribution0.getNumericalVariance();
      assertFalse(hypergeometricDistribution0.equals((Object)hypergeometricDistribution1));
      assertEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(353, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(353, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double3, 0.01);
      assertNotSame(hypergeometricDistribution0, hypergeometricDistribution1);
      
      int int1 = hypergeometricDistribution0.getSampleSize();
      assertFalse(hypergeometricDistribution0.equals((Object)hypergeometricDistribution1));
      assertFalse(int1 == int0);
      assertEquals(353, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(353, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(353, int1);
      assertNotSame(hypergeometricDistribution0, hypergeometricDistribution1);
      
      int int2 = 285;
      double double4 = hypergeometricDistribution1.upperCumulativeProbability(285);
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      assertNotEquals(double4, double2, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(1046, hypergeometricDistribution1.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution1.isSupportConnected());
      assertEquals(2159, hypergeometricDistribution1.getPopulationSize());
      assertEquals(484, hypergeometricDistribution1.getSampleSize());
      assertEquals(234.49004168596574, hypergeometricDistribution1.getNumericalMean(), 0.01);
      assertEquals(1.166415974615186E-7, double4, 0.01);
      assertNotSame(hypergeometricDistribution1, hypergeometricDistribution0);
      
      int int3 = hypergeometricDistribution0.getSampleSize();
      assertFalse(hypergeometricDistribution0.equals((Object)hypergeometricDistribution1));
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(353, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(353, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(353, int3);
      assertNotSame(hypergeometricDistribution0, hypergeometricDistribution1);
      
      HypergeometricDistribution hypergeometricDistribution2 = null;
      try {
        hypergeometricDistribution2 = new HypergeometricDistribution(well1024a0, 1046, 285, 2159);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (2,159) must be less than or equal to population size (1,046)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1698, 1046, 1046);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(644.3557126030624, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1046, hypergeometricDistribution0.getSampleSize());
      assertEquals(1698, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1046, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(644.3557126030624, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1046, hypergeometricDistribution0.getSampleSize());
      assertEquals(1698, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1046, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1046, int0);
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(580);
      assertEquals(644.3557126030624, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1046, hypergeometricDistribution0.getSampleSize());
      assertEquals(1698, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1046, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1.8975892634674063E-11, double0, 0.01);
      
      double double1 = hypergeometricDistribution0.probability(615);
      assertEquals(double1, double0, 0.01);
      assertEquals(644.3557126030624, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1046, hypergeometricDistribution0.getSampleSize());
      assertEquals(1698, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1046, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(4.315593473405015E-4, double1, 0.01);
      
      int int1 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertTrue(int1 == int0);
      assertEquals(644.3557126030624, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1046, hypergeometricDistribution0.getSampleSize());
      assertEquals(1698, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1046, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1046, int1);
      
      double double2 = hypergeometricDistribution0.getNumericalVariance();
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(644.3557126030624, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1046, hypergeometricDistribution0.getSampleSize());
      assertEquals(1698, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1046, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(95.06077407106292, double2, 0.01);
      
      int int2 = hypergeometricDistribution0.getSampleSize();
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(644.3557126030624, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1046, hypergeometricDistribution0.getSampleSize());
      assertEquals(1698, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1046, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1046, int2);
      
      double double3 = hypergeometricDistribution0.upperCumulativeProbability(579);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(644.3557126030624, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1046, hypergeometricDistribution0.getSampleSize());
      assertEquals(1698, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1046, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.9999999999955052, double3, 0.01);
      
      int int3 = hypergeometricDistribution0.getSampleSize();
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertEquals(644.3557126030624, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1046, hypergeometricDistribution0.getSampleSize());
      assertEquals(1698, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1046, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1046, int3);
      
      double double4 = hypergeometricDistribution0.probability(1046);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(644.3557126030624, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1046, hypergeometricDistribution0.getSampleSize());
      assertEquals(1698, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1046, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, double4, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(353, 0, 353);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(353, hypergeometricDistribution0.getPopulationSize());
      assertEquals(353, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(353, hypergeometricDistribution0.getPopulationSize());
      assertEquals(353, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, int0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(353, hypergeometricDistribution0.getPopulationSize());
      assertEquals(353, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
      
      double double1 = hypergeometricDistribution0.cumulativeProbability(0);
      assertEquals(double1, double0, 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(353, hypergeometricDistribution0.getPopulationSize());
      assertEquals(353, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double1, 0.01);
      
      int int1 = hypergeometricDistribution0.getPopulationSize();
      assertFalse(int1 == int0);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(353, hypergeometricDistribution0.getPopulationSize());
      assertEquals(353, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(353, int1);
      
      double double2 = hypergeometricDistribution0.getNumericalMean();
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(353, hypergeometricDistribution0.getPopulationSize());
      assertEquals(353, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double2, 0.01);
      
      int int2 = hypergeometricDistribution0.getSupportUpperBound();
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(353, hypergeometricDistribution0.getPopulationSize());
      assertEquals(353, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, int2);
      
      double double3 = hypergeometricDistribution0.cumulativeProbability(353);
      assertEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(353, hypergeometricDistribution0.getPopulationSize());
      assertEquals(353, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double3, 0.01);
      
      double double4 = hypergeometricDistribution0.calculateNumericalVariance();
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(double4, double2, 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(353, hypergeometricDistribution0.getPopulationSize());
      assertEquals(353, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double4, 0.01);
      
      double double5 = hypergeometricDistribution0.upperCumulativeProbability(1489);
      assertNotEquals(double5, double1, 0.01);
      assertEquals(double5, double4, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertEquals(double5, double2, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(353, hypergeometricDistribution0.getPopulationSize());
      assertEquals(353, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double5, 0.01);
      
      double double6 = hypergeometricDistribution0.getNumericalVariance();
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertEquals(double6, double5, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertEquals(double6, double2, 0.01);
      assertEquals(double6, double4, 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(353, hypergeometricDistribution0.getPopulationSize());
      assertEquals(353, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double6, 0.01);
      
      int int3 = hypergeometricDistribution0.getSupportUpperBound();
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(353, hypergeometricDistribution0.getPopulationSize());
      assertEquals(353, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, int3);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Well512a well512a0 = new Well512a(0L);
      assertNotNull(well512a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 1380, 2758, 305);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (2,758) must be less than or equal to population size (1,380)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(353, 0, 353);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(353, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(353, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(353, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(353, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, int0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertEquals(353, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(353, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.0, double0, 0.01);
      
      double double1 = hypergeometricDistribution0.cumulativeProbability(0);
      assertEquals(double1, double0, 0.01);
      assertEquals(353, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(353, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.0, double1, 0.01);
      
      int int1 = hypergeometricDistribution0.getPopulationSize();
      assertFalse(int1 == int0);
      assertEquals(353, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(353, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(353, int1);
      
      double double2 = hypergeometricDistribution0.getNumericalMean();
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(353, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(353, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double2, 0.01);
      
      int int2 = hypergeometricDistribution0.getSupportUpperBound();
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(353, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(353, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, int2);
      
      int int3 = hypergeometricDistribution0.getSampleSize();
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals(353, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(353, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(353, int3);
      
      double double3 = hypergeometricDistribution0.cumulativeProbability(0);
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(353, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(353, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.0, double3, 0.01);
      
      double double4 = hypergeometricDistribution0.probability(1);
      assertEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertEquals(353, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(353, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double4, 0.01);
      
      HypergeometricDistribution hypergeometricDistribution1 = null;
      try {
        hypergeometricDistribution1 = new HypergeometricDistribution(353, 0, 1236);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (1,236) must be less than or equal to population size (353)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      assertNotNull(well44497a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1334, 1255, 1255);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1334, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1180.6784107946028, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1255, hypergeometricDistribution0.getSampleSize());
      assertEquals(1255, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(1334, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1180.6784107946028, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1255, hypergeometricDistribution0.getSampleSize());
      assertEquals(1255, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1334, int0);
      
      int int1 = hypergeometricDistribution0.inverseCumulativeProbability(0.0);
      assertFalse(int1 == int0);
      assertEquals(1334, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1180.6784107946028, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1255, hypergeometricDistribution0.getSampleSize());
      assertEquals(1255, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1176, int1);
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(1334, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1180.6784107946028, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1255, hypergeometricDistribution0.getSampleSize());
      assertEquals(1255, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1180.6784107946028, double0, 0.01);
      
      int int2 = hypergeometricDistribution0.getSupportUpperBound();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1334, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1180.6784107946028, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1255, hypergeometricDistribution0.getSampleSize());
      assertEquals(1255, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1255, int2);
      
      int int3 = hypergeometricDistribution0.getSampleSize();
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(1334, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1180.6784107946028, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1255, hypergeometricDistribution0.getSampleSize());
      assertEquals(1255, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1255, int3);
      
      double double1 = hypergeometricDistribution0.cumulativeProbability(1255);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1334, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1180.6784107946028, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1255, hypergeometricDistribution0.getSampleSize());
      assertEquals(1255, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1.0, double1, 0.01);
      
      double double2 = hypergeometricDistribution0.probability(1255);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(1334, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1180.6784107946028, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1255, hypergeometricDistribution0.getSampleSize());
      assertEquals(1255, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1.2236203799306477E-129, double2, 0.01);
      
      int int4 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertFalse(int4 == int0);
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      assertFalse(int4 == int1);
      assertEquals(1334, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1180.6784107946028, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1255, hypergeometricDistribution0.getSampleSize());
      assertEquals(1255, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1255, int4);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 1044;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1044, 2736, 2736);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (2,736) must be less than or equal to population size (1,044)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 1698;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(546, 546, 1698);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (1,698) must be less than or equal to population size (546)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(353, 0, 353);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(353, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(353, hypergeometricDistribution0.getPopulationSize());
      
      double double0 = hypergeometricDistribution0.probability(0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(353, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(353, hypergeometricDistribution0.getPopulationSize());
      assertEquals(Double.NaN, double0, 0.01);
      
      int int0 = hypergeometricDistribution0.sample();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(353, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(353, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, int0);
      
      Well1024a well1024a0 = new Well1024a(688);
      assertNotNull(well1024a0);
      
      HypergeometricDistribution hypergeometricDistribution1 = null;
      try {
        hypergeometricDistribution1 = new HypergeometricDistribution(well1024a0, 0, 0, 550);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      assertNotNull(well19937c0);
      
      double double0 = well19937c0.nextDouble();
      assertEquals(0.9026297667469598, double0, 0.01);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 1399, 1321, 2);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1399, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.8884917798427447, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1321, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte) (-74);
      well19937c0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)110, (byte)115}, byteArray0);
      assertEquals(2, byteArray0.length);
      
      double double1 = hypergeometricDistribution0.cumulativeProbability(2, 1321);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1399, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.8884917798427447, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1321, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double1, 0.01);
      
      double double2 = hypergeometricDistribution0.probability(1399);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(1399, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.8884917798427447, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1321, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double2, 0.01);
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(1399, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.8884917798427447, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1321, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(2, int0);
      
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertEquals(1399, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.8884917798427447, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1321, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertTrue(boolean0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 2;
      intArray0[1] = 0;
      intArray0[2] = (int) (byte)110;
      intArray0[3] = (int) (byte) (-74);
      intArray0[4] = (int) (byte)75;
      intArray0[5] = 1321;
      intArray0[6] = (int) (byte) (-74);
      intArray0[7] = (int) (byte)75;
      well19937c0.setSeed(intArray0);
      assertArrayEquals(new int[] {2, 0, 110, (-74), 75, 1321, (-74), 75}, intArray0);
      assertEquals(8, intArray0.length);
      
      double double3 = hypergeometricDistribution0.getNumericalVariance();
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(1399, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.8884917798427447, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1321, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.10521586299755524, double3, 0.01);
      
      double double4 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(1399, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.8884917798427447, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1321, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.10521586299755524, double4, 0.01);
      
      boolean boolean1 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean1 == boolean0);
      assertEquals(1399, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.8884917798427447, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1321, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertTrue(boolean1);
      
      double double5 = hypergeometricDistribution0.getNumericalVariance();
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertEquals(double5, double4, 0.01);
      assertEquals(double5, double3, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertEquals(1399, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.8884917798427447, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1321, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.10521586299755524, double5, 0.01);
      
      boolean boolean2 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(1399, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.8884917798427447, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1321, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertTrue(boolean2);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 1044;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1698, 1044, 1044);
      int int1 = 0;
      int int2 = 615;
      // Undeclared exception!
      hypergeometricDistribution0.sample(615);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      well44497a0.nextFloat();
      well44497a0.nextFloat();
      well44497a0.nextFloat();
      int int0 = 0;
      well44497a0.nextBoolean();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1446, 0, 1296);
      hypergeometricDistribution0.sample();
      well44497a0.nextLong(1269L);
      hypergeometricDistribution0.cumulativeProbability((-2695), 1446);
      // Undeclared exception!
      try { 
        hypergeometricDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      long long0 = 2891L;
      Well512a well512a0 = new Well512a(2891L);
      int int0 = 3456;
      int int1 = 0;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 3456, 3456, 0);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.sample(1);
      hypergeometricDistribution0.reseedRandomGenerator(0);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.solveInverseCumulativeProbability(0, 3456, 0);
      int[] intArray0 = new int[6];
      intArray0[0] = 3456;
      intArray0[1] = 0;
      intArray0[2] = 0;
      try { 
        well512a0.nextLong((long) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.random.BitsStreamGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 2, 2, 2);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getPopulationSize();
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(2.0, double0, 0.01);
      
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getSupportLowerBound();
      double double1 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double1, 0.01);
      
      double double2 = hypergeometricDistribution0.cumulativeProbability(0);
      assertEquals(0.0, double2, 0.01);
      
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.inverseCumulativeProbability(0.0);
      hypergeometricDistribution0.solveInverseCumulativeProbability(1420.0, 2, 2);
      double double3 = hypergeometricDistribution0.probability(0);
      assertEquals(0.0, double3, 0.01);
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(353, 0, 353);
      hypergeometricDistribution0.sample();
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(0);
      hypergeometricDistribution0.cumulativeProbability(0);
      int int0 = hypergeometricDistribution0.getPopulationSize();
      double double1 = hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.getSupportUpperBound();
      int int1 = hypergeometricDistribution0.getSampleSize();
      assertTrue(int1 == int0);
      
      double double2 = hypergeometricDistribution0.cumulativeProbability(0);
      assertEquals(double2, double0, 0.01);
      
      double double3 = hypergeometricDistribution0.probability(1);
      assertEquals(double3, double1, 0.01);
      
      int int2 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1469, 1469, 0);
      hypergeometricDistribution0.cumulativeProbability((-1));
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getSampleSize();
      int int0 = 559;
      try { 
        hypergeometricDistribution0.cumulativeProbability(899, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lower endpoint (899) must be less than or equal to upper endpoint (0)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 4350;
      int int1 = (-730);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(4350, (-730), (-1581));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-730)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 1217, 0, (-1318));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1,318)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(1986);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 1986, 1986, 1986);
      well19937c0.nextInt();
      well19937c0.nextLong(692L);
      hypergeometricDistribution0.probability(1166);
      well19937c0.setSeed(1166);
      double double0 = hypergeometricDistribution0.cumulativeProbability((-1739));
      assertEquals(0.0, double0, 0.01);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1166;
      hypergeometricDistribution0.sample();
      well19937c0.setSeed(intArray0);
      double double1 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double1, 0.01);
      
      double double2 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertEquals(1.0, double2, 0.01);
      
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.probability(1166);
      hypergeometricDistribution0.getSupportUpperBound();
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(1986.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1986, int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((-193), (-193), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-193)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = 758;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(758, 758, 758);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.inverseCumulativeProbability(0.125);
      try { 
        hypergeometricDistribution0.inverseCumulativeProbability((-2802.6));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,802.6 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom((-2773L));
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 0, 2673, 2673);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Well512a well512a0 = new Well512a(0L);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 55, 55, 55);
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      assertEquals(55.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(13, 0, 0);
      double double0 = hypergeometricDistribution0.cumulativeProbability(0);
      assertEquals(1.0, double0, 0.01);
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, int0);
      assertEquals(13, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 491;
      int int0 = 647;
      intArray0[2] = 647;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = (-919);
      int int1 = (-207);
      intArray0[6] = (-207);
      intArray0[7] = 890;
      intArray0[8] = (-3824);
      Well44497b well44497b0 = new Well44497b(intArray0);
      int int2 = 0;
      well44497b0.nextDouble();
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 0, 0, 1009);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }
}
