/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 20:41:24 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1352, 12, 12);
      assertEquals(1352, hypergeometricDistribution0.getPopulationSize());
      assertEquals(12, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.10650887573964497, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(12, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertEquals(1.0, double0, 0.01);
      assertEquals(1352, hypergeometricDistribution0.getPopulationSize());
      assertEquals(12, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.10650887573964497, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(12, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1352, 12, 12);
      assertEquals(0.10650887573964497, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(12, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(12, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1352, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(12);
      assertEquals(1.0, double0, 0.01);
      assertEquals(0.10650887573964497, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(12, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(12, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1352, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1352, 12, 12);
      assertEquals(0.10650887573964497, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(12, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(12, hypergeometricDistribution0.getSampleSize());
      assertEquals(1352, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(0);
      assertEquals(0.8981447489427924, double0, 0.01);
      assertEquals(0.10650887573964497, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(12, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(12, hypergeometricDistribution0.getSampleSize());
      assertEquals(1352, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[1];
      MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
      assertArrayEquals(new int[] {0}, intArray0);
      assertEquals(1, intArray0.length);
      assertNotNull(mersenneTwister0);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 118, 1252, 1252);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (1,252) must be less than or equal to population size (118)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1722, 0, 1722);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1722, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1722, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(0, int0);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1722, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1722, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[4];
      Well1024a well1024a0 = new Well1024a(intArray0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertNotNull(well1024a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 2140, 12, 485);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(2140, hypergeometricDistribution0.getPopulationSize());
      assertEquals(485, hypergeometricDistribution0.getSampleSize());
      assertEquals(2.7196261682242993, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(12, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(12, int0);
      assertArrayEquals(new int[] {0, 0, 0, 0}, intArray0);
      assertEquals(4, intArray0.length);
      assertEquals(2140, hypergeometricDistribution0.getPopulationSize());
      assertEquals(485, hypergeometricDistribution0.getSampleSize());
      assertEquals(2.7196261682242993, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(12, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1352, 12, 12);
      assertEquals(0.10650887573964497, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(12, hypergeometricDistribution0.getSampleSize());
      assertEquals(1352, hypergeometricDistribution0.getPopulationSize());
      assertEquals(12, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(0, int0);
      assertEquals(0.10650887573964497, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(12, hypergeometricDistribution0.getSampleSize());
      assertEquals(1352, hypergeometricDistribution0.getPopulationSize());
      assertEquals(12, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(727, 389, 389);
      assertEquals(727, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(389, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(208.14442916093535, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(389, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(51, int0);
      assertEquals(727, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(389, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(208.14442916093535, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(389, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1221, 953, 0);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(953, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1221, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(0, int0);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(953, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1221, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(897, 897, 897);
      assertEquals(897, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(897, hypergeometricDistribution0.getSampleSize());
      assertEquals(897, hypergeometricDistribution0.getPopulationSize());
      assertEquals(897.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      assertEquals(897, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(897, hypergeometricDistribution0.getSampleSize());
      assertEquals(897, hypergeometricDistribution0.getPopulationSize());
      assertEquals(897.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1722, 0, 1722);
      assertEquals(1722, hypergeometricDistribution0.getSampleSize());
      assertEquals(1722, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1722, hypergeometricDistribution0.getSampleSize());
      assertEquals(1722, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(897, 897, 897);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(897, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(897.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(897, hypergeometricDistribution0.getPopulationSize());
      assertEquals(897, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(897.0, double0, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(897, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(897.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(897, hypergeometricDistribution0.getPopulationSize());
      assertEquals(897, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[3];
      Well1024a well1024a0 = new Well1024a(intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertNotNull(well1024a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 187, 0, 187);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(187, hypergeometricDistribution0.getSampleSize());
      assertEquals(187, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertEquals(187, hypergeometricDistribution0.getSampleSize());
      assertEquals(187, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1221, 953, 0);
      assertEquals(953, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1221, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.cumulativeProbability((-1502));
      assertEquals(0.0, double0, 0.01);
      assertEquals(953, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1221, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1722, 0, 1722);
      assertEquals(1722, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1722, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1722, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1722, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(727, 389, 389);
      assertEquals(208.14442916093535, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(727, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(389, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(389, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(45.05335744287043, double0, 0.01);
      assertEquals(208.14442916093535, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(727, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(389, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(389, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a();
      assertNotNull(well19937a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 0, 0, (-1421));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(343, 343, 689);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (689) must be less than or equal to population size (343)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(727, 389, 389);
      assertEquals(208.14442916093535, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(727, hypergeometricDistribution0.getPopulationSize());
      assertEquals(389, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(389, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.probability(212);
      assertEquals(0.05038006221274706, double0, 0.01);
      assertEquals(208.14442916093535, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(727, hypergeometricDistribution0.getPopulationSize());
      assertEquals(389, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(389, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1352, 12, 12);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.10650887573964497, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(12, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1352, hypergeometricDistribution0.getPopulationSize());
      assertEquals(12, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(1352, int0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.10650887573964497, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(12, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1352, hypergeometricDistribution0.getPopulationSize());
      assertEquals(12, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1352, 12, 12);
      assertEquals(0.10650887573964497, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1352, hypergeometricDistribution0.getPopulationSize());
      assertEquals(12, hypergeometricDistribution0.getSampleSize());
      assertEquals(12, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(12, int0);
      assertEquals(0.10650887573964497, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1352, hypergeometricDistribution0.getPopulationSize());
      assertEquals(12, hypergeometricDistribution0.getSampleSize());
      assertEquals(12, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1352, 12, 12);
      assertEquals(12, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1352, hypergeometricDistribution0.getPopulationSize());
      assertEquals(12, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.10650887573964497, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(12, int0);
      assertEquals(12, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1352, hypergeometricDistribution0.getPopulationSize());
      assertEquals(12, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.10650887573964497, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1352, 12, 12);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(12, hypergeometricDistribution0.getSampleSize());
      assertEquals(12, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1352, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.10650887573964497, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(12);
      assertEquals(1.3485833643456883E-29, double0, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(12, hypergeometricDistribution0.getSampleSize());
      assertEquals(12, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1352, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.10650887573964497, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1352, 12, 12);
      assertEquals(12, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(12, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.10650887573964497, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1352, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(850);
      assertEquals(0.0, double0, 0.01);
      assertEquals(12, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(12, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.10650887573964497, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1352, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1352, 12, 12);
      assertEquals(0.10650887573964497, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(12, hypergeometricDistribution0.getSampleSize());
      assertEquals(12, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1352, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability((-922));
      assertEquals(1.0, double0, 0.01);
      assertEquals(0.10650887573964497, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(12, hypergeometricDistribution0.getSampleSize());
      assertEquals(12, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1352, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1352, 12, 12);
      assertEquals(12, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.10650887573964497, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(12, hypergeometricDistribution0.getSampleSize());
      assertEquals(1352, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.probability(1352);
      assertEquals(0.0, double0, 0.01);
      assertEquals(12, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.10650887573964497, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(12, hypergeometricDistribution0.getSampleSize());
      assertEquals(1352, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(727, 389, 389);
      assertEquals(389, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(208.14442916093535, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(389, hypergeometricDistribution0.getSampleSize());
      assertEquals(727, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.probability(0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(389, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(208.14442916093535, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(389, hypergeometricDistribution0.getSampleSize());
      assertEquals(727, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4481, 1227, 1227);
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(477);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1352, 12, 12);
      hypergeometricDistribution0.solveInverseCumulativeProbability((-3539.7019), (-922), 1352);
      assertEquals(0.10650887573964497, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int[] intArray0 = new int[3];
      Well1024a well1024a0 = new Well1024a(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 189, 0, 347);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (347) must be less than or equal to population size (189)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(jDKRandomGenerator0, 2, 969, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (969) must be less than or equal to population size (2)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1320, 1320, (-2646));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-2,646)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1265, (-4006), (-1820));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-4,006)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((-2070), 2886, (-1389));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-2,070)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1722, 0, 1722);
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      assertEquals(1722, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1722, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1722, 0, 1722);
      hypergeometricDistribution0.sample(376);
      assertEquals(1722, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1722, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2324, 934, 729);
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability(2);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2324, 934, 729);
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(120.317399030443, double0, 0.01);
  }
}
