/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 20:42:53 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Well44497b well44497b0 = new Well44497b(2590);
      well44497b0.setSeed((-1315L));
      well44497b0.nextDouble();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 2590, 2590, 429);
      hypergeometricDistribution0.getPopulationSize();
      well44497b0.nextDouble();
      well44497b0.setSeed(0L);
      well44497b0.nextLong();
      well44497b0.nextGaussian();
      hypergeometricDistribution0.probability((-1431));
      System.setCurrentTimeMillis(1L);
      hypergeometricDistribution0.getNumericalVariance();
      well44497b0.nextBoolean();
      hypergeometricDistribution0.probability(0);
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.sample(3331);
      System.setCurrentTimeMillis(0L);
      hypergeometricDistribution0.inverseCumulativeProbability(0.0);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getNumericalVariance();
      System.setCurrentTimeMillis(2819561105158720014L);
      hypergeometricDistribution0.upperCumulativeProbability(2590);
      // Undeclared exception!
      hypergeometricDistribution0.getSupportLowerBound();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Well44497b well44497b0 = new Well44497b(2605);
      well44497b0.setSeed((-1315L));
      well44497b0.nextDouble();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 2605, 2605, 429);
      hypergeometricDistribution0.getPopulationSize();
      well44497b0.nextBoolean();
      well44497b0.nextDouble();
      well44497b0.setSeed(0L);
      well44497b0.clear();
      well44497b0.nextLong();
      well44497b0.nextGaussian();
      hypergeometricDistribution0.probability((-1431));
      System.setCurrentTimeMillis(1L);
      hypergeometricDistribution0.calculateNumericalVariance();
      well44497b0.nextBoolean();
      hypergeometricDistribution0.probability(0);
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.sample(3331);
      System.setCurrentTimeMillis(0L);
      hypergeometricDistribution0.inverseCumulativeProbability(0.0);
      hypergeometricDistribution0.getSupportUpperBound();
      // Undeclared exception!
      hypergeometricDistribution0.calculateNumericalVariance();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      int int0 = 2605;
      Well44497b well44497b0 = new Well44497b(2605);
      well44497b0.setSeed((-1315L));
      well44497b0.nextDouble();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 2605, 2605, 429);
      hypergeometricDistribution0.getPopulationSize();
      well44497b0.nextBoolean();
      well44497b0.nextDouble();
      well44497b0.setSeed(0L);
      well44497b0.nextLong();
      well44497b0.nextGaussian();
      hypergeometricDistribution0.probability((-1431));
      System.setCurrentTimeMillis(1L);
      hypergeometricDistribution0.calculateNumericalVariance();
      well44497b0.nextBoolean();
      hypergeometricDistribution0.probability(0);
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.sample(3331);
      System.setCurrentTimeMillis(0L);
      hypergeometricDistribution0.inverseCumulativeProbability(0.0);
      hypergeometricDistribution0.getSupportUpperBound();
      // Undeclared exception!
      hypergeometricDistribution0.getSampleSize();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      Well44497b well44497b0 = new Well44497b(2590);
      well44497b0.setSeed((-1315L));
      well44497b0.nextDouble();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 2590, 2590, 429);
      hypergeometricDistribution0.getPopulationSize();
      well44497b0.nextDouble();
      well44497b0.setSeed(0L);
      well44497b0.nextLong();
      well44497b0.nextGaussian();
      hypergeometricDistribution0.probability((-1431));
      System.setCurrentTimeMillis(1L);
      hypergeometricDistribution0.getNumericalVariance();
      well44497b0.nextBoolean();
      hypergeometricDistribution0.probability(0);
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.sample(3331);
      System.setCurrentTimeMillis(0L);
      hypergeometricDistribution0.inverseCumulativeProbability(0.0);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getNumericalVariance();
      System.setCurrentTimeMillis(2819561105158720014L);
      hypergeometricDistribution0.upperCumulativeProbability(2590);
      hypergeometricDistribution0.getNumericalVariance();
      // Undeclared exception!
      hypergeometricDistribution0.getNumericalMean();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      int int0 = 2605;
      Well44497b well44497b0 = new Well44497b(2605);
      well44497b0.setSeed((-1315L));
      well44497b0.nextDouble();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 2605, 2605, 429);
      hypergeometricDistribution0.getPopulationSize();
      well44497b0.nextDouble();
      well44497b0.setSeed(0L);
      well44497b0.nextLong();
      well44497b0.nextGaussian();
      hypergeometricDistribution0.probability((-1431));
      System.setCurrentTimeMillis(1L);
      hypergeometricDistribution0.calculateNumericalVariance();
      well44497b0.nextBoolean();
      hypergeometricDistribution0.probability(0);
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.sample(3331);
      System.setCurrentTimeMillis(0L);
      hypergeometricDistribution0.inverseCumulativeProbability(0.0);
      hypergeometricDistribution0.getSupportUpperBound();
      // Undeclared exception!
      hypergeometricDistribution0.getSupportUpperBound();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 2041, 557, 557);
      int int0 = 412;
      hypergeometricDistribution0.cumulativeProbability(412);
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(412);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(5747, 2757, 1725);
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability(1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1077, 0, 1);
      hypergeometricDistribution0.sample(1);
      hypergeometricDistribution0.getNumberOfSuccesses();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(732, 673, 673);
      hypergeometricDistribution0.probability(673);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.getSupportLowerBound();
      int int0 = 3613;
      int int1 = 1561;
      HypergeometricDistribution hypergeometricDistribution1 = null;
      try {
        hypergeometricDistribution1 = new HypergeometricDistribution(2, 1561, 614);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (1,561) must be less than or equal to population size (2)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(732, 667, 667);
      hypergeometricDistribution0.calculateNumericalVariance();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 2041, 557, 557);
      hypergeometricDistribution0.cumulativeProbability(412);
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.upperCumulativeProbability(359);
      HypergeometricDistribution hypergeometricDistribution1 = null;
      try {
        hypergeometricDistribution1 = new HypergeometricDistribution(359, 786, 412);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (786) must be less than or equal to population size (359)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 1102, 0, 0);
      hypergeometricDistribution0.getNumericalMean();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(411, 1, 3876);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (3,876) must be less than or equal to population size (411)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      int int0 = 1078;
      int int1 = 1206;
      int int2 = 221;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1206, 1078, 221);
      // Undeclared exception!
      hypergeometricDistribution0.sample(1206);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 2041, 557, 557);
      double double0 = hypergeometricDistribution0.cumulativeProbability(412);
      assertEquals(0.9999999999999999, double0, 0.01);
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(557, int0);
      
      Well44497a well44497a0 = new Well44497a(2147483647L);
      well44497a0.nextInt();
      hypergeometricDistribution0.upperCumulativeProbability(557);
      double double1 = hypergeometricDistribution0.probability(2602);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      mersenneTwister0.nextBoolean();
      mersenneTwister0.nextLong();
      mersenneTwister0.nextInt();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 2444, 0, 0);
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getSupportLowerBound();
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(2444, int0);
      
      int int1 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(0, int1);
      
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.reseedRandomGenerator(2444);
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getNumericalVariance();
      double double0 = hypergeometricDistribution0.cumulativeProbability(557);
      assertEquals(1.0, double0, 0.01);
      
      double double1 = hypergeometricDistribution0.probability(557);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double2, 0.01);
      
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.getSupportUpperBound();
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1078, 0, 0);
      hypergeometricDistribution0.upperCumulativeProbability(0);
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(1078, int0);
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      
      hypergeometricDistribution0.isSupportConnected();
      double double1 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 2267;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2267, 2267, 1);
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.reseedRandomGenerator((-1L));
      int int1 = (-1759);
      hypergeometricDistribution0.probability((-1759));
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.cumulativeProbability(1866);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getPopulationSize();
      try { 
        hypergeometricDistribution0.inverseCumulativeProbability((-2386.018));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,386.018 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 830;
      int int1 = 2019;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(830, 830, 2019);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (2,019) must be less than or equal to population size (830)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a((int[]) null);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 496, 496, 496);
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(496.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(496, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(779, 779, 779);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(779, int0);
      
      hypergeometricDistribution0.solveInverseCumulativeProbability(779, 779, 779);
      double double0 = hypergeometricDistribution0.probability(1280);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      mersenneTwister0.nextBoolean();
      mersenneTwister0.nextFloat();
      mersenneTwister0.nextLong();
      mersenneTwister0.nextInt();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 2444, 0, 1690);
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.reseedRandomGenerator(2444);
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getNumericalVariance();
      double double0 = hypergeometricDistribution0.cumulativeProbability(557);
      double double1 = hypergeometricDistribution0.probability(557);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double2, 0.01);
      
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(2444, int0);
      
      int int1 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(0, int1);
      
      double double3 = hypergeometricDistribution0.upperCumulativeProbability(2444);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(1690, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double3, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 1383;
      Well44497b well44497b0 = new Well44497b(1383);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-16);
      well44497b0.nextBytes(byteArray0);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, (-847), 1, 1383);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-847)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = (-1023);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1582, (-1023), 1582);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-1,023)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 0;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(5176, 0, 5176);
      int int1 = (-2618);
      hypergeometricDistribution0.cumulativeProbability(0);
      hypergeometricDistribution0.cumulativeProbability(0);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.probability(0);
      hypergeometricDistribution0.getSupportUpperBound();
      try { 
        hypergeometricDistribution0.cumulativeProbability(0, (-1731));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lower endpoint (0) must be less than or equal to upper endpoint (-1,731)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 741, 741, 1102);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (1,102) must be less than or equal to population size (741)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 49;
      int int1 = (-2785);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(919, 49, (-2785));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-2,785)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(0, 0, 641);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      int int0 = 0;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int int0 = 0;
      int int1 = (-1);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(0, (-1), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1622, 1622, 1622);
      double double0 = hypergeometricDistribution0.probability((-398));
      assertEquals(0.0, double0, 0.01);
      
      double double1 = hypergeometricDistribution0.upperCumulativeProbability(1);
      assertEquals(1.0, double1, 0.01);
      
      hypergeometricDistribution0.solveInverseCumulativeProbability(1622, 1622, 1622);
      double double2 = hypergeometricDistribution0.probability(1622);
      assertEquals(Double.NaN, double2, 0.01);
      
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.solveInverseCumulativeProbability(1.0, 1, 763);
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.solveInverseCumulativeProbability(0.0, 15, 1622);
      double double3 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double3, 0.01);
      
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.calculateNumericalVariance();
      double double4 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(1622.0, double4, 0.01);
      
      double double5 = hypergeometricDistribution0.cumulativeProbability(1);
      assertEquals(0.0, double5, 0.01);
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(1622, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(4015L);
      int int0 = 1273;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 663, 1273, 1273);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (1,273) must be less than or equal to population size (663)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(4355);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)13;
      well44497b0.nextLong((long) (byte)13);
      byte byte0 = (byte)76;
      byteArray0[1] = (byte)76;
      well44497b0.nextBytes(byteArray0);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 881, 4355, 881);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (4,355) must be less than or equal to population size (881)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(513);
      mersenneTwister0.nextFloat();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 513, 432, 513);
      hypergeometricDistribution0.sample();
      mersenneTwister0.nextInt(513);
      mersenneTwister0.nextFloat();
      mersenneTwister0.nextLong(4208363204685324176L);
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.solveInverseCumulativeProbability(0.0, 432, 513);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.probability(803);
      hypergeometricDistribution0.getSampleSize();
      double double0 = hypergeometricDistribution0.cumulativeProbability((-2608), 513);
      assertEquals(1.0, double0, 0.01);
      
      hypergeometricDistribution0.getNumericalVariance();
      double double1 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double1, 0.01);
      assertEquals(432.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 0;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }
}
