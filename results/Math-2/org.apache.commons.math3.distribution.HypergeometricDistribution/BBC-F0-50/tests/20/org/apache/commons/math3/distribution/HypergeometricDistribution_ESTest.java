/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 05:43:08 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4260, 1219, 1219);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.isSupportConnected();
      int int0 = 316;
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability(316);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4260, 1225, 1225);
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(661);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(jDKRandomGenerator0, 1356, 2, 2);
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.sample(1);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.upperCumulativeProbability(2);
      hypergeometricDistribution0.upperCumulativeProbability(1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Well512a well512a0 = new Well512a((int[]) null);
      int int0 = 1928;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 4260, 1928, 1928);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.upperCumulativeProbability(1928);
      // Undeclared exception!
      hypergeometricDistribution0.sample(2);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(829, 37, 724);
      hypergeometricDistribution0.cumulativeProbability(836);
      hypergeometricDistribution0.upperCumulativeProbability(1345);
      hypergeometricDistribution0.probability(813);
      hypergeometricDistribution0.probability(590);
      hypergeometricDistribution0.solveInverseCumulativeProbability(0.0, 329, 37);
      hypergeometricDistribution0.cumulativeProbability((-2636), 159);
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.probability(37);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Well512a well512a0 = new Well512a((int[]) null);
      assertNotNull(well512a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 4260, 1928, 1928);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1928, hypergeometricDistribution0.getSampleSize());
      assertEquals(872.5784037558685, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1928, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(4260, hypergeometricDistribution0.getPopulationSize());
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(4260);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1928, hypergeometricDistribution0.getSampleSize());
      assertEquals(872.5784037558685, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1928, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(4260, hypergeometricDistribution0.getPopulationSize());
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(1928, int0);
      assertEquals(1928, hypergeometricDistribution0.getSampleSize());
      assertEquals(872.5784037558685, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1928, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(4260, hypergeometricDistribution0.getPopulationSize());
      
      double double1 = hypergeometricDistribution0.upperCumulativeProbability(2327);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(1928, hypergeometricDistribution0.getSampleSize());
      assertEquals(872.5784037558685, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1928, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(4260, hypergeometricDistribution0.getPopulationSize());
      
      // Undeclared exception!
      hypergeometricDistribution0.sample(2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2652, 809, 2321);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2321, hypergeometricDistribution0.getSampleSize());
      assertEquals(809, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2652, hypergeometricDistribution0.getPopulationSize());
      assertEquals(708.0275263951735, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(61.43561694318187, double0, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2321, hypergeometricDistribution0.getSampleSize());
      assertEquals(809, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2652, hypergeometricDistribution0.getPopulationSize());
      assertEquals(708.0275263951735, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(478, int0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2321, hypergeometricDistribution0.getSampleSize());
      assertEquals(809, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2652, hypergeometricDistribution0.getPopulationSize());
      assertEquals(708.0275263951735, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double1 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(double1, double0, 0.01);
      assertEquals(61.43561694318187, double1, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2321, hypergeometricDistribution0.getSampleSize());
      assertEquals(809, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2652, hypergeometricDistribution0.getPopulationSize());
      assertEquals(708.0275263951735, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2321, hypergeometricDistribution0.getSampleSize());
      assertEquals(809, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2652, hypergeometricDistribution0.getPopulationSize());
      assertEquals(708.0275263951735, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      System.setCurrentTimeMillis(2321);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4260, 1109, 1997);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(519.8762910798122, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1109, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(4260, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1997, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double0 = hypergeometricDistribution0.probability(1109);
      assertEquals(0.0, double0, 0.01);
      assertEquals(519.8762910798122, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1109, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(4260, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1997, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4260, 1225, 1225);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1225, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(352.2593896713615, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(4260, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1225, hypergeometricDistribution0.getSampleSize());
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(1430);
      assertEquals(1.0, double0, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1225, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(352.2593896713615, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(4260, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1225, hypergeometricDistribution0.getSampleSize());
      
      double double1 = hypergeometricDistribution0.getNumericalVariance();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(178.83920472336334, double1, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1225, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(352.2593896713615, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(4260, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1225, hypergeometricDistribution0.getSampleSize());
      
      double double2 = hypergeometricDistribution0.getNumericalMean();
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(352.2593896713615, double2, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1225, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(352.2593896713615, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(4260, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1225, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = 4241;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4241, 4241, 4241);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(4241, hypergeometricDistribution0.getPopulationSize());
      assertEquals(4241.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(4241, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(4241, hypergeometricDistribution0.getSampleSize());
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(4241, 4241);
      assertEquals(0.0, double0, 0.01);
      assertEquals(4241, hypergeometricDistribution0.getPopulationSize());
      assertEquals(4241.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(4241, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(4241, hypergeometricDistribution0.getSampleSize());
      
      double double1 = hypergeometricDistribution0.probability(4241);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(4241, hypergeometricDistribution0.getPopulationSize());
      assertEquals(4241.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(4241, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(4241, hypergeometricDistribution0.getSampleSize());
      
      RandomGenerator randomGenerator0 = null;
      HypergeometricDistribution hypergeometricDistribution1 = null;
      try {
        hypergeometricDistribution1 = new HypergeometricDistribution((RandomGenerator) null, (-1332), (-743), 4548);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-1,332)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom();
      assertNotNull(iSAACRandom0);
      
      long long0 = iSAACRandom0.nextLong();
      assertEquals((-7623937731512766048L), long0);
      
      iSAACRandom0.clear();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 3972, 3972, 185);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(3972, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(185, hypergeometricDistribution0.getSampleSize());
      assertEquals(185.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3972, hypergeometricDistribution0.getPopulationSize());
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(185);
      assertEquals(1.0, double0, 0.01);
      assertEquals(3972, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(185, hypergeometricDistribution0.getSampleSize());
      assertEquals(185.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3972, hypergeometricDistribution0.getPopulationSize());
      
      double double1 = hypergeometricDistribution0.cumulativeProbability(1102);
      assertEquals(double1, double0, 0.01);
      assertEquals(1.0, double1, 0.01);
      assertEquals(3972, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(185, hypergeometricDistribution0.getSampleSize());
      assertEquals(185.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3972, hypergeometricDistribution0.getPopulationSize());
      
      double double2 = hypergeometricDistribution0.getNumericalVariance();
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertEquals(3972, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(185, hypergeometricDistribution0.getSampleSize());
      assertEquals(185.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3972, hypergeometricDistribution0.getPopulationSize());
      
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(185, int0);
      assertEquals(3972, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(185, hypergeometricDistribution0.getSampleSize());
      assertEquals(185.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3972, hypergeometricDistribution0.getPopulationSize());
      
      hypergeometricDistribution0.reseedRandomGenerator(1102);
      assertEquals(3972, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(185, hypergeometricDistribution0.getSampleSize());
      assertEquals(185.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3972, hypergeometricDistribution0.getPopulationSize());
      
      double double3 = hypergeometricDistribution0.cumulativeProbability(3169);
      assertEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(1.0, double3, 0.01);
      assertEquals(3972, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(185, hypergeometricDistribution0.getSampleSize());
      assertEquals(185.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3972, hypergeometricDistribution0.getPopulationSize());
      
      double double4 = hypergeometricDistribution0.getNumericalVariance();
      assertNotEquals(double4, double3, 0.01);
      assertEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(0.0, double4, 0.01);
      assertEquals(3972, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(185, hypergeometricDistribution0.getSampleSize());
      assertEquals(185.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3972, hypergeometricDistribution0.getPopulationSize());
      
      double double5 = hypergeometricDistribution0.cumulativeProbability((-320));
      assertNotEquals(double5, double3, 0.01);
      assertEquals(double5, double4, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertEquals(double5, double2, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertEquals(0.0, double5, 0.01);
      assertEquals(3972, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(185, hypergeometricDistribution0.getSampleSize());
      assertEquals(185.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3972, hypergeometricDistribution0.getPopulationSize());
      
      double double6 = hypergeometricDistribution0.cumulativeProbability(1102);
      assertEquals(double6, double1, 0.01);
      assertEquals(double6, double3, 0.01);
      assertEquals(double6, double0, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertEquals(1.0, double6, 0.01);
      assertEquals(3972, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(185, hypergeometricDistribution0.getSampleSize());
      assertEquals(185.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3972, hypergeometricDistribution0.getPopulationSize());
      
      iSAACRandom0.setSeed((-3024));
      int int1 = hypergeometricDistribution0.getPopulationSize();
      assertFalse(int1 == int0);
      assertEquals(3972, int1);
      assertEquals(3972, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(185, hypergeometricDistribution0.getSampleSize());
      assertEquals(185.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3972, hypergeometricDistribution0.getPopulationSize());
      
      double double7 = hypergeometricDistribution0.calculateNumericalVariance();
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertEquals(double7, double4, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertEquals(double7, double2, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertEquals(double7, double5, 0.01);
      assertEquals(0.0, double7, 0.01);
      assertEquals(3972, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(185, hypergeometricDistribution0.getSampleSize());
      assertEquals(185.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3972, hypergeometricDistribution0.getPopulationSize());
      
      double double8 = hypergeometricDistribution0.getNumericalMean();
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertEquals(185.0, double8, 0.01);
      assertEquals(3972, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(185, hypergeometricDistribution0.getSampleSize());
      assertEquals(185.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3972, hypergeometricDistribution0.getPopulationSize());
      
      double double9 = hypergeometricDistribution0.upperCumulativeProbability((-320));
      assertEquals(double9, double0, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertEquals(double9, double3, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertEquals(double9, double6, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertEquals(double9, double1, 0.01);
      assertEquals(1.0, double9, 0.01);
      assertEquals(3972, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(185, hypergeometricDistribution0.getSampleSize());
      assertEquals(185.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3972, hypergeometricDistribution0.getPopulationSize());
      
      int int2 = hypergeometricDistribution0.getSupportLowerBound();
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(185, int2);
      assertEquals(3972, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(185, hypergeometricDistribution0.getSampleSize());
      assertEquals(185.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3972, hypergeometricDistribution0.getPopulationSize());
      
      double double10 = hypergeometricDistribution0.getNumericalMean();
      assertNotEquals(double10, double9, 0.01);
      assertNotEquals(double10, double4, 0.01);
      assertNotEquals(double10, double7, 0.01);
      assertNotEquals(double10, double1, 0.01);
      assertNotEquals(double10, double3, 0.01);
      assertEquals(double10, double8, 0.01);
      assertNotEquals(double10, double5, 0.01);
      assertNotEquals(double10, double6, 0.01);
      assertNotEquals(double10, double2, 0.01);
      assertNotEquals(double10, double0, 0.01);
      assertEquals(185.0, double10, 0.01);
      assertEquals(3972, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(185, hypergeometricDistribution0.getSampleSize());
      assertEquals(185.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3972, hypergeometricDistribution0.getPopulationSize());
      
      int int3 = hypergeometricDistribution0.getPopulationSize();
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(3972, int3);
      assertEquals(3972, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(185, hypergeometricDistribution0.getSampleSize());
      assertEquals(185.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3972, hypergeometricDistribution0.getPopulationSize());
      
      double double11 = hypergeometricDistribution0.upperCumulativeProbability(1022);
      assertNotEquals(double11, double1, 0.01);
      assertEquals(double11, double4, 0.01);
      assertNotEquals(double11, double3, 0.01);
      assertNotEquals(double11, double9, 0.01);
      assertEquals(double11, double2, 0.01);
      assertNotEquals(double11, double10, 0.01);
      assertEquals(double11, double5, 0.01);
      assertNotEquals(double11, double6, 0.01);
      assertNotEquals(double11, double0, 0.01);
      assertNotEquals(double11, double8, 0.01);
      assertEquals(double11, double7, 0.01);
      assertEquals(0.0, double11, 0.01);
      assertEquals(3972, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(185, hypergeometricDistribution0.getSampleSize());
      assertEquals(185.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3972, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int[] intArray0 = new int[0];
      Well1024a well1024a0 = new Well1024a(intArray0);
      assertArrayEquals(new int[] {}, intArray0);
      assertEquals(0, intArray0.length);
      assertNotNull(well1024a0);
      
      int int0 = 142;
      int int1 = 0;
      int int2 = 200;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 142, 0, 200);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (200) must be less than or equal to population size (142)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1, 1, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(0, int0);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double1 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int1 = hypergeometricDistribution0.solveInverseCumulativeProbability(0, 241, 0);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double2 = hypergeometricDistribution0.cumulativeProbability(0, 0);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double3 = hypergeometricDistribution0.cumulativeProbability(0);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(1.0, double3, 0.01);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double4 = hypergeometricDistribution0.cumulativeProbability(898);
      assertEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(1.0, double4, 0.01);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      // Undeclared exception!
      try { 
        hypergeometricDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int int0 = 1327;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 1327, 1327, 1327);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1327, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1327.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1327, hypergeometricDistribution0.getSampleSize());
      assertEquals(1327, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(1327);
      assertEquals(1.0, double0, 0.01);
      assertEquals(1327, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1327.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1327, hypergeometricDistribution0.getSampleSize());
      assertEquals(1327, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int1 = 0;
      try { 
        hypergeometricDistribution0.inverseCumulativeProbability(1327);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1,327 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 466;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2281, 2281, 466);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(466, hypergeometricDistribution0.getSampleSize());
      assertEquals(2281, hypergeometricDistribution0.getPopulationSize());
      assertEquals(466.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2281, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int1 = hypergeometricDistribution0.getSupportUpperBound();
      assertTrue(int1 == int0);
      assertEquals(466, int1);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(466, hypergeometricDistribution0.getSampleSize());
      assertEquals(2281, hypergeometricDistribution0.getPopulationSize());
      assertEquals(466.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2281, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.probability(2281);
      assertEquals(0.0, double0, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(466, hypergeometricDistribution0.getSampleSize());
      assertEquals(2281, hypergeometricDistribution0.getPopulationSize());
      assertEquals(466.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2281, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int[] intArray0 = hypergeometricDistribution0.sample(1324);
      assertEquals(1324, intArray0.length);
      assertNotNull(intArray0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(466, hypergeometricDistribution0.getSampleSize());
      assertEquals(2281, hypergeometricDistribution0.getPopulationSize());
      assertEquals(466.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2281, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int2 = hypergeometricDistribution0.solveInverseCumulativeProbability(1324, 1264, 1264);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1264, int2);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(466, hypergeometricDistribution0.getSampleSize());
      assertEquals(2281, hypergeometricDistribution0.getPopulationSize());
      assertEquals(466.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2281, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int3 = hypergeometricDistribution0.getSupportLowerBound();
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertEquals(466, int3);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(466, hypergeometricDistribution0.getSampleSize());
      assertEquals(2281, hypergeometricDistribution0.getPopulationSize());
      assertEquals(466.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2281, hypergeometricDistribution0.getNumberOfSuccesses());
      
      try { 
        hypergeometricDistribution0.inverseCumulativeProbability(1264);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1,264 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 1;
      int int0 = 0;
      intArray0[2] = 0;
      intArray0[3] = 1704;
      intArray0[4] = 36;
      intArray0[5] = 0;
      intArray0[6] = 1;
      intArray0[7] = (-2144);
      intArray0[8] = (-2052);
      Well44497b well44497b0 = new Well44497b(intArray0);
      assertArrayEquals(new int[] {0, 1, 0, 1704, 36, 0, 1, (-2144), (-2052)}, intArray0);
      assertEquals(9, intArray0.length);
      assertNotNull(well44497b0);
      
      boolean boolean0 = well44497b0.nextBoolean();
      assertArrayEquals(new int[] {0, 1, 0, 1704, 36, 0, 1, (-2144), (-2052)}, intArray0);
      assertEquals(9, intArray0.length);
      assertTrue(boolean0);
      
      long long0 = well44497b0.nextLong((long) 36);
      assertArrayEquals(new int[] {0, 1, 0, 1704, 36, 0, 1, (-2144), (-2052)}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(7L, long0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 575, 0, 1);
      assertArrayEquals(new int[] {0, 1, 0, 1704, 36, 0, 1, (-2144), (-2052)}, intArray0);
      assertEquals(9, intArray0.length);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(575, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int1 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertArrayEquals(new int[] {0, 1, 0, 1704, 36, 0, 1, (-2144), (-2052)}, intArray0);
      assertEquals(9, intArray0.length);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(575, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      
      // Undeclared exception!
      try { 
        hypergeometricDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4241, 4241, 4241);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(4241, hypergeometricDistribution0.getPopulationSize());
      assertEquals(4241, hypergeometricDistribution0.getSampleSize());
      assertEquals(4241, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(4241.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability((-2677));
      assertEquals(1.0, double0, 0.01);
      assertEquals(4241, hypergeometricDistribution0.getPopulationSize());
      assertEquals(4241, hypergeometricDistribution0.getSampleSize());
      assertEquals(4241, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(4241.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double1 = hypergeometricDistribution0.calculateNumericalVariance();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertEquals(4241, hypergeometricDistribution0.getPopulationSize());
      assertEquals(4241, hypergeometricDistribution0.getSampleSize());
      assertEquals(4241, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(4241.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(37, 0, 0);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.upperCumulativeProbability(2327);
      hypergeometricDistribution0.sample(1430);
      hypergeometricDistribution0.probability(0);
      double double0 = hypergeometricDistribution0.probability(0);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = hypergeometricDistribution0.cumulativeProbability((-222), 508);
      assertEquals(1.0, double1, 0.01);
      
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.getSupportLowerBound();
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(37, int0);
      
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.getSupportUpperBound();
      int int1 = hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.getNumericalMean();
      double double2 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.0, double2, 0.01);
      
      double double3 = hypergeometricDistribution0.upperCumulativeProbability(1225);
      hypergeometricDistribution0.probability(667);
      hypergeometricDistribution0.getNumericalMean();
      int int2 = hypergeometricDistribution0.getSampleSize();
      assertTrue(int2 == int1);
      
      double double4 = hypergeometricDistribution0.probability((-1332));
      assertEquals(double4, double3, 0.01);
      
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.getNumericalMean();
      double double5 = hypergeometricDistribution0.cumulativeProbability(0);
      assertEquals(1.0, double5, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      well512a0.nextInt(2637);
      well512a0.setSeed(486);
      well512a0.nextInt();
      well512a0.nextInt();
      int[] intArray0 = new int[6];
      intArray0[0] = 2;
      intArray0[1] = (-630966925);
      intArray0[2] = 2637;
      intArray0[3] = 2637;
      intArray0[4] = 0;
      intArray0[5] = 0;
      well512a0.setSeed(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 2, 2, 0);
      hypergeometricDistribution0.sample();
      // Undeclared exception!
      try { 
        hypergeometricDistribution0.sample((-630966925));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-630,966,925)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(358, 358, 358);
      hypergeometricDistribution0.probability(0);
      hypergeometricDistribution0.cumulativeProbability(0);
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.solveInverseCumulativeProbability(1.0, 0, 0);
      hypergeometricDistribution0.inverseCumulativeProbability(0.0);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.probability((-345));
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.reseedRandomGenerator(358);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.getNumericalVariance();
      int int0 = 654;
      hypergeometricDistribution0.sample(440);
      try { 
        hypergeometricDistribution0.inverseCumulativeProbability((-345));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -345 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(4294967295L);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1353, 0, 0);
      double double0 = hypergeometricDistribution0.cumulativeProbability(0);
      assertEquals(1353, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.0, double0, 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)30;
      well19937c0.nextBytes(byteArray0);
      int int0 = 321;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 321, (-1366), 321);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-1,366)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 127;
      int int1 = 1;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(127, 127, 1);
      hypergeometricDistribution0.getSupportUpperBound();
      try { 
        hypergeometricDistribution0.cumulativeProbability(127, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lower endpoint (127) must be less than or equal to upper endpoint (1)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a((-5316L));
      int int0 = 0;
      well19937a0.nextDouble();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 1230, 1230, 0);
      // Undeclared exception!
      try { 
        hypergeometricDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 0;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(0, 206, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = (-4721);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((-4721), (-4721), (-4721));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-4,721)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 887;
      int int1 = 2399;
      int int2 = 494;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(887, 2399, 494);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (2,399) must be less than or equal to population size (887)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      mersenneTwister0.nextInt(33);
      mersenneTwister0.nextBoolean();
      mersenneTwister0.setSeed((int[]) null);
      mersenneTwister0.nextDouble();
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 2, 0, (-724));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-724)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }
}
