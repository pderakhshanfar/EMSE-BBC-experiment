/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 20:40:41 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1198, 835, 522);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(522);
      assertEquals(4.408540723681174E-117, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(795, 795, 795);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability((-688));
      assertEquals(795.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(522, 522, 522);
      double double0 = hypergeometricDistribution0.cumulativeProbability(522);
      assertEquals(1.0, double0, 0.01);
      assertEquals(522.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(22, 1231, 1231);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (1,231) must be less than or equal to population size (22)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(0, 0, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a((long) 547);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 970, 547, 547);
      double double0 = hypergeometricDistribution0.probability(330);
      assertEquals(0.0010059590909191325, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1173, 0, 0);
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(0, int0);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1173, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(795, 795, 795);
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(795.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(795, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(795, 795, 795);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(795, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(970, 547, 0);
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(970, hypergeometricDistribution0.getPopulationSize());
      assertEquals(547, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a((long) 547);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 970, 547, 547);
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(58.72028325096813, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(970, 547, 0);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(547, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double0, 0.01);
      assertEquals(970, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(795, 795, 795);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(795.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1173, 0, 0);
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(1173, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(795, 795, 795);
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      assertEquals(795.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2703, 39, 1317);
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(9.606615235657852, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2703, 591, 591);
      hypergeometricDistribution0.upperCumulativeProbability(224);
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability(119);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3235, 1618, 1618);
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(1231);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int[] intArray0 = new int[8];
      Well512a well512a0 = new Well512a(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 1, 89, (-1431));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1,431)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1173, 0, 0);
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1173, int0);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(522, 522, 522);
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(522.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(522, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(522, 522, 522);
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(522.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(522, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom(2187L);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 2572, 2572, 0);
      hypergeometricDistribution0.getNumericalVariance();
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(2572, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2572, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(522, 522, 522);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(522);
      assertEquals(1.0, double0, 0.01);
      assertEquals(522.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(522, 522, 522);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(2278);
      assertEquals(522.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3235, 1618, 1618);
      double double0 = hypergeometricDistribution0.probability(1891);
      assertEquals(0.0, double0, 0.01);
      assertEquals(809.2500772797528, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(795, 795, 795);
      double double0 = hypergeometricDistribution0.probability(0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(795.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1173, 0, 0);
      double double0 = hypergeometricDistribution0.cumulativeProbability((-2147482626));
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1173, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(2572, 0, 420913560);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (420,913,560) must be less than or equal to population size (2,572)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int[] intArray0 = new int[0];
      Well19937a well19937a0 = new Well19937a(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 22, 1231, 22);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (1,231) must be less than or equal to population size (22)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1, (-1561), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-1,561)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((-14), 547, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-14)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom(2187L);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 2572, 2572, 0);
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertEquals(2572, hypergeometricDistribution0.getPopulationSize());
      assertTrue(boolean0);
      assertEquals(2572, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1173, 0, 0);
      double double0 = hypergeometricDistribution0.cumulativeProbability(1040);
      assertEquals(1.0, double0, 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1173, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1173, 0, 0);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1173, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, int0);
  }
}
