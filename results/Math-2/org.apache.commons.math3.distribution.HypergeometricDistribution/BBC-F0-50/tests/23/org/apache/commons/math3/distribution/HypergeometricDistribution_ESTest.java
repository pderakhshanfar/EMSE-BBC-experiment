/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 12:18:41 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4163, 1564, 1564);
      assertEquals(1564, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(4163, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1564, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(587.5801104972376, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(1564, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(4163, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1564, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(587.5801104972376, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1564, int0);
      
      hypergeometricDistribution0.reseedRandomGenerator(4163);
      assertEquals(1564, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(4163, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1564, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(587.5801104972376, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int1 = 1671;
      int int2 = hypergeometricDistribution0.solveInverseCumulativeProbability(4163, 1564, 2);
      assertEquals(1564, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(4163, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1564, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(587.5801104972376, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(2, int2);
      
      double double0 = hypergeometricDistribution0.probability(4163);
      assertEquals(1564, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(4163, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1564, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(587.5801104972376, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = hypergeometricDistribution0.upperCumulativeProbability(759);
      assertEquals(1564, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(4163, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1564, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(587.5801104972376, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(1.1482720526226632E-29, double1, 0.01);
      
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(661);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4163, 1564, 1564);
      assertEquals(587.5801104972376, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(4163, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1564, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1564, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(587.5801104972376, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(4163, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1564, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1564, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1564, int0);
      
      hypergeometricDistribution0.reseedRandomGenerator(4163);
      assertEquals(587.5801104972376, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(4163, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1564, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1564, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int1 = 1671;
      int int2 = hypergeometricDistribution0.solveInverseCumulativeProbability(4163, 1564, 2);
      assertEquals(587.5801104972376, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(4163, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1564, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1564, hypergeometricDistribution0.getNumberOfSuccesses());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(2, int2);
      
      double double0 = hypergeometricDistribution0.probability(4163);
      assertEquals(587.5801104972376, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(4163, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1564, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1564, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double0, 0.01);
      
      double double1 = hypergeometricDistribution0.upperCumulativeProbability(759);
      assertEquals(587.5801104972376, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(4163, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1564, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1564, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(double1, double0, 0.01);
      assertEquals(1.1482720526226632E-29, double1, 0.01);
      
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability(661);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 1439;
      Well44497b well44497b0 = new Well44497b();
      assertNotNull(well44497b0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 128, 37, 37);
      assertEquals(128, hypergeometricDistribution0.getPopulationSize());
      assertEquals(10.6953125, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(37, hypergeometricDistribution0.getSampleSize());
      assertEquals(37, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(37);
      assertEquals(128, hypergeometricDistribution0.getPopulationSize());
      assertEquals(10.6953125, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(37, hypergeometricDistribution0.getSampleSize());
      assertEquals(37, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(4.825629357630791E-33, double0, 0.01);
      
      HypergeometricDistribution hypergeometricDistribution1 = null;
      try {
        hypergeometricDistribution1 = new HypergeometricDistribution(37, 128, 204);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (128) must be less than or equal to population size (37)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1439, 1439, 1439);
      assertEquals(1439, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1439.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1439, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1439, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      HypergeometricDistribution hypergeometricDistribution1 = null;
      try {
        hypergeometricDistribution1 = new HypergeometricDistribution((RandomGenerator) null, 1456, 655, 1473);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (1,473) must be less than or equal to population size (1,456)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      assertNotNull(well44497b0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 1456, 701, 915);
      assertEquals(1456, hypergeometricDistribution0.getPopulationSize());
      assertEquals(915, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(701, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(440.5322802197802, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(1456, hypergeometricDistribution0.getPopulationSize());
      assertEquals(915, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(701, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(440.5322802197802, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(84.93713063950112, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      assertNotNull(well44497b0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(915, 712, 712);
      assertEquals(712, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(915, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(712, hypergeometricDistribution0.getSampleSize());
      assertEquals(554.0371584699453, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.probability(915);
      assertEquals(712, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(915, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(712, hypergeometricDistribution0.getSampleSize());
      assertEquals(554.0371584699453, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(712, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(915, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(712, hypergeometricDistribution0.getSampleSize());
      assertEquals(554.0371584699453, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(509, int0);
      
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertEquals(712, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(915, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(712, hypergeometricDistribution0.getSampleSize());
      assertEquals(554.0371584699453, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(boolean0);
      
      int int1 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(712, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(915, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(712, hypergeometricDistribution0.getSampleSize());
      assertEquals(554.0371584699453, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertFalse(int1 == int0);
      assertEquals(712, int1);
      
      double double1 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(712, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(915, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(712, hypergeometricDistribution0.getSampleSize());
      assertEquals(554.0371584699453, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(27.30006488429886, double1, 0.01);
      
      int int2 = hypergeometricDistribution0.getSampleSize();
      assertEquals(712, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(915, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(712, hypergeometricDistribution0.getSampleSize());
      assertEquals(554.0371584699453, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(712, int2);
      
      double double2 = hypergeometricDistribution0.probability(1);
      assertEquals(712, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(915, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(712, hypergeometricDistribution0.getSampleSize());
      assertEquals(554.0371584699453, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(712, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(915, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(712, hypergeometricDistribution0.getSampleSize());
      assertEquals(554.0371584699453, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(27.30006488429886, double3, 0.01);
      
      double double4 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(712, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(915, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(712, hypergeometricDistribution0.getSampleSize());
      assertEquals(554.0371584699453, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals(27.30006488429886, double4, 0.01);
      
      int int3 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(712, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(915, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(712, hypergeometricDistribution0.getSampleSize());
      assertEquals(554.0371584699453, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(509, int3);
      
      int int4 = hypergeometricDistribution0.getSampleSize();
      assertEquals(712, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(915, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(712, hypergeometricDistribution0.getSampleSize());
      assertEquals(554.0371584699453, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(int4 == int1);
      assertFalse(int4 == int3);
      assertTrue(int4 == int2);
      assertFalse(int4 == int0);
      assertEquals(712, int4);
      
      HypergeometricDistribution hypergeometricDistribution1 = null;
      try {
        hypergeometricDistribution1 = new HypergeometricDistribution(57, 712, 71);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (712) must be less than or equal to population size (57)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      assertNotNull(well1024a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 100, 100, 100);
      assertEquals(100, hypergeometricDistribution0.getSampleSize());
      assertEquals(100, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(100.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(100, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(100, hypergeometricDistribution0.getSampleSize());
      assertEquals(100, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(100.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(100, hypergeometricDistribution0.getPopulationSize());
      assertEquals(100, int0);
      
      int int1 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(100, hypergeometricDistribution0.getSampleSize());
      assertEquals(100, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(100.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(100, hypergeometricDistribution0.getPopulationSize());
      assertTrue(int1 == int0);
      assertEquals(100, int1);
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(0);
      assertEquals(100, hypergeometricDistribution0.getSampleSize());
      assertEquals(100, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(100.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(100, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double0, 0.01);
      
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(337, 100, 100);
      assertEquals(29.673590504451038, hypergeometricDistribution1.getNumericalMean(), 0.01);
      assertEquals(100, hypergeometricDistribution1.getSampleSize());
      assertEquals(100, hypergeometricDistribution1.getNumberOfSuccesses());
      assertEquals(337, hypergeometricDistribution1.getPopulationSize());
      assertTrue(hypergeometricDistribution1.isSupportConnected());
      assertNotNull(hypergeometricDistribution1);
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      
      double double1 = hypergeometricDistribution1.probability(100);
      assertEquals(29.673590504451038, hypergeometricDistribution1.getNumericalMean(), 0.01);
      assertEquals(100, hypergeometricDistribution1.getSampleSize());
      assertEquals(100, hypergeometricDistribution1.getNumberOfSuccesses());
      assertEquals(337, hypergeometricDistribution1.getPopulationSize());
      assertTrue(hypergeometricDistribution1.isSupportConnected());
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      assertEquals(double1, double0, 0.01);
      assertEquals(2.1239182248441166E-88, double1, 0.01);
      assertNotSame(hypergeometricDistribution1, hypergeometricDistribution0);
      
      double double2 = hypergeometricDistribution1.upperCumulativeProbability(37);
      assertEquals(29.673590504451038, hypergeometricDistribution1.getNumericalMean(), 0.01);
      assertEquals(100, hypergeometricDistribution1.getSampleSize());
      assertEquals(100, hypergeometricDistribution1.getNumberOfSuccesses());
      assertEquals(337, hypergeometricDistribution1.getPopulationSize());
      assertTrue(hypergeometricDistribution1.isSupportConnected());
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(0.03843748374749078, double2, 0.01);
      assertNotSame(hypergeometricDistribution1, hypergeometricDistribution0);
      
      double double3 = hypergeometricDistribution0.probability(0);
      assertEquals(100, hypergeometricDistribution0.getSampleSize());
      assertEquals(100, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(100.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(100, hypergeometricDistribution0.getPopulationSize());
      assertFalse(hypergeometricDistribution0.equals((Object)hypergeometricDistribution1));
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(0.0, double3, 0.01);
      assertNotSame(hypergeometricDistribution0, hypergeometricDistribution1);
      
      int int2 = hypergeometricDistribution1.getSupportUpperBound();
      assertEquals(29.673590504451038, hypergeometricDistribution1.getNumericalMean(), 0.01);
      assertEquals(100, hypergeometricDistribution1.getSampleSize());
      assertEquals(100, hypergeometricDistribution1.getNumberOfSuccesses());
      assertEquals(337, hypergeometricDistribution1.getPopulationSize());
      assertTrue(hypergeometricDistribution1.isSupportConnected());
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(100, int2);
      assertNotSame(hypergeometricDistribution1, hypergeometricDistribution0);
      
      double double4 = hypergeometricDistribution1.probability(337);
      assertEquals(29.673590504451038, hypergeometricDistribution1.getNumericalMean(), 0.01);
      assertEquals(100, hypergeometricDistribution1.getSampleSize());
      assertEquals(100, hypergeometricDistribution1.getNumberOfSuccesses());
      assertEquals(337, hypergeometricDistribution1.getPopulationSize());
      assertTrue(hypergeometricDistribution1.isSupportConnected());
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      assertEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(0.0, double4, 0.01);
      assertNotSame(hypergeometricDistribution1, hypergeometricDistribution0);
      
      int int3 = hypergeometricDistribution1.getNumberOfSuccesses();
      assertEquals(29.673590504451038, hypergeometricDistribution1.getNumericalMean(), 0.01);
      assertEquals(100, hypergeometricDistribution1.getSampleSize());
      assertEquals(100, hypergeometricDistribution1.getNumberOfSuccesses());
      assertEquals(337, hypergeometricDistribution1.getPopulationSize());
      assertTrue(hypergeometricDistribution1.isSupportConnected());
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals(100, int3);
      assertNotSame(hypergeometricDistribution1, hypergeometricDistribution0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Well512a well512a0 = new Well512a(102);
      assertNotNull(well512a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 2811, 322, 70);
      assertEquals(322, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(70, hypergeometricDistribution0.getSampleSize());
      assertEquals(8.018498754891498, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2811, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.probability(2097);
      assertEquals(322, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(70, hypergeometricDistribution0.getSampleSize());
      assertEquals(8.018498754891498, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2811, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 3025;
      Well19937a well19937a0 = new Well19937a(3025);
      assertNotNull(well19937a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 3025, 1182, 1182);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1182, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3025, hypergeometricDistribution0.getPopulationSize());
      assertEquals(461.859173553719, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1182, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      // Undeclared exception!
      hypergeometricDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      assertNotNull(well44497b0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 711;
      intArray0[1] = 2;
      intArray0[2] = 711;
      intArray0[3] = 711;
      intArray0[4] = 0;
      intArray0[5] = 711;
      intArray0[6] = 0;
      intArray0[7] = 0;
      ISAACRandom iSAACRandom0 = new ISAACRandom(intArray0);
      assertNotNull(iSAACRandom0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {711, 2, 711, 711, 0, 711, 0, 0}, intArray0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 711, 2, 0);
      assertEquals(711, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {711, 2, 711, 711, 0, 711, 0, 0}, intArray0);
      
      int[] intArray1 = hypergeometricDistribution0.sample(711);
      assertEquals(711, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(intArray1);
      assertFalse(intArray1.equals((Object)intArray0));
      assertEquals(8, intArray0.length);
      assertEquals(711, intArray1.length);
      assertArrayEquals(new int[] {711, 2, 711, 711, 0, 711, 0, 0}, intArray0);
      assertNotSame(intArray0, intArray1);
      assertNotSame(intArray1, intArray0);
      
      iSAACRandom0.setSeed(177L);
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {711, 2, 711, 711, 0, 711, 0, 0}, intArray0);
      assertNotSame(intArray0, intArray1);
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(711, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {711, 2, 711, 711, 0, 711, 0, 0}, intArray0);
      assertEquals(0, int0);
      assertNotSame(intArray0, intArray1);
      
      double double0 = hypergeometricDistribution0.probability(0);
      assertEquals(711, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {711, 2, 711, 711, 0, 711, 0, 0}, intArray0);
      assertEquals(1.0, double0, 0.01);
      assertNotSame(intArray0, intArray1);
      
      double double1 = hypergeometricDistribution0.upperCumulativeProbability(711);
      assertEquals(711, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {711, 2, 711, 711, 0, 711, 0, 0}, intArray0);
      assertEquals(0.0, double1, 0.01);
      assertNotSame(intArray0, intArray1);
      
      int int1 = hypergeometricDistribution0.getSampleSize();
      assertEquals(711, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(int1 == int0);
      assertFalse(intArray0.equals((Object)intArray1));
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {711, 2, 711, 711, 0, 711, 0, 0}, intArray0);
      assertEquals(0, int1);
      assertNotSame(intArray0, intArray1);
      
      int int2 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(711, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertFalse(intArray0.equals((Object)intArray1));
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {711, 2, 711, 711, 0, 711, 0, 0}, intArray0);
      assertEquals(0, int2);
      assertNotSame(intArray0, intArray1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      assertNotNull(well1024a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 93, 0, 93);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(93, hypergeometricDistribution0.getSampleSize());
      assertEquals(93, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(93, hypergeometricDistribution0.getSampleSize());
      assertEquals(93, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double0, 0.01);
      
      int int0 = hypergeometricDistribution0.inverseCumulativeProbability(0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(93, hypergeometricDistribution0.getSampleSize());
      assertEquals(93, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, int0);
      
      int int1 = hypergeometricDistribution0.getSampleSize();
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(93, hypergeometricDistribution0.getSampleSize());
      assertEquals(93, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertFalse(int1 == int0);
      assertEquals(93, int1);
      
      int int2 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(93, hypergeometricDistribution0.getSampleSize());
      assertEquals(93, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(93, int2);
      
      double double1 = hypergeometricDistribution0.upperCumulativeProbability(486);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(93, hypergeometricDistribution0.getSampleSize());
      assertEquals(93, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(93, hypergeometricDistribution0.getSampleSize());
      assertEquals(93, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(93, hypergeometricDistribution0.getSampleSize());
      assertEquals(93, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(0.0, double3, 0.01);
      
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(93, hypergeometricDistribution0.getSampleSize());
      assertEquals(93, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(boolean0);
      
      double double4 = hypergeometricDistribution0.cumulativeProbability(93);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(93, hypergeometricDistribution0.getSampleSize());
      assertEquals(93, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(1.0, double4, 0.01);
      
      boolean boolean1 = hypergeometricDistribution0.isSupportConnected();
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(93, hypergeometricDistribution0.getSampleSize());
      assertEquals(93, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Well512a well512a0 = new Well512a(470);
      assertNotNull(well512a0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 470;
      intArray0[1] = 470;
      intArray0[2] = 470;
      intArray0[3] = 0;
      intArray0[4] = 470;
      intArray0[5] = 470;
      intArray0[6] = 470;
      well512a0.setSeed(intArray0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {470, 470, 470, 0, 470, 470, 470}, intArray0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 470, 470, 470);
      assertEquals(470, hypergeometricDistribution0.getPopulationSize());
      assertEquals(470, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(470, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(470.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.probability(470);
      assertEquals(470, hypergeometricDistribution0.getPopulationSize());
      assertEquals(470, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(470, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(470.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      long long0 = well512a0.nextLong();
      assertEquals((-4311922199472324085L), long0);
      
      double double1 = hypergeometricDistribution0.probability(470);
      assertEquals(470, hypergeometricDistribution0.getPopulationSize());
      assertEquals(470, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(470, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(470.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = hypergeometricDistribution0.probability(2);
      assertEquals(470, hypergeometricDistribution0.getPopulationSize());
      assertEquals(470, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(470, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(470.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertEquals(470, hypergeometricDistribution0.getPopulationSize());
      assertEquals(470, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(470, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(470.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(boolean0);
      
      double double3 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(470, hypergeometricDistribution0.getPopulationSize());
      assertEquals(470, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(470, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(470.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(470.0, double3, 0.01);
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(470, hypergeometricDistribution0.getPopulationSize());
      assertEquals(470, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(470, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(470.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(470, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      assertNotNull(well44497b0);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 165, 915, 1443);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (915) must be less than or equal to population size (165)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(70, 70, 70);
      assertEquals(70, hypergeometricDistribution0.getPopulationSize());
      assertEquals(70.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(70, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(70, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.probability(70);
      assertEquals(70, hypergeometricDistribution0.getPopulationSize());
      assertEquals(70.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(70, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(70, hypergeometricDistribution0.getSampleSize());
      assertEquals(Double.NaN, double0, 0.01);
      
      int int0 = hypergeometricDistribution0.solveInverseCumulativeProbability(0, 102, 0);
      assertEquals(70, hypergeometricDistribution0.getPopulationSize());
      assertEquals(70.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(70, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(70, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, int0);
      
      int int1 = hypergeometricDistribution0.solveInverseCumulativeProbability(Double.NaN, 0, 0);
      assertEquals(70, hypergeometricDistribution0.getPopulationSize());
      assertEquals(70.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(70, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(70, hypergeometricDistribution0.getSampleSize());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      double double1 = hypergeometricDistribution0.cumulativeProbability(70);
      assertEquals(70, hypergeometricDistribution0.getPopulationSize());
      assertEquals(70.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(70, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(70, hypergeometricDistribution0.getSampleSize());
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1.0, double1, 0.01);
      
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertEquals(70, hypergeometricDistribution0.getPopulationSize());
      assertEquals(70.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(70, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(70, hypergeometricDistribution0.getSampleSize());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      assertNotNull(mersenneTwister0);
      
      boolean boolean0 = mersenneTwister0.nextBoolean();
      assertFalse(boolean0);
      
      int int0 = 685;
      double double0 = mersenneTwister0.nextDouble();
      assertEquals(0.9702650439283036, double0, 0.01);
      
      int int1 = 876;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 685, 876, 685);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (876) must be less than or equal to population size (685)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2, 2, 2);
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, int0);
      
      int int1 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertTrue(int1 == int0);
      assertEquals(2, int1);
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(1);
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, double0, 0.01);
      
      double double1 = hypergeometricDistribution0.probability(2);
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(1.0, double2, 0.01);
      
      double double3 = hypergeometricDistribution0.probability((-901));
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(0.0, double3, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 762;
      intArray0[1] = (-1796);
      intArray0[2] = 1185;
      intArray0[3] = 465;
      intArray0[4] = (-1219);
      intArray0[5] = (-154);
      intArray0[6] = 0;
      Well512a well512a0 = new Well512a(intArray0);
      assertNotNull(well512a0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {762, (-1796), 1185, 465, (-1219), (-154), 0}, intArray0);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 1185, (-316), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-316)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      assertNotNull(well1024a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 100, 0, 100);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(100, hypergeometricDistribution0.getSampleSize());
      assertEquals(100, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(100, hypergeometricDistribution0.getSampleSize());
      assertEquals(100, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      int int0 = hypergeometricDistribution0.inverseCumulativeProbability(0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(100, hypergeometricDistribution0.getSampleSize());
      assertEquals(100, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, int0);
      
      int int1 = hypergeometricDistribution0.getSampleSize();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(100, hypergeometricDistribution0.getSampleSize());
      assertEquals(100, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertFalse(int1 == int0);
      assertEquals(100, int1);
      
      int int2 = hypergeometricDistribution0.getPopulationSize();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(100, hypergeometricDistribution0.getSampleSize());
      assertEquals(100, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(100, int2);
      
      double double1 = hypergeometricDistribution0.upperCumulativeProbability(486);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(100, hypergeometricDistribution0.getSampleSize());
      assertEquals(100, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = hypergeometricDistribution0.getNumericalMean();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(100, hypergeometricDistribution0.getSampleSize());
      assertEquals(100, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = hypergeometricDistribution0.calculateNumericalVariance();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(100, hypergeometricDistribution0.getSampleSize());
      assertEquals(100, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(0.0, double3, 0.01);
      
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(100, hypergeometricDistribution0.getSampleSize());
      assertEquals(100, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(boolean0);
      
      double double4 = hypergeometricDistribution0.cumulativeProbability((-1244));
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(100, hypergeometricDistribution0.getSampleSize());
      assertEquals(100, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(double4, double2, 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(0.0, double4, 0.01);
      
      int int3 = hypergeometricDistribution0.getPopulationSize();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(100, hypergeometricDistribution0.getSampleSize());
      assertEquals(100, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(100, int3);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a();
      assertNotNull(well19937a0);
      
      int int0 = 1;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 1, (-270), (-270));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-270)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      assertNotNull(well44497b0);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 915, 915, 1456);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (1,456) must be less than or equal to population size (915)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(578, 578, 1);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(578, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(578, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(578, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(578, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, int0);
      
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(578, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(578, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1336, 0, 1336);
      assertEquals(1336, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1336, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.solveInverseCumulativeProbability(1572.362221281, 1, 1);
      assertEquals(1336, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1336, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, int0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability((-3337));
      assertEquals(1336, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1336, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1.0, double0, 0.01);
      
      int int1 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(1336, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1336, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = hypergeometricDistribution0.sample();
      assertEquals(1336, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1336, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      int int3 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(1336, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1336, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals(0, int3);
      
      double double1 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(1336, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1336, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = hypergeometricDistribution0.cumulativeProbability(0, 0);
      assertEquals(1336, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1336, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      hypergeometricDistribution0.reseedRandomGenerator(802L);
      assertEquals(1336, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1336, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double3 = hypergeometricDistribution0.probability((-355));
      assertEquals(1336, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1336, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(0.0, double3, 0.01);
      
      int int4 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(1336, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1336, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertEquals(1336, int4);
      
      int int5 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(1336, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1336, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertTrue(int5 == int3);
      assertFalse(int5 == int4);
      assertTrue(int5 == int2);
      assertTrue(int5 == int1);
      assertFalse(int5 == int0);
      assertEquals(0, int5);
      
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertEquals(1336, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1336, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertTrue(boolean0);
      
      int int6 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(1336, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1336, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertTrue(int6 == int2);
      assertTrue(int6 == int3);
      assertTrue(int6 == int5);
      assertFalse(int6 == int0);
      assertTrue(int6 == int1);
      assertFalse(int6 == int4);
      assertEquals(0, int6);
      
      double double4 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(1336, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1336, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotEquals(double4, double0, 0.01);
      assertEquals(double4, double2, 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals(double4, double1, 0.01);
      assertEquals(0.0, double4, 0.01);
      
      int int7 = hypergeometricDistribution0.getSampleSize();
      assertEquals(1336, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1336, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertFalse(int7 == int5);
      assertFalse(int7 == int3);
      assertFalse(int7 == int1);
      assertFalse(int7 == int2);
      assertFalse(int7 == int0);
      assertFalse(int7 == int6);
      assertTrue(int7 == int4);
      assertEquals(1336, int7);
      
      double double5 = hypergeometricDistribution0.probability((-3337));
      assertEquals(1336, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1336, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(double5, double4, 0.01);
      assertEquals(double5, double3, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertEquals(double5, double2, 0.01);
      assertEquals(double5, double1, 0.01);
      assertEquals(0.0, double5, 0.01);
      
      double double6 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(1336, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1336, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(double6, double2, 0.01);
      assertEquals(double6, double1, 0.01);
      assertEquals(double6, double5, 0.01);
      assertEquals(double6, double3, 0.01);
      assertEquals(double6, double4, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertEquals(0.0, double6, 0.01);
      
      double double7 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(1336, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1336, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(double7, double3, 0.01);
      assertEquals(double7, double5, 0.01);
      assertEquals(double7, double1, 0.01);
      assertEquals(double7, double2, 0.01);
      assertEquals(double7, double6, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertEquals(double7, double4, 0.01);
      assertEquals(0.0, double7, 0.01);
      
      int int8 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(1336, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1336, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertTrue(int8 == int3);
      assertTrue(int8 == int1);
      assertTrue(int8 == int5);
      assertTrue(int8 == int2);
      assertFalse(int8 == int0);
      assertFalse(int8 == int4);
      assertFalse(int8 == int7);
      assertTrue(int8 == int6);
      assertEquals(0, int8);
      
      int int9 = hypergeometricDistribution0.getSampleSize();
      assertEquals(1336, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1336, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertFalse(int9 == int3);
      assertTrue(int9 == int4);
      assertFalse(int9 == int2);
      assertFalse(int9 == int0);
      assertFalse(int9 == int1);
      assertFalse(int9 == int5);
      assertFalse(int9 == int8);
      assertFalse(int9 == int6);
      assertTrue(int9 == int7);
      assertEquals(1336, int9);
      
      double double8 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertEquals(1336, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1336, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(double8, double0, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertEquals(1.0, double8, 0.01);
      
      double double9 = hypergeometricDistribution0.upperCumulativeProbability(1336);
      assertEquals(1336, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1336, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(double9, double2, 0.01);
      assertEquals(double9, double1, 0.01);
      assertEquals(double9, double6, 0.01);
      assertEquals(double9, double5, 0.01);
      assertEquals(double9, double7, 0.01);
      assertEquals(double9, double3, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertEquals(double9, double4, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertEquals(0.0, double9, 0.01);
      
      int int10 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(1336, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1336, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertTrue(int10 == int6);
      assertFalse(int10 == int7);
      assertTrue(int10 == int1);
      assertFalse(int10 == int4);
      assertTrue(int10 == int2);
      assertTrue(int10 == int3);
      assertFalse(int10 == int9);
      assertTrue(int10 == int5);
      assertFalse(int10 == int0);
      assertTrue(int10 == int8);
      assertEquals(0, int10);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1439, 1439, 1439);
      assertEquals(1439, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1439.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1439, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1439, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(1439, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1439.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1439, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1439, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      assertNotNull(well512a0);
      
      long long0 = well512a0.nextLong();
      assertEquals((-8343629910827964027L), long0);
      
      boolean boolean0 = well512a0.nextBoolean();
      assertTrue(boolean0);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 2605, 0, (-135));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-135)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(3025);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 3025, 0, 0);
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.inverseCumulativeProbability(0.0);
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.upperCumulativeProbability(1684);
      well19937a0.nextInt(2);
      double double1 = hypergeometricDistribution0.upperCumulativeProbability(3025);
      well19937a0.setSeed(2473L);
      well19937a0.setSeed(0L);
      double double2 = hypergeometricDistribution0.probability((-4350));
      assertEquals(0.0, double2, 0.01);
      
      hypergeometricDistribution0.getSupportUpperBound();
      double double3 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double3, 0.01);
      
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.upperCumulativeProbability(1253);
      well19937a0.nextFloat();
      well19937a0.setSeed(0);
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.isSupportConnected();
      double double4 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertEquals(1.0, double4, 0.01);
      
      double double5 = hypergeometricDistribution0.probability(0);
      assertEquals(Double.NaN, double5, 0.01);
      assertNotEquals(double5, double0, 0.01);
      
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      
      double double6 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(double6, double1, 0.01);
      
      hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(3025, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a();
      well19937a0.nextLong();
      int int0 = (-141);
      int int1 = 3784;
      well19937a0.nextLong();
      well19937a0.setSeed((-141));
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, (-141), (-141), 3784);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-141)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 220;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((-626), 220, (-1336));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-626)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(0, 0, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 1667;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 711;
      ISAACRandom iSAACRandom0 = new ISAACRandom(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 1667, 0, 0);
      hypergeometricDistribution0.sample(711);
      iSAACRandom0.setSeed((long) 0);
      hypergeometricDistribution0.getSupportUpperBound();
      double double0 = hypergeometricDistribution0.probability(0);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = hypergeometricDistribution0.upperCumulativeProbability(1667);
      assertEquals(0.0, double1, 0.01);
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, int0);
      assertEquals(1667, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Well512a well512a0 = new Well512a(470);
      int[] intArray0 = new int[7];
      intArray0[0] = 470;
      intArray0[1] = 470;
      intArray0[2] = 470;
      intArray0[3] = 0;
      intArray0[4] = 470;
      intArray0[5] = 470;
      intArray0[6] = 470;
      well512a0.setSeed(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 470, 470, 470);
      hypergeometricDistribution0.probability(470);
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      
      well512a0.nextLong();
      double double0 = hypergeometricDistribution0.probability(470);
      assertEquals(Double.NaN, double0, 0.01);
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(470, int0);
      
      double double1 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((-1), (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-1)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }
}
