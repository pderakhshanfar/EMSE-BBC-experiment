/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 12:17:43 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1186, 1186, 1186);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1186, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1186, hypergeometricDistribution0.getSampleSize());
      assertEquals(1186, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1186.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertEquals(1186, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1186, hypergeometricDistribution0.getSampleSize());
      assertEquals(1186, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1186.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1210, 0, 1210);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1210, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1210, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(0, 1210);
      assertEquals(1210, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1210, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1, 0, 194);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (194) must be less than or equal to population size (1)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(1072);
      assertNotNull(well44497a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1072, 1371, 130);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (1,371) must be less than or equal to population size (1,072)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      assertNotNull(well44497a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1008, (-2344), 101);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-2,344)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom((int[]) null);
      assertNotNull(iSAACRandom0);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, (-2610), 823, 823);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-2,610)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[3];
      Well44497a well44497a0 = new Well44497a(intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertNotNull(well44497a0);
      assertEquals(3, intArray0.length);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 2652, 194, 194);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(194, hypergeometricDistribution0.getSampleSize());
      assertEquals(14.19155354449472, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(194, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2652, hypergeometricDistribution0.getPopulationSize());
      assertEquals(3, intArray0.length);
      
      double double0 = hypergeometricDistribution0.probability(194);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(194, hypergeometricDistribution0.getSampleSize());
      assertEquals(14.19155354449472, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(194, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2652, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.2402275097701953E-300, double0, 0.01);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1210, 0, 1210);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1210, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1210, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1210, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1210, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1186, 1186, 1186);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1186.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1186, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1186, hypergeometricDistribution0.getSampleSize());
      assertEquals(1186, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1186.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1186, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1186, hypergeometricDistribution0.getSampleSize());
      assertEquals(1186, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1186, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1813, 1813, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1813, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1813, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1813, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1813, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1186, 1186, 1186);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1186, hypergeometricDistribution0.getSampleSize());
      assertEquals(1186, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1186.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1186, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(1186, hypergeometricDistribution0.getSampleSize());
      assertEquals(1186, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1186.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1186, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1186, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1813, 1813, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1813, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1813, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1813, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1813, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1210, 0, 1210);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1210, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1210, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1210, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1210, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1673, 1673, 1673);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1673, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1673, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1673, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1673.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(1673, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1673, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1673, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1673.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1673.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1140807170, 2562, 1140807170);
      assertNotNull(hypergeometricDistribution0);
      assertEquals((-1.862504980574412), hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1140807170, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2562, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1140807170, hypergeometricDistribution0.getSampleSize());
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals((-1.862504980574412), hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1140807170, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2562, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1140807170, hypergeometricDistribution0.getSampleSize());
      assertEquals((-1.862504980574412), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1210, 0, 1210);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1210, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1210, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(1210, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1210, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1271, 1271, 1271);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1271.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1271, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1271, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1271, hypergeometricDistribution0.getSampleSize());
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(1202);
      assertEquals(1271.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1271, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1271, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1271, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1117, 1117, 1117);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1117, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1117, hypergeometricDistribution0.getSampleSize());
      assertEquals(1117.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1117, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(1117, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1117, hypergeometricDistribution0.getSampleSize());
      assertEquals(1117.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1117, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[3];
      Well44497a well44497a0 = new Well44497a(intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertNotNull(well44497a0);
      assertEquals(3, intArray0.length);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 2652, 194, 194);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(194, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2652, hypergeometricDistribution0.getPopulationSize());
      assertEquals(194, hypergeometricDistribution0.getSampleSize());
      assertEquals(14.19155354449472, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3, intArray0.length);
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(194, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2652, hypergeometricDistribution0.getPopulationSize());
      assertEquals(194, hypergeometricDistribution0.getSampleSize());
      assertEquals(14.19155354449472, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(12.19580438202275, double0, 0.01);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      assertNotNull(well512a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 4853, 1982, 1104);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1104, hypergeometricDistribution0.getSampleSize());
      assertEquals(1982, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(450.8815165876777, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(4853, hypergeometricDistribution0.getPopulationSize());
      
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability(11);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1186, 1186, 1186);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1186, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1186.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1186, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1186, hypergeometricDistribution0.getSampleSize());
      
      double double0 = hypergeometricDistribution0.probability(1186);
      assertEquals(1186, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1186.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1186, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1186, hypergeometricDistribution0.getSampleSize());
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1210, 0, 1210);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1210, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1210, hypergeometricDistribution0.getPopulationSize());
      
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1210, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1210, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1210, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int[] intArray0 = new int[3];
      Well44497a well44497a0 = new Well44497a(intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertNotNull(well44497a0);
      assertEquals(3, intArray0.length);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 2652, 194, 194);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(2652, hypergeometricDistribution0.getPopulationSize());
      assertEquals(14.19155354449472, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(194, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(194, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3, intArray0.length);
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(2652, hypergeometricDistribution0.getPopulationSize());
      assertEquals(14.19155354449472, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(194, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(194, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(194, int0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int[] intArray0 = new int[3];
      Well44497a well44497a0 = new Well44497a(intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertNotNull(well44497a0);
      assertEquals(3, intArray0.length);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 2652, 194, 194);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(14.19155354449472, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(194, hypergeometricDistribution0.getSampleSize());
      assertEquals(194, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2652, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3, intArray0.length);
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(14.19155354449472, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(194, hypergeometricDistribution0.getSampleSize());
      assertEquals(194, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2652, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(194, int0);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int[] intArray0 = new int[3];
      Well44497a well44497a0 = new Well44497a(intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertNotNull(well44497a0);
      assertEquals(3, intArray0.length);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 2652, 194, 194);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(194, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2652, hypergeometricDistribution0.getPopulationSize());
      assertEquals(14.19155354449472, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(194, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3, intArray0.length);
      
      int int0 = hypergeometricDistribution0.sample();
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(194, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2652, hypergeometricDistribution0.getPopulationSize());
      assertEquals(14.19155354449472, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(194, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(14, int0);
      assertEquals(3, intArray0.length);
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(194, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2652, hypergeometricDistribution0.getPopulationSize());
      assertEquals(14.19155354449472, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(194, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(12.19580438202275, double0, 0.01);
      assertEquals(3, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(75, 75, 75);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(75, hypergeometricDistribution0.getPopulationSize());
      assertEquals(75, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(75.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(75, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(884);
      assertEquals(75, hypergeometricDistribution0.getPopulationSize());
      assertEquals(75, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(75.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(75, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2393, 2393, 2393);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2393, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2393, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2393, hypergeometricDistribution0.getSampleSize());
      assertEquals(2393.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(2393);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2393, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2393, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2393, hypergeometricDistribution0.getSampleSize());
      assertEquals(2393.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(446, 191, 191);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(191);
      assertEquals(1.4462111670228225E-131, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(201, 201, 201);
      double double0 = hypergeometricDistribution0.probability(1540);
      assertEquals(0.0, double0, 0.01);
      assertEquals(201.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1813, 1813, 0);
      double double0 = hypergeometricDistribution0.probability((-429));
      assertEquals(0.0, double0, 0.01);
      assertEquals(1813, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1813, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1694, 738, 738);
      double double0 = hypergeometricDistribution0.cumulativeProbability(339);
      assertEquals(0.9622231261240439, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1115, 1115, (-462));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-462)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1446, 1446, 1446);
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertEquals(1446.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1210, 0, 1210);
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(1210, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1210, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1117, 1117, 1117);
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1117.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }
}
