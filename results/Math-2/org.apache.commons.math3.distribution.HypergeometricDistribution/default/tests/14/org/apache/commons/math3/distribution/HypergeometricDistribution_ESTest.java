/*
 * This file was automatically generated by EvoSuite
 * Fri Feb 26 00:06:11 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3471, 2030, 2030);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2030, hypergeometricDistribution0.getSampleSize());
      assertEquals(2030, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3471, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1187.2371074618266, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(2030);
      assertEquals(0.0, double0, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2030, hypergeometricDistribution0.getSampleSize());
      assertEquals(2030, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3471, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1187.2371074618266, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom();
      assertNotNull(iSAACRandom0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 1005, 1005, 1005);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1005, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1005.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1005, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1005, hypergeometricDistribution0.getPopulationSize());
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(757);
      assertEquals(1.0, double0, 0.01);
      assertEquals(1005, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1005.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1005, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1005, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      assertNotNull(well44497a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1105, 1, 1105);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1105, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1105, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(1, 149);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1105, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1105, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(80, 0, 1124);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (1,124) must be less than or equal to population size (80)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(109, 3471, 109);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (3,471) must be less than or equal to population size (109)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1139, (-1088), 157);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-1,088)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((-1639), (-1423), 1105);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-1,639)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int[] intArray0 = new int[7];
      Well19937a well19937a0 = new Well19937a(intArray0);
      assertNotNull(well19937a0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 0, 0, (-2430));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      assertNotNull(well44497a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1200, 157, 1125);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(147.1875, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(157, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1200, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1125, hypergeometricDistribution0.getSampleSize());
      
      double double0 = hypergeometricDistribution0.probability(157);
      assertEquals(1.881350644035602E-5, double0, 0.01);
      assertEquals(147.1875, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(157, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1200, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1125, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Well512a well512a0 = new Well512a(0L);
      assertNotNull(well512a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 1333, (byte)0, (byte)1);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1333, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(0, int0);
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1333, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2670, 2670, 2670);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(2670, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2670, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2670.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2670, hypergeometricDistribution0.getPopulationSize());
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(2670, int0);
      assertEquals(2670, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2670, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2670.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2670, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      assertNotNull(well512a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 395, 0, 395);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(395, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(395, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(0, int0);
      assertEquals(395, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(395, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2670, 2670, 2670);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(2670, hypergeometricDistribution0.getSampleSize());
      assertEquals(2670.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2670, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2670, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(2670, int0);
      assertEquals(2670, hypergeometricDistribution0.getSampleSize());
      assertEquals(2670.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2670, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2670, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Well512a well512a0 = new Well512a(0L);
      assertNotNull(well512a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 1333, (byte)0, (byte)1);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1333, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(1, int0);
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1333, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Well512a well512a0 = new Well512a(0L);
      assertNotNull(well512a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 1333, (byte)0, (byte)1);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1333, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1333, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2760, 1005, 1005);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1005, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(365.95108695652175, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2760, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1005, hypergeometricDistribution0.getSampleSize());
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(148.01867099023235, double0, 0.01);
      assertEquals(1005, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(365.95108695652175, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2760, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1005, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(100, (byte)0, 100);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(100, hypergeometricDistribution0.getSampleSize());
      assertEquals(100, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(100, hypergeometricDistribution0.getSampleSize());
      assertEquals(100, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2670, 2670, 2670);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(2670, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2670, hypergeometricDistribution0.getSampleSize());
      assertEquals(2670.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2670, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(2670.0, double0, 0.01);
      assertEquals(2670, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2670, hypergeometricDistribution0.getSampleSize());
      assertEquals(2670.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2670, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4345, 1720, 1720);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(4345, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1720, hypergeometricDistribution0.getSampleSize());
      assertEquals(1720, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(680.8745684695052, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(1720, int0);
      assertEquals(4345, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1720, hypergeometricDistribution0.getSampleSize());
      assertEquals(1720, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(680.8745684695052, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2670, 2670, 2670);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(2670, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2670, hypergeometricDistribution0.getSampleSize());
      assertEquals(2670.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2670, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      assertEquals(2670, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2670, hypergeometricDistribution0.getSampleSize());
      assertEquals(2670.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2670, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      assertNotNull(well44497a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1957, 1139, 1139);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1139, hypergeometricDistribution0.getSampleSize());
      assertEquals(1957, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1139, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(662.9131323454267, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(115.87868382062537, double0, 0.01);
      assertEquals(1139, hypergeometricDistribution0.getSampleSize());
      assertEquals(1957, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1139, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(662.9131323454267, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4345, 1720, 1720);
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(724);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2670, 2670, 2670);
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(2670.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2670, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Well512a well512a0 = new Well512a(0L);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 1333, (byte)0, (byte)1);
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1333, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3034, 1034, 1034);
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability(6);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Well512a well512a0 = new Well512a(0L);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 1333, (byte)0, (byte)1);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability((byte)0);
      assertEquals(1.0, double0, 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(1333, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1200, 157, 1125);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(1125);
      assertEquals(0.0, double0, 0.01);
      assertEquals(147.1875, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Well512a well512a0 = new Well512a(0L);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 1333, (byte)0, (byte)1);
      double double0 = hypergeometricDistribution0.probability(19);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(1333, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2670, 2670, 2670);
      double double0 = hypergeometricDistribution0.probability(610);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2670.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2670, 2670, 2670);
      double double0 = hypergeometricDistribution0.cumulativeProbability(2670);
      assertEquals(2670.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2670, 2670, 2670);
      double double0 = hypergeometricDistribution0.cumulativeProbability(1189);
      assertEquals(2670.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Well512a well512a0 = new Well512a(806);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 806, 1467, 1467);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (1,467) must be less than or equal to population size (806)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(2670, 2670, (-828));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-828)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2687, 2687, 2687);
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertEquals(2687.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1327, 96, 96);
      // Undeclared exception!
      hypergeometricDistribution0.sample(1327);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1130, 0, 0);
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(1130, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, int0);
  }
}
