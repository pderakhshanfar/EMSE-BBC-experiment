/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 08:00:01 GMT 2020
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomAdaptor;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.SynchronizedRandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well44497a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(488, 253, 253);
      assertEquals(253, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(131.16598360655738, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(253, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(488, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(253);
      assertEquals(253, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(131.16598360655738, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(253, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(488, hypergeometricDistribution0.getPopulationSize());
      assertEquals(4.827957738372471E-146, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(820, 820, 820);
      assertEquals(820, hypergeometricDistribution0.getSampleSize());
      assertEquals(820, hypergeometricDistribution0.getPopulationSize());
      assertEquals(820.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(820, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability((-4955));
      assertEquals(820, hypergeometricDistribution0.getSampleSize());
      assertEquals(820, hypergeometricDistribution0.getPopulationSize());
      assertEquals(820.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(820, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(990, 0, 990);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(990, hypergeometricDistribution0.getSampleSize());
      assertEquals(990, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(1453);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(990, hypergeometricDistribution0.getSampleSize());
      assertEquals(990, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[6];
      Well19937a well19937a0 = new Well19937a(intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(well19937a0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 544, 1, 4384);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (4,384) must be less than or equal to population size (544)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[6];
      MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
      assertEquals(6, intArray0.length);
      assertNotNull(mersenneTwister0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      RandomAdaptor randomAdaptor0 = new RandomAdaptor(mersenneTwister0);
      assertEquals(6, intArray0.length);
      assertNotNull(randomAdaptor0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0}, intArray0);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(randomAdaptor0, 1, 2, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (2) must be less than or equal to population size (1)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, (-1544), 995, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-1,544)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(33);
      assertNotNull(well44497a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1739, 844, 275);
      assertEquals(275, hypergeometricDistribution0.getSampleSize());
      assertEquals(1739, hypergeometricDistribution0.getPopulationSize());
      assertEquals(844, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(133.46751006325474, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.probability(275);
      assertEquals(275, hypergeometricDistribution0.getSampleSize());
      assertEquals(1739, hypergeometricDistribution0.getPopulationSize());
      assertEquals(844, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(133.46751006325474, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(4.9377331367789514E-99, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(990, 0, 990);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(990, hypergeometricDistribution0.getSampleSize());
      assertEquals(990, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(990, hypergeometricDistribution0.getSampleSize());
      assertEquals(990, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(820, 820, 820);
      assertEquals(820, hypergeometricDistribution0.getSampleSize());
      assertEquals(820, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(820.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(820, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(820, hypergeometricDistribution0.getSampleSize());
      assertEquals(820, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(820.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(820, hypergeometricDistribution0.getPopulationSize());
      assertEquals(820, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1234, 1234, 0);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1234, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1234, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1234, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1234, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(820, 820, 820);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(820, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(820, hypergeometricDistribution0.getPopulationSize());
      assertEquals(820.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(820, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(820, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(820, hypergeometricDistribution0.getPopulationSize());
      assertEquals(820.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(820, hypergeometricDistribution0.getSampleSize());
      assertEquals(820, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(773, 773, 0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(773, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(773, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(773, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(773, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(820, 820, 820);
      assertEquals(820, hypergeometricDistribution0.getSampleSize());
      assertEquals(820, hypergeometricDistribution0.getPopulationSize());
      assertEquals(820, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(820.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(820, hypergeometricDistribution0.getSampleSize());
      assertEquals(820, hypergeometricDistribution0.getPopulationSize());
      assertEquals(820, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(820.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      assertNotNull(jDKRandomGenerator0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(jDKRandomGenerator0, 3187, 316, 1564);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(155.07499215563226, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1564, hypergeometricDistribution0.getSampleSize());
      assertEquals(3187, hypergeometricDistribution0.getPopulationSize());
      assertEquals(316, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(155.07499215563226, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1564, hypergeometricDistribution0.getSampleSize());
      assertEquals(3187, hypergeometricDistribution0.getPopulationSize());
      assertEquals(316, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(71.16486752651625, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(773, 773, 0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(773, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(773, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(773, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(773, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(990);
      assertNotNull(well1024a0);
      
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(well1024a0);
      assertNotNull(synchronizedRandomGenerator0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(synchronizedRandomGenerator0, 3607, 0, 0);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3607, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3607, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(820, 820, 820);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(820, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(820, hypergeometricDistribution0.getSampleSize());
      assertEquals(820, hypergeometricDistribution0.getPopulationSize());
      assertEquals(820.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(820, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(820, hypergeometricDistribution0.getSampleSize());
      assertEquals(820, hypergeometricDistribution0.getPopulationSize());
      assertEquals(820.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1052, 844, 844);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(844, hypergeometricDistribution0.getSampleSize());
      assertEquals(677.1254752851711, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(844, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1052, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(844, hypergeometricDistribution0.getSampleSize());
      assertEquals(677.1254752851711, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(844, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1052, hypergeometricDistribution0.getPopulationSize());
      assertEquals(26.49582017012373, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 535, 535, 535);
      assertEquals(535, hypergeometricDistribution0.getPopulationSize());
      assertEquals(535, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(535, hypergeometricDistribution0.getSampleSize());
      assertEquals(535.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.probability(535);
      assertEquals(535, hypergeometricDistribution0.getPopulationSize());
      assertEquals(535, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(535, hypergeometricDistribution0.getSampleSize());
      assertEquals(535.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(820, 820, 820);
      assertEquals(820, hypergeometricDistribution0.getSampleSize());
      assertEquals(820, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(820.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(820, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(820, hypergeometricDistribution0.getSampleSize());
      assertEquals(820, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(820.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(820, hypergeometricDistribution0.getPopulationSize());
      assertEquals(820, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(820, 820, 820);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(820.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(820, hypergeometricDistribution0.getPopulationSize());
      assertEquals(820, hypergeometricDistribution0.getSampleSize());
      assertEquals(820, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(820.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(820, hypergeometricDistribution0.getPopulationSize());
      assertEquals(820, hypergeometricDistribution0.getSampleSize());
      assertEquals(820, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(820, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(253, 253, 253);
      assertEquals(253, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(253, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(253, hypergeometricDistribution0.getPopulationSize());
      assertEquals(253.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(253, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(253, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(253, hypergeometricDistribution0.getPopulationSize());
      assertEquals(253.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(253, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(253, 253, 253);
      hypergeometricDistribution0.sample(253);
      assertEquals(253.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(253, 253, 253);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(1399);
      assertEquals(0.0, double0, 0.01);
      assertEquals(253.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(253, 253, 253);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(253);
      assertEquals(1.0, double0, 0.01);
      assertEquals(253.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(33);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1739, 844, 275);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(33);
      assertEquals(1.0, double0, 0.01);
      assertEquals(133.46751006325474, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(253, 253, 253);
      double double0 = hypergeometricDistribution0.probability(2464);
      assertEquals(253.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(262, 262, 262);
      double double0 = hypergeometricDistribution0.probability((-1517));
      assertEquals(0.0, double0, 0.01);
      assertEquals(262.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(990, 990, 990);
      double double0 = hypergeometricDistribution0.cumulativeProbability(990);
      assertEquals(1.0, double0, 0.01);
      assertEquals(990.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(592, 592, 592);
      double double0 = hypergeometricDistribution0.cumulativeProbability((-5));
      assertEquals(0.0, double0, 0.01);
      assertEquals(592.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(253, 253, 3073);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (3,073) must be less than or equal to population size (253)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(2757, 2757, (-3047));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-3,047)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(2, (-2509), 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-2,509)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(990, 990, 990);
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      assertEquals(990.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2873, 1098, 1098);
      // Undeclared exception!
      hypergeometricDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(253, 253, 253);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(253.0, double0, 0.01);
  }
}
