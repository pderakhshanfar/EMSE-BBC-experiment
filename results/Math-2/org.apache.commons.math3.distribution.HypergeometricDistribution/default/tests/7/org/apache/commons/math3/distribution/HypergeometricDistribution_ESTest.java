/*
 * This file was automatically generated by EvoSuite
 * Fri Feb 26 00:01:13 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1885, 1195, 1195);
      assertEquals(1195, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1195, hypergeometricDistribution0.getSampleSize());
      assertEquals(757.5729442970822, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1885, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(1195);
      assertEquals(1195, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1195, hypergeometricDistribution0.getSampleSize());
      assertEquals(757.5729442970822, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1885, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b((-1298L));
      assertNotNull(well44497b0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 498, 498, 498);
      assertEquals(498.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(498, hypergeometricDistribution0.getSampleSize());
      assertEquals(498, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(498, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability((-1));
      assertEquals(498.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(498, hypergeometricDistribution0.getSampleSize());
      assertEquals(498, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(498, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(172, 172, 172);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(172, hypergeometricDistribution0.getPopulationSize());
      assertEquals(172, hypergeometricDistribution0.getSampleSize());
      assertEquals(172, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(172.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(374);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(172, hypergeometricDistribution0.getPopulationSize());
      assertEquals(172, hypergeometricDistribution0.getSampleSize());
      assertEquals(172, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(172.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1191, 172, 1757);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (1,757) must be less than or equal to population size (1,191)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 739, 1630, 739);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (1,630) must be less than or equal to population size (739)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1398, (-486), (-64));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-486)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[7];
      MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
      assertEquals(7, intArray0.length);
      assertNotNull(mersenneTwister0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 0, 303, 1308);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3859, 348, 348);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(348, hypergeometricDistribution0.getSampleSize());
      assertEquals(3859, hypergeometricDistribution0.getPopulationSize());
      assertEquals(31.38222337393107, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(348, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.probability(2);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(348, hypergeometricDistribution0.getSampleSize());
      assertEquals(3859, hypergeometricDistribution0.getPopulationSize());
      assertEquals(31.38222337393107, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(348, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(7.239204773129689E-13, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom();
      assertNotNull(iSAACRandom0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 1131, 0, 0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1131, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1131, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(172, 172, 172);
      assertEquals(172, hypergeometricDistribution0.getPopulationSize());
      assertEquals(172, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(172, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(172.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(172, hypergeometricDistribution0.getPopulationSize());
      assertEquals(172, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(172, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(172.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(172, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom();
      assertNotNull(iSAACRandom0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 1131, 0, 0);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1131, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1131, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3164, 3164, 3164);
      assertEquals(3164, hypergeometricDistribution0.getPopulationSize());
      assertEquals(3164, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3164, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3164.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(3164, hypergeometricDistribution0.getPopulationSize());
      assertEquals(3164, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3164, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3164.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3164, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(172, 172, 172);
      assertEquals(172, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(172.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(172, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(172, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(172, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(172.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(172, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(172, hypergeometricDistribution0.getSampleSize());
      assertEquals(172, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(172, 172, 172);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(172, hypergeometricDistribution0.getPopulationSize());
      assertEquals(172, hypergeometricDistribution0.getSampleSize());
      assertEquals(172, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(172.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(172, hypergeometricDistribution0.getPopulationSize());
      assertEquals(172, hypergeometricDistribution0.getSampleSize());
      assertEquals(172, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(172.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1487, 1487, 0);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1487, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1487, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1487, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1487, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(172, 172, 172);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(172, hypergeometricDistribution0.getPopulationSize());
      assertEquals(172, hypergeometricDistribution0.getSampleSize());
      assertEquals(172, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(172.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(172, hypergeometricDistribution0.getPopulationSize());
      assertEquals(172, hypergeometricDistribution0.getSampleSize());
      assertEquals(172, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(172.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(172, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(172, 172, 172);
      assertEquals(172.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(172, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(172, hypergeometricDistribution0.getSampleSize());
      assertEquals(172, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(172.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(172, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(172, hypergeometricDistribution0.getSampleSize());
      assertEquals(172, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      assertNotNull(jDKRandomGenerator0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(jDKRandomGenerator0, 3815, 172, 503);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(172, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(22.677850589777194, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3815, hypergeometricDistribution0.getPopulationSize());
      assertEquals(503, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(172, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(22.677850589777194, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3815, hypergeometricDistribution0.getPopulationSize());
      assertEquals(503, hypergeometricDistribution0.getSampleSize());
      assertEquals(18.805122118320046, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3576, 1265, 1265);
      assertEquals(3576, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1265, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1265, hypergeometricDistribution0.getSampleSize());
      assertEquals(447.4902125279642, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(1217);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, (-1816), (-1816), (-1816));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-1,816)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(705);
      assertNotNull(well44497b0);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 437, 705, 705);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (705) must be less than or equal to population size (437)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom();
      assertNotNull(iSAACRandom0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 1131, 0, 0);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1131, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1131, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1131, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom();
      assertNotNull(iSAACRandom0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 1131, 0, 0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1131, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1131, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom();
      assertNotNull(iSAACRandom0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 1131, 0, 0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1131, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1131, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(498, 1, 228);
      assertEquals(498, hypergeometricDistribution0.getPopulationSize());
      assertEquals(228, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.4578313253012048, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(498, hypergeometricDistribution0.getPopulationSize());
      assertEquals(228, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.4578313253012048, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.2482218028741472, double0, 0.01);
      
      double double1 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(498, hypergeometricDistribution0.getPopulationSize());
      assertEquals(228, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.4578313253012048, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.2482218028741472, double1, 0.01);
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(172, 172, 172);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(172, hypergeometricDistribution0.getSampleSize());
      assertEquals(172, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(172.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(172, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(1023);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(172, hypergeometricDistribution0.getSampleSize());
      assertEquals(172, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(172.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(172, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(498, 1, 228);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(498, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.4578313253012048, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(228, hypergeometricDistribution0.getSampleSize());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(498, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.4578313253012048, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(228, hypergeometricDistribution0.getSampleSize());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      assertNotNull(well44497a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 2263, 350, 350);
      assertEquals(350, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(350, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2263, hypergeometricDistribution0.getPopulationSize());
      assertEquals(54.13168360583297, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.probability(2263);
      assertEquals(350, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(350, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2263, hypergeometricDistribution0.getPopulationSize());
      assertEquals(54.13168360583297, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(5122, 5122, 5122);
      assertEquals(5122, hypergeometricDistribution0.getSampleSize());
      assertEquals(5122.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(5122, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(5122, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.probability(103);
      assertEquals(5122, hypergeometricDistribution0.getSampleSize());
      assertEquals(5122.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(5122, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(5122, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom();
      assertNotNull(iSAACRandom0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 1131, 0, 0);
      assertEquals(1131, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(0);
      assertEquals(1131, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2, 2, 2);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(1);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(15, 15, (-1559));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1,559)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom();
      assertNotNull(iSAACRandom0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 1131, 0, 0);
      assertEquals(1131, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertEquals(1131, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3559, 967, 967);
      // Undeclared exception!
      hypergeometricDistribution0.sample(3559);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3910, 1709, 1709);
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability(359);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3145, 3145, 3145);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(3145.0, double0, 0.01);
  }
}
