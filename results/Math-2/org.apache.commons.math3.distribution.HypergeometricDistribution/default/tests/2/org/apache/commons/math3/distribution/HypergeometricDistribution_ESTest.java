/*
 * This file was automatically generated by EvoSuite
 * Thu Feb 25 23:59:56 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Well512a well512a0 = new Well512a(0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 408, 112, 0);
      int int0 = hypergeometricDistribution0.inverseCumulativeProbability(9.390271617387205E-237);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(408, hypergeometricDistribution0.getPopulationSize());
      assertEquals(112, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1290, 1209, 1209);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(1209);
      assertEquals(8.31107889717927E-131, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Well512a well512a0 = new Well512a(0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 408, 112, 0);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability((-898));
      assertEquals(112, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(408, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Well512a well512a0 = new Well512a(0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 408, 112, 0);
      double double0 = hypergeometricDistribution0.cumulativeProbability(4111);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(408, hypergeometricDistribution0.getPopulationSize());
      assertEquals(112, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Well512a well512a0 = new Well512a(0);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 112, 2, 2332);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (2,332) must be less than or equal to population size (112)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[6];
      Well19937a well19937a0 = new Well19937a(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 1, 256, 2513);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (256) must be less than or equal to population size (1)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((-1537), 0, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-1,537)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(0, 596, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Well512a well512a0 = new Well512a(0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 408, 112, 0);
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(0, int0);
      assertEquals(112, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(408, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2, 2, 2);
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(408, 0, 0);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(408, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, int0);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2, 2, 2);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Well512a well512a0 = new Well512a(0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 408, 112, 0);
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(408, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(112, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Well512a well512a0 = new Well512a(699);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 1656, 696, 699);
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(98.48065380156369, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Well512a well512a0 = new Well512a(0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 408, 112, 0);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(0.0, double0, 0.01);
      assertEquals(408, hypergeometricDistribution0.getPopulationSize());
      assertEquals(112, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(408, 0, 0);
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(408, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Well512a well512a0 = new Well512a(0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 408, 112, 0);
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(112, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double0, 0.01);
      assertEquals(408, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1098, 14, 2);
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.025152812875569662, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2227, 1414, 1414);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(724);
      assertEquals(0.9999999999999994, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2191, 861, 861);
      double double0 = hypergeometricDistribution0.cumulativeProbability(783);
      assertEquals(0.9999999999999996, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Well512a well512a0 = new Well512a(0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 408, 112, 0);
      double double0 = hypergeometricDistribution0.probability(0);
      assertEquals(1.0, double0, 0.01);
      assertEquals(408, hypergeometricDistribution0.getPopulationSize());
      assertEquals(112, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1, 1, 1);
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Well512a well512a0 = new Well512a(699);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 1656, 696, 699);
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(293.7826086956522, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(696, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int[] intArray0 = new int[9];
      Well512a well512a0 = new Well512a(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 732, 2, 2);
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(0.00546448087431694, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2, 2, 2);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(112);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(32, 32, 32);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(32);
      assertEquals(32.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Well512a well512a0 = new Well512a(0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 408, 112, 0);
      double double0 = hypergeometricDistribution0.probability(3090);
      assertEquals(0.0, double0, 0.01);
      assertEquals(408, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(112, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3050, 3050, 3050);
      double double0 = hypergeometricDistribution0.probability((-2817));
      assertEquals(0.0, double0, 0.01);
      assertEquals(3050.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1, 1, 1);
      double double0 = hypergeometricDistribution0.cumulativeProbability(1);
      assertEquals(1.0, double0, 0.01);
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(997, 997, 997);
      double double0 = hypergeometricDistribution0.cumulativeProbability((-1135));
      assertEquals(0.0, double0, 0.01);
      assertEquals(997.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(8, 8, 1342);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (1,342) must be less than or equal to population size (8)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(127, 127, (-3147));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-3,147)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(10, (-44), 3345);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-44)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a();
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, (-1460), (-1460), (-1460));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-1,460)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1, 1, 1);
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2, 2, 2);
      hypergeometricDistribution0.sample();
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1, 1, 1);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(1.0, double0, 0.01);
  }
}
