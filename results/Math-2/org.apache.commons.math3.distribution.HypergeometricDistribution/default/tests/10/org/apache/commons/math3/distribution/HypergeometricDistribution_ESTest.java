/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 12:14:16 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1077, 285, 285);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1077, hypergeometricDistribution0.getPopulationSize());
      assertEquals(285, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(75.41782729805014, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(285, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(285);
      assertEquals(1.926294353459727E-269, double0, 0.01);
      assertEquals(1077, hypergeometricDistribution0.getPopulationSize());
      assertEquals(285, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(75.41782729805014, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(285, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1413, 1413, 1413);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1413, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1413, hypergeometricDistribution0.getSampleSize());
      assertEquals(1413.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1413, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability((-1));
      assertEquals(1.0, double0, 0.01);
      assertEquals(1413, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1413, hypergeometricDistribution0.getSampleSize());
      assertEquals(1413.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1413, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(515, 0, 808);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (808) must be less than or equal to population size (515)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(2, 2187, 1093);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (2,187) must be less than or equal to population size (2)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom(0L);
      assertNotNull(iSAACRandom0);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, (-919), (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-919)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[7];
      Well1024a well1024a0 = new Well1024a(intArray0);
      assertNotNull(well1024a0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 0, 0, 570);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(406, 2, 348);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1.7142857142857142, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(406, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(348, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double0 = hypergeometricDistribution0.probability(2);
      assertEquals(0.7343915343915343, double0, 0.01);
      assertEquals(1.7142857142857142, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(406, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(348, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1144, 0, 0);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1144, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(0, int0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1144, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(349, 349, 349);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(349, hypergeometricDistribution0.getPopulationSize());
      assertEquals(349.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(349, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(349, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(349, int0);
      assertEquals(349, hypergeometricDistribution0.getPopulationSize());
      assertEquals(349.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(349, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(349, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int[] intArray0 = new int[9];
      Well44497b well44497b0 = new Well44497b(intArray0);
      assertNotNull(well44497b0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 3695, 0, 1021);
      assertNotNull(hypergeometricDistribution0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(1021, hypergeometricDistribution0.getSampleSize());
      assertEquals(3695, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(0, int0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(9, intArray0.length);
      assertEquals(1021, hypergeometricDistribution0.getSampleSize());
      assertEquals(3695, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(349, 349, 349);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(349, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(349, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(349, hypergeometricDistribution0.getPopulationSize());
      assertEquals(349.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(349, int0);
      assertEquals(349, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(349, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(349, hypergeometricDistribution0.getPopulationSize());
      assertEquals(349.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(806, 806, 308);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(806, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(308.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(308, hypergeometricDistribution0.getSampleSize());
      assertEquals(806, hypergeometricDistribution0.getPopulationSize());
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(308, int0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(806, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(308.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(308, hypergeometricDistribution0.getSampleSize());
      assertEquals(806, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(349, 349, 349);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(349.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(349, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(349, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(349, hypergeometricDistribution0.getSampleSize());
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      assertEquals(349.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(349, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(349, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(349, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1253, 714, 800);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(800, hypergeometricDistribution0.getSampleSize());
      assertEquals(1253, hypergeometricDistribution0.getPopulationSize());
      assertEquals(714, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(455.8659217877095, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(70.95266218911014, double0, 0.01);
      assertEquals(800, hypergeometricDistribution0.getSampleSize());
      assertEquals(1253, hypergeometricDistribution0.getPopulationSize());
      assertEquals(714, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(455.8659217877095, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(83, 0, 83);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(83, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(83, hypergeometricDistribution0.getSampleSize());
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(0.0, double0, 0.01);
      assertEquals(83, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(83, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(35, 35, 35);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(35, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(35, hypergeometricDistribution0.getSampleSize());
      assertEquals(35.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(35, hypergeometricDistribution0.getPopulationSize());
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(35.0, double0, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(35, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(35, hypergeometricDistribution0.getSampleSize());
      assertEquals(35.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(35, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(83, 0, 83);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(83, hypergeometricDistribution0.getPopulationSize());
      assertEquals(83, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(0, int0);
      assertEquals(83, hypergeometricDistribution0.getPopulationSize());
      assertEquals(83, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1113, 1113, 1113);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1113.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1113, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1113, hypergeometricDistribution0.getSampleSize());
      assertEquals(1113, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(1113);
      assertEquals(1.0, double0, 0.01);
      assertEquals(1113.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1113, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1113, hypergeometricDistribution0.getSampleSize());
      assertEquals(1113, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(11, 11, 11);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(11, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(11, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(11, hypergeometricDistribution0.getPopulationSize());
      assertEquals(11.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      assertEquals(11, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(11, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(11, hypergeometricDistribution0.getPopulationSize());
      assertEquals(11.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3865, 1674, 1674);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(3865, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1674, hypergeometricDistribution0.getSampleSize());
      assertEquals(725.0390685640363, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1674, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(233.05560284467182, double0, 0.01);
      assertEquals(3865, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1674, hypergeometricDistribution0.getSampleSize());
      assertEquals(725.0390685640363, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1674, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(5668, 2000, 1675);
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability(207);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4195912, 3739, 3739);
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(894);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 2, 2, 1333);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (1,333) must be less than or equal to population size (2)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(806, 806, 308);
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(308.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(806, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 569, 569, 569);
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(569.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(569, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a((int[]) null);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 3561, 0, 0);
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(3561, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, int0);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(406, 406, 406);
      hypergeometricDistribution0.sample(406);
      assertEquals(406.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(14, 14, 14);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(14);
      assertEquals(1.0, double0, 0.01);
      assertEquals(14.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(406, 406, 406);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(882);
      assertEquals(406.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(32, 0, 32);
      double double0 = hypergeometricDistribution0.probability(13);
      assertEquals(32, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(32, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(406, 406, 406);
      double double0 = hypergeometricDistribution0.probability(376);
      assertEquals(406.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(406, 406, 406);
      double double0 = hypergeometricDistribution0.cumulativeProbability((-2722));
      assertEquals(406.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(2846, 2846, (-5247));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-5,247)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(14, (-2104), 14);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-2,104)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(11, 11, 11);
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertEquals(11.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(Integer.MAX_VALUE, Integer.MAX_VALUE, 1612);
      hypergeometricDistribution0.solveInverseCumulativeProbability((-1.0), 1612, Integer.MAX_VALUE);
      assertEquals((-7.506459954896225E-7), hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(Integer.MAX_VALUE, Integer.MAX_VALUE, 1612);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals((-7.506459954896225E-7), double0, 0.01);
  }
}
