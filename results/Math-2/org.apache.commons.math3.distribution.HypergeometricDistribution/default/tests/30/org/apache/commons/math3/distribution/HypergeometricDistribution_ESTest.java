/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 08:05:33 GMT 2020
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.RandomAdaptor;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1830, 280, 280);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(280, hypergeometricDistribution0.getSampleSize());
      assertEquals(280, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1830, hypergeometricDistribution0.getPopulationSize());
      assertEquals(42.84153005464481, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(280);
      assertEquals(0.0, double0, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(280, hypergeometricDistribution0.getSampleSize());
      assertEquals(280, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1830, hypergeometricDistribution0.getPopulationSize());
      assertEquals(42.84153005464481, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2711, 196, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2711, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(196, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability((-4299));
      assertEquals(1.0, double0, 0.01);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2711, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(196, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1796, 0, 2882);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (2,882) must be less than or equal to population size (1,796)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((-1), 2483, 2047);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-1)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(1186);
      assertNotNull(well44497b0);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(739, 739, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(739, hypergeometricDistribution0.getPopulationSize());
      assertEquals(739, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(0, int0);
      assertEquals(739, hypergeometricDistribution0.getPopulationSize());
      assertEquals(739, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3241, 1125, 3241);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1125, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1125.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3241, hypergeometricDistribution0.getSampleSize());
      assertEquals(3241, hypergeometricDistribution0.getPopulationSize());
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(1125, int0);
      assertEquals(1125, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1125.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3241, hypergeometricDistribution0.getSampleSize());
      assertEquals(3241, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(739, 739, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(739, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(739, hypergeometricDistribution0.getPopulationSize());
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(0, int0);
      assertEquals(739, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(739, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(739, 739, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(739, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(739, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(0, int0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(739, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(739, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2711, 196, 196);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(196, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(14.17041682036149, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2711, hypergeometricDistribution0.getPopulationSize());
      assertEquals(196, hypergeometricDistribution0.getSampleSize());
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(12.199999010804827, double0, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(196, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(14.17041682036149, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2711, hypergeometricDistribution0.getPopulationSize());
      assertEquals(196, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(739, 739, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(739, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(739, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(0.0, double0, 0.01);
      assertEquals(739, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(739, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3241, 1125, 3241);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(3241, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1125, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3241, hypergeometricDistribution0.getSampleSize());
      assertEquals(1125.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(1125.0, double0, 0.01);
      assertEquals(3241, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1125, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3241, hypergeometricDistribution0.getSampleSize());
      assertEquals(1125.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2, 0, 2);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(0, int0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3241, 1125, 3241);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1125.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1125, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3241, hypergeometricDistribution0.getPopulationSize());
      assertEquals(3241, hypergeometricDistribution0.getSampleSize());
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(2);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1125.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1125, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3241, hypergeometricDistribution0.getPopulationSize());
      assertEquals(3241, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3241, 1125, 3241);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1125.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3241, hypergeometricDistribution0.getSampleSize());
      assertEquals(1125, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3241, hypergeometricDistribution0.getPopulationSize());
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(2947);
      assertEquals(1.0, double0, 0.01);
      assertEquals(1125.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3241, hypergeometricDistribution0.getSampleSize());
      assertEquals(1125, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3241, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2711, 196, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(2711, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(196, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      assertEquals(2711, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(196, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2711, 196, 196);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(196, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2711, hypergeometricDistribution0.getPopulationSize());
      assertEquals(14.17041682036149, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(196, hypergeometricDistribution0.getSampleSize());
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(12.199999010804827, double0, 0.01);
      assertEquals(196, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2711, hypergeometricDistribution0.getPopulationSize());
      assertEquals(14.17041682036149, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(196, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      assertNotNull(well512a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 1378, 3766, 2709);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (3,766) must be less than or equal to population size (1,378)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2711, 196, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(2711, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(196, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double0 = hypergeometricDistribution0.probability(0);
      assertEquals(1.0, double0, 0.01);
      assertEquals(2711, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(196, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c((-734L));
      assertNotNull(well19937c0);
      
      RandomAdaptor randomAdaptor0 = new RandomAdaptor(well19937c0);
      assertNotNull(randomAdaptor0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(randomAdaptor0, 1832, 1832, 1832);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1832, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1832.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1832, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1832, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(1832, int0);
      assertEquals(1832, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1832.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1832, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1832, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3241, 1125, 3241);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1125.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1125, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3241, hypergeometricDistribution0.getPopulationSize());
      assertEquals(3241, hypergeometricDistribution0.getSampleSize());
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(1125, int0);
      assertEquals(1125.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1125, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3241, hypergeometricDistribution0.getPopulationSize());
      assertEquals(3241, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3241, 1125, 3241);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(3241, hypergeometricDistribution0.getSampleSize());
      assertEquals(1125, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3241, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1125.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(3241, int0);
      assertEquals(3241, hypergeometricDistribution0.getSampleSize());
      assertEquals(1125, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3241, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1125.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3241, 1125, 3241);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1125, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3241, hypergeometricDistribution0.getPopulationSize());
      assertEquals(3241, hypergeometricDistribution0.getSampleSize());
      assertEquals(1125.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1125, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3241, hypergeometricDistribution0.getPopulationSize());
      assertEquals(3241, hypergeometricDistribution0.getSampleSize());
      assertEquals(1125.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double1 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double1, 0.01);
      assertEquals(1125, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3241, hypergeometricDistribution0.getPopulationSize());
      assertEquals(3241, hypergeometricDistribution0.getSampleSize());
      assertEquals(1125.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2711, 196, 196);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(2711, hypergeometricDistribution0.getPopulationSize());
      assertEquals(196, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(14.17041682036149, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(196, hypergeometricDistribution0.getSampleSize());
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(2711);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2711, hypergeometricDistribution0.getPopulationSize());
      assertEquals(196, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(14.17041682036149, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(196, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3241, 1125, 3241);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1125, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3241, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1125.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3241, hypergeometricDistribution0.getSampleSize());
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(1125);
      assertEquals(1.0, double0, 0.01);
      assertEquals(1125, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3241, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1125.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3241, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2711, 196, 196);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(14.17041682036149, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(196, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(196, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2711, hypergeometricDistribution0.getPopulationSize());
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(19);
      assertEquals(0.11023820319335315, double0, 0.01);
      assertEquals(14.17041682036149, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(196, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(196, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2711, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3241, 1125, 3241);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(3241, hypergeometricDistribution0.getPopulationSize());
      assertEquals(3241, hypergeometricDistribution0.getSampleSize());
      assertEquals(1125, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1125.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double0 = hypergeometricDistribution0.probability(3241);
      assertEquals(0.0, double0, 0.01);
      assertEquals(3241, hypergeometricDistribution0.getPopulationSize());
      assertEquals(3241, hypergeometricDistribution0.getSampleSize());
      assertEquals(1125, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1125.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1051, 1051, 1051);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1051, hypergeometricDistribution0.getSampleSize());
      assertEquals(1051, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1051.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1051, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.probability((-709));
      assertEquals(0.0, double0, 0.01);
      assertEquals(1051, hypergeometricDistribution0.getSampleSize());
      assertEquals(1051, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1051.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1051, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3241, 1125, 3241);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1125, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3241, hypergeometricDistribution0.getSampleSize());
      assertEquals(1125.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3241, hypergeometricDistribution0.getPopulationSize());
      
      double double0 = hypergeometricDistribution0.cumulativeProbability((-3152), 1125);
      assertEquals(1.0, double0, 0.01);
      assertEquals(1125, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3241, hypergeometricDistribution0.getSampleSize());
      assertEquals(1125.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3241, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(5763, 5763, (-294));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-294)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1378, (-271), 1378);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-271)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3241, 1125, 3241);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1125, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3241, hypergeometricDistribution0.getPopulationSize());
      assertEquals(3241, hypergeometricDistribution0.getSampleSize());
      assertEquals(1125.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      assertEquals(1125, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3241, hypergeometricDistribution0.getPopulationSize());
      assertEquals(3241, hypergeometricDistribution0.getSampleSize());
      assertEquals(1125.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2512, 1632, 1632);
      // Undeclared exception!
      hypergeometricDistribution0.sample(2512);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1051, 1051, 1051);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(1051, int0);
  }
}
