/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 07:58:45 GMT 2020
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4141, 4141, 4141);
      assertEquals(4141, hypergeometricDistribution0.getSampleSize());
      assertEquals(4141, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(4141, hypergeometricDistribution0.getPopulationSize());
      assertEquals(4141.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(4141);
      assertEquals(4141, hypergeometricDistribution0.getSampleSize());
      assertEquals(4141, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(4141, hypergeometricDistribution0.getPopulationSize());
      assertEquals(4141.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2617, 1325, 586);
      assertEquals(1325, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2617, hypergeometricDistribution0.getPopulationSize());
      assertEquals(296.69468857470383, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(586, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(2617);
      assertEquals(1325, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2617, hypergeometricDistribution0.getPopulationSize());
      assertEquals(296.69468857470383, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(586, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 242, 0, 1905);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (1,905) must be less than or equal to population size (242)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister((-1701L));
      assertNotNull(mersenneTwister0);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 1, 1313, 1313);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (1,313) must be less than or equal to population size (1)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((-647), 989, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-647)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(0, 0, (-1736));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      assertNotNull(well44497a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 2553, 133, 133);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(6.928711320015668, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(133, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2553, hypergeometricDistribution0.getPopulationSize());
      assertEquals(133, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.probability(133);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(6.928711320015668, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(133, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2553, hypergeometricDistribution0.getPopulationSize());
      assertEquals(133, hypergeometricDistribution0.getSampleSize());
      assertEquals(3.584219920013998E-226, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 3854, 0, 0);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3854, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3854, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4141, 4141, 4141);
      assertEquals(4141, hypergeometricDistribution0.getSampleSize());
      assertEquals(4141.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(4141, hypergeometricDistribution0.getPopulationSize());
      assertEquals(4141, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(4141, hypergeometricDistribution0.getSampleSize());
      assertEquals(4141.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(4141, hypergeometricDistribution0.getPopulationSize());
      assertEquals(4141, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(4141, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1422, 0, 1422);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1422, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1422, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1422, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1422, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(9, 9, 9);
      assertEquals(9, hypergeometricDistribution0.getPopulationSize());
      assertEquals(9, hypergeometricDistribution0.getSampleSize());
      assertEquals(9.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(9, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(9, hypergeometricDistribution0.getPopulationSize());
      assertEquals(9, hypergeometricDistribution0.getSampleSize());
      assertEquals(9.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(9, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3922, 3922, 3922);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3922, hypergeometricDistribution0.getPopulationSize());
      assertEquals(3922, hypergeometricDistribution0.getSampleSize());
      assertEquals(3922.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3922, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3922, hypergeometricDistribution0.getPopulationSize());
      assertEquals(3922, hypergeometricDistribution0.getSampleSize());
      assertEquals(3922.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3922, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3922, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4141, 4141, 4141);
      assertEquals(4141, hypergeometricDistribution0.getPopulationSize());
      assertEquals(4141.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(4141, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(4141, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(4141, hypergeometricDistribution0.getPopulationSize());
      assertEquals(4141.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(4141, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(4141, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1422, 0, 1422);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1422, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1422, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1422, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1422, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1775, 1775, 1775);
      assertEquals(1775.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1775, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1775, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1775, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(1775.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1775, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1775, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1775, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1775.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c((int[]) null);
      assertNotNull(well19937c0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 418, 0, 418);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(418, hypergeometricDistribution0.getSampleSize());
      assertEquals(418, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(418, hypergeometricDistribution0.getSampleSize());
      assertEquals(418, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(469);
      assertNotNull(well44497b0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 469, 106, 469);
      assertEquals(106, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(469, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(106.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(469, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(106, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(469, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(106.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(469, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom(1);
      assertNotNull(iSAACRandom0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 3726, 854, 236);
      assertEquals(3726, hypergeometricDistribution0.getPopulationSize());
      assertEquals(236, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(854, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(54.09125067096082, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(3726, hypergeometricDistribution0.getPopulationSize());
      assertEquals(236, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(854, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(54.09125067096082, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(39.063194675919846, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(6697, 1308, 1308);
      assertEquals(255.46722413020757, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1308, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(6697, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1308, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability(332);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3869, 700, 1185);
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(663);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, (-3931), (-3931), (-3931));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-3,931)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 2538, 2538, 2538);
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(2538.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2538, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 2538, 2538, 2538);
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(2538.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2538, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(1193);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 1193, 1193, 0);
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1193, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1193, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2617, 1325, 586);
      hypergeometricDistribution0.getNumericalVariance();
      // Undeclared exception!
      hypergeometricDistribution0.sample(1325);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(6697, 1308, 1308);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(6697);
      assertEquals(255.46722413020757, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1, 1, 1);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability((-379));
      assertEquals(1.0, double0, 0.01);
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2617, 1325, 586);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(586);
      assertEquals(4.426211637175004E-210, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3449, 3449, 3449);
      hypergeometricDistribution0.probability(4001);
      assertEquals(3449.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(617, 617, 617);
      double double0 = hypergeometricDistribution0.probability(0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(617.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1108, 1108, 1108);
      double double0 = hypergeometricDistribution0.cumulativeProbability(1108);
      assertEquals(1108.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4415, 4415, 4415);
      double double0 = hypergeometricDistribution0.cumulativeProbability(1654);
      assertEquals(4415.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(24, 24, 2687);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (2,687) must be less than or equal to population size (24)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1422, 2211, 1422);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (2,211) must be less than or equal to population size (1,422)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(3440, 3440, (-1868));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1,868)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(629, (-2671), 629);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-2,671)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2599, 2599, 2599);
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      assertEquals(2599.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }
}
