/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 08:00:34 GMT 2020
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2008, 935, 805);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(935, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(374.83814741035854, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(805, hypergeometricDistribution0.getSampleSize());
      assertEquals(2008, hypergeometricDistribution0.getPopulationSize());
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(805);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(935, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(374.83814741035854, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(805, hypergeometricDistribution0.getSampleSize());
      assertEquals(2008, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom();
      assertNotNull(iSAACRandom0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 550, 550, 550);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(550, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(550.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(550, hypergeometricDistribution0.getSampleSize());
      assertEquals(550, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(550);
      assertEquals(550, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(550.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(550, hypergeometricDistribution0.getSampleSize());
      assertEquals(550, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a();
      assertNotNull(well19937a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 79, 0, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(79, hypergeometricDistribution0.getPopulationSize());
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(79);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(79, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1, 0, 3709);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (3,709) must be less than or equal to population size (1)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom((-753L));
      assertNotNull(iSAACRandom0);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 2, 593, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (593) must be less than or equal to population size (2)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2008, 0, 805);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(805, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2008, hypergeometricDistribution0.getPopulationSize());
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(805, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2008, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom();
      assertNotNull(iSAACRandom0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 3141, 550, 550);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(3141, hypergeometricDistribution0.getPopulationSize());
      assertEquals(550, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(96.30690862782554, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(550, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(3141, hypergeometricDistribution0.getPopulationSize());
      assertEquals(550, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(96.30690862782554, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(550, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(550, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom();
      assertNotNull(iSAACRandom0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 3141, 550, 550);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(550, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(96.30690862782554, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(550, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3141, hypergeometricDistribution0.getPopulationSize());
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(550, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(96.30690862782554, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(550, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3141, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom();
      assertNotNull(iSAACRandom0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 550, 550, 550);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(550, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(550, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(550.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(550, hypergeometricDistribution0.getSampleSize());
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(550, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(550, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(550.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(550, hypergeometricDistribution0.getSampleSize());
      assertEquals(550, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2008, 2008, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(2008, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2008, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(2008, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2008, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom();
      assertNotNull(iSAACRandom0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 550, 550, 550);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(550, hypergeometricDistribution0.getPopulationSize());
      assertEquals(550, hypergeometricDistribution0.getSampleSize());
      assertEquals(550.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(550, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(550, hypergeometricDistribution0.getPopulationSize());
      assertEquals(550, hypergeometricDistribution0.getSampleSize());
      assertEquals(550.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(550, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom();
      assertNotNull(iSAACRandom0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 3141, 550, 550);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(3141, hypergeometricDistribution0.getPopulationSize());
      assertEquals(550, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(96.30690862782554, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(550, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(3141, hypergeometricDistribution0.getPopulationSize());
      assertEquals(550, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(96.30690862782554, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(550, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(65.55331884039498, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a();
      assertNotNull(well19937a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 79, 0, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(79, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(79, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(897, 897, 897);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(897, hypergeometricDistribution0.getPopulationSize());
      assertEquals(897, hypergeometricDistribution0.getSampleSize());
      assertEquals(897, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(897.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(897, hypergeometricDistribution0.getPopulationSize());
      assertEquals(897, hypergeometricDistribution0.getSampleSize());
      assertEquals(897, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(897.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(897.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2008, 0, 805);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2008, hypergeometricDistribution0.getPopulationSize());
      assertEquals(805, hypergeometricDistribution0.getSampleSize());
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2008, hypergeometricDistribution0.getPopulationSize());
      assertEquals(805, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(395, 395, 395);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(395, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(395, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(395.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(395, hypergeometricDistribution0.getSampleSize());
      
      double double0 = hypergeometricDistribution0.cumulativeProbability((-3456));
      assertEquals(395, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(395, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(395.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(395, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3150, 3150, 3150);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(3150, hypergeometricDistribution0.getPopulationSize());
      assertEquals(3150, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3150, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3150.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(3150, hypergeometricDistribution0.getPopulationSize());
      assertEquals(3150, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3150, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3150.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2008, 935, 805);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(935, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(374.83814741035854, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2008, hypergeometricDistribution0.getPopulationSize());
      assertEquals(805, hypergeometricDistribution0.getSampleSize());
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(935, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(374.83814741035854, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2008, hypergeometricDistribution0.getPopulationSize());
      assertEquals(805, hypergeometricDistribution0.getSampleSize());
      assertEquals(120.05992040857289, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3298, 1381, 1381);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(3298, hypergeometricDistribution0.getPopulationSize());
      assertEquals(578.2780473013947, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1381, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1381, hypergeometricDistribution0.getSampleSize());
      
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(884);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 0, 0, (-3880));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      assertNotNull(well512a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 1, 1231, 1231);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (1,231) must be less than or equal to population size (1)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom();
      assertNotNull(iSAACRandom0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 3141, 550, 550);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(3141, hypergeometricDistribution0.getPopulationSize());
      assertEquals(550, hypergeometricDistribution0.getSampleSize());
      assertEquals(550, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(96.30690862782554, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double0 = hypergeometricDistribution0.probability(0);
      assertEquals(3141, hypergeometricDistribution0.getPopulationSize());
      assertEquals(550, hypergeometricDistribution0.getSampleSize());
      assertEquals(550, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(96.30690862782554, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(8.28292756775902E-52, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom();
      assertNotNull(iSAACRandom0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 3141, 550, 550);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(550, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(96.30690862782554, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3141, hypergeometricDistribution0.getPopulationSize());
      assertEquals(550, hypergeometricDistribution0.getSampleSize());
      
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(550, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(96.30690862782554, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3141, hypergeometricDistribution0.getPopulationSize());
      assertEquals(550, hypergeometricDistribution0.getSampleSize());
      assertEquals(3141, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2008, 2008, 2008);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(2008.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2008, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2008, hypergeometricDistribution0.getSampleSize());
      assertEquals(2008, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(2008.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2008, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2008, hypergeometricDistribution0.getSampleSize());
      assertEquals(2008, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2008, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2008, 2008, 2008);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(2008, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2008, hypergeometricDistribution0.getSampleSize());
      assertEquals(2008, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2008.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(2008, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2008, hypergeometricDistribution0.getSampleSize());
      assertEquals(2008, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2008.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2008, int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(856, 856, 856);
      hypergeometricDistribution0.sample(856);
      assertEquals(856.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2008, 0, 805);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(805);
      assertEquals(805, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double0, 0.01);
      assertEquals(2008, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2008, 2008, 2008);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertEquals(1.0, double0, 0.01);
      assertEquals(2008.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2008, 0, 805);
      double double0 = hypergeometricDistribution0.probability(1205);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(805, hypergeometricDistribution0.getSampleSize());
      assertEquals(2008, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1, 1, 1);
      double double0 = hypergeometricDistribution0.probability((-1716));
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2008, 2008, 2008);
      double double0 = hypergeometricDistribution0.cumulativeProbability(2008);
      assertEquals(2008.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(2008, 2008, (-2651));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-2,651)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1195, (-1), 1195);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-1)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((-3574), 570, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-3,574)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2008, 2008, 2008);
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertEquals(2008.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2756, 1723, 1450);
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability(721);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(8388581, 8388581, 8388581);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals((-54.000086903851795), double0, 0.01);
  }
}
