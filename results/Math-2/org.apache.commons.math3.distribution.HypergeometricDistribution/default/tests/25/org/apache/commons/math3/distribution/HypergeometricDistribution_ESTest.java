/*
 * This file was automatically generated by EvoSuite
 * Fri Feb 26 00:09:21 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomAdaptor;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1725, 0, 1725);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1725, hypergeometricDistribution0.getSampleSize());
      assertEquals(1725, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1725, hypergeometricDistribution0.getSampleSize());
      assertEquals(1725, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1210, 1, 1);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(1210, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(8.264462809917355E-4, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(1);
      assertEquals(8.264462809917344E-4, double0, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(1210, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(8.264462809917355E-4, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(1350);
      assertNotNull(well19937c0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 1350, 1350, 1350);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1350.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1350, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1350, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1350, hypergeometricDistribution0.getSampleSize());
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertEquals(1.0, double0, 0.01);
      assertEquals(1350.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1350, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1350, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1350, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      assertNotNull(jDKRandomGenerator0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(jDKRandomGenerator0, 131, 131, 2);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(131, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(131, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      
      int int0 = hypergeometricDistribution0.solveInverseCumulativeProbability(144.04, 2, 341);
      assertEquals(341, int0);
      assertEquals(131, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(131, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[5];
      Well44497a well44497a0 = new Well44497a(intArray0);
      assertNotNull(well44497a0);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      assertEquals(5, intArray0.length);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1435, 1310, 2408);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (2,408) must be less than or equal to population size (1,435)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      assertNotNull(well44497a0);
      
      RandomAdaptor randomAdaptor0 = new RandomAdaptor(well44497a0);
      assertNotNull(randomAdaptor0);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(randomAdaptor0, (-821), 0, 1898);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-821)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(0, 1765, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4865, 758, 147);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(147, hypergeometricDistribution0.getSampleSize());
      assertEquals(4865, hypergeometricDistribution0.getPopulationSize());
      assertEquals(22.90359712230216, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(758, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.probability(147);
      assertEquals(4.899190646848761E-125, double0, 0.01);
      assertEquals(147, hypergeometricDistribution0.getSampleSize());
      assertEquals(4865, hypergeometricDistribution0.getPopulationSize());
      assertEquals(22.90359712230216, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(758, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3004, 0, 3004);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(3004, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3004, hypergeometricDistribution0.getSampleSize());
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(0, int0);
      assertEquals(3004, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3004, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      assertNotNull(jDKRandomGenerator0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(jDKRandomGenerator0, 131, 131, 2);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(131, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(131, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(2, int0);
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(131, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(131, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1468, 782, 11);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(5.859673024523161, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(11, hypergeometricDistribution0.getSampleSize());
      assertEquals(782, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1468, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(0, int0);
      assertEquals(5.859673024523161, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(11, hypergeometricDistribution0.getSampleSize());
      assertEquals(782, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1468, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1765, 1765, 1765);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1765, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1765, hypergeometricDistribution0.getSampleSize());
      assertEquals(1765.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1765, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(1765, int0);
      assertEquals(1765, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1765, hypergeometricDistribution0.getSampleSize());
      assertEquals(1765.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1765, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2100, 782, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(782, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2100, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(0, int0);
      assertEquals(782, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2100, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(204, 173, 173);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(146.7107843137255, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(204, hypergeometricDistribution0.getPopulationSize());
      assertEquals(173, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(173, hypergeometricDistribution0.getSampleSize());
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(3.4045461152682845, double0, 0.01);
      assertEquals(146.7107843137255, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(204, hypergeometricDistribution0.getPopulationSize());
      assertEquals(173, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(173, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3286, 3286, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(3286, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(3286, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(0.0, double0, 0.01);
      assertEquals(3286, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(3286, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(1350);
      assertNotNull(well19937c0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 1350, 1350, 1350);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1350, hypergeometricDistribution0.getSampleSize());
      assertEquals(1350.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1350, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1350, hypergeometricDistribution0.getPopulationSize());
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(1350.0, double0, 0.01);
      assertEquals(1350, hypergeometricDistribution0.getSampleSize());
      assertEquals(1350.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1350, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1350, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3004, 0, 3004);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3004, hypergeometricDistribution0.getPopulationSize());
      assertEquals(3004, hypergeometricDistribution0.getSampleSize());
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(0, int0);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3004, hypergeometricDistribution0.getPopulationSize());
      assertEquals(3004, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(3268);
      assertNotNull(well44497b0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 3268, 1324, 1324);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(536.4063647490821, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(3268, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1324, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1324, hypergeometricDistribution0.getSampleSize());
      
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(760);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(684);
      assertNotNull(mersenneTwister0);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 684, 1193, 1193);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (1,193) must be less than or equal to population size (684)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1468, 1468, 1468);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1468, hypergeometricDistribution0.getSampleSize());
      assertEquals(1468.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1468, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1468, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(1468, int0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1468, hypergeometricDistribution0.getSampleSize());
      assertEquals(1468.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1468, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1468, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1468, 1468, 1468);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1468, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1468, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1468.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1468, hypergeometricDistribution0.getSampleSize());
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(1468, int0);
      assertEquals(1468, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1468, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1468.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1468, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1468, 1468, 1468);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1468, hypergeometricDistribution0.getSampleSize());
      assertEquals(1468, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1468.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1468, hypergeometricDistribution0.getPopulationSize());
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(1468, int0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1468, hypergeometricDistribution0.getSampleSize());
      assertEquals(1468, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1468.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1468, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(1350);
      assertNotNull(well19937c0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 1350, 1350, 1350);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1350, hypergeometricDistribution0.getSampleSize());
      assertEquals(1350, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1350.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1350, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(1350, int0);
      assertEquals(1350, hypergeometricDistribution0.getSampleSize());
      assertEquals(1350, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1350.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1350, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1350, hypergeometricDistribution0.getSampleSize());
      assertEquals(1350, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1350.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1350, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1468, 1468, 1468);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1468, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1468, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1468, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1468.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(2100);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1468, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1468, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1468, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1468.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2100, 2100, 2100);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2100, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2100, hypergeometricDistribution0.getSampleSize());
      assertEquals(2100.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2100, hypergeometricDistribution0.getPopulationSize());
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(2100);
      assertEquals(1.0, double0, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2100, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2100, hypergeometricDistribution0.getSampleSize());
      assertEquals(2100.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2100, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(530, 530, 530);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(530.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(530, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(530, hypergeometricDistribution0.getPopulationSize());
      assertEquals(530, hypergeometricDistribution0.getSampleSize());
      
      double double0 = hypergeometricDistribution0.probability(1388);
      assertEquals(0.0, double0, 0.01);
      assertEquals(530.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(530, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(530, hypergeometricDistribution0.getPopulationSize());
      assertEquals(530, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1789, 1789, 1789);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1789, hypergeometricDistribution0.getSampleSize());
      assertEquals(1789, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1789, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1789.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double0 = hypergeometricDistribution0.probability((-976));
      assertEquals(0.0, double0, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1789, hypergeometricDistribution0.getSampleSize());
      assertEquals(1789, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1789, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1789.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1725, 0, 1725);
      double double0 = hypergeometricDistribution0.cumulativeProbability(0);
      assertEquals(1.0, double0, 0.01);
      assertEquals(1725, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1725, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1468, 1468, 1468);
      double double0 = hypergeometricDistribution0.cumulativeProbability(606);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1468.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(2100, 2100, 2317);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (2,317) must be less than or equal to population size (2,100)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(148, 1758, 148);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (1,758) must be less than or equal to population size (148)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1468, 1468, (-836));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-836)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1468, (-1), 782);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-1)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2756, 1166, 1166);
      // Undeclared exception!
      hypergeometricDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1725, 0, 1725);
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertEquals(1725, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1725, hypergeometricDistribution0.getSampleSize());
      assertTrue(boolean0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3367, 784, 784);
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(107.46835303127342, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3367, 784, 784);
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability(1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(8388584, 8388584, 8388584);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals((-48.00006866474723), double0, 0.01);
  }
}
