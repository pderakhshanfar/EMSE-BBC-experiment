/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 12:19:39 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomAdaptor;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 3330;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3330, 3330, 3330);
      int int1 = 1;
      hypergeometricDistribution0.sample(3330);
      hypergeometricDistribution0.cumulativeProbability(1);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.inverseCumulativeProbability(1);
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.cumulativeProbability(3330);
      hypergeometricDistribution0.sample();
      System.setCurrentTimeMillis(3330);
      // Undeclared exception!
      hypergeometricDistribution0.getNumberOfSuccesses();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3330, 3330, 3330);
      hypergeometricDistribution0.sample(3330);
      hypergeometricDistribution0.cumulativeProbability(1);
      hypergeometricDistribution0.inverseCumulativeProbability(1);
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.reseedRandomGenerator(1);
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.upperCumulativeProbability(3330);
      hypergeometricDistribution0.reseedRandomGenerator(3330);
      hypergeometricDistribution0.upperCumulativeProbability(1);
      hypergeometricDistribution0.cumulativeProbability(3330);
      hypergeometricDistribution0.cumulativeProbability(3330, 3330);
      // Undeclared exception!
      hypergeometricDistribution0.getSampleSize();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 3330;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3330, 3330, 3330);
      int int1 = 1;
      hypergeometricDistribution0.sample(3330);
      hypergeometricDistribution0.cumulativeProbability(1);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.inverseCumulativeProbability(1);
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.reseedRandomGenerator(1);
      hypergeometricDistribution0.sample();
      // Undeclared exception!
      hypergeometricDistribution0.getSupportUpperBound();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3330, 3330, 3330);
      hypergeometricDistribution0.sample(3330);
      hypergeometricDistribution0.cumulativeProbability(1);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.inverseCumulativeProbability(1);
      hypergeometricDistribution0.probability(103);
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.reseedRandomGenerator(1);
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.upperCumulativeProbability(3330);
      hypergeometricDistribution0.reseedRandomGenerator(3330);
      hypergeometricDistribution0.upperCumulativeProbability(1);
      hypergeometricDistribution0.cumulativeProbability(3330);
      hypergeometricDistribution0.getNumericalVariance();
      // Undeclared exception!
      hypergeometricDistribution0.calculateNumericalVariance();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3330, 3330, 3330);
      hypergeometricDistribution0.sample(3330);
      hypergeometricDistribution0.cumulativeProbability(1);
      hypergeometricDistribution0.inverseCumulativeProbability(1);
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.reseedRandomGenerator(1);
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.upperCumulativeProbability(3330);
      hypergeometricDistribution0.reseedRandomGenerator(3330);
      hypergeometricDistribution0.upperCumulativeProbability(1);
      hypergeometricDistribution0.cumulativeProbability(3330);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.cumulativeProbability(3330, 3330);
      // Undeclared exception!
      hypergeometricDistribution0.getNumericalMean();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4276, 2206, 2206);
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(1658);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3004, 0, 3004);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.getNumberOfSuccesses();
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(3004, 3004, 0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1725, 0, 1725);
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.cumulativeProbability(0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 4865;
      intArray0[1] = 2117;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4865, 2117, 2117);
      hypergeometricDistribution0.cumulativeProbability(198, 2117);
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(4865, 758, 147);
      hypergeometricDistribution0.upperCumulativeProbability(2117);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      well19937c0.setSeed(1617L);
      well19937c0.nextLong();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1468, 1468, 1468);
      hypergeometricDistribution0.cumulativeProbability(606);
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.upperCumulativeProbability(2100);
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(2100, 782, 0);
      hypergeometricDistribution1.getNumberOfSuccesses();
      hypergeometricDistribution1.getSampleSize();
      hypergeometricDistribution1.getNumberOfSuccesses();
      HypergeometricDistribution hypergeometricDistribution2 = null;
      try {
        hypergeometricDistribution2 = new HypergeometricDistribution(1468, (-1), 782);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-1)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 3286;
      int int1 = 0;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3286, 3286, 0);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.reseedRandomGenerator((-1065L));
      hypergeometricDistribution0.solveInverseCumulativeProbability(0.0, 1, 0);
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.cumulativeProbability(0, 3286);
      try { 
        hypergeometricDistribution0.cumulativeProbability(0, (-1586));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lower endpoint (0) must be less than or equal to upper endpoint (-1,586)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      well19937c0.nextLong((long) 17);
      Well19937c well19937c1 = new Well19937c(23);
      well19937c1.nextLong();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1468, 782, 11);
      hypergeometricDistribution0.getSupportLowerBound();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3367, 784, 784);
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability(1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 4865;
      intArray0[1] = 2100;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4865, 2100, 2100);
      hypergeometricDistribution0.cumulativeProbability(240, 2100);
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(4865, 758, 147);
      hypergeometricDistribution1.probability(147);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 1350;
      Well19937c well19937c0 = new Well19937c(1350);
      well19937c0.nextFloat();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 1350, 1350, 1350);
      well19937c0.nextInt(1350);
      hypergeometricDistribution0.upperCumulativeProbability(1350);
      hypergeometricDistribution0.cumulativeProbability(1350);
      hypergeometricDistribution0.sample();
      well19937c0.nextInt();
      well19937c0.setSeed(0L);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.upperCumulativeProbability(0);
      well19937c0.clear();
      well19937c0.nextLong(81L);
      hypergeometricDistribution0.cumulativeProbability(0);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.isSupportConnected();
      well19937c0.nextLong();
      hypergeometricDistribution0.cumulativeProbability((-1014));
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.getPopulationSize();
      HypergeometricDistribution hypergeometricDistribution1 = null;
      try {
        hypergeometricDistribution1 = new HypergeometricDistribution(1350, 0, (-1014));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1,014)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(1765);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 1079, 766, 1079);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.isSupportConnected();
      Well19937c well19937c0 = new Well19937c();
      well19937c0.nextLong();
      hypergeometricDistribution0.cumulativeProbability((-1014));
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.getPopulationSize();
      HypergeometricDistribution hypergeometricDistribution1 = null;
      try {
        hypergeometricDistribution1 = new HypergeometricDistribution((-1014), 2100, (-162));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-1,014)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(963, 510, 963);
      hypergeometricDistribution0.upperCumulativeProbability(963);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      jDKRandomGenerator0.longs(2280L);
      int int0 = 2;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(jDKRandomGenerator0, 2, 983, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (983) must be less than or equal to population size (2)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 1310;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1310, 1310, 1310);
      int int1 = 208;
      int[] intArray0 = new int[5];
      intArray0[0] = 1229;
      intArray0[1] = 1229;
      intArray0[2] = 208;
      intArray0[3] = 1310;
      intArray0[4] = 1310;
      Well44497a well44497a0 = new Well44497a(intArray0);
      int int2 = 2408;
      HypergeometricDistribution hypergeometricDistribution1 = null;
      try {
        hypergeometricDistribution1 = new HypergeometricDistribution(well44497a0, 1435, 1310, 2408);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (2,408) must be less than or equal to population size (1,435)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 4865;
      intArray0[1] = 2100;
      intArray0[2] = 1229;
      intArray0[3] = 208;
      Well44497a well44497a0 = new Well44497a(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 4865, 2100, 2100);
      hypergeometricDistribution0.cumulativeProbability(783, 4865);
      hypergeometricDistribution0.reseedRandomGenerator(4865);
      hypergeometricDistribution0.reseedRandomGenerator(4865);
      well44497a0.setSeed(intArray0);
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.getSampleSize();
      well44497a0.nextBoolean();
      hypergeometricDistribution0.upperCumulativeProbability((-2980));
      hypergeometricDistribution0.cumulativeProbability(255);
      hypergeometricDistribution0.calculateNumericalVariance();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1210, 1, 1);
      hypergeometricDistribution0.upperCumulativeProbability(1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 4865;
      intArray0[1] = 2100;
      intArray0[2] = 1229;
      intArray0[3] = 208;
      Well44497a well44497a0 = new Well44497a(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 4865, 2100, 2100);
      hypergeometricDistribution0.cumulativeProbability(783, 4865);
      well44497a0.setSeed((long) 208);
      hypergeometricDistribution0.reseedRandomGenerator(4865);
      hypergeometricDistribution0.reseedRandomGenerator(4865);
      well44497a0.setSeed(intArray0);
      // Undeclared exception!
      well44497a0.setSeed(intArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = 2756;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2756, 1166, 1166);
      // Undeclared exception!
      hypergeometricDistribution0.sample();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(jDKRandomGenerator0, 131, 1316, 168);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (1,316) must be less than or equal to population size (131)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2, 2, 2);
      hypergeometricDistribution0.sample(2);
      System.setCurrentTimeMillis(2);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.isSupportConnected();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(530, 530, 530);
      hypergeometricDistribution0.probability(1388);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      jDKRandomGenerator0.longs(776L);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(jDKRandomGenerator0, 131, 131, 2);
      int int0 = 214;
      hypergeometricDistribution0.probability(214);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.reseedRandomGenerator(660L);
      // Undeclared exception!
      try { 
        hypergeometricDistribution0.sample(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (0)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(jDKRandomGenerator0, 131, 131, 2);
      hypergeometricDistribution0.probability(214);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.solveInverseCumulativeProbability(144.04, 2, 341);
      hypergeometricDistribution0.upperCumulativeProbability(214);
      hypergeometricDistribution0.upperCumulativeProbability(426);
      jDKRandomGenerator0.setSeed((long) 131);
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.getSampleSize();
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(703, 1, 2);
      hypergeometricDistribution1.getNumberOfSuccesses();
      hypergeometricDistribution0.probability(1);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int[] intArray0 = new int[4];
      intArray0[0] = 4865;
      int int0 = 2100;
      intArray0[1] = 2100;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4865, 2100, 2100);
      hypergeometricDistribution0.cumulativeProbability(240, 2100);
      int int1 = 782;
      int[] intArray1 = new int[4];
      Well19937c well19937c0 = new Well19937c(intArray1);
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability(428);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2100, 2100, 2100);
      assertEquals(2100.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      hypergeometricDistribution0.upperCumulativeProbability(2100);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1468, 1468, 1468);
      hypergeometricDistribution0.cumulativeProbability(1468);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1789, 1789, 1789);
      hypergeometricDistribution0.cumulativeProbability((-894));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(1350);
      well19937c0.nextFloat();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 1350, 1350, 1350);
      well19937c0.nextInt(1350);
      hypergeometricDistribution0.cumulativeProbability(1350);
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.calculateNumericalVariance();
      well19937c0.nextInt();
      well19937c0.setSeed(0L);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.upperCumulativeProbability(0);
      well19937c0.clear();
      well19937c0.nextLong(81L);
      hypergeometricDistribution0.cumulativeProbability(0);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.isSupportConnected();
      well19937c0.nextLong();
      hypergeometricDistribution0.cumulativeProbability((-1014));
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.getSampleSize();
      hypergeometricDistribution0.probability(1350);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.getNumberOfSuccesses();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1765, 1765, 1765);
      hypergeometricDistribution0.isSupportConnected();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = 173;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(204, 173, 173);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.calculateNumericalVariance();
      try { 
        hypergeometricDistribution0.cumulativeProbability(173, 54);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lower endpoint (173) must be less than or equal to upper endpoint (54)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(684);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 684, 1193, 1193);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (1,193) must be less than or equal to population size (684)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(2100, 2100, 2317);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (2,317) must be less than or equal to population size (2,100)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(2, 2100, 2100);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (2,100) must be less than or equal to population size (2)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(148, 1758, 148);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (1,758) must be less than or equal to population size (148)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = 1;
      int int1 = (-1514);
      int int2 = (-380);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1, (-1514), (-380));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-1,514)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(2156, (-1779), (-1779));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-1,779)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1765, 1765, 1765);
      hypergeometricDistribution0.getSupportUpperBound();
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2100, 2100, 2100);
      hypergeometricDistribution0.getNumericalMean();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1757, 1757, 1757);
      hypergeometricDistribution0.sample(1757);
      assertEquals(1757.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1789, 1789, 1789);
      double double0 = hypergeometricDistribution0.probability((-976));
      assertEquals(0.0, double0, 0.01);
      assertEquals(1789.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1765, 1765, 1765);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(1765, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2094, 2094, 2094);
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      assertEquals(2094.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2100, 2100, 2100);
      double double0 = hypergeometricDistribution0.probability(2100);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1310, 1310, 1310);
      double double0 = hypergeometricDistribution0.probability((-834));
      assertEquals(0.0, double0, 0.01);
      
      hypergeometricDistribution0.sample(1310);
      double double1 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double1, 0.01);
      
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.getPopulationSize();
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(1310.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1310, int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1468, 1468, (-836));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-836)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 693;
      intArray0[2] = 1190;
      intArray0[3] = (-947);
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = (-1);
      Well19937c well19937c0 = new Well19937c(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 398, 0, (-3232));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-3,232)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(0, 1765, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      int[] intArray0 = new int[9];
      intArray0[0] = 1551;
      intArray0[1] = 0;
      intArray0[2] = (-1899);
      intArray0[3] = 2;
      intArray0[4] = 0;
      intArray0[5] = 431;
      intArray0[6] = 305;
      intArray0[7] = (-690);
      intArray0[8] = 1476;
      well44497a0.setSeed(intArray0);
      RandomAdaptor randomAdaptor0 = new RandomAdaptor(well44497a0);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(randomAdaptor0, (-821), 0, 1898);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-821)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, (-327), (-327), (-327));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-327)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      int int0 = 3268;
      int int1 = 3585;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(jDKRandomGenerator0, 3268, 3268, 3585);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (3,585) must be less than or equal to population size (3,268)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((-1779), (-1779), (-1779));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-1,779)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Well512a well512a0 = new Well512a(1185L);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, (-1), (-1), (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-1)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }
}
