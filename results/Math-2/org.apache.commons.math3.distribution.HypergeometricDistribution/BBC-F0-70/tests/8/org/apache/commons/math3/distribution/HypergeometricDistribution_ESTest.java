/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 14:47:49 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomAdaptor;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497b;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(395, 354, 1);
      assertEquals(395, hypergeometricDistribution0.getPopulationSize());
      assertEquals(354, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.8962025316455696, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(1);
      assertEquals(0.8962025316455695, double0, 0.01);
      assertEquals(395, hypergeometricDistribution0.getPopulationSize());
      assertEquals(354, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.8962025316455696, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(616, 0, 0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(616, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertEquals(1.0, double0, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(616, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2218, 395, 395);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2218, hypergeometricDistribution0.getPopulationSize());
      assertEquals(70.34490532010821, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(395, hypergeometricDistribution0.getSampleSize());
      assertEquals(395, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(395);
      assertEquals(1.0, double0, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2218, hypergeometricDistribution0.getPopulationSize());
      assertEquals(70.34490532010821, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(395, hypergeometricDistribution0.getSampleSize());
      assertEquals(395, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      assertNotNull(mersenneTwister0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 1217, 0, 1217);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1217, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1217, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(0, int0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1217, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1217, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1406, 812, 1406);
      assertEquals(1406, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(812.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1406, hypergeometricDistribution0.getSampleSize());
      assertEquals(812, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(812, int0);
      assertEquals(1406, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(812.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1406, hypergeometricDistribution0.getSampleSize());
      assertEquals(812, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(616, 0, 0);
      assertEquals(616, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(0, int0);
      assertEquals(616, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(2070L);
      assertNotNull(well1024a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 1107, 1107, 1107);
      assertEquals(1107, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1107, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1107, hypergeometricDistribution0.getSampleSize());
      assertEquals(1107.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1107, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1107, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1107, hypergeometricDistribution0.getSampleSize());
      assertEquals(1107.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2211, 395, 395);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(395, hypergeometricDistribution0.getSampleSize());
      assertEquals(395, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2211, hypergeometricDistribution0.getPopulationSize());
      assertEquals(70.56761646313885, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(47.62731741511718, double0, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(395, hypergeometricDistribution0.getSampleSize());
      assertEquals(395, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2211, hypergeometricDistribution0.getPopulationSize());
      assertEquals(70.56761646313885, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      assertNotNull(mersenneTwister0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 1217, 0, 1217);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1217, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1217, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(0.0, double0, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1217, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1217, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2211, 395, 395);
      assertEquals(2211, hypergeometricDistribution0.getPopulationSize());
      assertEquals(395, hypergeometricDistribution0.getSampleSize());
      assertEquals(70.56761646313885, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(395, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(70.56761646313885, double0, 0.01);
      assertEquals(2211, hypergeometricDistribution0.getPopulationSize());
      assertEquals(395, hypergeometricDistribution0.getSampleSize());
      assertEquals(70.56761646313885, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(395, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      assertNotNull(mersenneTwister0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 1217, 0, 1217);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1217, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1217, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(0, int0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1217, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1217, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1406, 812, 1406);
      assertEquals(1406, hypergeometricDistribution0.getPopulationSize());
      assertEquals(812, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(812.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1406, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1406, hypergeometricDistribution0.getPopulationSize());
      assertEquals(812, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(812.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1406, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(2070L);
      assertNotNull(well1024a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 1107, 1107, 1107);
      assertEquals(1107, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1107.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1107, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1107, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1107, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1107.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1107, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1107, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2211, 395, 395);
      assertEquals(395, hypergeometricDistribution0.getSampleSize());
      assertEquals(395, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2211, hypergeometricDistribution0.getPopulationSize());
      assertEquals(70.56761646313885, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(80, int0);
      assertEquals(395, hypergeometricDistribution0.getSampleSize());
      assertEquals(395, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2211, hypergeometricDistribution0.getPopulationSize());
      assertEquals(70.56761646313885, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(80);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(0, (-1544), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1237, 1, 0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1237, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.probability(0);
      assertEquals(1.0, double0, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1237, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2211, 395, 395);
      assertEquals(395, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2211, hypergeometricDistribution0.getPopulationSize());
      assertEquals(70.56761646313885, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(395, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(2211, int0);
      assertEquals(395, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2211, hypergeometricDistribution0.getPopulationSize());
      assertEquals(70.56761646313885, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(395, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(395, 354, 1);
      assertEquals(0.8962025316455696, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(395, hypergeometricDistribution0.getPopulationSize());
      assertEquals(354, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(354, int0);
      assertEquals(0.8962025316455696, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(395, hypergeometricDistribution0.getPopulationSize());
      assertEquals(354, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(395, 354, 1);
      assertEquals(0.8962025316455696, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(395, hypergeometricDistribution0.getPopulationSize());
      assertEquals(354, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(1, int0);
      assertEquals(0.8962025316455696, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(395, hypergeometricDistribution0.getPopulationSize());
      assertEquals(354, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1237, 1, 0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1237, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      int[] intArray0 = hypergeometricDistribution0.sample(1391);
      assertEquals(1391, intArray0.length);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1237, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(intArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(395, 354, 1);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(606);
      assertEquals(0.8962025316455696, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 1217, 0, 1217);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability((-2584));
      assertEquals(1217, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1217, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1237, 1, 0);
      double double0 = hypergeometricDistribution0.probability(350);
      assertEquals(1237, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(395, 354, 1);
      double double0 = hypergeometricDistribution0.probability((-1285));
      assertEquals(0.8962025316455696, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(395, 354, 1);
      double double0 = hypergeometricDistribution0.cumulativeProbability(0);
      assertEquals(0.10379746835443034, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(395, 354, 1);
      double double0 = hypergeometricDistribution0.cumulativeProbability(354);
      assertEquals(1.0, double0, 0.01);
      assertEquals(0.8962025316455696, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(2218, 44, 3039);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (3,039) must be less than or equal to population size (2,218)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c((-1249L));
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 119, 395, 2218);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (395) must be less than or equal to population size (119)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(0L);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 1667, 483, (-2743));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-2,743)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 1, (-3009), 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-3,009)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(0L);
      RandomAdaptor randomAdaptor0 = new RandomAdaptor(well44497b0);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(randomAdaptor0, (-2247), (-1790), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-2,247)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(395, 354, 1);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(0, int0);
      assertEquals(0.8962025316455696, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(395, 354, 1);
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(0.8962025316455696, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(395, 354, 1);
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      assertEquals(0.8962025316455696, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(56, 34, 49);
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(1.4875, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3325, 1893, 1186);
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability(419);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(134217729, 134217729, 603);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals((-4.999995470047031), double0, 0.01);
  }
}
