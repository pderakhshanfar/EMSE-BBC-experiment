/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 15:24:00 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1357, 437, 1175);
      hypergeometricDistribution0.upperCumulativeProbability(437);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1175, 0, 55);
      hypergeometricDistribution0.upperCumulativeProbability(0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(970, 970, 970);
      hypergeometricDistribution0.cumulativeProbability(970);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(255, 2668, 2668);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (2,668) must be less than or equal to population size (255)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(jDKRandomGenerator0, (-607), (-607), (-607));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-607)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1357, 424, 1357);
      hypergeometricDistribution0.probability(424);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1493, 1493, 0);
      hypergeometricDistribution0.getSupportUpperBound();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 970, 970, 0);
      hypergeometricDistribution0.getSupportLowerBound();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(524, 524, 524);
      hypergeometricDistribution0.getSupportLowerBound();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1493, 1493, 0);
      hypergeometricDistribution0.getSampleSize();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 970, 970, 0);
      hypergeometricDistribution0.getNumericalVariance();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 970, 970, 0);
      hypergeometricDistribution0.getNumericalMean();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1391, 424, 1391);
      hypergeometricDistribution0.getNumberOfSuccesses();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 113, 0, 113);
      hypergeometricDistribution0.calculateNumericalVariance();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(jDKRandomGenerator0, 1474, 524, 28);
      hypergeometricDistribution0.calculateNumericalVariance();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[6];
      Well512a well512a0 = new Well512a(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 2097, 1109, 1109);
      hypergeometricDistribution0.cumulativeProbability(575);
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability(575);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Well512a well512a0 = new Well512a();
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 1805, 1805, 2077);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (2,077) must be less than or equal to population size (1,805)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1772, 1772, 1772);
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(1772.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1772, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1175, 0, 55);
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(55, hypergeometricDistribution0.getSampleSize());
      assertEquals(1175, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(524, 524, 524);
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(524.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(524, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1357, 437, 1175);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(1357);
      assertEquals(378.3898305084746, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1175, 0, 55);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability((-850));
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(55, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.0, double0, 0.01);
      assertEquals(1175, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[6];
      Well512a well512a0 = new Well512a(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 2097, 1109, 1109);
      double double0 = hypergeometricDistribution0.probability(1806);
      assertEquals(0.0, double0, 0.01);
      assertEquals(586.4954697186457, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 3695, 2956, 1498);
      double double0 = hypergeometricDistribution0.probability((-2718));
      assertEquals(0.0, double0, 0.01);
      assertEquals(1198.4, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(180, 2, 2);
      double double0 = hypergeometricDistribution0.cumulativeProbability(1264);
      assertEquals(1.0, double0, 0.01);
      assertEquals(0.022222222222222223, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 3695, 2956, 1498);
      double double0 = hypergeometricDistribution0.cumulativeProbability((-1169));
      assertEquals(0.0, double0, 0.01);
      assertEquals(1198.4, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 3695, 2956, 1498);
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(1429);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(428, 0, 1329);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (1,329) must be less than or equal to population size (428)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(206, 0, (-2043));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-2,043)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 1, (-1824), (-2895));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-1,824)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int[] intArray0 = new int[3];
      Well19937a well19937a0 = new Well19937a(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 0, 201, 493);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 3695, 2956, 1498);
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(1198.4, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1498, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(259, 3630, 259);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (3,630) must be less than or equal to population size (259)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 3695, 2956, 1498);
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      assertEquals(1198.4, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 3695, 2956, 1498);
      hypergeometricDistribution0.getNumericalVariance();
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(142.54925825663238, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(jDKRandomGenerator0, 3630, 259, 259);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(18.47961432506887, double0, 0.01);
  }
}
