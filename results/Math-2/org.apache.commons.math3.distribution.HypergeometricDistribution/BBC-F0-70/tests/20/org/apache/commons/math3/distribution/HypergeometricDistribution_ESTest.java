/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 15:10:52 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1417, 1417, 1417);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(1417, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3499, 2, 3499);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(2);
      assertEquals(1.0, double0, 0.01);
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(999, 562, 562);
      hypergeometricDistribution0.cumulativeProbability(999, 999);
      assertEquals(316.16016016016016, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1417, 1417, 1417);
      double double0 = hypergeometricDistribution0.cumulativeProbability(1417, 1417);
      assertEquals(1417.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int[] intArray0 = new int[2];
      Well512a well512a0 = new Well512a(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, (-595), 0, 3643);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-595)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((-289), (-289), (-405));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-289)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3499, 2, 3499);
      double double0 = hypergeometricDistribution0.probability(2);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(701, 701, 2);
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1417, 1417, 0);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(0, int0);
      assertEquals(1417, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1417, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(63, 63, 0);
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(63, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(63, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(582, 576, 401);
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(1.2746019530500423, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 587, 587, 0);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(0.0, double0, 0.01);
      assertEquals(587, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(587, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int[] intArray0 = new int[4];
      ISAACRandom iSAACRandom0 = new ISAACRandom(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 569, 0, 569);
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(569, hypergeometricDistribution0.getSampleSize());
      assertEquals(569, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(5490, 5490, 5490);
      double double0 = hypergeometricDistribution0.cumulativeProbability(2257);
      assertEquals(5490.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3499, 2, 3499);
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[8];
      Well1024a well1024a0 = new Well1024a(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 1536, 786, 758);
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(95.99349428854082, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom((-3411L));
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 4573, 2246, 2246);
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability(755);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(5490, 5490, 5490);
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(5490.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(5490, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3499, 2, 3499);
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2128, 491, 1342);
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(309.6437969924812, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1342, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(582, 576, 401);
      int[] intArray0 = hypergeometricDistribution0.sample(2);
      assertArrayEquals(new int[] {398, 397}, intArray0);
      assertEquals(396.8659793814433, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(999, 562, 562);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(562);
      assertEquals(1.8655273546590262E-296, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(701, 701, 2);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability((-2730));
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2128, 491, 1342);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(1342);
      assertEquals(0.0, double0, 0.01);
      assertEquals(309.6437969924812, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int[] intArray0 = new int[4];
      ISAACRandom iSAACRandom0 = new ISAACRandom(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 569, 0, 569);
      double double0 = hypergeometricDistribution0.probability(2);
      assertEquals(569, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(569, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3499, 2, 3499);
      double double0 = hypergeometricDistribution0.probability((-1227));
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2128, 491, 1342);
      double double0 = hypergeometricDistribution0.cumulativeProbability(491);
      assertEquals(1.0, double0, 0.01);
      assertEquals(309.6437969924812, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      int[] intArray0 = new int[7];
      Well512a well512a0 = new Well512a(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 8, 1, 2606);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (2,606) must be less than or equal to population size (8)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(130, 1878, 2606);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (1,878) must be less than or equal to population size (130)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(53, 53, (-2490));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-2,490)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 2, (-1007), (-1985));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-1,007)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int[] intArray0 = new int[5];
      Well19937c well19937c0 = new Well19937c(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 0, 0, 722);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2128, 491, 1342);
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      assertEquals(309.6437969924812, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(247, 247, 0);
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      assertEquals(247, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(247, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2128, 491, 1342);
      hypergeometricDistribution0.cumulativeProbability(410);
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(480);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2128, 491, 1342);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(309.6437969924812, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(63, 63, 0);
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(63, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, int0);
      assertEquals(63, hypergeometricDistribution0.getPopulationSize());
  }
}
