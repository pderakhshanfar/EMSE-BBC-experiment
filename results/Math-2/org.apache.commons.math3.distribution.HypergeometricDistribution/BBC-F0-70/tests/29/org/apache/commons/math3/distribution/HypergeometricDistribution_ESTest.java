/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 15:22:57 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(2047L);
      assertNotNull(well19937c0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 2068, 2, 2);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(2068, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0019342359767891683, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(2);
      assertEquals(4.678848516664652E-7, double0, 0.01);
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(2068, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0019342359767891683, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      assertNotNull(well44497a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 165, 0, 165);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(165, hypergeometricDistribution0.getSampleSize());
      assertEquals(165, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertEquals(1.0, double0, 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(165, hypergeometricDistribution0.getSampleSize());
      assertEquals(165, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(406, 406, 406);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(406.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(406, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(406, hypergeometricDistribution0.getPopulationSize());
      assertEquals(406, hypergeometricDistribution0.getSampleSize());
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(406, 406);
      assertEquals(0.0, double0, 0.01);
      assertEquals(406.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(406, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(406, hypergeometricDistribution0.getPopulationSize());
      assertEquals(406, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, (-1426), (-1426), (-1426));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-1,426)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      assertNotNull(well44497a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1431, 2, 2);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(0.002795248078266946, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(1431, hypergeometricDistribution0.getPopulationSize());
      
      double double0 = hypergeometricDistribution0.probability(2);
      assertEquals(9.773594679255078E-7, double0, 0.01);
      assertEquals(0.002795248078266946, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(1431, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(195, 0, 195);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(195, hypergeometricDistribution0.getSampleSize());
      assertEquals(195, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(0, int0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(195, hypergeometricDistribution0.getSampleSize());
      assertEquals(195, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      assertNotNull(mersenneTwister0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 2183, 2183, 2183);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(2183, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2183, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2183.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2183, hypergeometricDistribution0.getSampleSize());
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(2183, int0);
      assertEquals(2183, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2183, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2183.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2183, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1404, 1404, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1404, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1404, hypergeometricDistribution0.getPopulationSize());
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(0, int0);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1404, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1404, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(301, 301, 301);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(301.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(301, hypergeometricDistribution0.getPopulationSize());
      assertEquals(301, hypergeometricDistribution0.getSampleSize());
      assertEquals(301, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(301, int0);
      assertEquals(301.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(301, hypergeometricDistribution0.getPopulationSize());
      assertEquals(301, hypergeometricDistribution0.getSampleSize());
      assertEquals(301, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(301, 301, 301);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(301, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(301.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(301, hypergeometricDistribution0.getSampleSize());
      assertEquals(301, hypergeometricDistribution0.getPopulationSize());
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(301, int0);
      assertEquals(301, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(301.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(301, hypergeometricDistribution0.getSampleSize());
      assertEquals(301, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(1);
      assertNotNull(well44497b0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 1936, 945, 1);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1936, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.4881198347107438, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(945, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.24985886167269994, double0, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1936, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.4881198347107438, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(945, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(195, 0, 195);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(195, hypergeometricDistribution0.getSampleSize());
      assertEquals(195, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(195, hypergeometricDistribution0.getSampleSize());
      assertEquals(195, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(301, 301, 301);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(301, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(301, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(301.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(301, hypergeometricDistribution0.getPopulationSize());
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(301.0, double0, 0.01);
      assertEquals(301, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(301, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(301.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(301, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(195, 0, 195);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(195, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(195, hypergeometricDistribution0.getPopulationSize());
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(0, int0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(195, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(195, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      assertNotNull(well44497a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 165, 0, 165);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(165, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(165, hypergeometricDistribution0.getSampleSize());
      
      double double0 = hypergeometricDistribution0.cumulativeProbability((-1183));
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(165, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(165, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(301, 301, 301);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(301, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(301, hypergeometricDistribution0.getSampleSize());
      assertEquals(301, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(301.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(1912);
      assertEquals(1.0, double0, 0.01);
      assertEquals(301, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(301, hypergeometricDistribution0.getSampleSize());
      assertEquals(301, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(301.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(195, 0, 195);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(195, hypergeometricDistribution0.getPopulationSize());
      assertEquals(195, hypergeometricDistribution0.getSampleSize());
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(195, hypergeometricDistribution0.getPopulationSize());
      assertEquals(195, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2, 1, 1);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.5, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.25, double0, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.5, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(301, 301, 301);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(301.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(301, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(301, hypergeometricDistribution0.getSampleSize());
      assertEquals(301, hypergeometricDistribution0.getPopulationSize());
      
      double double0 = hypergeometricDistribution0.probability(301);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(301.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(301, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(301, hypergeometricDistribution0.getSampleSize());
      assertEquals(301, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(195, 0, 195);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(195, hypergeometricDistribution0.getPopulationSize());
      assertEquals(195, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(195, int0);
      assertEquals(195, hypergeometricDistribution0.getPopulationSize());
      assertEquals(195, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(301, 301, 301);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(301, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(301.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(301, hypergeometricDistribution0.getSampleSize());
      assertEquals(301, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(301, int0);
      assertEquals(301, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(301.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(301, hypergeometricDistribution0.getSampleSize());
      assertEquals(301, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1404, 1404, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1404, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1404, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(0, int0);
      assertEquals(1404, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1404, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom();
      assertNotNull(iSAACRandom0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 2987, 406, 28);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2987, hypergeometricDistribution0.getPopulationSize());
      assertEquals(28, hypergeometricDistribution0.getSampleSize());
      assertEquals(3.8058252427184467, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(406, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(6);
      assertEquals(0.17076177001482087, double0, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2987, hypergeometricDistribution0.getPopulationSize());
      assertEquals(28, hypergeometricDistribution0.getSampleSize());
      assertEquals(3.8058252427184467, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(406, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(195, 0, 195);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(195, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(195, hypergeometricDistribution0.getPopulationSize());
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(195);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(195, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(195, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(195, 0, 195);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability((-3163));
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
      assertEquals(195, hypergeometricDistribution0.getPopulationSize());
      assertEquals(195, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4966, 2949, 1258);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(733);
      assertEquals(0.8331311847914792, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1431, 2, 2);
      double double0 = hypergeometricDistribution0.probability(535);
      assertEquals(0.002795248078266946, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(301, 301, 301);
      double double0 = hypergeometricDistribution0.probability(0);
      assertEquals(301.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3398, 1090, 1318);
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(663);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Well512a well512a0 = new Well512a(925);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 925, 2, 1794);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (1,794) must be less than or equal to population size (925)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(647, 1479, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (1,479) must be less than or equal to population size (647)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 1410, 0, (-2172));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-2,172)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(1712);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1712, (-229), 957);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-229)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int[] intArray0 = new int[3];
      Well1024a well1024a0 = new Well1024a(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 0, (-2425), 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(195, 0, 195);
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      assertEquals(195, hypergeometricDistribution0.getSampleSize());
      assertEquals(195, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(195, 0, 195);
      hypergeometricDistribution0.getNumericalVariance();
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(195, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double0, 0.01);
      assertEquals(195, hypergeometricDistribution0.getSampleSize());
  }
}
