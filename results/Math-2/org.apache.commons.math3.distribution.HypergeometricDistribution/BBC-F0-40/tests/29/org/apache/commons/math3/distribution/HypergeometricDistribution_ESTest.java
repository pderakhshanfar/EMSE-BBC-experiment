/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 16:38:23 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomAdaptor;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(945);
      assertNotNull(mersenneTwister0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 945, 171, 171);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(30.942857142857143, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(171, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(945, hypergeometricDistribution0.getPopulationSize());
      assertEquals(171, hypergeometricDistribution0.getSampleSize());
      
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(31, int0);
      assertEquals(30.942857142857143, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(171, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(945, hypergeometricDistribution0.getPopulationSize());
      assertEquals(171, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(945);
      assertNotNull(mersenneTwister0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 945, 171, 171);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(30.942857142857143, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(171, hypergeometricDistribution0.getSampleSize());
      assertEquals(945, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(171, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(171);
      assertEquals(2.6136177754860334E-193, double0, 0.01);
      assertEquals(30.942857142857143, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(171, hypergeometricDistribution0.getSampleSize());
      assertEquals(945, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(171, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(14, 0, 14);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(14, hypergeometricDistribution0.getPopulationSize());
      assertEquals(14, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertEquals(1.0, double0, 0.01);
      assertEquals(14, hypergeometricDistribution0.getPopulationSize());
      assertEquals(14, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1, 0, 14);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (14) must be less than or equal to population size (1)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Well512a well512a0 = new Well512a((-75L));
      assertNotNull(well512a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(945);
      assertNotNull(mersenneTwister0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 945, 171, 171);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(30.942857142857143, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(171, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(945, hypergeometricDistribution0.getPopulationSize());
      assertEquals(171, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double0 = hypergeometricDistribution0.probability(33);
      assertEquals(0.07747676490838545, double0, 0.01);
      assertEquals(30.942857142857143, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(171, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(945, hypergeometricDistribution0.getPopulationSize());
      assertEquals(171, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(14, 0, 14);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(14, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(14, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(0, int0);
      assertEquals(14, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(14, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(945);
      assertNotNull(mersenneTwister0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 945, 171, 171);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(945, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(171, hypergeometricDistribution0.getSampleSize());
      assertEquals(171, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(30.942857142857143, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(171, int0);
      assertEquals(945, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(171, hypergeometricDistribution0.getSampleSize());
      assertEquals(171, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(30.942857142857143, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(14, 0, 14);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(14, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(14, hypergeometricDistribution0.getSampleSize());
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(0, int0);
      assertEquals(14, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(14, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2, 2, 2);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(2, int0);
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a((-18));
      assertNotNull(well19937a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 2311, 0, 0);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2311, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(0, int0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2311, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(945);
      assertNotNull(mersenneTwister0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 945, 171, 171);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(171, hypergeometricDistribution0.getSampleSize());
      assertEquals(945, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(30.942857142857143, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(171, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(20.779664475959876, double0, 0.01);
      assertEquals(171, hypergeometricDistribution0.getSampleSize());
      assertEquals(945, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(30.942857142857143, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(171, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a((-18));
      assertNotNull(well19937a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 2311, 0, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2311, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2311, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a();
      assertNotNull(well19937a0);
      
      RandomAdaptor randomAdaptor0 = new RandomAdaptor(well19937a0);
      assertNotNull(randomAdaptor0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(randomAdaptor0, 1577, 2, 1577);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1577, hypergeometricDistribution0.getSampleSize());
      assertEquals(1577, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(2.0, double0, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1577, hypergeometricDistribution0.getSampleSize());
      assertEquals(1577, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1577, 132, 132);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(11.048826886493341, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(132, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(132, hypergeometricDistribution0.getSampleSize());
      assertEquals(1577, hypergeometricDistribution0.getPopulationSize());
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(132, int0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(11.048826886493341, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(132, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(132, hypergeometricDistribution0.getSampleSize());
      assertEquals(1577, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2, 2, 2);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double0 = hypergeometricDistribution0.cumulativeProbability((-577));
      assertEquals(0.0, double0, 0.01);
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(945);
      assertNotNull(mersenneTwister0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 945, 171, 171);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(171, hypergeometricDistribution0.getSampleSize());
      assertEquals(945, hypergeometricDistribution0.getPopulationSize());
      assertEquals(30.942857142857143, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(171, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(919);
      assertEquals(1.0, double0, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(171, hypergeometricDistribution0.getSampleSize());
      assertEquals(945, hypergeometricDistribution0.getPopulationSize());
      assertEquals(30.942857142857143, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(171, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(14, 0, 14);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(14, hypergeometricDistribution0.getPopulationSize());
      assertEquals(14, hypergeometricDistribution0.getSampleSize());
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(14, hypergeometricDistribution0.getPopulationSize());
      assertEquals(14, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(945);
      assertNotNull(mersenneTwister0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 945, 171, 171);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(171, hypergeometricDistribution0.getSampleSize());
      assertEquals(945, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(30.942857142857143, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(171, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(20.779664475959876, double0, 0.01);
      assertEquals(171, hypergeometricDistribution0.getSampleSize());
      assertEquals(945, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(30.942857142857143, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(171, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a((int[]) null);
      assertNotNull(well44497a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 2700, 1089, 1089);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1089, hypergeometricDistribution0.getSampleSize());
      assertEquals(2700, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1089, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(439.23, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability(317);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a();
      assertNotNull(well19937a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 1577, 2311, 1577);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (2,311) must be less than or equal to population size (1,577)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(14, 0, 14);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(14, hypergeometricDistribution0.getSampleSize());
      assertEquals(14, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(14, int0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(14, hypergeometricDistribution0.getSampleSize());
      assertEquals(14, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(14, 0, 14);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(14, hypergeometricDistribution0.getPopulationSize());
      assertEquals(14, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(0, int0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(14, hypergeometricDistribution0.getPopulationSize());
      assertEquals(14, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom();
      assertNotNull(iSAACRandom0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 1, 1, 1);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability((-80));
      assertEquals(1.0, double0, 0.01);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(14, 0, 14);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(14, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(14, hypergeometricDistribution0.getSampleSize());
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(2464);
      assertEquals(0.0, double0, 0.01);
      assertEquals(14, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(14, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(945);
      assertNotNull(mersenneTwister0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 945, 171, 171);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(171, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(945, hypergeometricDistribution0.getPopulationSize());
      assertEquals(30.942857142857143, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(171, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double0 = hypergeometricDistribution0.probability(919);
      assertEquals(0.0, double0, 0.01);
      assertEquals(171, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(945, hypergeometricDistribution0.getPopulationSize());
      assertEquals(30.942857142857143, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(171, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a((-18));
      assertNotNull(well19937a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 2311, 0, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(2311, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double0 = hypergeometricDistribution0.probability((-1746));
      assertEquals(0.0, double0, 0.01);
      assertEquals(2311, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(134217729, 2119, 2119);
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(908);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(7, 14, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (14) must be less than or equal to population size (7)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1901, 2464, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      int[] intArray0 = new int[9];
      Well19937c well19937c0 = new Well19937c(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 1, (-278), 124);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-278)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((-1515), 171, 171);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-1,515)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(358, 162, 162);
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertEquals(73.3072625698324, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(14, 0, 14);
      double double0 = hypergeometricDistribution0.cumulativeProbability(0, 0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(14, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double0, 0.01);
      assertEquals(14, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(14, 0, 14);
      hypergeometricDistribution0.sample();
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(14, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
      assertEquals(14, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(14, 0, 14);
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(14, int0);
      assertEquals(14, hypergeometricDistribution0.getPopulationSize());
  }
}
