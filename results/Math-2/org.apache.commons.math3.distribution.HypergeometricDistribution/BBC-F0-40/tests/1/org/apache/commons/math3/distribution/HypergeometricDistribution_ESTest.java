/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 16:01:17 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.SynchronizedRandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(5217, 694, 1153);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(694);
      assertEquals(153.3797201456776, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(694, 694, 694);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertEquals(694.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1949, 1949, 161);
      double double0 = hypergeometricDistribution0.cumulativeProbability(1095, 2501);
      assertEquals(161.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(0);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a((long) 1046);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 1470, 36, 1470);
      double double0 = hypergeometricDistribution0.probability(36);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(1860);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 1860, 1860, 0);
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(0, int0);
      assertEquals(1860, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1860, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(1860);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 1860, 1860, 0);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(1860, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1860, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, int0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1949, 1949, 161);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(161, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3035, 0, 0);
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(0, int0);
      assertEquals(3035, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator((RandomGenerator) null);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(synchronizedRandomGenerator0, 6060, 357, 2197);
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(77.65691824922297, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1733, 0, 0);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1733, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 1344, 0, 0);
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(1344, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, int0);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1733, 0, 0);
      double double0 = hypergeometricDistribution0.cumulativeProbability((-1917));
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1733, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(5217, 694, 1153);
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(103.6071693717216, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1949, 1949, 161);
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(161.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1949, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(694, 694, 694);
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(694.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(694, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1733, 0, 0);
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1733, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 1860, 1090, 1090);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(1860);
      assertEquals(638.763440860215, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(694, 694, 694);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(694);
      assertEquals(694.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(5217, 694, 1153);
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability(1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1733, 0, 0);
      double double0 = hypergeometricDistribution0.probability(1733);
      assertEquals(1733, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(1860);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 1860, 1860, 0);
      double double0 = hypergeometricDistribution0.probability((-1901));
      assertEquals(1860, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1860, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 1860, 1090, 1090);
      hypergeometricDistribution0.cumulativeProbability(910);
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(731);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(694, 694, 694);
      double double0 = hypergeometricDistribution0.cumulativeProbability(694);
      assertEquals(694.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(1344);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 808, 514, 1207);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (1,207) must be less than or equal to population size (808)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(2, 1470, 373);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (1,470) must be less than or equal to population size (2)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(4503599627370495L);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 885, 885, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(700, (-330), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-330)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((-3054), 694, 397);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-3,054)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(694, 694, 694);
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(694.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(694, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1733, 0, 0);
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1733, hypergeometricDistribution0.getPopulationSize());
      assertTrue(boolean0);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(694, 694, 694);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(694.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(694, 694, 694);
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(694.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(694, 694, 694);
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(694.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(694, int0);
  }
}
