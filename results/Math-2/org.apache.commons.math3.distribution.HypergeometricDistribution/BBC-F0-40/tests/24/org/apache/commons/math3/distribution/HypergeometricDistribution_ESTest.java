/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 16:27:40 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.JDKRandomGenerator;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.SynchronizedRandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(553, 0, 0);
      assertEquals(553, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(553, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1173, 224, 338);
      assertEquals(338, hypergeometricDistribution0.getSampleSize());
      assertEquals(64.54560954816709, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1173, hypergeometricDistribution0.getPopulationSize());
      assertEquals(224, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(224);
      assertEquals(338, hypergeometricDistribution0.getSampleSize());
      assertEquals(64.54560954816709, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1173, hypergeometricDistribution0.getPopulationSize());
      assertEquals(224, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(4.126158810022284E-155, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(553, 0, 0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(553, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(553, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1143, 1143, 1143);
      assertEquals(1143.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1143, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1143, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1143, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(1143);
      assertEquals(1143.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1143, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1143, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1143, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1, 2195, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (2,195) must be less than or equal to population size (1)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom((-183L));
      assertNotNull(iSAACRandom0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 3361, 154, 2);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.09163939303778637, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(154, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3361, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.probability(0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.09163939303778637, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertEquals(154, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(3361, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.9104470395715561, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1090, 1090, 0);
      assertEquals(1090, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1090, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(1090, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1090, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1143, 1143, 1143);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1143, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1143, hypergeometricDistribution0.getSampleSize());
      assertEquals(1143.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1143, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1143, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1143, hypergeometricDistribution0.getSampleSize());
      assertEquals(1143.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1143, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1143, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(527, 95, 369);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(66.5180265654649, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(527, hypergeometricDistribution0.getPopulationSize());
      assertEquals(95, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(369, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(66.5180265654649, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(527, hypergeometricDistribution0.getPopulationSize());
      assertEquals(95, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(369, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(653, 653, 527);
      assertEquals(527, hypergeometricDistribution0.getSampleSize());
      assertEquals(653, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(527.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(653, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(527, hypergeometricDistribution0.getSampleSize());
      assertEquals(653, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(527.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(653, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(527, int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      assertNotNull(jDKRandomGenerator0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(jDKRandomGenerator0, 546, 0, 0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(546, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(546, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(754, 754, 546);
      assertEquals(754, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(546.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(754, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(546, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(754, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(546.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(754, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(546, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDKRandomGenerator jDKRandomGenerator0 = new JDKRandomGenerator();
      assertNotNull(jDKRandomGenerator0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(jDKRandomGenerator0, 546, 0, 0);
      assertEquals(546, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(546, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1143, 1143, 1143);
      assertEquals(1143, hypergeometricDistribution0.getSampleSize());
      assertEquals(1143, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1143.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1143, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(1143, hypergeometricDistribution0.getSampleSize());
      assertEquals(1143, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1143.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1143, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1143.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1143, 1143, 1143);
      assertEquals(1143.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1143, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1143, hypergeometricDistribution0.getSampleSize());
      assertEquals(1143, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(1143.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1143, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1143, hypergeometricDistribution0.getSampleSize());
      assertEquals(1143, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1143, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1143, 1143, 1143);
      assertEquals(1143, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1143, hypergeometricDistribution0.getSampleSize());
      assertEquals(1143, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1143.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(1143, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1143, hypergeometricDistribution0.getSampleSize());
      assertEquals(1143, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1143.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2465, 1316, 1316);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1316, hypergeometricDistribution0.getSampleSize());
      assertEquals(702.5784989858012, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2465, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1316, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1316, hypergeometricDistribution0.getSampleSize());
      assertEquals(702.5784989858012, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2465, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1316, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(152.71344882569508, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Well512a well512a0 = new Well512a((-623L));
      assertNotNull(well512a0);
      
      well512a0.setSeed((-501L));
      double double0 = well512a0.nextGaussian();
      assertEquals(1.1767698716025559, double0, 0.01);
      
      int int0 = well512a0.nextInt(2);
      assertEquals(1, int0);
      
      int int1 = well512a0.nextInt();
      assertEquals(455593137, int1);
      assertFalse(int1 == int0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 1663, 201, 1151);
      assertEquals(201, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1663, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1151, hypergeometricDistribution0.getSampleSize());
      assertEquals(139.11665664461816, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      int[] intArray0 = hypergeometricDistribution0.sample(1);
      assertEquals(201, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1663, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1151, hypergeometricDistribution0.getSampleSize());
      assertEquals(139.11665664461816, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, intArray0.length);
      assertArrayEquals(new int[] {141}, intArray0);
      assertNotNull(intArray0);
      
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability(1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a();
      assertNotNull(well19937a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 0, 1, (-4161));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(754, 754, 546);
      assertEquals(546.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(754, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(754, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(546, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(546.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(754, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(754, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(546, hypergeometricDistribution0.getSampleSize());
      assertEquals(754, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(553, 0, 0);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(553, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(553, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(754, 754, 546);
      assertEquals(546, hypergeometricDistribution0.getSampleSize());
      assertEquals(754, hypergeometricDistribution0.getPopulationSize());
      assertEquals(546.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(754, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(546, hypergeometricDistribution0.getSampleSize());
      assertEquals(754, hypergeometricDistribution0.getPopulationSize());
      assertEquals(546.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(754, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(546, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Well512a well512a0 = new Well512a((-623L));
      well512a0.setSeed((-501L));
      well512a0.nextGaussian();
      well512a0.nextInt(2);
      well512a0.nextInt();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 1663, 201, 1151);
      int[] intArray0 = hypergeometricDistribution0.sample(1);
      assertArrayEquals(new int[] {141}, intArray0);
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(37.67672946597643, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(653, 653, 527);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(1492);
      assertEquals(527.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(653, 653, 527);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(2);
      assertEquals(527.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Well512a well512a0 = new Well512a((-623L));
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 1663, 201, 1151);
      double double0 = hypergeometricDistribution0.probability(1062);
      assertEquals(139.11665664461816, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1173, 224, 338);
      double double0 = hypergeometricDistribution0.probability((-1));
      assertEquals(64.54560954816709, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Well512a well512a0 = new Well512a((-623L));
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 1663, 201, 1151);
      double double0 = hypergeometricDistribution0.cumulativeProbability(719);
      assertEquals(139.11665664461816, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(653, 653, 527);
      double double0 = hypergeometricDistribution0.cumulativeProbability((-1270));
      assertEquals(0.0, double0, 0.01);
      assertEquals(527.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 409, 0, 673);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (673) must be less than or equal to population size (409)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1628, 3496, 3496);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (3,496) must be less than or equal to population size (1,628)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1250, 1250, (-475));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-475)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(2995, (-2328), 437);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-2,328)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((-2084), 409, 73);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-2,084)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(754, 754, 546);
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertEquals(546.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3870, 1355, 1355);
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(609);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(8388607);
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(well1024a0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(synchronizedRandomGenerator0, 8388607, 1421, 8388607);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals((-115.00018310549058), double0, 0.01);
  }
}
