/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 16:36:05 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1551, 0, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1551, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1551, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(1932);
      assertNotNull(well19937a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 2074, 1932, 1932);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1932, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2074, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1799.7222757955642, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1932, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(1932);
      assertEquals(3.8854600070901607E-224, double0, 0.01);
      assertEquals(1932, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2074, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1799.7222757955642, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1932, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(432L);
      assertNotNull(well19937c0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 679, 679, 1);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(679, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(679, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability((-1090));
      assertEquals(1.0, double0, 0.01);
      assertEquals(679, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(679, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int[] intArray0 = new int[9];
      MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
      assertNotNull(mersenneTwister0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 1747, 743, 743);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(1747, hypergeometricDistribution0.getPopulationSize());
      assertEquals(315.9982827704637, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(743, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(743, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.probability(743);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1747, hypergeometricDistribution0.getPopulationSize());
      assertEquals(315.9982827704637, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(743, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(743, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2427, 2427, 2427);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(2427, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2427, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2427.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2427, hypergeometricDistribution0.getSampleSize());
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(2427);
      assertEquals(1.0, double0, 0.01);
      assertEquals(2427, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2427, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2427.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2427, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int[] intArray0 = new int[5];
      MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
      assertNotNull(mersenneTwister0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0}, intArray0);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, (-179), 675, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-179)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(1932);
      assertNotNull(well19937a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 2048, 1932, 1932);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(2048, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1932, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1822.5703125, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1932, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.probability(1824);
      assertEquals(0.12709949508475354, double0, 0.01);
      assertEquals(2048, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1932, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1822.5703125, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1932, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      assertNotNull(well44497a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1, 1, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(0, int0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(432L);
      assertNotNull(well19937c0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 679, 679, 1);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(679, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(679, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(1, int0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(679, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(679, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      assertNotNull(well44497a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1, 1, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(0, int0);
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2427, 2427, 2427);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(2427, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2427.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2427, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2427, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(2427, int0);
      assertEquals(2427, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2427.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2427, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2427, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(209, 209, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(209, hypergeometricDistribution0.getPopulationSize());
      assertEquals(209, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(0, int0);
      assertEquals(209, hypergeometricDistribution0.getPopulationSize());
      assertEquals(209, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(432L);
      assertNotNull(well19937c0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 679, 679, 1);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(679, hypergeometricDistribution0.getPopulationSize());
      assertEquals(679, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      assertEquals(679, hypergeometricDistribution0.getPopulationSize());
      assertEquals(679, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1551, 0, 0);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1551, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(0.0, double0, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1551, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(432L);
      assertNotNull(well19937c0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 679, 679, 1);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(679, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(679, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(1.0, double0, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(679, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(679, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2593, 0, 2593);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2593, hypergeometricDistribution0.getSampleSize());
      assertEquals(2593, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(0, int0);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2593, hypergeometricDistribution0.getSampleSize());
      assertEquals(2593, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(1932);
      assertNotNull(well19937a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 2048, 1932, 1932);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1932, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2048, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1932, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1822.5703125, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(5.849954326501053, double0, 0.01);
      assertEquals(1932, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2048, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1932, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1822.5703125, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(347, 0, (-2839));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-2,839)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2427, 2427, 2427);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(2427, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2427.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2427, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2427, hypergeometricDistribution0.getSampleSize());
      
      double double0 = hypergeometricDistribution0.probability(2427);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(2427, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2427.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2427, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2427, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(432L);
      assertNotNull(well19937c0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 679, 679, 1);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(679, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(679, hypergeometricDistribution0.getPopulationSize());
      
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(679, int0);
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(679, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(679, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(1950);
      assertNotNull(well19937a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 2074, 1950, 1950);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1950, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1833.413693346191, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1950, hypergeometricDistribution0.getSampleSize());
      assertEquals(2074, hypergeometricDistribution0.getPopulationSize());
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(1950, int0);
      assertEquals(1950, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1833.413693346191, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1950, hypergeometricDistribution0.getSampleSize());
      assertEquals(2074, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(1950);
      assertNotNull(well19937a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 2074, 1950, 1950);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1950, hypergeometricDistribution0.getSampleSize());
      assertEquals(1950, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2074, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1833.413693346191, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(1950, int0);
      assertEquals(1950, hypergeometricDistribution0.getSampleSize());
      assertEquals(1950, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2074, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1833.413693346191, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(1932);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 2058, 1932, 1932);
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(1815, int0);
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(6.80190092565952, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1, 1, 0);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(1190);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2427, 2427, 2427);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(2427);
      assertEquals(2427.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(1950);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 2074, 1950, 1950);
      double double0 = hypergeometricDistribution0.probability(2593);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1833.413693346191, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(1932);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 2074, 1932, 1932);
      double double0 = hypergeometricDistribution0.probability(493);
      assertEquals(1799.7222757955642, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(1950);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 2074, 1950, 1950);
      double double0 = hypergeometricDistribution0.cumulativeProbability(2593);
      assertEquals(1833.413693346191, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(432L);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 679, 679, 1);
      double double0 = hypergeometricDistribution0.cumulativeProbability((-339));
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1964, 1932, 2048);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (2,048) must be less than or equal to population size (1,964)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c((-2851L));
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 231, 436, 274);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (436) must be less than or equal to population size (231)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 269, (-2370), 269);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-2,370)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a((-9223372036854775808L));
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 0, 0, 1417);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(432L);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 679, 679, 1);
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2948, 965, 1654);
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability(1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1175153942, 1175153942, 1175153942);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals((-1.507981465801865), double0, 0.01);
  }
}
