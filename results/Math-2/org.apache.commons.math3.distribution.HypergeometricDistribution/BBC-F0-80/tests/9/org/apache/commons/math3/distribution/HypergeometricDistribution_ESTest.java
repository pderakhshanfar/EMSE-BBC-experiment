/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 14:49:03 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomAdaptor;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 3331;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3331, 3331, 3331);
      hypergeometricDistribution0.cumulativeProbability(3331);
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.sample(3331);
      hypergeometricDistribution0.probability(3331);
      hypergeometricDistribution0.getSupportLowerBound();
      // Undeclared exception!
      hypergeometricDistribution0.getSupportUpperBound();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(8388607, 8388607, 8388607);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.reseedRandomGenerator(433L);
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.sample(50);
      hypergeometricDistribution0.upperCumulativeProbability((-1));
      hypergeometricDistribution0.inverseCumulativeProbability(0.0);
      hypergeometricDistribution0.cumulativeProbability(8388607, 8388607);
      hypergeometricDistribution0.getNumericalMean();
      try { 
        hypergeometricDistribution0.inverseCumulativeProbability(433L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 433 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3331, 3331, 3331);
      hypergeometricDistribution0.cumulativeProbability(3331);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.sample(3331);
      hypergeometricDistribution0.probability(3331);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.probability(3331);
      hypergeometricDistribution0.reseedRandomGenerator(3331);
      hypergeometricDistribution0.upperCumulativeProbability(3331);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.cumulativeProbability(694);
      hypergeometricDistribution0.probability(88);
      hypergeometricDistribution0.cumulativeProbability((-3772), 3331);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.cumulativeProbability(88);
      // Undeclared exception!
      hypergeometricDistribution0.getSupportLowerBound();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3331, 3331, 3331);
      hypergeometricDistribution0.cumulativeProbability(3331);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.sample(3331);
      hypergeometricDistribution0.probability(3331);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.probability(3331);
      hypergeometricDistribution0.reseedRandomGenerator(3331);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.cumulativeProbability(694);
      hypergeometricDistribution0.probability(88);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.cumulativeProbability(88);
      // Undeclared exception!
      hypergeometricDistribution0.getSampleSize();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3989, 1283, 1283);
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability(22);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(1141L);
      well19937c0.nextLong();
      well19937c0.nextLong((long) 1172);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 331246574, 1172, 1172);
      hypergeometricDistribution0.sample();
      well19937c0.nextDouble();
      int[] intArray0 = new int[3];
      well19937c0.nextInt();
      intArray0[0] = 331246574;
      hypergeometricDistribution0.upperCumulativeProbability(3195);
      intArray0[1] = 1172;
      well19937c0.setSeed(0L);
      intArray0[2] = 331246574;
      well19937c0.setSeed(intArray0);
      hypergeometricDistribution0.cumulativeProbability(0, 0);
      hypergeometricDistribution0.inverseCumulativeProbability(0.0);
      hypergeometricDistribution0.upperCumulativeProbability(1172);
      hypergeometricDistribution0.upperCumulativeProbability(424);
      System.setCurrentTimeMillis(1L);
      int int0 = 0;
      int int1 = 1062;
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(1062);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a((long) (-2851));
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 2437, 205, 309);
      hypergeometricDistribution0.getSupportUpperBound();
      well44497a0.nextInt();
      hypergeometricDistribution0.solveInverseCumulativeProbability(354.0645935658035, 4521, (-927));
      hypergeometricDistribution0.upperCumulativeProbability(205);
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(1969, 808, 1248);
      hypergeometricDistribution1.getSupportUpperBound();
      hypergeometricDistribution1.cumulativeProbability(331246574, 331246574);
      hypergeometricDistribution1.getSupportUpperBound();
      System.setCurrentTimeMillis((-927));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 2437;
      Well44497a well44497a0 = new Well44497a((long) (-2851));
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 2437, 205, 309);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.probability(2437);
      // Undeclared exception!
      hypergeometricDistribution0.solveInverseCumulativeProbability(0.0, 46, 235);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom(3952090531849364496L);
      iSAACRandom0.nextInt();
      int int0 = 854;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(25, 1, 1);
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.sample(25);
      iSAACRandom0.nextLong();
      hypergeometricDistribution0.solveInverseCumulativeProbability(3952090531849364496L, 1, 132);
      hypergeometricDistribution0.probability(1);
      iSAACRandom0.nextLong();
      int int1 = (-717);
      HypergeometricDistribution hypergeometricDistribution1 = null;
      try {
        hypergeometricDistribution1 = new HypergeometricDistribution(iSAACRandom0, 1, (-717), 157);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-717)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a((long) (-2851));
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 2437, 205, 309);
      hypergeometricDistribution0.getSupportUpperBound();
      well44497a0.nextInt();
      hypergeometricDistribution0.solveInverseCumulativeProbability(2437, (-2851), (-927));
      hypergeometricDistribution0.upperCumulativeProbability(1);
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(205, 0, 205);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution1.calculateNumericalVariance();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(34, 0, 0);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.cumulativeProbability((-18), 0);
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.probability(0);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.probability(1066);
      hypergeometricDistribution0.probability(0);
      hypergeometricDistribution0.probability(1225);
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 0;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3614, 3614, 0);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.solveInverseCumulativeProbability(3614, 2437, 3614);
      hypergeometricDistribution0.upperCumulativeProbability(3614);
      int int1 = (-547);
      hypergeometricDistribution0.upperCumulativeProbability((-547));
      hypergeometricDistribution0.reseedRandomGenerator(3614);
      Well512a well512a0 = new Well512a(2437);
      HypergeometricDistribution hypergeometricDistribution1 = null;
      try {
        hypergeometricDistribution1 = new HypergeometricDistribution(well512a0, 257, 0, 3614);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (3,614) must be less than or equal to population size (257)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom(3952090531849364496L);
      iSAACRandom0.nextInt();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1139595393, 1, 1);
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.sample(877);
      iSAACRandom0.nextLong();
      hypergeometricDistribution0.solveInverseCumulativeProbability((-1.0), 1139595393, 854);
      hypergeometricDistribution0.probability(854);
      iSAACRandom0.nextLong();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.cumulativeProbability(424);
      hypergeometricDistribution0.upperCumulativeProbability(877);
      iSAACRandom0.nextDouble();
      hypergeometricDistribution0.cumulativeProbability(1);
      hypergeometricDistribution0.getSampleSize();
      iSAACRandom0.nextLong();
      hypergeometricDistribution0.upperCumulativeProbability(424);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.getPopulationSize();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3614, 3614, 0);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.solveInverseCumulativeProbability(3614, 2437, 3614);
      hypergeometricDistribution0.upperCumulativeProbability(3614);
      hypergeometricDistribution0.upperCumulativeProbability((-547));
      hypergeometricDistribution0.reseedRandomGenerator(1708L);
      hypergeometricDistribution0.cumulativeProbability(2);
      hypergeometricDistribution0.getSampleSize();
      int[] intArray0 = new int[6];
      intArray0[0] = 3614;
      intArray0[1] = 3614;
      intArray0[2] = 0;
      intArray0[3] = 3614;
      intArray0[4] = (-547);
      intArray0[5] = 3614;
      ISAACRandom iSAACRandom0 = new ISAACRandom(intArray0);
      iSAACRandom0.nextLong();
      hypergeometricDistribution0.upperCumulativeProbability(2113);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.getPopulationSize();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3614, 3614, 0);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.solveInverseCumulativeProbability(3614, 2437, 3614);
      hypergeometricDistribution0.upperCumulativeProbability(3614);
      hypergeometricDistribution0.upperCumulativeProbability((-547));
      hypergeometricDistribution0.reseedRandomGenerator(1708L);
      hypergeometricDistribution0.reseedRandomGenerator(3614);
      hypergeometricDistribution0.cumulativeProbability(2);
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.cumulativeProbability(0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom(3952090531849364496L);
      iSAACRandom0.nextInt();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 854, 854, 1);
      hypergeometricDistribution0.getNumericalMean();
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.sample(877);
      iSAACRandom0.nextLong();
      hypergeometricDistribution0.probability(854);
      double double0 = hypergeometricDistribution0.probability(1);
      assertEquals(Double.NaN, double0, 0.01);
      
      hypergeometricDistribution0.upperCumulativeProbability(0);
      hypergeometricDistribution0.getSupportUpperBound();
      double double1 = hypergeometricDistribution0.cumulativeProbability(0);
      assertEquals(0.0, double1, 0.01);
      
      hypergeometricDistribution0.getSampleSize();
      double double2 = hypergeometricDistribution0.upperCumulativeProbability(424);
      iSAACRandom0.nextDouble();
      double double3 = hypergeometricDistribution0.cumulativeProbability(1011);
      assertNotEquals(double3, double2, 0.01);
      
      hypergeometricDistribution0.getSampleSize();
      iSAACRandom0.nextLong();
      hypergeometricDistribution0.upperCumulativeProbability(0);
      double double4 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double4, 0.01);
      
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.getPopulationSize();
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom(3952090531849364496L);
      iSAACRandom0.nextInt();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 854, 854, 1);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(1.0, double0, 0.01);
      
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.sample(877);
      iSAACRandom0.nextLong();
      hypergeometricDistribution0.probability(854);
      double double1 = hypergeometricDistribution0.probability((-656));
      assertEquals(0.0, double1, 0.01);
      
      hypergeometricDistribution0.upperCumulativeProbability(0);
      hypergeometricDistribution0.getSupportUpperBound();
      double double2 = hypergeometricDistribution0.cumulativeProbability(0);
      hypergeometricDistribution0.getSampleSize();
      double double3 = hypergeometricDistribution0.upperCumulativeProbability(424);
      assertEquals(double3, double2, 0.01);
      
      double double4 = hypergeometricDistribution0.cumulativeProbability(1011);
      assertEquals(1.0, double4, 0.01);
      
      hypergeometricDistribution0.getSampleSize();
      iSAACRandom0.nextLong();
      double double5 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertEquals(double5, double0, 0.01);
      
      double double6 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double6, 0.01);
      
      hypergeometricDistribution0.getNumberOfSuccesses();
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(854, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[0] = (-801);
      intArray0[1] = 0;
      Well19937a well19937a0 = new Well19937a(intArray0);
      well19937a0.nextInt();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 1660, 0, 1660);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.sample();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)126;
      byteArray0[1] = (byte)86;
      well19937a0.nextBytes(byteArray0);
      well19937a0.clear();
      hypergeometricDistribution0.cumulativeProbability((-1836));
      hypergeometricDistribution0.getNumberOfSuccesses();
      well19937a0.setSeed(1952681875);
      hypergeometricDistribution0.getNumericalMean();
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(0.0, double0, 0.01);
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      int int1 = hypergeometricDistribution0.getSupportUpperBound();
      assertTrue(int1 == int0);
      
      hypergeometricDistribution0.getNumberOfSuccesses();
      well19937a0.setSeed(1564L);
      well19937a0.nextGaussian();
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.getNumberOfSuccesses();
      int int2 = hypergeometricDistribution0.getSampleSize();
      assertEquals(1660, int2);
      assertEquals(1660, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 1083, 1083, 1083);
      hypergeometricDistribution0.getNumericalVariance();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byte byte0 = (byte)24;
      try { 
        well44497b0.nextLong((-274L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -274 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.random.BitsStreamGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2426, 1, 2426);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(1, int0);
      
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.probability(1363);
      hypergeometricDistribution0.solveInverseCumulativeProbability(2.316005229949951, (-1), 2780);
      double double0 = hypergeometricDistribution0.cumulativeProbability(3160);
      assertEquals(1.0, double0, 0.01);
      
      double double1 = hypergeometricDistribution0.probability(3160);
      assertEquals(0.0, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(2286, 217, (-1744));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1,744)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      well44497b0.clear();
      well44497b0.setSeed(1433);
      RandomAdaptor randomAdaptor0 = new RandomAdaptor(well44497b0);
      well44497b0.nextInt();
      int int0 = 551;
      int int1 = 3524;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(randomAdaptor0, 551, 551, 3524);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (3,524) must be less than or equal to population size (551)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3614, 3614, 0);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.solveInverseCumulativeProbability(3614, 2437, 3614);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(3614);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = hypergeometricDistribution0.upperCumulativeProbability((-547));
      hypergeometricDistribution0.reseedRandomGenerator(1708L);
      double double2 = hypergeometricDistribution0.cumulativeProbability(2);
      assertEquals(double2, double1, 0.01);
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(3614, int0);
      
      hypergeometricDistribution0.isSupportConnected();
      int int1 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(0, int1);
      
      hypergeometricDistribution0.isSupportConnected();
      assertEquals(3614, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom(1L);
      iSAACRandom0.clear();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 1, 1, 1);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(1.0, double0, 0.01);
      
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 0;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2, 0, 0);
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.calculateNumericalVariance();
      try { 
        hypergeometricDistribution0.cumulativeProbability(1, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lower endpoint (1) must be less than or equal to upper endpoint (0)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = 4760;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4760, 0, 4760);
      hypergeometricDistribution0.solveInverseCumulativeProbability(1937.4, 0, 2301);
      try { 
        hypergeometricDistribution0.cumulativeProbability(4760, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lower endpoint (4,760) must be less than or equal to upper endpoint (0)
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = 34;
      int int1 = 4325;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1, 34, 4325);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (34) must be less than or equal to population size (1)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a((-1L));
      well19937a0.nextInt();
      int int0 = 1427;
      int int1 = (-1);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 1427, (-1), 1427);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-1)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 2164, 0, 1);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      int int1 = hypergeometricDistribution0.getSupportUpperBound();
      assertTrue(int1 == int0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertEquals(1.0, double0, 0.01);
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(2164, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Well512a well512a0 = new Well512a(100L);
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)0;
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-12);
      well512a0.nextBytes(byteArray0);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, (-1539), 1811, (-1539));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-1,539)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a();
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 1, 606, 606);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (606) must be less than or equal to population size (1)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      int int0 = 1;
      mersenneTwister0.nextInt(1);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 0, 1226, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 0;
      int int1 = 864;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(0, 864, 864);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = 0;
      int int1 = 1927;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(0, 0, 1927);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }
}
