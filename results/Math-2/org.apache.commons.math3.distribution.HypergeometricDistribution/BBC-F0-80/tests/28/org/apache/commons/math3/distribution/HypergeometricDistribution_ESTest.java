/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 15:23:59 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.SynchronizedRandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497b;
import org.apache.commons.math3.random.Well512a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister();
      assertNotNull(mersenneTwister0);
      
      long long0 = mersenneTwister0.nextLong(3L);
      assertEquals(1L, long0);
      
      int int0 = 4344;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 4344, 3243, 1332);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(994.4005524861878, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1332, hypergeometricDistribution0.getSampleSize());
      assertEquals(3243, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(4344, hypergeometricDistribution0.getPopulationSize());
      
      double double0 = hypergeometricDistribution0.probability(3243);
      assertEquals(0.0, double0, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(994.4005524861878, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1332, hypergeometricDistribution0.getSampleSize());
      assertEquals(3243, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(4344, hypergeometricDistribution0.getPopulationSize());
      
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(1110);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1293, 191, 191);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(28.214230471771074, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(191, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(191, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1293, hypergeometricDistribution0.getPopulationSize());
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(191, int0);
      assertEquals(28.214230471771074, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(191, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(191, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1293, hypergeometricDistribution0.getPopulationSize());
      
      int int1 = hypergeometricDistribution0.sample();
      assertEquals(34, int1);
      assertFalse(int1 == int0);
      assertEquals(28.214230471771074, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(191, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(191, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1293, hypergeometricDistribution0.getPopulationSize());
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(3);
      assertEquals(0.9999999999970027, double0, 0.01);
      assertEquals(28.214230471771074, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(191, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(191, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1293, hypergeometricDistribution0.getPopulationSize());
      
      hypergeometricDistribution0.reseedRandomGenerator(191);
      assertEquals(28.214230471771074, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(191, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(191, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1293, hypergeometricDistribution0.getPopulationSize());
      
      HypergeometricDistribution hypergeometricDistribution1 = null;
      try {
        hypergeometricDistribution1 = new HypergeometricDistribution(23, (-156), 1293);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-156)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister((int[]) null);
      assertNotNull(mersenneTwister0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1114, 191, 191);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(32.74775583482944, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(191, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(191, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1114, hypergeometricDistribution0.getPopulationSize());
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(161, 191);
      assertEquals(4.440892098500626E-16, double0, 0.01);
      assertEquals(32.74775583482944, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(191, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(191, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1114, hypergeometricDistribution0.getPopulationSize());
      
      double double1 = hypergeometricDistribution0.cumulativeProbability((-1453));
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(32.74775583482944, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(191, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(191, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1114, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister((int[]) null);
      assertNotNull(mersenneTwister0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1293, 191, 191);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1293, hypergeometricDistribution0.getPopulationSize());
      assertEquals(191, hypergeometricDistribution0.getSampleSize());
      assertEquals(191, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(28.214230471771074, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(161);
      assertEquals(0.9999999999999999, double0, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1293, hypergeometricDistribution0.getPopulationSize());
      assertEquals(191, hypergeometricDistribution0.getSampleSize());
      assertEquals(191, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(28.214230471771074, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double1 = hypergeometricDistribution0.probability(1293);
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1293, hypergeometricDistribution0.getPopulationSize());
      assertEquals(191, hypergeometricDistribution0.getSampleSize());
      assertEquals(191, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(28.214230471771074, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double2 = hypergeometricDistribution0.upperCumulativeProbability(191);
      assertEquals(2.3425567287754027E-234, double2, 0.01);
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1293, hypergeometricDistribution0.getPopulationSize());
      assertEquals(191, hypergeometricDistribution0.getSampleSize());
      assertEquals(191, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(28.214230471771074, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      HypergeometricDistribution hypergeometricDistribution1 = null;
      try {
        hypergeometricDistribution1 = new HypergeometricDistribution(191, 1293, 1293);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (1,293) must be less than or equal to population size (191)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister((int[]) null);
      assertNotNull(mersenneTwister0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1293, 191, 191);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1293, hypergeometricDistribution0.getPopulationSize());
      assertEquals(28.214230471771074, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(191, hypergeometricDistribution0.getSampleSize());
      assertEquals(191, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(191);
      assertEquals(2.3425567287754027E-234, double0, 0.01);
      assertEquals(1293, hypergeometricDistribution0.getPopulationSize());
      assertEquals(28.214230471771074, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(191, hypergeometricDistribution0.getSampleSize());
      assertEquals(191, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double1 = hypergeometricDistribution0.probability((-2494));
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(1293, hypergeometricDistribution0.getPopulationSize());
      assertEquals(28.214230471771074, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(191, hypergeometricDistribution0.getSampleSize());
      assertEquals(191, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(0, int0);
      assertEquals(1293, hypergeometricDistribution0.getPopulationSize());
      assertEquals(28.214230471771074, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(191, hypergeometricDistribution0.getSampleSize());
      assertEquals(191, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1164, 1164, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1164, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1164, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(0);
      assertEquals(1.0, double0, 0.01);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1164, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1164, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int[] intArray0 = hypergeometricDistribution0.sample(1164);
      assertEquals(1164, intArray0.length);
      assertNotNull(intArray0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1164, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1164, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double1 = hypergeometricDistribution0.cumulativeProbability(2);
      assertEquals(1.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1164, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1164, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double2 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1164, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1164, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(0, int0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1164, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1164, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int1 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(1164, int1);
      assertFalse(int1 == int0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1164, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1164, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double3 = hypergeometricDistribution0.upperCumulativeProbability(2);
      assertEquals(0.0, double3, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1164, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1164, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double4 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double4, 0.01);
      assertEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(double4, double2, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1164, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1164, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double5 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(0.0, double5, 0.01);
      assertEquals(double5, double3, 0.01);
      assertEquals(double5, double2, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertEquals(double5, double4, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1164, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1164, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double6 = hypergeometricDistribution0.probability(0);
      assertEquals(Double.NaN, double6, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1164, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1164, hypergeometricDistribution0.getNumberOfSuccesses());
      
      MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
      assertEquals(1164, intArray0.length);
      assertNotNull(mersenneTwister0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1164, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1164, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double7 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(0.0, double7, 0.01);
      assertEquals(double7, double4, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertEquals(double7, double5, 0.01);
      assertEquals(double7, double3, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertEquals(double7, double2, 0.01);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1164, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1164, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double8 = hypergeometricDistribution0.cumulativeProbability(2);
      assertEquals(1.0, double8, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double4, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertEquals(double8, double1, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertEquals(double8, double0, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1164, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1164, hypergeometricDistribution0.getNumberOfSuccesses());
      
      MersenneTwister mersenneTwister1 = new MersenneTwister(intArray0);
      assertEquals(1164, intArray0.length);
      assertFalse(mersenneTwister1.equals((Object)mersenneTwister0));
      assertNotNull(mersenneTwister1);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1164, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1164, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double9 = hypergeometricDistribution0.upperCumulativeProbability(419);
      assertEquals(0.0, double9, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertEquals(double9, double5, 0.01);
      assertEquals(double9, double2, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertEquals(double9, double4, 0.01);
      assertNotEquals(double9, double0, 0.01);
      assertEquals(double9, double3, 0.01);
      assertEquals(double9, double7, 0.01);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1164, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1164, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double10 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double10, 0.01);
      assertEquals(double10, double9, 0.01);
      assertEquals(double10, double4, 0.01);
      assertNotEquals(double10, double0, 0.01);
      assertEquals(double10, double7, 0.01);
      assertNotEquals(double10, double8, 0.01);
      assertNotEquals(double10, double1, 0.01);
      assertEquals(double10, double5, 0.01);
      assertEquals(double10, double3, 0.01);
      assertEquals(double10, double2, 0.01);
      assertNotEquals(double10, double6, 0.01);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1164, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1164, hypergeometricDistribution0.getNumberOfSuccesses());
      
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(1097, 30, 597);
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      assertNotNull(hypergeometricDistribution1);
      assertEquals(30, hypergeometricDistribution1.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution1.isSupportConnected());
      assertEquals(1097, hypergeometricDistribution1.getPopulationSize());
      assertEquals(597, hypergeometricDistribution1.getSampleSize());
      assertEquals(16.326344576116682, hypergeometricDistribution1.getNumericalMean(), 0.01);
      
      double double11 = hypergeometricDistribution1.getNumericalMean();
      assertEquals(16.326344576116682, double11, 0.01);
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      assertNotEquals(double11, double1, 0.01);
      assertNotEquals(double11, double0, 0.01);
      assertNotEquals(double11, double4, 0.01);
      assertNotEquals(double11, double7, 0.01);
      assertNotEquals(double11, double2, 0.01);
      assertNotEquals(double11, double6, 0.01);
      assertNotEquals(double11, double9, 0.01);
      assertNotEquals(double11, double10, 0.01);
      assertNotEquals(double11, double5, 0.01);
      assertNotEquals(double11, double3, 0.01);
      assertNotEquals(double11, double8, 0.01);
      assertNotSame(hypergeometricDistribution1, hypergeometricDistribution0);
      assertEquals(30, hypergeometricDistribution1.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution1.isSupportConnected());
      assertEquals(1097, hypergeometricDistribution1.getPopulationSize());
      assertEquals(597, hypergeometricDistribution1.getSampleSize());
      assertEquals(16.326344576116682, hypergeometricDistribution1.getNumericalMean(), 0.01);
      
      double double12 = hypergeometricDistribution1.probability(1);
      assertEquals(1.3528821600851151E-9, double12, 0.01);
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      assertEquals(double12, double5, 0.01);
      assertEquals(double12, double10, 0.01);
      assertEquals(double12, double9, 0.01);
      assertEquals(double12, double3, 0.01);
      assertNotEquals(double12, double0, 0.01);
      assertEquals(double12, double7, 0.01);
      assertEquals(double12, double4, 0.01);
      assertNotEquals(double12, double8, 0.01);
      assertEquals(double12, double2, 0.01);
      assertNotEquals(double12, double6, 0.01);
      assertNotEquals(double12, double11, 0.01);
      assertNotEquals(double12, double1, 0.01);
      assertNotSame(hypergeometricDistribution1, hypergeometricDistribution0);
      assertEquals(30, hypergeometricDistribution1.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution1.isSupportConnected());
      assertEquals(1097, hypergeometricDistribution1.getPopulationSize());
      assertEquals(597, hypergeometricDistribution1.getSampleSize());
      assertEquals(16.326344576116682, hypergeometricDistribution1.getNumericalMean(), 0.01);
      
      double double13 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.0, double13, 0.01);
      assertFalse(hypergeometricDistribution0.equals((Object)hypergeometricDistribution1));
      assertNotEquals(double13, double6, 0.01);
      assertEquals(double13, double7, 0.01);
      assertNotEquals(double13, double0, 0.01);
      assertEquals(double13, double4, 0.01);
      assertEquals(double13, double10, 0.01);
      assertEquals(double13, double9, 0.01);
      assertEquals(double13, double12, 0.01);
      assertEquals(double13, double3, 0.01);
      assertNotEquals(double13, double11, 0.01);
      assertEquals(double13, double5, 0.01);
      assertEquals(double13, double2, 0.01);
      assertNotEquals(double13, double1, 0.01);
      assertNotEquals(double13, double8, 0.01);
      assertNotSame(hypergeometricDistribution0, hypergeometricDistribution1);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1164, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1164, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1164, 1164, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1164, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1164, hypergeometricDistribution0.getNumberOfSuccesses());
      
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(2241, 2241, 1164);
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      assertNotNull(hypergeometricDistribution1);
      assertEquals(2241, hypergeometricDistribution1.getPopulationSize());
      assertEquals(2241, hypergeometricDistribution1.getNumberOfSuccesses());
      assertEquals(1164.0, hypergeometricDistribution1.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution1.isSupportConnected());
      assertEquals(1164, hypergeometricDistribution1.getSampleSize());
      
      double double0 = hypergeometricDistribution1.upperCumulativeProbability(0);
      assertEquals(1.0, double0, 0.01);
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      assertNotSame(hypergeometricDistribution1, hypergeometricDistribution0);
      assertEquals(2241, hypergeometricDistribution1.getPopulationSize());
      assertEquals(2241, hypergeometricDistribution1.getNumberOfSuccesses());
      assertEquals(1164.0, hypergeometricDistribution1.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution1.isSupportConnected());
      assertEquals(1164, hypergeometricDistribution1.getSampleSize());
      
      double double1 = hypergeometricDistribution1.probability(1164);
      assertEquals(1.0, double1, 0.01);
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      assertEquals(double1, double0, 0.01);
      assertNotSame(hypergeometricDistribution1, hypergeometricDistribution0);
      assertEquals(2241, hypergeometricDistribution1.getPopulationSize());
      assertEquals(2241, hypergeometricDistribution1.getNumberOfSuccesses());
      assertEquals(1164.0, hypergeometricDistribution1.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution1.isSupportConnected());
      assertEquals(1164, hypergeometricDistribution1.getSampleSize());
      
      double double2 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double2, 0.01);
      assertFalse(hypergeometricDistribution0.equals((Object)hypergeometricDistribution1));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotSame(hypergeometricDistribution0, hypergeometricDistribution1);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1164, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1164, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(18, 1, 1);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(0.05555555555555555, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(18, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.05246913580246913, double0, 0.01);
      assertEquals(0.05555555555555555, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(18, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1248, 1248, 1248);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1248, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1248, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1248, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1248.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(1248, int0);
      assertEquals(1248, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1248, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1248, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1248.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int1 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(1248, int1);
      assertTrue(int1 == int0);
      assertEquals(1248, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1248, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1248, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1248.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int[] intArray0 = hypergeometricDistribution0.sample(1248);
      assertEquals(1248, intArray0.length);
      assertNotNull(intArray0);
      assertEquals(1248, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1248, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1248, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1248.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int[] intArray1 = hypergeometricDistribution0.sample(1248);
      assertEquals(1248, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      assertNotNull(intArray1);
      assertEquals(1248, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1248, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1248, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1248.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int2 = hypergeometricDistribution0.getSampleSize();
      assertEquals(1248, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1248, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1248, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1248, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1248.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int3 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(1248, int3);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals(1248, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1248, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1248, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1248.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int4 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(1248, int4);
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertTrue(int4 == int0);
      assertTrue(int4 == int2);
      assertEquals(1248, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1248, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1248, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1248.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double0 = hypergeometricDistribution0.probability((-2750));
      assertEquals(0.0, double0, 0.01);
      assertEquals(1248, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1248, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1248, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1248.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int5 = hypergeometricDistribution0.sample();
      assertEquals(1248, int5);
      assertTrue(int5 == int1);
      assertTrue(int5 == int4);
      assertTrue(int5 == int0);
      assertTrue(int5 == int3);
      assertTrue(int5 == int2);
      assertEquals(1248, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1248, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1248, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1248.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double1 = hypergeometricDistribution0.cumulativeProbability((-437), 1248);
      assertEquals(1.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1248, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1248, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1248, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1248.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double2 = hypergeometricDistribution0.probability(1436);
      assertEquals(0.0, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(1248, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1248, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1248, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1248.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int6 = hypergeometricDistribution0.sample();
      assertEquals(1248, int6);
      assertTrue(int6 == int5);
      assertTrue(int6 == int2);
      assertTrue(int6 == int1);
      assertTrue(int6 == int3);
      assertTrue(int6 == int0);
      assertTrue(int6 == int4);
      assertEquals(1248, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1248, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1248, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1248.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int7 = hypergeometricDistribution0.sample();
      assertEquals(1248, int7);
      assertTrue(int7 == int0);
      assertTrue(int7 == int5);
      assertTrue(int7 == int4);
      assertTrue(int7 == int6);
      assertTrue(int7 == int3);
      assertTrue(int7 == int1);
      assertTrue(int7 == int2);
      assertEquals(1248, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1248, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1248, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1248.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int8 = hypergeometricDistribution0.solveInverseCumulativeProbability(0.0, (-2750), (-729));
      assertEquals((-2749), int8);
      assertFalse(int8 == int3);
      assertFalse(int8 == int0);
      assertFalse(int8 == int7);
      assertFalse(int8 == int6);
      assertFalse(int8 == int4);
      assertFalse(int8 == int5);
      assertFalse(int8 == int1);
      assertFalse(int8 == int2);
      assertEquals(1248, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1248, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1248, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1248.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double3 = hypergeometricDistribution0.probability((-2750));
      assertEquals(0.0, double3, 0.01);
      assertEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(1248, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1248, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1248, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1248.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double4 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.0, double4, 0.01);
      assertEquals(double4, double0, 0.01);
      assertEquals(double4, double2, 0.01);
      assertEquals(double4, double3, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(1248, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1248, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1248, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1248.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double5 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.0, double5, 0.01);
      assertEquals(double5, double3, 0.01);
      assertEquals(double5, double0, 0.01);
      assertEquals(double5, double4, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertEquals(double5, double2, 0.01);
      assertEquals(1248, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1248, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1248, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1248.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double6 = hypergeometricDistribution0.cumulativeProbability(927);
      assertEquals(0.0, double6, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertEquals(double6, double0, 0.01);
      assertEquals(double6, double4, 0.01);
      assertEquals(double6, double3, 0.01);
      assertEquals(double6, double5, 0.01);
      assertEquals(double6, double2, 0.01);
      assertEquals(1248, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1248, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1248, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1248.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      assertEquals(1248, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1248, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1248, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1248.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution(1252, 999, 1248);
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      assertNotNull(hypergeometricDistribution1);
      assertTrue(hypergeometricDistribution1.isSupportConnected());
      assertEquals(1252, hypergeometricDistribution1.getPopulationSize());
      assertEquals(999, hypergeometricDistribution1.getNumberOfSuccesses());
      assertEquals(995.8083067092651, hypergeometricDistribution1.getNumericalMean(), 0.01);
      assertEquals(1248, hypergeometricDistribution1.getSampleSize());
      
      double double7 = hypergeometricDistribution1.getNumericalVariance();
      assertEquals(0.6434200922902421, double7, 0.01);
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotSame(hypergeometricDistribution1, hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution1.isSupportConnected());
      assertEquals(1252, hypergeometricDistribution1.getPopulationSize());
      assertEquals(999, hypergeometricDistribution1.getNumberOfSuccesses());
      assertEquals(995.8083067092651, hypergeometricDistribution1.getNumericalMean(), 0.01);
      assertEquals(1248, hypergeometricDistribution1.getSampleSize());
      
      double double8 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.0, double8, 0.01);
      assertFalse(hypergeometricDistribution0.equals((Object)hypergeometricDistribution1));
      assertEquals(double8, double3, 0.01);
      assertEquals(double8, double5, 0.01);
      assertEquals(double8, double0, 0.01);
      assertEquals(double8, double2, 0.01);
      assertNotEquals(double8, double7, 0.01);
      assertEquals(double8, double6, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertEquals(double8, double4, 0.01);
      assertNotSame(hypergeometricDistribution0, hypergeometricDistribution1);
      assertEquals(1248, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1248, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1248, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1248.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b((int[]) null);
      assertNotNull(well44497b0);
      
      double double0 = well44497b0.nextDouble();
      assertEquals(0.8205931517948541, double0, 0.01);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1392, 1392, 1392);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1392.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1392, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1392, hypergeometricDistribution0.getSampleSize());
      assertEquals(1392, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(1392, int0);
      assertEquals(1392.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1392, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1392, hypergeometricDistribution0.getSampleSize());
      assertEquals(1392, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double1 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertEquals(1.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(1392.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1392, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1392, hypergeometricDistribution0.getSampleSize());
      assertEquals(1392, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int1 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(1392, int1);
      assertTrue(int1 == int0);
      assertEquals(1392.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1392, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1392, hypergeometricDistribution0.getSampleSize());
      assertEquals(1392, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double2 = hypergeometricDistribution0.probability(1392);
      assertEquals(Double.NaN, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(1392.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1392, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1392, hypergeometricDistribution0.getSampleSize());
      assertEquals(1392, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int2 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(1392, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1392.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1392, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1392, hypergeometricDistribution0.getSampleSize());
      assertEquals(1392, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double3 = hypergeometricDistribution0.cumulativeProbability(0);
      assertEquals(0.0, double3, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(1392.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1392, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1392, hypergeometricDistribution0.getSampleSize());
      assertEquals(1392, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double4 = hypergeometricDistribution0.upperCumulativeProbability(1392);
      assertEquals(1.0, double4, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertEquals(1392.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1392, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1392, hypergeometricDistribution0.getSampleSize());
      assertEquals(1392, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double5 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.0, double5, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertEquals(double5, double3, 0.01);
      assertEquals(1392.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1392, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1392, hypergeometricDistribution0.getSampleSize());
      assertEquals(1392, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int3 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(1392, int3);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals(1392.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1392, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1392, hypergeometricDistribution0.getSampleSize());
      assertEquals(1392, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int4 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(1392, int4);
      assertTrue(int4 == int3);
      assertTrue(int4 == int0);
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      assertEquals(1392.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1392, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1392, hypergeometricDistribution0.getSampleSize());
      assertEquals(1392, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int5 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(1392, int5);
      assertTrue(int5 == int2);
      assertTrue(int5 == int3);
      assertTrue(int5 == int4);
      assertTrue(int5 == int0);
      assertTrue(int5 == int1);
      assertEquals(1392.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1392, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1392, hypergeometricDistribution0.getSampleSize());
      assertEquals(1392, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double6 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(1392.0, double6, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertEquals(1392.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1392, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1392, hypergeometricDistribution0.getSampleSize());
      assertEquals(1392, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int6 = 2632;
      double double7 = hypergeometricDistribution0.upperCumulativeProbability(2632);
      assertEquals(0.0, double7, 0.01);
      assertEquals(double7, double3, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertEquals(double7, double5, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertEquals(1392.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1392, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1392, hypergeometricDistribution0.getSampleSize());
      assertEquals(1392, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int7 = 1;
      HypergeometricDistribution hypergeometricDistribution1 = null;
      try {
        hypergeometricDistribution1 = new HypergeometricDistribution(well44497b0, 558, 1392, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (1,392) must be less than or equal to population size (558)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b((int[]) null);
      assertNotNull(well44497b0);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 2254, (-641), 575);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-641)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 0;
      Well512a well512a0 = new Well512a(0);
      assertNotNull(well512a0);
      
      int[] intArray0 = new int[3];
      well512a0.setSeed(0);
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      well512a0.setSeed(intArray0);
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      
      double double0 = well512a0.nextDouble();
      assertEquals(0.21217395873649414, double0, 0.01);
      
      long long0 = well512a0.nextLong();
      assertEquals((-298075253561579297L), long0);
      
      int int1 = 1541;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 1086, 1541, 1541);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (1,541) must be less than or equal to population size (1,086)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1826, 1651, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1826, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1651, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertEquals(1.0, double0, 0.01);
      assertEquals(1826, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1651, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int[] intArray0 = hypergeometricDistribution0.sample(1009);
      assertEquals(1009, intArray0.length);
      assertNotNull(intArray0);
      assertEquals(1826, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1651, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double1 = hypergeometricDistribution0.cumulativeProbability(1009);
      assertEquals(1.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(1826, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1651, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int0 = hypergeometricDistribution0.solveInverseCumulativeProbability(640.44609, 0, 0);
      assertEquals(0, int0);
      assertEquals(1826, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1651, hypergeometricDistribution0.getNumberOfSuccesses());
      
      hypergeometricDistribution0.reseedRandomGenerator((-485L));
      assertEquals(1826, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1651, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int1 = hypergeometricDistribution0.sample();
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(1826, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1651, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double2 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertEquals(1.0, double2, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(1826, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1651, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int2 = hypergeometricDistribution0.solveInverseCumulativeProbability((-1315.972), 0, 0);
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(1826, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1651, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int3 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(0, int3);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals(1826, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1651, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double3 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(0.0, double3, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(1826, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1651, hypergeometricDistribution0.getNumberOfSuccesses());
      
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      assertEquals(1826, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1651, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int4 = hypergeometricDistribution0.sample();
      assertEquals(0, int4);
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      assertTrue(int4 == int0);
      assertEquals(1826, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1651, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double4 = hypergeometricDistribution0.probability(1651);
      assertEquals(0.0, double4, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertEquals(double4, double3, 0.01);
      assertEquals(1826, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1651, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double5 = hypergeometricDistribution0.cumulativeProbability(2999);
      assertEquals(1.0, double5, 0.01);
      assertEquals(double5, double2, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertEquals(double5, double0, 0.01);
      assertNotEquals(double5, double3, 0.01);
      assertEquals(double5, double1, 0.01);
      assertEquals(1826, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1651, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double6 = hypergeometricDistribution0.upperCumulativeProbability(1651);
      assertEquals(0.0, double6, 0.01);
      assertEquals(double6, double3, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertEquals(double6, double4, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double2, 0.01);
      assertEquals(1826, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1651, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double7 = hypergeometricDistribution0.probability(1826);
      assertEquals(0.0, double7, 0.01);
      assertEquals(double7, double3, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertEquals(double7, double4, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertEquals(double7, double6, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertEquals(1826, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1651, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double8 = hypergeometricDistribution0.upperCumulativeProbability(1826);
      assertEquals(0.0, double8, 0.01);
      assertEquals(double8, double4, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertEquals(double8, double7, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertEquals(double8, double3, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertEquals(double8, double6, 0.01);
      assertEquals(1826, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1651, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int5 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(0, int5);
      assertTrue(int5 == int0);
      assertTrue(int5 == int3);
      assertTrue(int5 == int4);
      assertTrue(int5 == int2);
      assertTrue(int5 == int1);
      assertEquals(1826, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1651, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int6 = hypergeometricDistribution0.getSampleSize();
      assertEquals(0, int6);
      assertTrue(int6 == int1);
      assertTrue(int6 == int2);
      assertTrue(int6 == int3);
      assertTrue(int6 == int0);
      assertTrue(int6 == int5);
      assertTrue(int6 == int4);
      assertEquals(1826, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1651, hypergeometricDistribution0.getNumberOfSuccesses());
      
      boolean boolean1 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1826, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1651, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double9 = hypergeometricDistribution0.probability(0);
      assertEquals(1.0, double9, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertEquals(double9, double5, 0.01);
      assertEquals(double9, double2, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertEquals(double9, double1, 0.01);
      assertEquals(double9, double0, 0.01);
      assertEquals(1826, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1651, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double10 = hypergeometricDistribution0.probability((-505));
      assertEquals(0.0, double10, 0.01);
      assertEquals(double10, double6, 0.01);
      assertNotEquals(double10, double1, 0.01);
      assertEquals(double10, double8, 0.01);
      assertEquals(double10, double7, 0.01);
      assertNotEquals(double10, double0, 0.01);
      assertNotEquals(double10, double9, 0.01);
      assertNotEquals(double10, double2, 0.01);
      assertEquals(double10, double4, 0.01);
      assertEquals(double10, double3, 0.01);
      assertNotEquals(double10, double5, 0.01);
      assertEquals(1826, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1651, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double11 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.0, double11, 0.01);
      assertEquals(double11, double3, 0.01);
      assertEquals(double11, double10, 0.01);
      assertNotEquals(double11, double0, 0.01);
      assertNotEquals(double11, double9, 0.01);
      assertNotEquals(double11, double1, 0.01);
      assertEquals(double11, double8, 0.01);
      assertEquals(double11, double6, 0.01);
      assertEquals(double11, double7, 0.01);
      assertNotEquals(double11, double5, 0.01);
      assertNotEquals(double11, double2, 0.01);
      assertEquals(double11, double4, 0.01);
      assertEquals(1826, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1651, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom();
      assertNotNull(iSAACRandom0);
      
      iSAACRandom0.setSeed(0);
      int int0 = 1373;
      iSAACRandom0.setSeed(1373);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 453, 453, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(453, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(453, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(453, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(453, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int1 = (-667);
      double double1 = hypergeometricDistribution0.upperCumulativeProbability(453);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(453, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(453, hypergeometricDistribution0.getNumberOfSuccesses());
      
      float float0 = iSAACRandom0.nextFloat();
      assertEquals(0.13192916F, float0, 0.01F);
      
      try { 
        iSAACRandom0.nextLong((long) 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.random.BitsStreamGenerator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 0;
      int int1 = 1331;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1322, 0, 1331);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (1,331) must be less than or equal to population size (1,322)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[0];
      Well512a well512a0 = new Well512a(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well512a0, 802, 802, 802);
      well512a0.setSeed(intArray0);
      well512a0.nextLong();
      well512a0.setSeed(intArray0);
      well512a0.nextLong();
      double double0 = hypergeometricDistribution0.cumulativeProbability(802);
      hypergeometricDistribution0.sample(222);
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      
      hypergeometricDistribution0.getSupportUpperBound();
      double double1 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.0, double1, 0.01);
      
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.upperCumulativeProbability(0);
      hypergeometricDistribution0.getNumberOfSuccesses();
      double double2 = hypergeometricDistribution0.upperCumulativeProbability(1);
      assertEquals(double2, double0, 0.01);
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(802, int0);
      
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.getSampleSize();
      int int1 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(802.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(802, int1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1357, (-796), (-796));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-796)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      int int0 = 2;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2, 2, 2);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.inverseCumulativeProbability(1.0);
      hypergeometricDistribution0.reseedRandomGenerator((-3010L));
      hypergeometricDistribution0.probability(2);
      hypergeometricDistribution0.reseedRandomGenerator(2);
      hypergeometricDistribution0.probability(2);
      try { 
        hypergeometricDistribution0.inverseCumulativeProbability((-1135.5162348602203));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,135.516 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b((int[]) null);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 2254, 2254, 2254);
      double double0 = hypergeometricDistribution0.probability(2254);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      int int0 = 2676;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2676, 637, 0);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.probability((-2896));
      hypergeometricDistribution0.getSupportLowerBound();
      try { 
        hypergeometricDistribution0.inverseCumulativeProbability(714.531830462208);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 714.532 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(4503599627370496L);
      mersenneTwister0.setSeed(4503599627370496L);
      int[] intArray0 = new int[4];
      intArray0[0] = 1328;
      intArray0[1] = 0;
      intArray0[2] = (-404);
      mersenneTwister0.nextLong();
      intArray0[3] = (-228);
      mersenneTwister0.setSeed(intArray0);
      mersenneTwister0.nextGaussian();
      mersenneTwister0.nextInt();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 32, 1, 1);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.sample();
      hypergeometricDistribution0.getPopulationSize();
      hypergeometricDistribution0.isSupportConnected();
      hypergeometricDistribution0.sample(1056);
      hypergeometricDistribution0.getSupportUpperBound();
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(0, int0);
      
      hypergeometricDistribution0.getSampleSize();
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertEquals(1.0, double0, 0.01);
      assertEquals(0.03125, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator((RandomGenerator) null);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(synchronizedRandomGenerator0, 3818, 3818, 3818);
      double double0 = hypergeometricDistribution0.cumulativeProbability(0);
      assertEquals(0.0, double0, 0.01);
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(3818.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3818, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = (-226);
      intArray0[2] = (-2536);
      intArray0[3] = 4551;
      intArray0[4] = 0;
      intArray0[5] = (-905);
      intArray0[6] = 793;
      intArray0[7] = 0;
      intArray0[8] = 1164;
      Well19937c well19937c0 = new Well19937c(intArray0);
      well19937c0.nextFloat();
      well19937c0.nextDouble();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 1164, 0, 0);
      hypergeometricDistribution0.sample();
      well19937c0.setSeed(1L);
      hypergeometricDistribution0.reseedRandomGenerator(1164);
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      double double0 = hypergeometricDistribution0.probability(0);
      assertEquals(Double.NaN, double0, 0.01);
      
      hypergeometricDistribution0.getNumericalMean();
      int int1 = hypergeometricDistribution0.getSampleSize();
      assertTrue(int1 == int0);
      
      double double1 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(0.0, double1, 0.01);
      assertEquals(1164, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(1566083941L);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 1, 0, 0);
      double double0 = hypergeometricDistribution0.probability(0);
      well1024a0.nextDouble();
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getNumericalMean();
      well1024a0.nextLong();
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(1, int0);
      
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)59;
      byteArray0[1] = (byte)2;
      well1024a0.nextBytes(byteArray0);
      hypergeometricDistribution0.calculateNumericalVariance();
      hypergeometricDistribution0.cumulativeProbability(1);
      hypergeometricDistribution0.isSupportConnected();
      double double1 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(double1, double0, 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(Double.NaN, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1362, 1362, (-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister((-2703));
      mersenneTwister0.nextLong();
      int int0 = (-4840);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, (-2703), (-2703), (-4840));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-2,703)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(0);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 0, 1336, 1336);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }
}
