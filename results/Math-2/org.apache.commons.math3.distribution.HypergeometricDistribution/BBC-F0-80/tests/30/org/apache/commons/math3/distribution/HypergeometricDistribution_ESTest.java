/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 15:23:49 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomAdaptor;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.SynchronizedRandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497b;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(505, 16, 16);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(505, hypergeometricDistribution0.getPopulationSize());
      assertEquals(16, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(16, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.5069306930693069, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(16);
      assertEquals(1.4867178343090485E-30, double0, 0.01);
      assertEquals(505, hypergeometricDistribution0.getPopulationSize());
      assertEquals(16, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(16, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.5069306930693069, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1329, 0, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1329, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertEquals(1.0, double0, 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1329, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(1549);
      assertNotNull(well19937c0);
      
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(well19937c0);
      assertNotNull(synchronizedRandomGenerator0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(synchronizedRandomGenerator0, 1549, 1549, 982);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1549, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(982.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1549, hypergeometricDistribution0.getPopulationSize());
      assertEquals(982, hypergeometricDistribution0.getSampleSize());
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(982);
      assertEquals(1.0, double0, 0.01);
      assertEquals(1549, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(982.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1549, hypergeometricDistribution0.getPopulationSize());
      assertEquals(982, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(1L);
      assertNotNull(mersenneTwister0);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 632, 1337, 539);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (1,337) must be less than or equal to population size (632)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 0, (-558), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a((-272));
      assertNotNull(well1024a0);
      
      RandomAdaptor randomAdaptor0 = new RandomAdaptor(well1024a0);
      assertNotNull(randomAdaptor0);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(randomAdaptor0, (-272), (-272), (-272));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-272)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      assertNotNull(well44497b0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 1329, 16, 505);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1329, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(16, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(505, hypergeometricDistribution0.getSampleSize());
      assertEquals(6.0797592174567345, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double0 = hypergeometricDistribution0.probability(0);
      assertEquals(4.5097853897625516E-4, double0, 0.01);
      assertEquals(1329, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(16, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(505, hypergeometricDistribution0.getSampleSize());
      assertEquals(6.0797592174567345, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1329, 0, 0);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1329, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(0, int0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1329, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(1549);
      assertNotNull(well19937c0);
      
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(well19937c0);
      assertNotNull(synchronizedRandomGenerator0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(synchronizedRandomGenerator0, 1549, 1549, 982);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1549, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(982.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1549, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(982, hypergeometricDistribution0.getSampleSize());
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(982, int0);
      assertEquals(1549, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(982.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1549, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(982, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(681, 0, 681);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(681, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(681, hypergeometricDistribution0.getSampleSize());
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(0, int0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(681, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(681, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(1549);
      assertNotNull(well19937c0);
      
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(well19937c0);
      assertNotNull(synchronizedRandomGenerator0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(synchronizedRandomGenerator0, 1549, 1549, 982);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1549, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(982.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(982, hypergeometricDistribution0.getSampleSize());
      assertEquals(1549, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(982, int0);
      assertEquals(1549, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(982.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(982, hypergeometricDistribution0.getSampleSize());
      assertEquals(1549, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(1549);
      assertNotNull(well19937c0);
      
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(well19937c0);
      assertNotNull(synchronizedRandomGenerator0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(synchronizedRandomGenerator0, 1549, 1549, 982);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(982.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1549, hypergeometricDistribution0.getPopulationSize());
      assertEquals(982, hypergeometricDistribution0.getSampleSize());
      assertEquals(1549, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(982, int0);
      assertEquals(982.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1549, hypergeometricDistribution0.getPopulationSize());
      assertEquals(982, hypergeometricDistribution0.getSampleSize());
      assertEquals(1549, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(1549);
      assertNotNull(well19937c0);
      
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(well19937c0);
      assertNotNull(synchronizedRandomGenerator0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(synchronizedRandomGenerator0, 1549, 1549, 982);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1549, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(982.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1549, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(982, hypergeometricDistribution0.getSampleSize());
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1549, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(982.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1549, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(982, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(681, 0, 681);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(681, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(681, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(0.0, double0, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(681, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(681, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(1549);
      assertNotNull(well19937c0);
      
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(well19937c0);
      assertNotNull(synchronizedRandomGenerator0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(synchronizedRandomGenerator0, 1549, 1549, 982);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1549, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(982.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(982, hypergeometricDistribution0.getSampleSize());
      assertEquals(1549, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(982.0, double0, 0.01);
      assertEquals(1549, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(982.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(982, hypergeometricDistribution0.getSampleSize());
      assertEquals(1549, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1329, 0, 0);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1329, hypergeometricDistribution0.getPopulationSize());
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(0, int0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1329, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(1549);
      assertNotNull(well19937c0);
      
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(well19937c0);
      assertNotNull(synchronizedRandomGenerator0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(synchronizedRandomGenerator0, 1549, 1549, 982);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1549, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(982.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1549, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(982, hypergeometricDistribution0.getSampleSize());
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1549, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(982.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1549, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(982, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(505, 16, 16);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(505, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.5069306930693069, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(16, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(16, hypergeometricDistribution0.getSampleSize());
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.47626031061380536, double0, 0.01);
      assertEquals(505, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.5069306930693069, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(16, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(16, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3046, 1290, 1290);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(3046, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1290, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(546.3230466185161, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1290, hypergeometricDistribution0.getSampleSize());
      
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(727);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(1549);
      assertNotNull(well19937c0);
      
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(well19937c0);
      assertNotNull(synchronizedRandomGenerator0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(synchronizedRandomGenerator0, 1549, 1549, 982);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(982.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1549, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(982, hypergeometricDistribution0.getSampleSize());
      assertEquals(1549, hypergeometricDistribution0.getPopulationSize());
      
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(1549, int0);
      assertEquals(982.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1549, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(982, hypergeometricDistribution0.getSampleSize());
      assertEquals(1549, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(1549);
      assertNotNull(well19937c0);
      
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(well19937c0);
      assertNotNull(synchronizedRandomGenerator0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(synchronizedRandomGenerator0, 1549, 1549, 982);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1549, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(982.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1549, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(982, hypergeometricDistribution0.getSampleSize());
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(1549, int0);
      assertEquals(1549, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(982.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1549, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(982, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1, 0, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(0, int0);
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      assertNotNull(well44497b0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 1329, 16, 505);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(505, hypergeometricDistribution0.getSampleSize());
      assertEquals(1329, hypergeometricDistribution0.getPopulationSize());
      assertEquals(6.0797592174567345, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(16, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(441);
      assertEquals(0.0, double0, 0.01);
      assertEquals(505, hypergeometricDistribution0.getSampleSize());
      assertEquals(1329, hypergeometricDistribution0.getPopulationSize());
      assertEquals(6.0797592174567345, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(16, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(890, 890, 890);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(890, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(890.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(890, hypergeometricDistribution0.getPopulationSize());
      assertEquals(890, hypergeometricDistribution0.getSampleSize());
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertEquals(1.0, double0, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(890, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(890.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(890, hypergeometricDistribution0.getPopulationSize());
      assertEquals(890, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(1071);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 3075, 2266, 1071);
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability(515);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3046, 1290, 1290);
      double double0 = hypergeometricDistribution0.probability(3046);
      assertEquals(0.0, double0, 0.01);
      assertEquals(546.3230466185161, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b(2);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 1329, 16, 505);
      double double0 = hypergeometricDistribution0.probability((-1474));
      assertEquals(0.0, double0, 0.01);
      assertEquals(6.0797592174567345, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1, 0, 0);
      double double0 = hypergeometricDistribution0.cumulativeProbability(1690);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1, 0, 0);
      double double0 = hypergeometricDistribution0.cumulativeProbability((-3311));
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(525, 0, 621);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (621) must be less than or equal to population size (525)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1, 1, (-1703));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1,703)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int[] intArray0 = new int[8];
      Well1024a well1024a0 = new Well1024a(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 850, (-190), 30);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-190)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(0, 0, 552);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 1329, 16, 505);
      hypergeometricDistribution0.sample(16);
      assertEquals(6.0797592174567345, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(10000000, 339, 10000000);
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      assertEquals((-90.4967296), hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(16, 1, 1);
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.05859375, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(10000000, 339, 10000000);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals((-90.4967296), double0, 0.01);
  }
}
