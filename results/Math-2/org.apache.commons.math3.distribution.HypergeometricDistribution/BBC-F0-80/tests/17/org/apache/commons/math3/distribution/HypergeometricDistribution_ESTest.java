/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 15:00:25 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.SynchronizedRandomGenerator;
import org.apache.commons.math3.random.Well19937c;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1017, 1017, 1017);
      assertEquals(1017, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1017, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1017.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1017, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      int[] intArray0 = hypergeometricDistribution0.sample(854);
      assertEquals(1017, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1017, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1017.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1017, hypergeometricDistribution0.getSampleSize());
      assertNotNull(intArray0);
      assertEquals(854, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c((long) 996);
      assertNotNull(well19937c0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 996, 995, 995);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(996, hypergeometricDistribution0.getPopulationSize());
      assertEquals(995, hypergeometricDistribution0.getSampleSize());
      assertEquals(994.0010040160643, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(995, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(995);
      assertEquals(0.0010040160642570282, double0, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(996, hypergeometricDistribution0.getPopulationSize());
      assertEquals(995, hypergeometricDistribution0.getSampleSize());
      assertEquals(994.0010040160643, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(995, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1017, 1017, 1017);
      assertEquals(1017.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1017, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1017, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1017, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(1017);
      assertEquals(1.0, double0, 0.01);
      assertEquals(1017.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1017, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1017, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1017, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2167, 460, 0);
      assertEquals(460, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2167, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.probability(0);
      assertEquals(1.0, double0, 0.01);
      assertEquals(460, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2167, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(0, 0, 785);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((-1019), 2, (-1019));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-1,019)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1399, 191, 191);
      assertEquals(1399, hypergeometricDistribution0.getPopulationSize());
      assertEquals(191, hypergeometricDistribution0.getSampleSize());
      assertEquals(191, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(26.07648320228735, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.probability(54);
      assertEquals(3.86122641128726E-9, double0, 0.01);
      assertEquals(1399, hypergeometricDistribution0.getPopulationSize());
      assertEquals(191, hypergeometricDistribution0.getSampleSize());
      assertEquals(191, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(26.07648320228735, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2167, 460, 0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2167, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(460, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(0, int0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2167, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(460, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1, 1, 1);
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(1, int0);
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c((long) 996);
      assertNotNull(well19937c0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 996, 995, 995);
      assertEquals(995, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(994.0010040160643, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(995, hypergeometricDistribution0.getSampleSize());
      assertEquals(996, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(994, int0);
      assertEquals(995, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(994.0010040160643, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(995, hypergeometricDistribution0.getSampleSize());
      assertEquals(996, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1, 0, 0);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(0, int0);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1017, 1017, 1017);
      assertEquals(1017, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1017, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1017.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1017, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1017, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1017, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1017.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1017, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1399, 191, 191);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(191, hypergeometricDistribution0.getSampleSize());
      assertEquals(191, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(26.07648320228735, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1399, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(19.45619913657039, double0, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(191, hypergeometricDistribution0.getSampleSize());
      assertEquals(191, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(26.07648320228735, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1399, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(899, 0, 0);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(899, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(899, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1, 1, 1);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(1.0, double0, 0.01);
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2155, 0, 0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(2155, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(0, int0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(2155, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1399, 191, 191);
      assertEquals(26.07648320228735, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(191, hypergeometricDistribution0.getSampleSize());
      assertEquals(191, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1399, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.cumulativeProbability((-2778));
      assertEquals(0.0, double0, 0.01);
      assertEquals(26.07648320228735, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(191, hypergeometricDistribution0.getSampleSize());
      assertEquals(191, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1399, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(2788);
      assertNotNull(well19937c0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 2788, 2788, 2788);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2788, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2788, hypergeometricDistribution0.getSampleSize());
      assertEquals(2788.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2788, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(2788);
      assertEquals(1.0, double0, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2788, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2788, hypergeometricDistribution0.getSampleSize());
      assertEquals(2788.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2788, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2167, 460, 0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2167, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(460, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2167, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(460, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1399, 191, 191);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(26.07648320228735, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(191, hypergeometricDistribution0.getSampleSize());
      assertEquals(191, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1399, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(19.45619913657039, double0, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(26.07648320228735, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(191, hypergeometricDistribution0.getSampleSize());
      assertEquals(191, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1399, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c(2585);
      assertNotNull(well19937c0);
      
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(well19937c0);
      assertNotNull(synchronizedRandomGenerator0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(synchronizedRandomGenerator0, 2585, 1229, 1229);
      assertEquals(2585, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1229, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1229, hypergeometricDistribution0.getSampleSize());
      assertEquals(584.3098646034816, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability(1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1, 1, 1);
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(1, int0);
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1, 1, 1);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(1, int0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1, hypergeometricDistribution0.getSampleSize());
      assertEquals(1, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2362, 996, 996);
      assertEquals(2362, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(996, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(419.98983911939035, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(996, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(996, int0);
      assertEquals(2362, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(996, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(419.98983911939035, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(996, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1399, 191, 191);
      assertEquals(191, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(191, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(26.07648320228735, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1399, hypergeometricDistribution0.getPopulationSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(1228);
      assertEquals(0.0, double0, 0.01);
      assertEquals(191, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(191, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(26.07648320228735, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1399, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1399, 185, 185);
      assertEquals(24.463902787705504, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1399, hypergeometricDistribution0.getPopulationSize());
      assertEquals(185, hypergeometricDistribution0.getSampleSize());
      assertEquals(185, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability((-1057));
      assertEquals(1.0, double0, 0.01);
      assertEquals(24.463902787705504, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1399, hypergeometricDistribution0.getPopulationSize());
      assertEquals(185, hypergeometricDistribution0.getSampleSize());
      assertEquals(185, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1399, 191, 191);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(191, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1399, hypergeometricDistribution0.getPopulationSize());
      assertEquals(26.07648320228735, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(191, hypergeometricDistribution0.getSampleSize());
      assertNotNull(hypergeometricDistribution0);
      
      double double0 = hypergeometricDistribution0.probability((-1221985044));
      assertEquals(0.0, double0, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(191, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1399, hypergeometricDistribution0.getPopulationSize());
      assertEquals(26.07648320228735, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(191, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1399, 191, 191);
      int int0 = hypergeometricDistribution0.solveInverseCumulativeProbability(0.0, (-215), 1228);
      assertEquals((-214), int0);
      assertEquals(26.07648320228735, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2362, 996, 996);
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(977);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(996, 2, 2169);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (2,169) must be less than or equal to population size (996)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c((long) 996);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 838, 995, 892);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (995) must be less than or equal to population size (838)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 62, 1497, (-800));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-800)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(1489, (-1747), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-1,747)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1399, 191, 191);
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertEquals(26.07648320228735, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2362, 996, 996);
      double double0 = hypergeometricDistribution0.probability(2362);
      assertEquals(419.98983911939035, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2362, 996, 996);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(419.98983911939035, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, int0);
  }
}
