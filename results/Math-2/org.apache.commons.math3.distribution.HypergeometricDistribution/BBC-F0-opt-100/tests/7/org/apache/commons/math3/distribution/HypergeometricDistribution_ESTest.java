/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 20:20:35 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomAdaptor;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 1082, 1082, 1082);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(844);
      assertEquals(1.0, double0, 0.01);
      assertEquals(1082.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1994, 223, 1994);
      double double0 = hypergeometricDistribution0.cumulativeProbability(223);
      assertEquals(1.0, double0, 0.01);
      assertEquals(223.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(788, 2633, 2633);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (2,633) must be less than or equal to population size (788)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((-1519), (-1234), (-3370));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-1,519)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(4607182418800017408L);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 166, 166, 0);
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(166, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(166, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1406, 58, 58);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(0, int0);
      assertEquals(2.392603129445235, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 2633, 1459, 0);
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1459, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2633, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1406, 58, 58);
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(2.2008416987326576, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(4607182418800017408L);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 166, 166, 0);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(166, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double0, 0.01);
      assertEquals(166, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 2029, 654, 654);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(210.80137999014292, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1842, 0, 1842);
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(1842, hypergeometricDistribution0.getSampleSize());
      assertEquals(1842, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(58, 58, 4);
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(4, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 2029, 654, 654);
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(96.85651714923159, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2635, 1043, 838);
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability(67);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 2029, 654, 654);
      double double0 = hypergeometricDistribution0.probability(0);
      assertEquals(2.195327487211302E-141, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(4607182418800017408L);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 166, 166, 0);
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(166, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(166, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 1082, 1082, 1082);
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(1082.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1082, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1406, 58, 58);
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(2.392603129445235, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(58, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1406, 58, 58);
      int int0 = hypergeometricDistribution0.sample();
      assertEquals(4, int0);
      
      int int1 = hypergeometricDistribution0.sample();
      assertEquals(2.392603129445235, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(3, int1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1406, 58, 58);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(58);
      assertEquals(2.021709418190967E-104, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(58, 58, 4);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(4);
      assertEquals(4.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1406, 58, 58);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(127);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2.392603129445235, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1406, 58, 58);
      double double0 = hypergeometricDistribution0.probability(1406);
      assertEquals(0.0, double0, 0.01);
      assertEquals(2.392603129445235, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1406, 58, 58);
      double double0 = hypergeometricDistribution0.probability((-671));
      assertEquals(2.392603129445235, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1406, 58, 58);
      double double0 = hypergeometricDistribution0.cumulativeProbability(5019);
      assertEquals(2.392603129445235, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2029, 2029, 2029);
      double double0 = hypergeometricDistribution0.cumulativeProbability(654);
      assertEquals(2029.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      RandomAdaptor randomAdaptor0 = new RandomAdaptor(well19937c0);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(randomAdaptor0, 3629, 2168, 4463);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (4,463) must be less than or equal to population size (3,629)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(31, 223, 31);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (223) must be less than or equal to population size (31)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(671, 1942, (-1537));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1,537)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(329, (-294), 1370);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-294)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MersenneTwister mersenneTwister0 = new MersenneTwister(223);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 0, 1540, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(826925236, 826925236, 826925236);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(826925236, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 2029, 654, 654);
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(210.80137999014292, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(654, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 2633, 1459, 0);
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      assertEquals(1459, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2633, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1842, 0, 1842);
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1842, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1842, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4907, 1068, 1068);
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(969);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(826925236, 826925236, 826925236);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals((-0.8949607724875384), double0, 0.01);
  }
}
