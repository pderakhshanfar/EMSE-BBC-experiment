/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 20:27:35 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.MersenneTwister;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well44497a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom((-5034868814120038111L));
      assertNotNull(iSAACRandom0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 4821, 2757, 925);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(4821, hypergeometricDistribution0.getPopulationSize());
      assertEquals(528.9825762289981, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2757, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(925, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int0 = 556;
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(556);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a((-1528));
      assertNotNull(well19937a0);
      
      int int0 = well19937a0.nextInt();
      assertEquals(472144025, int0);
      
      double double0 = well19937a0.nextDouble();
      assertEquals(0.2371388876649252, double0, 0.01);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(472144025, 472144025, 472144025);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(472144025, hypergeometricDistribution0.getPopulationSize());
      assertEquals(472144025, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals((-4.488187397902578), hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(472144025, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int1 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(472144025, hypergeometricDistribution0.getPopulationSize());
      assertEquals(472144025, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals((-4.488187397902578), hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(472144025, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(472144025, int1);
      assertTrue(int1 == int0);
      
      double double1 = well19937a0.nextGaussian();
      assertEquals((-2.0543444160923428), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      int int2 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(472144025, hypergeometricDistribution0.getPopulationSize());
      assertEquals(472144025, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals((-4.488187397902578), hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(472144025, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(472144025, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte) (-65);
      byteArray0[3] = (byte) (-49);
      well19937a0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)13, (byte) (-64), (byte) (-82), (byte) (-27)}, byteArray0);
      assertEquals(4, byteArray0.length);
      
      hypergeometricDistribution0.reseedRandomGenerator(0);
      assertEquals(472144025, hypergeometricDistribution0.getPopulationSize());
      assertEquals(472144025, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals((-4.488187397902578), hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(472144025, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int3 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(472144025, hypergeometricDistribution0.getPopulationSize());
      assertEquals(472144025, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals((-4.488187397902578), hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(472144025, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(472144025, int3);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      
      int int4 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(472144025, hypergeometricDistribution0.getPopulationSize());
      assertEquals(472144025, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals((-4.488187397902578), hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(472144025, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(472144025, int4);
      assertTrue(int4 == int0);
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      
      int int5 = hypergeometricDistribution0.sample();
      assertEquals(472144025, hypergeometricDistribution0.getPopulationSize());
      assertEquals(472144025, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals((-4.488187397902578), hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(472144025, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(472144025, int5);
      assertTrue(int5 == int4);
      assertTrue(int5 == int2);
      assertTrue(int5 == int1);
      assertTrue(int5 == int0);
      assertTrue(int5 == int3);
      
      hypergeometricDistribution0.reseedRandomGenerator((-1528));
      assertEquals(472144025, hypergeometricDistribution0.getPopulationSize());
      assertEquals(472144025, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals((-4.488187397902578), hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(472144025, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int6 = hypergeometricDistribution0.getSampleSize();
      assertEquals(472144025, hypergeometricDistribution0.getPopulationSize());
      assertEquals(472144025, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals((-4.488187397902578), hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(472144025, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(472144025, int6);
      assertTrue(int6 == int0);
      assertTrue(int6 == int3);
      assertTrue(int6 == int2);
      assertTrue(int6 == int4);
      assertTrue(int6 == int1);
      assertTrue(int6 == int5);
      
      double double2 = hypergeometricDistribution0.cumulativeProbability((-690));
      assertEquals(472144025, hypergeometricDistribution0.getPopulationSize());
      assertEquals(472144025, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals((-4.488187397902578), hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(472144025, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      int int7 = well19937a0.nextInt(472144025);
      assertEquals(29535169, int7);
      assertFalse(int7 == int2);
      assertFalse(int7 == int4);
      assertFalse(int7 == int5);
      assertFalse(int7 == int0);
      assertFalse(int7 == int3);
      assertFalse(int7 == int1);
      assertFalse(int7 == int6);
      
      double double3 = hypergeometricDistribution0.probability(2421);
      assertEquals(472144025, hypergeometricDistribution0.getPopulationSize());
      assertEquals(472144025, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals((-4.488187397902578), hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(472144025, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double3, 0.01);
      assertNotEquals(double3, double0, 0.01);
      assertEquals(double3, double2, 0.01);
      assertNotEquals(double3, double1, 0.01);
      
      double double4 = hypergeometricDistribution0.upperCumulativeProbability(2421);
      assertEquals(472144025, hypergeometricDistribution0.getPopulationSize());
      assertEquals(472144025, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals((-4.488187397902578), hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(472144025, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.0, double4, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double2, 0.01);
      assertNotEquals(double4, double3, 0.01);
      
      double double5 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(472144025, hypergeometricDistribution0.getPopulationSize());
      assertEquals(472144025, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals((-4.488187397902578), hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(472144025, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double5, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertEquals(double5, double3, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertEquals(double5, double2, 0.01);
      
      int int8 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(472144025, hypergeometricDistribution0.getPopulationSize());
      assertEquals(472144025, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals((-4.488187397902578), hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(472144025, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(472144025, int8);
      assertFalse(int8 == int7);
      assertTrue(int8 == int2);
      assertTrue(int8 == int4);
      assertTrue(int8 == int3);
      assertTrue(int8 == int1);
      assertTrue(int8 == int0);
      assertTrue(int8 == int5);
      assertTrue(int8 == int6);
      
      double double6 = hypergeometricDistribution0.cumulativeProbability((-1528));
      assertEquals(472144025, hypergeometricDistribution0.getPopulationSize());
      assertEquals(472144025, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals((-4.488187397902578), hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(472144025, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double6, 0.01);
      assertEquals(double6, double3, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertEquals(double6, double2, 0.01);
      assertNotEquals(double6, double0, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertEquals(double6, double5, 0.01);
      
      double double7 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(472144025, hypergeometricDistribution0.getPopulationSize());
      assertEquals(472144025, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals((-4.488187397902578), hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(472144025, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals((-4.488187397902578), double7, 0.01);
      assertNotEquals(double7, double4, 0.01);
      assertNotEquals(double7, double3, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double5, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double0, 0.01);
      
      double double8 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertEquals(472144025, hypergeometricDistribution0.getPopulationSize());
      assertEquals(472144025, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals((-4.488187397902578), hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(472144025, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.0, double8, 0.01);
      assertNotEquals(double8, double3, 0.01);
      assertEquals(double8, double4, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertNotEquals(double8, double5, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double7, 0.01);
      
      int int9 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(472144025, hypergeometricDistribution0.getPopulationSize());
      assertEquals(472144025, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals((-4.488187397902578), hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(472144025, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(472144025, int9);
      assertTrue(int9 == int4);
      assertTrue(int9 == int6);
      assertFalse(int9 == int7);
      assertTrue(int9 == int5);
      assertTrue(int9 == int3);
      assertTrue(int9 == int1);
      assertTrue(int9 == int2);
      assertTrue(int9 == int8);
      assertTrue(int9 == int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4411, 4411, 2028);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(4411, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2028.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(4411, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2028, hypergeometricDistribution0.getSampleSize());
      
      hypergeometricDistribution0.reseedRandomGenerator(1096L);
      assertEquals(4411, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2028.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(4411, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2028, hypergeometricDistribution0.getSampleSize());
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(4411, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2028.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(4411, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2028, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double0, 0.01);
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(4411, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2028.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(4411, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2028, hypergeometricDistribution0.getSampleSize());
      assertEquals(2028, int0);
      
      double double1 = hypergeometricDistribution0.probability(2028);
      assertEquals(4411, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2028.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(4411, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2028, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 4371;
      int int1 = 965;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(4371, 1127, 965);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(248.81148478609015, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(965, hypergeometricDistribution0.getSampleSize());
      assertEquals(4371, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1127, hypergeometricDistribution0.getNumberOfSuccesses());
      
      int int2 = 1;
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability(1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      assertNotNull(well1024a0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 888;
      intArray0[1] = 888;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(888, 456, 449);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(456, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(230.56756756756758, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(888, hypergeometricDistribution0.getPopulationSize());
      assertEquals(449, hypergeometricDistribution0.getSampleSize());
      
      double double0 = hypergeometricDistribution0.cumulativeProbability((-136));
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(456, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(230.56756756756758, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(888, hypergeometricDistribution0.getPopulationSize());
      assertEquals(449, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double0, 0.01);
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(456, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(230.56756756756758, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(888, hypergeometricDistribution0.getPopulationSize());
      assertEquals(449, hypergeometricDistribution0.getSampleSize());
      assertEquals(449, int0);
      
      hypergeometricDistribution0.reseedRandomGenerator((-136));
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(456, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(230.56756756756758, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(888, hypergeometricDistribution0.getPopulationSize());
      assertEquals(449, hypergeometricDistribution0.getSampleSize());
      
      int int1 = hypergeometricDistribution0.getSampleSize();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(456, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(230.56756756756758, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(888, hypergeometricDistribution0.getPopulationSize());
      assertEquals(449, hypergeometricDistribution0.getSampleSize());
      assertEquals(449, int1);
      assertTrue(int1 == int0);
      
      int int2 = hypergeometricDistribution0.getSupportLowerBound();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(456, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(230.56756756756758, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(888, hypergeometricDistribution0.getPopulationSize());
      assertEquals(449, hypergeometricDistribution0.getSampleSize());
      assertEquals(17, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      int int3 = hypergeometricDistribution0.sample();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(456, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(230.56756756756758, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(888, hypergeometricDistribution0.getPopulationSize());
      assertEquals(449, hypergeometricDistribution0.getSampleSize());
      assertEquals(227, int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      
      double double1 = hypergeometricDistribution0.upperCumulativeProbability(1369);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(456, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(230.56756756756758, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(888, hypergeometricDistribution0.getPopulationSize());
      assertEquals(449, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      double double2 = hypergeometricDistribution0.getNumericalMean();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(456, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(230.56756756756758, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(888, hypergeometricDistribution0.getPopulationSize());
      assertEquals(449, hypergeometricDistribution0.getSampleSize());
      assertEquals(230.56756756756758, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      
      Well44497a well44497a0 = new Well44497a(intArray0);
      assertNotNull(well44497a0);
      assertArrayEquals(new int[] {888, 888, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      well44497a0.setSeed(intArray0);
      assertArrayEquals(new int[] {888, 888, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      
      double double3 = hypergeometricDistribution0.upperCumulativeProbability(449);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(456, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(230.56756756756758, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(888, hypergeometricDistribution0.getPopulationSize());
      assertEquals(449, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.4873264583161752E-251, double3, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      assertEquals(double3, double0, 0.01);
      
      double double4 = hypergeometricDistribution0.calculateNumericalVariance();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(456, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(230.56756756756758, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(888, hypergeometricDistribution0.getPopulationSize());
      assertEquals(449, hypergeometricDistribution0.getSampleSize());
      assertEquals(55.51494314022118, double4, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertNotEquals(double4, double3, 0.01);
      assertNotEquals(double4, double2, 0.01);
      
      Well44497a well44497a1 = new Well44497a(intArray0);
      assertNotNull(well44497a1);
      assertArrayEquals(new int[] {888, 888, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(7, intArray0.length);
      assertFalse(well44497a1.equals((Object)well44497a0));
      
      double double5 = hypergeometricDistribution0.cumulativeProbability(1, 1369);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(456, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(230.56756756756758, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(888, hypergeometricDistribution0.getPopulationSize());
      assertEquals(449, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.0, double5, 0.01);
      assertNotEquals(double5, double0, 0.01);
      assertNotEquals(double5, double4, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double3, 0.01);
      
      double double6 = hypergeometricDistribution0.getNumericalMean();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(456, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(230.56756756756758, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(888, hypergeometricDistribution0.getPopulationSize());
      assertEquals(449, hypergeometricDistribution0.getSampleSize());
      assertEquals(230.56756756756758, double6, 0.01);
      assertNotEquals(double6, double1, 0.01);
      assertEquals(double6, double2, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertNotEquals(double6, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(888);
      assertNotNull(well1024a0);
      
      boolean boolean0 = well1024a0.nextBoolean();
      assertTrue(boolean0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 311;
      intArray0[1] = 311;
      intArray0[3] = 311;
      intArray0[1] = 311;
      intArray0[5] = 311;
      intArray0[6] = 311;
      well1024a0.setSeed(intArray0);
      assertArrayEquals(new int[] {311, 311, 0, 311, 0, 311, 311}, intArray0);
      assertEquals(7, intArray0.length);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 1522, 311, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1522, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(311, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      
      int[] intArray1 = hypergeometricDistribution0.sample(311);
      assertNotNull(intArray1);
      assertEquals(1522, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(311, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(311, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(500);
      assertEquals(1522, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(311, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1.0, double0, 0.01);
      
      double double1 = hypergeometricDistribution0.cumulativeProbability((-2101));
      assertEquals(1522, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(311, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(1522, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(311, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, int0);
      
      int int1 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(1522, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(311, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      double double2 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(1522, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(311, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double2, 0.01);
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      double double3 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(1522, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(311, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, double3, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(double3, double1, 0.01);
      assertNotEquals(double3, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1249, 1249, 1249);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1249, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1249, hypergeometricDistribution0.getSampleSize());
      assertEquals(1249.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1249, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(1249);
      assertEquals(1249, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1249, hypergeometricDistribution0.getSampleSize());
      assertEquals(1249.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1249, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.0, double0, 0.01);
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(1249, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1249, hypergeometricDistribution0.getSampleSize());
      assertEquals(1249.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1249, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1249, int0);
      
      int[] intArray0 = hypergeometricDistribution0.sample(1249);
      assertNotNull(intArray0);
      assertEquals(1249, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1249, hypergeometricDistribution0.getSampleSize());
      assertEquals(1249.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1249, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1249, intArray0.length);
      
      double double1 = hypergeometricDistribution0.upperCumulativeProbability(1249);
      assertEquals(1249, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1249, hypergeometricDistribution0.getSampleSize());
      assertEquals(1249.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1249, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      int int1 = hypergeometricDistribution0.inverseCumulativeProbability(1.0);
      assertEquals(1249, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1249, hypergeometricDistribution0.getSampleSize());
      assertEquals(1249.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1249, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1249, int1);
      assertTrue(int1 == int0);
      
      HypergeometricDistribution hypergeometricDistribution1 = null;
      try {
        hypergeometricDistribution1 = new HypergeometricDistribution(1249, 836, 1783);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (1,783) must be less than or equal to population size (1,249)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(870);
      assertNotNull(well1024a0);
      
      boolean boolean0 = well1024a0.nextBoolean();
      assertTrue(boolean0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(870, 311, 20);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(20, hypergeometricDistribution0.getSampleSize());
      assertEquals(870, hypergeometricDistribution0.getPopulationSize());
      assertEquals(311, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(7.149425287356322, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(20, hypergeometricDistribution0.getSampleSize());
      assertEquals(870, hypergeometricDistribution0.getPopulationSize());
      assertEquals(311, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(7.149425287356322, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(4.493273316253795, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1249, 1249, 1249);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1249.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1249, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1249, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1249, hypergeometricDistribution0.getPopulationSize());
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(1249);
      assertEquals(1249.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1249, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1249, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1249, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.0, double0, 0.01);
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(1249.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1249, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1249, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1249, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1249, int0);
      
      int[] intArray0 = hypergeometricDistribution0.sample(1249);
      assertNotNull(intArray0);
      assertEquals(1249.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1249, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1249, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1249, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1249, intArray0.length);
      
      double double1 = hypergeometricDistribution0.upperCumulativeProbability(1249);
      assertEquals(1249.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1249, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1249, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1249, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      int int1 = hypergeometricDistribution0.inverseCumulativeProbability(1.0);
      assertEquals(1249.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1249, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1249, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1249, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1249, int1);
      assertTrue(int1 == int0);
      
      HypergeometricDistribution hypergeometricDistribution1 = null;
      try {
        hypergeometricDistribution1 = new HypergeometricDistribution(29, 29, 1783);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (1,783) must be less than or equal to population size (29)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(888);
      assertNotNull(well1024a0);
      
      boolean boolean0 = well1024a0.nextBoolean();
      assertTrue(boolean0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 311;
      intArray0[1] = 311;
      intArray0[2] = 311;
      intArray0[3] = 311;
      intArray0[4] = 311;
      intArray0[5] = 311;
      intArray0[6] = 311;
      well1024a0.setSeed(intArray0);
      assertArrayEquals(new int[] {311, 311, 311, 311, 311, 311, 311}, intArray0);
      assertEquals(7, intArray0.length);
      
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 32, 311, 2046);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (311) must be less than or equal to population size (32)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = 888;
      Well1024a well1024a0 = new Well1024a(888);
      assertNotNull(well1024a0);
      
      boolean boolean0 = well1024a0.nextBoolean();
      assertTrue(boolean0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 311;
      intArray0[1] = 311;
      intArray0[2] = 311;
      intArray0[3] = 311;
      intArray0[4] = 311;
      intArray0[5] = 311;
      intArray0[6] = 311;
      well1024a0.setSeed(intArray0);
      assertArrayEquals(new int[] {311, 311, 311, 311, 311, 311, 311}, intArray0);
      assertEquals(7, intArray0.length);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 1522, 311, 311);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(63.54862023653088, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(311, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(311, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1522, hypergeometricDistribution0.getPopulationSize());
      
      int int1 = 500;
      // Undeclared exception!
      hypergeometricDistribution0.sample(311);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 582;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(944, 3698, 582);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (3,698) must be less than or equal to population size (944)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1249, 1249, 1249);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1249.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1249, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1249, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1249, hypergeometricDistribution0.getPopulationSize());
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(1249);
      assertEquals(1249.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1249, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1249, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1249, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.0, double0, 0.01);
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(1249.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1249, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1249, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1249, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1249, int0);
      
      int[] intArray0 = hypergeometricDistribution0.sample(1249);
      assertNotNull(intArray0);
      assertEquals(1249.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1249, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1249, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1249, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1249, intArray0.length);
      
      double double1 = hypergeometricDistribution0.upperCumulativeProbability(1249);
      assertEquals(1249.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1249, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1249, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1249, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      int int1 = hypergeometricDistribution0.inverseCumulativeProbability(1.0);
      assertEquals(1249.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1249, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1249, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1249, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1249, int1);
      assertTrue(int1 == int0);
      
      int int2 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(1249.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1249, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1249, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1249, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1249, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      
      int int3 = hypergeometricDistribution0.getSampleSize();
      assertEquals(1249.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1249, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1249, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1249, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1249, int3);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      
      double double2 = hypergeometricDistribution0.probability(1249);
      assertEquals(1249.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1249, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1249, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1249, hypergeometricDistribution0.getPopulationSize());
      assertEquals(Double.NaN, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      
      int int4 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(1249.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1249, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1249, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1249, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1249, int4);
      assertTrue(int4 == int0);
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      
      int int5 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(1249.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1249, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1249, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1249, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1249, int5);
      assertTrue(int5 == int3);
      assertTrue(int5 == int0);
      assertTrue(int5 == int2);
      assertTrue(int5 == int1);
      assertTrue(int5 == int4);
      
      double double3 = hypergeometricDistribution0.cumulativeProbability(1194);
      assertEquals(1249.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1249, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1249, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1249, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double3, 0.01);
      assertNotEquals(double3, double1, 0.01);
      assertNotEquals(double3, double2, 0.01);
      assertNotEquals(double3, double0, 0.01);
      
      double double4 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(1249.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1249, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1249, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1249, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double4, 0.01);
      assertNotEquals(double4, double1, 0.01);
      assertEquals(double4, double3, 0.01);
      assertNotEquals(double4, double0, 0.01);
      assertNotEquals(double4, double2, 0.01);
      
      int int6 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(1249.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1249, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1249, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1249, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1249, int6);
      assertTrue(int6 == int4);
      assertTrue(int6 == int0);
      assertTrue(int6 == int2);
      assertTrue(int6 == int5);
      assertTrue(int6 == int1);
      assertTrue(int6 == int3);
      
      double double5 = hypergeometricDistribution0.cumulativeProbability(0, 0);
      assertEquals(1249.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1249, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1249, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1249, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double5, 0.01);
      assertNotEquals(double5, double1, 0.01);
      assertNotEquals(double5, double2, 0.01);
      assertEquals(double5, double4, 0.01);
      assertEquals(double5, double3, 0.01);
      assertNotEquals(double5, double0, 0.01);
      
      double double6 = hypergeometricDistribution0.cumulativeProbability(1249);
      assertEquals(1249.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1249, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1249, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1249, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.0, double6, 0.01);
      assertEquals(double6, double1, 0.01);
      assertNotEquals(double6, double5, 0.01);
      assertNotEquals(double6, double3, 0.01);
      assertEquals(double6, double0, 0.01);
      assertNotEquals(double6, double4, 0.01);
      assertNotEquals(double6, double2, 0.01);
      
      double double7 = hypergeometricDistribution0.probability((-1953));
      assertEquals(1249.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1249, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1249, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1249, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double7, 0.01);
      assertEquals(double7, double4, 0.01);
      assertEquals(double7, double3, 0.01);
      assertNotEquals(double7, double0, 0.01);
      assertNotEquals(double7, double1, 0.01);
      assertNotEquals(double7, double6, 0.01);
      assertNotEquals(double7, double2, 0.01);
      assertEquals(double7, double5, 0.01);
      
      int int7 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(1249.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1249, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1249, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1249, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1249, int7);
      assertTrue(int7 == int4);
      assertTrue(int7 == int1);
      assertTrue(int7 == int0);
      assertTrue(int7 == int2);
      assertTrue(int7 == int6);
      assertTrue(int7 == int5);
      assertTrue(int7 == int3);
      
      int int8 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(1249.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1249, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1249, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1249, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1249, int8);
      assertTrue(int8 == int6);
      assertTrue(int8 == int3);
      assertTrue(int8 == int5);
      assertTrue(int8 == int0);
      assertTrue(int8 == int2);
      assertTrue(int8 == int7);
      assertTrue(int8 == int4);
      assertTrue(int8 == int1);
      
      hypergeometricDistribution0.reseedRandomGenerator((-1953));
      assertEquals(1249.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1249, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1249, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1249, hypergeometricDistribution0.getPopulationSize());
      
      int int9 = hypergeometricDistribution0.getSampleSize();
      assertEquals(1249.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1249, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1249, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1249, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1249, int9);
      assertTrue(int9 == int0);
      assertTrue(int9 == int2);
      assertTrue(int9 == int4);
      assertTrue(int9 == int7);
      assertTrue(int9 == int8);
      assertTrue(int9 == int1);
      assertTrue(int9 == int6);
      assertTrue(int9 == int3);
      assertTrue(int9 == int5);
      
      int int10 = hypergeometricDistribution0.sample();
      assertEquals(1249.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1249, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1249, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1249, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1249, int10);
      assertTrue(int10 == int4);
      assertTrue(int10 == int8);
      assertTrue(int10 == int9);
      assertTrue(int10 == int6);
      assertTrue(int10 == int5);
      assertTrue(int10 == int1);
      assertTrue(int10 == int0);
      assertTrue(int10 == int2);
      assertTrue(int10 == int7);
      assertTrue(int10 == int3);
      
      double double8 = hypergeometricDistribution0.upperCumulativeProbability(2757);
      assertEquals(1249.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1249, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1249, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1249, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double8, 0.01);
      assertNotEquals(double8, double0, 0.01);
      assertNotEquals(double8, double6, 0.01);
      assertEquals(double8, double7, 0.01);
      assertEquals(double8, double3, 0.01);
      assertEquals(double8, double5, 0.01);
      assertNotEquals(double8, double1, 0.01);
      assertNotEquals(double8, double2, 0.01);
      assertEquals(double8, double4, 0.01);
      
      double double9 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(1249.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1249, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1249, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1249, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1249.0, double9, 0.01);
      assertNotEquals(double9, double1, 0.01);
      assertNotEquals(double9, double4, 0.01);
      assertNotEquals(double9, double5, 0.01);
      assertNotEquals(double9, double2, 0.01);
      assertNotEquals(double9, double3, 0.01);
      assertNotEquals(double9, double6, 0.01);
      assertNotEquals(double9, double7, 0.01);
      assertNotEquals(double9, double8, 0.01);
      assertNotEquals(double9, double0, 0.01);
      
      Well44497a well44497a0 = new Well44497a(intArray0);
      assertNotNull(well44497a0);
      assertEquals(1249.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1249, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1249, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1249, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1249, intArray0.length);
      
      well44497a0.setSeed(intArray0);
      assertEquals(1249.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1249, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1249, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1249, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1249, intArray0.length);
      
      int int11 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(1249.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1249, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1249, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1249, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1249, int11);
      assertTrue(int11 == int10);
      assertTrue(int11 == int4);
      assertTrue(int11 == int8);
      assertTrue(int11 == int9);
      assertTrue(int11 == int7);
      assertTrue(int11 == int0);
      assertTrue(int11 == int2);
      assertTrue(int11 == int3);
      assertTrue(int11 == int5);
      assertTrue(int11 == int1);
      assertTrue(int11 == int6);
      
      int int12 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(1249.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1249, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1249, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1249, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1249, int12);
      assertTrue(int12 == int0);
      assertTrue(int12 == int2);
      assertTrue(int12 == int1);
      assertTrue(int12 == int7);
      assertTrue(int12 == int9);
      assertTrue(int12 == int3);
      assertTrue(int12 == int5);
      assertTrue(int12 == int10);
      assertTrue(int12 == int11);
      assertTrue(int12 == int4);
      assertTrue(int12 == int8);
      assertTrue(int12 == int6);
      
      int int13 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(1249.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1249, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1249, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1249, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1249, int13);
      assertTrue(int13 == int11);
      assertTrue(int13 == int12);
      assertTrue(int13 == int6);
      assertTrue(int13 == int10);
      assertTrue(int13 == int8);
      assertTrue(int13 == int7);
      assertTrue(int13 == int0);
      assertTrue(int13 == int2);
      assertTrue(int13 == int1);
      assertTrue(int13 == int4);
      assertTrue(int13 == int9);
      assertTrue(int13 == int3);
      assertTrue(int13 == int5);
      
      double double10 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(1249.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1249, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1249, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1249, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double10, 0.01);
      assertNotEquals(double10, double6, 0.01);
      assertNotEquals(double10, double0, 0.01);
      assertNotEquals(double10, double9, 0.01);
      assertEquals(double10, double4, 0.01);
      assertNotEquals(double10, double1, 0.01);
      assertNotEquals(double10, double2, 0.01);
      assertEquals(double10, double3, 0.01);
      assertEquals(double10, double5, 0.01);
      assertEquals(double10, double7, 0.01);
      assertEquals(double10, double8, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      RandomGenerator randomGenerator0 = null;
      int int0 = 1522;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 1522, 0, 0);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1522, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1522, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double0, 0.01);
      
      double double1 = hypergeometricDistribution0.getNumericalVariance();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1522, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      int int1 = hypergeometricDistribution0.getSampleSize();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1522, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      int int2 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1522, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      int int3 = hypergeometricDistribution0.getSampleSize();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1522, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, int3);
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      
      int int4 = hypergeometricDistribution0.getSupportLowerBound();
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1522, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, int4);
      assertTrue(int4 == int2);
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertFalse(int4 == int0);
      
      HypergeometricDistribution hypergeometricDistribution1 = new HypergeometricDistribution((RandomGenerator) null, 2757, 1522, 1522);
      assertNotNull(hypergeometricDistribution1);
      assertEquals(1522, hypergeometricDistribution1.getSampleSize());
      assertEquals(1522, hypergeometricDistribution1.getNumberOfSuccesses());
      assertEquals(2757, hypergeometricDistribution1.getPopulationSize());
      assertTrue(hypergeometricDistribution1.isSupportConnected());
      assertEquals(840.2190787087413, hypergeometricDistribution1.getNumericalMean(), 0.01);
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      
      int int5 = hypergeometricDistribution1.inverseCumulativeProbability(0.0);
      assertEquals(1522, hypergeometricDistribution1.getSampleSize());
      assertEquals(1522, hypergeometricDistribution1.getNumberOfSuccesses());
      assertEquals(2757, hypergeometricDistribution1.getPopulationSize());
      assertTrue(hypergeometricDistribution1.isSupportConnected());
      assertEquals(840.2190787087413, hypergeometricDistribution1.getNumericalMean(), 0.01);
      assertEquals(287, int5);
      assertFalse(hypergeometricDistribution1.equals((Object)hypergeometricDistribution0));
      assertFalse(int5 == int0);
      assertFalse(int5 == int4);
      assertFalse(int5 == int2);
      assertFalse(int5 == int1);
      assertFalse(int5 == int3);
      assertNotSame(hypergeometricDistribution1, hypergeometricDistribution0);
      
      int int6 = 707;
      HypergeometricDistribution hypergeometricDistribution2 = null;
      try {
        hypergeometricDistribution2 = new HypergeometricDistribution((RandomGenerator) null, 2757, (-1), (-4236));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-1)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(1433);
      assertNotNull(well1024a0);
      
      boolean boolean0 = well1024a0.nextBoolean();
      assertFalse(boolean0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1433;
      well1024a0.setSeed(intArray0);
      assertArrayEquals(new int[] {1433}, intArray0);
      assertEquals(1, intArray0.length);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 1433, 311, 1433);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(311.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(311, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1433, hypergeometricDistribution0.getSampleSize());
      assertEquals(1433, hypergeometricDistribution0.getPopulationSize());
      
      int[] intArray1 = hypergeometricDistribution0.sample(500);
      assertNotNull(intArray1);
      assertEquals(311.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(311, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1433, hypergeometricDistribution0.getSampleSize());
      assertEquals(1433, hypergeometricDistribution0.getPopulationSize());
      assertEquals(500, intArray1.length);
      assertFalse(intArray1.equals((Object)intArray0));
      assertNotSame(intArray1, intArray0);
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(1433);
      assertEquals(311.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(311, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1433, hypergeometricDistribution0.getSampleSize());
      assertEquals(1433, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.0, double0, 0.01);
      
      double double1 = hypergeometricDistribution0.cumulativeProbability(2465);
      assertEquals(311.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(311, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1433, hypergeometricDistribution0.getSampleSize());
      assertEquals(1433, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(311.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(311, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1433, hypergeometricDistribution0.getSampleSize());
      assertEquals(1433, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1433, int0);
      
      double double2 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(311.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(311, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1433, hypergeometricDistribution0.getSampleSize());
      assertEquals(1433, hypergeometricDistribution0.getPopulationSize());
      assertEquals(311.0, double2, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(0);
      assertNotNull(well44497a0);
      
      int int0 = 1414;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 1414, 0, (-1761));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1,761)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 582;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(944, 2, 582);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1.2330508474576272, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(944, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(582, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int1 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(1.2330508474576272, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(944, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(582, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      int int2 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(1.2330508474576272, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(944, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(582, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      int int3 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(1.2330508474576272, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(944, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(582, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(1.2330508474576272, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(944, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(582, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.4723422263808714, double0, 0.01);
      
      int int4 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(1.2330508474576272, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(944, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(582, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, int4);
      assertTrue(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertTrue(int4 == int1);
      
      double double1 = hypergeometricDistribution0.probability(1256);
      assertEquals(1.2330508474576272, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(944, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(582, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      try { 
        hypergeometricDistribution0.inverseCumulativeProbability((-1225.2702));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -1,225.27 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1249, 1249, 1249);
      hypergeometricDistribution0.upperCumulativeProbability(1249);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(1249, int0);
      
      hypergeometricDistribution0.sample(1249);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(1249);
      assertEquals(1.0, double0, 0.01);
      
      hypergeometricDistribution0.inverseCumulativeProbability(1.0);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getSampleSize();
      double double1 = hypergeometricDistribution0.probability(1249);
      assertEquals(Double.NaN, double1, 0.01);
      
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.cumulativeProbability(1194);
      hypergeometricDistribution0.getNumericalVariance();
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.cumulativeProbability(0, 0);
      double double2 = hypergeometricDistribution0.cumulativeProbability(1249);
      assertEquals(1.0, double2, 0.01);
      
      hypergeometricDistribution0.probability(0);
      hypergeometricDistribution0.upperCumulativeProbability(0);
      hypergeometricDistribution0.cumulativeProbability((-1), 0);
      hypergeometricDistribution0.probability(1403);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getSupportLowerBound();
      double double3 = hypergeometricDistribution0.cumulativeProbability(0);
      double double4 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(double4, double3, 0.01);
      
      double double5 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.0, double5, 0.01);
      
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.isSupportConnected();
      assertEquals(1249.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a((-1L));
      int[] intArray0 = new int[2];
      intArray0[0] = (-1);
      well44497a0.setSeed((-1));
      intArray0[1] = 2;
      well44497a0.setSeed(intArray0);
      well44497a0.nextFloat();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 617, 617, 617);
      int int0 = hypergeometricDistribution0.solveInverseCumulativeProbability(0, 0, 2);
      assertEquals(1, int0);
      
      hypergeometricDistribution0.probability(0);
      int[] intArray1 = hypergeometricDistribution0.sample(617);
      double double0 = hypergeometricDistribution0.probability(1);
      assertEquals(0.0, double0, 0.01);
      
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getNumberOfSuccesses();
      hypergeometricDistribution0.reseedRandomGenerator(0);
      hypergeometricDistribution0.getSampleSize();
      double double1 = hypergeometricDistribution0.upperCumulativeProbability(617);
      assertEquals(1.0, double1, 0.01);
      
      double double2 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(617.0, double2, 0.01);
      
      well44497a0.setSeed(intArray1);
      hypergeometricDistribution0.getSupportLowerBound();
      hypergeometricDistribution0.getSupportUpperBound();
      hypergeometricDistribution0.getNumberOfSuccesses();
      double double3 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double3, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      int int0 = 1;
      int int1 = 0;
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1, 1, 0);
      hypergeometricDistribution0.sample();
      try { 
        hypergeometricDistribution0.inverseCumulativeProbability((-2418.0016161124654));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,418.002 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.distribution.AbstractIntegerDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int[] intArray0 = new int[5];
      intArray0[0] = 338;
      intArray0[1] = 2269;
      intArray0[2] = (-1793);
      intArray0[3] = (-2133);
      intArray0[4] = 0;
      MersenneTwister mersenneTwister0 = new MersenneTwister(intArray0);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(mersenneTwister0, 2429, (-243), (-967));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-243)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 1522, 0, 0);
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = hypergeometricDistribution0.cumulativeProbability(0);
      assertEquals(1.0, double1, 0.01);
      
      hypergeometricDistribution0.solveInverseCumulativeProbability(1243.62, 0, 0);
      hypergeometricDistribution0.isSupportConnected();
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(1522, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = (-283);
      int int1 = 627;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((-283), 627, 627);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-283)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = (-1528);
      Well19937a well19937a0 = new Well19937a((-1528));
      well19937a0.nextInt();
      int int1 = 0;
      well19937a0.nextDouble();
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, (-1528), (-1528), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-1,528)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = (-1300);
      int int1 = 0;
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((-1300), (-1300), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-1,300)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      int int0 = (-129);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((-129), (-129), (-129));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-129)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }
}
