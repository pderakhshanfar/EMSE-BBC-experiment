/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 20:21:53 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.ISAACRandom;
import org.apache.commons.math3.random.RandomGenerator;
import org.apache.commons.math3.random.SynchronizedRandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well44497a;
import org.apache.commons.math3.random.Well44497b;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1992, 828, 828);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(828);
      assertEquals(0.0, double0, 0.01);
      assertEquals(344.1686746987952, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1132, 1132, 1132);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability((-1));
      assertEquals(1.0, double0, 0.01);
      assertEquals(1132.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1987, 1987, 1073);
      double double0 = hypergeometricDistribution0.cumulativeProbability(1987);
      assertEquals(1.0, double0, 0.01);
      assertEquals(1073.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution((-1), 865, 865);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-1)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1987, 1987, 1073);
      double double0 = hypergeometricDistribution0.probability(1073);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(415, 0, 415);
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(415, hypergeometricDistribution0.getSampleSize());
      assertEquals(415, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 1191, 1119, 1191);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(1119, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 471, 0, 0);
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, int0);
      assertEquals(471, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(771, 2, 2);
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.005167889150992605, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution((RandomGenerator) null, 874, 0, 29);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(0.0, double0, 0.01);
      assertEquals(874, hypergeometricDistribution0.getPopulationSize());
      assertEquals(29, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 1191, 1119, 1191);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(1119.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1452, 0, 313);
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1452, hypergeometricDistribution0.getPopulationSize());
      assertEquals(313, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 1191, 1119, 1191);
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      assertEquals(1119, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1992, 828, 828);
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(117.57546526505288, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1992, 828, 828);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(309);
      assertEquals(0.9995102232357488, double0, 0.01);
      
      double double1 = hypergeometricDistribution0.cumulativeProbability(309);
      assertEquals(6.784280855144418E-4, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a();
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(well44497a0);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(synchronizedRandomGenerator0, 320, 1906, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (1,906) must be less than or equal to population size (320)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1992, 828, 828);
      double double0 = hypergeometricDistribution0.probability(828);
      assertEquals(1992, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1987, 1987, 1073);
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(1073.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1987, int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1992, 828, 828);
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(344.1686746987952, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(828, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1992, 828, 828);
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(344.1686746987952, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(828, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1987, 1987, 1073);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(1452);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1073.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1987, 1987, 1073);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(1073);
      assertEquals(1073.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1987, 1987, 1073);
      double double0 = hypergeometricDistribution0.probability(1987);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1073.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1987, 1987, 1073);
      double double0 = hypergeometricDistribution0.probability((-4337));
      assertEquals(0.0, double0, 0.01);
      assertEquals(1073.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1987, 1987, 1073);
      double double0 = hypergeometricDistribution0.cumulativeProbability(317);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1073.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 471, 0, 0);
      double double0 = hypergeometricDistribution0.cumulativeProbability(0);
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(471, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(7, 2, 2020);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (2,020) must be less than or equal to population size (7)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(866, 1987, (-1575));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1,575)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ISAACRandom iSAACRandom0 = new ISAACRandom(474L);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(iSAACRandom0, 427, (-443), 1263);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-443)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(1L);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 0, 828, 332);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 471, 0, 0);
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(471, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1992, 828, 828);
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(344.1686746987952, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(828, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 471, 0, 0);
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(boolean0);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(471, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Well44497b well44497b0 = new Well44497b();
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well44497b0, 471, 0, 0);
      hypergeometricDistribution0.getNumericalVariance();
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(471, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3678, 2236, 2236);
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability(808);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(9999967, 9999967, 9999967);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals((-38.35529447247176), double0, 0.01);
  }
}
