/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 20:22:39 GMT 2021
 */

package org.apache.commons.math3.distribution;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.distribution.HypergeometricDistribution;
import org.apache.commons.math3.random.SynchronizedRandomGenerator;
import org.apache.commons.math3.random.Well1024a;
import org.apache.commons.math3.random.Well19937a;
import org.apache.commons.math3.random.Well19937c;
import org.apache.commons.math3.random.Well44497a;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HypergeometricDistribution_ESTest extends HypergeometricDistribution_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1264, 1261, 1261);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1261, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1261, hypergeometricDistribution0.getSampleSize());
      assertEquals(1258.0071202531647, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1264, hypergeometricDistribution0.getPopulationSize());
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(1261);
      assertEquals(2.978115047586229E-9, double0, 0.01);
      assertEquals(1261, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1261, hypergeometricDistribution0.getSampleSize());
      assertEquals(1258.0071202531647, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1264, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(465, 465, 465);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(465.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(465, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(465, hypergeometricDistribution0.getSampleSize());
      assertEquals(465, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(465);
      assertEquals(1.0, double0, 0.01);
      assertEquals(465.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(465, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(465, hypergeometricDistribution0.getSampleSize());
      assertEquals(465, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(0, 767, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (0)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(2120);
      assertNotNull(well1024a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 1465, 66, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(66, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1465, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(0, int0);
      assertEquals(66, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1465, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1264, 244, 1257);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(242.6487341772152, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1257, hypergeometricDistribution0.getSampleSize());
      assertEquals(244, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1264, hypergeometricDistribution0.getPopulationSize());
      
      int int0 = hypergeometricDistribution0.getSupportUpperBound();
      assertEquals(244, int0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(242.6487341772152, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1257, hypergeometricDistribution0.getSampleSize());
      assertEquals(244, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1264, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(1257);
      assertNotNull(well19937a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 1528, 244, 1257);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(244, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1257, hypergeometricDistribution0.getSampleSize());
      assertEquals(200.72513089005236, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1528, hypergeometricDistribution0.getPopulationSize());
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertEquals(0, int0);
      assertEquals(244, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1257, hypergeometricDistribution0.getSampleSize());
      assertEquals(200.72513089005236, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1528, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int[] intArray0 = new int[3];
      Well19937a well19937a0 = new Well19937a(intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertNotNull(well19937a0);
      
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(well19937a0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertNotNull(synchronizedRandomGenerator0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(synchronizedRandomGenerator0, 1779, 1676, 576);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1676, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1779, hypergeometricDistribution0.getPopulationSize());
      assertEquals(576, hypergeometricDistribution0.getSampleSize());
      assertEquals(542.6509274873524, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int0 = hypergeometricDistribution0.getSupportLowerBound();
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(473, int0);
      assertEquals(3, intArray0.length);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1676, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1779, hypergeometricDistribution0.getPopulationSize());
      assertEquals(576, hypergeometricDistribution0.getSampleSize());
      assertEquals(542.6509274873524, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(2874, 2874, 456);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(456, hypergeometricDistribution0.getSampleSize());
      assertEquals(2874, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2874, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(456.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(456, int0);
      assertEquals(456, hypergeometricDistribution0.getSampleSize());
      assertEquals(2874, hypergeometricDistribution0.getPopulationSize());
      assertEquals(2874, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(456.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a((-17L));
      assertNotNull(well19937a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 2, 2, 2);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
      
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      assertEquals(2.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(2, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(2, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(2, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(2120);
      assertNotNull(well1024a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 1465, 66, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1465, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(66, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1465, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(66, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(465, 465, 465);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(465.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(465, hypergeometricDistribution0.getPopulationSize());
      assertEquals(465, hypergeometricDistribution0.getSampleSize());
      assertEquals(465, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals(465.0, double0, 0.01);
      assertEquals(465.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(465, hypergeometricDistribution0.getPopulationSize());
      assertEquals(465, hypergeometricDistribution0.getSampleSize());
      assertEquals(465, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(1381);
      assertNotNull(well1024a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 1381, 0, 1143);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1143, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1381, hypergeometricDistribution0.getPopulationSize());
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(0, int0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1143, hypergeometricDistribution0.getSampleSize());
      assertEquals(0, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1381, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(465, 465, 465);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(465, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(465.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(465, hypergeometricDistribution0.getSampleSize());
      assertEquals(465, hypergeometricDistribution0.getPopulationSize());
      
      double double0 = hypergeometricDistribution0.cumulativeProbability((-1));
      assertEquals(0.0, double0, 0.01);
      assertEquals(465, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(465.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(465, hypergeometricDistribution0.getSampleSize());
      assertEquals(465, hypergeometricDistribution0.getPopulationSize());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(465, 465, 465);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(465, hypergeometricDistribution0.getPopulationSize());
      assertEquals(465.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(465, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(465, hypergeometricDistribution0.getSampleSize());
      
      double double0 = hypergeometricDistribution0.cumulativeProbability(465);
      assertEquals(1.0, double0, 0.01);
      assertEquals(465, hypergeometricDistribution0.getPopulationSize());
      assertEquals(465.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(465, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(465, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(2120);
      assertNotNull(well1024a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 1465, 66, 0);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(66, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1465, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertEquals(0.0, double0, 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      assertEquals(66, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1465, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int[] intArray0 = new int[3];
      Well19937a well19937a0 = new Well19937a(intArray0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertNotNull(well19937a0);
      
      SynchronizedRandomGenerator synchronizedRandomGenerator0 = new SynchronizedRandomGenerator(well19937a0);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertNotNull(synchronizedRandomGenerator0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(synchronizedRandomGenerator0, 1779, 1676, 576);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(3, intArray0.length);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(1779, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1676, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(576, hypergeometricDistribution0.getSampleSize());
      assertEquals(542.6509274873524, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      double double0 = hypergeometricDistribution0.calculateNumericalVariance();
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(21.2576717667976, double0, 0.01);
      assertEquals(3, intArray0.length);
      assertEquals(1779, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1676, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(576, hypergeometricDistribution0.getSampleSize());
      assertEquals(542.6509274873524, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Well19937c well19937c0 = new Well19937c();
      assertNotNull(well19937c0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well19937c0, 5901, 1250, 1449);
      assertNotNull(hypergeometricDistribution0);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1449, hypergeometricDistribution0.getSampleSize());
      assertEquals(306.93950177935943, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1250, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(5901, hypergeometricDistribution0.getPopulationSize());
      
      // Undeclared exception!
      hypergeometricDistribution0.upperCumulativeProbability(1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(186, 186, 1332);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (1,332) must be less than or equal to population size (186)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1264, 244, 1257);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(242.6487341772152, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1264, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1257, hypergeometricDistribution0.getSampleSize());
      assertEquals(244, hypergeometricDistribution0.getNumberOfSuccesses());
      
      double double0 = hypergeometricDistribution0.probability(244);
      assertEquals(0.22194175177081188, double0, 0.01);
      assertEquals(242.6487341772152, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1264, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1257, hypergeometricDistribution0.getSampleSize());
      assertEquals(244, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1264, 244, 1257);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(242.6487341772152, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1257, hypergeometricDistribution0.getSampleSize());
      assertEquals(244, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1264, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      
      int int0 = hypergeometricDistribution0.getPopulationSize();
      assertEquals(1264, int0);
      assertEquals(242.6487341772152, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1257, hypergeometricDistribution0.getSampleSize());
      assertEquals(244, hypergeometricDistribution0.getNumberOfSuccesses());
      assertEquals(1264, hypergeometricDistribution0.getPopulationSize());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1264, 244, 1257);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(244, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1264, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1257, hypergeometricDistribution0.getSampleSize());
      assertEquals(242.6487341772152, hypergeometricDistribution0.getNumericalMean(), 0.01);
      
      int int0 = hypergeometricDistribution0.getNumberOfSuccesses();
      assertEquals(244, int0);
      assertEquals(244, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(1264, hypergeometricDistribution0.getPopulationSize());
      assertEquals(1257, hypergeometricDistribution0.getSampleSize());
      assertEquals(242.6487341772152, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(2120);
      assertNotNull(well1024a0);
      
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 1465, 66, 0);
      assertNotNull(hypergeometricDistribution0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1465, hypergeometricDistribution0.getPopulationSize());
      assertEquals(66, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
      
      int int0 = hypergeometricDistribution0.getSampleSize();
      assertEquals(0, int0);
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1465, hypergeometricDistribution0.getPopulationSize());
      assertEquals(66, hypergeometricDistribution0.getNumberOfSuccesses());
      assertTrue(hypergeometricDistribution0.isSupportConnected());
      assertEquals(0, hypergeometricDistribution0.getSampleSize());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1264, 1264, 1257);
      hypergeometricDistribution0.sample(1264);
      assertEquals(1257.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(465, 465, 465);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(0);
      assertEquals(465.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1264, 1264, 1257);
      double double0 = hypergeometricDistribution0.upperCumulativeProbability(1264);
      assertEquals(1257.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1264, 1264, 1257);
      double double0 = hypergeometricDistribution0.probability(841);
      assertEquals(1257.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(3210, 989, 989);
      // Undeclared exception!
      hypergeometricDistribution0.cumulativeProbability(577);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1264, 1264, 1257);
      double double0 = hypergeometricDistribution0.cumulativeProbability(879, 1264);
      assertEquals(1257.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Well19937a well19937a0 = new Well19937a(3339);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well19937a0, 1080, 295, 835530869);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // sample size (835,530,869) must be less than or equal to population size (1,080)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Well44497a well44497a0 = new Well44497a(464);
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well44497a0, 464, 618, 1610);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (618) must be less than or equal to population size (464)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a((-1716L));
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 2638, 3080, (-1071));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of samples (-1,071)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(2650, (-2382), 1047);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of successes (-2,382)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a();
      HypergeometricDistribution hypergeometricDistribution0 = null;
      try {
        hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, (-1), 258, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // population size (-1)
         //
         verifyException("org.apache.commons.math3.distribution.HypergeometricDistribution", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Well1024a well1024a0 = new Well1024a(2120);
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(well1024a0, 1465, 66, 0);
      boolean boolean0 = hypergeometricDistribution0.isSupportConnected();
      assertTrue(boolean0);
      assertEquals(1465, hypergeometricDistribution0.getPopulationSize());
      assertEquals(0.0, hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(66, hypergeometricDistribution0.getNumberOfSuccesses());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(1264, 1261, 1261);
      double double0 = hypergeometricDistribution0.getNumericalVariance();
      assertEquals(0.007092105446569901, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(8388690, 8388690, 1833);
      double double0 = hypergeometricDistribution0.probability(8388690);
      assertEquals((-214.97998066444225), hypergeometricDistribution0.getNumericalMean(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      HypergeometricDistribution hypergeometricDistribution0 = new HypergeometricDistribution(8388690, 8388690, 1833);
      double double0 = hypergeometricDistribution0.getNumericalMean();
      assertEquals((-214.97998066444225), double0, 0.01);
  }
}
