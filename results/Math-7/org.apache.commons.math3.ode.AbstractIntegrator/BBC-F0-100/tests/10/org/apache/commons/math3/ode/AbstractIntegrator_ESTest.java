/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 07 02:00:02 GMT 2021
 */

package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
import org.apache.commons.math3.analysis.function.Asin;
import org.apache.commons.math3.analysis.function.Gaussian;
import org.apache.commons.math3.analysis.solvers.AllowedSolution;
import org.apache.commons.math3.analysis.solvers.BisectionSolver;
import org.apache.commons.math3.analysis.solvers.BrentSolver;
import org.apache.commons.math3.analysis.solvers.IllinoisSolver;
import org.apache.commons.math3.analysis.solvers.PegasusSolver;
import org.apache.commons.math3.analysis.solvers.RegulaFalsiSolver;
import org.apache.commons.math3.analysis.solvers.SecantSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator;
import org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator;
import org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.GillIntegrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.nonstiff.MidpointIntegrator;
import org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator;
import org.apache.commons.math3.ode.sampling.DummyStepHandler;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator;
import org.apache.commons.math3.ode.sampling.StepHandler;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.apache.commons.math3.ode.sampling.StepNormalizerBounds;
import org.apache.commons.math3.ode.sampling.StepNormalizerMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegrator_ESTest extends AbstractIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(3670.9083013109826);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("midpoint", midpointIntegrator0.getName());
      assertNotNull(midpointIntegrator0);
      
      MidpointIntegrator midpointIntegrator1 = new MidpointIntegrator(3670.9083013109826);
      assertEquals(Double.NaN, midpointIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals("midpoint", midpointIntegrator1.getName());
      assertEquals(Double.NaN, midpointIntegrator1.getCurrentStepStart(), 0.01);
      assertFalse(midpointIntegrator1.equals((Object)midpointIntegrator0));
      assertNotNull(midpointIntegrator1);
      
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(8, 279.343746076978, 7.0, 311.800976872, 1811.4114953116);
      assertEquals(7.0, adamsMoultonIntegrator0.getMaxStep(), 0.01);
      assertEquals("Adams-Moulton", adamsMoultonIntegrator0.getName());
      assertEquals(0.9, adamsMoultonIntegrator0.getSafety(), 0.01);
      assertEquals(279.343746076978, adamsMoultonIntegrator0.getMinStep(), 0.01);
      assertEquals(44.21997537922026, adamsMoultonIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.2, adamsMoultonIntegrator0.getMinReduction(), 0.01);
      assertEquals(Double.NaN, adamsMoultonIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(1.080059738892306, adamsMoultonIntegrator0.getMaxGrowth(), 0.01);
      assertNotNull(adamsMoultonIntegrator0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      assertNotNull(expandableStatefulODE0);
      
      // Undeclared exception!
      try { 
        adamsMoultonIntegrator0.integrate(expandableStatefulODE0, 900.52538175658);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one column
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(3670.9083013109826);
      assertEquals("midpoint", midpointIntegrator0.getName());
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertNotNull(midpointIntegrator0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      double[] doubleArray0 = new double[0];
      double double0 = midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 7.0, doubleArray0, (-312.5), doubleArray0);
      assertEquals("midpoint", midpointIntegrator0.getName());
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals((-312.5), double0, 0.01);
      
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(8, 1811.4114953116, 7.0, 3670.9083013109826, 1811.4114953116);
      assertEquals(1811.4114953116, adamsMoultonIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, adamsMoultonIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.2, adamsMoultonIntegrator0.getMinReduction(), 0.01);
      assertEquals(7.0, adamsMoultonIntegrator0.getMaxStep(), 0.01);
      assertEquals(112.60497532161357, adamsMoultonIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(1.080059738892306, adamsMoultonIntegrator0.getMaxGrowth(), 0.01);
      assertEquals("Adams-Moulton", adamsMoultonIntegrator0.getName());
      assertEquals(0.9, adamsMoultonIntegrator0.getSafety(), 0.01);
      assertNotNull(adamsMoultonIntegrator0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(secondOrderDifferentialEquations1).getDimension();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(1811.4114953116, (double)8, (double)8, 3670.9083013109826, 1308.4885).when(eventHandler0).g(anyDouble() , any(double[].class));
      PegasusSolver pegasusSolver0 = new PegasusSolver(8);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(8.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertNotNull(pegasusSolver0);
      
      midpointIntegrator0.addEventHandler(eventHandler0, 1811.4114953116, 3670.9083013109807, Integer.MAX_VALUE, (UnivariateSolver) pegasusSolver0);
      assertEquals("midpoint", midpointIntegrator0.getName());
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(8.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      assertEquals(16, firstOrderConverter1.getDimension());
      assertFalse(firstOrderConverter1.equals((Object)firstOrderConverter0));
      assertNotNull(firstOrderConverter1);
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter1);
      assertEquals(16, firstOrderConverter1.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      assertFalse(firstOrderConverter1.equals((Object)firstOrderConverter0));
      assertNotNull(expandableStatefulODE0);
      
      // Undeclared exception!
      midpointIntegrator0.integrate(expandableStatefulODE0, 3670.9083013109826);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(3670.9083013109826);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("midpoint", midpointIntegrator0.getName());
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01);
      assertNotNull(midpointIntegrator0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      double double0 = (-1732.783490680625);
      double double1 = 278.5821423102552;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(3670.9083013109826, (-1732.783490680625)).when(eventHandler0).g(anyDouble() , any(double[].class));
      PegasusSolver pegasusSolver0 = new PegasusSolver(741);
      assertEquals(741.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertNotNull(pegasusSolver0);
      
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01);
      assertNotNull(illinoisSolver0);
      
      midpointIntegrator0.addEventHandler(eventHandler0, 278.5821423102552, 278.5821423102552, (-53), (UnivariateSolver) illinoisSolver0);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("midpoint", midpointIntegrator0.getName());
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      assertNotNull(expandableStatefulODE0);
      
      try { 
        midpointIntegrator0.integrate(expandableStatefulODE0, 0.0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-53) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(3670.9083013109826);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("midpoint", midpointIntegrator0.getName());
      assertNotNull(midpointIntegrator0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(741).when(secondOrderDifferentialEquations0).getDimension();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(3670.9083013109826, (-1732.783490680625), 0.0, 0.0, 278.5821423102552).when(eventHandler0).g(anyDouble() , any(double[].class));
      PegasusSolver pegasusSolver0 = new PegasusSolver(741);
      assertEquals(741.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertNotNull(pegasusSolver0);
      
      midpointIntegrator0.addEventHandler(eventHandler0, 0.0, 3670.9083013109826, 741, (UnivariateSolver) pegasusSolver0);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("midpoint", midpointIntegrator0.getName());
      assertEquals(741.0, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(1482, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertEquals(1482, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      assertNotNull(expandableStatefulODE0);
      
      // Undeclared exception!
      midpointIntegrator0.integrate(expandableStatefulODE0, (double) 741);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double double0 = 3670.9083013109826;
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(3670.9083013109826);
      assertEquals("midpoint", midpointIntegrator0.getName());
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertNotNull(midpointIntegrator0);
      
      double double1 = 2.3364500999450684;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(3670.9083013109826, 3670.9083013109826, (-4249.0), 2.3364500999450684);
      assertEquals(3670.9083013109826, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(3670.9083013109826, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(3670.9083013109826, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertNotNull(graggBulirschStoerIntegrator0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      assertNotNull(expandableStatefulODE0);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(2.3364500999450684, (-2887.90892), 0.28963327407836914, 0.28963327407836914, (-2887.90892)).when(eventHandler0).g(anyDouble() , any(double[].class));
      double[] doubleArray0 = expandableStatefulODE0.getCompleteState();
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(doubleArray0);
      
      int int0 = 385;
      BisectionSolver bisectionSolver0 = new BisectionSolver((-1553.6689023119275));
      assertEquals(0.0, bisectionSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, bisectionSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, bisectionSolver0.getStartValue(), 0.01);
      assertEquals((-1553.6689023119275), bisectionSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, bisectionSolver0.getMax(), 0.01);
      assertEquals(1.0E-14, bisectionSolver0.getRelativeAccuracy(), 0.01);
      assertNotNull(bisectionSolver0);
      
      PegasusSolver pegasusSolver0 = new PegasusSolver((-4249.0));
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-4249.0), pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertNotNull(pegasusSolver0);
      
      midpointIntegrator0.addEventHandler(eventHandler0, (-303.611128314334), 2.3364500999450684, 385, (UnivariateSolver) pegasusSolver0);
      assertEquals("midpoint", midpointIntegrator0.getName());
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-4249.0), pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      assertEquals(0, firstOrderConverter1.getDimension());
      assertFalse(firstOrderConverter1.equals((Object)firstOrderConverter0));
      assertNotNull(firstOrderConverter1);
      
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE1.getTime(), 0.01);
      assertFalse(firstOrderConverter0.equals((Object)firstOrderConverter1));
      assertFalse(expandableStatefulODE1.equals((Object)expandableStatefulODE0));
      assertNotNull(expandableStatefulODE1);
      
      try { 
        midpointIntegrator0.integrate(expandableStatefulODE0, 2415.75);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [\uFFFD, \uFFFD], values: [-2,887.909, -2,887.909]
         //
         verifyException("org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(3670.9083013109826);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("midpoint", midpointIntegrator0.getName());
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertNotNull(midpointIntegrator0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      midpointIntegrator0.setMaxEvaluations(1213);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("midpoint", midpointIntegrator0.getName());
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      assertNotNull(expandableStatefulODE0);
      
      try { 
        midpointIntegrator0.integrate(expandableStatefulODE0, 3670.9083013109826);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (1,213) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(3670.9083013109826);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("midpoint", midpointIntegrator0.getName());
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertNotNull(midpointIntegrator0);
      
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(8);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("classical Runge-Kutta", classicalRungeKuttaIntegrator0.getName());
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertNotNull(classicalRungeKuttaIntegrator0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double0 = classicalRungeKuttaIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 3670.9083013109826, doubleArray0, 1.7763568394002505E-12, doubleArray1);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("classical Runge-Kutta", classicalRungeKuttaIntegrator0.getName());
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(1.7763568394002505E-12, double0, 0.01);
      
      double double1 = classicalRungeKuttaIntegrator0.getCurrentSignedStepsize();
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("classical Runge-Kutta", classicalRungeKuttaIntegrator0.getName());
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = 7.0;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-5922.30304774234), 7.0, (-1062.983938309), (-1.0));
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(5922.30304774234, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(7.0, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(203.60776344284218, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertNotNull(highamHall54Integrator0);
      
      // Undeclared exception!
      try { 
        highamHall54Integrator0.computeDerivatives(7.0, doubleArray1, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(2.220446049250313E-13);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("classical Runge-Kutta", classicalRungeKuttaIntegrator0.getName());
      assertNotNull(classicalRungeKuttaIntegrator0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      int int0 = classicalRungeKuttaIntegrator0.getMaxEvaluations();
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("classical Runge-Kutta", classicalRungeKuttaIntegrator0.getName());
      assertEquals(Integer.MAX_VALUE, int0);
      
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(2, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2.220446049250313E-13;
      doubleArray0[1] = 2.220446049250313E-13;
      // Undeclared exception!
      classicalRungeKuttaIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2.220446049250313E-13, doubleArray0, (double) Integer.MAX_VALUE, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(3670.9083013109826);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("midpoint", midpointIntegrator0.getName());
      assertNotNull(midpointIntegrator0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      assertNotNull(expandableStatefulODE0);
      
      // Undeclared exception!
      midpointIntegrator0.integrate(expandableStatefulODE0, 1.42436589329759E250);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(3670.9083013109826);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("midpoint", midpointIntegrator0.getName());
      assertNotNull(midpointIntegrator0);
      
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(8, 1811.4114953116, 7.0, 3670.9083013109826, 1811.4114953116);
      assertEquals(0.2, adamsMoultonIntegrator0.getMinReduction(), 0.01);
      assertEquals(Double.NaN, adamsMoultonIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(112.60497532161357, adamsMoultonIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Adams-Moulton", adamsMoultonIntegrator0.getName());
      assertEquals(0.9, adamsMoultonIntegrator0.getSafety(), 0.01);
      assertEquals(1811.4114953116, adamsMoultonIntegrator0.getMinStep(), 0.01);
      assertEquals(1.080059738892306, adamsMoultonIntegrator0.getMaxGrowth(), 0.01);
      assertEquals(7.0, adamsMoultonIntegrator0.getMaxStep(), 0.01);
      assertNotNull(adamsMoultonIntegrator0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      assertNotNull(expandableStatefulODE0);
      
      // Undeclared exception!
      try { 
        adamsMoultonIntegrator0.integrate(expandableStatefulODE0, 1.7763568394002505E-12);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one column
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(3670.9083013109826);
      assertEquals("midpoint", midpointIntegrator0.getName());
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01);
      assertNotNull(midpointIntegrator0);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      midpointIntegrator0.addEventHandler(eventHandler0, 3670.9083013109826, 3670.9083013109826, 364);
      assertEquals("midpoint", midpointIntegrator0.getName());
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01);
      
      // Undeclared exception!
      try { 
        midpointIntegrator0.integrate((ExpandableStatefulODE) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(2.220446049250313E-13);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("classical Runge-Kutta", classicalRungeKuttaIntegrator0.getName());
      assertNotNull(classicalRungeKuttaIntegrator0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      int int0 = classicalRungeKuttaIntegrator0.getMaxEvaluations();
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("classical Runge-Kutta", classicalRungeKuttaIntegrator0.getName());
      assertEquals(Integer.MAX_VALUE, int0);
      
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(2, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2.220446049250313E-13;
      doubleArray0[1] = 2.220446049250313E-13;
      try { 
        classicalRungeKuttaIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2.220446049250313E-13, doubleArray0, 2.220446049250313E-13, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(3670.9083013109826);
      assertEquals("midpoint", midpointIntegrator0.getName());
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01);
      assertNotNull(midpointIntegrator0);
      
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(3670.9083013109826, 3670.9083013109826, (-4249.0), 2.3364500999450684);
      assertEquals(3670.9083013109826, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(3670.9083013109826, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(3670.9083013109826, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertNotNull(graggBulirschStoerIntegrator0);
      
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.BOTH;
      StepNormalizer stepNormalizer0 = new StepNormalizer((-571.70318610324), fixedStepHandler0, stepNormalizerBounds0);
      assertNotNull(stepNormalizer0);
      
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      assertEquals(3670.9083013109826, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(3670.9083013109826, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(3670.9083013109826, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      assertNotNull(expandableStatefulODE0);
      
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 2088.1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1.0, 1.0, 1.0, 1.0);
      assertEquals(1.0, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(1.0, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(1.0, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertNotNull(dormandPrince853Integrator0);
      
      int int0 = dormandPrince853Integrator0.getOrder();
      assertEquals(1.0, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(1.0, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(1.0, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(8, int0);
      
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      assertNotNull(dummyStepHandler0);
      
      DummyStepHandler dummyStepHandler1 = DummyStepHandler.getInstance();
      assertSame(dummyStepHandler1, dummyStepHandler0);
      assertNotNull(dummyStepHandler1);
      
      DummyStepHandler dummyStepHandler2 = DummyStepHandler.getInstance();
      assertSame(dummyStepHandler2, dummyStepHandler1);
      assertSame(dummyStepHandler2, dummyStepHandler0);
      assertNotNull(dummyStepHandler2);
      
      DummyStepHandler dummyStepHandler3 = DummyStepHandler.getInstance();
      assertSame(dummyStepHandler3, dummyStepHandler2);
      assertSame(dummyStepHandler3, dummyStepHandler0);
      assertSame(dummyStepHandler3, dummyStepHandler1);
      assertNotNull(dummyStepHandler3);
      
      DummyStepHandler dummyStepHandler4 = DummyStepHandler.getInstance();
      assertSame(dummyStepHandler4, dummyStepHandler1);
      assertSame(dummyStepHandler4, dummyStepHandler0);
      assertSame(dummyStepHandler4, dummyStepHandler2);
      assertSame(dummyStepHandler4, dummyStepHandler3);
      assertNotNull(dummyStepHandler4);
      
      DummyStepHandler dummyStepHandler5 = DummyStepHandler.getInstance();
      assertSame(dummyStepHandler5, dummyStepHandler3);
      assertSame(dummyStepHandler5, dummyStepHandler1);
      assertSame(dummyStepHandler5, dummyStepHandler0);
      assertSame(dummyStepHandler5, dummyStepHandler4);
      assertSame(dummyStepHandler5, dummyStepHandler2);
      assertNotNull(dummyStepHandler5);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(16, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertEquals(16, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      assertNotNull(expandableStatefulODE0);
      
      expandableStatefulODE0.setTime(8);
      assertEquals(16, firstOrderConverter0.getDimension());
      assertEquals(8.0, expandableStatefulODE0.getTime(), 0.01);
      
      dormandPrince853Integrator0.integrate(expandableStatefulODE0, 1.0);
      assertEquals(1.0, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(1.0, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(1.0, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(16, firstOrderConverter0.getDimension());
      assertEquals(1.0, expandableStatefulODE0.getTime(), 0.01);
      
      try { 
        dormandPrince853Integrator0.integrate(expandableStatefulODE0, 1.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(3670.9083013109826);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("midpoint", midpointIntegrator0.getName());
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01);
      assertNotNull(midpointIntegrator0);
      
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(3670.9083013109826, 3670.9083013109826, (-4249.0), 2.3364500999450684);
      assertEquals(3670.9083013109826, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(3670.9083013109826, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(3670.9083013109826, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertNotNull(graggBulirschStoerIntegrator0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      assertNotNull(expandableStatefulODE0);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      BisectionSolver bisectionSolver0 = new BisectionSolver((-1553.6689023119275));
      assertEquals(0.0, bisectionSolver0.getMin(), 0.01);
      assertEquals(0.0, bisectionSolver0.getMax(), 0.01);
      assertEquals(1.0E-14, bisectionSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-1553.6689023119275), bisectionSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, bisectionSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, bisectionSolver0.getStartValue(), 0.01);
      assertNotNull(bisectionSolver0);
      
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (-4249.0), (-1553.6689023119275), 385, (UnivariateSolver) bisectionSolver0);
      assertEquals(3670.9083013109826, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(3670.9083013109826, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(3670.9083013109826, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0.0, bisectionSolver0.getMin(), 0.01);
      assertEquals(0.0, bisectionSolver0.getMax(), 0.01);
      assertEquals(1.0E-14, bisectionSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-1553.6689023119275), bisectionSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, bisectionSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, bisectionSolver0.getStartValue(), 0.01);
      
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 2088.1);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      double double0 = 4.547473508864641E-10;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(4.547473508864641E-10, 4.547473508864641E-10, (-1.3940903373095247E-8), (-1.0));
      assertEquals(4.547473508864641E-10, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(4.547473508864641E-10, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(4.547473508864641E-10, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertNotNull(dormandPrince853Integrator0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 3670.9083013109826;
      doubleArray1[1] = (-1.0);
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1.0), doubleArray0, (-1.0), doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(3670.9083013109826);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("midpoint", midpointIntegrator0.getName());
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01);
      assertNotNull(midpointIntegrator0);
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        midpointIntegrator0.integrate((FirstOrderDifferentialEquations) null, (-855.3694507632732), doubleArray0, (-855.3694507632732), doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, 0.0, 0.0);
      assertEquals(0.0, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(0.0, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertNotNull(dormandPrince853Integrator0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(438).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(876, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      Collection<EventHandler> collection0 = dormandPrince853Integrator0.getEventHandlers();
      assertEquals(0.0, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(0.0, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertNotNull(collection0);
      
      dormandPrince853Integrator0.setMaxEvaluations(Integer.MAX_VALUE);
      assertEquals(0.0, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(0.0, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      dormandPrince853Integrator0.addEventHandler(eventHandler0, 1.5238514098804918E-279, 1.5238514098804918E-279, 438);
      assertEquals(0.0, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(0.0, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      
      double double0 = dormandPrince853Integrator0.getCurrentSignedStepsize();
      assertEquals(0.0, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(0.0, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-5.406177467045421E-8), (-1235.4), Double.NaN, 3029.9846806778);
      assertEquals(1235.4, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(5.406177467045421E-8, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.008172387437455419, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertNotNull(dormandPrince853Integrator0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      Collection<EventHandler> collection0 = dormandPrince853Integrator0.getEventHandlers();
      assertEquals(1235.4, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(5.406177467045421E-8, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.008172387437455419, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertNotNull(collection0);
      
      dormandPrince853Integrator0.setMaxEvaluations(438);
      assertEquals(1235.4, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(5.406177467045421E-8, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.008172387437455419, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-5.406177467045421E-8);
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      doubleArray0[2] = 4.547473508864641E-10;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (-3935.23528299);
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 3.4454766202661184E267;
      doubleArray1[1] = 4.547473508864641E-10;
      doubleArray1[2] = (-1235.4);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 1.0;
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 4.547473508864641E-10, doubleArray0, 3.4454766202661184E267, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(1.0);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertNotNull(threeEighthesIntegrator0);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      SecantSolver secantSolver0 = new SecantSolver();
      assertEquals(0.0, secantSolver0.getStartValue(), 0.01);
      assertEquals(0.0, secantSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, secantSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, secantSolver0.getMax(), 0.01);
      assertEquals(1.0E-6, secantSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, secantSolver0.getRelativeAccuracy(), 0.01);
      assertNotNull(secantSolver0);
      
      threeEighthesIntegrator0.addEventHandler(eventHandler0, 1.0, (-1.4854841678687828E-8), 4156, (UnivariateSolver) secantSolver0);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertEquals(0.0, secantSolver0.getStartValue(), 0.01);
      assertEquals(0.0, secantSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, secantSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, secantSolver0.getMax(), 0.01);
      assertEquals(1.0E-6, secantSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, secantSolver0.getRelativeAccuracy(), 0.01);
      
      Collection<EventHandler> collection0 = threeEighthesIntegrator0.getEventHandlers();
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertTrue(collection0.contains(eventHandler0));
      assertNotNull(collection0);
      
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-2125.578308272671));
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("midpoint", midpointIntegrator0.getName());
      assertNotNull(midpointIntegrator0);
      
      double double0 = midpointIntegrator0.getCurrentSignedStepsize();
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("midpoint", midpointIntegrator0.getName());
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3670.9083013109826;
      doubleArray0[1] = 4.547473508864641E-10;
      doubleArray0[2] = 3670.9083013109826;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(111.245628668, 3670.9083013109826, doubleArray0, doubleArray0);
      assertEquals(639.0402974476025, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(3670.9083013109826, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(111.245628668, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {3670.9083013109826, 4.547473508864641E-10, 3670.9083013109826}, doubleArray0, 0.01);
      assertNotNull(dormandPrince853Integrator0);
      
      Collection<EventHandler> collection0 = dormandPrince853Integrator0.getEventHandlers();
      assertEquals(639.0402974476025, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(3670.9083013109826, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(111.245628668, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(3, doubleArray0.length);
      assertArrayEquals(new double[] {3670.9083013109826, 4.547473508864641E-10, 3670.9083013109826}, doubleArray0, 0.01);
      assertNotNull(collection0);
      
      DormandPrince853Integrator dormandPrince853Integrator1 = new DormandPrince853Integrator(111.245628668, 1782.704501442808, (-1254.469689), 1.0);
      assertEquals(0.2, dormandPrince853Integrator1.getMinReduction(), 0.01);
      assertEquals(1782.704501442808, dormandPrince853Integrator1.getMaxStep(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator1.getSafety(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator1.getCurrentStepStart(), 0.01);
      assertEquals(8, dormandPrince853Integrator1.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator1.getName());
      assertEquals(445.32918497699956, dormandPrince853Integrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(111.245628668, dormandPrince853Integrator1.getMinStep(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator1.getMaxGrowth(), 0.01);
      assertFalse(dormandPrince853Integrator1.equals((Object)dormandPrince853Integrator0));
      assertNotNull(dormandPrince853Integrator1);
      
      dormandPrince853Integrator1.clearEventHandlers();
      assertEquals(0.2, dormandPrince853Integrator1.getMinReduction(), 0.01);
      assertEquals(1782.704501442808, dormandPrince853Integrator1.getMaxStep(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator1.getSafety(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator1.getCurrentStepStart(), 0.01);
      assertEquals(8, dormandPrince853Integrator1.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator1.getName());
      assertEquals(445.32918497699956, dormandPrince853Integrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(111.245628668, dormandPrince853Integrator1.getMinStep(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator1.getMaxGrowth(), 0.01);
      assertFalse(dormandPrince853Integrator1.equals((Object)dormandPrince853Integrator0));
      assertNotSame(dormandPrince853Integrator1, dormandPrince853Integrator0);
      
      int int0 = dormandPrince853Integrator1.getOrder();
      assertEquals(0.2, dormandPrince853Integrator1.getMinReduction(), 0.01);
      assertEquals(1782.704501442808, dormandPrince853Integrator1.getMaxStep(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator1.getSafety(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator1.getCurrentStepStart(), 0.01);
      assertEquals(8, dormandPrince853Integrator1.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator1.getName());
      assertEquals(445.32918497699956, dormandPrince853Integrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(111.245628668, dormandPrince853Integrator1.getMinStep(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator1.getMaxGrowth(), 0.01);
      assertFalse(dormandPrince853Integrator1.equals((Object)dormandPrince853Integrator0));
      assertNotSame(dormandPrince853Integrator1, dormandPrince853Integrator0);
      assertEquals(8, int0);
      
      double double0 = dormandPrince853Integrator0.getCurrentSignedStepsize();
      assertEquals(639.0402974476025, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(3670.9083013109826, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(111.245628668, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(3, doubleArray0.length);
      assertFalse(dormandPrince853Integrator0.equals((Object)dormandPrince853Integrator1));
      assertArrayEquals(new double[] {3670.9083013109826, 4.547473508864641E-10, 3670.9083013109826}, doubleArray0, 0.01);
      assertNotSame(dormandPrince853Integrator0, dormandPrince853Integrator1);
      assertEquals(639.0402974476025, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3646.0670757;
      doubleArray0[1] = (-2056.186);
      doubleArray0[2] = (-2056.186);
      doubleArray0[3] = (-2056.186);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2056.186), (-2056.186), doubleArray0, doubleArray0);
      assertEquals(2056.186, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(2056.186, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(2056.186, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {3646.0670757, (-2056.186), (-2056.186), (-2056.186)}, doubleArray0, 0.01);
      assertNotNull(dormandPrince54Integrator0);
      
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-2056.186), 0.30545274794128174, doubleArray0, doubleArray0);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(25.06127817926277, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(0.30545274794128174, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(2056.186, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {3646.0670757, (-2056.186), (-2056.186), (-2056.186)}, doubleArray0, 0.01);
      assertNotNull(highamHall54Integrator0);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      highamHall54Integrator0.clearStepHandlers();
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(25.06127817926277, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(0.30545274794128174, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(2056.186, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {3646.0670757, (-2056.186), (-2056.186), (-2056.186)}, doubleArray0, 0.01);
      
      highamHall54Integrator0.addEventHandler(eventHandler0, 0.0, (-2056.186), 519);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(25.06127817926277, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(0.30545274794128174, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(2056.186, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {3646.0670757, (-2056.186), (-2056.186), (-2056.186)}, doubleArray0, 0.01);
      
      GillIntegrator gillIntegrator0 = new GillIntegrator(0.301261305809021);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gill", gillIntegrator0.getName());
      assertNotNull(gillIntegrator0);
      
      gillIntegrator0.clearEventHandlers();
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gill", gillIntegrator0.getName());
      
      Collection<EventHandler> collection0 = gillIntegrator0.getEventHandlers();
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gill", gillIntegrator0.getName());
      assertFalse(collection0.contains(eventHandler0));
      assertNotNull(collection0);
      
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      gillIntegrator0.addEventHandler(eventHandler1, (-2056.186), 3646.0670757, 368, (UnivariateSolver) null);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gill", gillIntegrator0.getName());
      
      int int0 = gillIntegrator0.getMaxEvaluations();
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Integer.MAX_VALUE, int0);
      
      EventHandler eventHandler2 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      BrentSolver brentSolver0 = new BrentSolver((-2056.186));
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, brentSolver0.getMax(), 0.01);
      assertEquals(0.0, brentSolver0.getStartValue(), 0.01);
      assertEquals(0.0, brentSolver0.getMin(), 0.01);
      assertEquals((-2056.186), brentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, brentSolver0.getRelativeAccuracy(), 0.01);
      assertNotNull(brentSolver0);
      
      gillIntegrator0.addEventHandler(eventHandler2, 0.0, 1811.4114953116, 183, (UnivariateSolver) brentSolver0);
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, brentSolver0.getMax(), 0.01);
      assertEquals(0.0, brentSolver0.getStartValue(), 0.01);
      assertEquals(0.0, brentSolver0.getMin(), 0.01);
      assertEquals((-2056.186), brentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, brentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gill", gillIntegrator0.getName());
      
      int int1 = highamHall54Integrator0.getOrder();
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(25.06127817926277, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(0.30545274794128174, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(2056.186, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(4, doubleArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new double[] {3646.0670757, (-2056.186), (-2056.186), (-2056.186)}, doubleArray0, 0.01);
      assertEquals(5, int1);
      
      gillIntegrator0.clearEventHandlers();
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gill", gillIntegrator0.getName());
      
      Collection<EventHandler> collection1 = gillIntegrator0.getEventHandlers();
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gill", gillIntegrator0.getName());
      assertFalse(collection1.equals((Object)collection0));
      assertFalse(collection1.contains(eventHandler2));
      assertNotSame(collection1, collection0);
      assertNotNull(collection1);
      
      gillIntegrator0.clearEventHandlers();
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gill", gillIntegrator0.getName());
      
      EventHandler eventHandler3 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      gillIntegrator0.addEventHandler(eventHandler3, 0.0, 76.87459575233392, 4459);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gill", gillIntegrator0.getName());
      
      double double0 = highamHall54Integrator0.getCurrentSignedStepsize();
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(25.06127817926277, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(0.30545274794128174, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(2056.186, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {3646.0670757, (-2056.186), (-2056.186), (-2056.186)}, doubleArray0, 0.01);
      assertEquals(25.06127817926277, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3646.0670757;
      doubleArray0[1] = (-2056.186);
      doubleArray0[2] = (-2056.186);
      doubleArray0[3] = (-2056.186);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2056.186), (-2056.186), doubleArray0, doubleArray0);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(2056.186, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(2056.186, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(2056.186, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {3646.0670757, (-2056.186), (-2056.186), (-2056.186)}, doubleArray0, 0.01);
      assertNotNull(dormandPrince54Integrator0);
      
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-2056.186), 0.30545274794128174, doubleArray0, doubleArray0);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(0.30545274794128174, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(25.06127817926277, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(2056.186, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {3646.0670757, (-2056.186), (-2056.186), (-2056.186)}, doubleArray0, 0.01);
      assertNotNull(highamHall54Integrator0);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      highamHall54Integrator0.clearStepHandlers();
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(0.30545274794128174, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(25.06127817926277, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(2056.186, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {3646.0670757, (-2056.186), (-2056.186), (-2056.186)}, doubleArray0, 0.01);
      
      highamHall54Integrator0.addEventHandler(eventHandler0, 0.0, (-2056.186), 519);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(0.30545274794128174, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(25.06127817926277, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(2056.186, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {3646.0670757, (-2056.186), (-2056.186), (-2056.186)}, doubleArray0, 0.01);
      
      highamHall54Integrator0.clearEventHandlers();
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(0.30545274794128174, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(25.06127817926277, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(2056.186, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {3646.0670757, (-2056.186), (-2056.186), (-2056.186)}, doubleArray0, 0.01);
      
      highamHall54Integrator0.clearEventHandlers();
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(0.30545274794128174, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(25.06127817926277, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(2056.186, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {3646.0670757, (-2056.186), (-2056.186), (-2056.186)}, doubleArray0, 0.01);
      
      highamHall54Integrator0.setStepSizeControl((-2056.186), (-2056.186), doubleArray0, doubleArray0);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(2056.186, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(25.06127817926277, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(2056.186, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {3646.0670757, (-2056.186), (-2056.186), (-2056.186)}, doubleArray0, 0.01);
      
      highamHall54Integrator0.setMaxGrowth((-2056.186));
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(2056.186, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals((-2056.186), highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(25.06127817926277, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(2056.186, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {3646.0670757, (-2056.186), (-2056.186), (-2056.186)}, doubleArray0, 0.01);
      
      highamHall54Integrator0.setMaxEvaluations((-619));
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(2056.186, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals((-2056.186), highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(25.06127817926277, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(2056.186, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {3646.0670757, (-2056.186), (-2056.186), (-2056.186)}, doubleArray0, 0.01);
      
      int int0 = highamHall54Integrator0.getOrder();
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(2056.186, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals((-2056.186), highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(25.06127817926277, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(2056.186, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {3646.0670757, (-2056.186), (-2056.186), (-2056.186)}, doubleArray0, 0.01);
      assertEquals(5, int0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1757).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(3514, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      Collection<EventHandler> collection0 = dormandPrince54Integrator0.getEventHandlers();
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(2056.186, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(2056.186, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(2056.186, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {3646.0670757, (-2056.186), (-2056.186), (-2056.186)}, doubleArray0, 0.01);
      assertFalse(collection0.contains(eventHandler0));
      assertNotNull(collection0);
      
      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-2056.186), doubleArray0, 0.30545274794128174, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 3,514
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(2038.0);
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertNotNull(gillIntegrator0);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      gillIntegrator0.addEventHandler((EventHandler) null, 1690.5, (-3550.725643834488), 2025, (UnivariateSolver) null);
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      
      gillIntegrator0.clearEventHandlers();
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      
      Collection<EventHandler> collection0 = gillIntegrator0.getEventHandlers();
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertFalse(collection0.contains(eventHandler0));
      assertNotNull(collection0);
      
      gillIntegrator0.addEventHandler(eventHandler0, (-3323.408), 0.0, 0, (UnivariateSolver) null);
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      
      int int0 = gillIntegrator0.getMaxEvaluations();
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Integer.MAX_VALUE, int0);
      
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      gillIntegrator0.addEventHandler(eventHandler1, 0.0, 0.0, 1050, (UnivariateSolver) null);
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      
      int int1 = gillIntegrator0.getMaxEvaluations();
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertTrue(int1 == int0);
      assertEquals(Integer.MAX_VALUE, int1);
      
      gillIntegrator0.clearEventHandlers();
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      
      Collection<EventHandler> collection1 = gillIntegrator0.getEventHandlers();
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertFalse(collection1.equals((Object)collection0));
      assertFalse(collection1.contains(eventHandler1));
      assertNotSame(collection1, collection0);
      assertNotNull(collection1);
      
      gillIntegrator0.clearEventHandlers();
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      
      EventHandler eventHandler2 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      gillIntegrator0.addEventHandler(eventHandler2, Double.NaN, (-3323.408), 1050);
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(3270.0, 3270.0, 3270.0, 0.0);
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals(3270.0, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(3270.0, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(3270.0, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertNotNull(dormandPrince54Integrator0);
      
      int int0 = dormandPrince54Integrator0.getMaxEvaluations();
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals(3270.0, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(3270.0, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(3270.0, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(Integer.MAX_VALUE, int0);
      
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(194, (-1757.665634873148), 3270.0, 4.547473508864641E-10, 1811.4114953116);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1699.2208471656784);
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = new double[6];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-1699.2208471656784);
      doubleArray1[1] = (-2886.99733);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-1699.2208471656784);
      doubleArray1[5] = 0.0;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 0.0, doubleArray0, doubleArray1);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(0.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0.0, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(0.0, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(6, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {(-1699.2208471656784), 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-1699.2208471656784), (-2886.99733), 0.0, 0.0, (-1699.2208471656784), 0.0}, doubleArray1, 0.01);
      assertNotNull(highamHall54Integrator0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      assertNotNull(expandableStatefulODE0);
      
      try { 
        highamHall54Integrator0.integrate(expandableStatefulODE0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 2
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-518.860060969937), 0.0, 702.0, 702.0);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(0.0, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals(518.860060969937, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals(0.0, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertNotNull(dormandPrince54Integrator0);
      
      dormandPrince54Integrator0.setInitialStepSize((-16.42));
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(0.0, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals(518.860060969937, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals(0.0, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      
      int int0 = 46;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      PegasusSolver pegasusSolver0 = new PegasusSolver(5804.48, (-4598), 702.0);
      assertEquals(5804.48, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(702.0, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-4598.0), pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertNotNull(pegasusSolver0);
      
      dormandPrince54Integrator0.addEventHandler(eventHandler0, 2783.0, (double) 46, (-4598), (UnivariateSolver) pegasusSolver0);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(0.0, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals(518.860060969937, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals(0.0, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(5804.48, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(702.0, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-4598.0), pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      
      Collection<StepHandler> collection0 = dormandPrince54Integrator0.getStepHandlers();
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(0.0, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals(518.860060969937, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals(0.0, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertNotNull(collection0);
      
      dormandPrince54Integrator0.setMaxEvaluations((-2759));
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(0.0, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals(518.860060969937, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals(0.0, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      
      dormandPrince54Integrator0.setSafety(0.0);
      assertEquals(0.0, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(0.0, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals(518.860060969937, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals(0.0, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      
      double[] doubleArray0 = new double[0];
      dormandPrince54Integrator0.setMinReduction(0.0);
      assertEquals(0.0, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(0.0, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals(0.0, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(518.860060969937, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals(0.0, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      
      // Undeclared exception!
      try { 
        dormandPrince54Integrator0.computeDerivatives((-518.860060969937), doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3646.0670757;
      doubleArray0[1] = (-2056.186);
      doubleArray0[2] = (-2056.186);
      doubleArray0[3] = (-2056.186);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2056.186), (-2056.186), doubleArray0, doubleArray0);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(2056.186, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals(2056.186, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(2056.186, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {3646.0670757, (-2056.186), (-2056.186), (-2056.186)}, doubleArray0, 0.01);
      assertNotNull(dormandPrince54Integrator0);
      
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-2056.186), 0.30545274794128174, doubleArray0, doubleArray0);
      assertEquals(0.30545274794128174, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(25.06127817926277, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(2056.186, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {3646.0670757, (-2056.186), (-2056.186), (-2056.186)}, doubleArray0, 0.01);
      assertNotNull(highamHall54Integrator0);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      highamHall54Integrator0.clearStepHandlers();
      assertEquals(0.30545274794128174, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(25.06127817926277, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(2056.186, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {3646.0670757, (-2056.186), (-2056.186), (-2056.186)}, doubleArray0, 0.01);
      
      highamHall54Integrator0.addEventHandler(eventHandler0, 0.0, (-2056.186), 519);
      assertEquals(0.30545274794128174, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(25.06127817926277, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(2056.186, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {3646.0670757, (-2056.186), (-2056.186), (-2056.186)}, doubleArray0, 0.01);
      
      highamHall54Integrator0.clearEventHandlers();
      assertEquals(0.30545274794128174, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(25.06127817926277, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(2056.186, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {3646.0670757, (-2056.186), (-2056.186), (-2056.186)}, doubleArray0, 0.01);
      
      highamHall54Integrator0.clearEventHandlers();
      assertEquals(0.30545274794128174, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(25.06127817926277, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(2056.186, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {3646.0670757, (-2056.186), (-2056.186), (-2056.186)}, doubleArray0, 0.01);
      
      highamHall54Integrator0.setStepSizeControl((-2056.186), (-2056.186), doubleArray0, doubleArray0);
      assertEquals(2056.186, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(25.06127817926277, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(2056.186, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {3646.0670757, (-2056.186), (-2056.186), (-2056.186)}, doubleArray0, 0.01);
      
      highamHall54Integrator0.setMaxGrowth((-2056.186));
      assertEquals(2056.186, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals((-2056.186), highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(25.06127817926277, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(2056.186, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {3646.0670757, (-2056.186), (-2056.186), (-2056.186)}, doubleArray0, 0.01);
      
      highamHall54Integrator0.setMaxEvaluations((-619));
      assertEquals(2056.186, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals((-2056.186), highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(25.06127817926277, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(2056.186, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {3646.0670757, (-2056.186), (-2056.186), (-2056.186)}, doubleArray0, 0.01);
      
      int int0 = highamHall54Integrator0.getOrder();
      assertEquals(2056.186, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals((-2056.186), highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(25.06127817926277, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(2056.186, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {3646.0670757, (-2056.186), (-2056.186), (-2056.186)}, doubleArray0, 0.01);
      assertEquals(5, int0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      Collection<EventHandler> collection0 = dormandPrince54Integrator0.getEventHandlers();
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(2056.186, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals(2056.186, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(2056.186, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {3646.0670757, (-2056.186), (-2056.186), (-2056.186)}, doubleArray0, 0.01);
      assertFalse(collection0.contains(eventHandler0));
      assertNotNull(collection0);
      
      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-2056.186), doubleArray0, 0.30545274794128174, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double double0 = 1.0;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1.0, 1.0, 1.0, 1.0);
      dormandPrince853Integrator0.getOrder();
      DummyStepHandler.getInstance();
      DummyStepHandler.getInstance();
      DummyStepHandler.getInstance();
      DummyStepHandler.getInstance();
      DummyStepHandler.getInstance();
      DummyStepHandler.getInstance();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      dormandPrince853Integrator0.integrate(expandableStatefulODE0, 1.0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1390.81181907208);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-1390.81181907208);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, doubleArray0, doubleArray1);
      dormandPrince853Integrator0.getEventHandlers();
      dormandPrince853Integrator0.getEvaluations();
      dormandPrince853Integrator0.getEventHandlers();
      dormandPrince853Integrator0.getEvaluations();
      dormandPrince853Integrator0.getName();
      dormandPrince853Integrator0.setMaxEvaluations(0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0, 2.4, 0.0, 0.0);
      graggBulirschStoerIntegrator0.setControlFactors(0, 0.3111643669578199, 4232.0, (-1.0));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      dormandPrince853Integrator0.addEventHandler(eventHandler0, 1343.989317954, Double.NaN, 1);
      assertEquals(0.0, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0.0);
      midpointIntegrator0.getMaxEvaluations();
      midpointIntegrator0.getName();
      double[] doubleArray0 = null;
      DormandPrince853Integrator dormandPrince853Integrator0 = null;
      try {
        dormandPrince853Integrator0 = new DormandPrince853Integrator(1.7763568394002505E-12, 0.0, (double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(0.0);
      gillIntegrator0.getEventHandlers();
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      DummyStepHandler.getInstance();
      DummyStepHandler.getInstance();
      gillIntegrator0.addStepHandler(dummyStepHandler0);
      gillIntegrator0.setMaxEvaluations(183);
      gillIntegrator0.getEventHandlers();
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 0.0, 5360.44779137, 0.7777777777777778);
      dormandPrince54Integrator0.getOrder();
      dormandPrince54Integrator0.getStepHandlers();
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 183;
      doubleArray1[1] = 2.2404374302607883;
      doubleArray1[2] = (double) 183;
      doubleArray1[3] = 0.7777777777777778;
      doubleArray1[4] = 0.7777777777777778;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(5, 5360.44779137, doubleArray0, doubleArray1);
      graggBulirschStoerIntegrator0.setStabilityCheck(false, 5, 142, 1.0);
      assertEquals(5.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
      threeEighthesIntegrator0.getEventHandlers();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1708.9485016977123;
      // Undeclared exception!
      try { 
        threeEighthesIntegrator0.computeDerivatives(1708.9485016977123, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 1.0;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 1.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1.0, 1.0, doubleArray0, doubleArray1);
      boolean boolean0 = false;
      int int0 = 163;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-629.2598), doubleArray0, 1.0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(5, 1000.0, 1581.0, 1581.0, (-9.147934308113573));
      adamsMoultonIntegrator0.clearStepHandlers();
      adamsMoultonIntegrator0.setMaxEvaluations(0);
      adamsMoultonIntegrator0.getEvaluations();
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.NEITHER;
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.0, fixedStepHandler0, stepNormalizerMode0, stepNormalizerBounds0);
      adamsMoultonIntegrator0.addStepHandler(stepNormalizer0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-9.147934308113573);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-9.147934308113573);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 1581.0;
      doubleArray0[6] = (-9.147934308113573);
      doubleArray0[7] = (double) 5;
      doubleArray0[8] = (double) 0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0, 1000.0, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setOrderControl(149, (-887.41677103625), (-0.5));
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.clearEventHandlers();
      int int0 = 442;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 0.0, (double) 442, 442);
      graggBulirschStoerIntegrator0.setOrderControl(442, 0.0, 1302.11682396432);
      graggBulirschStoerIntegrator0.clearStepHandlers();
      graggBulirschStoerIntegrator0.getEvaluations();
      graggBulirschStoerIntegrator0.setControlFactors(2745.38906406, 0.0, (-2839.4756), 1302.11682396432);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (-2839.4756));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 4
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1141.82951066);
      doubleArray0[4] = (-167.159);
      doubleArray0[5] = (-167.159);
      doubleArray0[6] = (-167.159);
      doubleArray0[7] = (-167.159);
      doubleArray0[8] = (-167.159);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, (-167.159), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.addStepHandler((StepHandler) null);
      double double0 = graggBulirschStoerIntegrator0.getCurrentStepStart();
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(1000.0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1000.0;
      doubleArray0[1] = 1000.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1000.0, 1000.0, doubleArray0, doubleArray0);
      boolean boolean0 = true;
      int int0 = 963;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 1000.0, 1756.6309863826, 164);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.0, fixedStepHandler0);
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      // Undeclared exception!
      try { 
        stepNormalizer0.handleStep(nordsieckStepInterpolator0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(152.0, (-1.0), (-1.0), 0.022651792198360825);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double0 = (-3250.546);
      dormandPrince853Integrator0.addEventHandler(eventHandler0, (-3250.546), (-3250.546), 1115);
      dormandPrince853Integrator0.setMaxEvaluations(5980);
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      PegasusSolver pegasusSolver0 = new PegasusSolver((-2145.10706278), 152.0);
      pegasusSolver0.getMaxEvaluations();
      pegasusSolver0.getMaxEvaluations();
      dormandPrince853Integrator0.addEventHandler(eventHandler1, (double) 5980, 152.0, Integer.MAX_VALUE, (UnivariateSolver) pegasusSolver0);
      double[] doubleArray0 = null;
      HighamHall54Integrator highamHall54Integrator0 = null;
      try {
        highamHall54Integrator0 = new HighamHall54Integrator((-1.0), 1115, (double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 85.574995;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 682.839;
      doubleArray1[3] = (-3259.8562711123595);
      doubleArray1[4] = 85.574995;
      doubleArray1[5] = (-3259.8562711123595);
      doubleArray1[6] = 85.574995;
      doubleArray1[7] = (-3259.8562711123595);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(85.574995, (-3259.8562711123595), doubleArray0, doubleArray1);
      dormandPrince54Integrator0.setMaxEvaluations(0);
      assertEquals(528.1687079912618, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double double0 = 1.0;
      double double1 = (-1.8379759110070617);
      double double2 = 671.589;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1.0, (-1.8379759110070617), 0.0, 671.589);
      dormandPrince853Integrator0.getEvaluations();
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = null;
      try {
        adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(0, 1.0, 1.0, 0, (-1.8379759110070617));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // multistep method needs at least 0 previous steps, got 2
         //
         verifyException("org.apache.commons.math3.ode.MultistepIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(3670.9083013109826);
      double double0 = midpointIntegrator0.getCurrentStepStart();
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-0.08899033645133331));
      classicalRungeKuttaIntegrator0.getCurrentStepStart();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double0 = (-1695.19426279237);
      int int0 = (-1951);
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      int int1 = 0;
      Gaussian gaussian0 = new Gaussian();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(0, (UnivariateFunction) gaussian0, 1.0, 0.0, allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3670.9083013109826;
      doubleArray0[1] = 3670.9083013109826;
      doubleArray0[2] = 1152.748775;
      doubleArray0[3] = 1152.748775;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1.0, 1.0, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.clearEventHandlers();
      graggBulirschStoerIntegrator0.setStabilityCheck(true, (-226), (-226), (-226));
      assertEquals(1.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(0.0);
      gillIntegrator0.getEventHandlers();
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      DummyStepHandler.getInstance();
      DummyStepHandler.getInstance();
      gillIntegrator0.addStepHandler(dummyStepHandler0);
      gillIntegrator0.setMaxEvaluations(183);
      gillIntegrator0.getEventHandlers();
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 0.0, 5360.44779137, 0.7777777777777778);
      dormandPrince54Integrator0.getOrder();
      dormandPrince54Integrator0.getStepHandlers();
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 183;
      doubleArray1[1] = 2.2404374302607883;
      doubleArray1[2] = (double) 183;
      doubleArray1[3] = 0.7777777777777778;
      doubleArray1[4] = 0.7777777777777778;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1002.0473113055, 0.0, doubleArray0, doubleArray0);
      highamHall54Integrator0.getEvaluations();
      dormandPrince54Integrator0.addEventHandler((EventHandler) null, 2.5641927558519502E-8, 0.0, 559, (UnivariateSolver) null);
      int int0 = highamHall54Integrator0.getOrder();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(0.0);
      gillIntegrator0.getEventHandlers();
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      DummyStepHandler.getInstance();
      DummyStepHandler.getInstance();
      gillIntegrator0.clearStepHandlers();
      gillIntegrator0.addStepHandler(dummyStepHandler0);
      gillIntegrator0.setMaxEvaluations(183);
      gillIntegrator0.getEventHandlers();
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 0.0, 5360.44779137, 0.7777777777777778);
      dormandPrince54Integrator0.getOrder();
      dormandPrince54Integrator0.getStepHandlers();
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 183;
      doubleArray1[1] = 2.2404374302607883;
      doubleArray1[2] = (double) 183;
      doubleArray1[3] = 0.7777777777777778;
      doubleArray1[4] = 0.7777777777777778;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(5, 5360.44779137, doubleArray0, doubleArray1);
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 5);
      graggBulirschStoerIntegrator0.setStabilityCheck(false, 5, 142, 1.0);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double double0 = 1000.0;
      double double1 = 2063.8833099567905;
      double double2 = (-0.4831900357003607);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1000.0, 1000.0, 2063.8833099567905, (-0.4831900357003607));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      int int0 = (-1602);
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-0.4831900357003607), (-1602), 1000.0);
      graggBulirschStoerIntegrator0.clearStepHandlers();
      graggBulirschStoerIntegrator0.clearEventHandlers();
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (-0.4831900357003607), 1000.0, (-1602), (UnivariateSolver) regulaFalsiSolver0);
      graggBulirschStoerIntegrator0.clearStepHandlers();
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      int int1 = 0;
      Asin asin0 = new Asin();
      DerivativeStructure derivativeStructure0 = null;
      try {
        derivativeStructure0 = new DerivativeStructure(0, (-1602));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1602
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(3670.9083013109826, (-1.483283901239408E-9), (-1527.07), 1173.740922253);
      DormandPrince54Integrator dormandPrince54Integrator1 = new DormandPrince54Integrator((-1676.1464824493), (-1.483283901239408E-9), (-1676.1464824493), 3670.9083013109826);
      dormandPrince54Integrator1.setStepSizeControl((-4352.2866243), 4.547473508864641E-10, 3670.9083013109826, 3670.9083013109826);
      dormandPrince54Integrator1.getOrder();
      dormandPrince54Integrator1.setMaxGrowth((-1527.07));
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1676.1464824493), 1.0, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getOrder();
      // Undeclared exception!
      try { 
        dormandPrince54Integrator0.computeDerivatives(1.0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(628.48455413);
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      DummyStepHandler.getInstance();
      DummyStepHandler.getInstance();
      DummyStepHandler.getInstance();
      DummyStepHandler.getInstance();
      threeEighthesIntegrator0.addStepHandler(dummyStepHandler0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, 628.48455413, 628.48455413);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 628.48455413;
      doubleArray0[1] = 628.48455413;
      doubleArray0[2] = (double) 3607;
      doubleArray0[3] = (double) 3607;
      doubleArray0[4] = (double) 3607;
      doubleArray0[5] = 628.48455413;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (double) 3607;
      doubleArray0[8] = 0.0;
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.initializeStep(true, 3607, doubleArray0, 896.2563871128, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double double0 = (-10.15626);
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-10.15626));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-10.15626);
      doubleArray0[1] = (-10.15626);
      doubleArray0[2] = (-10.15626);
      // Undeclared exception!
      try { 
        classicalRungeKuttaIntegrator0.computeDerivatives((-10.15626), doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-6817.3);
      doubleArray0[1] = (-6817.3);
      doubleArray0[2] = (double) 378;
      doubleArray0[3] = (double) 378;
      doubleArray0[4] = (double) 378;
      doubleArray0[5] = (-6817.3);
      doubleArray0[6] = (double) 378;
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(378, 378, (-6817.3), doubleArray0, doubleArray0);
  }
}
