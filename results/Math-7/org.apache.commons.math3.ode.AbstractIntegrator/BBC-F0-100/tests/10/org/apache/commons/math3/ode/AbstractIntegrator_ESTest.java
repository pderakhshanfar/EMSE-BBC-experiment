/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 00:59:57 GMT 2021
 */

package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
import org.apache.commons.math3.analysis.function.Asin;
import org.apache.commons.math3.analysis.function.Gaussian;
import org.apache.commons.math3.analysis.solvers.AllowedSolution;
import org.apache.commons.math3.analysis.solvers.IllinoisSolver;
import org.apache.commons.math3.analysis.solvers.PegasusSolver;
import org.apache.commons.math3.analysis.solvers.RegulaFalsiSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator;
import org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator;
import org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.GillIntegrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.nonstiff.MidpointIntegrator;
import org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator;
import org.apache.commons.math3.ode.sampling.DummyStepHandler;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator;
import org.apache.commons.math3.ode.sampling.StepHandler;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.apache.commons.math3.ode.sampling.StepNormalizerBounds;
import org.apache.commons.math3.ode.sampling.StepNormalizerMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegrator_ESTest extends AbstractIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(3670.9083013109826, 3670.9083013109826, 3670.9083013109826, 3670.9083013109826);
      dormandPrince853Integrator0.setMaxEvaluations(0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      dormandPrince853Integrator0.clearEventHandlers();
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1112.3856468459066, doubleArray0, Double.NaN, doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          double[] doubleArray0 = new double[0];
          DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(764.71, 3670.9083013109826, doubleArray0, doubleArray0);
          int int0 = 0;
          SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
          doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
          FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
          dormandPrince853Integrator0.clearStepHandlers();
          double double0 = 0.0;
          dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 764.71, doubleArray0);
          SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
          IllinoisSolver illinoisSolver0 = new IllinoisSolver(2452.6);
          ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(186.3399581);
          EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
          doReturn(764.71, (double)0, 3670.9083013109826, 2452.6, 764.71).when(eventHandler0).g(anyDouble() , any(double[].class));
          DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
          threeEighthesIntegrator0.addStepHandler(dummyStepHandler0);
          threeEighthesIntegrator0.addEventHandler(eventHandler0, 186.3399581, 235.28999999999996, 0, (UnivariateSolver) illinoisSolver0);
          ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
          // Undeclared exception!
          threeEighthesIntegrator0.integrate(expandableStatefulODE0, (-1243.118226));
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(764.71, 3670.9083013109826, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, (-283.6531073), doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      dormandPrince853Integrator0.computeDerivatives(1.8380461271305958E74, doubleArray0, doubleArray0);
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 3670.9083013109826, doubleArray0, 3670.9083013109826, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(764.71, 3670.9083013109826, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, (-283.6531073), doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter1, 0.0, doubleArray0, 764.71, doubleArray0);
      dormandPrince853Integrator0.getEvaluations();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(764.71, 3670.9083013109826, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double double0 = (-283.6531073);
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2516.93356778, doubleArray0, 2795.946832409, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      double double1 = 1000.0;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 2516.93356778;
      doubleArray1[1] = (-283.6531073);
      doubleArray1[2] = (-283.6531073);
      doubleArray1[3] = 2795.946832409;
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1000.0, doubleArray0, 2795.946832409, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, 0.0, 0.0);
      graggBulirschStoerIntegrator0.setControlFactors(0.0, 4.94E-321, 1359.78771, 467.91849304213);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      graggBulirschStoerIntegrator0.clearStepHandlers();
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(764.71, 3670.9083013109826, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      dormandPrince853Integrator0.getMaxEvaluations();
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 764.71, doubleArray0, 0.0, doubleArray0);
      FirstOrderConverter firstOrderConverter1 = null;
      try {
        firstOrderConverter1 = new FirstOrderConverter((SecondOrderDifferentialEquations) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.FirstOrderConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(3670.9083013109826);
      double double0 = (-1215.70486296);
      double double1 = 2.2737367544323206E-10;
      double[] doubleArray0 = new double[0];
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(5, (-1215.70486296), 2.2737367544323206E-10, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      try { 
        adamsBashforthIntegrator0.integrate(expandableStatefulODE0, 1983.4202);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one column
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-518.860060969937), 0.0, 702.0, 702.0);
      dormandPrince54Integrator0.setInitialStepSize((-16.42));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0), 0.0, 0.0, (-16.42), (-518.860060969937)).when(eventHandler0).g(anyDouble() , any(double[].class));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2783.0;
      doubleArray0[1] = (-518.860060969937);
      doubleArray0[2] = (-518.860060969937);
      doubleArray0[3] = 702.0;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(46, (-16.42), doubleArray0, doubleArray0);
      highamHall54Integrator0.getOrder();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-518.860060969937));
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(2452.6);
      threeEighthesIntegrator0.addEventHandler(eventHandler0, 2648.4949606808073, (-6.370937412495338E-9), 2182, (UnivariateSolver) illinoisSolver0);
      // Undeclared exception!
      threeEighthesIntegrator0.integrate(expandableStatefulODE0, 2783.0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double double0 = 3670.9083013109826;
      double double1 = 764.71;
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(764.71, 3670.9083013109826, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double double2 = 1.9658551724508715E-9;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1.9658551724508715E-9;
      doubleArray1[1] = 576.20488;
      doubleArray1[2] = 3670.9083013109826;
      doubleArray1[3] = 764.71;
      doubleArray1[4] = 2651.561757566;
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1.9658551724508715E-9, doubleArray0, 576.20488, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double double0 = 3670.9083013109826;
      double double1 = 764.71;
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(764.71, 3670.9083013109826, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, (-283.6531073), doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1955).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      dormandPrince853Integrator0.getEvaluations();
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter1, 576.20488, doubleArray0, 2651.561757566, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 3,910
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double double0 = 3670.9083013109826;
      double double1 = (-2529.0142);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2529.0142);
      doubleArray0[1] = (-2529.0142);
      doubleArray0[2] = (-2529.0142);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2529.0142), 3670.9083013109826, doubleArray0, doubleArray0);
      int int0 = 0;
      dormandPrince54Integrator0.setMaxEvaluations(0);
      dormandPrince54Integrator0.getOrder();
      try { 
        dormandPrince54Integrator0.computeDerivatives((-2529.0142), doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3646.0670757;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1656.015), (-1656.015), doubleArray0, doubleArray0);
      highamHall54Integrator0.getOrder();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(3646.0670757);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, (-1656.015), 3646.0670757).when(eventHandler0).g(anyDouble() , any(double[].class));
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-1656.015));
      threeEighthesIntegrator0.addEventHandler(eventHandler0, (-1963.88076), (-1963.88076), (-2121), (UnivariateSolver) illinoisSolver0);
      try { 
        threeEighthesIntegrator0.integrate(expandableStatefulODE0, (double) 5);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-2,121) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double double0 = 702.0;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-518.860060969937), 0.0, 702.0, 702.0);
      dormandPrince54Integrator0.setInitialStepSize((-16.42));
      int int0 = 46;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-1.2998975819628988E-8), 1811.4114953116, (-518.860060969937)).when(eventHandler0).g(anyDouble() , any(double[].class));
      PegasusSolver pegasusSolver0 = new PegasusSolver((-16.42), 1559.0002552406, 0.0);
      double double1 = 1.2428488853188662E148;
      dormandPrince54Integrator0.addEventHandler(eventHandler0, 1811.4114953116, 1.2428488853188662E148, (-4598), (UnivariateSolver) pegasusSolver0);
      dormandPrince54Integrator0.getStepHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      double double2 = 382.068;
      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2646.0670757, doubleArray0, 382.068, doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-4,598) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3646.0670757;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1656.015), (-1656.015), doubleArray0, doubleArray0);
      highamHall54Integrator0.getOrder();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(3646.0670757);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(3646.0670757, (double)5, 2646.0670757, (-2063.972453603), 6.818588687884566E-9).when(eventHandler0).g(anyDouble() , any(double[].class));
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-1656.015));
      threeEighthesIntegrator0.addEventHandler(eventHandler0, (-3138.934811424), (-3651.704706354), 1315, (UnivariateSolver) illinoisSolver0);
      try { 
        threeEighthesIntegrator0.integrate(expandableStatefulODE0, 3646.0670757);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [\uFFFD, \uFFFD], values: [0, 0]
         //
         verifyException("org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1807.9275175), 2075.3568775659996, (-1807.9275175), 2646.0670757);
      dormandPrince853Integrator0.getStepHandlers();
      double double0 = 579.60128946155;
      dormandPrince853Integrator0.setInitialStepSize(579.60128946155);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2075.3568775659996, doubleArray0, 2075.3568775659996, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 3646.0670757;
      double double1 = 286.0;
      double[] doubleArray1 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(286.0, 3646.0670757, doubleArray0, doubleArray1);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(286.0, 286.0, doubleArray0, doubleArray1);
      double double2 = 4.547473508864641E-10;
      GillIntegrator gillIntegrator0 = new GillIntegrator(4.547473508864641E-10);
      gillIntegrator0.addEventHandler((EventHandler) null, (-1746.0), (-1700.822592), 1426);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      try { 
        gillIntegrator0.integrate(expandableStatefulODE1, 3646.0670757);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double double0 = (-518.860060969937);
      double double1 = 0.0;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-518.860060969937), 0.0, 702.0, 702.0);
      dormandPrince54Integrator0.setInitialStepSize((-16.42));
      int int0 = 46;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      PegasusSolver pegasusSolver0 = new PegasusSolver(5804.48, (-4598), 702.0);
      dormandPrince54Integrator0.addEventHandler(eventHandler0, 2783.0, (double) 46, (-4598), (UnivariateSolver) pegasusSolver0);
      int int1 = (-2759);
      dormandPrince54Integrator0.getStepHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-3816.9836625), doubleArray0, (-2257.9834072594), doubleArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double double0 = 3646.0670757;
      double double1 = 1825.597;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(3646.0670757, 4.547473508864641E-10, 1825.597, 477.4);
      dormandPrince853Integrator0.getEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 3646.0670757, doubleArray1, 1000.0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double double0 = 3670.9083013109826;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3670.9083013109826;
      doubleArray0[2] = 1883.25379061;
      doubleArray0[2] = 1559.0002552406;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(3541.941179, 1883.25379061, doubleArray0, doubleArray0);
      FirstOrderDifferentialEquations firstOrderDifferentialEquations0 = null;
      double double1 = 2646.0670757;
      // Undeclared exception!
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) null, 2646.0670757, doubleArray0, (-2961.089848934), doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double double0 = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.clearEventHandlers();
      double double1 = 1302.11682396432;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 0.0, (double) 442, 442);
      graggBulirschStoerIntegrator0.setOrderControl(442, 0.0, 1302.11682396432);
      graggBulirschStoerIntegrator0.clearStepHandlers();
      graggBulirschStoerIntegrator0.getEventHandlers();
      graggBulirschStoerIntegrator0.getEvaluations();
      graggBulirschStoerIntegrator0.setControlFactors(2745.38906406, 0.0, (-2839.4756), 1302.11682396432);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(442).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (-2839.4756));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 884 != 4
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 3646.0670757;
      doubleArray0[1] = (-2056.186);
      doubleArray0[2] = (-2056.186);
      doubleArray0[3] = (-2056.186);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2056.186), (-2056.186), doubleArray0, doubleArray0);
      dormandPrince54Integrator0.setInitialStepSize((-710.74667174));
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(1.2288203239440918);
      dormandPrince54Integrator0.getCurrentSignedStepsize();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2.6993478083348727E-303);
      doubleArray0[1] = (-4.544868396511241E-8);
      doubleArray0[2] = (-2.6993478083348727E-303);
      doubleArray0[3] = (-2.6993478083348727E-303);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-4.544868396511241E-8), (-2.6993478083348727E-303), doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getOrder();
      dormandPrince853Integrator0.getCurrentSignedStepsize();
      dormandPrince853Integrator0.setInitialStepSize(482.635372325);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.LAST;
      StepNormalizer stepNormalizer0 = new StepNormalizer(3670.9083013109826, fixedStepHandler0, stepNormalizerBounds0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(4.547473508864641E-10, 394.575, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      dormandPrince853Integrator0.getEvaluations();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator1 = new GraggBulirschStoerIntegrator((-276.21114), (-2763.514833), (-2.6993478083348727E-303), (-2.6993478083348727E-303));
      graggBulirschStoerIntegrator1.getCurrentSignedStepsize();
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-2443.356743571), 0.0, 4.547473508864641E-10, 1.0);
      highamHall54Integrator0.getOrder();
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-8.56750607048), 873.678191572755, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.getOrder();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3646.0670757;
      doubleArray0[1] = (-2056.186);
      doubleArray0[2] = (-2056.186);
      doubleArray0[3] = (-2056.186);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2056.186), (-2056.186), doubleArray0, doubleArray0);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-2056.186), 0.30545274794128174, doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      highamHall54Integrator0.clearStepHandlers();
      highamHall54Integrator0.addEventHandler(eventHandler0, 0.0, (-2056.186), 519);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 0.30545274794128174;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (double) 519;
      doubleArray1[3] = 426.29157;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(426.29157, 3646.0670757, doubleArray1, doubleArray0);
      boolean boolean0 = false;
      graggBulirschStoerIntegrator0.getEventHandlers();
      int int0 = 163;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double double0 = (-4316.935);
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-2056.186), doubleArray1, (-4316.935), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3646.0670757;
      doubleArray0[1] = (-2056.186);
      doubleArray0[2] = (-2056.186);
      doubleArray0[3] = (-2056.186);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2056.186), (-2056.186), doubleArray0, doubleArray0);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-2056.186), 0.30545274794128174, doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      GillIntegrator gillIntegrator0 = new GillIntegrator(2025);
      gillIntegrator0.clearEventHandlers();
      GillIntegrator gillIntegrator1 = new GillIntegrator(0.30545274794128174);
      gillIntegrator1.getEventHandlers();
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      gillIntegrator0.addEventHandler(eventHandler1, 1.1050280679513555E-116, 3646.0670757, 2147483645, (UnivariateSolver) null);
      highamHall54Integrator0.getOrder();
      EventHandler eventHandler2 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double0 = (-3985.0);
      gillIntegrator0.getMaxEvaluations();
      gillIntegrator0.clearEventHandlers();
      gillIntegrator0.getEventHandlers();
      gillIntegrator1.clearEventHandlers();
      EventHandler eventHandler3 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler3).g(anyDouble() , any(double[].class));
      gillIntegrator0.addEventHandler(eventHandler3, 1147.6429, (-3985.0), 2147483645);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      gillIntegrator0.integrate(expandableStatefulODE0, 679.13);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3646.0670757;
      doubleArray0[1] = (-2056.186);
      doubleArray0[2] = (-2056.186);
      doubleArray0[3] = (-2056.186);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2056.186), (-2056.186), doubleArray0, doubleArray0);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-2056.186), 0.30545274794128174, doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      highamHall54Integrator0.clearStepHandlers();
      highamHall54Integrator0.addEventHandler(eventHandler0, 0.0, (-2056.186), 519);
      highamHall54Integrator0.clearEventHandlers();
      highamHall54Integrator0.clearEventHandlers();
      highamHall54Integrator0.setStepSizeControl((-2056.186), (-2056.186), doubleArray0, doubleArray0);
      highamHall54Integrator0.setMaxGrowth((-2056.186));
      highamHall54Integrator0.setMaxEvaluations((-619));
      highamHall54Integrator0.getOrder();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(4428).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      dormandPrince54Integrator0.getEventHandlers();
      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-2056.186), doubleArray0, 0.30545274794128174, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 8,856
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(2038.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      gillIntegrator0.addEventHandler((EventHandler) null, 1690.5, (-3550.725643834488), 2025, (UnivariateSolver) null);
      gillIntegrator0.clearEventHandlers();
      gillIntegrator0.getEventHandlers();
      gillIntegrator0.addEventHandler(eventHandler0, (-3323.408), 0.0, 0, (UnivariateSolver) null);
      gillIntegrator0.getMaxEvaluations();
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      gillIntegrator0.addEventHandler(eventHandler1, 0.0, 0.0, 1050, (UnivariateSolver) null);
      int int0 = gillIntegrator0.getMaxEvaluations();
      assertEquals(Integer.MAX_VALUE, int0);
      
      gillIntegrator0.clearEventHandlers();
      Collection<EventHandler> collection0 = gillIntegrator0.getEventHandlers();
      assertFalse(collection0.contains(eventHandler0));
      
      gillIntegrator0.clearEventHandlers();
      EventHandler eventHandler2 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      gillIntegrator0.addEventHandler(eventHandler2, Double.NaN, (-3323.408), 1050);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1699.2208471656784);
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-1699.2208471656784);
      doubleArray1[1] = (-2886.99733);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-1699.2208471656784);
      doubleArray1[5] = 0.0;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 0.0, doubleArray0, doubleArray1);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        highamHall54Integrator0.integrate(expandableStatefulODE0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 2
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-518.860060969937), 0.0, 702.0, 702.0);
      dormandPrince54Integrator0.setInitialStepSize((-16.42));
      int int0 = 46;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      PegasusSolver pegasusSolver0 = new PegasusSolver(5804.48, (-4598), 702.0);
      dormandPrince54Integrator0.addEventHandler(eventHandler0, 2783.0, (double) 46, (-4598), (UnivariateSolver) pegasusSolver0);
      dormandPrince54Integrator0.getStepHandlers();
      dormandPrince54Integrator0.setMaxEvaluations((-2759));
      dormandPrince54Integrator0.setSafety(0.0);
      double[] doubleArray0 = new double[0];
      dormandPrince54Integrator0.setMinReduction(0.0);
      // Undeclared exception!
      try { 
        dormandPrince54Integrator0.computeDerivatives((-518.860060969937), doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3646.0670757;
      doubleArray0[1] = (-2056.186);
      doubleArray0[2] = (-2056.186);
      doubleArray0[3] = (-2056.186);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2056.186), (-2056.186), doubleArray0, doubleArray0);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-2056.186), 0.30545274794128174, doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      highamHall54Integrator0.clearStepHandlers();
      highamHall54Integrator0.addEventHandler(eventHandler0, 0.0, (-2056.186), 519);
      highamHall54Integrator0.clearEventHandlers();
      highamHall54Integrator0.clearEventHandlers();
      highamHall54Integrator0.setStepSizeControl((-2056.186), (-2056.186), doubleArray0, doubleArray0);
      highamHall54Integrator0.setMaxGrowth((-2056.186));
      highamHall54Integrator0.setMaxEvaluations((-619));
      highamHall54Integrator0.getOrder();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      dormandPrince54Integrator0.getEventHandlers();
      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-2056.186), doubleArray0, 0.30545274794128174, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double double0 = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, 0.0, 0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 0.0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1390.81181907208);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-1390.81181907208);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, doubleArray0, doubleArray1);
      dormandPrince853Integrator0.getEventHandlers();
      dormandPrince853Integrator0.getEvaluations();
      dormandPrince853Integrator0.getEventHandlers();
      dormandPrince853Integrator0.getEvaluations();
      dormandPrince853Integrator0.getName();
      dormandPrince853Integrator0.setMaxEvaluations(0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0, 2.4, 0.0, 0.0);
      graggBulirschStoerIntegrator0.setControlFactors(0, 0.3111643669578199, 4232.0, (-1.0));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      dormandPrince853Integrator0.addEventHandler(eventHandler0, 1343.989317954, Double.NaN, 1);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(0.0);
      gillIntegrator0.getEventHandlers();
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      DummyStepHandler.getInstance();
      DummyStepHandler.getInstance();
      gillIntegrator0.addStepHandler(dummyStepHandler0);
      gillIntegrator0.setMaxEvaluations(183);
      gillIntegrator0.getEventHandlers();
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 0.0, 5360.44779137, 0.7777777777777778);
      dormandPrince54Integrator0.getOrder();
      dormandPrince54Integrator0.getStepHandlers();
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 183;
      doubleArray1[1] = 2.2404374302607883;
      doubleArray1[2] = (double) 183;
      doubleArray1[3] = 0.7777777777777778;
      doubleArray1[4] = 0.7777777777777778;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(5, 5360.44779137, doubleArray0, doubleArray1);
      graggBulirschStoerIntegrator0.setStabilityCheck(false, 5, 142, 1.0);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
      threeEighthesIntegrator0.getEventHandlers();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1708.9485016977123;
      // Undeclared exception!
      try { 
        threeEighthesIntegrator0.computeDerivatives(1708.9485016977123, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 1.0;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 1.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1.0, 1.0, doubleArray0, doubleArray1);
      boolean boolean0 = false;
      int int0 = 163;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-629.2598), doubleArray0, 1.0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(5, 1000.0, 1581.0, 1581.0, (-9.147934308113573));
      adamsMoultonIntegrator0.clearStepHandlers();
      adamsMoultonIntegrator0.setMaxEvaluations(0);
      adamsMoultonIntegrator0.getEvaluations();
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.NEITHER;
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.0, fixedStepHandler0, stepNormalizerMode0, stepNormalizerBounds0);
      adamsMoultonIntegrator0.addStepHandler(stepNormalizer0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-9.147934308113573);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-9.147934308113573);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 1581.0;
      doubleArray0[6] = (-9.147934308113573);
      doubleArray0[7] = (double) 5;
      doubleArray0[8] = (double) 0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0, 1000.0, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setOrderControl(149, (-887.41677103625), (-0.5));
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.clearEventHandlers();
      int int0 = 442;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 0.0, (double) 442, 442);
      graggBulirschStoerIntegrator0.setOrderControl(442, 0.0, 1302.11682396432);
      graggBulirschStoerIntegrator0.clearStepHandlers();
      graggBulirschStoerIntegrator0.getEvaluations();
      graggBulirschStoerIntegrator0.setControlFactors(2745.38906406, 0.0, (-2839.4756), 1302.11682396432);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (-2839.4756));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 4
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1141.82951066);
      doubleArray0[4] = (-167.159);
      doubleArray0[5] = (-167.159);
      doubleArray0[6] = (-167.159);
      doubleArray0[7] = (-167.159);
      doubleArray0[8] = (-167.159);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, (-167.159), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.addStepHandler((StepHandler) null);
      double double0 = graggBulirschStoerIntegrator0.getCurrentStepStart();
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(1000.0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1000.0;
      doubleArray0[1] = 1000.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1000.0, 1000.0, doubleArray0, doubleArray0);
      boolean boolean0 = true;
      int int0 = 963;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 1000.0, 1756.6309863826, 164);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.0, fixedStepHandler0);
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      // Undeclared exception!
      try { 
        stepNormalizer0.handleStep(nordsieckStepInterpolator0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(152.0, (-1.0), (-1.0), 0.022651792198360825);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double0 = (-3250.546);
      dormandPrince853Integrator0.addEventHandler(eventHandler0, (-3250.546), (-3250.546), 1115);
      dormandPrince853Integrator0.setMaxEvaluations(5980);
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      PegasusSolver pegasusSolver0 = new PegasusSolver((-2145.10706278), 152.0);
      pegasusSolver0.getMaxEvaluations();
      pegasusSolver0.getMaxEvaluations();
      dormandPrince853Integrator0.addEventHandler(eventHandler1, (double) 5980, 152.0, Integer.MAX_VALUE, (UnivariateSolver) pegasusSolver0);
      double[] doubleArray0 = null;
      HighamHall54Integrator highamHall54Integrator0 = null;
      try {
        highamHall54Integrator0 = new HighamHall54Integrator((-1.0), 1115, (double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 85.574995;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 682.839;
      doubleArray1[3] = (-3259.8562711123595);
      doubleArray1[4] = 85.574995;
      doubleArray1[5] = (-3259.8562711123595);
      doubleArray1[6] = 85.574995;
      doubleArray1[7] = (-3259.8562711123595);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(85.574995, (-3259.8562711123595), doubleArray0, doubleArray1);
      dormandPrince54Integrator0.setMaxEvaluations(0);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double double0 = 1.0;
      double double1 = (-1.8379759110070617);
      double double2 = 671.589;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1.0, (-1.8379759110070617), 0.0, 671.589);
      dormandPrince853Integrator0.getEvaluations();
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = null;
      try {
        adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(0, 1.0, 1.0, 0, (-1.8379759110070617));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // multistep method needs at least 0 previous steps, got 2
         //
         verifyException("org.apache.commons.math3.ode.MultistepIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(3670.9083013109826);
      double double0 = midpointIntegrator0.getCurrentStepStart();
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-0.08899033645133331));
      classicalRungeKuttaIntegrator0.getCurrentStepStart();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double0 = (-1695.19426279237);
      int int0 = (-1951);
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      int int1 = 0;
      Gaussian gaussian0 = new Gaussian();
      AllowedSolution allowedSolution0 = AllowedSolution.RIGHT_SIDE;
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(0, (UnivariateFunction) gaussian0, 1.0, 0.0, allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1390.81181907208);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-1390.81181907208);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, doubleArray0, doubleArray1);
      dormandPrince853Integrator0.getEventHandlers();
      dormandPrince853Integrator0.getEvaluations();
      dormandPrince853Integrator0.getEventHandlers();
      dormandPrince853Integrator0.getEvaluations();
      dormandPrince853Integrator0.getName();
      dormandPrince853Integrator0.setMaxEvaluations(0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0, 2.4, 0.0, 0.0);
      GillIntegrator gillIntegrator0 = new GillIntegrator(751.3);
      int int0 = gillIntegrator0.getMaxEvaluations();
      assertEquals(Integer.MAX_VALUE, int0);
      
      gillIntegrator0.clearEventHandlers();
      gillIntegrator0.getEventHandlers();
      gillIntegrator0.clearEventHandlers();
      gillIntegrator0.addEventHandler((EventHandler) null, 0.0, (-1390.81181907208), (-2388));
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(764.71, 3670.9083013109826, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.setMinReduction(764.71);
      dormandPrince853Integrator0.clearStepHandlers();
      int int0 = dormandPrince853Integrator0.getEvaluations();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double double0 = 1000.0;
      double double1 = 2063.8833099567905;
      double double2 = (-0.4831900357003607);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1000.0, 1000.0, 2063.8833099567905, (-0.4831900357003607));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      int int0 = (-1602);
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-0.4831900357003607), (-1602), 1000.0);
      graggBulirschStoerIntegrator0.clearStepHandlers();
      graggBulirschStoerIntegrator0.clearEventHandlers();
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (-0.4831900357003607), 1000.0, (-1602), (UnivariateSolver) regulaFalsiSolver0);
      graggBulirschStoerIntegrator0.clearStepHandlers();
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      int int1 = 0;
      Asin asin0 = new Asin();
      DerivativeStructure derivativeStructure0 = null;
      try {
        derivativeStructure0 = new DerivativeStructure(0, (-1602));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1602
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DSCompiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 1.0;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 1.0;
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(0.3471571207046509);
      classicalRungeKuttaIntegrator0.getMaxEvaluations();
      // Undeclared exception!
      try { 
        classicalRungeKuttaIntegrator0.computeDerivatives(2128.99, doubleArray0, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(628.48455413);
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      DummyStepHandler.getInstance();
      DummyStepHandler.getInstance();
      DummyStepHandler.getInstance();
      DummyStepHandler.getInstance();
      threeEighthesIntegrator0.addStepHandler(dummyStepHandler0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, 628.48455413, 628.48455413);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 628.48455413;
      doubleArray0[1] = 628.48455413;
      doubleArray0[2] = (double) 3607;
      doubleArray0[3] = (double) 3607;
      doubleArray0[4] = (double) 3607;
      doubleArray0[5] = 628.48455413;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (double) 3607;
      doubleArray0[8] = 0.0;
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.initializeStep(true, 3607, doubleArray0, 896.2563871128, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double double0 = (-10.15626);
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-10.15626));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-10.15626);
      doubleArray0[1] = (-10.15626);
      doubleArray0[2] = (-10.15626);
      // Undeclared exception!
      try { 
        classicalRungeKuttaIntegrator0.computeDerivatives((-10.15626), doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-6817.3);
      doubleArray0[1] = (-6817.3);
      doubleArray0[2] = (double) 378;
      doubleArray0[3] = (double) 378;
      doubleArray0[4] = (double) 378;
      doubleArray0[5] = (-6817.3);
      doubleArray0[6] = (double) 378;
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(378, 378, (-6817.3), doubleArray0, doubleArray0);
  }
}
