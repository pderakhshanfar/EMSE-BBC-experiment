/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 01:04:32 GMT 2021
 */

package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.math3.analysis.function.Logit;
import org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver;
import org.apache.commons.math3.analysis.solvers.BrentSolver;
import org.apache.commons.math3.analysis.solvers.MullerSolver;
import org.apache.commons.math3.analysis.solvers.PegasusSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator;
import org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.EulerIntegrator;
import org.apache.commons.math3.ode.nonstiff.GillIntegrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.nonstiff.MidpointIntegrator;
import org.apache.commons.math3.ode.sampling.DummyStepHandler;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.apache.commons.math3.ode.sampling.StepNormalizerBounds;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegrator_ESTest extends AbstractIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1468.146));
      gillIntegrator0.setMaxEvaluations(0);
      gillIntegrator0.getCurrentStepStart();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double double0 = 0.0;
      GillIntegrator gillIntegrator0 = new GillIntegrator(0.0);
      int int0 = 1957;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1957).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      gillIntegrator0.getCurrentStepStart();
      // Undeclared exception!
      gillIntegrator0.integrate(expandableStatefulODE0, 0.0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      GillIntegrator gillIntegrator0 = new GillIntegrator(3954.217);
      gillIntegrator0.getEventHandlers();
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(3954.217);
      classicalRungeKuttaIntegrator0.setMaxEvaluations(5198);
      classicalRungeKuttaIntegrator0.clearStepHandlers();
      classicalRungeKuttaIntegrator0.setMaxEvaluations(605);
      classicalRungeKuttaIntegrator0.clearEventHandlers();
      DummyStepHandler.getInstance();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1630.985, 2510.961486718, 3657.878, 1.0327515602111816);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter1, 4.547473508864641E-10, doubleArray0, 1239.01376, doubleArray0);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1239.01376, 3.3554432E10, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.getOrder();
      dormandPrince853Integrator0.getCurrentStepStart();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1.0));
      gillIntegrator0.clearStepHandlers();
      gillIntegrator0.getEventHandlers();
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(0);
      classicalRungeKuttaIntegrator0.setMaxEvaluations(5198);
      classicalRungeKuttaIntegrator0.clearStepHandlers();
      classicalRungeKuttaIntegrator0.setMaxEvaluations((-4443));
      classicalRungeKuttaIntegrator0.clearEventHandlers();
      DummyStepHandler.getInstance();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1239.01376, 1239.01376, 0.0, (-800.439565182856));
      double[] doubleArray0 = new double[0];
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) 0, doubleArray0, (-1.0), doubleArray0);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(5.6843418860808015E-11, 287.4, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.getOrder();
      dormandPrince853Integrator0.getCurrentStepStart();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, (-1262.676170792), doubleArray0, doubleArray0);
      GillIntegrator gillIntegrator0 = new GillIntegrator(5197.999999999944);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      gillIntegrator0.addEventHandler(eventHandler0, 0.0, (-1262.676170792), (-1), (UnivariateSolver) null);
      gillIntegrator0.getEvaluations();
      gillIntegrator0.clearStepHandlers();
      gillIntegrator0.getEventHandlers();
      FirstOrderConverter firstOrderConverter0 = null;
      try {
        firstOrderConverter0 = new FirstOrderConverter((SecondOrderDifferentialEquations) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.FirstOrderConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1207.3);
      doubleArray0[1] = 1743.378559635798;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1207.3), 1743.378559635798, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 1743.378559635798);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 2
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1132.270217357), (-1132.270217357), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 3242);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(3242, (-765.238798715), doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      MullerSolver mullerSolver0 = new MullerSolver((-1132.270217357));
      dormandPrince853Integrator0.addEventHandler(eventHandler0, (-765.238798715), (-1132.270217357), (-490), (UnivariateSolver) mullerSolver0);
      dormandPrince853Integrator0.clearEventHandlers();
      dormandPrince853Integrator0.getStepHandlers();
      dormandPrince853Integrator0.getOrder();
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler1, (-1132.270217357), (double) 3242, (-519), (UnivariateSolver) mullerSolver0);
      graggBulirschStoerIntegrator0.setStabilityCheck(false, 1050, 1391, 1050);
      graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
      graggBulirschStoerIntegrator0.getMaxEvaluations();
      graggBulirschStoerIntegrator0.setStabilityCheck(false, 1770, 0, 1391);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer0 = new StepNormalizer((-490), fixedStepHandler0);
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1.0));
      gillIntegrator0.clearStepHandlers();
      gillIntegrator0.getEventHandlers();
      int int0 = 0;
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(0);
      classicalRungeKuttaIntegrator0.setMaxEvaluations(5198);
      classicalRungeKuttaIntegrator0.clearStepHandlers();
      classicalRungeKuttaIntegrator0.setMaxEvaluations((-4443));
      classicalRungeKuttaIntegrator0.clearEventHandlers();
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      classicalRungeKuttaIntegrator0.addStepHandler(dummyStepHandler0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-266.08), (double)0).when(eventHandler0).g(anyDouble() , any(double[].class));
      PegasusSolver pegasusSolver0 = new PegasusSolver((-1.0));
      classicalRungeKuttaIntegrator0.addEventHandler(eventHandler0, (-800.439565182856), (-3243.590465677738), 0, (UnivariateSolver) pegasusSolver0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        classicalRungeKuttaIntegrator0.integrate(expandableStatefulODE0, (double) 5198);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1.0));
      gillIntegrator0.clearStepHandlers();
      GillIntegrator gillIntegrator1 = new GillIntegrator((-1.0));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime((-1.0));
      gillIntegrator1.integrate(expandableStatefulODE0, 1000.0);
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1000.0, 1413.9542417244893, doubleArray0, doubleArray0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.NEITHER;
      StepNormalizer stepNormalizer0 = new StepNormalizer((-1.0), fixedStepHandler0, stepNormalizerBounds0);
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(3091.4383);
      // Undeclared exception!
      try { 
        gillIntegrator0.integrate((ExpandableStatefulODE) null, (-1265.9804705));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1.0));
      gillIntegrator0.clearStepHandlers();
      gillIntegrator0.getEventHandlers();
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(0);
      classicalRungeKuttaIntegrator0.setMaxEvaluations(5198);
      classicalRungeKuttaIntegrator0.clearStepHandlers();
      classicalRungeKuttaIntegrator0.setMaxEvaluations((-4443));
      classicalRungeKuttaIntegrator0.clearEventHandlers();
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      classicalRungeKuttaIntegrator0.addStepHandler(dummyStepHandler0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(185).when(secondOrderDifferentialEquations0).getDimension();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-245.245690659), (-1.0), (double)(-4443), (double)0, (-1642.1408138869472)).when(eventHandler0).g(anyDouble() , any(double[].class));
      PegasusSolver pegasusSolver0 = new PegasusSolver((-1.0));
      classicalRungeKuttaIntegrator0.addEventHandler(eventHandler0, (-800.439565182856), (-3243.590465677738), 469, (UnivariateSolver) pegasusSolver0);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        classicalRungeKuttaIntegrator0.integrate(expandableStatefulODE0, (double) 5198);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [\uFFFD, \uFFFD], values: [-1,642.141, -1,642.141]
         //
         verifyException("org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          GillIntegrator gillIntegrator0 = new GillIntegrator((-1.0));
          gillIntegrator0.clearStepHandlers();
          gillIntegrator0.getEventHandlers();
          ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(0);
          classicalRungeKuttaIntegrator0.setMaxEvaluations(5198);
          classicalRungeKuttaIntegrator0.clearStepHandlers();
          classicalRungeKuttaIntegrator0.setMaxEvaluations((-4443));
          classicalRungeKuttaIntegrator0.clearEventHandlers();
          DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
          classicalRungeKuttaIntegrator0.addStepHandler(dummyStepHandler0);
          SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
          doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
          EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
          doReturn((-266.08), (double)0, (double)(-4443), 52.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
          PegasusSolver pegasusSolver0 = new PegasusSolver((-1.0));
          classicalRungeKuttaIntegrator0.addEventHandler(eventHandler0, (-800.439565182856), (-3243.590465677738), 469, (UnivariateSolver) pegasusSolver0);
          FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
          ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
          // Undeclared exception!
          classicalRungeKuttaIntegrator0.integrate(expandableStatefulODE0, (double) 5198);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double double0 = (-1468.146);
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1.0));
      gillIntegrator0.clearStepHandlers();
      gillIntegrator0.getEventHandlers();
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(3657.878);
      classicalRungeKuttaIntegrator0.setMaxEvaluations(0);
      classicalRungeKuttaIntegrator0.clearStepHandlers();
      classicalRungeKuttaIntegrator0.setMaxEvaluations(5);
      classicalRungeKuttaIntegrator0.clearEventHandlers();
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      classicalRungeKuttaIntegrator0.addStepHandler(dummyStepHandler0);
      PegasusSolver pegasusSolver0 = new PegasusSolver(0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      MullerSolver mullerSolver0 = new MullerSolver(854.363, (-1.0));
      classicalRungeKuttaIntegrator0.addEventHandler(eventHandler0, (-1.0), (double) 0, 8, (UnivariateSolver) mullerSolver0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter1);
      try { 
        classicalRungeKuttaIntegrator0.integrate(expandableStatefulODE0, (-1063.54254));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (5) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, (-1262.676170792), doubleArray0, doubleArray0);
      dormandPrince54Integrator0.setMinReduction((-1262.676170792));
      double double0 = 0.0;
      double[] doubleArray1 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, doubleArray1, doubleArray0);
      graggBulirschStoerIntegrator0.getEvaluations();
      graggBulirschStoerIntegrator0.setMaxEvaluations(0);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-3108.247756133038), (-1095.871), doubleArray0, doubleArray0);
      double double1 = (-1.0);
      dormandPrince853Integrator0.setInitialStepSize((-2665.237587224511));
      dormandPrince853Integrator0.setInitialStepSize(0);
      dormandPrince853Integrator0.getOrder();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double double2 = (-2628.093595727032);
      // Undeclared exception!
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 3657.878, doubleArray0, 0.0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1.0));
      gillIntegrator0.clearStepHandlers();
      gillIntegrator0.getEventHandlers();
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(0);
      classicalRungeKuttaIntegrator0.setMaxEvaluations(5198);
      classicalRungeKuttaIntegrator0.clearStepHandlers();
      classicalRungeKuttaIntegrator0.setMaxEvaluations((-4443));
      classicalRungeKuttaIntegrator0.clearEventHandlers();
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      classicalRungeKuttaIntegrator0.addStepHandler(dummyStepHandler0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      PegasusSolver pegasusSolver0 = new PegasusSolver((-1.0));
      classicalRungeKuttaIntegrator0.addEventHandler(eventHandler0, (-800.439565182856), (-3243.590465677738), 469, (UnivariateSolver) pegasusSolver0);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      classicalRungeKuttaIntegrator0.integrate(expandableStatefulODE0, (double) 5198);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, (-1262.676170792), doubleArray0, doubleArray0);
      dormandPrince54Integrator0.setMinReduction((-1262.676170792));
      double[] doubleArray1 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, doubleArray1, doubleArray0);
      graggBulirschStoerIntegrator0.getEvaluations();
      graggBulirschStoerIntegrator0.setMaxEvaluations(0);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-3108.247756133038), (-1095.871), doubleArray0, doubleArray0);
      dormandPrince853Integrator0.setInitialStepSize((-2665.237587224511));
      dormandPrince853Integrator0.getOrder();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (-1.0);
      doubleArray2[1] = 707.5044335;
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1035.9), doubleArray0, 0.0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[3] = (-584.7057123);
      doubleArray0[5] = 0.8;
      doubleArray0[6] = (-584.7057123);
      doubleArray0[8] = (-584.7057123);
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(5, 1175.98494, (-584.7057123), doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 5;
      doubleArray1[1] = (-584.7057123);
      doubleArray1[2] = (-584.7057123);
      doubleArray1[3] = 0.8;
      doubleArray1[4] = 1175.98494;
      doubleArray1[5] = 1175.98494;
      doubleArray1[6] = (double) 5;
      doubleArray1[7] = (double) 5;
      doubleArray1[8] = (double) 5;
      adamsMoultonIntegrator0.setStepSizeControl((-4919.4), (-584.7057123), doubleArray1, doubleArray1);
      double[] doubleArray2 = new double[5];
      doubleArray2[0] = 1175.98494;
      doubleArray2[1] = (-584.7057123);
      doubleArray2[2] = (-584.7057123);
      doubleArray2[3] = (-584.7057123);
      doubleArray2[4] = (double) 5;
      // Undeclared exception!
      try { 
        adamsMoultonIntegrator0.integrate((FirstOrderDifferentialEquations) null, 1175.98494, doubleArray2, (-584.7057123), doubleArray2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double double0 = 0.0;
      double[] doubleArray0 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, (-1262.676170792), doubleArray0, doubleArray0);
      dormandPrince54Integrator0.setMinReduction((-1262.676170792));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(2599).when(secondOrderDifferentialEquations0).getDimension();
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1095.871), (-1262.676170792), doubleArray0, doubleArray0);
      dormandPrince853Integrator0.setInitialStepSize(0.0);
      dormandPrince853Integrator0.getOrder();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1521.7, doubleArray0, (-2.9988278531841556E-102), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 5,198
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double double0 = (-280.46);
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-280.46));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      PegasusSolver pegasusSolver0 = new PegasusSolver((-280.46), (-280.46));
      classicalRungeKuttaIntegrator0.addEventHandler(eventHandler1, 0.0, (-280.46), (-1416), (UnivariateSolver) pegasusSolver0);
      double double1 = 737.25944993;
      double double2 = 3433.13093907278;
      int int0 = (-309);
      BrentSolver brentSolver0 = new BrentSolver();
      Logit logit0 = new Logit();
      try { 
        logit0.value((-0.022355307863886294));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -0.022 out of [0, 1] range
         //
         verifyException("org.apache.commons.math3.analysis.function.Logit", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double double0 = 0.0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-174.72401488);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-174.72401488);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-174.72401488);
      doubleArray1[2] = (-174.72401488);
      doubleArray1[3] = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-174.72401488), 0.0, doubleArray0, doubleArray1);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, (-174.72401488), doubleArray1, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-174.72401488), doubleArray0, (-4931.55407090982), doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-0.9371424300859873), (-0.9371424300859873), (-0.9371424300859873), 5978.0);
      graggBulirschStoerIntegrator0.setOrderControl(0, 0, 0);
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      DummyStepHandler.getInstance();
      DummyStepHandler.getInstance();
      graggBulirschStoerIntegrator0.addStepHandler(dummyStepHandler0);
      graggBulirschStoerIntegrator0.getEvaluations();
      graggBulirschStoerIntegrator0.setMaxEvaluations(0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(730.6, (-1095.871), doubleArray0, doubleArray0);
      dormandPrince853Integrator0.setInitialStepSize((-1.0));
      dormandPrince853Integrator0.getOrder();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-2628.093595727032), doubleArray0, (double) 8, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, (-1262.676170792), doubleArray0, doubleArray0);
      dormandPrince54Integrator0.setMinReduction((-1262.676170792));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      dormandPrince54Integrator0.integrate(expandableStatefulODE0, (-1262.676170792));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(0.0);
      classicalRungeKuttaIntegrator0.setMaxEvaluations(0);
      classicalRungeKuttaIntegrator0.clearStepHandlers();
      classicalRungeKuttaIntegrator0.setMaxEvaluations((-4443));
      classicalRungeKuttaIntegrator0.clearEventHandlers();
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      classicalRungeKuttaIntegrator0.addStepHandler(dummyStepHandler0);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0, (-4443), 0.0, 0.0);
      dormandPrince54Integrator0.setStepSizeControl((double) (-4443), (-2.148245271118002E-8), 2188.507811, 0.0);
      dormandPrince54Integrator0.getCurrentSignedStepsize();
      dormandPrince54Integrator0.getName();
      DormandPrince54Integrator dormandPrince54Integrator1 = new DormandPrince54Integrator(0.0, 0.0, 0.0, 0.0);
      double double0 = dormandPrince54Integrator1.getCurrentSignedStepsize();
      assertEquals(0.0, double0, 0.01);
      
      dormandPrince54Integrator0.getName();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 780.14126, 0.0, (-2.148245271118002E-8));
      graggBulirschStoerIntegrator0.setInterpolationControl(false, (-4443));
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(0.0);
      classicalRungeKuttaIntegrator0.setMaxEvaluations(0);
      classicalRungeKuttaIntegrator0.clearStepHandlers();
      classicalRungeKuttaIntegrator0.setMaxEvaluations((-4443));
      classicalRungeKuttaIntegrator0.clearEventHandlers();
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      classicalRungeKuttaIntegrator0.addStepHandler(dummyStepHandler0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      classicalRungeKuttaIntegrator0.integrate(expandableStatefulODE0, (double) 0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-0.9371424300859873), (-0.9371424300859873), (-0.9371424300859873), 5978.0);
      graggBulirschStoerIntegrator0.setOrderControl(0, 0, 0);
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      DummyStepHandler.getInstance();
      DummyStepHandler.getInstance();
      graggBulirschStoerIntegrator0.addStepHandler(dummyStepHandler0);
      graggBulirschStoerIntegrator0.getEvaluations();
      graggBulirschStoerIntegrator0.setMaxEvaluations(0);
      GillIntegrator gillIntegrator0 = new GillIntegrator(0);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double double0 = 940.6493075851223;
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(940.6493075851223);
      eulerIntegrator0.getMaxEvaluations();
      double double1 = (-1027.2143907447);
      double double2 = (-96.25733702890761);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1523.9081, (-1027.2143907447), 940.6493075851223, (-96.25733702890761));
      double double3 = (-1.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver((-3538.0), 122);
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 0.0, 1482.2133, 66, (UnivariateSolver) bracketingNthOrderBrentSolver0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer0 = new StepNormalizer((-1.0), fixedStepHandler0);
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      double double4 = (-461.636886758);
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.integrate((ExpandableStatefulODE) null, (-461.636886758));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1468.146));
      double[] doubleArray0 = new double[5];
      gillIntegrator0.getStepHandlers();
      doubleArray0[0] = 516.0;
      doubleArray0[1] = (-1468.146);
      doubleArray0[2] = (-1468.146);
      doubleArray0[3] = 516.0;
      doubleArray0[4] = 516.0;
      // Undeclared exception!
      try { 
        gillIntegrator0.computeDerivatives(516.0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3702.3128), 1354.11, (-402.35478048521), (-402.35478048521));
      double double0 = 0.0;
      highamHall54Integrator0.getStepHandlers();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1354.11;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-402.35478048521);
      doubleArray0[3] = (-402.35478048521);
      doubleArray0[4] = (-3702.3128);
      // Undeclared exception!
      try { 
        highamHall54Integrator0.initializeStep(false, 0, doubleArray0, (-2484.52585308565), doubleArray0, doubleArray0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double double0 = 0.0;
      double[] doubleArray0 = new double[4];
      double double1 = 0.0;
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getName();
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      dormandPrince853Integrator0.addStepHandler(dummyStepHandler0);
      dormandPrince853Integrator0.setInitialStepSize(0.0);
      dormandPrince853Integrator0.setMaxGrowth(1737.9);
      dormandPrince853Integrator0.setStepSizeControl(0.0, 0.0, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getMaxEvaluations();
      // Undeclared exception!
      try { 
        dormandPrince853Integrator0.computeDerivatives(2996.59307896, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(0);
      classicalRungeKuttaIntegrator0.setMaxEvaluations(5198);
      classicalRungeKuttaIntegrator0.clearStepHandlers();
      classicalRungeKuttaIntegrator0.setMaxEvaluations((-4423));
      classicalRungeKuttaIntegrator0.clearEventHandlers();
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      classicalRungeKuttaIntegrator0.addStepHandler(dummyStepHandler0);
      PegasusSolver pegasusSolver0 = new PegasusSolver((-1787.958192418411));
      classicalRungeKuttaIntegrator0.addEventHandler((EventHandler) null, (-304.296), (double) (-4423), 4372, (UnivariateSolver) pegasusSolver0);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3771.87;
      doubleArray0[1] = 3771.87;
      doubleArray0[2] = 3771.87;
      doubleArray0[3] = 3771.87;
      doubleArray0[4] = 3771.87;
      doubleArray0[5] = 3771.87;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 3771.87;
      doubleArray1[1] = 3771.87;
      doubleArray1[2] = 3771.87;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(3771.87, 3771.87, doubleArray0, doubleArray1);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      highamHall54Integrator0.addEventHandler(eventHandler0, 1000.0, 1754.253172331, 45);
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      DummyStepHandler.getInstance();
      highamHall54Integrator0.addStepHandler(dummyStepHandler0);
      FirstOrderConverter firstOrderConverter0 = null;
      try {
        firstOrderConverter0 = new FirstOrderConverter((SecondOrderDifferentialEquations) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.FirstOrderConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(Double.NaN);
      // Undeclared exception!
      try { 
        midpointIntegrator0.computeDerivatives(1.0, (double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(5198.0, (-680.9386967064), doubleArray0, doubleArray0);
      dormandPrince54Integrator0.setSafety(5198.0);
      dormandPrince54Integrator0.getOrder();
      dormandPrince54Integrator0.setMaxEvaluations((-1353));
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-125.3), 9.094947017729282E-10, doubleArray0, doubleArray0);
      Collection<EventHandler> collection0 = dormandPrince853Integrator0.getEventHandlers();
      dormandPrince853Integrator0.clearStepHandlers();
      dormandPrince853Integrator0.setStepSizeControl(1.1368683772161603E-10, 4.547473508864641E-10, 9.094947017729282E-10, 2059.668441573588);
      dormandPrince853Integrator0.getOrder();
      dormandPrince853Integrator0.getEvaluations();
      Collection<EventHandler> collection1 = dormandPrince54Integrator0.getEventHandlers();
      assertNotSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1069.9853752364977);
      doubleArray0[1] = (-1069.9853752364977);
      doubleArray0[2] = 12.0;
      doubleArray0[3] = 12.0;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(12.0, (-1069.9853752364977), doubleArray0, doubleArray0);
      dormandPrince853Integrator0.clearStepHandlers();
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double double0 = (-1.0);
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1.0));
      gillIntegrator0.clearStepHandlers();
      gillIntegrator0.getEventHandlers();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2678.978;
      doubleArray0[1] = (-2411.7166817);
      try { 
        gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2678.978, doubleArray0, (-43.48988418106996), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, 2339.155424801021, 1998.0);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
  }
}
