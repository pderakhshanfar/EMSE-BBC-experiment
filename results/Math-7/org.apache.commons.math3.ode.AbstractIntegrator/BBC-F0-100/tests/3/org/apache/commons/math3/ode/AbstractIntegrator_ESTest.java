/*
 * This file was automatically generated by EvoSuite
 * Sat Aug 07 01:59:50 GMT 2021
 */

package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import org.apache.commons.math3.analysis.solvers.PegasusSolver;
import org.apache.commons.math3.analysis.solvers.RiddersSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.EulerIntegrator;
import org.apache.commons.math3.ode.nonstiff.GillIntegrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.nonstiff.MidpointIntegrator;
import org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator;
import org.apache.commons.math3.ode.sampling.DummyStepHandler;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.apache.commons.math3.ode.sampling.StepNormalizerBounds;
import org.apache.commons.math3.ode.sampling.StepNormalizerMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegrator_ESTest extends AbstractIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(386.29533);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertNotNull(eulerIntegrator0);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-278.058), Double.NaN, 1.6543612251060553E-21, (-278.058)).when(eventHandler0).g(anyDouble() , any(double[].class));
      double double0 = 384.7995710503427;
      eulerIntegrator0.addEventHandler(eventHandler0, 785.0, 384.7995710503427, (-2809));
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      double double1 = 7.802219817310385E-9;
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        eulerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 7.802219817310385E-9, doubleArray0, 0.0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [0, -193.148]
         //
         verifyException("org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(386.29533);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertNotNull(eulerIntegrator0);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-1271.2), 7.802219817310385E-9).when(eventHandler0).g(anyDouble() , any(double[].class));
      eulerIntegrator0.addEventHandler(eventHandler0, 516.72, (-1049.872728692409), (-286));
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      assertNotNull(expandableStatefulODE0);
      
      try { 
        eulerIntegrator0.integrate(expandableStatefulODE0, 516.72);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-286) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(386.29533);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertNotNull(eulerIntegrator0);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      eulerIntegrator0.addEventHandler(eventHandler0, 516.72, (-3908.9), (-286));
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      assertNotNull(expandableStatefulODE0);
      
      // Undeclared exception!
      eulerIntegrator0.integrate(expandableStatefulODE0, 386.29533);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(386.29533);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertNotNull(eulerIntegrator0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      double[] doubleArray0 = new double[0];
      double double0 = eulerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) 0, doubleArray0, (-378.0), doubleArray0);
      assertEquals((-378.0), double0, 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(0, firstOrderConverter0.getDimension());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      EulerIntegrator eulerIntegrator1 = new EulerIntegrator(1992.941302986841);
      assertFalse(eulerIntegrator1.equals((Object)eulerIntegrator0));
      assertEquals(Double.NaN, eulerIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals("Euler", eulerIntegrator1.getName());
      assertEquals(Double.NaN, eulerIntegrator1.getCurrentStepStart(), 0.01);
      assertNotNull(eulerIntegrator1);
      
      EulerIntegrator eulerIntegrator2 = new EulerIntegrator((-1017.4255364664267));
      assertFalse(eulerIntegrator2.equals((Object)eulerIntegrator0));
      assertFalse(eulerIntegrator2.equals((Object)eulerIntegrator1));
      assertEquals("Euler", eulerIntegrator2.getName());
      assertEquals(Double.NaN, eulerIntegrator2.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator2.getCurrentStepStart(), 0.01);
      assertNotNull(eulerIntegrator2);
      
      Collection<EventHandler> collection0 = eulerIntegrator2.getEventHandlers();
      assertNotSame(eulerIntegrator2, eulerIntegrator0);
      assertNotSame(eulerIntegrator2, eulerIntegrator1);
      assertFalse(eulerIntegrator2.equals((Object)eulerIntegrator0));
      assertFalse(eulerIntegrator2.equals((Object)eulerIntegrator1));
      assertEquals("Euler", eulerIntegrator2.getName());
      assertEquals(Double.NaN, eulerIntegrator2.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator2.getCurrentStepStart(), 0.01);
      assertNotNull(collection0);
      
      double double1 = eulerIntegrator0.getCurrentSignedStepsize();
      assertNotSame(eulerIntegrator0, eulerIntegrator2);
      assertNotSame(eulerIntegrator0, eulerIntegrator1);
      assertEquals(Double.NaN, double1, 0.01);
      assertFalse(eulerIntegrator0.equals((Object)eulerIntegrator2));
      assertFalse(eulerIntegrator0.equals((Object)eulerIntegrator1));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(386.29533);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertNotNull(eulerIntegrator0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      double[] doubleArray0 = new double[0];
      double double0 = eulerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 7.802219817310385E-9, doubleArray0, 0.0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(0, firstOrderConverter0.getDimension());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      EulerIntegrator eulerIntegrator1 = new EulerIntegrator(7.802219817310385E-9);
      assertFalse(eulerIntegrator1.equals((Object)eulerIntegrator0));
      assertEquals("Euler", eulerIntegrator1.getName());
      assertEquals(Double.NaN, eulerIntegrator1.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertNotNull(eulerIntegrator1);
      
      EulerIntegrator eulerIntegrator2 = new EulerIntegrator(2.5722094667974783E-56);
      assertFalse(eulerIntegrator2.equals((Object)eulerIntegrator1));
      assertFalse(eulerIntegrator2.equals((Object)eulerIntegrator0));
      assertEquals(Double.NaN, eulerIntegrator2.getCurrentSignedStepsize(), 0.01);
      assertEquals("Euler", eulerIntegrator2.getName());
      assertEquals(Double.NaN, eulerIntegrator2.getCurrentStepStart(), 0.01);
      assertNotNull(eulerIntegrator2);
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      try { 
        eulerIntegrator2.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 7.802219817310385E-9, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(386.29533);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertNotNull(eulerIntegrator0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      double[] doubleArray0 = new double[0];
      double double0 = eulerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 7.802219817310385E-9, doubleArray0, 0.0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      EulerIntegrator eulerIntegrator1 = new EulerIntegrator(7.802219817310385E-9);
      assertFalse(eulerIntegrator1.equals((Object)eulerIntegrator0));
      assertEquals(Double.NaN, eulerIntegrator1.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals("Euler", eulerIntegrator1.getName());
      assertNotNull(eulerIntegrator1);
      
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.5973974466323853, fixedStepHandler0, stepNormalizerMode0);
      assertNotNull(stepNormalizer0);
      
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 7.802219817310385E-9, 2.2601466178894043, 0.0);
      assertEquals(7.802219817310385E-9, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertNotNull(graggBulirschStoerIntegrator0);
      
      double double1 = graggBulirschStoerIntegrator0.getCurrentStepStart();
      assertEquals(Double.NaN, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(7.802219817310385E-9, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      
      double double2 = graggBulirschStoerIntegrator0.getCurrentStepStart();
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(7.802219817310385E-9, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      
      graggBulirschStoerIntegrator0.setInterpolationControl(true, (-2375));
      assertEquals(7.802219817310385E-9, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      
      graggBulirschStoerIntegrator0.setStabilityCheck(false, 2144, 2144, 2144);
      assertEquals(7.802219817310385E-9, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      
      int int0 = eulerIntegrator0.getEvaluations();
      assertNotSame(eulerIntegrator0, eulerIntegrator1);
      assertEquals(2, int0);
      assertFalse(eulerIntegrator0.equals((Object)eulerIntegrator1));
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      
      graggBulirschStoerIntegrator0.setInterpolationControl(false, 2);
      assertEquals(7.802219817310385E-9, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(386.29533);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertNotNull(eulerIntegrator0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      double double0 = 7.802219817310385E-9;
      double[] doubleArray0 = new double[0];
      double double1 = 0.0;
      double double2 = eulerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 7.802219817310385E-9, doubleArray0, 0.0, doubleArray0);
      assertEquals(0.0, double2, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      EulerIntegrator eulerIntegrator1 = new EulerIntegrator(7.802219817310385E-9);
      assertFalse(eulerIntegrator1.equals((Object)eulerIntegrator0));
      assertEquals("Euler", eulerIntegrator1.getName());
      assertEquals(Double.NaN, eulerIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator1.getCurrentStepStart(), 0.01);
      assertNotNull(eulerIntegrator1);
      
      eulerIntegrator1.clearEventHandlers();
      assertNotSame(eulerIntegrator1, eulerIntegrator0);
      assertFalse(eulerIntegrator1.equals((Object)eulerIntegrator0));
      assertEquals("Euler", eulerIntegrator1.getName());
      assertEquals(Double.NaN, eulerIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator1.getCurrentStepStart(), 0.01);
      
      Collection<EventHandler> collection0 = eulerIntegrator1.getEventHandlers();
      assertNotSame(eulerIntegrator1, eulerIntegrator0);
      assertFalse(eulerIntegrator1.equals((Object)eulerIntegrator0));
      assertEquals("Euler", eulerIntegrator1.getName());
      assertEquals(Double.NaN, eulerIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator1.getCurrentStepStart(), 0.01);
      assertNotNull(collection0);
      
      // Undeclared exception!
      eulerIntegrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 3788.92293789, doubleArray0, 386.29533, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-2762.0684278113645), (-275.0), (-2762.0684278113645), (-2762.0684278113645));
      assertEquals(871.53245358284, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(275.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(2762.0684278113645, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertNotNull(graggBulirschStoerIntegrator0);
      
      int int0 = (-847);
      graggBulirschStoerIntegrator0.setStabilityCheck(false, (-847), 1130, (-275.0));
      assertEquals(871.53245358284, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(275.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(2762.0684278113645, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.NEITHER;
      StepNormalizer stepNormalizer0 = new StepNormalizer(285.7971638697964, (FixedStepHandler) null, stepNormalizerMode0, stepNormalizerBounds0);
      assertNotNull(stepNormalizer0);
      
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      assertEquals(871.53245358284, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(275.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(2762.0684278113645, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 955);
      assertEquals(871.53245358284, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(275.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(2762.0684278113645, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      assertNotNull(expandableStatefulODE0);
      
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 2.220446049250313E-13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.sampling.StepNormalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator((-0.4957589496572502));
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertNotNull(eulerIntegrator0);
      
      String string0 = eulerIntegrator0.getName();
      assertEquals("Euler", string0);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertNotNull(string0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      double double0 = 5.2249837964645906E-8;
      EulerIntegrator eulerIntegrator1 = new EulerIntegrator(4309.5275);
      assertFalse(eulerIntegrator1.equals((Object)eulerIntegrator0));
      assertEquals(Double.NaN, eulerIntegrator1.getCurrentStepStart(), 0.01);
      assertEquals("Euler", eulerIntegrator1.getName());
      assertEquals(Double.NaN, eulerIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertNotNull(eulerIntegrator1);
      
      eulerIntegrator1.clearEventHandlers();
      assertNotSame(eulerIntegrator1, eulerIntegrator0);
      assertFalse(eulerIntegrator1.equals((Object)eulerIntegrator0));
      assertEquals(Double.NaN, eulerIntegrator1.getCurrentStepStart(), 0.01);
      assertEquals("Euler", eulerIntegrator1.getName());
      assertEquals(Double.NaN, eulerIntegrator1.getCurrentSignedStepsize(), 0.01);
      
      Collection<EventHandler> collection0 = eulerIntegrator0.getEventHandlers();
      assertNotSame(eulerIntegrator0, eulerIntegrator1);
      assertFalse(eulerIntegrator0.equals((Object)eulerIntegrator1));
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertNotNull(collection0);
      
      double double1 = 2366.30936317;
      double[] doubleArray0 = new double[0];
      try { 
        eulerIntegrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 4309.5275, doubleArray0, 4309.5275, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(386.29533);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertNotNull(eulerIntegrator0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      double[] doubleArray0 = new double[0];
      double double0 = eulerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 7.802219817310385E-9, doubleArray0, 0.0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      EulerIntegrator eulerIntegrator1 = new EulerIntegrator(7.802219817310385E-9);
      assertFalse(eulerIntegrator1.equals((Object)eulerIntegrator0));
      assertEquals(Double.NaN, eulerIntegrator1.getCurrentStepStart(), 0.01);
      assertEquals("Euler", eulerIntegrator1.getName());
      assertEquals(Double.NaN, eulerIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertNotNull(eulerIntegrator1);
      
      eulerIntegrator1.clearEventHandlers();
      assertNotSame(eulerIntegrator1, eulerIntegrator0);
      assertFalse(eulerIntegrator1.equals((Object)eulerIntegrator0));
      assertEquals(Double.NaN, eulerIntegrator1.getCurrentStepStart(), 0.01);
      assertEquals("Euler", eulerIntegrator1.getName());
      assertEquals(Double.NaN, eulerIntegrator1.getCurrentSignedStepsize(), 0.01);
      
      Collection<EventHandler> collection0 = eulerIntegrator1.getEventHandlers();
      assertNotSame(eulerIntegrator1, eulerIntegrator0);
      assertFalse(eulerIntegrator1.equals((Object)eulerIntegrator0));
      assertEquals(Double.NaN, eulerIntegrator1.getCurrentStepStart(), 0.01);
      assertEquals("Euler", eulerIntegrator1.getName());
      assertEquals(Double.NaN, eulerIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertNotNull(collection0);
      
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 1686.9808, doubleArray0, doubleArray0);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(1686.9808, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(0, doubleArray0.length);
      
      graggBulirschStoerIntegrator0.setInterpolationControl(false, 131);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(1686.9808, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      double double1 = eulerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 7.802219817310385E-9, doubleArray0, 0.0, doubleArray0);
      assertNotSame(eulerIntegrator0, eulerIntegrator1);
      assertEquals(0.0, double1, 0.01);
      assertFalse(eulerIntegrator0.equals((Object)eulerIntegrator1));
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(386.29533);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertNotNull(eulerIntegrator0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1245).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(2490, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      double[] doubleArray0 = new double[0];
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      assertFalse(firstOrderConverter1.equals((Object)firstOrderConverter0));
      assertEquals(0, firstOrderConverter1.getDimension());
      assertNotNull(firstOrderConverter1);
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter1);
      assertFalse(firstOrderConverter1.equals((Object)firstOrderConverter0));
      assertEquals(0, firstOrderConverter1.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      assertNotNull(expandableStatefulODE0);
      
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1.0, 386.29533, doubleArray0, doubleArray0);
      assertEquals(1.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(386.29533, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(19.65439721792556, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(0, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 7.802219817310385E-9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(386.29533);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertNotNull(eulerIntegrator0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      double[] doubleArray0 = new double[0];
      double double0 = eulerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 7.802219817310385E-9, doubleArray0, 0.0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      EulerIntegrator eulerIntegrator1 = new EulerIntegrator(7.802219817310385E-9);
      assertFalse(eulerIntegrator1.equals((Object)eulerIntegrator0));
      assertEquals(Double.NaN, eulerIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator1.getCurrentStepStart(), 0.01);
      assertEquals("Euler", eulerIntegrator1.getName());
      assertNotNull(eulerIntegrator1);
      
      Collection<EventHandler> collection0 = eulerIntegrator1.getEventHandlers();
      assertNotSame(eulerIntegrator1, eulerIntegrator0);
      assertFalse(eulerIntegrator1.equals((Object)eulerIntegrator0));
      assertEquals(Double.NaN, eulerIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator1.getCurrentStepStart(), 0.01);
      assertEquals("Euler", eulerIntegrator1.getName());
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      assertNotNull(expandableStatefulODE0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 4246.00915615444;
      doubleArray0[1] = 4246.00915615444;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 4246.00915615444;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(4246.00915615444, 0.0, doubleArray0, doubleArray0);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(4246.00915615444, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertArrayEquals(new double[] {4246.00915615444, 4246.00915615444, 0.0, 0.0, 0.0, 4246.00915615444}, doubleArray0, 0.01);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(6, doubleArray0.length);
      
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 6
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(1.9694106578826904);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      assertNotNull(threeEighthesIntegrator0);
      
      double double0 = threeEighthesIntegrator0.getCurrentSignedStepsize();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(146.8);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("classical Runge-Kutta", classicalRungeKuttaIntegrator0.getName());
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01);
      assertNotNull(classicalRungeKuttaIntegrator0);
      
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(3003.7635051);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertNotNull(eulerIntegrator0);
      
      double[] doubleArray0 = new double[0];
      double double1 = eulerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1100.9049521638226), doubleArray0, 1.9694106578826904, doubleArray0);
      assertEquals(1.9694106578826904, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      Collection<EventHandler> collection0 = eulerIntegrator0.getEventHandlers();
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-0.4957589496572502), (-1534.8025232), (-0.4957589496572502), (-1534.8025232));
      assertEquals(27.584272454297746, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(1534.8025232, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0.4957589496572502, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertNotNull(graggBulirschStoerIntegrator0);
      
      double double0 = graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
      assertEquals(27.584272454297746, double0, 0.01);
      assertEquals(27.584272454297746, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(1534.8025232, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0.4957589496572502, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double double0 = 386.29533;
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(386.29533);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertNotNull(eulerIntegrator0);
      
      String string0 = eulerIntegrator0.getName();
      assertEquals("Euler", string0);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertNotNull(string0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      assertNotNull(expandableStatefulODE0);
      
      eulerIntegrator0.integrate(expandableStatefulODE0, double0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      assertNotNull(threeEighthesIntegrator0);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      threeEighthesIntegrator0.addEventHandler(eventHandler0, 0.0, 0.0, 108, (UnivariateSolver) null);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      
      double double0 = threeEighthesIntegrator0.getCurrentSignedStepsize();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(2, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(875.0);
      assertEquals("classical Runge-Kutta", classicalRungeKuttaIntegrator0.getName());
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01);
      assertNotNull(classicalRungeKuttaIntegrator0);
      
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(0.0);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertNotNull(eulerIntegrator0);
      
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler1).toString();
      eulerIntegrator0.addEventHandler(eventHandler1, 0.0, 4.1988574190754736E296, 1639, (UnivariateSolver) null);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      
      Collection<EventHandler> collection0 = eulerIntegrator0.getEventHandlers();
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertTrue(collection0.contains(eventHandler1));
      assertFalse(collection0.contains(eventHandler0));
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-0.2735313036020583), (-0.2735313036020583), (-2762.0684278113645), 285.7971638697964);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.2735313036020583, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.2735313036020583, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0.2735313036020583, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertNotNull(graggBulirschStoerIntegrator0);
      
      graggBulirschStoerIntegrator0.setStabilityCheck(false, (-847), 0, (-551.585523));
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.2735313036020583, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.2735313036020583, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0.2735313036020583, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator((-3632.774417562724));
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertNotNull(eulerIntegrator0);
      
      String string0 = eulerIntegrator0.getName();
      assertEquals("Euler", string0);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertNotNull(string0);
      
      double double0 = eulerIntegrator0.getCurrentStepStart();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertNotNull(threeEighthesIntegrator0);
      
      double double0 = threeEighthesIntegrator0.getCurrentSignedStepsize();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      
      threeEighthesIntegrator0.setMaxEvaluations(1107);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      
      int int0 = threeEighthesIntegrator0.getMaxEvaluations();
      assertEquals(1107, int0);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(690.0, 1107, 147.1076, 147.1076);
      assertEquals(690.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(873.9736838143355, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(1107.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertNotNull(graggBulirschStoerIntegrator0);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      RiddersSolver riddersSolver0 = new RiddersSolver(690.0);
      assertEquals(1.0E-14, riddersSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, riddersSolver0.getMax(), 0.01);
      assertEquals(0.0, riddersSolver0.getMin(), 0.01);
      assertEquals(690.0, riddersSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, riddersSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, riddersSolver0.getStartValue(), 0.01);
      assertNotNull(riddersSolver0);
      
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 147.1076, (double) 1107, 1107, (UnivariateSolver) riddersSolver0);
      assertEquals(690.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(873.9736838143355, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(1107.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(1.0E-14, riddersSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, riddersSolver0.getMax(), 0.01);
      assertEquals(0.0, riddersSolver0.getMin(), 0.01);
      assertEquals(690.0, riddersSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, riddersSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, riddersSolver0.getStartValue(), 0.01);
      
      graggBulirschStoerIntegrator0.clearStepHandlers();
      assertEquals(690.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(873.9736838143355, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(1107.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1107).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(2214, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 1107;
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 3114.39, doubleArray0, 0.65, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 2,214
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-588.723718459723), 2422.1935928811, (-588.723718459723), 0.0);
      assertEquals(2422.1935928811, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(1194.1535993456946, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(588.723718459723, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertNotNull(dormandPrince54Integrator0);
      
      dormandPrince54Integrator0.clearEventHandlers();
      assertEquals(2422.1935928811, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(1194.1535993456946, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(588.723718459723, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      
      dormandPrince54Integrator0.setMaxGrowth(2422.1935928811);
      assertEquals(2422.1935928811, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(1194.1535993456946, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(2422.1935928811, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(588.723718459723, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      
      dormandPrince54Integrator0.clearEventHandlers();
      assertEquals(2422.1935928811, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(1194.1535993456946, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(2422.1935928811, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(588.723718459723, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(359.6322139294186, 2422.1935928811, 1016.7, 1000.0);
      assertEquals(933.3267618436122, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(359.6322139294186, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(2422.1935928811, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertNotNull(graggBulirschStoerIntegrator0);
      
      graggBulirschStoerIntegrator0.setMaxEvaluations((-1356));
      assertEquals(933.3267618436122, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(359.6322139294186, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(2422.1935928811, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      assertNotNull(dummyStepHandler0);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (-588.723718459723), (double) (-1356), (-1356));
      assertEquals(933.3267618436122, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(359.6322139294186, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(2422.1935928811, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      
      graggBulirschStoerIntegrator0.addStepHandler(dummyStepHandler0);
      assertEquals(933.3267618436122, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(359.6322139294186, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(2422.1935928811, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      
      dormandPrince54Integrator0.clearEventHandlers();
      assertEquals(2422.1935928811, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(1194.1535993456946, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(2422.1935928811, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(588.723718459723, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      
      double double0 = graggBulirschStoerIntegrator0.getCurrentStepStart();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(933.3267618436122, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(359.6322139294186, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(2422.1935928811, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      
      graggBulirschStoerIntegrator0.clearEventHandlers();
      assertEquals(933.3267618436122, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(359.6322139294186, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(2422.1935928811, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      PegasusSolver pegasusSolver0 = new PegasusSolver((-2320.2654));
      assertEquals((-2320.2654), pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertNotNull(pegasusSolver0);
      
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler1, (-2320.2654), (-588.723718459723), 0, (UnivariateSolver) pegasusSolver0);
      assertEquals(933.3267618436122, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(359.6322139294186, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(2422.1935928811, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals((-2320.2654), pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double double0 = (-1194.549130263);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1194.549130263), (-0.022459085953066622), (-1194.549130263), (-72.464169));
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(0.022459085953066622, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(1194.549130263, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(5.179621761454952, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertNotNull(dormandPrince853Integrator0);
      
      int int0 = 0;
      dormandPrince853Integrator0.setMaxEvaluations(0);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(0.022459085953066622, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(1194.549130263, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(5.179621761454952, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      
      dormandPrince853Integrator0.clearEventHandlers();
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(0.022459085953066622, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(1194.549130263, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(5.179621761454952, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      
      double double1 = 1533.5861199489286;
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      StepNormalizer stepNormalizer0 = new StepNormalizer(1533.5861199489286, fixedStepHandler0, stepNormalizerMode0);
      assertNotNull(stepNormalizer0);
      
      dormandPrince853Integrator0.addStepHandler(stepNormalizer0);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(0.022459085953066622, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(1194.549130263, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(5.179621761454952, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-0.022459085953066622);
      dormandPrince853Integrator0.clearStepHandlers();
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(0.022459085953066622, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(1194.549130263, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(5.179621761454952, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      
      try { 
        dormandPrince853Integrator0.computeDerivatives(0.0, doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(0.0);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertNotNull(eulerIntegrator0);
      
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      assertNotNull(dummyStepHandler0);
      
      eulerIntegrator0.addStepHandler(dummyStepHandler0);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      
      int int0 = eulerIntegrator0.getMaxEvaluations();
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      
      String string0 = eulerIntegrator0.getName();
      assertEquals("Euler", string0);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertNotNull(string0);
      
      double double0 = eulerIntegrator0.getCurrentStepStart();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double double0 = (-0.2735313036020583);
      double double1 = (-2762.0684278113645);
      double double2 = 285.7971638697964;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-0.2735313036020583), (-0.2735313036020583), (-2762.0684278113645), 285.7971638697964);
      int int0 = 0;
      graggBulirschStoerIntegrator0.setStabilityCheck(false, (-847), 0, (-551.585523));
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.NEITHER;
      StepNormalizer stepNormalizer0 = new StepNormalizer((-847), fixedStepHandler0, stepNormalizerMode0, stepNormalizerBounds0);
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      graggBulirschStoerIntegrator0.setInterpolationControl(false, (-847));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double double3 = 0.0;
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 0.0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double double0 = 385.7631619421198;
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(385.7631619421198);
      threeEighthesIntegrator0.getCurrentSignedStepsize();
      FirstOrderConverter firstOrderConverter0 = null;
      try {
        firstOrderConverter0 = new FirstOrderConverter((SecondOrderDifferentialEquations) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.FirstOrderConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
      threeEighthesIntegrator0.getCurrentSignedStepsize();
      threeEighthesIntegrator0.setMaxEvaluations(1107);
      threeEighthesIntegrator0.getMaxEvaluations();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(690.0, 1107, 147.1076, 147.1076);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      RiddersSolver riddersSolver0 = new RiddersSolver(690.0);
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 147.1076, (double) 1107, 1107, (UnivariateSolver) riddersSolver0);
      graggBulirschStoerIntegrator0.clearStepHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 1107;
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 3114.39, doubleArray0, 0.65, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(0.0);
      double double0 = 428.2343259788392;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 428.2343259788392;
      doubleArray1[1] = 428.2343259788392;
      doubleArray1[2] = 428.2343259788392;
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = (-1.0);
      doubleArray1[5] = 428.2343259788392;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 428.2343259788392;
      doubleArray1[8] = (-1.0);
      try { 
        gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 428.2343259788392, doubleArray0, 0.0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double double0 = (-2924.0908854364);
      double double1 = 0.0;
      double double2 = (-1546.24897304);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-2598.5055073202), (-2924.0908854364), 0.0, (-1546.24897304));
      dormandPrince853Integrator0.clearEventHandlers();
      dormandPrince853Integrator0.setMaxEvaluations(1829);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      dormandPrince853Integrator0.getMaxEvaluations();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1546.24897304);
      try { 
        expandableStatefulODE0.setCompleteState(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 0
         //
         verifyException("org.apache.commons.math3.ode.ExpandableStatefulODE", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(386.29533);
      eulerIntegrator0.getName();
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(20.0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 20.0;
      doubleArray0[1] = 20.0;
      doubleArray0[2] = Double.NaN;
      // Undeclared exception!
      try { 
        midpointIntegrator0.integrate((FirstOrderDifferentialEquations) null, (-1502.3935083883778), doubleArray0, (-1502.3935083883778), doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double double0 = (-0.020331201708508627);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-0.020331201708508627);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-0.020331201708508627), (-0.020331201708508627), doubleArray0, doubleArray0);
      highamHall54Integrator0.getMaxEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) Integer.MAX_VALUE;
      doubleArray1[1] = (-0.020331201708508627);
      doubleArray1[2] = (-0.020331201708508627);
      double double1 = (-676.0);
      doubleArray1[3] = (-676.0);
      try { 
        highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) Integer.MAX_VALUE, doubleArray1, (-676.0), doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-2722.63968173661);
      doubleArray0[8] = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.clearEventHandlers();
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.computeDerivatives(17.5382013, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 0.0, doubleArray0, doubleArray0);
      highamHall54Integrator0.getEventHandlers();
      highamHall54Integrator0.setSafety(0.0);
      highamHall54Integrator0.getEventHandlers();
      double double0 = (-1597.344572733412);
      double double1 = 20.0;
      highamHall54Integrator0.setStepSizeControl((-1597.344572733412), 0.0, 20.0, 0.0);
      double double2 = (-3185.8500681450123);
      // Undeclared exception!
      try { 
        highamHall54Integrator0.computeDerivatives((-3185.8500681450123), doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(887.532, 887.532, (-0.84375), 3024.59623);
      dormandPrince54Integrator0.clearStepHandlers();
      dormandPrince54Integrator0.setMaxEvaluations(0);
      int int0 = dormandPrince54Integrator0.getOrder();
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 0.0, 0.0, (-0.5));
      highamHall54Integrator0.setMaxGrowth(0.0);
      highamHall54Integrator0.getOrder();
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 2653.842751337, 2506.1280653750696, 0.0);
      int int1 = dormandPrince853Integrator0.getOrder();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double double0 = 0.0;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3532.587111366416), 0.0, (-3532.587111366416), (-1296.5284827));
      highamHall54Integrator0.getEvaluations();
      highamHall54Integrator0.getStepHandlers();
      highamHall54Integrator0.clearStepHandlers();
      highamHall54Integrator0.getMaxEvaluations();
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = null;
      try {
        graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0, (double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 131.009751335355, (-235.676183), (-894.0684111244182));
      graggBulirschStoerIntegrator0.getEvaluations();
      graggBulirschStoerIntegrator0.getEvaluations();
      graggBulirschStoerIntegrator0.getCurrentStepStart();
      graggBulirschStoerIntegrator0.clearStepHandlers();
      graggBulirschStoerIntegrator0.getEventHandlers();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 0.0, 0.0, (-615));
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 360.0;
      doubleArray0[1] = 360.0;
      doubleArray0[2] = 360.0;
      doubleArray0[3] = 360.0;
      doubleArray0[4] = 360.0;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(360.0, 360.0, doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      PegasusSolver pegasusSolver0 = new PegasusSolver(360.0);
      dormandPrince853Integrator0.addEventHandler(eventHandler1, 360.0, 1000.0, (-1965), (UnivariateSolver) pegasusSolver0);
      dormandPrince853Integrator0.addEventHandler(eventHandler0, 0.0, (-966.6449278), (-1));
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-3109.46769), 0.0, doubleArray0, doubleArray0);
      int int0 = dormandPrince54Integrator0.getOrder();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3097.00224866;
      doubleArray0[1] = 3097.00224866;
      doubleArray0[2] = 3097.00224866;
      doubleArray0[3] = 3097.00224866;
      doubleArray0[4] = 3097.00224866;
      doubleArray0[5] = 3097.00224866;
      doubleArray0[6] = 3097.00224866;
      doubleArray0[7] = 3097.00224866;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(3097.00224866, 3097.00224866, doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        dormandPrince54Integrator0.integrate(expandableStatefulODE0, (-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 8
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 0.0, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.clearEventHandlers();
      assertEquals(0.0, dormandPrince54Integrator0.getMinStep(), 0.01);
  }
}
