/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 00:05:02 GMT 2021
 */

package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.function.Cbrt;
import org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver;
import org.apache.commons.math3.analysis.solvers.BrentSolver;
import org.apache.commons.math3.analysis.solvers.IllinoisSolver;
import org.apache.commons.math3.analysis.solvers.PegasusSolver;
import org.apache.commons.math3.analysis.solvers.RegulaFalsiSolver;
import org.apache.commons.math3.analysis.solvers.RiddersSolver;
import org.apache.commons.math3.analysis.solvers.SecantSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator;
import org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator;
import org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.EulerIntegrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator;
import org.apache.commons.math3.ode.sampling.DummyStepHandler;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.StepHandler;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.apache.commons.math3.ode.sampling.StepNormalizerBounds;
import org.apache.commons.math3.ode.sampling.StepNormalizerMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegrator_ESTest extends AbstractIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-3387.14156757), (-1.0), 51544.0, (-0.05086379716981132));
      dormandPrince853Integrator0.setMaxGrowth((-3387.14156757));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 51544.0;
      RiddersSolver riddersSolver0 = new RiddersSolver((-0.05086379716981132), (-1.0));
      riddersSolver0.getMaxEvaluations();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(434.160978730135, (-0.05086379716981132), (-0.05086379716981132), 434.160978730135);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-0.05086379716981132), 1298.9279984843).when(eventHandler0).g(anyDouble() , any(double[].class));
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(434.160978730135);
      classicalRungeKuttaIntegrator0.addEventHandler(eventHandler0, (-0.05086379716981132), 0.0, 0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        classicalRungeKuttaIntegrator0.integrate(expandableStatefulODE0, 281.492655513138);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-3387.14156757), (-1.0), 51544.0, (-0.05086379716981132));
      dormandPrince853Integrator0.setMaxGrowth((-3387.14156757));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 51544.0;
      RiddersSolver riddersSolver0 = new RiddersSolver((-0.05086379716981132), (-1.0));
      riddersSolver0.getMaxEvaluations();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(434.160978730135, (-0.05086379716981132), (-0.05086379716981132), 434.160978730135);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-0.05086379716981132), 1298.9279984843, 51544.0, (double)0, 2468.844809922854).when(eventHandler0).g(anyDouble() , any(double[].class));
      int int0 = 8;
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(0, 1.6160884846515524E-147, 7.275957614183426E-9, 8);
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 0.0, 0.0, 2, (UnivariateSolver) bracketingNthOrderBrentSolver0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter1);
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter1);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE1, 1.764200470879736E51);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-3387.14156757), (-1.0), 51544.0, (-0.05086379716981132));
      dormandPrince853Integrator0.setMaxGrowth((-3387.14156757));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(4).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 51544.0;
      RiddersSolver riddersSolver0 = new RiddersSolver((-0.05086379716981132), (-1.0));
      riddersSolver0.getMaxEvaluations();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(434.160978730135, (-0.05086379716981132), (-0.05086379716981132), 434.160978730135);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.05086379716981132, 10.0, (-0.05086379716981132), 1260.9601645469666, 232.45849064624642).when(eventHandler0).g(anyDouble() , any(double[].class));
      int int0 = 8;
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(0, 1.6160884846515524E-147, 7.275957614183426E-9, 8);
      bracketingNthOrderBrentSolver0.getEvaluations();
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 0.0, 0.0, 4, (UnivariateSolver) bracketingNthOrderBrentSolver0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 324.37538244999996);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [\uFFFD, \uFFFD], values: [232.458, 232.458]
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-3387.14156757), (-1.0), (-12.7832305903), (-0.05086379717));
      dormandPrince853Integrator0.setMaxGrowth((-3387.14156757));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(4).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-12.7832305903);
      doubleArray0[1] = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-12.7832305903);
      Double double0 = new Double((-3387.14156757));
      dormandPrince853Integrator0.getOrder();
      dormandPrince853Integrator0.clearEventHandlers();
      dormandPrince853Integrator0.setMaxEvaluations(8);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1128.603218034, 1000.0, (-1.0), 4);
      graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) 1262, doubleArray0, 1.0, doubleArray0);
      graggBulirschStoerIntegrator0.getEvaluations();
      graggBulirschStoerIntegrator0.getCurrentStepStart();
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(8, 1.0, (-544.0937), 1255.63, 1255.63);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime((-1.0));
      // Undeclared exception!
      try { 
        adamsMoultonIntegrator0.integrate(expandableStatefulODE0, 0.6502478122711182);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(4).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 51544.0;
      doubleArray0[1] = (double) 4;
      doubleArray0[3] = 4.0;
      doubleArray0[4] = (-1.0);
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(910.3433);
      threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-0.05086379716981132), doubleArray0, (-2192.4), doubleArray0);
      threeEighthesIntegrator0.computeDerivatives(3252.6359567071922, doubleArray0, doubleArray0);
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = null;
      try {
        adamsMoultonIntegrator0 = new AdamsMoultonIntegrator((-1199), 3.969413618002761E-221, 0.0, (-1.0), 51544.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // multistep method needs at least -1,199 previous steps, got 2
         //
         verifyException("org.apache.commons.math3.ode.MultistepIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(4).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 51544.0;
      doubleArray0[1] = (double) 4;
      doubleArray0[3] = 4.0;
      doubleArray0[4] = (-1.0);
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(910.3433);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = 0.0;
      try { 
        threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1.0), doubleArray0, 51544.0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 8
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator((-1912.118793873));
      int int0 = 5;
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(5, 2.347886562347412, (-1.0), (-1.0), (-1191.405));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      try { 
        adamsBashforthIntegrator0.integrate(expandableStatefulODE0, (-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one column
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-786.35960381975));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      try { 
        threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-786.35960381975), doubleArray0, (-786.35960381975), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-3387.14156757), (-1.0), 51544.0, (-0.05086379716981132));
      dormandPrince853Integrator0.setMaxGrowth((-3387.14156757));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 51544.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 51544.0;
      Double double0 = new Double((-3387.14156757));
      dormandPrince853Integrator0.setMaxEvaluations(384);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1360.25495, 2.220446049250313E-13, 2081.5589058015444, 1128.603218034);
      graggBulirschStoerIntegrator0.getEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        dormandPrince853Integrator0.integrate(expandableStatefulODE1, 78.80415228);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (384) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-3387.14156757), (-1.0), 51544.0, (-0.05086379716981132));
      dormandPrince853Integrator0.setMaxGrowth((-3387.14156757));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(4).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 51544.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 51544.0;
      Double double0 = new Double((-3387.14156757));
      dormandPrince853Integrator0.getOrder();
      dormandPrince853Integrator0.clearEventHandlers();
      dormandPrince853Integrator0.setMaxEvaluations(1262);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2.220446049250313E-13, 1.0398354530334473, 914.3433, 1128.603218034);
      graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1.0), doubleArray0, (-0.05086379716981132), doubleArray0);
      graggBulirschStoerIntegrator0.getEvaluations();
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (-2261.55398317));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-3387.14156757), (-1.0), 51544.0, (-0.05086379716981132));
      dormandPrince853Integrator0.setMaxGrowth((-3387.14156757));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(4).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 51544.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[1] = (-0.05086379716981132);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 51544.0;
      doubleArray0[6] = (-0.05086379716981132);
      doubleArray0[7] = 51544.0;
      Double double0 = new Double((-0.05086379716981132));
      dormandPrince853Integrator0.getOrder();
      dormandPrince853Integrator0.clearEventHandlers();
      int int0 = 0;
      dormandPrince853Integrator0.setMaxEvaluations(0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0, (-98.72095), 0.0, (-3387.14156757));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(702.9617422892375, (-847.6709)).when(eventHandler0).g(anyDouble() , any(double[].class));
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1000.0);
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (-0.05086379716981132), 51544.0, 0, (UnivariateSolver) regulaFalsiSolver0);
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-0.05086379716981132), doubleArray0, (-2032.743207866611), doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-3387.14156757), (-1.0), 51544.0, (-0.05086379716981132));
      dormandPrince853Integrator0.setMaxGrowth((-3387.14156757));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(4).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 51544.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[1] = (-0.05086379716981132);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 51544.0;
      doubleArray0[6] = (-0.05086379716981132);
      doubleArray0[7] = 51544.0;
      Double double0 = new Double((-0.05086379716981132));
      dormandPrince853Integrator0.getOrder();
      dormandPrince853Integrator0.clearEventHandlers();
      dormandPrince853Integrator0.setMaxEvaluations(0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-147.8158), (-1.0), 1.0, 0.0);
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, (-1.0), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minimal step size (1.48E02) reached, integration needs 2.11E00
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-3387.14156757), (-1.0), 51544.0, (-0.05086379716981132));
      dormandPrince853Integrator0.setMaxGrowth((-3387.14156757));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(4).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 51544.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[1] = (-0.05086379716981132);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 51544.0;
      doubleArray0[6] = (-0.05086379716981132);
      doubleArray0[7] = 51544.0;
      Double double0 = new Double((-0.05086379716981132));
      dormandPrince853Integrator0.getOrder();
      dormandPrince853Integrator0.clearEventHandlers();
      dormandPrince853Integrator0.setMaxEvaluations(0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, (-520.2907072356963), 0.0, 0.0);
      graggBulirschStoerIntegrator0.clearEventHandlers();
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 1128.603218034, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1275.0, (-635.644994255), (-635.644994255), (-635.644994255));
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-635.644994255), 1275.0, 1646.5, 1646.5);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      RiddersSolver riddersSolver0 = new RiddersSolver((-635.644994255), 2147483645);
      riddersSolver0.getMaxEvaluations();
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (-44.090906881), 1646.5, 2147483645, (UnivariateSolver) riddersSolver0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 3555.9250637);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1275.0, (-635.644994255), (-635.644994255), (-635.644994255));
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-635.644994255), 1275.0, 1646.5, 1646.5);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      DummyStepHandler.getInstance();
      graggBulirschStoerIntegrator0.addStepHandler(dummyStepHandler0);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 3555.9250637);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 0.0, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(180).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(767.00817642163, 0, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setStabilityCheck(false, 3, (-350), 0.0);
      BrentSolver brentSolver0 = new BrentSolver(874.17973307858, 0.0, 0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 874.17973307858, 0.0, 3, (UnivariateSolver) brentSolver0);
      graggBulirschStoerIntegrator0.clearEventHandlers();
      graggBulirschStoerIntegrator0.setStepSizeControl((-1.0), 1.0, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setMaxEvaluations((-350));
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(4055.28197705977, (-1912.118793873), (-1912.118793873), 0.05086383151458242);
      // Undeclared exception!
      try { 
        dormandPrince853Integrator0.integrate((ExpandableStatefulODE) null, 0.05086383151458242);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(5130.916998);
      classicalRungeKuttaIntegrator0.getEvaluations();
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 1.7407497662694827E-295, 0.0, 0.0);
      double[] doubleArray0 = new double[1];
      int int0 = dormandPrince54Integrator0.getMaxEvaluations();
      assertEquals(Integer.MAX_VALUE, int0);
      
      double double0 = dormandPrince54Integrator0.getCurrentSignedStepsize();
      assertEquals(0.0, double0, 0.01);
      
      dormandPrince54Integrator0.setMaxEvaluations(0);
      double double1 = classicalRungeKuttaIntegrator0.getCurrentStepStart();
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator((-1912.118793873));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1.0);
      // Undeclared exception!
      try { 
        eulerIntegrator0.integrate((FirstOrderDifferentialEquations) null, (-1.0), doubleArray0, (-1912.118793873), doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 0.0, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1237).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray1 = new double[17];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 0.0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 2,474
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      doubleArray0[0] = (-1286.048274155169);
      doubleArray0[1] = 1.0;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1.0, (-633.2117075), doubleArray0, doubleArray0);
      dormandPrince853Integrator0.setMaxGrowth(1.0);
      dormandPrince853Integrator0.getEvaluations();
      dormandPrince853Integrator0.setInitialStepSize((-633.2117075));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double0 = (-1953.8468697663782);
      dormandPrince853Integrator0.addEventHandler(eventHandler0, (double) Integer.MAX_VALUE, (-1953.8468697663782), 0);
      double double1 = 1000.0;
      double double2 = 1552.21661;
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(1201, 1000.0, 1552.21661, doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double double0 = 620.3468051616;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(3491.040360029, 3491.040360029, 620.3468051616, 620.3468051616);
      dormandPrince853Integrator0.clearEventHandlers();
      int int0 = 245;
      dormandPrince853Integrator0.setMaxEvaluations(245);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(245).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 620.3468051616;
      doubleArray0[1] = 620.3468051616;
      doubleArray0[2] = 620.3468051616;
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 620.3468051616, doubleArray0, 620.3468051616, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 490
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1.0;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 1.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 1.0;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1.0, 0.0, doubleArray0, doubleArray1);
      dormandPrince54Integrator0.setSafety(0.0);
      dormandPrince54Integrator0.setStepSizeControl((-3457480.0), 0.0, doubleArray1, doubleArray1);
      int int0 = dormandPrince54Integrator0.getMaxEvaluations();
      assertEquals(Integer.MAX_VALUE, int0);
      
      double double0 = dormandPrince54Integrator0.getCurrentSignedStepsize();
      assertEquals(0.0, double0, 0.01);
      
      dormandPrince54Integrator0.setMaxEvaluations(0);
      assertEquals(0.0, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      
      try { 
        dormandPrince54Integrator0.computeDerivatives(0.0, doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-3387.14156757), (-1.0), 51544.0, (-0.05086379716981132));
      dormandPrince853Integrator0.setMaxGrowth((-3387.14156757));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(4).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 51544.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[1] = (-0.05086379716981132);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 51544.0;
      doubleArray0[6] = (-0.05086379716981132);
      doubleArray0[7] = 51544.0;
      double double0 = new Double((-0.05086379716981132));
      dormandPrince853Integrator0.getOrder();
      dormandPrince853Integrator0.clearEventHandlers();
      dormandPrince853Integrator0.setMaxEvaluations(0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0, (-98.72095), 0.0, (-3387.14156757));
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-0.05086379716981132), doubleArray0, (-2032.743207866611), doubleArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(3560.951383878839, 0.0, 0.0, 3560.951383878839);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      highamHall54Integrator0.integrate(expandableStatefulODE0, 0.0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1040.47643953185), 0.0, (-515.4474992392), (-565.551));
      graggBulirschStoerIntegrator0.setStepSizeControl((double) 0, (-1040.47643953185), (-1040.47643953185), 0.0);
      graggBulirschStoerIntegrator0.setStabilityCheck(false, 92, 92, 1009.7848);
      graggBulirschStoerIntegrator0.setOrderControl(0, (-5585.439098969), (-515.4474992392));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Cbrt cbrt0 = new Cbrt();
      illinoisSolver0.solve(69, (UnivariateFunction) cbrt0, 2468.993486738775, 0.0);
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 0.0, (-565.551), (-1009), (UnivariateSolver) illinoisSolver0);
      double double0 = graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
      assertEquals(0.0, double0, 0.01);
      
      graggBulirschStoerIntegrator0.getStepHandlers();
      graggBulirschStoerIntegrator0.setOrderControl(0, (-1.6380176890978755), 0.0);
      Collection<EventHandler> collection0 = graggBulirschStoerIntegrator0.getEventHandlers();
      assertTrue(collection0.contains(eventHandler0));
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(2.3410181999206543);
      PegasusSolver pegasusSolver0 = new PegasusSolver((-2164.7726788464), 112847.0);
      threeEighthesIntegrator0.addEventHandler((EventHandler) null, 1278.9027860267715, 1241.7092665830694, 276, (UnivariateSolver) pegasusSolver0);
      threeEighthesIntegrator0.getEventHandlers();
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 0.0, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 0.0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-822.507005692), (-822.507005692), (-822.507005692), 0.0);
      dormandPrince54Integrator0.getOrder();
      dormandPrince54Integrator0.getCurrentSignedStepsize();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-565.6), 4823.76040553, 0.0, 0.0);
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 5);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 5;
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, (-822.507005692), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 15.279233632882423;
      doubleArray0[2] = 15.279233632882423;
      doubleArray0[3] = 15.279233632882423;
      doubleArray0[4] = 15.279233632882423;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 15.279233632882423;
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = 15.279233632882423;
      doubleArray1[3] = 15.279233632882423;
      doubleArray1[4] = (-1.0);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(15.279233632882423, (-1.0), doubleArray0, doubleArray1);
      highamHall54Integrator0.getOrder();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        highamHall54Integrator0.integrate(expandableStatefulODE0, 0.7777777777777778);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 5
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double double0 = (-1286.048274155169);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1286.048274155169);
      doubleArray0[1] = 1.0;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1.0, (-1286.048274155169), doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      dormandPrince853Integrator0.setMaxGrowth((-1286.048274155169));
      dormandPrince853Integrator0.getEvaluations();
      dormandPrince853Integrator0.setInitialStepSize((-998.33118));
      dormandPrince853Integrator0.addEventHandler(eventHandler0, 1.0, 1.0, Integer.MAX_VALUE);
      double double1 = (-775.357787);
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = null;
      try {
        adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(0, 1.0, (-775.357787), doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one row
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(909.422745788, 0.0, 0.0, 153.438);
      double double0 = 0.0;
      dormandPrince54Integrator0.setStepSizeControl(909.422745788, 909.422745788, 0.0, 0.0);
      dormandPrince54Integrator0.getEvaluations();
      dormandPrince54Integrator0.getMaxEvaluations();
      dormandPrince54Integrator0.getMaxEvaluations();
      double double1 = 0.0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 153.438;
      doubleArray0[4] = 909.422745788;
      doubleArray0[5] = (double) Integer.MAX_VALUE;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (double) 0;
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = null;
      try {
        adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(0, 0.0, 0, doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one row
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(726.577109240528);
      classicalRungeKuttaIntegrator0.getEvaluations();
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      classicalRungeKuttaIntegrator0.clearEventHandlers();
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.FIRST;
      StepNormalizer stepNormalizer0 = new StepNormalizer(726.577109240528, (FixedStepHandler) null, stepNormalizerMode0, stepNormalizerBounds0);
      classicalRungeKuttaIntegrator0.addStepHandler(stepNormalizer0);
      classicalRungeKuttaIntegrator0.clearEventHandlers();
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 315.8852635581;
      doubleArray0[1] = 4734.17870017;
      doubleArray0[2] = 4734.17870017;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(315.8852635581, 4734.17870017, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.getCurrentStepStart();
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(4734.17870017, 315.8852635581, 4734.17870017, 315.8852635581);
      dormandPrince853Integrator0.setSafety(4734.17870017);
      dormandPrince853Integrator0.getOrder();
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        dormandPrince853Integrator0.computeDerivatives(315.8852635581, doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, (-4.436036387594894), (-4.436036387594894));
      double[] doubleArray0 = new double[3];
      graggBulirschStoerIntegrator0.setInitialStepSize((-4.436036387594894));
      doubleArray0[0] = (-616.735265);
      graggBulirschStoerIntegrator0.setStabilityCheck(false, (-687), (-687), (-687));
      BrentSolver brentSolver0 = new BrentSolver((-616.735265), 1.0, 1.0);
      graggBulirschStoerIntegrator0.addEventHandler((EventHandler) null, (-310.593866837595), 0.0, 0, (UnivariateSolver) brentSolver0);
      graggBulirschStoerIntegrator0.clearEventHandlers();
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      graggBulirschStoerIntegrator0.setStepSizeControl((-616.735265), (-616.735265), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setMaxEvaluations(1532);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double double0 = (-439.06724633913);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-2512.4), (-439.06724633913), (-2512.4), (-439.06724633913));
      double double1 = 1858.25;
      dormandPrince853Integrator0.getStepHandlers();
      StepNormalizer stepNormalizer0 = new StepNormalizer(1858.25, (FixedStepHandler) null);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        stepNormalizer0.init(0.0, (double[]) null, 294.78);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.sampling.StepNormalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 913.265;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1.0, 913.265, doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      SecantSolver secantSolver0 = new SecantSolver(0.0, 0.0);
      highamHall54Integrator0.addEventHandler(eventHandler0, 894.50208815, (-1986.5530974), 1661, (UnivariateSolver) secantSolver0);
      highamHall54Integrator0.getStepHandlers();
      int int0 = highamHall54Integrator0.getMaxEvaluations();
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double double0 = (-2391.2253454995);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2391.2253454995);
      doubleArray0[4] = (-2391.2253454995);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, (-2391.2253454995), doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 0.0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(5130.916998);
      classicalRungeKuttaIntegrator0.getEventHandlers();
      classicalRungeKuttaIntegrator0.getName();
      double double0 = 2.2737367544323206E-10;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = null;
      try {
        graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2.2737367544323206E-10, 2002.698743047, (double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(32.61046162143, 32.61046162143, 32.61046162143, (-4168.254830761944));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-789.8431498127284);
      doubleArray0[1] = 32.61046162143;
      doubleArray0[2] = 32.61046162143;
      doubleArray0[3] = (-4168.254830761944);
      doubleArray0[4] = (-4168.254830761944);
      graggBulirschStoerIntegrator0.setStepSizeControl((-4168.254830761944), 32.61046162143, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setControlFactors((-4168.254830761944), (-4168.254830761944), (-4168.254830761944), 1000.0);
      graggBulirschStoerIntegrator0.clearStepHandlers();
      assertEquals(32.61046162143, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1717.61813289277);
      doubleArray0[1] = (-1717.61813289277);
      doubleArray0[2] = (-1717.61813289277);
      doubleArray0[3] = (-1717.61813289277);
      doubleArray0[4] = (-1717.61813289277);
      doubleArray0[5] = (-1717.61813289277);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-1717.61813289277), (-1717.61813289277), doubleArray0, doubleArray0);
      dormandPrince54Integrator0.getEventHandlers();
      dormandPrince54Integrator0.clearStepHandlers();
      dormandPrince54Integrator0.getMaxEvaluations();
      dormandPrince54Integrator0.setMaxEvaluations(Integer.MAX_VALUE);
      dormandPrince54Integrator0.clearEventHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        dormandPrince54Integrator0.integrate(expandableStatefulODE0, (-1717.61813289277));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 6
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 429.8882;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(429.8882, 760.106113, doubleArray0, doubleArray0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        highamHall54Integrator0.computeDerivatives(724.445, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1088.71962752, 0.08333333333333333, 1088.71962752, 1088.71962752);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.08333333333333333, fixedStepHandler0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.08333333333333333;
      doubleArray0[2] = 0.08333333333333333;
      doubleArray0[3] = 1088.71962752;
      doubleArray0[4] = (-266.987252795);
      stepNormalizer0.init(0.0, doubleArray0, (-3042.5465346));
      highamHall54Integrator0.addStepHandler(stepNormalizer0);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 1088.71962752;
      doubleArray1[1] = 1088.71962752;
      doubleArray1[2] = 0.47766253643826434;
      doubleArray1[3] = 1088.71962752;
      doubleArray1[4] = 1088.71962752;
      doubleArray1[5] = 1088.71962752;
      // Undeclared exception!
      try { 
        highamHall54Integrator0.computeDerivatives(1088.71962752, doubleArray1, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(97.6141474);
      threeEighthesIntegrator0.getName();
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = null;
      try {
        adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(0, 0.0, 1964.9369554, (double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      int int0 = 0;
      double double0 = 0.0;
      double double1 = 182.89363316;
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = null;
      try {
        adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(0, 0, 0.0, 182.89363316, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // multistep method needs at least 0 previous steps, got 2
         //
         verifyException("org.apache.commons.math3.ode.MultistepIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1022.0;
      doubleArray0[1] = 1022.0;
      doubleArray0[2] = 1022.0;
      doubleArray0[3] = 1022.0;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1022.0, 1022.0, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.addStepHandler((StepHandler) null);
      dormandPrince54Integrator0.setMaxEvaluations(26);
      dormandPrince54Integrator0.getName();
      dormandPrince54Integrator0.getOrder();
      dormandPrince54Integrator0.clearEventHandlers();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-133.79488), 1389.22792865, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setOrderControl(423, 1022.0, 1939.42);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
  }
}
