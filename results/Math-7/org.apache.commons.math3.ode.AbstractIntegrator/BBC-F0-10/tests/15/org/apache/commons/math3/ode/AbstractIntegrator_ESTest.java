/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 00:03:15 GMT 2021
 */

package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
import org.apache.commons.math3.analysis.function.Acosh;
import org.apache.commons.math3.analysis.function.Sqrt;
import org.apache.commons.math3.analysis.function.Tanh;
import org.apache.commons.math3.analysis.solvers.BisectionSolver;
import org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver;
import org.apache.commons.math3.analysis.solvers.BrentSolver;
import org.apache.commons.math3.analysis.solvers.IllinoisSolver;
import org.apache.commons.math3.analysis.solvers.PegasusSolver;
import org.apache.commons.math3.analysis.solvers.SecantSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator;
import org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator;
import org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.EulerIntegrator;
import org.apache.commons.math3.ode.nonstiff.GillIntegrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.nonstiff.MidpointIntegrator;
import org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator;
import org.apache.commons.math3.ode.sampling.DummyStepHandler;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.StepHandler;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.apache.commons.math3.ode.sampling.StepNormalizerBounds;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegrator_ESTest extends AbstractIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(1871.5308839240456);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 1871.5308839240456;
      doubleArray0[2] = 1871.5308839240456;
      midpointIntegrator0.clearStepHandlers();
      EventHandler.Action eventHandler_Action0 = EventHandler.Action.STOP;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(eventHandler_Action0).when(eventHandler0).eventOccurred(anyDouble() , any(double[].class) , anyBoolean());
      doReturn(Double.NaN, 0.0, (double)2, (-969.2619165255687), (-781.59088287)).when(eventHandler0).g(anyDouble() , any(double[].class));
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(1.2690660953521729, 1871.5308839240456, 452.46763231663556, (double)2).when(eventHandler1).g(anyDouble() , any(double[].class));
      midpointIntegrator0.addEventHandler(eventHandler1, 909.9281, (-781.59088287), 2);
      midpointIntegrator0.addEventHandler(eventHandler0, 187.27063008104795, 1871.5308839240456, 2);
      doubleArray0[3] = 1871.5308839240456;
      double double0 = new Double(1871.5308839240456);
      GillIntegrator gillIntegrator0 = new GillIntegrator(0.0);
      EventHandler eventHandler2 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(eventHandler_Action0).when(eventHandler2).eventOccurred(anyDouble() , any(double[].class) , anyBoolean());
      doReturn(1871.5308839240456, 1648.50253375, Double.NaN, 452.46763231663556, (-962.0)).when(eventHandler2).g(anyDouble() , any(double[].class));
      midpointIntegrator0.addEventHandler(eventHandler2, 187.27063008104795, 187.27063008104795, 2);
      midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1871.5308839240456, doubleArray0, 2.384185791015625E-4, doubleArray0);
      midpointIntegrator0.getEvaluations();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(1871.5308839240456);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 1871.5308839240456;
      doubleArray0[2] = 1871.5308839240456;
      midpointIntegrator0.clearStepHandlers();
      EventHandler.Action eventHandler_Action0 = EventHandler.Action.STOP;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(eventHandler_Action0).when(eventHandler0).eventOccurred(anyDouble() , any(double[].class) , anyBoolean());
      doReturn(Double.NaN, 0.0, (double)2, (-975.1636138860857), (-781.59088287)).when(eventHandler0).g(anyDouble() , any(double[].class));
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler1).g(anyDouble() , any(double[].class));
      midpointIntegrator0.addEventHandler(eventHandler1, 909.9281, (-781.59088287), 2);
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      midpointIntegrator0.addStepHandler(dummyStepHandler0);
      midpointIntegrator0.addEventHandler(eventHandler0, 187.27063008104795, 1871.5308839240456, 2);
      doubleArray0[3] = 1871.5308839240456;
      midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1871.5308839240456, doubleArray0, Double.NaN, doubleArray0);
      GillIntegrator gillIntegrator0 = new GillIntegrator((-350262.7849481518));
      EventHandler eventHandler2 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler2).g(anyDouble() , any(double[].class));
      midpointIntegrator0.addEventHandler(eventHandler2, 187.27063008104795, 187.27063008104795, 2);
      midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1871.5308839240456, doubleArray0, 2.384185791015625E-4, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(1871.5308839240456);
      int int0 = 2;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1871.5308839240456;
      doubleArray0[1] = 1871.5308839240456;
      doubleArray0[2] = (double) 2;
      midpointIntegrator0.clearStepHandlers();
      double double0 = (-951.4290221819);
      EventHandler.Action eventHandler_Action0 = EventHandler.Action.RESET_DERIVATIVES;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(Double.NaN, 1871.5308839240456, (double)2, (-951.4290221819)).when(eventHandler0).g(anyDouble() , any(double[].class));
      midpointIntegrator0.addEventHandler(eventHandler0, 187.27063008104795, 1871.5308839240456, 2);
      doubleArray0[3] = 1871.5308839240456;
      double double1 = new Double(Double.NaN);
      midpointIntegrator0.getEvaluations();
      midpointIntegrator0.getCurrentStepStart();
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        midpointIntegrator0.integrate(expandableStatefulODE0, (-1.0));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (2) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(2.1474817754683006E9);
      StepNormalizer stepNormalizer0 = new StepNormalizer(293.0, (FixedStepHandler) null);
      threeEighthesIntegrator0.addStepHandler(stepNormalizer0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1454).when(secondOrderDifferentialEquations0).getDimension();
      threeEighthesIntegrator0.getMaxEvaluations();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      try { 
        threeEighthesIntegrator0.integrate(expandableStatefulODE0, 2.1474817754683006E9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.sampling.StepNormalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(1871.5308839240456);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = 1871.5308839240456;
      midpointIntegrator0.clearStepHandlers();
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(5, 0.39235877990722656, 2944.857844708, (-168.47201), (-168.47201));
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      adamsBashforthIntegrator0.integrate(expandableStatefulODE0, (-781.59088287));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(1871.5308839240456);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[4];
      doubleArray0[1] = 1871.5308839240456;
      doubleArray0[2] = 1871.5308839240456;
      midpointIntegrator0.clearStepHandlers();
      EventHandler.Action eventHandler_Action0 = EventHandler.Action.STOP;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(eventHandler_Action0).when(eventHandler0).eventOccurred(anyDouble() , any(double[].class) , anyBoolean());
      doReturn(Double.NaN, 0.0, (double)2, (-951.4290221819), (-781.59088287)).when(eventHandler0).g(anyDouble() , any(double[].class));
      midpointIntegrator0.addEventHandler(eventHandler0, 187.27063008104795, 1871.5308839240456, 2);
      doubleArray0[3] = 1871.5308839240456;
      midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1871.5308839240456, doubleArray0, Double.NaN, doubleArray0);
      GillIntegrator gillIntegrator0 = new GillIntegrator((-350262.7849481518));
      gillIntegrator0.clearEventHandlers();
      midpointIntegrator0.getEvaluations();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(1871.5308839240456);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1871.5308839240456;
      doubleArray0[1] = 1871.5308839240456;
      midpointIntegrator0.clearStepHandlers();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      midpointIntegrator0.setMaxEvaluations(2);
      midpointIntegrator0.addEventHandler(eventHandler0, (-461.52011), (-461.52011), 2147483645);
      try { 
        midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 187.27063008104795, doubleArray0, (double) 2, doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (2) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(1871.5308839240456);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      midpointIntegrator0.getEvaluations();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1871.5308839240456;
      doubleArray0[1] = 1871.5308839240456;
      doubleArray0[2] = (double) 2;
      midpointIntegrator0.clearStepHandlers();
      EventHandler.Action eventHandler_Action0 = EventHandler.Action.RESET_DERIVATIVES;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(eventHandler_Action0).when(eventHandler0).eventOccurred(anyDouble() , any(double[].class) , anyBoolean());
      doReturn(Double.NaN, 1871.5308839240456, (double)2, (-951.4290221819), (-781.59088287)).when(eventHandler0).g(anyDouble() , any(double[].class));
      midpointIntegrator0.addEventHandler(eventHandler0, 187.27063008104795, 1871.5308839240456, 2);
      doubleArray0[3] = 1871.5308839240456;
      midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1871.5308839240456, doubleArray0, (double) 2, doubleArray0);
      midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-951.4290221819), doubleArray0, 2.0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double double0 = 1871.5308839240456;
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(1871.5308839240456);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      BrentSolver brentSolver0 = new BrentSolver();
      midpointIntegrator0.addEventHandler(eventHandler0, 1871.5308839240456, (-1470.9557998067535), (-1396), (UnivariateSolver) brentSolver0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1871.5308839240456;
      doubleArray0[1] = 1871.5308839240456;
      midpointIntegrator0.clearStepHandlers();
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(1871.5308839240456, 454.168689512299, (-7.145758990550526E-9), 0.4444103240966797).when(eventHandler1).g(anyDouble() , any(double[].class));
      midpointIntegrator0.addEventHandler(eventHandler1, 5751.769593333533, (double) 2, 2);
      // Undeclared exception!
      try { 
        midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1515.5308839240456, doubleArray0, (-2.462631860370667E-9), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [-0, -178]
         //
         verifyException("org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-79.08);
      doubleArray0[1] = 2440.4290221821275;
      doubleArray0[2] = (-79.08);
      doubleArray0[3] = (-79.08);
      doubleArray0[4] = (-79.08);
      doubleArray0[5] = (-79.08);
      doubleArray0[6] = (-79.08);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-79.08), (-79.08), doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.getTotalDimension();
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 3.3087224502121107E-21);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 7
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(1871.5308839240456);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1871.5308839240456;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2, 1467.06582875, 2, 1461.2756598583942);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator1 = new GraggBulirschStoerIntegrator(462.222408127, 462.222408127, (-1.2645600379949252E-7), 0.0);
      graggBulirschStoerIntegrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2.2737367544323206E-10, doubleArray0, 0.0, doubleArray0);
      graggBulirschStoerIntegrator0.setControlFactors(Double.NaN, 1.0, (-3047.15616), (-2.401816502004675E-309));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(1871.5308839240456);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
      midpointIntegrator0.getMaxEvaluations();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1871.5308839240456;
      doubleArray0[1] = 1871.5308839240456;
      doubleArray0[2] = 1871.5308839240456;
      midpointIntegrator0.clearStepHandlers();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      midpointIntegrator0.addEventHandler(eventHandler0, 0.0, 0.0, (-50));
      double double0 = 2173.3110228301;
      double[] doubleArray1 = new double[0];
      try { 
        midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1871.5308839240456, doubleArray0, (double) Integer.MAX_VALUE, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 4
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(1871.5308839240456);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[4];
      midpointIntegrator0.clearStepHandlers();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      midpointIntegrator0.addEventHandler(eventHandler0, (-951.4290221819), 187.27063008104795, (-1050));
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = (-712.2803780374218);
      doubleArray1[2] = (-951.4290221819);
      doubleArray1[3] = 1489.0000000002274;
      midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-951.4290221819), doubleArray0, 1489.0000000002274, doubleArray1);
      GillIntegrator gillIntegrator0 = new GillIntegrator(2959.864811146);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double double0 = 1871.5308839240456;
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(1871.5308839240456);
      int int0 = 2;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1871.5308839240456;
      doubleArray0[1] = 1871.5308839240456;
      doubleArray0[2] = 1871.5308839240456;
      midpointIntegrator0.clearStepHandlers();
      double double1 = (-951.4290221819);
      double double2 = (-781.59088287);
      double double3 = 187.27063008104795;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-951.4290221819);
      doubleArray1[1] = 1871.5308839240456;
      doubleArray1[2] = 187.27063008104795;
      doubleArray1[3] = (-781.59088287);
      doubleArray1[4] = 252.30871267404564;
      doubleArray1[5] = 187.27063008104795;
      doubleArray1[6] = 187.27063008104795;
      doubleArray1[7] = 1871.5308839240456;
      doubleArray1[8] = (-951.4290221819);
      try { 
        midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1871.5308839240456, doubleArray0, 187.27063008104795, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 4
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double double0 = 1467.06582875;
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(1467.06582875);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1467.06582875;
      doubleArray0[1] = 1467.06582875;
      doubleArray0[2] = 1467.06582875;
      midpointIntegrator0.clearStepHandlers();
      double double1 = 4597.3330221819;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(1467.06582875, 1467.06582875, (-2447.004528), 4597.3330221819, 3655.4986715324).when(eventHandler0).g(anyDouble() , any(double[].class));
      midpointIntegrator0.addEventHandler(eventHandler0, (-16.9555), (-16.9555), 1340);
      try { 
        midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, Double.NaN, doubleArray0, 179.02298236982102, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [\uFFFD, \uFFFD], values: [3,655.499, 3,655.499]
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(1871.5308839240456);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1871.5308839240456;
      doubleArray0[1] = 1871.5308839240456;
      doubleArray0[2] = 1871.5308839240456;
      midpointIntegrator0.clearStepHandlers();
      EventHandler.Action eventHandler_Action0 = EventHandler.Action.CONTINUE;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1871.5308839240456, 1871.5308839240456, 1871.5308839240456, 730.270844);
      graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-951.4290221819), doubleArray0, 3645.904, doubleArray0);
      graggBulirschStoerIntegrator0.setControlFactors(1000.0, (-861.148068080887), 2125.01121131521, 1000.0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 2181.334);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double double0 = 1467.06582875;
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(1467.06582875);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1467.06582875;
      doubleArray0[1] = 1467.06582875;
      doubleArray0[2] = 1467.06582875;
      midpointIntegrator0.clearStepHandlers();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      midpointIntegrator0.addEventHandler(eventHandler0, (-16.9555), (-16.9555), 1340);
      // Undeclared exception!
      midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, Double.NaN, doubleArray0, 187.27063008104795, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(1871.5308839240456);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1871.5308839240456;
      doubleArray0[1] = 1871.5308839240456;
      doubleArray0[2] = 1871.5308839240456;
      midpointIntegrator0.clearStepHandlers();
      EventHandler.Action eventHandler_Action0 = EventHandler.Action.RESET_DERIVATIVES;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(eventHandler_Action0).when(eventHandler0).eventOccurred(anyDouble() , any(double[].class) , anyBoolean());
      doReturn(Double.NaN, 1871.5308839240456, (double)2, (-951.4290221819), (-781.59088287)).when(eventHandler0).g(anyDouble() , any(double[].class));
      midpointIntegrator0.addEventHandler(eventHandler0, 187.27063008104795, 1871.5308839240456, 2);
      doubleArray0[3] = 1871.5308839240456;
      midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1871.5308839240456, doubleArray0, 1619.22217125, doubleArray0);
      GillIntegrator gillIntegrator0 = new GillIntegrator((-470332.01716867066));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(1871.5308839240456);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
      midpointIntegrator0.getMaxEvaluations();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1871.5308839240456;
      doubleArray0[1] = 1871.5308839240456;
      doubleArray0[2] = 1871.5308839240456;
      midpointIntegrator0.clearStepHandlers();
      EventHandler.Action eventHandler_Action0 = EventHandler.Action.STOP;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(eventHandler_Action0).when(eventHandler0).eventOccurred(anyDouble() , any(double[].class) , anyBoolean());
      doReturn(Double.NaN, 1871.5308839240456, (double)2, (-951.4290221819), (-781.59088287)).when(eventHandler0).g(anyDouble() , any(double[].class));
      midpointIntegrator0.addEventHandler(eventHandler0, 0.0, 485.80172592131464, 2);
      midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-781.59088287), doubleArray0, 2173.3110228301, doubleArray0);
      GillIntegrator gillIntegrator0 = new GillIntegrator(3874.4883999999997);
      gillIntegrator0.clearEventHandlers();
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(2, 1871.5308839240456, (-3811.469179), doubleArray0, doubleArray0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      adamsBashforthIntegrator0.integrate(expandableStatefulODE0, 739.242);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1.0);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-1.0), 2166.734, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.getOrder();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      dormandPrince54Integrator0.clearStepHandlers();
      int int0 = 1045;
      dormandPrince54Integrator0.addEventHandler(eventHandler0, (-1.0), 1.4565123573071036E164, 1045);
      dormandPrince54Integrator0.clearStepHandlers();
      dormandPrince54Integrator0.getCurrentStepStart();
      dormandPrince54Integrator0.getCurrentSignedStepsize();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1.0), (-2855.055598), (-1.0), 831.9);
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.computeDerivatives((-2018.22422151), doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(810.7860728596656);
      // Undeclared exception!
      try { 
        gillIntegrator0.integrate((ExpandableStatefulODE) null, 810.7860728596656);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(1862.1182819122);
      int int0 = 2;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1862.1182819122;
      doubleArray0[1] = 1862.1182819122;
      doubleArray0[2] = 1862.1182819122;
      doubleArray0[3] = 1862.1182819122;
      midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1862.1182819122, doubleArray0, 1619.22217125, doubleArray0);
      midpointIntegrator0.getMaxEvaluations();
      double[] doubleArray1 = new double[8];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1862.1182819122, 2, (-2894.69685201473), 1619.22217125);
      highamHall54Integrator0.setMinReduction(Integer.MAX_VALUE);
      highamHall54Integrator0.getStepHandlers();
      highamHall54Integrator0.getEvaluations();
      highamHall54Integrator0.addStepHandler((StepHandler) null);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-450439.16998753976), Double.NaN, doubleArray0, doubleArray1);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, Double.NaN, 4868.6619368011, 996, (UnivariateSolver) null);
      graggBulirschStoerIntegrator0.setControlFactors(2.74877906944E14, (-1447.173884342959), 1.619992971420288, 2.2737367544323206E-10);
      graggBulirschStoerIntegrator0.getEventHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(Integer.MAX_VALUE).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(1871.5308839240456);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1871.5308839240456;
      doubleArray0[1] = 1871.5308839240456;
      doubleArray0[2] = 1871.5308839240456;
      midpointIntegrator0.clearStepHandlers();
      EventHandler.Action eventHandler_Action0 = EventHandler.Action.STOP;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(eventHandler_Action0).when(eventHandler0).eventOccurred(anyDouble() , any(double[].class) , anyBoolean());
      doReturn(Double.NaN, 1871.5308839240456, (double)2, (-951.4290221819), (-781.59088287)).when(eventHandler0).g(anyDouble() , any(double[].class));
      midpointIntegrator0.addEventHandler(eventHandler0, 187.27063008104795, 1871.5308839240456, 2);
      doubleArray0[3] = 1871.5308839240456;
      midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1871.5308839240456, doubleArray0, 1619.22217125, doubleArray0);
      GillIntegrator gillIntegrator0 = new GillIntegrator((-348391.25406422775));
      gillIntegrator0.clearStepHandlers();
      gillIntegrator0.clearEventHandlers();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1871.5308839240456, 1461.2756598583942, 1619.22217125, 9.094947017729282E-10);
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
      bracketingNthOrderBrentSolver0.getMaxEvaluations();
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler1, (-951.4290221819), 2.74877906944E14, 557, (UnivariateSolver) bracketingNthOrderBrentSolver0);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2.7651059253677425E203), 4.43247726423679E-115, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.getOrder();
      midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-781.59088287), doubleArray0, (-1267.3926087913146), doubleArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(1871.5308839240456);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1871.5308839240456;
      doubleArray0[1] = 1871.5308839240456;
      doubleArray0[2] = 1871.5308839240456;
      double double0 = (-5.806792575852521E10);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-5.806792575852521E10), (-1272.26639008039), (-5.685526961588504), (-5.806792575852521E10), 1871.5308839240456).when(eventHandler0).g(anyDouble() , any(double[].class));
      midpointIntegrator0.addEventHandler(eventHandler0, 187.27063008104795, 1871.5308839240456, 2);
      doubleArray0[3] = 1871.5308839240456;
      double double1 = 1619.22217125;
      try { 
        midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1871.5308839240456, doubleArray0, 1619.22217125, doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (2) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(1862.1182819122);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[4];
      midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1619.22217125, doubleArray0, (-3874.4884), doubleArray0);
      midpointIntegrator0.getMaxEvaluations();
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(2.0121798515319824, Double.NaN, 1619.22217125, 318.793911899542);
      highamHall54Integrator0.getStepHandlers();
      highamHall54Integrator0.addStepHandler((StepHandler) null);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1619.22217125, (-3874.4884), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setControlFactors((-2894.69685201473), (-2894.69685201473), 2, 2.2737367544323206E-10);
      graggBulirschStoerIntegrator0.getEventHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter1);
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 252.30871267404564);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 4
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(1871.5308839240456);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1871.5308839240456;
      doubleArray0[1] = 1871.5308839240456;
      doubleArray0[2] = 1871.5308839240456;
      midpointIntegrator0.clearStepHandlers();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((EventHandler.Action) null).when(eventHandler0).eventOccurred(anyDouble() , any(double[].class) , anyBoolean());
      doReturn(Double.NaN, 1871.5308839240456, (double)2, (-951.4290221819), (-781.59088287)).when(eventHandler0).g(anyDouble() , any(double[].class));
      midpointIntegrator0.addEventHandler(eventHandler0, 187.27063008104795, 1871.5308839240456, 2);
      doubleArray0[3] = 1871.5308839240456;
      midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1871.5308839240456, doubleArray0, 1619.22217125, doubleArray0);
      GillIntegrator gillIntegrator0 = new GillIntegrator((-470332.0171686704));
      gillIntegrator0.clearEventHandlers();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(1871.5308839240456);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1871.5308839240456;
      doubleArray0[1] = 1871.5308839240456;
      doubleArray0[2] = 1871.5308839240456;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      midpointIntegrator0.addEventHandler(eventHandler0, 187.27063008104795, 1871.5308839240456, 2);
      doubleArray0[3] = 1871.5308839240456;
      midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1871.5308839240456, doubleArray0, 1619.22217125, doubleArray0);
      midpointIntegrator0.getMaxEvaluations();
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 1619.22217125;
      GillIntegrator gillIntegrator0 = new GillIntegrator((-470332.0171686704));
      gillIntegrator0.getEventHandlers();
      gillIntegrator0.getCurrentStepStart();
      gillIntegrator0.getEventHandlers();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double double0 = 1862.1182819122;
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(1862.1182819122);
      int int0 = 2;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1862.1182819122;
      doubleArray0[1] = 1862.1182819122;
      doubleArray0[2] = 1862.1182819122;
      doubleArray0[3] = 1862.1182819122;
      try { 
        midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1862.1182819122, doubleArray0, 1862.1182819122, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(1862.1182819122);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[4];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1789.77652, (-2343.97999), 2011.864, 1862.1182819122);
      // Undeclared exception!
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2011.864, doubleArray0, 2.2937832658080656E27, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(0.0);
      gillIntegrator0.clearEventHandlers();
      gillIntegrator0.getEventHandlers();
      gillIntegrator0.getCurrentStepStart();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(1862.1182819122);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1862.1182819122;
      doubleArray0[1] = 1862.1182819122;
      doubleArray0[2] = 1862.1182819122;
      doubleArray0[3] = 1862.1182819122;
      midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1862.1182819122, doubleArray0, 1619.22217125, doubleArray0);
      midpointIntegrator0.getMaxEvaluations();
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 1619.22217125;
      doubleArray1[1] = 1619.22217125;
      doubleArray1[2] = 1619.22217125;
      double double0 = 0.6684302091598511;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.6684302091598511, Integer.MAX_VALUE, Integer.MAX_VALUE, 4.725191397657393E289);
      // Undeclared exception!
      try { 
        dormandPrince853Integrator0.computeDerivatives(0.0, doubleArray1, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(0.0);
      gillIntegrator0.clearEventHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      gillIntegrator0.integrate(expandableStatefulODE0, 0.0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double double0 = (-2285.77415743);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2285.77415743);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-2285.77415743), (-2285.77415743), doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double double1 = (-622.286);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-622.286);
      doubleArray1[1] = (-2285.77415743);
      doubleArray1[2] = (-2343.97999);
      doubleArray1[3] = (-2285.77415743);
      doubleArray1[4] = (-2343.97999);
      doubleArray1[5] = (-2285.77415743);
      doubleArray1[6] = (-2285.77415743);
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-2343.97999), doubleArray0, (-622.286), doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 2
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 45.9240445608, 45.9240445608, 0.0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 45.9240445608;
      highamHall54Integrator0.getCurrentSignedStepsize();
      double[] doubleArray1 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(45.9240445608, 1116.469017338, doubleArray1, doubleArray1);
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 1919);
      graggBulirschStoerIntegrator0.clearEventHandlers();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator((-1054.1469243398));
      eulerIntegrator0.clearStepHandlers();
      eulerIntegrator0.getCurrentSignedStepsize();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2690.9692761979);
      doubleArray0[1] = Double.NaN;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-2690.9692761979), 0.0, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (-1054.1469243398));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 2
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(Double.NaN, Double.NaN, doubleArray0, doubleArray0);
      highamHall54Integrator0.getOrder();
      highamHall54Integrator0.setMaxEvaluations(0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-1655.9466), 0, 5);
      highamHall54Integrator0.addEventHandler(eventHandler0, Double.NaN, (-1655.9466), 0, (UnivariateSolver) illinoisSolver0);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(5, 16.74637, 5, Double.NaN);
      dormandPrince54Integrator0.getOrder();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, 0.0, 0.0);
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 130);
      graggBulirschStoerIntegrator0.clearStepHandlers();
      highamHall54Integrator0.clearStepHandlers();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(541.0);
      classicalRungeKuttaIntegrator0.getName();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 541.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(541.0, 1.5, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      graggBulirschStoerIntegrator0.clearStepHandlers();
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 1
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double double0 = 45.9240445608;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 45.9240445608, 45.9240445608, 0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 45.9240445608;
      doubleArray0[1] = 0.0;
      expandableStatefulODE0.computeDerivatives(45.9240445608, doubleArray0, doubleArray0);
      // Undeclared exception!
      highamHall54Integrator0.integrate(expandableStatefulODE0, 120.0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(0.0);
      eulerIntegrator0.getEvaluations();
      double double0 = 1278.7560112319086;
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.NEITHER;
      StepNormalizer stepNormalizer0 = new StepNormalizer(1278.7560112319086, fixedStepHandler0, stepNormalizerBounds0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1278.7560112319086;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      eulerIntegrator0.addEventHandler(eventHandler0, 0.0, 0.0, 0, (UnivariateSolver) null);
      doubleArray0[2] = 1278.7560112319086;
      doubleArray0[3] = 1278.7560112319086;
      doubleArray0[4] = 1278.7560112319086;
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      eulerIntegrator0.addEventHandler(eventHandler1, 0.0, (-3285.07445004215), 172);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 0;
      stepNormalizer0.init(0, doubleArray0, 1278.7560112319086);
      eulerIntegrator0.addStepHandler(stepNormalizer0);
      int int0 = 1;
      // Undeclared exception!
      try { 
        eulerIntegrator0.computeDerivatives(1278.7560112319086, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(0.0);
      gillIntegrator0.setMaxEvaluations(413);
      gillIntegrator0.clearEventHandlers();
      gillIntegrator0.getEvaluations();
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, doubleArray0, doubleArray1);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.BOTH;
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.0, fixedStepHandler0, stepNormalizerBounds0);
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      double double0 = 108.0;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(108.0, Double.NaN, 0.0, 0.0);
      dormandPrince853Integrator0.getOrder();
      dormandPrince853Integrator0.setMaxEvaluations(8);
      dormandPrince853Integrator0.addEventHandler((EventHandler) null, 0.0, 0.0, (-1));
      graggBulirschStoerIntegrator0.setMaxEvaluations((-1));
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(1399, 1399, 0.0, Double.NaN, (-1785.866810755655));
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2285.77415743);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-2285.77415743), (-2285.77415743), doubleArray0, doubleArray0);
      dormandPrince853Integrator0.setMaxEvaluations(530);
      dormandPrince853Integrator0.clearEventHandlers();
      dormandPrince853Integrator0.clearStepHandlers();
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 1.4217997464522202E-8;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 1.1132270929158445;
      doubleArray1[5] = 1.0;
      doubleArray1[6] = 16.02299291577832;
      doubleArray1[7] = (-2343.97999);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1.0, 1.0, 0.0, (-3.4046500868740456E-4));
      graggBulirschStoerIntegrator0.getEventHandlers();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-3.4046500868740456E-4);
      graggBulirschStoerIntegrator0.setStepSizeControl(0.0, 1.0, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.clearEventHandlers();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      PegasusSolver pegasusSolver0 = new PegasusSolver((-3.4046500868740456E-4), 4613.8);
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 1.0, 1947.470009504117, 32, (UnivariateSolver) pegasusSolver0);
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler1, 20.0, 1.0, 32);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 4613.8;
      doubleArray1[1] = (double) 32;
      doubleArray1[2] = 3484.859602069717;
      doubleArray1[3] = 1947.470009504117;
      doubleArray1[4] = 1.0;
      doubleArray1[5] = 4613.8;
      doubleArray1[6] = (-3.4046500868740456E-4);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1.0, 32, doubleArray1, doubleArray1);
      int int0 = dormandPrince54Integrator0.getOrder();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 0.0, 2203.0, 2203.0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1357.0);
      doubleArray0[2] = (-1357.0);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      // Undeclared exception!
      try { 
        highamHall54Integrator0.computeDerivatives((-1357.0), doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1.0), 618.2443544, 618.2443544, 618.2443544);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double0 = Double.NaN;
      graggBulirschStoerIntegrator0.setControlFactors(Double.NaN, 0.0, 2800.28648, (-153.345));
      int int0 = (-2133);
      PegasusSolver pegasusSolver0 = new PegasusSolver((-2133));
      pegasusSolver0.getMaxEvaluations();
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (-1.0), 184.0, (-2133), (UnivariateSolver) pegasusSolver0);
      graggBulirschStoerIntegrator0.setControlFactors(1199.33796076018, 1.0, Double.NaN, 1.0);
      graggBulirschStoerIntegrator0.getName();
      graggBulirschStoerIntegrator0.clearEventHandlers();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-153.345);
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.computeDerivatives(184.0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(1862.11828);
      eulerIntegrator0.getMaxEvaluations();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-412.7354265005407), (-412.7354265005407), 1862.11828, 1862.11828);
      graggBulirschStoerIntegrator0.setStabilityCheck(true, Integer.MAX_VALUE, Integer.MAX_VALUE, (-719.32734723569));
      String string0 = graggBulirschStoerIntegrator0.getName();
      assertEquals("Gragg-Bulirsch-Stoer", string0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(2309.72630282846);
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      eulerIntegrator0.addStepHandler(dummyStepHandler0);
      int int0 = eulerIntegrator0.getMaxEvaluations();
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 45.9240445608, 45.9240445608, 0.0);
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(45.9240445608);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1271.3312422034;
      doubleArray0[1] = 1271.3312422034;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1271.3312422034;
      doubleArray0[6] = 1619.22217125;
      doubleArray0[7] = 1619.22217125;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 45.9240445608;
      doubleArray1[1] = 1619.22217125;
      midpointIntegrator0.getMaxEvaluations();
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1.25, (-2065.2757), doubleArray1, doubleArray1);
      dormandPrince54Integrator0.getStepHandlers();
      int int0 = dormandPrince54Integrator0.getOrder();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1935.222326);
      doubleArray0[1] = (-1935.222326);
      doubleArray0[2] = (-1935.222326);
      doubleArray0[3] = (-1935.222326);
      doubleArray0[4] = (-1935.222326);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1935.222326), (-1935.222326), doubleArray0, doubleArray0);
      highamHall54Integrator0.clearEventHandlers();
      highamHall54Integrator0.setInitialStepSize(Double.NaN);
      highamHall54Integrator0.getStepHandlers();
      highamHall54Integrator0.setSafety((-1935.222326));
      highamHall54Integrator0.setMaxEvaluations((-2675));
      highamHall54Integrator0.getStepHandlers();
      highamHall54Integrator0.addStepHandler((StepHandler) null);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(35.81684148639408, (-0.4353557902216363), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setControlFactors(707.03470111, 35.81684148639408, Double.NaN, (-1935.222326));
      graggBulirschStoerIntegrator0.getEventHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 344.2072);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 5
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-2674.932);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 0.0, (-2674.932), 6.8812326946963);
      ExpandableStatefulODE expandableStatefulODE0 = null;
      dormandPrince54Integrator0.getEventHandlers();
      // Undeclared exception!
      try { 
        dormandPrince54Integrator0.integrate((ExpandableStatefulODE) null, 28.6875);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      double double0 = (-2285.77415743);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2285.77415743);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-2285.77415743), (-2285.77415743), doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double double1 = (-622.286);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-622.286);
      doubleArray1[1] = (-2285.77415743);
      doubleArray1[2] = (-2343.97999);
      doubleArray1[3] = (-2285.77415743);
      doubleArray1[4] = (-2343.97999);
      doubleArray1[5] = (-2285.77415743);
      doubleArray1[6] = (-2285.77415743);
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-2343.97999), doubleArray0, (-622.286), doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 1.0001, 1.0001, 0.0);
      dormandPrince853Integrator0.getEventHandlers();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 1.0001, 0.0, 0.0);
      graggBulirschStoerIntegrator0.setOrderControl(2653, 1.0001, 0.0);
      FirstOrderConverter firstOrderConverter0 = null;
      try {
        firstOrderConverter0 = new FirstOrderConverter((SecondOrderDifferentialEquations) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.FirstOrderConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-2792.853200205));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double0 = (-5163.208057);
      int int0 = 50;
      threeEighthesIntegrator0.getEventHandlers();
      BisectionSolver bisectionSolver0 = new BisectionSolver((-1415.38812), (-920.018098));
      int int1 = (-209);
      Acosh acosh0 = new Acosh();
      double double1 = 0.0;
      Tanh tanh0 = new Tanh();
      Sqrt sqrt0 = new Sqrt();
      DerivativeStructure derivativeStructure0 = null;
      try {
        derivativeStructure0 = new DerivativeStructure(1660.7557111, (DerivativeStructure) null, 0.0, (DerivativeStructure) null, 3390.515770063, (DerivativeStructure) null, 50, (DerivativeStructure) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DerivativeStructure", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      double double0 = 0.0;
      GillIntegrator gillIntegrator0 = new GillIntegrator(0.0);
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(1.0);
      FirstOrderDifferentialEquations firstOrderDifferentialEquations0 = null;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1619.22217125;
      doubleArray0[2] = 1619.22217125;
      doubleArray0[3] = 1619.22217125;
      doubleArray0[4] = (-1223.74881977);
      doubleArray0[5] = (-1223.74881977);
      doubleArray0[6] = 5.162248481759758E164;
      // Undeclared exception!
      try { 
        midpointIntegrator0.integrate((FirstOrderDifferentialEquations) null, (-1223.74881977), doubleArray0, (-1946.0), doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-998.7), (-324.99685166150374), 4361.157629781374, (-1489.0));
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(1.0);
      midpointIntegrator0.addEventHandler((EventHandler) null, 810.7860728596656, (-3.197037359731606E-8), (-369));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1489.0);
      // Undeclared exception!
      try { 
        midpointIntegrator0.integrate((FirstOrderDifferentialEquations) null, 0.10379679501056671, doubleArray0, 2821.257069, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(1268.7639849976008);
      ExpandableStatefulODE expandableStatefulODE0 = null;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double double0 = 0.0;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      SecantSolver secantSolver0 = new SecantSolver();
      classicalRungeKuttaIntegrator0.addEventHandler(eventHandler0, 1268.7639849976008, 0.0, Integer.MAX_VALUE, (UnivariateSolver) secantSolver0);
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        classicalRungeKuttaIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, (double[]) null, 0.0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      double double0 = 0.0;
      GillIntegrator gillIntegrator0 = new GillIntegrator(0.0);
      gillIntegrator0.getMaxEvaluations();
      gillIntegrator0.clearEventHandlers();
      int int0 = (-2430);
      double double1 = 0.9999;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = 48.77811881027;
      doubleArray0[2] = (double) Integer.MAX_VALUE;
      doubleArray0[3] = (double) Integer.MAX_VALUE;
      doubleArray0[4] = 0.0;
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = null;
      try {
        adamsMoultonIntegrator0 = new AdamsMoultonIntegrator((-2430), 48.77811881027, 0.9999, doubleArray0, doubleArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer", e);
      }
  }
}
