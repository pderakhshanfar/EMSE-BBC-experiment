/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 00:13:38 GMT 2021
 */

package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.solvers.BrentSolver;
import org.apache.commons.math3.analysis.solvers.PegasusSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator;
import org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator;
import org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.EulerIntegrator;
import org.apache.commons.math3.ode.nonstiff.GillIntegrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.nonstiff.MidpointIntegrator;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.StepHandler;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.apache.commons.math3.ode.sampling.StepNormalizerBounds;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegrator_ESTest extends AbstractIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(7.733432668472264);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) 0, doubleArray0, 905.8144, doubleArray0);
      gillIntegrator0.getEvaluations();
      // Undeclared exception!
      try { 
        gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 905.8144, doubleArray0, 4.519199083083901E-9, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(7.733432668472264);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 7.733432668472264, doubleArray0, (-3003.169619392245), doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-3003.169619392245), (double)0).when(eventHandler0).g(anyDouble() , any(double[].class));
      gillIntegrator0.addEventHandler(eventHandler0, 4.31880454864738E-203, (double) 0, 0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        gillIntegrator0.integrate(expandableStatefulODE0, (-3003.169619392245));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double double0 = 7.733432668472264;
      GillIntegrator gillIntegrator0 = new GillIntegrator(7.733432668472264);
      int int0 = 0;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      gillIntegrator0.setMaxEvaluations(0);
      double double1 = 905.8144;
      try { 
        gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-379.21000250082), doubleArray0, 905.8144, doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(7.733432668472264);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 7.733432668472264, doubleArray0, (-3003.169619392245), doubleArray0);
      gillIntegrator0.getCurrentStepStart();
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-99.8528), doubleArray0, 7.733432668472264, doubleArray0);
      gillIntegrator0.getEventHandlers();
      gillIntegrator0.computeDerivatives(1126.65, doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1.118706134478866E-7));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(577).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-3977.0), 2.2737367544323206E-10, 0.0, (-0.6005724250359101), 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      gillIntegrator0.addEventHandler(eventHandler0, (-1.118706134478866E-7), 107.58623266847226, 577);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      gillIntegrator0.integrate(expandableStatefulODE0, 0.0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1249.4024);
      doubleArray0[1] = (-1249.4024);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1249.4024);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-1249.4024);
      doubleArray0[7] = (-657.294002);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-657.294002);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1249.4024), 0.0, doubleArray0, doubleArray1);
      graggBulirschStoerIntegrator0.getEventHandlers();
      graggBulirschStoerIntegrator0.setOrderControl(1153, (-3.4552363953199905E138), 0);
      graggBulirschStoerIntegrator0.setStepSizeControl((-657.294002), 0.0, doubleArray1, doubleArray1);
      graggBulirschStoerIntegrator0.setStabilityCheck(false, 0, 0, 1106.4959635570365);
      double[] doubleArray2 = new double[0];
      graggBulirschStoerIntegrator0.setMaxEvaluations(0);
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 1106.4959635570365;
      doubleArray3[1] = (double) 0;
      doubleArray3[2] = 0.037037037037037035;
      doubleArray3[3] = 0.037037037037037035;
      doubleArray3[4] = (-657.294002);
      doubleArray3[5] = 0.0;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.037037037037037035, 0.037037037037037035, doubleArray2, doubleArray3);
      dormandPrince54Integrator0.getOrder();
      try { 
        graggBulirschStoerIntegrator0.computeDerivatives((-2272.185456546), doubleArray3, doubleArray3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1.118706134478866E-7));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(577).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-3977.0), 2.2737367544323206E-10, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      gillIntegrator0.addEventHandler(eventHandler0, (-1.118706134478866E-7), 107.58623266847226, 577);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      gillIntegrator0.integrate(expandableStatefulODE0, 1731.905098847);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double double0 = 7.733432668472264;
      GillIntegrator gillIntegrator0 = new GillIntegrator(7.733432668472264);
      int int0 = 0;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-1346.663223269), (-1374.0), 4094.9777, (-1374.0), 7.733432668472264).when(eventHandler0).g(anyDouble() , any(double[].class));
      gillIntegrator0.addEventHandler(eventHandler0, 7.733432668472264, 7.733432668472264, 2421);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        gillIntegrator0.integrate(expandableStatefulODE0, 1108.6689464);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [\uFFFD, \uFFFD], values: [7.733, 7.733]
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(7.733432668472264);
      int int0 = (-1);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 4891.942761778079;
      doubleArray1[1] = 7.733432668472264;
      try { 
        gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) (-1), doubleArray0, (double) (-1), doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double double0 = 740.3;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(8.881784197001252E-13, 740.3, 8.881784197001252E-13, (-4891.942761778079));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      double double1 = 0.0;
      // Undeclared exception!
      dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-4891.942761778079), doubleArray0, 0.0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(1.4210854715202004E-11);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      gillIntegrator0.addEventHandler(eventHandler0, 1.4210854715202004E-11, (-777.6699), 186);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      gillIntegrator0.integrate(expandableStatefulODE0, (-777.6699));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1.118706134478866E-7));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(577).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      gillIntegrator0.addEventHandler(eventHandler0, (-1.118706134478866E-7), 107.58623266847226, 577);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      gillIntegrator0.integrate(expandableStatefulODE0, (-1.118706134478866E-7));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(7.733432668472264);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      GillIntegrator gillIntegrator1 = new GillIntegrator(7.733432668472264);
      gillIntegrator0.getCurrentStepStart();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 8.891090288030614E-265;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 7.733432668472264;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 8.891090288030614E-265, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getOrder();
      dormandPrince853Integrator0.getCurrentSignedStepsize();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = Double.NaN;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(Double.NaN, Double.NaN, doubleArray0, doubleArray0);
      highamHall54Integrator0.setMaxEvaluations(2421);
      highamHall54Integrator0.getEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        highamHall54Integrator0.integrate(expandableStatefulODE0, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 8
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double double0 = 7.733432668472264;
      GillIntegrator gillIntegrator0 = new GillIntegrator(7.733432668472264);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[0];
      try { 
        gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 7.733432668472264, doubleArray0, 7.733432668472264, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double double0 = 0.0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 7.733432668472264;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(7.733432668472264, 0.0, doubleArray0, doubleArray1);
      highamHall54Integrator0.setMaxEvaluations(69);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      double double1 = 0.0;
      int int0 = 2748;
      BrentSolver brentSolver0 = new BrentSolver(2748);
      highamHall54Integrator0.addEventHandler(eventHandler0, 0.0, 7.733432668472264, 2748, (UnivariateSolver) brentSolver0);
      highamHall54Integrator0.getEventHandlers();
      highamHall54Integrator0.getOrder();
      highamHall54Integrator0.getOrder();
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0.0);
      midpointIntegrator0.setMaxEvaluations(2748);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        midpointIntegrator0.integrate(expandableStatefulODE1, (-838.5824));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (2,748) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double double0 = 7.660837495888601;
      GillIntegrator gillIntegrator0 = new GillIntegrator(7.660837495888601);
      double double1 = new Double(7.660837495888601);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      gillIntegrator0.integrate(expandableStatefulODE0, double0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = 1947.45365356599;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-11.573902539959631);
      doubleArray1[1] = 2.2404374302607883;
      doubleArray1[2] = (-11.573902539959631);
      doubleArray1[3] = (-11.573902539959631);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-11.573902539959631), 2.2404374302607883, doubleArray0, doubleArray1);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      PegasusSolver pegasusSolver0 = new PegasusSolver((-11.573902539959631));
      highamHall54Integrator0.addEventHandler(eventHandler0, 1947.45365356599, (-4222.77370131058), (-334), (UnivariateSolver) pegasusSolver0);
      highamHall54Integrator0.getEventHandlers();
      highamHall54Integrator0.getOrder();
      highamHall54Integrator0.getOrder();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, (-11.573902539959631), 0.0);
      graggBulirschStoerIntegrator0.setInterpolationControl(true, (-334));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(62.5, 2937500.0, 0.2, 2568.1995005758763);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.LAST;
      StepNormalizer stepNormalizer0 = new StepNormalizer((-3912.83578763), fixedStepHandler0, stepNormalizerBounds0);
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 1754.7023145);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(Double.NaN);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(79).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.NaN;
      double double0 = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (-1153.9890682409796);
      try { 
        midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, Double.NaN, doubleArray0, 0.0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 158
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1.0));
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1.0), (-1.0), 0.0, 165.20045171727028);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (-540.0), 0.0, 797);
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      PegasusSolver pegasusSolver0 = new PegasusSolver(30);
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler1, 0.225, (-1.0), 30, (UnivariateSolver) pegasusSolver0);
      gillIntegrator0.getStepHandlers();
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-4160.07618198006);
      doubleArray0[1] = (-4.436036387594894);
      doubleArray0[2] = (-4.436036387594894);
      doubleArray0[3] = (-4160.07618198006);
      doubleArray0[4] = (-4.436036387594894);
      doubleArray0[5] = (-4.436036387594894);
      doubleArray0[6] = (-4.436036387594894);
      doubleArray0[7] = (-4.436036387594894);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-4160.07618198006), (-4.436036387594894), doubleArray0, doubleArray0);
      double double0 = dormandPrince54Integrator0.getCurrentSignedStepsize();
      assertEquals(135.8464181288207, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1768.478738462);
      doubleArray0[1] = (-3.7333333333333334);
      doubleArray0[2] = (-3.7333333333333334);
      doubleArray0[3] = (-1768.478738462);
      doubleArray0[4] = (-3.7333333333333334);
      doubleArray0[5] = (-3.7333333333333334);
      doubleArray0[6] = (-1768.478738462);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1768.478738462), (-3.7333333333333334), doubleArray0, doubleArray0);
      highamHall54Integrator0.setSafety((-0.12028));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray1 = new double[0];
      try { 
        highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-3.7333333333333334), doubleArray0, (-3716.7), doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(2888.065370111423);
      classicalRungeKuttaIntegrator0.getCurrentStepStart();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 2888.065370111423;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 2888.065370111423;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = 2888.065370111423;
      // Undeclared exception!
      try { 
        classicalRungeKuttaIntegrator0.integrate((FirstOrderDifferentialEquations) null, 2888.065370111423, doubleArray0, Double.NaN, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(Double.NaN);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.NaN;
      double double0 = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = Double.NaN;
      double double1 = (-1153.9890682409796);
      doubleArray0[3] = (-1153.9890682409796);
      try { 
        midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, Double.NaN, doubleArray0, 0.0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double double0 = 1.0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1.0;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1.0, 1.0, doubleArray0, doubleArray0);
      highamHall54Integrator0.getEvaluations();
      highamHall54Integrator0.setMaxGrowth(0);
      highamHall54Integrator0.setStepSizeControl(1.0, 835.2825711233, doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        highamHall54Integrator0.computeDerivatives(1.0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(93.4053241836243, 0.0, 0.0, 1.0);
      dormandPrince54Integrator0.setMaxGrowth(93.4053241836243);
      dormandPrince54Integrator0.getEvaluations();
      dormandPrince54Integrator0.getName();
      double[] doubleArray0 = new double[0];
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(224, 924.527378737, 1.0, doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double double0 = 7.733432668472264;
      GillIntegrator gillIntegrator0 = new GillIntegrator(7.733432668472264);
      // Undeclared exception!
      try { 
        gillIntegrator0.integrate((ExpandableStatefulODE) null, 7.733432668472264);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(2582.254);
      gillIntegrator0.getStepHandlers();
      double double0 = gillIntegrator0.getCurrentStepStart();
      assertEquals(Double.NaN, double0, 0.01);
      
      gillIntegrator0.getEvaluations();
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-2519.5735625532975), 1014.372457006, 0.8571428571428571, 1014.372457006);
      dormandPrince853Integrator0.getStepHandlers();
      dormandPrince853Integrator0.setSafety(0.8571428571428571);
      dormandPrince853Integrator0.clearStepHandlers();
      int int0 = dormandPrince853Integrator0.getMaxEvaluations();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2519.5735625532975);
      doubleArray0[1] = (-1133.8);
      doubleArray0[2] = 1014.372457006;
      doubleArray0[3] = 1014.372457006;
      doubleArray0[4] = 1014.372457006;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1014.372457006, (-1133.8), doubleArray0, doubleArray0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.FIRST;
      StepNormalizer stepNormalizer0 = new StepNormalizer(1264.7056875168396, fixedStepHandler0, stepNormalizerBounds0);
      dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
      int int1 = dormandPrince54Integrator0.getOrder();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double double0 = (-408.21055160944);
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-408.21055160944));
      int int0 = 5;
      double double1 = 1.0;
      double double2 = 0.0;
      double double3 = (-2754.0437);
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(5, 1.0, 0.0, 0.0, (-2754.0437));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      int int1 = (-1);
      adamsBashforthIntegrator0.setMaxEvaluations((-1));
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      try { 
        adamsBashforthIntegrator0.integrate(expandableStatefulODE0, (double) 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one column
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1650.2471938237627, 1650.2471938237627, 627.108030519, 627.108030519);
      dormandPrince853Integrator0.getMaxEvaluations();
      int int0 = dormandPrince853Integrator0.getOrder();
      dormandPrince853Integrator0.setMaxEvaluations(8);
      dormandPrince853Integrator0.clearEventHandlers();
      dormandPrince853Integrator0.getEventHandlers();
      dormandPrince853Integrator0.setSafety((-2048.87161867263));
      dormandPrince853Integrator0.clearStepHandlers();
      dormandPrince853Integrator0.getName();
      dormandPrince853Integrator0.getEvaluations();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1.0, 0.0, 8, 1650.2471938237627);
      graggBulirschStoerIntegrator0.setOrderControl(1, (-1523.6662166451), 8);
      graggBulirschStoerIntegrator0.setMaxEvaluations(8);
      graggBulirschStoerIntegrator0.setInterpolationControl(false, (-638));
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-638), 1.0, 0, (-3457480.0));
      int int1 = dormandPrince54Integrator0.getOrder();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1249.4024);
      doubleArray0[1] = (-1249.4024);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1249.4024);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-1249.4024);
      doubleArray0[7] = (-657.294002);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-657.294002);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1249.4024), 0.0, doubleArray0, doubleArray1);
      graggBulirschStoerIntegrator0.getEventHandlers();
      graggBulirschStoerIntegrator0.setStepSizeControl((-657.294002), 0.0, doubleArray1, doubleArray1);
      graggBulirschStoerIntegrator0.setStabilityCheck(false, 0, 0, 1106.4959635570365);
      double[] doubleArray2 = new double[0];
      double[] doubleArray3 = new double[6];
      doubleArray3[0] = 1106.4959635570365;
      doubleArray3[1] = (double) 0;
      doubleArray3[2] = 0.037037037037037035;
      doubleArray3[3] = 0.037037037037037035;
      doubleArray3[4] = (-657.294002);
      doubleArray3[5] = 0.0;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.037037037037037035, 0.037037037037037035, doubleArray2, doubleArray3);
      int int0 = dormandPrince54Integrator0.getOrder();
      assertEquals(5, int0);
      
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.computeDerivatives((-2272.185456546), doubleArray3, doubleArray3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator((-1248.9155745011115));
      eulerIntegrator0.getMaxEvaluations();
      EventHandler eventHandler0 = null;
      double double0 = 181.339;
      eulerIntegrator0.addEventHandler((EventHandler) null, 1192.5831468, 181.339, 728);
      double[] doubleArray0 = null;
      eulerIntegrator0.clearEventHandlers();
      eulerIntegrator0.addStepHandler((StepHandler) null);
      // Undeclared exception!
      try { 
        eulerIntegrator0.computeDerivatives(Integer.MAX_VALUE, (double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, 0.0, 0.0);
      graggBulirschStoerIntegrator0.getMaxEvaluations();
      String string0 = graggBulirschStoerIntegrator0.getName();
      assertEquals("Gragg-Bulirsch-Stoer", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(2666.2559497118027);
      eulerIntegrator0.getMaxEvaluations();
      eulerIntegrator0.addEventHandler((EventHandler) null, 1207.77, 2666.2559497118027, (-615));
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = (-165.376);
      doubleArray1[1] = 2666.2559497118027;
      doubleArray1[2] = 2666.2559497118027;
      doubleArray1[3] = 2666.2559497118027;
      doubleArray1[4] = 2666.2559497118027;
      eulerIntegrator0.clearEventHandlers();
      doubleArray1[5] = 2666.2559497118027;
      eulerIntegrator0.addStepHandler((StepHandler) null);
      // Undeclared exception!
      try { 
        eulerIntegrator0.computeDerivatives(2666.2559497118027, (double[]) null, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-3918.499047822);
      doubleArray0[1] = (-3918.499047822);
      doubleArray0[2] = (-3918.499047822);
      doubleArray0[3] = (-3918.499047822);
      doubleArray0[4] = (-3918.499047822);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3918.499047822), (-3918.499047822), doubleArray0, doubleArray0);
      double double0 = (-223.930571);
      double[] doubleArray1 = null;
      // Undeclared exception!
      try { 
        highamHall54Integrator0.setStepSizeControl((-3918.499047822), (-223.930571), (double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double double0 = 409.9;
      double[] doubleArray0 = new double[2];
      double double1 = (-1594.34295);
      doubleArray0[0] = (-1594.34295);
      doubleArray0[1] = 409.9;
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(228, 228, 409.9, doubleArray0, doubleArray0);
  }
}
