/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 00:08:00 GMT 2021
 */

package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.function.Sinh;
import org.apache.commons.math3.analysis.solvers.MullerSolver;
import org.apache.commons.math3.analysis.solvers.PegasusSolver;
import org.apache.commons.math3.analysis.solvers.RiddersSolver;
import org.apache.commons.math3.analysis.solvers.SecantSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator;
import org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator;
import org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.GillIntegrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.nonstiff.MidpointIntegrator;
import org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator;
import org.apache.commons.math3.ode.sampling.DummyStepHandler;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.StepHandler;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.apache.commons.math3.ode.sampling.StepNormalizerBounds;
import org.apache.commons.math3.ode.sampling.StepNormalizerMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegrator_ESTest extends AbstractIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(235.071517, 2455.3032877, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.clearEventHandlers();
      dormandPrince54Integrator0.getStepHandlers();
      dormandPrince54Integrator0.getStepHandlers();
      dormandPrince54Integrator0.getOrder();
      DormandPrince54Integrator dormandPrince54Integrator1 = new DormandPrince54Integrator((-9.036933434595339E-8), 2455.3032877, (-9.036933434595339E-8), (-6.892713087722722E-8));
      dormandPrince54Integrator0.getOrder();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(866).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      DormandPrince54Integrator dormandPrince54Integrator2 = new DormandPrince54Integrator(5, 1000.0, doubleArray0, doubleArray0);
      double double0 = new Double(5);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        dormandPrince54Integrator0.integrate(expandableStatefulODE0, 1000.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1,732 != 0
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1000.0, (-9.036933434595339E-8), 1000.0, 1000.0);
      double[] doubleArray0 = new double[1];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.7214844226837158, 2455.3032877, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.clearEventHandlers();
      dormandPrince54Integrator0.getStepHandlers();
      dormandPrince54Integrator0.getEvaluations();
      dormandPrince54Integrator0.getEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(2455.3032877);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.BOTH;
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.7214844226837158, fixedStepHandler0, stepNormalizerMode0, stepNormalizerBounds0);
      threeEighthesIntegrator0.addStepHandler(stepNormalizer0);
      MullerSolver mullerSolver0 = new MullerSolver((-159.4100773661));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      threeEighthesIntegrator0.addEventHandler(eventHandler0, 1072.054, 158.72237499, 0, (UnivariateSolver) mullerSolver0);
      double double0 = 793.3331168987013;
      // Undeclared exception!
      threeEighthesIntegrator0.integrate(expandableStatefulODE0, double0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1000.0, (-9.036933434595339E-8), 1000.0, 1000.0);
      double[] doubleArray0 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.7214844226837158, 2455.3032877, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.clearEventHandlers();
      dormandPrince54Integrator0.getStepHandlers();
      dormandPrince54Integrator0.getEvaluations();
      dormandPrince54Integrator0.getEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(394).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      DormandPrince54Integrator dormandPrince54Integrator1 = new DormandPrince54Integrator((-913.8026471461311), 0, doubleArray0, doubleArray0);
      DormandPrince54Integrator dormandPrince54Integrator2 = new DormandPrince54Integrator(2455.3032877, (-1303.63595602), 0.7214844226837158, 1000.0);
      dormandPrince54Integrator2.integrate((FirstOrderDifferentialEquations) firstOrderConverter1, (double) 394, doubleArray0, (double) 0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1000.0, (-9.036933434595339E-8), 1000.0, 1000.0);
      double[] doubleArray0 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.7214844226837158, 2455.3032877, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.clearEventHandlers();
      dormandPrince54Integrator0.getStepHandlers();
      dormandPrince54Integrator0.getEvaluations();
      dormandPrince54Integrator0.getEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(394).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-168.3169665));
      MullerSolver mullerSolver0 = new MullerSolver(293.721);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(7.105427357601002E-12, (double)0, 293.721, (-669.6665479250165), (double)0).when(eventHandler0).g(anyDouble() , any(double[].class));
      threeEighthesIntegrator0.addEventHandler(eventHandler0, 4.711165925070571E-58, 4.711165925070571E-58, 661, (UnivariateSolver) mullerSolver0);
      // Undeclared exception!
      threeEighthesIntegrator0.integrate(expandableStatefulODE0, 2455.3032877);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double double0 = (-9.036933434595339E-8);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1000.0, (-9.036933434595339E-8), 1000.0, 1000.0);
      double double1 = 2455.3032877;
      double[] doubleArray0 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.7214844226837158, 2455.3032877, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.clearEventHandlers();
      dormandPrince54Integrator0.getStepHandlers();
      dormandPrince54Integrator0.getEvaluations();
      int int0 = 3411;
      dormandPrince54Integrator0.clearStepHandlers();
      dormandPrince54Integrator0.setSafety((-9.036933434595339E-8));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      DormandPrince54Integrator dormandPrince54Integrator1 = new DormandPrince54Integrator(1000.0, 2721.9973, doubleArray0, doubleArray0);
      dormandPrince54Integrator1.clearEventHandlers();
      dormandPrince54Integrator1.setInitialStepSize(0);
      dormandPrince54Integrator1.setMaxEvaluations(3411);
      dormandPrince54Integrator1.clearStepHandlers();
      dormandPrince54Integrator0.setMaxEvaluations(3411);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-3.176199594915881E-8), 1.7763568394002505E-12, (-3.176199594915881E-8), 0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      dormandPrince54Integrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1.7763568394002505E-12, doubleArray0, (-3.176199594915881E-8), doubleArray0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        dormandPrince54Integrator1.integrate(expandableStatefulODE0, (double) 0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (3,411) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1000.0, (-9.036933434595339E-8), 1000.0, 1000.0);
      double[] doubleArray0 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.7214844226837158, 2455.3032877, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.clearEventHandlers();
      dormandPrince54Integrator0.getStepHandlers();
      dormandPrince54Integrator0.getEvaluations();
      dormandPrince54Integrator0.clearStepHandlers();
      dormandPrince54Integrator0.setSafety((-9.036933434595339E-8));
      PegasusSolver pegasusSolver0 = new PegasusSolver(162.01251134919);
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(3411);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      threeEighthesIntegrator0.addEventHandler(eventHandler0, 2721.9973, 162.01251134919, 1253, (UnivariateSolver) null);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      try { 
        threeEighthesIntegrator0.integrate(expandableStatefulODE0, (-826.926));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-1567.812658327));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((double)0, (double)0, 3741.353, (-1128.63), 1259.396076886756).when(eventHandler0).g(anyDouble() , any(double[].class));
      PegasusSolver pegasusSolver0 = new PegasusSolver(1893.12925232);
      threeEighthesIntegrator0.addEventHandler(eventHandler0, (-1567.812658327), (-1567.812658327), 1, (UnivariateSolver) pegasusSolver0);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        threeEighthesIntegrator0.integrate(expandableStatefulODE0, (-1567.812658327));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (1) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1000.0, (-9.036933434595339E-8), 1000.0, 1000.0);
      double[] doubleArray0 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.7214844226837158, 2455.3032877, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.clearEventHandlers();
      dormandPrince54Integrator0.getStepHandlers();
      dormandPrince54Integrator0.getEvaluations();
      DormandPrince54Integrator dormandPrince54Integrator1 = new DormandPrince54Integrator(6.6174449004242214E-21, 1.0, doubleArray0, doubleArray0);
      dormandPrince54Integrator1.clearStepHandlers();
      dormandPrince54Integrator1.setSafety(3411);
      DormandPrince54Integrator dormandPrince54Integrator2 = new DormandPrince54Integrator(1000.0, 6.6174449004242214E-21, doubleArray0, doubleArray0);
      dormandPrince54Integrator1.clearEventHandlers();
      dormandPrince54Integrator1.setInitialStepSize((-9.036933434595339E-8));
      dormandPrince54Integrator2.setMaxEvaluations(1618);
      dormandPrince54Integrator2.clearStepHandlers();
      dormandPrince54Integrator1.setMaxEvaluations(819);
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      dormandPrince853Integrator0.addStepHandler(dummyStepHandler0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(819, 1.1368683772161603E-10, 62.46037956080294, 62.46037956080294);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      try { 
        dormandPrince54Integrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 135.53691607088504, doubleArray0, 135.53691607088504, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.0);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-1.0);
      doubleArray0[0] = (-1.0);
      doubleArray0[2] = (-1.0);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-1.0), (-1.0), doubleArray0, doubleArray0);
      dormandPrince54Integrator0.clearEventHandlers();
      dormandPrince54Integrator0.getStepHandlers();
      dormandPrince54Integrator0.getEvaluations();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(4.94E-321, (-1.0), 0.0, (-1.0), (-2640.168607)).when(eventHandler0).g(anyDouble() , any(double[].class));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(1000.0);
      MullerSolver mullerSolver0 = new MullerSolver(0);
      threeEighthesIntegrator0.addEventHandler(eventHandler0, (-1.0), 293.721, 634, (UnivariateSolver) mullerSolver0);
      try { 
        threeEighthesIntegrator0.integrate(expandableStatefulODE0, 7.105427357601002E-12);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of iterations=633, maximum iterations=633, initial=\uFFFD, lower bound=\uFFFD, upper bound=\uFFFD, final a value=\uFFFD, final b value=\uFFFD, f(a)=-2,640.169, f(b)=-2,640.169
         //
         verifyException("org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1000.0, (-9.036933434595339E-8), 1000.0, 1000.0);
      double[] doubleArray0 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.7214844226837158, 2455.3032877, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.clearEventHandlers();
      dormandPrince54Integrator0.getStepHandlers();
      dormandPrince54Integrator0.getEvaluations();
      dormandPrince54Integrator0.clearStepHandlers();
      dormandPrince54Integrator0.setSafety((-9.036933434595339E-8));
      DormandPrince54Integrator dormandPrince54Integrator1 = new DormandPrince54Integrator(1000.0, 2721.9973, doubleArray0, doubleArray0);
      dormandPrince54Integrator1.clearStepHandlers();
      dormandPrince54Integrator0.setSafety(2721.9973);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      doReturn((-9.036933434595339E-8), (-9.036933434595339E-8), 0.7214844226837158, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      dormandPrince54Integrator0.setStepSizeControl(1.6458113136245473E-38, 1.0, doubleArray0, doubleArray0);
      dormandPrince54Integrator1.setMaxEvaluations((-4269));
      dormandPrince54Integrator1.addEventHandler(eventHandler0, 1000.0000000317619, (-9.036933434595339E-8), 0, (UnivariateSolver) null);
      dormandPrince54Integrator1.setMaxEvaluations(3411);
      dormandPrince54Integrator0.setMaxEvaluations(0);
      dormandPrince54Integrator1.getEventHandlers();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(3411, 0, (-1831.77158477), 0.7214844226837158);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      dormandPrince54Integrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1056.3331168987013, doubleArray0, 263.0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      // Undeclared exception!
      try { 
        dormandPrince54Integrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter1, 1468.3735, doubleArray0, (-1831.77158477), doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1000.0, (-9.036933434595339E-8), 1000.0, 1000.0);
      double[] doubleArray0 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.7214844226837158, 2455.3032877, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.clearEventHandlers();
      dormandPrince54Integrator0.getStepHandlers();
      dormandPrince54Integrator0.getEvaluations();
      dormandPrince54Integrator0.clearStepHandlers();
      dormandPrince54Integrator0.setSafety((-9.036933434595339E-8));
      DormandPrince54Integrator dormandPrince54Integrator1 = new DormandPrince54Integrator(1000.0, 2721.9973, doubleArray0, doubleArray0);
      dormandPrince54Integrator1.clearStepHandlers();
      dormandPrince54Integrator0.setSafety(2721.9973);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-9.036933434595339E-8), (-9.036933434595339E-8), 0.7214844226837158).when(eventHandler0).g(anyDouble() , any(double[].class));
      dormandPrince54Integrator1.setMaxEvaluations((-4269));
      dormandPrince54Integrator1.addEventHandler(eventHandler0, 1000.0000000317619, (-9.036933434595339E-8), 0, (UnivariateSolver) null);
      dormandPrince54Integrator1.setMaxEvaluations(3411);
      dormandPrince54Integrator0.setMaxEvaluations(0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(3411, 0, (-1831.77158477), 0.7214844226837158);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      dormandPrince54Integrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1056.3331168987013, doubleArray0, 263.0, doubleArray0);
      graggBulirschStoerIntegrator0.setControlFactors(3216.3, 4.825712712114668E-10, 2455.3032877, 3411);
      dormandPrince54Integrator1.computeDerivatives((-4269), doubleArray0, doubleArray0);
      dormandPrince54Integrator1.getEvaluations();
      dormandPrince853Integrator0.getName();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1000.0, (-9.036933434595339E-8), 1000.0, 1000.0);
      double[] doubleArray0 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.7214844226837158, 2455.3032877, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.clearEventHandlers();
      dormandPrince54Integrator0.getStepHandlers();
      dormandPrince54Integrator0.getEvaluations();
      dormandPrince54Integrator0.clearStepHandlers();
      dormandPrince54Integrator0.setSafety((-9.036933434595339E-8));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      dormandPrince54Integrator0.addEventHandler(eventHandler0, (-9.036933434595339E-8), 0.7214844226837158, 3411, (UnivariateSolver) null);
      DormandPrince54Integrator dormandPrince54Integrator1 = new DormandPrince54Integrator(1000.0, 2721.9973, doubleArray0, doubleArray0);
      dormandPrince54Integrator1.clearEventHandlers();
      dormandPrince54Integrator1.setInitialStepSize(0);
      dormandPrince54Integrator1.setMaxEvaluations(3411);
      dormandPrince54Integrator0.setMaxEvaluations(3411);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-3.176199594915881E-8), 1.7763568394002505E-12, 1401.2800984, 0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      dormandPrince54Integrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1.7763568394002505E-12, doubleArray0, (-3.176199594915881E-8), doubleArray0);
      dormandPrince853Integrator0.getOrder();
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(8, 1204.0107141565697, 2455.3032877, doubleArray0, doubleArray0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      try { 
        adamsMoultonIntegrator0.integrate(expandableStatefulODE0, 4.94E-321);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one column
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1000.0, (-9.036933434595339E-8), 1000.0, 1000.0);
      double[] doubleArray0 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.7214844226837158, 2455.3032877, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.clearEventHandlers();
      dormandPrince54Integrator0.getStepHandlers();
      dormandPrince54Integrator0.getEvaluations();
      dormandPrince54Integrator0.clearStepHandlers();
      dormandPrince54Integrator0.setSafety((-9.036933434595339E-8));
      DormandPrince54Integrator dormandPrince54Integrator1 = new DormandPrince54Integrator(1000.0, 2721.9973, doubleArray0, doubleArray0);
      dormandPrince54Integrator1.clearStepHandlers();
      dormandPrince54Integrator0.setSafety(2721.9973);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-9.036933434595339E-8), 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      dormandPrince54Integrator1.setMaxEvaluations((-4269));
      dormandPrince54Integrator1.addEventHandler(eventHandler0, 1000.0000000317619, (-9.036933434595339E-8), 0, (UnivariateSolver) null);
      dormandPrince54Integrator1.setMaxEvaluations(3411);
      dormandPrince54Integrator0.setMaxEvaluations(0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(3411, 0, (-1831.77158477), 0.7214844226837158);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      // Undeclared exception!
      try { 
        dormandPrince54Integrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1056.3331168987013, doubleArray0, 263.0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1000.0, (-9.036933434595339E-8), 1000.0, 1000.0);
      double double0 = 2455.3032877;
      double[] doubleArray0 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.7214844226837158, 2455.3032877, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.clearEventHandlers();
      dormandPrince54Integrator0.getStepHandlers();
      dormandPrince54Integrator0.getEvaluations();
      int int0 = 3411;
      dormandPrince54Integrator0.clearStepHandlers();
      dormandPrince54Integrator0.setSafety((-9.036933434595339E-8));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      dormandPrince54Integrator0.addEventHandler(eventHandler0, (-9.036933434595339E-8), 0.7214844226837158, 3411, (UnivariateSolver) null);
      DormandPrince54Integrator dormandPrince54Integrator1 = new DormandPrince54Integrator(1000.0, 2721.9973, doubleArray0, doubleArray0);
      dormandPrince54Integrator1.clearStepHandlers();
      dormandPrince54Integrator0.setSafety(2721.9973);
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(eventHandler1).g(anyDouble() , any(double[].class));
      dormandPrince54Integrator1.setMaxEvaluations((-4269));
      dormandPrince54Integrator1.addEventHandler(eventHandler1, 1000.0000000317619, (-9.036933434595339E-8), 0, (UnivariateSolver) null);
      dormandPrince54Integrator1.setMaxEvaluations(3411);
      dormandPrince54Integrator0.setMaxEvaluations(0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(3411, 0, (-1831.77158477), 0.7214844226837158);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      // Undeclared exception!
      try { 
        dormandPrince54Integrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1056.3331168987013, doubleArray0, 263.0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1000.0, (-9.036933434595339E-8), 1000.0, 1000.0);
      double[] doubleArray0 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.7214844226837158, 2455.3032877, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.clearEventHandlers();
      dormandPrince54Integrator0.getStepHandlers();
      dormandPrince54Integrator0.getEvaluations();
      dormandPrince54Integrator0.clearStepHandlers();
      dormandPrince54Integrator0.setSafety((-9.036933434595339E-8));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      DormandPrince54Integrator dormandPrince54Integrator1 = new DormandPrince54Integrator(1000.0, 2721.9973, doubleArray0, doubleArray0);
      dormandPrince54Integrator1.clearEventHandlers();
      dormandPrince54Integrator1.setInitialStepSize(0);
      dormandPrince54Integrator1.setMaxEvaluations(3411);
      dormandPrince54Integrator0.setMaxEvaluations(3411);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-3.176199594915881E-8), 0, 1401.2800984, 0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      try { 
        dormandPrince54Integrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1000.0, doubleArray0, (-3.176199594915881E-8), doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (3,411) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.0);
      doubleArray0[5] = (-1.0);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-1.0);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-1.0), 1201.6904106, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.clearEventHandlers();
      dormandPrince54Integrator0.getOrder();
      dormandPrince54Integrator0.getStepHandlers();
      dormandPrince54Integrator0.getOrder();
      dormandPrince54Integrator0.getOrder();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray1 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator1 = new DormandPrince54Integrator((-1.0), (-2.5309995887229526E-146), doubleArray1, doubleArray0);
      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1104.0), doubleArray1, (double) 5, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.0);
      doubleArray0[5] = (-1.0);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-1.0);
      doubleArray0[2] = (-1.0);
      doubleArray0[7] = (-1.0);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-1.0), (-1.0), doubleArray0, doubleArray0);
      dormandPrince54Integrator0.clearEventHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1302.177779202617), 2.220446049250313E-13, (-1.0), (-1302.177779202617));
      DormandPrince54Integrator dormandPrince54Integrator1 = new DormandPrince54Integrator(365.623, 132.4901515989868, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.getStepHandlers();
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 135.53691607088504;
      doubleArray1[1] = 365.623;
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 135.53691607088504;
      graggBulirschStoerIntegrator0.setInitialStepSize(1103.452);
      doubleArray2[1] = 144.19545129431506;
      doubleArray2[2] = 2.220446049250313E-13;
      doubleArray2[3] = 132.4901515989868;
      DormandPrince54Integrator dormandPrince54Integrator2 = new DormandPrince54Integrator(135.53691607088504, 135.53691607088504, doubleArray1, doubleArray2);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 365.623);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.0);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-1.0);
      doubleArray0[0] = (-1.0);
      doubleArray0[2] = (-1.0);
      doubleArray0[7] = (-1.0);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-1.0), (-1.0), doubleArray0, doubleArray0);
      dormandPrince54Integrator0.clearEventHandlers();
      dormandPrince54Integrator0.getStepHandlers();
      dormandPrince54Integrator0.getEvaluations();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      dormandPrince54Integrator0.clearStepHandlers();
      dormandPrince54Integrator0.setSafety(0.0);
      dormandPrince54Integrator0.addEventHandler(eventHandler0, 0.0, 0.0, 3411, (UnivariateSolver) null);
      dormandPrince54Integrator0.setMaxEvaluations(3411);
      dormandPrince54Integrator0.setMaxEvaluations(3411);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1.0), (-3689.05772), (-1.0), (-1.0));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray1 = new double[0];
      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray1, 0.0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double double0 = 1000.0;
      double double1 = (-9.036933434595339E-8);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1000.0, (-9.036933434595339E-8), 1000.0, 1000.0);
      double double2 = 2721.9973;
      double double3 = (-1624.76);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2721.9973, 1000.0, (-1624.76), 135.53691607088504);
      int int0 = 1362;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (-2867.8), (-2867.8), 1960);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1362).when(secondOrderDifferentialEquations0).getDimension();
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler1, Double.NaN, 135.53691607088504, 1362, (UnivariateSolver) pegasusSolver0);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double double4 = 144.19545129431506;
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 144.19545129431506);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, Double.NaN, 1572.1399613163462, Double.NaN);
      dormandPrince54Integrator0.getEventHandlers();
      dormandPrince54Integrator0.clearEventHandlers();
      dormandPrince54Integrator0.getOrder();
      dormandPrince54Integrator0.getStepHandlers();
      dormandPrince54Integrator0.getOrder();
      dormandPrince54Integrator0.getOrder();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator1 = new DormandPrince54Integrator(2127.1, 0.0, doubleArray0, doubleArray0);
      // Undeclared exception!
      dormandPrince54Integrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-3741.353), doubleArray0, 0.0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-133.0), 0.0, (-133.0), 0.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      dormandPrince853Integrator0.addEventHandler(eventHandler0, 0.0, (-1.0), 248);
      dormandPrince853Integrator0.getEventHandlers();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-9.147934308113573), Double.NaN, (-133.0), (-9.147934308113573));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-133.0);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(3043.180144038475, 132.4901515989868, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.setMaxEvaluations((-1));
      dormandPrince54Integrator0.setMaxEvaluations(2);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator1 = new GraggBulirschStoerIntegrator(1000.0, 1000.0, (-3689.05772), (-3689.05772));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2329.22778806, doubleArray0, 1000.0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-133.0), 0.0, (-133.0), Double.NaN);
      dormandPrince853Integrator0.getEventHandlers();
      dormandPrince853Integrator0.getCurrentStepStart();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 1.7008878437355237E104;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(135.53691607088504, (-9.147934308113573), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setOrderControl(2753, 2.5854805721793077E-8, Double.NaN);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1826.4609689, (-3222.769), doubleArray0, doubleArray0);
      dormandPrince54Integrator0.setMaxEvaluations(2753);
      dormandPrince54Integrator0.setMaxEvaluations((-2851));
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator1 = new GraggBulirschStoerIntegrator(Double.NaN, (-3689.05772), 1.7008878437355237E104, (-161.0));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1826.4609689, doubleArray0, 2.5854805721793077E-8, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1000.0, (-9.036933434595339E-8), 1000.0, 1000.0);
      double double0 = 135.53691607088504;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2721.9973, 1000.0, (-1624.76), 135.53691607088504);
      int int0 = 0;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double double1 = 132.4901515989868;
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 132.4901515989868);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1255.161021273749);
      doubleArray0[2] = (-1255.161021273749);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1255.161021273749);
      doubleArray0[8] = 2238.263022869;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, 0.0, 0.0);
      graggBulirschStoerIntegrator0.setInterpolationControl(true, (-1069));
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 222;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-1255.161021273749);
      doubleArray1[4] = 2238.263022869;
      doubleArray1[5] = (double) (-1069);
      doubleArray1[6] = 0.0;
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 222);
      double double0 = graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = (-0.017578125);
      doubleArray0[7] = (-1.0);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-1.0), (-1.0), doubleArray0, doubleArray0);
      dormandPrince54Integrator0.clearEventHandlers();
      dormandPrince54Integrator0.getStepHandlers();
      dormandPrince54Integrator0.getEvaluations();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      dormandPrince54Integrator0.clearStepHandlers();
      dormandPrince54Integrator0.setSafety(0.0);
      dormandPrince54Integrator0.addEventHandler(eventHandler0, 0.0, (-0.017578125), 3411, (UnivariateSolver) null);
      dormandPrince54Integrator0.clearEventHandlers();
      dormandPrince54Integrator0.setMaxEvaluations(3411);
      dormandPrince54Integrator0.setMaxEvaluations(3411);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1.0), (-3689.05772), (-1.0), (-0.017578125));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray1 = new double[0];
      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 131.4901515989868, doubleArray1, (-1.0), doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 8
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-1567.812658327));
      threeEighthesIntegrator0.getName();
      threeEighthesIntegrator0.getEvaluations();
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, Double.NaN, 1572.1399613163462, Double.NaN);
      dormandPrince54Integrator0.getEventHandlers();
      dormandPrince54Integrator0.clearEventHandlers();
      dormandPrince54Integrator0.getOrder();
      dormandPrince54Integrator0.getStepHandlers();
      dormandPrince54Integrator0.getOrder();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 5;
      double[] doubleArray1 = new double[0];
      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 0.0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 10
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, Double.NaN, 1572.1399613163462, Double.NaN);
      dormandPrince54Integrator0.getEventHandlers();
      dormandPrince54Integrator0.clearEventHandlers();
      dormandPrince54Integrator0.getOrder();
      dormandPrince54Integrator0.getStepHandlers();
      dormandPrince54Integrator0.getOrder();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 5;
      double[] doubleArray1 = new double[0];
      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 0.0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(2.991508131437659E79);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2.991508131437659E79;
      doubleArray0[1] = 2.991508131437659E79;
      // Undeclared exception!
      try { 
        classicalRungeKuttaIntegrator0.integrate((FirstOrderDifferentialEquations) null, 2.991508131437659E79, doubleArray0, 2.991508131437659E79, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = (-0.017578125);
      doubleArray0[7] = (-1.0);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-1.0), (-1.0), doubleArray0, doubleArray0);
      dormandPrince54Integrator0.clearEventHandlers();
      dormandPrince54Integrator0.getStepHandlers();
      dormandPrince54Integrator0.getEvaluations();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      dormandPrince54Integrator0.clearStepHandlers();
      dormandPrince54Integrator0.setSafety(0.0);
      dormandPrince54Integrator0.addEventHandler(eventHandler0, 0.0, (-0.017578125), 3411, (UnivariateSolver) null);
      dormandPrince54Integrator0.clearEventHandlers();
      dormandPrince54Integrator0.setMaxEvaluations(3411);
      dormandPrince54Integrator0.setMaxEvaluations(3411);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1.0), (-3689.05772), (-1.0), (-0.017578125));
      graggBulirschStoerIntegrator0.setInterpolationControl(true, (-1400));
      assertEquals(60.737613716707706, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1.1791047209526195);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-1.1791047209526195), 3.0467644718982285, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.clearEventHandlers();
      dormandPrince54Integrator0.getStepHandlers();
      dormandPrince54Integrator0.getEvaluations();
      dormandPrince54Integrator0.clearStepHandlers();
      dormandPrince54Integrator0.setSafety(1524.9);
      dormandPrince54Integrator0.clearEventHandlers();
      dormandPrince54Integrator0.setMaxEvaluations(0);
      dormandPrince54Integrator0.setMaxEvaluations(853);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1.1791047209526195), 1524.9, (-1.0), 3411);
      graggBulirschStoerIntegrator0.setInterpolationControl(false, (-1400));
      assertEquals(42.40302806381461, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double double0 = 793.0026255411162;
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(793.0026255411162);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NaN;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(793.0026255411162, Double.NaN, doubleArray0, doubleArray0);
      classicalRungeKuttaIntegrator0.getEventHandlers();
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-3122.14), 1183.339846, 1183.339846, Double.NaN);
      dormandPrince54Integrator0.clearEventHandlers();
      dormandPrince54Integrator0.getOrder();
      dormandPrince54Integrator0.getStepHandlers();
      dormandPrince54Integrator0.getOrder();
      FirstOrderConverter firstOrderConverter0 = null;
      try {
        firstOrderConverter0 = new FirstOrderConverter((SecondOrderDifferentialEquations) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.FirstOrderConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double double0 = 1791.3;
      double double1 = (-760.9843317001);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1791.3, (-760.9843317001), (-2048.4943011942037), (-760.9843317001));
      double[] doubleArray0 = new double[1];
      graggBulirschStoerIntegrator0.clearEventHandlers();
      double double2 = 174.773098688378;
      graggBulirschStoerIntegrator0.getMaxEvaluations();
      double double3 = 1000.0;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double4 = 884.90792289;
      double double5 = (-1674.60411874);
      int int0 = (-2334);
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.initializeStep(false, (-2334), doubleArray0, 0.0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double double0 = 0.0;
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0.0);
      midpointIntegrator0.getCurrentStepStart();
      int int0 = 0;
      double double1 = 1739.126804962896;
      double double2 = (-1.0);
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = null;
      try {
        adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(0, 1739.126804962896, Double.NaN, 1739.126804962896, (-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // multistep method needs at least 0 previous steps, got 2
         //
         verifyException("org.apache.commons.math3.ode.MultistepIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 29.8402934266605;
      doubleArray0[1] = 29.8402934266605;
      doubleArray0[2] = 0.6510416666666666;
      doubleArray0[3] = 29.8402934266605;
      doubleArray0[4] = 29.8402934266605;
      doubleArray0[5] = 29.8402934266605;
      doubleArray0[6] = 29.8402934266605;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(29.8402934266605, 29.8402934266605, doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      SecantSolver secantSolver0 = new SecantSolver(0.0, 0.0);
      dormandPrince853Integrator0.addEventHandler(eventHandler0, 0.0, 0.0, 5, (UnivariateSolver) secantSolver0);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.6510416666666666, 29.8402934266605, 0.0, 0.0);
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      highamHall54Integrator0.addEventHandler(eventHandler1, 0.0, 29.8402934266605, 5, (UnivariateSolver) secantSolver0);
      highamHall54Integrator0.getOrder();
      FirstOrderConverter firstOrderConverter0 = null;
      try {
        firstOrderConverter0 = new FirstOrderConverter((SecondOrderDifferentialEquations) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.FirstOrderConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(551636.0, (-1304.4219257654615), (-1304.4219257654615), (-1304.4219257654615));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1304.4219257654615);
      doubleArray0[1] = 551636.0;
      doubleArray0[2] = (-1304.4219257654615);
      doubleArray0[3] = 551636.0;
      doubleArray0[4] = 2769.99;
      doubleArray0[5] = 2769.99;
      doubleArray0[6] = (-1304.4219257654615);
      doubleArray0[7] = 0.0;
      highamHall54Integrator0.setStepSizeControl(2769.99, 5.746280211439194, doubleArray0, doubleArray0);
      double double0 = highamHall54Integrator0.getCurrentSignedStepsize();
      assertEquals(26824.729140134037, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.2;
      doubleArray0[1] = 2276.315;
      doubleArray0[2] = 2276.315;
      doubleArray0[3] = 2276.315;
      doubleArray0[4] = 2276.315;
      doubleArray0[5] = 2276.315;
      doubleArray0[6] = 2276.315;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 2276.315;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2276.315, 0.0, doubleArray0, doubleArray0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.FIRST;
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.0, fixedStepHandler0, stepNormalizerBounds0);
      dormandPrince853Integrator0.addStepHandler(stepNormalizer0);
      dormandPrince853Integrator0.clearStepHandlers();
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(Double.NaN, Double.NaN, Double.NaN, 1571.66522803849);
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      DummyStepHandler dummyStepHandler1 = DummyStepHandler.getInstance();
      dormandPrince853Integrator0.setMaxGrowth(1571.66522803849);
      DummyStepHandler.getInstance();
      DummyStepHandler.getInstance();
      DummyStepHandler.getInstance();
      DummyStepHandler dummyStepHandler2 = DummyStepHandler.getInstance();
      dormandPrince853Integrator0.addStepHandler(dummyStepHandler2);
      dormandPrince853Integrator0.addStepHandler(dummyStepHandler0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 963.496054168;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 370.3914;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = (-3027.11019652);
      dormandPrince853Integrator0.setStepSizeControl(370.3914, (-3027.11019652), doubleArray0, doubleArray0);
      dormandPrince853Integrator0.addStepHandler(dummyStepHandler1);
      dormandPrince853Integrator0.getEvaluations();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-4778.16071225672), 0.0, 34.1, 1011.9322666025217);
      graggBulirschStoerIntegrator0.setOrderControl(0, 1011.9322666025217, 1870.64082065095);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-1346.88276645834));
      classicalRungeKuttaIntegrator0.getEventHandlers();
      double double0 = classicalRungeKuttaIntegrator0.getCurrentSignedStepsize();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 186.9049575;
      doubleArray0[1] = 1905.0;
      doubleArray0[2] = 186.9049575;
      doubleArray0[3] = 4.547473508864641E-10;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = Double.NaN;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 4.547473508864641E-10;
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = 186.9049575;
      doubleArray1[3] = 4.547473508864641E-10;
      doubleArray1[4] = 1905.0;
      doubleArray1[5] = Double.NaN;
      doubleArray1[6] = 1000.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1346.88276645834), 186.9049575, doubleArray0, doubleArray1);
      RiddersSolver riddersSolver0 = new RiddersSolver();
      graggBulirschStoerIntegrator0.addEventHandler((EventHandler) null, (-1742.9746), Double.NaN, (-650), (UnivariateSolver) riddersSolver0);
      assertEquals(501.73605234463514, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double double0 = (-1255.161021273749);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1255.161021273749);
      doubleArray0[1] = (-0.0042527702905061394);
      doubleArray0[2] = (-1255.161021273749);
      doubleArray0[3] = (-0.0042527702905061394);
      double double1 = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1255.161021273749);
      doubleArray0[6] = (-0.0042527702905061394);
      doubleArray0[7] = (-0.0042527702905061394);
      double double2 = 2238.263022869;
      doubleArray0[8] = 2238.263022869;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-0.0042527702905061394), (-1255.161021273749), doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getMaxEvaluations();
      dormandPrince853Integrator0.getEventHandlers();
      double double3 = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, (-0.0042527702905061394), (-0.0042527702905061394), 0.0);
      int int0 = (-1069);
      graggBulirschStoerIntegrator0.setInterpolationControl(true, (-1069));
      boolean boolean0 = true;
      int int1 = 222;
      FirstOrderConverter firstOrderConverter0 = null;
      try {
        firstOrderConverter0 = new FirstOrderConverter((SecondOrderDifferentialEquations) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.FirstOrderConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-1.0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, (-1.0), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setInterpolationControl(false, (-1670));
      graggBulirschStoerIntegrator0.getMaxEvaluations();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addStepHandler((StepHandler) null);
      SecantSolver secantSolver0 = new SecantSolver();
      Sinh sinh0 = new Sinh();
      sinh0.value(0.0);
      secantSolver0.solve(1308, (UnivariateFunction) sinh0, (-865.328), 0.0, 235.3676);
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 0.0, 0.0, 1308, (UnivariateSolver) secantSolver0);
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler1, (-1.0), (-1.0), (-1670));
      graggBulirschStoerIntegrator0.getCurrentStepStart();
      EventHandler eventHandler2 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler2, (-865.328), (-1.0), (-2112));
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double double0 = 0.0;
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0.0);
      midpointIntegrator0.getCurrentStepStart();
      int int0 = 0;
      double double1 = 1739.126804962896;
      double double2 = (-1.0);
      midpointIntegrator0.clearStepHandlers();
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = null;
      try {
        adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(0, 1739.126804962896, Double.NaN, 1739.126804962896, (-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // multistep method needs at least 0 previous steps, got 2
         //
         verifyException("org.apache.commons.math3.ode.MultistepIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double double0 = 0.0;
      GillIntegrator gillIntegrator0 = new GillIntegrator(0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      gillIntegrator0.clearStepHandlers();
      gillIntegrator0.getEventHandlers();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double double1 = (-2.8589982771350235);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-2.8589982771350235);
      doubleArray0[1] = 3204.3078987035;
      doubleArray0[2] = 0.0;
      try { 
        gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-2.8589982771350235), doubleArray0, (-394.0), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 0.0, (-259.0), 0.0);
      int int0 = highamHall54Integrator0.getEvaluations();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1.0), 0.0, (-2660.913678211), (-30.0));
      Collection<StepHandler> collection0 = dormandPrince853Integrator0.getStepHandlers();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double double0 = (-1338.5945611980883);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-293.83), (-293.83), (-293.83), (-1338.5945611980883));
      double[] doubleArray0 = new double[0];
      highamHall54Integrator0.getStepHandlers();
      // Undeclared exception!
      try { 
        highamHall54Integrator0.computeDerivatives((-1338.5945611980883), doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-690.9121), 1493.324, doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-690.9121);
      doubleArray1[1] = 1493.324;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-690.9121);
      doubleArray1[6] = 0.0;
      // Undeclared exception!
      try { 
        highamHall54Integrator0.computeDerivatives(0.0, doubleArray1, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double double0 = 2717.854191209072;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 0.0, 2717.854191209072, 0.0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2717.854191209072;
      doubleArray0[1] = 2717.854191209072;
      doubleArray0[2] = 2717.854191209072;
      // Undeclared exception!
      try { 
        highamHall54Integrator0.initializeStep(true, 0, doubleArray0, 2717.854191209072, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-133.0), 0.0, (-133.0), Double.NaN);
      dormandPrince853Integrator0.getEventHandlers();
      dormandPrince853Integrator0.getCurrentStepStart();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-9.147934308113573), Double.NaN, Double.NaN, (-9.147934308113573));
      graggBulirschStoerIntegrator0.setStepSizeControl(0.0, (-133.0), 1000.0, Double.NaN);
      graggBulirschStoerIntegrator0.setControlFactors(Double.NaN, (-133.0), (-644.0353757), 0.0);
      assertEquals(133.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
  }
}
