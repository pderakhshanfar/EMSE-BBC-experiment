/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 23:49:24 GMT 2021
 */

package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.math3.analysis.solvers.IllinoisSolver;
import org.apache.commons.math3.analysis.solvers.SecantSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondaryEquations;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator;
import org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator;
import org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.EulerIntegrator;
import org.apache.commons.math3.ode.nonstiff.GillIntegrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.StepHandler;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.apache.commons.math3.ode.sampling.StepNormalizerBounds;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegrator_ESTest extends AbstractIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(242.28349177525817);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-2642.845), 242.28349177525817, (double)983, 0.0, (-2642.845)).when(eventHandler0).g(anyDouble() , any(double[].class));
      eulerIntegrator0.addEventHandler(eventHandler0, 1.1933419704437256, 6.291008309266035E-9, 501);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      eulerIntegrator0.integrate(expandableStatefulODE0, 1.940772294998169);
      eulerIntegrator0.getName();
      eulerIntegrator0.getName();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(242.28349177525817);
      eulerIntegrator0.clearEventHandlers();
      eulerIntegrator0.getEvaluations();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(1.0, 6.291008309266035E-9).when(eventHandler0).g(anyDouble() , any(double[].class));
      eulerIntegrator0.addEventHandler(eventHandler0, 6.291008309266035E-9, (double) 983, 501);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1718).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      eulerIntegrator0.integrate(expandableStatefulODE0, 242.28349177525817);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(242.28349177525817);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-2642.845), 242.28349177525817, (double)983, 0.0, (-2642.845)).when(eventHandler0).g(anyDouble() , any(double[].class));
      eulerIntegrator0.addEventHandler(eventHandler0, 6.291008309266035E-9, (double) 983, 501);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(983).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      eulerIntegrator0.integrate(expandableStatefulODE0, 242.28349177525817);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2909.39937001202), 1493.299, 490.7165082247418, (-1555.59272));
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer0 = new StepNormalizer(3242.6799217015187, fixedStepHandler0);
      dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
      dormandPrince54Integrator0.getCurrentSignedStepsize();
      double double0 = (-1593.9);
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = null;
      try {
        adamsBashforthIntegrator0 = new AdamsBashforthIntegrator((-108), (-108), (-1593.9), 490.7165082247418, 2084.3711689235147);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // multistep method needs at least -108 previous steps, got 2
         //
         verifyException("org.apache.commons.math3.ode.MultistepIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(Double.NaN);
      eulerIntegrator0.setMaxEvaluations((-1));
      eulerIntegrator0.getName();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = 1.5701510906219482;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (-1770.795);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(Double.NaN, (-1), doubleArray0, doubleArray0);
      highamHall54Integrator0.getOrder();
      highamHall54Integrator0.getEvaluations();
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(5, 0.14349138736724854, (-1.0), 8.550658957115427E118, 4059.8892986);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      try { 
        adamsMoultonIntegrator0.integrate(expandableStatefulODE0, (-1589.9));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one column
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(Double.NaN);
      eulerIntegrator0.getName();
      eulerIntegrator0.getCurrentStepStart();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double double0 = 242.28349177525817;
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(242.28349177525817);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(46).when(secondOrderDifferentialEquations0).getDimension();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      eulerIntegrator0.addEventHandler(eventHandler0, (double) 46, (-1.0), (-227));
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      eulerIntegrator0.integrate(expandableStatefulODE0, 242.28349177525817);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 2935.417, 0.0, 2935.417);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1161).when(secondOrderDifferentialEquations0).getDimension();
      graggBulirschStoerIntegrator0.getMaxEvaluations();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 13.29712765);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 2935.417, 0.0, 2935.417);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(697).when(secondOrderDifferentialEquations0).getDimension();
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.NEITHER;
      StepNormalizer stepNormalizer0 = new StepNormalizer(2935.417, fixedStepHandler0, stepNormalizerBounds0);
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator((-7.12854317090566E-8));
      eulerIntegrator0.addStepHandler(stepNormalizer0);
      eulerIntegrator0.setMaxEvaluations(13);
      eulerIntegrator0.getName();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      eulerIntegrator0.integrate(expandableStatefulODE0, (-7.12854317090566E-8));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(Double.NaN);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      eulerIntegrator0.addEventHandler(eventHandler0, 2.8421709430404007E-11, Double.NaN, 13);
      eulerIntegrator0.getMaxEvaluations();
      eulerIntegrator0.getEventHandlers();
      eulerIntegrator0.getName();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(760.2011987928533);
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.BOTH;
      StepNormalizer stepNormalizer0 = new StepNormalizer(760.2011987928533, (FixedStepHandler) null, stepNormalizerBounds0);
      eulerIntegrator0.addStepHandler(stepNormalizer0);
      eulerIntegrator0.getName();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      try { 
        eulerIntegrator0.integrate(expandableStatefulODE0, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.sampling.StepNormalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(Double.NaN);
      threeEighthesIntegrator0.setMaxEvaluations(997);
      threeEighthesIntegrator0.getEventHandlers();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      threeEighthesIntegrator0.addEventHandler(eventHandler0, (-8.713097446488103), (-1039.53), (-589));
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      threeEighthesIntegrator0.addEventHandler(eventHandler1, (double) 997, 1325.059, 2147483645);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1039.53);
      doubleArray1[1] = (-1940.036227874);
      doubleArray1[2] = (-690.0);
      doubleArray1[3] = (-8.713097446488103);
      doubleArray1[4] = Double.NaN;
      try { 
        threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1536.2740688938477, doubleArray0, 1000.0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(0.0);
      eulerIntegrator0.clearStepHandlers();
      eulerIntegrator0.getName();
      eulerIntegrator0.getCurrentSignedStepsize();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      // Undeclared exception!
      try { 
        eulerIntegrator0.computeDerivatives(0.0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(1627.5902986);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1536.2740688938477, doubleArray0, 1536.2740688938477, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1.0, 1.0, 1.0, 518.024);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      int int0 = (-1);
      double double0 = (-3339.475);
      dormandPrince853Integrator0.addEventHandler(eventHandler0, 518.024, (-3339.475), 1596);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.94;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 0.94;
      doubleArray0[3] = (double) 1596;
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-851.11), doubleArray0, 0.94, (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double double0 = 1000.0;
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(1000.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(798).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2893.7382447965656);
      doubleArray0[1] = 337.435967133395;
      doubleArray0[2] = 337.435967133395;
      doubleArray0[3] = 2.27E-10;
      doubleArray0[4] = 337.435967133395;
      doubleArray0[5] = (-2893.7382447965656);
      doubleArray0[6] = 1000.0;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(337.435967133395, 337.435967133395, doubleArray0, doubleArray0);
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1000.0, doubleArray0, (-2893.7382447965656), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 1,596
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(242.28349177525817);
      eulerIntegrator0.getName();
      // Undeclared exception!
      try { 
        eulerIntegrator0.integrate((ExpandableStatefulODE) null, 0.539322018623352);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 0.0, 0.0, 0.0);
          dormandPrince54Integrator0.getName();
          SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
          doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
          FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
          ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
          // Undeclared exception!
          dormandPrince54Integrator0.integrate(expandableStatefulODE0, 0.0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(Double.NaN);
      eulerIntegrator0.getEventHandlers();
      eulerIntegrator0.getName();
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(Double.NaN);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler1).g(anyDouble() , any(double[].class));
      threeEighthesIntegrator0.setMaxEvaluations(997);
      threeEighthesIntegrator0.getEventHandlers();
      threeEighthesIntegrator0.addEventHandler(eventHandler1, (-1940.036227874), Double.NaN, 997);
      threeEighthesIntegrator0.addEventHandler(eventHandler0, (-0.04432804463693693), Double.NaN, 1266);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      try { 
        threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1627.5902986, doubleArray0, 1536.2740688938477, doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (997) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-823.41577);
      doubleArray0[1] = (-823.41577);
      doubleArray0[2] = (-823.41577);
      doubleArray0[3] = (-823.41577);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-823.41577), (-823.41577), doubleArray0, doubleArray0);
      dormandPrince54Integrator0.setMaxEvaluations((-372));
      assertEquals(823.41577, dormandPrince54Integrator0.getMaxStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double double0 = 0.0;
      GillIntegrator gillIntegrator0 = new GillIntegrator(0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double[] doubleArray0 = new double[0];
      expandableStatefulODE0.setPrimaryState(doubleArray0);
      double double1 = 557.43169;
      // Undeclared exception!
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 557.43169, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(656.98730586, 3605.48247, 656.98730586, 656.98730586);
      dormandPrince54Integrator0.getMaxEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double double0 = (-218.327558819);
      double[] doubleArray0 = new double[0];
      double double1 = 0.0;
      dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-218.327558819), doubleArray0, 0.0, doubleArray0);
      double double2 = (-0.3125);
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(Integer.MAX_VALUE, 3605.48247, (-0.3125), doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 288.097513782;
      doubleArray1[3] = 0.2222222222222222;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.2222222222222222;
      graggBulirschStoerIntegrator0.setStepSizeControl(0.0, 0.2222222222222222, doubleArray1, doubleArray1);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.computeDerivatives(0.01312004499419488, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(0.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double0 = 2936.48379;
      classicalRungeKuttaIntegrator0.getStepHandlers();
      classicalRungeKuttaIntegrator0.setMaxEvaluations(130);
      classicalRungeKuttaIntegrator0.addEventHandler(eventHandler0, 839.1202, 2936.48379, 0, (UnivariateSolver) null);
      classicalRungeKuttaIntegrator0.setMaxEvaluations(0);
      int int0 = 0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 130;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 130;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 839.1202;
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = null;
      try {
        adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(0, 0.0, Double.NaN, doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one row
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double double0 = 242.28349177525817;
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(242.28349177525817);
      // Undeclared exception!
      try { 
        eulerIntegrator0.integrate((FirstOrderDifferentialEquations) null, 1.0, (double[]) null, 1243.86098, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 462.0;
      doubleArray0[1] = 462.0;
      doubleArray0[2] = 462.0;
      doubleArray0[3] = 462.0;
      doubleArray0[4] = 462.0;
      doubleArray0[5] = 462.0;
      doubleArray0[6] = 462.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(462.0, 462.0, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.clearEventHandlers();
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 462.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 2422.265373382863;
      doubleArray1[5] = 462.0;
      doubleArray1[6] = 462.0;
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) null, 0.0, doubleArray1, 462.0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 135.0;
      doubleArray0[1] = (-824.43857929);
      doubleArray0[2] = (-824.43857929);
      doubleArray0[3] = (-120.0992586);
      doubleArray0[4] = (-824.43857929);
      doubleArray0[5] = (-824.43857929);
      doubleArray0[6] = (-824.43857929);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-824.43857929), (-120.0992586), doubleArray0, doubleArray0);
      Collection<StepHandler> collection0 = graggBulirschStoerIntegrator0.getStepHandlers();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double double0 = (-653.0145012264);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-653.0145012264), (-1994.03807689), (-225.003929439786), (-225.003929439786));
      dormandPrince853Integrator0.getOrder();
      dormandPrince853Integrator0.getEvaluations();
      dormandPrince853Integrator0.getCurrentStepStart();
      dormandPrince853Integrator0.getMaxEvaluations();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-653.0145012264));
      dormandPrince853Integrator0.addEventHandler((EventHandler) null, (double) Integer.MAX_VALUE, (-653.0145012264), 0, (UnivariateSolver) illinoisSolver0);
      FirstOrderDifferentialEquations firstOrderDifferentialEquations0 = null;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1994.03807689);
      doubleArray0[1] = (-653.0145012264);
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = Double.NaN;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = (-653.0145012264);
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = (-1994.03807689);
      doubleArray1[4] = Double.NaN;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (-1.0);
      doubleArray1[7] = Double.NaN;
      doubleArray1[8] = (-1.0);
      // Undeclared exception!
      try { 
        dormandPrince853Integrator0.initializeStep(false, (-4997), doubleArray0, (-1.0), doubleArray0, doubleArray0, doubleArray0, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(843.4, 843.4, 0.0, 843.4);
      dormandPrince853Integrator0.getEvaluations();
      dormandPrince853Integrator0.getEvaluations();
      dormandPrince853Integrator0.getMaxEvaluations();
      dormandPrince853Integrator0.clearStepHandlers();
      dormandPrince853Integrator0.getStepHandlers();
      dormandPrince853Integrator0.getEvaluations();
      dormandPrince853Integrator0.setMaxEvaluations(114);
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(114, 0, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setStabilityCheck(false, 1, 0, 1311.957331593);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 1.0E-12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1.0), (-1.0), (-1.0), (-1.0));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1.0);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 2902.9244973933414;
      doubleArray1[1] = 2902.9244973933414;
      doubleArray1[2] = (-500.3641903);
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = 91.3162297061524;
      doubleArray1[5] = 91.3162297061524;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 2902.9244973933414;
      doubleArray2[1] = 91.3162297061524;
      doubleArray2[2] = 1586.09809;
      graggBulirschStoerIntegrator0.setStepSizeControl(2902.9244973933414, 91.3162297061524, doubleArray1, doubleArray2);
      graggBulirschStoerIntegrator0.setMaxEvaluations(1206);
      graggBulirschStoerIntegrator0.setStabilityCheck(true, 2147483645, 2147483645, (-1.0));
      graggBulirschStoerIntegrator0.setStepSizeControl((-1.0), (-1.0), doubleArray0, doubleArray0);
      doubleArray0[3] = (-2350.209747168);
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.computeDerivatives((-2350.209747168), doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double double0 = 0.6433927460157636;
      double double1 = (-108.82722264637);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-108.82722264637);
      doubleArray0[1] = (-759.0);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.6433927460157636, (-108.82722264637), doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      dormandPrince853Integrator0.setInitialStepSize(1435.781641533086);
      dormandPrince853Integrator0.addEventHandler(eventHandler0, (-22.113666853125302), 0.0, (-1000));
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      SecondaryEquations secondaryEquations0 = mock(SecondaryEquations.class, new ViolatedAssumptionAnswer());
      try { 
        expandableStatefulODE0.setCompleteState(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 0
         //
         verifyException("org.apache.commons.math3.ode.ExpandableStatefulODE", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double double0 = (-1512.74566);
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1512.74566));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double1 = 1275.7878928079394;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1275.7878928079394;
      doubleArray0[1] = (-1512.74566);
      doubleArray0[2] = 1275.7878928079394;
      doubleArray0[3] = 1275.7878928079394;
      doubleArray0[4] = (-1512.74566);
      doubleArray0[5] = 498.0;
      try { 
        gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1512.74566), doubleArray0, 1275.7878928079394, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(1.1368683772161603E-10);
      threeEighthesIntegrator0.clearEventHandlers();
      int int0 = threeEighthesIntegrator0.getMaxEvaluations();
      assertEquals(Integer.MAX_VALUE, int0);
      
      threeEighthesIntegrator0.getEvaluations();
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(242.28349177525817);
      eulerIntegrator0.getName();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(242.28349177525817, 242.28349177525817, 242.28349177525817, 242.28349177525817);
      graggBulirschStoerIntegrator0.addStepHandler((StepHandler) null);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-838.759204639), (-921.89971993786), (-838.759204639), 2347.28971);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      dormandPrince853Integrator0.addEventHandler(eventHandler0, (-921.89971993786), (-921.89971993786), (-1));
      dormandPrince853Integrator0.clearEventHandlers();
      dormandPrince853Integrator0.getName();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2347.28971;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = 2347.28971;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (-838.759204639);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 2347.28971;
      doubleArray1[1] = (-921.89971993786);
      doubleArray1[2] = (-921.89971993786);
      doubleArray1[3] = (double) (-1);
      doubleArray1[4] = 2347.28971;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(2347.28971, (-921.89971993786), doubleArray0, doubleArray1);
      dormandPrince54Integrator0.getOrder();
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer0 = new StepNormalizer((-1.0), fixedStepHandler0);
      dormandPrince853Integrator0.addStepHandler(stepNormalizer0);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-2068.1), (-2068.1), 0.0, 0.0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-3210.770254429464);
      doubleArray0[2] = (-2068.1);
      doubleArray0[3] = (-3210.770254429464);
      doubleArray0[4] = 0.0;
      graggBulirschStoerIntegrator0.setStepSizeControl((-3210.770254429464), (-2068.1), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setInterpolationControl(true, (-1833));
      String string0 = graggBulirschStoerIntegrator0.getName();
      assertEquals("Gragg-Bulirsch-Stoer", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2346.984;
      doubleArray0[1] = 2346.984;
      doubleArray0[2] = 1000.0;
      doubleArray0[3] = (-2176.406010602);
      doubleArray0[4] = 1000.0;
      doubleArray0[5] = 2346.984;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2346.984, 1000.0, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.clearStepHandlers();
      dormandPrince853Integrator0.getMaxEvaluations();
      dormandPrince853Integrator0.addEventHandler((EventHandler) null, (-2176.406010602), 0.0, (-35));
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1269.0, 1269.0, 1269.0, 0.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      SecantSolver secantSolver0 = new SecantSolver(283.4402800445316, 0.0);
      dormandPrince853Integrator0.addEventHandler(eventHandler0, 0.0, 0.0, 2683, (UnivariateSolver) secantSolver0);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2352.959677277);
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(767, 0.0, (-2352.959677277), doubleArray0, doubleArray0);
  }
}
