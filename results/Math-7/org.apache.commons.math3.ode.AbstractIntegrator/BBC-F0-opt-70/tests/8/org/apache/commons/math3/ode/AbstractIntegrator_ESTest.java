/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 23:09:31 GMT 2021
 */

package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import org.apache.commons.math3.analysis.solvers.MullerSolver;
import org.apache.commons.math3.analysis.solvers.PegasusSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator;
import org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.EulerIntegrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.MidpointIntegrator;
import org.apache.commons.math3.ode.sampling.DummyStepHandler;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.StepHandler;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegrator_ESTest extends AbstractIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double double0 = 0.6776238207547169;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.6776238207547169, 0.6776238207547169, 0.6776238207547169, 0.6776238207547169);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      dormandPrince853Integrator0.clearEventHandlers();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double double1 = (-2.928362616578011E142);
      EventHandler.Action eventHandler_Action0 = EventHandler.Action.RESET_STATE;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(eventHandler_Action0).when(eventHandler0).eventOccurred(anyDouble() , any(double[].class) , anyBoolean());
      doReturn((double)0, 0.6776238207547169, (-2.928362616578011E142), 0.6776238207547169, (double)0).when(eventHandler0).g(anyDouble() , any(double[].class));
      int int0 = 678;
      dormandPrince853Integrator0.getOrder();
      dormandPrince853Integrator0.addEventHandler(eventHandler0, (double) 0, (double) 0, 678);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime(0.6776238207547169);
      // Undeclared exception!
      dormandPrince853Integrator0.integrate(expandableStatefulODE0, (-2.928362616578011E142));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.6776238207547169, 0.6776238207547169, 0.6776238207547169, 0.6776238207547169);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(1634.1561709492453);
      double[] doubleArray0 = new double[0];
      midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1634.1561709492453, doubleArray0, 0.6776238207547169, doubleArray0);
      midpointIntegrator0.getEvaluations();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.6776238207547169, 0.6776238207547169, 0.6776238207547169, 0.6776238207547169);
      int int0 = 0;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      EventHandler.Action eventHandler_Action0 = EventHandler.Action.STOP;
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer0 = new StepNormalizer((-2.928362616578011E142), fixedStepHandler0);
      dormandPrince853Integrator0.addStepHandler(stepNormalizer0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(eventHandler_Action0).when(eventHandler0).eventOccurred(anyDouble() , any(double[].class) , anyBoolean());
      doReturn((double)0, 0.6776238207547169, (-2.928362616578011E142), 0.6776238207547169, (double)0).when(eventHandler0).g(anyDouble() , any(double[].class));
      dormandPrince853Integrator0.getOrder();
      dormandPrince853Integrator0.addEventHandler(eventHandler0, (double) 0, (double) 0, 678);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2.2737367544323206E-10, (-1.0), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setInitialStepSize(1182.841308429753);
      graggBulirschStoerIntegrator0.setControlFactors((-138.7643712049), (-1417.9), 2.2737367544323206E-10, 8);
      expandableStatefulODE0.setTime(0.6776238207547169);
      dormandPrince853Integrator0.integrate(expandableStatefulODE0, (-2.928362616578011E142));
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-2.928362616578011E142);
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      dormandPrince853Integrator0.integrate(expandableStatefulODE0, 1182.841308429753);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.6776238207547169, 0.6776238207547169, 0.6776238207547169, 0.6776238207547169);
      int int0 = 0;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      EventHandler.Action eventHandler_Action0 = EventHandler.Action.STOP;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(eventHandler_Action0).when(eventHandler0).eventOccurred(anyDouble() , any(double[].class) , anyBoolean());
      doReturn((double)0, 0.6776238207547169, (-2.928362616578011E142), 0.6776238207547169, (double)0).when(eventHandler0).g(anyDouble() , any(double[].class));
      dormandPrince853Integrator0.getOrder();
      dormandPrince853Integrator0.addEventHandler(eventHandler0, (double) 0, (double) 0, 678);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2.2737367544323206E-10, (-1.0), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setInitialStepSize(1182.841308429753);
      graggBulirschStoerIntegrator0.setControlFactors((-138.7643712049), (-1417.9), 2.2737367544323206E-10, 8);
      expandableStatefulODE0.setTime(0.6776238207547169);
      dormandPrince853Integrator0.integrate(expandableStatefulODE0, (-2.928362616578011E142));
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-2.928362616578011E142);
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      dormandPrince853Integrator0.integrate(expandableStatefulODE0, 1182.841308429753);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.6776238207547169, 0.6776238207547169, 0.6776238207547169, 0.6776238207547169);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      EventHandler.Action eventHandler_Action0 = EventHandler.Action.STOP;
      EventHandler.Action eventHandler_Action1 = EventHandler.Action.RESET_STATE;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(eventHandler_Action0).when(eventHandler0).eventOccurred(anyDouble() , any(double[].class) , anyBoolean());
      doReturn((double)0, 0.6776238207547169, (-2.928362616578011E142), 0.6776238207547169, (double)0).when(eventHandler0).g(anyDouble() , any(double[].class));
      dormandPrince853Integrator0.getOrder();
      dormandPrince853Integrator0.addEventHandler(eventHandler0, (double) 0, (double) 0, 678);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2.2737367544323206E-10, (-1.0), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setControlFactors((-138.7643712049), (-1417.9), 2.2737367544323206E-10, 8);
      expandableStatefulODE0.setTime(0.6776238207547169);
      dormandPrince853Integrator0.integrate(expandableStatefulODE0, (-2.928362616578011E142));
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-2.928362616578011E142);
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (-2133.203906);
      doubleArray1[3] = (double) 678;
      doubleArray1[4] = (double) 0;
      dormandPrince853Integrator0.setSafety((-768.711));
      doubleArray1[5] = (-2.928362616578011E142);
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = 0.6776238207547169;
      dormandPrince853Integrator0.computeDerivatives((-3263.41), doubleArray1, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.6776238207547169, 0.6776238207547169, 0.6776238207547169, 0.6776238207547169);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 136.555587005277;
      doubleArray1[1] = 0.6776238207547169;
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 136.555587005277, doubleArray0, (-990.43052), doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-0.30860548742043026), (-0.30860548742043026), (-0.30860548742043026), (-0.30860548742043026));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      dormandPrince853Integrator0.addStepHandler((StepHandler) null);
      dormandPrince853Integrator0.addEventHandler(eventHandler0, (double) 0, (double) 0, 678);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      try { 
        dormandPrince853Integrator0.integrate(expandableStatefulODE0, (-2.928362616578011E142));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.6776238207547169, 0.6776238207547169, 0.6776238207547169, 0.6776238207547169);
      dormandPrince853Integrator0.getOrder();
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(8, Double.NaN, 0.6776238207547169, Double.NaN, 2.220446049250313E-13);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      adamsBashforthIntegrator0.setMaxEvaluations(649);
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE1.setTime(0.6776238207547169);
      try { 
        adamsBashforthIntegrator0.integrate(expandableStatefulODE1, 0.6776238207547169);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.6776238207547169, 0.6776238207547169, 0.6776238207547169, 0.6776238207547169);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      dormandPrince853Integrator0.getOrder();
      dormandPrince853Integrator0.addEventHandler(eventHandler0, (double) 0, (double) 0, 678);
      dormandPrince853Integrator0.setMaxEvaluations(0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        dormandPrince853Integrator0.integrate(expandableStatefulODE0, (-2.928362616578011E142));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double double0 = 0.6776238207547169;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.6776238207547169, 0.6776238207547169, 0.6776238207547169, 0.6776238207547169);
      int int0 = 0;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double double1 = (-2.928362616578011E142);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((EventHandler.Action) null, (EventHandler.Action) null).when(eventHandler0).eventOccurred(anyDouble() , any(double[].class) , anyBoolean());
      doReturn((double)0, 0.6776238207547169, (-2.928362616578011E142), 0.6776238207547169, (double)0).when(eventHandler0).g(anyDouble() , any(double[].class));
      int int1 = 678;
      dormandPrince853Integrator0.getOrder();
      dormandPrince853Integrator0.addEventHandler(eventHandler0, (double) 0, (double) 0, 678);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime(0.6776238207547169);
      // Undeclared exception!
      dormandPrince853Integrator0.integrate(expandableStatefulODE0, (-2.928362616578011E142));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double double0 = 0.6776238207547169;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.6776238207547169, 0.6776238207547169, 0.6776238207547169, 0.6776238207547169);
      int int0 = 0;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, Double.NaN, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.6776238207547169, 0.6776238207547169, 0.6776238207547169, 0.6776238207547169);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((double)0, 0.6776238207547169, (-2.928362616578011E142), 0.6776238207547169, (double)0).when(eventHandler0).g(anyDouble() , any(double[].class));
      dormandPrince853Integrator0.getOrder();
      dormandPrince853Integrator0.addEventHandler(eventHandler0, (double) 0, (double) 0, 678);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      dormandPrince853Integrator0.integrate(expandableStatefulODE0, 0.6776238207547169);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.6776238207547169, 0.6776238207547169, 0.6776238207547169, 0.6776238207547169);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.6776238207547169, (-1361.225), (-1361.225), (-1361.225), 2075.3032261880116).when(eventHandler0).g(anyDouble() , any(double[].class));
      dormandPrince853Integrator0.addEventHandler(eventHandler0, 610.096, 610.096, 5);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        dormandPrince853Integrator0.integrate(expandableStatefulODE0, 0.6776238207547169);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (5) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.6776238207547169, 0.6776238207547169, 0.6776238207547169, 0.6776238207547169);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(175.794329, (-1263.60837), 175.794329, 7.105427357601002E-12, 7.105427357601002E-12).when(eventHandler0).g(anyDouble() , any(double[].class));
      dormandPrince853Integrator0.addEventHandler(eventHandler0, 610.096, 610.096, 5);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        dormandPrince853Integrator0.integrate(expandableStatefulODE0, (double) 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [\uFFFD, \uFFFD], values: [0, 0]
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1.1368683772161603E-10, 286.0886, 1.1368683772161603E-10, 3297.95763073);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator1 = new GraggBulirschStoerIntegrator(2.220446049250313E-13, 1.0, 2555.3973442211, 9.286532888251822E105);
      graggBulirschStoerIntegrator1.setControlFactors(3339.8, 0.0, 1.0143022354947225E63, 4.547473508864641E-10);
      graggBulirschStoerIntegrator0.clearStepHandlers();
      graggBulirschStoerIntegrator0.clearEventHandlers();
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      pegasusSolver0.getEvaluations();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 1000.0, 1.7914185523986816, 0, (UnivariateSolver) pegasusSolver0);
      graggBulirschStoerIntegrator1.getCurrentSignedStepsize();
      graggBulirschStoerIntegrator1.getStepHandlers();
      graggBulirschStoerIntegrator0.setOrderControl(1367, 1.0143022354947225E63, (-400.8935));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      graggBulirschStoerIntegrator1.integrate(expandableStatefulODE0, (double) (-1375));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(567.79481634244);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 567.79481634244, 0.0, (-1189.9804));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      graggBulirschStoerIntegrator0.setControlFactors(2.220446049250313E-13, 0.0, 1.0, (-1189.9804));
      graggBulirschStoerIntegrator0.clearStepHandlers();
      graggBulirschStoerIntegrator0.clearEventHandlers();
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      pegasusSolver0.getEvaluations();
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 1019.156237519, 567.79481634244, (-1375), (UnivariateSolver) pegasusSolver0);
      graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
      graggBulirschStoerIntegrator0.getStepHandlers();
      graggBulirschStoerIntegrator0.setOrderControl((-1375), 0.0, 0.6624060869216919);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 2075.3032261880116);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-440.85866);
      doubleArray0[1] = (-2314.97);
      doubleArray0[2] = 40.0;
      doubleArray0[3] = (-2314.97);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(158.96210586609, (-2314.97), doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getOrder();
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(8, (-440.85866), (-2642.8), 8, 0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime((-2314.97));
      adamsBashforthIntegrator0.setMaxEvaluations((-294));
      // Undeclared exception!
      try { 
        adamsBashforthIntegrator0.integrate(expandableStatefulODE0, (-239.666773811988));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one column
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 8164.317171305268;
      doubleArray0[1] = (-0.022459085953066622);
      doubleArray0[2] = 0.13414156436920166;
      doubleArray0[3] = (-0.022459085953066622);
      doubleArray0[4] = (-0.022459085953066622);
      doubleArray0[5] = (-0.022459085953066622);
      doubleArray0[6] = (-0.022459085953066622);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(8164.317171305268, 8164.317171305268, doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        dormandPrince853Integrator0.integrate((ExpandableStatefulODE) null, Double.NaN);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-440.85866);
      doubleArray0[1] = (-2314.97);
      doubleArray0[2] = 40.0;
      doubleArray0[3] = (-2314.97);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(158.96210586609, (-2314.97), doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getOrder();
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(8, (-440.85866), (-2642.8), 8, 0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime(8);
      // Undeclared exception!
      try { 
        adamsBashforthIntegrator0.integrate(expandableStatefulODE0, (-239.666773811988));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-1629.997));
      double double0 = midpointIntegrator0.getCurrentStepStart();
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-0.022459085953066622));
      double double0 = midpointIntegrator0.getCurrentSignedStepsize();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(567.79481634244);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01);
      
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 567.79481634244, 0.0, (-1189.9804));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.setControlFactors(2.220446049250313E-13, 0.0, 1.0, (-1189.9804));
      graggBulirschStoerIntegrator0.clearStepHandlers();
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      pegasusSolver0.getEvaluations();
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 1019.156237519, 567.79481634244, (-1375), (UnivariateSolver) pegasusSolver0);
      double double0 = graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
      assertEquals(0.0, double0, 0.01);
      
      graggBulirschStoerIntegrator0.getStepHandlers();
      graggBulirschStoerIntegrator0.setOrderControl((-1375), 0.0, 0.6624060869216919);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1567.5), (-1.0), doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1567.5), (-1567.5), doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getEventHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter1);
      DormandPrince853Integrator dormandPrince853Integrator1 = new DormandPrince853Integrator(1000.0, 0.6776238207547169, 1216.825, 0.0);
      // Undeclared exception!
      dormandPrince853Integrator1.integrate(expandableStatefulODE0, 0.6776238207547169);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(2.8421709430404007E-11);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2.8421709430404007E-11;
      doubleArray0[1] = 2.8421709430404007E-11;
      doubleArray0[2] = 2.8421709430404007E-11;
      doubleArray0[3] = 2.8421709430404007E-11;
      doubleArray0[4] = 2.8421709430404007E-11;
      doubleArray0[5] = 2.928362616578011E142;
      doubleArray0[6] = 2.8421709430404007E-11;
      doubleArray0[7] = 2.8421709430404007E-11;
      // Undeclared exception!
      try { 
        midpointIntegrator0.integrate((FirstOrderDifferentialEquations) null, 2.8421709430404007E-11, doubleArray0, 2.8421709430404007E-11, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 352.69;
      doubleArray0[1] = 1000.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(352.69, 1000.0, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setMaxEvaluations(0);
      graggBulirschStoerIntegrator0.getStepHandlers();
      graggBulirschStoerIntegrator0.getMaxEvaluations();
      graggBulirschStoerIntegrator0.setStabilityCheck(false, 0, 0, 0);
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      graggBulirschStoerIntegrator0.addStepHandler(dummyStepHandler0);
      assertEquals(1000.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.6776238207547169;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.6776238207547169;
      doubleArray1[5] = 0.6776238207547169;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 0.6776238207547169;
      doubleArray1[8] = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.6776238207547169, doubleArray1, doubleArray0);
      graggBulirschStoerIntegrator0.setMaxEvaluations(1394);
      graggBulirschStoerIntegrator0.setOrderControl(1394, 0.0, 0.0);
      graggBulirschStoerIntegrator0.getEventHandlers();
      FirstOrderConverter firstOrderConverter0 = null;
      try {
        firstOrderConverter0 = new FirstOrderConverter((SecondOrderDifferentialEquations) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.FirstOrderConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 489.9836870746857;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, 489.9836870746857, 0.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double2 = (-1373.3247639475785);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(895).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 489.9836870746857;
      doubleArray0[1] = 489.9836870746857;
      doubleArray0[2] = (-1373.3247639475785);
      doubleArray0[3] = (-1373.3247639475785);
      doubleArray0[5] = 489.9836870746857;
      doubleArray0[6] = 489.9836870746857;
      doubleArray0[7] = 489.9836870746857;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-1373.3247639475785);
      doubleArray1[1] = 343.15;
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 343.15, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 1,790
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getEventHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        dormandPrince853Integrator0.integrate(expandableStatefulODE0, (-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 3
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(0.0);
      classicalRungeKuttaIntegrator0.clearStepHandlers();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      MullerSolver mullerSolver0 = new MullerSolver((-1647));
      classicalRungeKuttaIntegrator0.addEventHandler(eventHandler0, 0.0, 0.0, (-1647), (UnivariateSolver) mullerSolver0);
      classicalRungeKuttaIntegrator0.getEventHandlers();
      classicalRungeKuttaIntegrator0.getName();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2.9525986892242035;
      doubleArray0[1] = 2.9525986892242035;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 2.9525986892242035, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.clearEventHandlers();
      int int0 = dormandPrince54Integrator0.getOrder();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-603.0);
      doubleArray0[3] = (-77.55569);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-77.55569), 1.0, doubleArray0, doubleArray0);
      String string0 = dormandPrince853Integrator0.getName();
      assertEquals("Dormand-Prince 8 (5, 3)", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 489.9836870746857;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, 489.9836870746857, 0.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double2 = (-1373.3247639475785);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 489.9836870746857;
      doubleArray0[1] = 489.9836870746857;
      doubleArray0[2] = (-1373.3247639475785);
      doubleArray0[3] = (-1373.3247639475785);
      doubleArray0[4] = 489.9836870746857;
      doubleArray0[5] = 489.9836870746857;
      doubleArray0[6] = 489.9836870746857;
      doubleArray0[7] = 489.9836870746857;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-1373.3247639475785);
      doubleArray1[1] = 343.15;
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 343.15, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1567.5), (-1.0), doubleArray0, doubleArray0);
      boolean boolean0 = false;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-0.322376179245283), doubleArray0, (-1.0), doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, 0.0, (-4.422011983080043));
      graggBulirschStoerIntegrator0.setInterpolationControl(false, (-227));
      graggBulirschStoerIntegrator0.getStepHandlers();
      graggBulirschStoerIntegrator0.getEventHandlers();
      graggBulirschStoerIntegrator0.getMaxEvaluations();
      graggBulirschStoerIntegrator0.setControlFactors(Integer.MAX_VALUE, 0.0, 1367.9660768, 0.0);
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 1074);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2314.97);
      doubleArray0[1] = (-2314.97);
      doubleArray0[2] = 40.0;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.7718049607275652, 40.0, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getOrder();
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(8, (-2314.97), 2091.67493553, 0.0, (-2314.97));
      DormandPrince853Integrator dormandPrince853Integrator1 = new DormandPrince853Integrator(8, (-2314.97), 40.0, (-2314.97));
      // Undeclared exception!
      try { 
        dormandPrince853Integrator1.computeDerivatives((-2314.97), doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-1720.659515596));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double0 = 0.0;
      int int0 = 1815;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-141.27919769);
      doubleArray0[2] = (double) 1815;
      // Undeclared exception!
      try { 
        midpointIntegrator0.computeDerivatives(0.0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(45.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      MullerSolver mullerSolver0 = new MullerSolver(0.0, (-836.5));
      eulerIntegrator0.addEventHandler(eventHandler0, 0.0, 0.0, 0, (UnivariateSolver) mullerSolver0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 45.0;
      doubleArray0[1] = 45.0;
      doubleArray0[2] = 45.0;
      doubleArray0[3] = 45.0;
      doubleArray0[4] = 45.0;
      doubleArray0[5] = 45.0;
      doubleArray0[6] = 45.0;
      doubleArray0[7] = 45.0;
      doubleArray0[8] = 45.0;
      try { 
        eulerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 45.0, doubleArray0, 45.0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(754.5, 754.5, 754.5, 754.5);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 42.1392;
      doubleArray0[1] = 754.5;
      doubleArray0[2] = 754.5;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (-867.94174408);
      doubleArray0[5] = 754.5;
      doubleArray0[6] = (-1080.0);
      doubleArray0[7] = (-1080.0);
      doubleArray0[8] = 42.1392;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1080.0), 42.1392, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setControlFactors((-3546.64), 69.5, (-867.94174408), 1381.97771178);
      graggBulirschStoerIntegrator0.addEventHandler((EventHandler) null, (-2496.08931), (-867.94174408), 936, (UnivariateSolver) null);
      double double0 = graggBulirschStoerIntegrator0.getCurrentStepStart();
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1.7642714221524228E-7;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 1.7642714221524228E-7, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.addEventHandler((EventHandler) null, 2.220446049250313E-13, 0.0, 3504);
      dormandPrince54Integrator0.getOrder();
      Collection<EventHandler> collection0 = dormandPrince54Integrator0.getEventHandlers();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(37.37296614865);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer0 = new StepNormalizer(37.37296614865, fixedStepHandler0);
      midpointIntegrator0.addStepHandler(stepNormalizer0);
      midpointIntegrator0.addEventHandler(eventHandler0, 0.0, 0.0, 961, (UnivariateSolver) null);
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      midpointIntegrator0.addEventHandler(eventHandler1, Double.NaN, Double.NaN, 4194);
      midpointIntegrator0.clearEventHandlers();
      midpointIntegrator0.clearEventHandlers();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, 5.746280211439194, (-258.72295));
      double double0 = 1000.0;
      graggBulirschStoerIntegrator0.clearStepHandlers();
      graggBulirschStoerIntegrator0.getEvaluations();
      graggBulirschStoerIntegrator0.setControlFactors(900.1700793025288, (-258.72295), 1000.0, 122.20601494);
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = null;
      try {
        adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(0, 1497.042575025089, 4194, 5.746280211439194, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // multistep method needs at least 0 previous steps, got 2
         //
         verifyException("org.apache.commons.math3.ode.MultistepIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-313.7597), (-313.7597), (-1211.072), (-313.7597));
      dormandPrince54Integrator0.setStepSizeControl((-313.7597), (-1211.072), 0.6776238207547169, 1.1577568054199219);
      dormandPrince54Integrator0.clearEventHandlers();
      dormandPrince54Integrator0.setMaxEvaluations(697);
      dormandPrince54Integrator0.getMaxEvaluations();
      dormandPrince54Integrator0.getOrder();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 5;
      doubleArray0[1] = 1.1577568054199219;
      doubleArray0[2] = (-1211.072);
      doubleArray0[3] = (-313.7597);
      doubleArray0[4] = (double) 697;
      doubleArray0[5] = 0.6776238207547169;
      doubleArray0[6] = (double) 697;
      doubleArray0[7] = (-1211.072);
      doubleArray0[8] = (-1211.072);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(697, (-1211.072), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setInterpolationControl(false, Integer.MAX_VALUE);
      assertEquals(918.7585014572654, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1000.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(352.69, 1000.0, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setMaxEvaluations(0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator1 = new GraggBulirschStoerIntegrator(0.0, 0.0, 0.0, 0.0);
      graggBulirschStoerIntegrator1.getStepHandlers();
      graggBulirschStoerIntegrator1.getMaxEvaluations();
      graggBulirschStoerIntegrator0.setStabilityCheck(false, 0, 0, 0);
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      graggBulirschStoerIntegrator0.addStepHandler(dummyStepHandler0);
      graggBulirschStoerIntegrator1.setInterpolationControl(false, (-897));
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator1.getName());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = Double.NaN;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(Double.NaN, Double.NaN, doubleArray0, doubleArray0);
      int int0 = (-1277);
      graggBulirschStoerIntegrator0.clearStepHandlers();
      graggBulirschStoerIntegrator0.setMaxEvaluations((-3229));
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = (double) (-1277);
      graggBulirschStoerIntegrator0.clearStepHandlers();
      doubleArray1[2] = (double) (-1277);
      graggBulirschStoerIntegrator0.setMaxEvaluations((-3229));
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.initializeStep(true, (-1277), doubleArray1, 3962.2989642937, doubleArray0, doubleArray1, doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 106.2623949753744;
      doubleArray0[1] = 106.2623949753744;
      doubleArray0[2] = 106.2623949753744;
      doubleArray0[3] = 106.2623949753744;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(106.2623949753744, 106.2623949753744, doubleArray0, doubleArray0);
      EventHandler eventHandler0 = null;
      boolean boolean0 = false;
      dormandPrince853Integrator0.getEvaluations();
      // Undeclared exception!
      try { 
        dormandPrince853Integrator0.initializeStep(false, 1965, doubleArray0, 0.0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-440.85866);
      doubleArray0[1] = (-2314.97);
      doubleArray0[2] = 40.0;
      doubleArray0[3] = (-2314.97);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(158.96210586609, (-2314.97), doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getOrder();
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(8, (-440.85866), (-2642.8), 8, 0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      try { 
        adamsBashforthIntegrator0.integrate(expandableStatefulODE0, (-239.666773811988));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one column
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-6817.715);
      doubleArray0[1] = (-6817.715);
      doubleArray0[2] = (-6817.715);
      doubleArray0[3] = (-6817.715);
      doubleArray0[4] = (-361.6755);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-6817.715), (-6817.715), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setControlFactors((-3070.7435), 0.0, 918.0, (-6817.715));
      assertEquals(6817.715, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
  }
}
