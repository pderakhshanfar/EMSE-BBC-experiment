/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 22:38:38 GMT 2021
 */

package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.polynomials.PolynomialFunction;
import org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver;
import org.apache.commons.math3.analysis.solvers.IllinoisSolver;
import org.apache.commons.math3.analysis.solvers.PegasusSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator;
import org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.EulerIntegrator;
import org.apache.commons.math3.ode.nonstiff.GillIntegrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.nonstiff.MidpointIntegrator;
import org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator;
import org.apache.commons.math3.ode.sampling.DummyStepHandler;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.StepHandler;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.apache.commons.math3.ode.sampling.StepNormalizerBounds;
import org.apache.commons.math3.ode.sampling.StepNormalizerMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegrator_ESTest extends AbstractIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1667.218, 1667.218, 1667.218, (-7.25680516883106E-8));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-25.34468075454);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1667.218;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (-7.25680516883106E-8);
      doubleArray0[5] = 1667.218;
      doubleArray0[6] = (-7.25680516883106E-8);
      doubleArray0[7] = (-7.25680516883106E-8);
      doubleArray0[8] = 1.0;
      highamHall54Integrator0.setStepSizeControl(1.0, 1667.218, doubleArray0, doubleArray0);
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      DummyStepHandler.getInstance();
      highamHall54Integrator0.addStepHandler(dummyStepHandler0);
      highamHall54Integrator0.getOrder();
      highamHall54Integrator0.getCurrentStepStart();
      highamHall54Integrator0.getStepHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        highamHall54Integrator0.integrate(expandableStatefulODE0, (-25.34468075454));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 9
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(3038.535, (-1305.5), (-1135.39855325514), 421.4791);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 421.4791, doubleArray0, 1.0, doubleArray0);
      dormandPrince54Integrator0.clearStepHandlers();
      dormandPrince54Integrator0.getEvaluations();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1407.2551566093637, 511.2962072291, 0.9, 3780.04886222);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-1300.09318625);
      doubleArray1[1] = 1407.2551566093637;
      doubleArray1[2] = 511.2962072291;
      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, (-1305.5), doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 4265.870480314288, (-0.6329884851878538), 4265.870480314288);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      DormandPrince54Integrator dormandPrince54Integrator1 = new DormandPrince54Integrator((-1135.39855325514), (-2840.0131843697), (-2840.0131843697), (-1300.09318625));
      double[] doubleArray0 = new double[0];
      dormandPrince54Integrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1135.39855325514), doubleArray0, 0.0, doubleArray0);
      dormandPrince54Integrator0.clearStepHandlers();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double double0 = 3038.535;
      double double1 = 421.4791;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(3038.535, 3038.535, (-1135.39855325514), 421.4791);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      double[] doubleArray0 = new double[0];
      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 0.0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double double0 = (-1305.5);
      double double1 = 421.4791;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(3038.535, (-1305.5), (-1135.39855325514), 421.4791);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      dormandPrince54Integrator0.getMaxEvaluations();
      dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 421.4791, doubleArray0, 1.0, doubleArray0);
      dormandPrince54Integrator0.clearStepHandlers();
      dormandPrince54Integrator0.getCurrentSignedStepsize();
      double double2 = (-4659.846686607239);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      dormandPrince54Integrator0.integrate(expandableStatefulODE0, 421.4791);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(3038.535, (-1305.5), (-1135.39855325514), 421.4791);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(421.4791);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-1459.21085171412), (double)0, (-54.0), 0.0, 3038.535).when(eventHandler0).g(anyDouble() , any(double[].class));
      midpointIntegrator0.addEventHandler(eventHandler0, (-1135.39855325514), (-747.15856), 4664);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.0, fixedStepHandler0);
      midpointIntegrator0.addStepHandler(stepNormalizer0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      midpointIntegrator0.integrate(expandableStatefulODE0, 3105.5680572552233);
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double0 = 522.1257691422442;
      double double1 = 0.0;
      int int0 = 2892;
      midpointIntegrator0.addEventHandler(eventHandler1, double0, double1, int0);
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter0);
      MidpointIntegrator midpointIntegrator1 = new MidpointIntegrator(int0);
      midpointIntegrator1.integrate(expandableStatefulODE0, (double) int0);
      midpointIntegrator1.getMaxEvaluations();
      midpointIntegrator1.getEvaluations();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double double0 = 3038.535;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(3038.535, (-1305.5), (-1135.39855325514), 421.4791);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      dormandPrince54Integrator0.addStepHandler((StepHandler) null);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 421.4791, doubleArray0, 1.0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-1300.09318625);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, (-1300.09318625), 0.0, 0.0);
      int int0 = 8;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(8);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      int int1 = 502;
      midpointIntegrator0.addEventHandler(eventHandler0, 0.0, (-1300.09318625), 502);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      midpointIntegrator0.integrate(expandableStatefulODE0, (-1300.09318625));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, (-1300.09318625), 0.0, 0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((double)8, (-798.8), 0.0, 5.6843418860808015E-11, (-3289.5633581885)).when(eventHandler0).g(anyDouble() , any(double[].class));
      midpointIntegrator0.addEventHandler(eventHandler0, 887.459524206772, (-1300.09318625), 5);
      midpointIntegrator0.getMaxEvaluations();
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        midpointIntegrator0.integrate(expandableStatefulODE0, (-1300.09318625));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [\uFFFD, \uFFFD], values: [-3,289.563, -3,289.563]
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, (-1300.09318625), 0.0, 0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1414.976406576;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 1414.976406576, doubleArray0, doubleArray1);
      graggBulirschStoerIntegrator0.getEventHandlers();
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(8, (-1128.55248), 1.1368683772161603E-10, 1414.976406576, (-790.65134717));
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter1);
      // Undeclared exception!
      try { 
        adamsBashforthIntegrator0.integrate(expandableStatefulODE0, (-1989.0119009));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one column
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(3038.535, (-1300.09318625), 4243.0, (-1.0));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(4243.0);
      midpointIntegrator0.addEventHandler((EventHandler) null, 4243.0, 0.0, 1200);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      try { 
        midpointIntegrator0.integrate(expandableStatefulODE0, (double) 8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(1009.3641536604474);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1009.3641536604474, 1000.0, 1009.3641536604474, 1009.3641536604474);
      dormandPrince853Integrator0.getEventHandlers();
      dormandPrince853Integrator0.setStepSizeControl(1000.0, 1.8995553996578656E216, 1009.3641536604474, 1009.3641536604474);
      dormandPrince853Integrator0.getOrder();
      threeEighthesIntegrator0.getName();
      threeEighthesIntegrator0.getMaxEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-2.2239222395888823E-8), doubleArray0, (-578.7323598085887), doubleArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-2592.10252700186), 554.827702127, 554.827702127, 554.827702127);
      dormandPrince853Integrator0.getCurrentSignedStepsize();
      dormandPrince853Integrator0.getEventHandlers();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2592.10252700186);
      doubleArray0[1] = 554.827702127;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1199.2373779757, 554.827702127, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.clearStepHandlers();
      graggBulirschStoerIntegrator0.setStabilityCheck(true, 18, 1034, 554.827702127);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, (-1300.09318625), 0.0, 0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((double)8, 0.0, (-94.8394503673087), (double)8).when(eventHandler0).g(anyDouble() , any(double[].class));
      midpointIntegrator0.addEventHandler(eventHandler0, 887.7548517823341, (-1300.09318625), (-4));
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        midpointIntegrator0.integrate(expandableStatefulODE0, (-1300.09318625));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-4) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double double0 = 0.0;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, (-1300.09318625), 0.0, 0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      int int0 = 5;
      midpointIntegrator0.setMaxEvaluations(8);
      midpointIntegrator0.addEventHandler(eventHandler0, 887.459524206772, (-1300.09318625), 5);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        midpointIntegrator0.integrate(expandableStatefulODE0, (-1300.09318625));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (8) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, (-1300.09318625), 0.0, 0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(3090.4164029, (-3.1327120557842516E145), (-1300.09318625), (-3.1327120557842516E145), (-1081.1933804013)).when(eventHandler0).g(anyDouble() , any(double[].class));
      midpointIntegrator0.addEventHandler(eventHandler0, 887.459524206772, (-1300.09318625), 5);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        midpointIntegrator0.integrate(expandableStatefulODE1, (-1737.976699496));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [\uFFFD, \uFFFD], values: [-31,327,120,557,842,516,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000, -1,081.193]
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double double0 = 659.9552666445;
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(659.9552666445);
      midpointIntegrator0.getStepHandlers();
      midpointIntegrator0.getCurrentStepStart();
      double double1 = 1.1280164615892276;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1.1280164615892276, Double.NaN, 659.9552666445, 659.9552666445);
      double double2 = (-3072.755459577);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      int int0 = (-1786);
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.1280164615892276;
      doubleArray0[1] = (double) (-1786);
      doubleArray0[2] = (double) (-1786);
      PolynomialFunction polynomialFunction0 = new PolynomialFunction(doubleArray0);
      UnivariateFunction univariateFunction0 = polynomialFunction0.derivative();
      try { 
        bracketingNthOrderBrentSolver0.solve((-1786), univariateFunction0, (-1786.0), (-2142.0190793553), 879.14527889);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [879.145, -2,142.019]
         //
         verifyException("org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(4.94E-321, 1.1368683772161603E-10, 1.1280164615892276, (-987.013585));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2921.88274766, doubleArray0, 421.4791, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(1.0);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-1550.18498577), (-1063.47045332547), 0.0, 0.0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1573.0);
      double double0 = 2.370927333831787;
      // Undeclared exception!
      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) null, (-1550.18498577), doubleArray0, 2.370927333831787, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(1.0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1573.0), 1.1368683772161603E-10, 1.0, 1.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (-2261.9777369), 2.220446049250313E-13, (-3946));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 1.0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(2497).when(secondOrderDifferentialEquations0).getDimension();
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.FIRST;
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.0, fixedStepHandler0, stepNormalizerBounds0);
      gillIntegrator0.addStepHandler(stepNormalizer0);
      gillIntegrator0.setMaxEvaluations(104);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 104;
      doubleArray0[1] = (double) 104;
      doubleArray0[2] = (-10.757575757575758);
      doubleArray0[3] = (double) 104;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(104, 1239.703374567, doubleArray0, doubleArray0);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 668.9805716);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4,994 != 4
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, (-1300.09318625), 0.0, 0.9);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 0.0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 10
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double double0 = 0.0;
      GillIntegrator gillIntegrator0 = new GillIntegrator(0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      gillIntegrator0.integrate(expandableStatefulODE0, 0.0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2120.555966), (-2120.555966), 1618.9773, 1618.9773);
      dormandPrince54Integrator0.clearStepHandlers();
      dormandPrince54Integrator0.getStepHandlers();
      dormandPrince54Integrator0.getEventHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1618.9773;
      doubleArray0[1] = 1998.31232;
      doubleArray0[2] = 1998.31232;
      doubleArray0[3] = (-2120.555966);
      doubleArray0[4] = 1618.9773;
      doubleArray0[5] = 1618.9773;
      doubleArray0[6] = (-2120.555966);
      doubleArray0[7] = 1998.31232;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 1998.31232;
      doubleArray1[1] = 1618.9773;
      doubleArray1[2] = (-2120.555966);
      doubleArray1[3] = (-2120.555966);
      doubleArray1[4] = 1618.9773;
      doubleArray1[5] = 1618.9773;
      doubleArray1[6] = 1998.31232;
      doubleArray1[7] = 1998.31232;
      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1998.31232, doubleArray0, (-2120.555966), doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 0.0, (-1278.0), 0.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      int int0 = 0;
      highamHall54Integrator0.addEventHandler(eventHandler0, (-1252.015546962793), 1994.3196, 0, (UnivariateSolver) null);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.2222222222222222, 0.0, (-1278.0), (-399.397));
      int int1 = 62;
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 62);
      graggBulirschStoerIntegrator0.getEvaluations();
      highamHall54Integrator0.getEventHandlers();
      graggBulirschStoerIntegrator0.getCurrentStepStart();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1994.3196;
      doubleArray0[1] = 1994.3196;
      doubleArray0[2] = (-399.397);
      doubleArray0[3] = (-399.397);
      doubleArray0[4] = (-399.397);
      doubleArray0[5] = (-399.397);
      // Undeclared exception!
      try { 
        highamHall54Integrator0.computeDerivatives((-399.397), doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-538.708956078319), (-1.0), (-538.708956078319), (-1.0));
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer0 = new StepNormalizer((-1.0), fixedStepHandler0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-538.708956078319);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-538.708956078319);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      stepNormalizer0.init(0.0, doubleArray0, (-1017.218274797607));
      dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      DummyStepHandler.getInstance();
      dormandPrince54Integrator0.addStepHandler(dummyStepHandler0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, (-1300.09318625), 0.0, 0.9);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 0.0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double double0 = (-1318.97380757);
      double double1 = 0.0;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-1318.97380757), 0.0, 0.0, 0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double double2 = 0.0;
      // Undeclared exception!
      dormandPrince54Integrator0.integrate(expandableStatefulODE0, 0.0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 803.089582533;
      double double0 = 942.82013483125;
      doubleArray0[4] = 942.82013483125;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(803.089582533, Double.NaN, doubleArray0, doubleArray0);
      boolean boolean0 = false;
      graggBulirschStoerIntegrator0.clearStepHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, Double.NaN, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 1674.524082679715, 0.0, 0.125);
      dormandPrince853Integrator0.getMaxEvaluations();
      dormandPrince853Integrator0.getCurrentSignedStepsize();
      dormandPrince853Integrator0.clearStepHandlers();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.125;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) Integer.MAX_VALUE;
      doubleArray0[4] = 1956.98824;
      doubleArray0[5] = 0.0;
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(226, 4.94E-321, 2256.58557390849, doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 1674.524082679715, 0.0, 0.125);
      dormandPrince853Integrator0.getMaxEvaluations();
      dormandPrince853Integrator0.getCurrentSignedStepsize();
      dormandPrince853Integrator0.clearStepHandlers();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.125;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) Integer.MAX_VALUE;
      doubleArray0[4] = 1956.98824;
      doubleArray0[5] = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1674.524082679715, 1956.98824, doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-1.0));
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 155.2783546899591, (-2119.42), 0, (UnivariateSolver) illinoisSolver0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1000.0;
      doubleArray0[1] = 1.0E15;
      doubleArray0[2] = 0.022651792198360825;
      doubleArray0[3] = 1.0E15;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1000.0, 1.0E15, doubleArray0, doubleArray0);
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.LAST;
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.022651792198360825, (FixedStepHandler) null, stepNormalizerMode0, stepNormalizerBounds0);
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, (-432.418), (-432.418), 0.0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2953.54, 0.0, (-432.418), 917.25278256);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.BOTH;
      StepNormalizer stepNormalizer0 = new StepNormalizer((-5.0), fixedStepHandler0, stepNormalizerMode0, stepNormalizerBounds0);
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      dormandPrince54Integrator0.getName();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.2251564463762044);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-432.418);
      doubleArray0[3] = (-5.0);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-5.0);
      doubleArray0[6] = (-1289.9);
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = null;
      try {
        adamsBashforthIntegrator0 = new AdamsBashforthIntegrator((-1780), (-1.2251564463762044), 1172.5374537566354, doubleArray0, doubleArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(3038.535);
      midpointIntegrator0.getName();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-12.0), (-12.0), 0.0, (-12.4049));
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-12.4049), (-1762.0), 545.6416, 1.0);
      dormandPrince54Integrator0.getStepHandlers();
      dormandPrince54Integrator0.setSafety(545.6416);
      dormandPrince54Integrator0.setStepSizeControl(Double.NaN, 1193.597828585332, Double.NaN, (-1.0));
      dormandPrince54Integrator0.setSafety(Double.NaN);
      dormandPrince54Integrator0.getOrder();
      dormandPrince54Integrator0.getCurrentStepStart();
      highamHall54Integrator0.getCurrentStepStart();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double double0 = 0.65;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 0.0, 0.65, 0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      highamHall54Integrator0.getStepHandlers();
      double double1 = 522.1257691422442;
      // Undeclared exception!
      highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 522.1257691422442, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1778.2918824978653;
      doubleArray0[1] = 1778.2918824978653;
      doubleArray0[2] = (-31.139403219565178);
      doubleArray0[3] = 1778.2918824978653;
      doubleArray0[4] = 1778.2918824978653;
      doubleArray0[5] = 1778.2918824978653;
      doubleArray0[6] = 1470.8707264153;
      doubleArray0[7] = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1778.2918824978653, 1778.2918824978653, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setStabilityCheck(false, 1676, 1676, (-31.139403219565178));
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1778.2918824978653, 0.0, 1.0, (-31.139403219565178));
      highamHall54Integrator0.getOrder();
      highamHall54Integrator0.setMaxEvaluations((-4461));
      graggBulirschStoerIntegrator0.setOrderControl(0, Double.NaN, (-919.994));
      assertEquals(1778.2918824978653, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2027.28337919);
      doubleArray0[1] = (-2027.28337919);
      doubleArray0[2] = (-2027.28337919);
      doubleArray0[3] = (-2027.28337919);
      doubleArray0[4] = (-2027.28337919);
      doubleArray0[5] = (-1303.448);
      doubleArray0[6] = 751.6;
      doubleArray0[7] = (-2027.28337919);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-1303.448), (-2027.28337919), doubleArray0, doubleArray0);
      dormandPrince54Integrator0.clearEventHandlers();
      assertEquals(1625.5640455049586, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double double0 = 1658.349270251;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1658.349270251, 1658.349270251, 1658.349270251, 1658.349270251);
      dormandPrince853Integrator0.getEventHandlers();
      dormandPrince853Integrator0.clearEventHandlers();
      double double1 = 0.037037037037037035;
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.037037037037037035, 1.0, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      graggBulirschStoerIntegrator0.getMaxEvaluations();
      // Undeclared exception!
      try { 
        dormandPrince853Integrator0.initializeStep(true, 146, doubleArray0, 0.0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(3038.535, (-1305.5), (-1135.39855325514), 421.4791);
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-1135.39855325514));
      midpointIntegrator0.addEventHandler((EventHandler) null, 3038.535, (-1305.5), (-1110));
      double double0 = 2.8580487432;
      StepNormalizer stepNormalizer0 = new StepNormalizer(3038.535, (FixedStepHandler) null);
      midpointIntegrator0.addStepHandler(stepNormalizer0);
      FirstOrderConverter firstOrderConverter0 = null;
      try {
        firstOrderConverter0 = new FirstOrderConverter((SecondOrderDifferentialEquations) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.FirstOrderConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1467.0, 2.5, 0.0, 2.5);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      dormandPrince54Integrator0.addEventHandler(eventHandler0, 1000.0, 1467.0, (-2641));
      assertEquals(1467.0, dormandPrince54Integrator0.getMinStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2372.6521556);
      doubleArray0[1] = (-2372.6521556);
      doubleArray0[2] = (-2372.6521556);
      doubleArray0[3] = (-2372.6521556);
      doubleArray0[4] = (-2372.6521556);
      doubleArray0[5] = (-2372.6521556);
      doubleArray0[6] = (-1460.792648);
      doubleArray0[7] = (-2372.6521556);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-2372.6521556), (-2372.6521556), doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 581.20575485537;
      doubleArray1[1] = 2258.0;
      graggBulirschStoerIntegrator0.getEventHandlers();
      doubleArray1[2] = 581.20575485537;
      doubleArray1[3] = (-2372.6521556);
      doubleArray1[4] = (-1460.792648);
      doubleArray1[5] = (-2372.6521556);
      doubleArray1[6] = (-1460.792648);
      doubleArray1[7] = 581.20575485537;
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.computeDerivatives(581.20575485537, doubleArray0, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = 0.0;
      double double2 = (-150.031349029716);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1.0), (-1.0), 0.0, (-150.031349029716));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      graggBulirschStoerIntegrator0.setOrderControl(213, 1000.0, 0.0);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      int int0 = 0;
      graggBulirschStoerIntegrator0.setMaxEvaluations(0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime((-422.4791));
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (-1.0));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(1388.20838);
      gillIntegrator0.getEvaluations();
      gillIntegrator0.getEventHandlers();
      gillIntegrator0.clearStepHandlers();
      gillIntegrator0.addStepHandler((StepHandler) null);
      gillIntegrator0.setMaxEvaluations(0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1239.703374567;
      doubleArray0[1] = 1388.20838;
      doubleArray0[2] = (-10.757575757575758);
      doubleArray0[3] = (-10.757575757575758);
      doubleArray0[4] = 1239.703374567;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 1388.20838;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 0;
      double[] doubleArray1 = new double[3];
      gillIntegrator0.getMaxEvaluations();
      doubleArray1[0] = 1239.703374567;
      doubleArray1[1] = 1239.703374567;
      doubleArray1[2] = (double) 0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-10.757575757575758), 1239.703374567, doubleArray0, doubleArray1);
      assertEquals(10.757575757575758, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double double0 = 3038.535;
      double double1 = (-1305.5);
      double double2 = (-1135.39855325514);
      double double3 = (-1135.39855325514);
      double double4 = 421.4791;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1197.431200000763, 4.94E-321, (-1135.39855325514), 421.4791);
      PegasusSolver pegasusSolver0 = new PegasusSolver(578.7323597863495, 2006.0, 4.711165925070571E-58);
      dormandPrince54Integrator0.addEventHandler((EventHandler) null, 1.1502367854118347, 4.94E-321, (-3117), (UnivariateSolver) pegasusSolver0);
      FirstOrderConverter firstOrderConverter0 = null;
      try {
        firstOrderConverter0 = new FirstOrderConverter((SecondOrderDifferentialEquations) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.FirstOrderConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(27.59209969944671);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 27.59209969944671;
      doubleArray0[1] = 27.59209969944671;
      doubleArray0[2] = (-2720.584727855);
      doubleArray0[3] = (-2720.584727855);
      doubleArray0[4] = (-2720.584727855);
      doubleArray0[5] = (-2720.584727855);
      doubleArray0[6] = 27.59209969944671;
      doubleArray0[7] = 27.59209969944671;
      doubleArray0[8] = (-2720.584727855);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-2720.584727855), (-2720.584727855), doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      PegasusSolver pegasusSolver0 = new PegasusSolver(9.0, (-995.0), 2662.327);
      highamHall54Integrator0.addEventHandler(eventHandler0, 27.59209969944671, 27.59209969944671, Integer.MAX_VALUE, (UnivariateSolver) pegasusSolver0);
      highamHall54Integrator0.getEvaluations();
      highamHall54Integrator0.setStepSizeControl((-2720.584727855), (-1.0), doubleArray0, doubleArray0);
      int int0 = highamHall54Integrator0.getOrder();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1158.41728213951);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, (-1158.41728213951), doubleArray0, doubleArray0);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-3688.0707072193), 0.0, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getEvaluations();
      int int0 = dormandPrince853Integrator0.getOrder();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-2339);
      doubleArray0[1] = (double) (-2339);
      doubleArray0[2] = (double) (-2339);
      doubleArray0[3] = (double) (-2339);
      doubleArray0[4] = (double) (-2339);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) (-2339);
      doubleArray1[1] = (double) (-2339);
      doubleArray1[2] = (double) (-2339);
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = null;
      try {
        adamsBashforthIntegrator0 = new AdamsBashforthIntegrator((-2339), (-2339), (-2339), doubleArray0, doubleArray1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer", e);
      }
  }
}
