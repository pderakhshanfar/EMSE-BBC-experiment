/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 22:59:02 GMT 2021
 */

package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.function.Asin;
import org.apache.commons.math3.analysis.solvers.BrentSolver;
import org.apache.commons.math3.analysis.solvers.IllinoisSolver;
import org.apache.commons.math3.analysis.solvers.MullerSolver;
import org.apache.commons.math3.analysis.solvers.MullerSolver2;
import org.apache.commons.math3.analysis.solvers.PegasusSolver;
import org.apache.commons.math3.analysis.solvers.RiddersSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.linear.Array2DRowRealMatrix;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator;
import org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator;
import org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.EulerIntegrator;
import org.apache.commons.math3.ode.nonstiff.GillIntegrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.nonstiff.MidpointIntegrator;
import org.apache.commons.math3.ode.sampling.DummyStepHandler;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.StepHandler;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.apache.commons.math3.ode.sampling.StepNormalizerBounds;
import org.apache.commons.math3.ode.sampling.StepNormalizerMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegrator_ESTest extends AbstractIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(151.0, (-257.428807408944), doubleArray0, doubleArray0);
      highamHall54Integrator0.clearEventHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 192.72332962947, doubleArray0, 151.0, doubleArray0);
      highamHall54Integrator0.getEvaluations();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double double0 = (-257.428807408944);
      double double1 = 1584.0;
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1584.0, 1584.0, doubleArray0, doubleArray1);
      LinkedList<StepHandler> linkedList0 = new LinkedList<StepHandler>();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      highamHall54Integrator0.setSafety((-257.428807408944));
      double double2 = 0.0;
      highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 51.95094647, doubleArray1, 0.0, doubleArray1);
      highamHall54Integrator0.getStepHandlers();
      double double3 = (-375.8612);
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-375.8612));
      FirstOrderConverter firstOrderConverter1 = null;
      try {
        firstOrderConverter1 = new FirstOrderConverter((SecondOrderDifferentialEquations) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.FirstOrderConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      RiddersSolver riddersSolver0 = new RiddersSolver(1491, 1491);
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-2088.29476605029), (-4676.73737134), doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      highamHall54Integrator0.addEventHandler(eventHandler0, 151.0, (double) 1491, 1491, (UnivariateSolver) riddersSolver0);
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      highamHall54Integrator0.addEventHandler(eventHandler1, (-4676.73737134), (double) 1491, 1491);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      HighamHall54Integrator highamHall54Integrator1 = new HighamHall54Integrator(1491, 2371.042423314358, doubleArray0, doubleArray0);
      highamHall54Integrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 151.0, doubleArray0, (-874.865), doubleArray0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-283.347798559), 151.0, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setStabilityCheck(false, 1491, 2454, 3419.166);
      EventHandler eventHandler2 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler2, 5390.39686540926, 1430.5189831487533, 1491, (UnivariateSolver) riddersSolver0);
      EventHandler eventHandler3 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler3, 1430.5189831487533, 5390.39686540926, (-1440), (UnivariateSolver) riddersSolver0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          double[] doubleArray0 = new double[0];
          HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(151.0, (-257.428807408944), doubleArray0, doubleArray0);
          SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
          doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
          highamHall54Integrator0.getStepHandlers();
          FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
          highamHall54Integrator0.setSafety((-257.428807408944));
          EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
          doReturn(0.0, (-257.428807408944), (-257.428807408944), 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
          BrentSolver brentSolver0 = new BrentSolver(0, 3001.0, 0.0);
          highamHall54Integrator0.addEventHandler(eventHandler0, (double) 0, 1696.3580771817, Integer.MAX_VALUE, (UnivariateSolver) brentSolver0);
          highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 151.0, doubleArray0);
          highamHall54Integrator0.getStepHandlers();
          GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(5260.1498460247, 5260.1498460247, (-1150.9386609), 151.0);
          graggBulirschStoerIntegrator0.setControlFactors(5260.1498460247, 151.0, 0.0, 0.0);
          SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
          doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
          FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
          ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
          ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter0);
          // Undeclared exception!
          highamHall54Integrator0.integrate(expandableStatefulODE1, (double) 0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      RiddersSolver riddersSolver0 = new RiddersSolver(1491, 1491);
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-2088.29476605029), (-4676.73737134), doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((double)1491, (-4676.73737134), 1.1368683772161603E-10, (-4676.73737134), (-2313.0)).when(eventHandler0).g(anyDouble() , any(double[].class));
      RiddersSolver riddersSolver1 = new RiddersSolver(1491, 1412.0);
      highamHall54Integrator0.addEventHandler(eventHandler0, (double) 1491, (double) 1491, 1491, (UnivariateSolver) riddersSolver1);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      try { 
        highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1412.0, doubleArray0, (-2313.0), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [367.853, 1,412], values: [-2,313, -2,313]
         //
         verifyException("org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-257.428807408944), (-257.428807408944), (-257.428807408944), 0.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(416.1926, (-4.8402541351522003E-36), (-4.8402541351522003E-36), 416.1926, (double)1).when(eventHandler0).g(anyDouble() , any(double[].class));
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(3265.0, (double)1).when(eventHandler1).g(anyDouble() , any(double[].class));
      RiddersSolver riddersSolver0 = new RiddersSolver(1412.0, 0.0);
      highamHall54Integrator0.addEventHandler(eventHandler1, (-257.428807408944), 0.0, 1491, (UnivariateSolver) riddersSolver0);
      highamHall54Integrator0.getEvaluations();
      highamHall54Integrator0.addEventHandler(eventHandler0, (-257.428807408944), 0.5914691686630249, 174);
      highamHall54Integrator0.setMaxEvaluations(1437);
      try { 
        highamHall54Integrator0.integrate(expandableStatefulODE0, 0.0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (174) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-257.428807408944), (-257.428807408944), (-257.428807408944), 0.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(5037.384976043).when(eventHandler0).g(anyDouble() , any(double[].class));
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(Double.NaN, (double)2, 5037.384976043, 868.69089894, 151.0).when(eventHandler1).g(anyDouble() , any(double[].class));
      RiddersSolver riddersSolver0 = new RiddersSolver(1412.0, 0.0);
      highamHall54Integrator0.addEventHandler(eventHandler1, (-257.428807408944), 0.0, 1491, (UnivariateSolver) riddersSolver0);
      highamHall54Integrator0.addEventHandler(eventHandler0, (-257.428807408944), 0.5914691686630249, 174);
      highamHall54Integrator0.setMaxEvaluations(1437);
      try { 
        highamHall54Integrator0.integrate(expandableStatefulODE0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [\uFFFD, \uFFFD], values: [151, 151]
         //
         verifyException("org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 0.0, 0.0, 1.0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, 0.0, 1.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      graggBulirschStoerIntegrator0.getEventHandlers();
      double[] doubleArray0 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(5.600896265625552E-8, 5.650063324725722E-8, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.addEventHandler(eventHandler0, (-3677.0), 1.0, 337);
      dormandPrince54Integrator0.getStepHandlers();
      dormandPrince54Integrator0.setSafety(0.0);
      dormandPrince54Integrator0.getMaxEvaluations();
      dormandPrince54Integrator0.getEventHandlers();
      dormandPrince54Integrator0.setSafety((-3677.0));
      dormandPrince54Integrator0.getStepHandlers();
      dormandPrince54Integrator0.clearStepHandlers();
      dormandPrince54Integrator0.getMaxEvaluations();
      highamHall54Integrator0.getCurrentSignedStepsize();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(151.0, (-257.428807408944), doubleArray0, doubleArray0);
      int int0 = 963;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(963).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(3, (-257.428807408944), (-2107.76665773), (-2107.76665773), (-4992.2431267586));
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      adamsBashforthIntegrator0.integrate(expandableStatefulODE0, (-1417.2894));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(151.0, (-257.428807408944), doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      highamHall54Integrator0.setSafety((-257.428807408944));
      highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 151.0, doubleArray0);
      highamHall54Integrator0.getStepHandlers();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(5260.1498460247, 5260.1498460247, (-1150.9386609), 151.0);
      double double0 = 1405.44;
      graggBulirschStoerIntegrator0.setControlFactors(5260.1498460247, 1405.44, 0.0, 0.0);
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(2076, 151.0, 1000.0, 0.0, 1000.0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(151.0, (-257.428807408944), doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      try { 
        highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1261.212143031504, doubleArray0, 1261.212143031504, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(151.0, (-257.428807408944), doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      // Undeclared exception!
      highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-3304.8703281), doubleArray0, 1955.2795179247, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-257.428807408944), (-257.428807408944), (-257.428807408944), 0.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler1).g(anyDouble() , any(double[].class));
      RiddersSolver riddersSolver0 = new RiddersSolver(1412.0, 0.0);
      highamHall54Integrator0.addEventHandler(eventHandler1, (-257.428807408944), 0.0, 1491, (UnivariateSolver) riddersSolver0);
      highamHall54Integrator0.addEventHandler(eventHandler0, (-257.428807408944), 0.5914691686630249, 174);
      highamHall54Integrator0.setMaxEvaluations(1437);
      try { 
        highamHall54Integrator0.integrate(expandableStatefulODE0, 0.0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (1,437) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double double0 = (-257.428807408944);
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(151.0, (-257.428807408944), doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        highamHall54Integrator0.integrate((ExpandableStatefulODE) null, (-257.428807408944));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(151.0, (-257.428807408944), doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      // Undeclared exception!
      highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1261.212143031504, doubleArray0, 151.0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-30.674084731089398);
      doubleArray0[1] = (-30.674084731089398);
      doubleArray0[2] = (-30.674084731089398);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-30.674084731089398), (-30.674084731089398), doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0);
      midpointIntegrator0.setMaxEvaluations(0);
      midpointIntegrator0.getMaxEvaluations();
      midpointIntegrator0.clearStepHandlers();
      MidpointIntegrator midpointIntegrator1 = new MidpointIntegrator(0);
      midpointIntegrator1.getName();
      MidpointIntegrator midpointIntegrator2 = new MidpointIntegrator(0.0);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2054.83), 0.0, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.setMaxEvaluations(0);
      dormandPrince54Integrator0.getOrder();
      try { 
        midpointIntegrator0.computeDerivatives((-3384.21), doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-257.428807408944), (-257.428807408944), (-257.428807408944), 0.0);
      highamHall54Integrator0.setMaxEvaluations(1437);
      try { 
        highamHall54Integrator0.integrate(expandableStatefulODE0, 0.0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (1,437) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-257.428807408944));
      classicalRungeKuttaIntegrator0.clearEventHandlers();
      classicalRungeKuttaIntegrator0.getStepHandlers();
      classicalRungeKuttaIntegrator0.getEvaluations();
      classicalRungeKuttaIntegrator0.getCurrentStepStart();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double double0 = 2751.8323478;
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 2751.8323478;
      doubleArray1[2] = 2751.8323478;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double double1 = 0.0;
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0.0);
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (double) 5;
      doubleArray2[1] = 3659.007258067263;
      midpointIntegrator0.setMaxEvaluations(1761);
      doubleArray2[2] = (-1699.69398396331);
      doubleArray2[3] = 2751.8323478;
      midpointIntegrator0.getCurrentStepStart();
      midpointIntegrator0.getCurrentStepStart();
      try { 
        midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2751.8323478, doubleArray0, 2751.8323478, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 10
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(5, 5, 303.248033, 1216.84458642146);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1806.446694624469;
      doubleArray0[1] = (double) 5;
      doubleArray0[2] = 303.248033;
      doubleArray0[3] = (double) 5;
      doubleArray0[4] = 1216.84458642146;
      doubleArray0[5] = 303.248033;
      doubleArray0[6] = 0.0;
      highamHall54Integrator0.clearStepHandlers();
      HighamHall54Integrator highamHall54Integrator1 = new HighamHall54Integrator(5, 0.0, doubleArray0, doubleArray0);
      try { 
        highamHall54Integrator1.integrate(expandableStatefulODE0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 7
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(151.0, 151.0, (-257.428807408944), 151.0);
      PegasusSolver pegasusSolver0 = new PegasusSolver(1397.9334602807492, 0);
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(0);
      classicalRungeKuttaIntegrator0.getEventHandlers();
      classicalRungeKuttaIntegrator0.getCurrentSignedStepsize();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 5;
      doubleArray0[1] = (double) 5;
      doubleArray0[2] = (-196.53984854069);
      doubleArray0[3] = (-196.53984854069);
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(5, (-196.53984854069), 1462.3, doubleArray0, doubleArray0);
      double[][] doubleArray1 = new double[5][5];
      doubleArray1[0] = doubleArray0;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      adamsMoultonIntegrator0.addEventHandler(eventHandler0, 1851.0, 0.0, 5);
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      doubleArray1[3] = doubleArray0;
      doubleArray1[4] = doubleArray0;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray1);
      adamsMoultonIntegrator0.updateHighOrderDerivativesPhase1(array2DRowRealMatrix0);
      adamsMoultonIntegrator0.getCurrentSignedStepsize();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-30.674084731089398);
      doubleArray0[1] = (-30.674084731089398);
      doubleArray0[2] = (-30.674084731089398);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-30.674084731089398), (-30.674084731089398), doubleArray0, doubleArray0);
      int int0 = 0;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0);
      midpointIntegrator0.setMaxEvaluations(0);
      midpointIntegrator0.getMaxEvaluations();
      midpointIntegrator0.clearStepHandlers();
      MidpointIntegrator midpointIntegrator1 = new MidpointIntegrator(0);
      midpointIntegrator1.getName();
      double double0 = 0.0;
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      MidpointIntegrator midpointIntegrator2 = new MidpointIntegrator(0.0);
      try { 
        midpointIntegrator2.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) 0, doubleArray0, 0.0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double double0 = 2751.8323478;
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 2751.8323478;
      doubleArray1[1] = (double) 5;
      doubleArray1[2] = 2751.8323478;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double double1 = 0.0;
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0.0);
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = (double) 5;
      doubleArray2[1] = 3659.007258067263;
      doubleArray2[2] = (-1699.69398396331);
      doubleArray2[3] = 2751.8323478;
      try { 
        midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2751.8323478, doubleArray0, 2751.8323478, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-257.428807408944));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.30917787551879883;
      doubleArray0[1] = 0.30917787551879883;
      doubleArray0[2] = (-257.428807408944);
      doubleArray0[3] = 0.30917787551879883;
      doubleArray0[4] = (-257.428807408944);
      doubleArray0[5] = 0.30917787551879883;
      doubleArray0[6] = (-257.428807408944);
      doubleArray0[7] = 0.30917787551879883;
      // Undeclared exception!
      try { 
        classicalRungeKuttaIntegrator0.integrate((FirstOrderDifferentialEquations) null, 0.30917787551879883, doubleArray0, (-257.428807408944), doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(137.00359528);
      midpointIntegrator0.getEventHandlers();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      midpointIntegrator0.getEventHandlers();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.0);
      midpointIntegrator0.addEventHandler(eventHandler0, 1000.0, 2831.957086595356, 258, (UnivariateSolver) illinoisSolver0);
      midpointIntegrator0.setMaxEvaluations(174);
      midpointIntegrator0.getMaxEvaluations();
      midpointIntegrator0.clearStepHandlers();
      midpointIntegrator0.getName();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 174;
      doubleArray0[1] = (double) 174;
      doubleArray0[2] = 1000.0;
      doubleArray0[3] = 0.0;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(258).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      try { 
        midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 3659.007258067263, doubleArray0, 0.0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 516
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 2751.8323478;
      doubleArray1[1] = (double) 5;
      doubleArray1[2] = 2751.8323478;
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(5, 5, 2751.8323478, doubleArray0, doubleArray1);
      adamsMoultonIntegrator0.getMaxEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      try { 
        adamsMoultonIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1870.1562298798544, doubleArray1, 1384.3, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double double0 = 137.00359528;
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(137.00359528);
      midpointIntegrator0.getEventHandlers();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double1 = 2831.957086595356;
      int int0 = 258;
      midpointIntegrator0.getEventHandlers();
      double double2 = 0.0;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.0);
      midpointIntegrator0.addEventHandler(eventHandler0, 1.0, 2831.957086595356, 258, (UnivariateSolver) illinoisSolver0);
      midpointIntegrator0.setMaxEvaluations(174);
      midpointIntegrator0.getMaxEvaluations();
      midpointIntegrator0.clearStepHandlers();
      midpointIntegrator0.getName();
      double double3 = 0.0;
      double double4 = 0.0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 174;
      doubleArray0[1] = (double) 174;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      try { 
        midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 3659.007258067263, doubleArray0, 0.0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0.3);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.3;
      doubleArray0[1] = 0.3;
      doubleArray0[2] = 0.3;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.3;
      doubleArray1[1] = 0.3;
      doubleArray1[2] = 1405.063515;
      doubleArray1[3] = 0.3;
      doubleArray1[4] = 0.3;
      doubleArray1[5] = 0.3;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.computeDerivatives(3321.1, doubleArray0, doubleArray0);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1721.609056611601, (-733.41413114), 0.0, (-733.41413114));
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.BOTH;
      StepNormalizer stepNormalizer0 = new StepNormalizer(1405.063515, fixedStepHandler0, stepNormalizerMode0, stepNormalizerBounds0);
      highamHall54Integrator0.addStepHandler(stepNormalizer0);
      // Undeclared exception!
      highamHall54Integrator0.integrate(expandableStatefulODE0, 152.86446904);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-39.383222648088434);
      doubleArray0[2] = (-39.383222648088434);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-39.383222648088434), (-39.383222648088434), doubleArray0, doubleArray0);
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0);
      midpointIntegrator0.setMaxEvaluations(0);
      int int0 = midpointIntegrator0.getMaxEvaluations();
      assertEquals(0, int0);
      
      midpointIntegrator0.clearStepHandlers();
      MidpointIntegrator midpointIntegrator1 = new MidpointIntegrator(0);
      midpointIntegrator1.getName();
      MidpointIntegrator midpointIntegrator2 = new MidpointIntegrator(0.0);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2054.83), 0.0, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.setMaxEvaluations(0);
      dormandPrince54Integrator0.getOrder();
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-39.383222648088434));
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(137.00359528);
      midpointIntegrator0.getEventHandlers();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      midpointIntegrator0.getEventHandlers();
      double double0 = 0.0;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.0);
      midpointIntegrator0.addEventHandler(eventHandler0, 1.0, 2831.957086595356, 258, (UnivariateSolver) illinoisSolver0);
      midpointIntegrator0.setMaxEvaluations(174);
      midpointIntegrator0.getMaxEvaluations();
      midpointIntegrator0.clearStepHandlers();
      midpointIntegrator0.getName();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 174;
      doubleArray0[1] = (double) 174;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 137.00359528;
      doubleArray0[4] = (double) 258;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 2831.957086595356;
      doubleArray0[7] = 137.00359528;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 0.0, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.getOrder();
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 137.00359528;
      // Undeclared exception!
      try { 
        midpointIntegrator0.computeDerivatives((-1668.998176527245), doubleArray0, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-257.428807408944));
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1569.2670618), 292.28592884837906, (-1569.2670618), 4367.8883305302625);
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      graggBulirschStoerIntegrator0.addStepHandler(dummyStepHandler0);
      // Undeclared exception!
      try { 
        classicalRungeKuttaIntegrator0.computeDerivatives((-257.428807408944), (double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double double0 = 3923.302224786191;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3923.302224786191;
      doubleArray0[1] = 3923.302224786191;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(3923.302224786191, 3923.302224786191, doubleArray0, doubleArray0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.NEITHER;
      StepNormalizer stepNormalizer0 = new StepNormalizer(3923.302224786191, fixedStepHandler0, stepNormalizerMode0, stepNormalizerBounds0);
      dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      int int0 = (-667);
      MullerSolver2 mullerSolver2_0 = new MullerSolver2();
      double double1 = 4298.1894;
      Asin asin0 = new Asin();
      try { 
        mullerSolver2_0.solve((-667), (UnivariateFunction) asin0, 3923.302224786191, 6.265569375E11);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-667) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double double0 = (-30.674084731089398);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-30.674084731089398);
      doubleArray0[1] = (-30.674084731089398);
      doubleArray0[2] = (-30.674084731089398);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-30.674084731089398), (-30.674084731089398), doubleArray0, doubleArray0);
      int int0 = 0;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 1048.5031492);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 3
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0.3);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.3;
      doubleArray0[1] = 0.3;
      doubleArray0[2] = 0.3;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.3;
      doubleArray1[1] = 0.3;
      doubleArray1[2] = 1405.063515;
      doubleArray1[3] = 0.3;
      doubleArray1[4] = 0.3;
      doubleArray1[5] = 0.3;
      doubleArray1[6] = 0.3;
      doubleArray1[7] = 0.3;
      // Undeclared exception!
      try { 
        midpointIntegrator0.computeDerivatives(0.3, doubleArray0, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double double0 = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, 0.0, 0.0);
      graggBulirschStoerIntegrator0.getStepHandlers();
      ExpandableStatefulODE expandableStatefulODE0 = null;
      EventHandler eventHandler0 = null;
      double double1 = (-4376.0010099512);
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.setStepSizeControl(0.064, 2693.54561027, (double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(352.2480414183);
      eulerIntegrator0.setMaxEvaluations((-5557));
      eulerIntegrator0.getMaxEvaluations();
      eulerIntegrator0.getEventHandlers();
      eulerIntegrator0.setMaxEvaluations((-1528));
      eulerIntegrator0.getMaxEvaluations();
      double double0 = 1154.44189649007;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = (double) (-5557);
      doubleArray0[2] = (double) Integer.MAX_VALUE;
      doubleArray0[3] = (-0.4831900357003607);
      doubleArray0[4] = 1154.44189649007;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1154.44189649007, (-0.4831900357003607), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setControlFactors(Integer.MAX_VALUE, 2.147483647E9, Integer.MAX_VALUE, Integer.MAX_VALUE);
      graggBulirschStoerIntegrator0.getStepHandlers();
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 0);
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = null;
      try {
        adamsMoultonIntegrator0 = new AdamsMoultonIntegrator((-1528), (-1528), 0.0, doubleArray0, doubleArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(0.3111643669578199);
      gillIntegrator0.getStepHandlers();
      gillIntegrator0.getEventHandlers();
      gillIntegrator0.getMaxEvaluations();
      gillIntegrator0.getEventHandlers();
      gillIntegrator0.setMaxEvaluations(0);
      gillIntegrator0.clearEventHandlers();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double0 = (-1184.4294);
      gillIntegrator0.addEventHandler(eventHandler0, (-1323.798764), (-1184.4294), 222);
      double double1 = 0.0;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0, 0.0, 0.3111643669578199, 0.0);
      highamHall54Integrator0.getOrder();
      highamHall54Integrator0.getOrder();
      highamHall54Integrator0.getName();
      DormandPrince54Integrator dormandPrince54Integrator0 = null;
      try {
        dormandPrince54Integrator0 = new DormandPrince54Integrator(469.349, 0.01, (double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(0.0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1.0, 0.0, (-542.19), 1.0);
      graggBulirschStoerIntegrator0.addEventHandler((EventHandler) null, 0.0, Double.NaN, Integer.MAX_VALUE);
      graggBulirschStoerIntegrator0.setInterpolationControl(true, (-385));
      graggBulirschStoerIntegrator0.setMaxEvaluations(0);
      MullerSolver mullerSolver0 = new MullerSolver();
      gillIntegrator0.addEventHandler((EventHandler) null, (double) 0, 1361.077, 0, (UnivariateSolver) mullerSolver0);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double double0 = 1.0;
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(1.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double1 = (-1850.1036469267508);
      midpointIntegrator0.getEvaluations();
      int int0 = 3166;
      double double2 = 0.0;
      MullerSolver mullerSolver0 = new MullerSolver((-1850.1036469267508), 0.0);
      midpointIntegrator0.addEventHandler(eventHandler0, 1.0, (-1850.1036469267508), 3166, (UnivariateSolver) mullerSolver0);
      midpointIntegrator0.getEvaluations();
      midpointIntegrator0.getName();
      midpointIntegrator0.getName();
      midpointIntegrator0.getName();
      FirstOrderConverter firstOrderConverter0 = null;
      try {
        firstOrderConverter0 = new FirstOrderConverter((SecondOrderDifferentialEquations) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.FirstOrderConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-257.76068908378255));
      classicalRungeKuttaIntegrator0.getEvaluations();
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(0.3111643669578199);
      gillIntegrator0.getStepHandlers();
      gillIntegrator0.getEventHandlers();
      gillIntegrator0.getMaxEvaluations();
      gillIntegrator0.getEventHandlers();
      gillIntegrator0.setMaxEvaluations(0);
      gillIntegrator0.clearEventHandlers();
      double double0 = (-1184.4294);
      double double1 = 0.0;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0, 0.0, 0.3111643669578199, 0.0);
      highamHall54Integrator0.getOrder();
      highamHall54Integrator0.getOrder();
      highamHall54Integrator0.getName();
      DormandPrince54Integrator dormandPrince54Integrator0 = null;
      try {
        dormandPrince54Integrator0 = new DormandPrince54Integrator(469.349, 0.01, (double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1498.3418722), (-1498.3418722), (-1498.3418722), 0.0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.integrate((ExpandableStatefulODE) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }
}
