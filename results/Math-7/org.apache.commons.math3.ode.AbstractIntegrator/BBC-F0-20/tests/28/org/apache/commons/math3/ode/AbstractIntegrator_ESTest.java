/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 00:26:46 GMT 2021
 */

package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import org.apache.commons.math3.analysis.solvers.BisectionSolver;
import org.apache.commons.math3.analysis.solvers.BrentSolver;
import org.apache.commons.math3.analysis.solvers.MullerSolver;
import org.apache.commons.math3.analysis.solvers.MullerSolver2;
import org.apache.commons.math3.analysis.solvers.PegasusSolver;
import org.apache.commons.math3.analysis.solvers.SecantSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator;
import org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator;
import org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.EulerIntegrator;
import org.apache.commons.math3.ode.nonstiff.GillIntegrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator;
import org.apache.commons.math3.ode.sampling.DummyStepHandler;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator;
import org.apache.commons.math3.ode.sampling.StepHandler;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.apache.commons.math3.ode.sampling.StepNormalizerBounds;
import org.apache.commons.math3.ode.sampling.StepNormalizerMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegrator_ESTest extends AbstractIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(1.4565123573071036E164);
      double double0 = 469.0252352;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 469.0252352;
      doubleArray0[1] = 1.4565123573071036E164;
      gillIntegrator0.setMaxEvaluations(0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double1 = 1054.5221;
      double double2 = (-1.0);
      int int0 = 165;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1.0);
      try { 
        gillIntegrator0.computeDerivatives((-1022.75976992495), doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(secondOrderDifferentialEquations0).getDimension();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(5.6843418860808015E-11, 1.4074742794036865, 439.0, (-1006.6));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, (-1006.6), 1.4074742794036865, 0.0, (double)5).when(eventHandler0).g(anyDouble() , any(double[].class));
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.NEITHER;
      StepNormalizer stepNormalizer0 = new StepNormalizer(1.4074742794036865, fixedStepHandler0, stepNormalizerMode0, stepNormalizerBounds0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 5;
      doubleArray0[1] = 2.2737367544323206E-10;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1516.0, 5, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.getOrder();
      doubleArray0[2] = 7.526183084319617E-8;
      doubleArray0[3] = (-1006.6);
      doubleArray0[4] = 2.2737367544323206E-10;
      doubleArray0[5] = 0.0;
      stepNormalizer0.init(7.526183084319617E-8, doubleArray0, 0.0);
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 2.2737367544323206E-10, 7.526183084319617E-8, 5);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (double) 5);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-2925.1084639948));
      classicalRungeKuttaIntegrator0.getCurrentStepStart();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double double0 = 4270.092808962846;
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(4270.092808962846);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      threeEighthesIntegrator0.getStepHandlers();
      MullerSolver mullerSolver0 = new MullerSolver(1250.816875, 1250.816875);
      threeEighthesIntegrator0.addEventHandler(eventHandler0, (-2614.61), 4270.092808962846, 2312, (UnivariateSolver) mullerSolver0);
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      threeEighthesIntegrator0.addStepHandler(dummyStepHandler0);
      threeEighthesIntegrator0.getEventHandlers();
      threeEighthesIntegrator0.getCurrentStepStart();
      threeEighthesIntegrator0.getStepHandlers();
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = null;
      try {
        adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(2312, 0.6828403472900391, 0.6828403472900391, (double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(3137.0, 3137.0, 0.0, 3137.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      double[] doubleArray0 = new double[1];
      highamHall54Integrator0.setStepSizeControl(0.0, (-2484.2), doubleArray0, doubleArray0);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(5.19812413, (-549.99), doubleArray0, doubleArray0);
      dormandPrince54Integrator0.getOrder();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-2484.2), 2571.747774073382, 0.0, 5);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-2371.927383), 5.19812413).when(eventHandler0).g(anyDouble() , any(double[].class));
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (-2484.2), 3137.0, 131);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime(652.5);
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 0.0);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-549.99);
      doubleArray1[1] = (-2371.927383);
      doubleArray1[2] = (double) 5;
      doubleArray1[3] = 652.5;
      doubleArray1[3] = (-2484.2);
      doubleArray1[5] = 652.5;
      doubleArray1[6] = (-2414.73900356594);
      doubleArray1[7] = 5.19812413;
      doubleArray1[8] = (-2371.927383);
      DormandPrince54Integrator dormandPrince54Integrator1 = new DormandPrince54Integrator(0.0, (-2414.73900356594), doubleArray0, doubleArray1);
      dormandPrince54Integrator0.getOrder();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(3111.1937777111657, 1352.8681369064855, 1352.8681369064855, 1352.8681369064855);
      double[] doubleArray0 = new double[0];
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      highamHall54Integrator0.integrate(expandableStatefulODE0, 1352.8681369064855);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(3137.0, 3137.0, 0.0, 3137.0);
      int int0 = 0;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      double[] doubleArray0 = new double[1];
      highamHall54Integrator0.setStepSizeControl(0.0, (-2484.2), doubleArray0, doubleArray0);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(5.19812413, (-549.99), doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(131, 4.94E-321, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getOrder();
      try { 
        dormandPrince853Integrator0.integrate(expandableStatefulODE0, (-2597.56279633797));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 1
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(3137.0, 3137.0, 0.0, 3137.0);
      highamHall54Integrator0.clearEventHandlers();
      highamHall54Integrator0.getMaxEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 3137.0, doubleArray0, 0.0, doubleArray0);
      highamHall54Integrator0.getOrder();
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double[] doubleArray1 = expandableStatefulODE0.getCompleteState();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(3137.0, 5, 563.0, 0.0);
      graggBulirschStoerIntegrator0.setInitialStepSize(1329.07648);
      highamHall54Integrator0.setStepSizeControl((double) 0, 1350.7090726308495, doubleArray1, doubleArray1);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      HighamHall54Integrator highamHall54Integrator1 = new HighamHall54Integrator(784.4534839921, 3719.2398440324, doubleArray1, doubleArray1);
      highamHall54Integrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter1, (-283.532), doubleArray0, (double) 0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(3137.0, 3137.0, 0.0, 3137.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3137.0;
      highamHall54Integrator0.setStepSizeControl(0.0, (-2484.2), doubleArray0, doubleArray0);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(5.19812413, (-549.99), doubleArray0, doubleArray0);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray1 = new double[0];
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = (double) 0;
      doubleArray2[1] = (double) 0;
      doubleArray2[2] = 2214.7884290580864;
      doubleArray2[3] = 0.0;
      doubleArray2[4] = (-549.99);
      doubleArray2[5] = (-2871.1);
      doubleArray2[6] = (-2484.2);
      try { 
        highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2214.7884290580864, doubleArray1, (double) 0, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3068.3560327;
      doubleArray0[1] = 3068.3560327;
      doubleArray0[2] = 3068.3560327;
      doubleArray0[3] = 3068.3560327;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(3068.3560327, 3068.3560327, doubleArray0, doubleArray0);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(3068.3560327, 1163.2385635278, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.setSafety(457.0614401);
      dormandPrince853Integrator0.getOrder();
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(8, 8, (-1428.2), 0.5080875158309937, 2142.975534112924);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      try { 
        adamsBashforthIntegrator0.integrate(expandableStatefulODE0, 1250.816875);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one column
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(3137.0, 3137.0, 0.0, 3137.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      highamHall54Integrator0.getMaxEvaluations();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0), 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      highamHall54Integrator0.addEventHandler(eventHandler0, (-1088.51914), 2320.0, 0);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      try { 
        highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 3137.0, doubleArray0, 0.0, doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(3137.0, 3137.0, 0.0, 3137.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3137.0;
      highamHall54Integrator0.setStepSizeControl(0.0, (-2484.2), doubleArray0, doubleArray0);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(5.19812413, (-549.99), doubleArray0, doubleArray0);
      dormandPrince54Integrator0.getOrder();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(680.358356885085, 2571.747774073382, 0.0, 5);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-2371.927383), 5.19812413, 3137.0, 652.5, (double)0).when(eventHandler0).g(anyDouble() , any(double[].class));
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 3137.0, 3137.0, 131);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 4.94E-321);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double double0 = 3137.0;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(3137.0, 3137.0, 0.0, 3137.0);
      highamHall54Integrator0.clearEventHandlers();
      highamHall54Integrator0.getMaxEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 3137.0, doubleArray0, 0.0, doubleArray0);
      highamHall54Integrator0.getEvaluations();
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.getCompleteState();
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 3137.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (double) 8;
      doubleArray1[3] = (double) 8;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (double) 0;
      highamHall54Integrator0.computeDerivatives(864.378227, doubleArray1, doubleArray1);
      // Undeclared exception!
      highamHall54Integrator0.integrate(expandableStatefulODE0, 0.0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(3137.0, 3137.0, 0.0, 3137.0);
      highamHall54Integrator0.clearEventHandlers();
      highamHall54Integrator0.getMaxEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 3137.0, doubleArray0, 0.0, doubleArray0);
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(312, (-867.0), 312, 4494.378376272016, (-29.40438087));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, (-267.282185081), 1663.158848927, 1663.158848927);
      graggBulirschStoerIntegrator0.setInitialStepSize((-1102.851795650229));
      graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double double0 = (-267.282185081);
      double double1 = 1663.158848927;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, (-267.282185081), 1663.158848927, 1663.158848927);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      MullerSolver2 mullerSolver2_0 = new MullerSolver2();
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (-267.282185081), 0.0, 5, (UnivariateSolver) mullerSolver2_0);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double double2 = 5497.4278935854;
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 5497.4278935854);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double double0 = 3137.0;
      double double1 = 0.0;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(3137.0, 3137.0, 0.0, 3137.0);
      assertEquals(3137.0, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(3137.0, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(3137.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertNotNull(highamHall54Integrator0);
      
      highamHall54Integrator0.clearEventHandlers();
      assertEquals(3137.0, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(3137.0, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(3137.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      
      int int0 = highamHall54Integrator0.getMaxEvaluations();
      assertEquals(3137.0, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(3137.0, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(3137.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Integer.MAX_VALUE, int0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      double[] doubleArray0 = new double[0];
      double double2 = highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 3137.0, doubleArray0, 0.0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(3137.0, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(3137.0, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(3137.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      int int1 = highamHall54Integrator0.getEvaluations();
      assertEquals(3137.0, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(3137.0, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(3137.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertFalse(int1 == int0);
      assertEquals(8, int1);
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      assertNotNull(expandableStatefulODE0);
      
      double[] doubleArray1 = expandableStatefulODE0.getCompleteState();
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      assertNotNull(doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double3 = 0.0;
      // Undeclared exception!
      highamHall54Integrator0.integrate(expandableStatefulODE0, 0.0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(165.20045171727028);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertNotNull(eulerIntegrator0);
      
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(165.20045171727028, 165.20045171727028, 0.0, 0.0);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertNotNull(graggBulirschStoerIntegrator0);
      
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 0);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.NEITHER;
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.0, fixedStepHandler0, stepNormalizerBounds0);
      assertNotNull(stepNormalizer0);
      
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      
      graggBulirschStoerIntegrator0.setControlFactors((-91.125), 0.0, 0.0, 165.20045171727028);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      FixedStepHandler fixedStepHandler1 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer1 = new StepNormalizer(5.920972420778763E47, fixedStepHandler1, stepNormalizerMode0);
      assertNotNull(stepNormalizer1);
      assertFalse(stepNormalizer1.equals((Object)stepNormalizer0));
      
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer1);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertNotSame(stepNormalizer1, stepNormalizer0);
      assertFalse(stepNormalizer1.equals((Object)stepNormalizer0));
      
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertNotSame(stepNormalizer0, stepNormalizer1);
      assertFalse(stepNormalizer0.equals((Object)stepNormalizer1));
      
      graggBulirschStoerIntegrator0.clearEventHandlers();
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      
      Collection<EventHandler> collection0 = graggBulirschStoerIntegrator0.getEventHandlers();
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertNotNull(collection0);
      
      eulerIntegrator0.clearStepHandlers();
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator1 = new GraggBulirschStoerIntegrator(165.20045171727028, (-91.125), 0.0, 0.0);
      assertEquals(91.125, graggBulirschStoerIntegrator1.getMaxStep(), 0.01);
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator1.getMinStep(), 0.01);
      assertEquals(122.69429963423832, graggBulirschStoerIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator1.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator1.getName());
      assertNotNull(graggBulirschStoerIntegrator1);
      assertFalse(graggBulirschStoerIntegrator1.equals((Object)graggBulirschStoerIntegrator0));
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      assertNotNull(expandableStatefulODE0);
      
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (-2685.461476585675));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(3137.0, 3137.0, 0.0, 3137.0);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(3137.0, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(3137.0, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(3137.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertNotNull(highamHall54Integrator0);
      
      highamHall54Integrator0.clearEventHandlers();
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(3137.0, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(3137.0, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(3137.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      
      int int0 = highamHall54Integrator0.getMaxEvaluations();
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(3137.0, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(3137.0, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(3137.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Integer.MAX_VALUE, int0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(2, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      double[] doubleArray0 = new double[0];
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      StepNormalizer stepNormalizer0 = new StepNormalizer(3137.0, fixedStepHandler0, stepNormalizerMode0);
      assertNotNull(stepNormalizer0);
      
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(Integer.MAX_VALUE, 3137.0, 1, 0.0);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(3137.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(2.147483647E9, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(2595506.9255617484, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertNotNull(graggBulirschStoerIntegrator0);
      
      stepNormalizer0.init((-3432.511), doubleArray0, (-950.69162932));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(3137.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(2.147483647E9, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(2595506.9255617484, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(3137.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(2.147483647E9, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(2595506.9255617484, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      graggBulirschStoerIntegrator0.clearEventHandlers();
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(3137.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(2.147483647E9, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(2595506.9255617484, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      Collection<EventHandler> collection0 = graggBulirschStoerIntegrator0.getEventHandlers();
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(3137.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(2.147483647E9, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(2595506.9255617484, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertNotNull(collection0);
      
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(0.0);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertNotNull(eulerIntegrator0);
      
      Collection<EventHandler> collection1 = graggBulirschStoerIntegrator0.getEventHandlers();
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(3137.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(2.147483647E9, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(2595506.9255617484, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertNotNull(collection1);
      assertNotSame(collection1, collection0);
      assertFalse(collection1.equals((Object)collection0));
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      assertEquals(0, firstOrderConverter1.getDimension());
      assertNotNull(firstOrderConverter1);
      assertFalse(firstOrderConverter1.equals((Object)firstOrderConverter0));
      
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator1 = new GraggBulirschStoerIntegrator(0.0, 3137.0, 1.0, 4.547473508864641E-10);
      assertEquals(3137.0, graggBulirschStoerIntegrator1.getMaxStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator1.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator1.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator1.getCurrentStepStart(), 0.01);
      assertNotNull(graggBulirschStoerIntegrator1);
      assertFalse(graggBulirschStoerIntegrator1.equals((Object)graggBulirschStoerIntegrator0));
      
      double double0 = graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter1, 1353.4993731417458, doubleArray0, 3137.0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, firstOrderConverter1.getDimension());
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(3137.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(2.147483647E9, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(2595506.9255617484, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertNotSame(firstOrderConverter1, firstOrderConverter0);
      assertNotSame(graggBulirschStoerIntegrator0, graggBulirschStoerIntegrator1);
      assertFalse(firstOrderConverter1.equals((Object)firstOrderConverter0));
      assertFalse(graggBulirschStoerIntegrator0.equals((Object)graggBulirschStoerIntegrator1));
      assertEquals(3137.0, double0, 0.01);
      
      graggBulirschStoerIntegrator0.setOrderControl(1, 0.0, 1702.5632338128974);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(3137.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(2.147483647E9, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(2595506.9255617484, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertNotSame(graggBulirschStoerIntegrator0, graggBulirschStoerIntegrator1);
      assertFalse(graggBulirschStoerIntegrator0.equals((Object)graggBulirschStoerIntegrator1));
      
      try { 
        eulerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1.0, doubleArray0, 0.0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 2
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(3137.0, 3137.0, 0.0, 3137.0);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(3137.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(3137.0, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(3137.0, highamHall54Integrator0.getMaxStep(), 0.01);
      assertNotNull(highamHall54Integrator0);
      
      highamHall54Integrator0.clearEventHandlers();
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(3137.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(3137.0, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(3137.0, highamHall54Integrator0.getMaxStep(), 0.01);
      
      int int0 = highamHall54Integrator0.getMaxEvaluations();
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(3137.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(3137.0, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(3137.0, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(Integer.MAX_VALUE, int0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(2, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      double[] doubleArray0 = new double[0];
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      StepNormalizer stepNormalizer0 = new StepNormalizer(3137.0, fixedStepHandler0, stepNormalizerMode0);
      assertNotNull(stepNormalizer0);
      
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(Integer.MAX_VALUE, 3137.0, 1, 0.0);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(2595506.9255617484, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(3137.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(2.147483647E9, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertNotNull(graggBulirschStoerIntegrator0);
      
      stepNormalizer0.init((-3432.511), doubleArray0, (-950.69162932));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(2595506.9255617484, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(3137.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(2.147483647E9, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(2595506.9255617484, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(3137.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(2.147483647E9, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      
      graggBulirschStoerIntegrator0.clearEventHandlers();
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(2595506.9255617484, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(3137.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(2.147483647E9, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      
      Collection<EventHandler> collection0 = graggBulirschStoerIntegrator0.getEventHandlers();
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(2595506.9255617484, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(3137.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(2.147483647E9, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertNotNull(collection0);
      
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(0.0);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertNotNull(eulerIntegrator0);
      
      eulerIntegrator0.clearStepHandlers();
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      assertEquals(0, firstOrderConverter1.getDimension());
      assertNotNull(firstOrderConverter1);
      assertFalse(firstOrderConverter1.equals((Object)firstOrderConverter0));
      
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator1 = new GraggBulirschStoerIntegrator(0.6512820512820513, (-1.324889724104E12), 1, 1441.0188);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator1.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator1.getCurrentStepStart(), 0.01);
      assertEquals(0.6512820512820513, graggBulirschStoerIntegrator1.getMinStep(), 0.01);
      assertEquals(928911.6735389668, graggBulirschStoerIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(1.324889724104E12, graggBulirschStoerIntegrator1.getMaxStep(), 0.01);
      assertNotNull(graggBulirschStoerIntegrator1);
      assertFalse(graggBulirschStoerIntegrator1.equals((Object)graggBulirschStoerIntegrator0));
      
      double double0 = graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter1, 0.0, doubleArray0, (-864.378227), doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, firstOrderConverter1.getDimension());
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(2595506.9255617484, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(3137.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(2.147483647E9, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertNotSame(firstOrderConverter1, firstOrderConverter0);
      assertNotSame(graggBulirschStoerIntegrator0, graggBulirschStoerIntegrator1);
      assertFalse(firstOrderConverter1.equals((Object)firstOrderConverter0));
      assertFalse(graggBulirschStoerIntegrator0.equals((Object)graggBulirschStoerIntegrator1));
      assertEquals((-864.378227), double0, 0.01);
      
      graggBulirschStoerIntegrator0.setOrderControl((-3052), (-346.1403536793876), (-1.324889724104E12));
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(2595506.9255617484, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(3137.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(2.147483647E9, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertNotSame(graggBulirschStoerIntegrator0, graggBulirschStoerIntegrator1);
      assertFalse(graggBulirschStoerIntegrator0.equals((Object)graggBulirschStoerIntegrator1));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      assertNotNull(expandableStatefulODE0);
      
      double double0 = 2.0862154960632324;
      expandableStatefulODE0.setTime(2.0862154960632324);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(2.0862154960632324, expandableStatefulODE0.getTime(), 0.01);
      
      double double1 = 1350.7090726308495;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(5497.4278935854, 2.0862154960632324, 1350.7090726308495, 3137.0);
      assertEquals(5497.4278935854, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(107.09257331901273, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(2.0862154960632324, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertNotNull(graggBulirschStoerIntegrator0);
      
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 2.0862154960632324);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(165.20045171727028);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertNotNull(eulerIntegrator0);
      
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(165.20045171727028, 165.20045171727028, 0.0, 0.0);
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertNotNull(graggBulirschStoerIntegrator0);
      
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 0);
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.NEITHER;
      StepNormalizer stepNormalizer0 = new StepNormalizer((-91.125), fixedStepHandler0, stepNormalizerBounds0);
      assertNotNull(stepNormalizer0);
      
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      graggBulirschStoerIntegrator0.setControlFactors((-91.125), 0.0, 0.0, 0.0);
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      FixedStepHandler fixedStepHandler1 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizer stepNormalizer1 = new StepNormalizer(0.0, fixedStepHandler1, stepNormalizerMode0);
      assertNotNull(stepNormalizer1);
      assertFalse(stepNormalizer1.equals((Object)stepNormalizer0));
      
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer1);
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertNotSame(stepNormalizer1, stepNormalizer0);
      assertFalse(stepNormalizer1.equals((Object)stepNormalizer0));
      
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer1);
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertNotSame(stepNormalizer1, stepNormalizer0);
      assertFalse(stepNormalizer1.equals((Object)stepNormalizer0));
      
      graggBulirschStoerIntegrator0.clearEventHandlers();
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      Collection<EventHandler> collection0 = graggBulirschStoerIntegrator0.getEventHandlers();
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertNotNull(collection0);
      
      eulerIntegrator0.clearStepHandlers();
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      double double0 = 4.547473508864641E-10;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(4.547473508864641E-10, 165.20045171727028, (-663.8520073432973), (-3696.33727419));
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(2.740884305907053E-4, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(4.547473508864641E-10, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals(165.20045171727028, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertNotNull(dormandPrince54Integrator0);
      
      double[] doubleArray0 = null;
      // Undeclared exception!
      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1350.7090726308495, (double[]) null, 0.0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1137963.0;
      doubleArray0[1] = 1137963.0;
      doubleArray0[2] = 1137963.0;
      doubleArray0[3] = 1137963.0;
      doubleArray0[4] = 1137963.0;
      doubleArray0[5] = 1137963.0;
      doubleArray0[6] = 1137963.0;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1137963.0, 1137963.0, doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1137963.0, 1137963.0, 1137963.0, 1137963.0, 1137963.0, 1137963.0, 1137963.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(1137963.0, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(1137963.0, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(1137963.0, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertNotNull(dormandPrince54Integrator0);
      
      int int0 = dormandPrince54Integrator0.getOrder();
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1137963.0, 1137963.0, 1137963.0, 1137963.0, 1137963.0, 1137963.0, 1137963.0}, doubleArray0, 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(1137963.0, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(1137963.0, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(1137963.0, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(5, int0);
      
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1137963.0, 4.450312892752409, doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1137963.0, 1137963.0, 1137963.0, 1137963.0, 1137963.0, 1137963.0, 1137963.0}, doubleArray0, 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(1137963.0, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(2250.3980559836987, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(4.450312892752409, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertNotNull(highamHall54Integrator0);
      
      highamHall54Integrator0.clearStepHandlers();
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1137963.0, 1137963.0, 1137963.0, 1137963.0, 1137963.0, 1137963.0, 1137963.0}, doubleArray0, 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(1137963.0, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(2250.3980559836987, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(4.450312892752409, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      
      Collection<StepHandler> collection0 = highamHall54Integrator0.getStepHandlers();
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1137963.0, 1137963.0, 1137963.0, 1137963.0, 1137963.0, 1137963.0, 1137963.0}, doubleArray0, 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(1137963.0, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(2250.3980559836987, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(4.450312892752409, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertNotNull(collection0);
      
      int int1 = highamHall54Integrator0.getOrder();
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1137963.0, 1137963.0, 1137963.0, 1137963.0, 1137963.0, 1137963.0, 1137963.0}, doubleArray0, 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(1137963.0, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(2250.3980559836987, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(4.450312892752409, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertTrue(int1 == int0);
      assertEquals(5, int1);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(820).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(1640, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 5;
      doubleArray1[1] = (double) 5;
      doubleArray1[2] = (double) 5;
      Collection<EventHandler> collection1 = highamHall54Integrator0.getEventHandlers();
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1137963.0, 1137963.0, 1137963.0, 1137963.0, 1137963.0, 1137963.0, 1137963.0}, doubleArray0, 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(1137963.0, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(2250.3980559836987, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(4.450312892752409, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertNotNull(collection1);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-3265.87751), doubleArray0, (-1940.498703672286), doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 1,640
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double double0 = 165.20045171727028;
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(165.20045171727028);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertNotNull(eulerIntegrator0);
      
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(165.20045171727028, 165.20045171727028, 0.0, 0.0);
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertNotNull(graggBulirschStoerIntegrator0);
      
      int int0 = 0;
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 0);
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.NEITHER;
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.0, fixedStepHandler0, stepNormalizerBounds0);
      assertNotNull(stepNormalizer0);
      
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      
      graggBulirschStoerIntegrator0.setControlFactors((-91.125), 0.0, 0.0, 165.20045171727028);
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      FixedStepHandler fixedStepHandler1 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer1 = new StepNormalizer(5.920972420778763E47, fixedStepHandler1, stepNormalizerMode0);
      assertNotNull(stepNormalizer1);
      assertFalse(stepNormalizer1.equals((Object)stepNormalizer0));
      
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer1);
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertNotSame(stepNormalizer1, stepNormalizer0);
      assertFalse(stepNormalizer1.equals((Object)stepNormalizer0));
      
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertNotSame(stepNormalizer0, stepNormalizer1);
      assertFalse(stepNormalizer0.equals((Object)stepNormalizer1));
      
      graggBulirschStoerIntegrator0.clearEventHandlers();
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      
      Collection<EventHandler> collection0 = graggBulirschStoerIntegrator0.getEventHandlers();
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertNotNull(collection0);
      
      eulerIntegrator0.clearStepHandlers();
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator1 = new GraggBulirschStoerIntegrator(165.20045171727028, (-91.125), 0.0, 0.0);
      assertEquals(91.125, graggBulirschStoerIntegrator1.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator1.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator1.getName());
      assertEquals(122.69429963423832, graggBulirschStoerIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(165.20045171727028, graggBulirschStoerIntegrator1.getMinStep(), 0.01);
      assertNotNull(graggBulirschStoerIntegrator1);
      assertFalse(graggBulirschStoerIntegrator1.equals((Object)graggBulirschStoerIntegrator0));
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      graggBulirschStoerIntegrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 1350.7090726308495, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(1.1396086958715008);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("classical Runge-Kutta", classicalRungeKuttaIntegrator0.getName());
      assertNotNull(classicalRungeKuttaIntegrator0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.1396086958715008;
      doubleArray0[1] = 1.1396086958715008;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1.1396086958715008, 1.1396086958715008, doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {1.1396086958715008, 1.1396086958715008}, doubleArray0, 0.01);
      assertEquals(1.1396086958715008, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(1.1396086958715008, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(1.1396086958715008, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertNotNull(graggBulirschStoerIntegrator0);
      
      graggBulirschStoerIntegrator0.setOrderControl((-1875), 652.5, 1.1396086958715008);
      assertEquals(2, doubleArray0.length);
      assertArrayEquals(new double[] {1.1396086958715008, 1.1396086958715008}, doubleArray0, 0.01);
      assertEquals(1.1396086958715008, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(1.1396086958715008, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(1.1396086958715008, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.integrate((ExpandableStatefulODE) null, (-1.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 747.4814945;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(747.4814945, 747.4814945, doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {747.4814945}, doubleArray0, 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(747.4814945, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(747.4814945, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(747.4814945, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertNotNull(highamHall54Integrator0);
      
      highamHall54Integrator0.setMaxGrowth(747.4814945);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {747.4814945}, doubleArray0, 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(747.4814945, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(747.4814945, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(747.4814945, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(747.4814945, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      
      highamHall54Integrator0.setInitialStepSize(0.0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {747.4814945}, doubleArray0, 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(747.4814945, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(747.4814945, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(747.4814945, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(747.4814945, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      
      int int0 = highamHall54Integrator0.getMaxEvaluations();
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {747.4814945}, doubleArray0, 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(747.4814945, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(747.4814945, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(747.4814945, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(747.4814945, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Integer.MAX_VALUE, int0);
      
      int int1 = highamHall54Integrator0.getEvaluations();
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {747.4814945}, doubleArray0, 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(747.4814945, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(747.4814945, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(747.4814945, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(747.4814945, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      Collection<EventHandler> collection0 = highamHall54Integrator0.getEventHandlers();
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {747.4814945}, doubleArray0, 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(747.4814945, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(747.4814945, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(747.4814945, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(747.4814945, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertNotNull(collection0);
      
      highamHall54Integrator0.setMaxGrowth(0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {747.4814945}, doubleArray0, 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(747.4814945, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(0.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(747.4814945, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(747.4814945, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(Integer.MAX_VALUE, 747.4814945, doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {747.4814945}, doubleArray0, 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(1266966.5685699328, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(2.147483647E9, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals(747.4814945, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertNotNull(dormandPrince54Integrator0);
      
      highamHall54Integrator0.clearEventHandlers();
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {747.4814945}, doubleArray0, 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(747.4814945, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(0.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(747.4814945, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(747.4814945, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      
      highamHall54Integrator0.setMaxGrowth((-4196.9));
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {747.4814945}, doubleArray0, 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(747.4814945, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(747.4814945, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals((-4196.9), highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(747.4814945, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(eventHandler0).toString();
      int int2 = highamHall54Integrator0.getEvaluations();
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {747.4814945}, doubleArray0, 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(747.4814945, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(747.4814945, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals((-4196.9), highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(747.4814945, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      dormandPrince54Integrator0.addEventHandler(eventHandler0, 0.8888888888888888, 1788.3308224724, Integer.MAX_VALUE);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {747.4814945}, doubleArray0, 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(1266966.5685699328, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(2.147483647E9, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals(747.4814945, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      
      Collection<EventHandler> collection1 = dormandPrince54Integrator0.getEventHandlers();
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {747.4814945}, doubleArray0, 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(1266966.5685699328, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(2.147483647E9, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals(747.4814945, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertNotNull(collection1);
      assertNotSame(collection1, collection0);
      assertFalse(collection1.equals((Object)collection0));
      assertTrue(collection1.contains(eventHandler0));
      
      int int3 = dormandPrince54Integrator0.getOrder();
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {747.4814945}, doubleArray0, 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(1266966.5685699328, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(2.147483647E9, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals(747.4814945, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(5, int3);
      
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer0 = new StepNormalizer(0, fixedStepHandler0);
      assertNotNull(stepNormalizer0);
      
      dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {747.4814945}, doubleArray0, 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(1266966.5685699328, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(2.147483647E9, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals(747.4814945, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      
      int int4 = highamHall54Integrator0.getEvaluations();
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {747.4814945}, doubleArray0, 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(747.4814945, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(747.4814945, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals((-4196.9), highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(747.4814945, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertTrue(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertTrue(int4 == int2);
      assertEquals(0, int4);
      
      int int5 = highamHall54Integrator0.getEvaluations();
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {747.4814945}, doubleArray0, 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(747.4814945, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(747.4814945, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals((-4196.9), highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(747.4814945, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertTrue(int5 == int2);
      assertTrue(int5 == int4);
      assertTrue(int5 == int1);
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      assertEquals(0, int5);
      
      Collection<EventHandler> collection2 = dormandPrince54Integrator0.getEventHandlers();
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {747.4814945}, doubleArray0, 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(1266966.5685699328, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(2.147483647E9, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals(747.4814945, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertNotNull(collection2);
      assertNotSame(collection2, collection1);
      assertNotSame(collection2, collection0);
      assertFalse(collection2.equals((Object)collection1));
      assertFalse(collection2.equals((Object)collection0));
      assertTrue(collection2.contains(eventHandler0));
      
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0, 462.0, 0.8888888888888888, 903.98810618097);
      assertEquals(462.0, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(0.0, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.0, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertNotNull(dormandPrince853Integrator0);
      
      dormandPrince853Integrator0.setInitialStepSize((-4196.9));
      assertEquals(462.0, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(0.0, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.0, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      
      dormandPrince853Integrator0.clearEventHandlers();
      assertEquals(462.0, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(0.0, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.0, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      
      int int6 = dormandPrince853Integrator0.getOrder();
      assertEquals(462.0, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(0.0, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.0, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertFalse(int6 == int4);
      assertFalse(int6 == int2);
      assertFalse(int6 == int5);
      assertFalse(int6 == int1);
      assertFalse(int6 == int0);
      assertFalse(int6 == int3);
      assertEquals(8, int6);
      
      int int7 = highamHall54Integrator0.getOrder();
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {747.4814945}, doubleArray0, 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(747.4814945, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(747.4814945, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals((-4196.9), highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(747.4814945, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertFalse(int7 == int5);
      assertFalse(int7 == int0);
      assertFalse(int7 == int4);
      assertTrue(int7 == int3);
      assertFalse(int7 == int2);
      assertFalse(int7 == int6);
      assertFalse(int7 == int1);
      assertEquals(5, int7);
      
      int int8 = dormandPrince853Integrator0.getOrder();
      assertEquals(462.0, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(0.0, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.0, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertFalse(int8 == int1);
      assertFalse(int8 == int0);
      assertTrue(int8 == int6);
      assertFalse(int8 == int3);
      assertFalse(int8 == int5);
      assertFalse(int8 == int7);
      assertFalse(int8 == int2);
      assertFalse(int8 == int4);
      assertEquals(8, int8);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double double0 = (-2536.873422);
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-2536.873422));
      assertEquals("classical Runge-Kutta", classicalRungeKuttaIntegrator0.getName());
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01);
      assertNotNull(classicalRungeKuttaIntegrator0);
      
      BrentSolver brentSolver0 = new BrentSolver(2144197521);
      assertEquals(0.0, brentSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, brentSolver0.getStartValue(), 0.01);
      assertEquals(0.0, brentSolver0.getMax(), 0.01);
      assertEquals(1.0E-14, brentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(2.144197521E9, brentSolver0.getAbsoluteAccuracy(), 0.01);
      assertNotNull(brentSolver0);
      
      classicalRungeKuttaIntegrator0.addEventHandler((EventHandler) null, (-2536.873422), (-2536.873422), 2144197521, (UnivariateSolver) brentSolver0);
      assertEquals("classical Runge-Kutta", classicalRungeKuttaIntegrator0.getName());
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, brentSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, brentSolver0.getStartValue(), 0.01);
      assertEquals(0.0, brentSolver0.getMax(), 0.01);
      assertEquals(1.0E-14, brentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(2.144197521E9, brentSolver0.getAbsoluteAccuracy(), 0.01);
      
      Collection<EventHandler> collection0 = classicalRungeKuttaIntegrator0.getEventHandlers();
      assertEquals("classical Runge-Kutta", classicalRungeKuttaIntegrator0.getName());
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01);
      assertNotNull(collection0);
      
      String string0 = classicalRungeKuttaIntegrator0.getName();
      assertEquals("classical Runge-Kutta", classicalRungeKuttaIntegrator0.getName());
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01);
      assertNotNull(string0);
      assertEquals("classical Runge-Kutta", string0);
      
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-2536.873422), (-2536.873422), (-2536.873422), 1024.79);
      assertEquals(2536.873422, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(2536.873422, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(2536.873422, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertNotNull(graggBulirschStoerIntegrator0);
      
      graggBulirschStoerIntegrator0.setInterpolationControl(false, (-268));
      assertEquals(2536.873422, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(2536.873422, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(2536.873422, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      FirstOrderConverter firstOrderConverter0 = null;
      try {
        firstOrderConverter0 = new FirstOrderConverter((SecondOrderDifferentialEquations) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.FirstOrderConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1137963.0;
      doubleArray0[1] = 1137963.0;
      doubleArray0[2] = 1137963.0;
      doubleArray0[3] = 1137963.0;
      doubleArray0[4] = 1137963.0;
      doubleArray0[5] = 1137963.0;
      doubleArray0[6] = 1137963.0;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1137963.0, 1137963.0, doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1137963.0, 1137963.0, 1137963.0, 1137963.0, 1137963.0, 1137963.0, 1137963.0}, doubleArray0, 0.01);
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(1137963.0, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(1137963.0, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(1137963.0, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertNotNull(dormandPrince54Integrator0);
      
      int int0 = dormandPrince54Integrator0.getOrder();
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1137963.0, 1137963.0, 1137963.0, 1137963.0, 1137963.0, 1137963.0, 1137963.0}, doubleArray0, 0.01);
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(1137963.0, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(1137963.0, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(1137963.0, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals(5, int0);
      
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1137963.0, 4.450312892752409, doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1137963.0, 1137963.0, 1137963.0, 1137963.0, 1137963.0, 1137963.0, 1137963.0}, doubleArray0, 0.01);
      assertEquals(2250.3980559836987, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(4.450312892752409, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(1137963.0, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertNotNull(highamHall54Integrator0);
      
      highamHall54Integrator0.clearStepHandlers();
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1137963.0, 1137963.0, 1137963.0, 1137963.0, 1137963.0, 1137963.0, 1137963.0}, doubleArray0, 0.01);
      assertEquals(2250.3980559836987, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(4.450312892752409, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(1137963.0, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      
      Collection<StepHandler> collection0 = highamHall54Integrator0.getStepHandlers();
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1137963.0, 1137963.0, 1137963.0, 1137963.0, 1137963.0, 1137963.0, 1137963.0}, doubleArray0, 0.01);
      assertEquals(2250.3980559836987, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(4.450312892752409, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(1137963.0, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertNotNull(collection0);
      
      int int1 = highamHall54Integrator0.getOrder();
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1137963.0, 1137963.0, 1137963.0, 1137963.0, 1137963.0, 1137963.0, 1137963.0}, doubleArray0, 0.01);
      assertEquals(2250.3980559836987, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(4.450312892752409, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(1137963.0, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertTrue(int1 == int0);
      assertEquals(5, int1);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 5;
      doubleArray1[1] = (double) 5;
      doubleArray1[2] = (double) 5;
      Collection<EventHandler> collection1 = highamHall54Integrator0.getEventHandlers();
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1137963.0, 1137963.0, 1137963.0, 1137963.0, 1137963.0, 1137963.0, 1137963.0}, doubleArray0, 0.01);
      assertEquals(2250.3980559836987, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(4.450312892752409, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(1137963.0, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertNotNull(collection1);
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      
      doubleArray1[3] = (double) 5;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 1.0;
      doubleArray1[6] = (double) 5;
      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1137963.0, doubleArray0, (double) 5, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-589.815918));
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertNotNull(gillIntegrator0);
      
      gillIntegrator0.clearStepHandlers();
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      gillIntegrator0.addEventHandler(eventHandler0, (-1439.667802702764), 2116.0, 0);
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      
      double double0 = gillIntegrator0.getCurrentSignedStepsize();
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-665);
      doubleArray0[1] = (double) (-665);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 2116.0;
      doubleArray0[4] = (-589.815918);
      doubleArray0[5] = (-589.815918);
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = null;
      try {
        adamsBashforthIntegrator0 = new AdamsBashforthIntegrator((-665), 0.006, 0.0, doubleArray0, doubleArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-3331.57), (-3331.57), doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(3331.57, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(3331.57, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(3331.57, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertNotNull(dormandPrince853Integrator0);
      
      dormandPrince853Integrator0.setStepSizeControl((-3331.57), (-3331.57), doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(3331.57, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(3331.57, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(3331.57, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      
      int int0 = dormandPrince853Integrator0.getOrder();
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(3331.57, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(3331.57, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(3331.57, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(8, int0);
      
      double double0 = dormandPrince853Integrator0.getCurrentSignedStepsize();
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(3331.57, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(3331.57, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(3331.57, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(3331.57, double0, 0.01);
      
      double double1 = (-3906.212929546328);
      double double2 = 152.5883;
      double double3 = 0.0;
      // Undeclared exception!
      try { 
        dormandPrince853Integrator0.computeDerivatives(0.0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, (-267.282185081), 1663.158848927, 1663.158848927);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 5497.4278935854);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 8.017654713159388E-225;
      doubleArray0[1] = 4.547473508864641E-10;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(8.017654713159388E-225, 4.547473508864641E-10, doubleArray0, doubleArray0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(8.017654713159388E-225, (-2.444006866174775E-8), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.getEvaluations();
      graggBulirschStoerIntegrator0.setInterpolationControl(false, 1101);
      highamHall54Integrator0.setMinReduction(8.017654713159388E-225);
      graggBulirschStoerIntegrator0.setControlFactors((-374.082586), 4.547473508864641E-10, (-2.444006866174775E-8), 210.14010720765822);
      highamHall54Integrator0.getName();
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.LAST;
      StepNormalizer stepNormalizer0 = new StepNormalizer((-2.444006866174775E-8), (FixedStepHandler) null, stepNormalizerBounds0);
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      double double0 = graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
      assertEquals(1.3998286741448074E-116, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double double0 = (-1396.22217441569);
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1396.22217441569), (-1396.22217441569), doubleArray0, doubleArray0);
      highamHall54Integrator0.clearEventHandlers();
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.NEITHER;
      StepNormalizer stepNormalizer0 = new StepNormalizer((-1396.22217441569), fixedStepHandler0, stepNormalizerBounds0);
      highamHall54Integrator0.addStepHandler(stepNormalizer0);
      double double1 = 0.0;
      double double2 = 0.0;
      stepNormalizer0.init(0.0, doubleArray0, (-1396.22217441569));
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      NordsieckStepInterpolator nordsieckStepInterpolator1 = new NordsieckStepInterpolator(nordsieckStepInterpolator0);
      // Undeclared exception!
      try { 
        stepNormalizer0.handleStep(nordsieckStepInterpolator1, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2.38466765651207;
      doubleArray0[1] = 2.38466765651207;
      doubleArray0[2] = 2.38466765651207;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2.38466765651207, 2.38466765651207, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.clearEventHandlers();
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(165.20045171727028);
      double double0 = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(165.20045171727028, 165.20045171727028, 0.0, 0.0);
      graggBulirschStoerIntegrator0.clearStepHandlers();
      double double1 = (-1379.007774809);
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = null;
      try {
        adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(1, 0.0, (-111.080281391115), (-1379.007774809), 165.20045171727028);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // multistep method needs at least 1 previous steps, got 2
         //
         verifyException("org.apache.commons.math3.ode.MultistepIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(Double.NaN, Double.NaN, 3554.249112, 0.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      SecantSolver secantSolver0 = new SecantSolver(0.0);
      highamHall54Integrator0.addEventHandler(eventHandler0, 3554.249112, 3554.249112, 120, (UnivariateSolver) secantSolver0);
      highamHall54Integrator0.getEvaluations();
      highamHall54Integrator0.setSafety(1246.10527);
      highamHall54Integrator0.clearEventHandlers();
      highamHall54Integrator0.setMaxEvaluations((-1415));
      highamHall54Integrator0.clearStepHandlers();
      highamHall54Integrator0.setMinReduction(Double.NaN);
      highamHall54Integrator0.getName();
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 1246.10527, doubleArray0, doubleArray0);
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      BisectionSolver bisectionSolver0 = new BisectionSolver(3554.249112);
      dormandPrince853Integrator0.addEventHandler(eventHandler1, (double) (-1415), (-1.0), 0, (UnivariateSolver) bisectionSolver0);
      dormandPrince853Integrator0.getOrder();
      highamHall54Integrator0.setMaxEvaluations(0);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double double0 = (-2536.873422);
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-2536.873422));
      classicalRungeKuttaIntegrator0.getName();
      FirstOrderConverter firstOrderConverter0 = null;
      try {
        firstOrderConverter0 = new FirstOrderConverter((SecondOrderDifferentialEquations) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.FirstOrderConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1.0), (-2340.724230317), (-2340.724230317), 0.0);
      graggBulirschStoerIntegrator0.setMaxEvaluations(1375);
      graggBulirschStoerIntegrator0.getStepHandlers();
      graggBulirschStoerIntegrator0.setMaxEvaluations(2977);
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.FIRST;
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.0, (FixedStepHandler) null, stepNormalizerBounds0);
      double double0 = (-3.7333333333333334);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-3.7333333333333334);
      doubleArray0[1] = (-2340.724230317);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 1375;
      doubleArray0[4] = (double) 1375;
      doubleArray0[5] = (-3.7333333333333334);
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = (-3.7333333333333334);
      doubleArray0[8] = (double) 1375;
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      NordsieckStepInterpolator nordsieckStepInterpolator1 = new NordsieckStepInterpolator(nordsieckStepInterpolator0);
      // Undeclared exception!
      try { 
        stepNormalizer0.handleStep(nordsieckStepInterpolator1, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1000.0, 1000.0, 1000.0, 1000.0);
      graggBulirschStoerIntegrator0.addEventHandler((EventHandler) null, 1.0, 0.0, 2735);
      graggBulirschStoerIntegrator0.addEventHandler((EventHandler) null, (-364.31191), Double.NaN, 2735, (UnivariateSolver) null);
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      graggBulirschStoerIntegrator0.addEventHandler((EventHandler) null, 0.0, (-1.0), (-2523), (UnivariateSolver) pegasusSolver0);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double double0 = (-44.1280225678);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-44.1280225678), (-44.1280225678), (-44.1280225678), (-44.1280225678));
      double double1 = (-3844.912349432261);
      highamHall54Integrator0.setSafety((-3844.912349432261));
      highamHall54Integrator0.getEvaluations();
      highamHall54Integrator0.getMaxEvaluations();
      double double2 = (-1.0);
      double[] doubleArray0 = new double[2];
      highamHall54Integrator0.setMaxGrowth((-1.0));
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1.0), (-44.1280225678), doubleArray0, doubleArray0);
      EventHandler eventHandler0 = null;
      int int0 = 0;
      UnivariateSolver univariateSolver0 = null;
      graggBulirschStoerIntegrator0.addEventHandler((EventHandler) null, (-1.0), 2.147483647E9, 0, (UnivariateSolver) null);
      double double3 = (-1190.3449);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      StepNormalizer stepNormalizer0 = new StepNormalizer((-1.0), fixedStepHandler0, stepNormalizerMode0);
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      NordsieckStepInterpolator nordsieckStepInterpolator1 = new NordsieckStepInterpolator(nordsieckStepInterpolator0);
      // Undeclared exception!
      try { 
        stepNormalizer0.handleStep(nordsieckStepInterpolator1, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double double0 = 1577.06;
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(1577.06);
      threeEighthesIntegrator0.getEvaluations();
      threeEighthesIntegrator0.getEventHandlers();
      ExpandableStatefulODE expandableStatefulODE0 = null;
      try {
        expandableStatefulODE0 = new ExpandableStatefulODE((FirstOrderDifferentialEquations) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.ExpandableStatefulODE", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = 0;
      double double0 = 4377.347;
      double double1 = 0.0;
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = null;
      try {
        adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(0, 4377.347, 0, 4377.347, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // multistep method needs at least 0 previous steps, got 2
         //
         verifyException("org.apache.commons.math3.ode.MultistepIntegrator", e);
      }
  }
}
