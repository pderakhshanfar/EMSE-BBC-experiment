/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 23:54:57 GMT 2021
 */

package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.solvers.BisectionSolver;
import org.apache.commons.math3.analysis.solvers.BrentSolver;
import org.apache.commons.math3.analysis.solvers.MullerSolver2;
import org.apache.commons.math3.analysis.solvers.PegasusSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator;
import org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator;
import org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.EulerIntegrator;
import org.apache.commons.math3.ode.nonstiff.GillIntegrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator;
import org.apache.commons.math3.ode.sampling.DummyStepHandler;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.apache.commons.math3.ode.sampling.StepNormalizerBounds;
import org.apache.commons.math3.ode.sampling.StepNormalizerMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegrator_ESTest extends AbstractIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1.4865891933441162, 0.049787066876888275, 1646.636568136626, 0.8690476190191974);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1646.636568136626;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1503.818273983;
      doubleArray0[3] = 1.024714469909668;
      doubleArray0[4] = 1.024714469909668;
      doubleArray0[5] = 1.024714469909668;
      graggBulirschStoerIntegrator0.setStepSizeControl(1503.818273983, 1.024714469909668, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2.38466765651207, 2.38466765651207, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.getStepHandlers();
      graggBulirschStoerIntegrator0.setOrderControl(0, (-884.083867569864), 0);
      graggBulirschStoerIntegrator0.getEventHandlers();
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer0 = new StepNormalizer((-4.4E-9), fixedStepHandler0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) 0, doubleArray0, (-4.4E-9), doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2.38466765651207, 2.38466765651207, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.getStepHandlers();
      graggBulirschStoerIntegrator0.setOrderControl(0, (-927.122), 0);
      graggBulirschStoerIntegrator0.getEventHandlers();
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer0 = new StepNormalizer((-4.399582029272418E-9), fixedStepHandler0);
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(2553.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter1, 2.8421709430404007E-11, doubleArray0, 4.0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations2 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations2).getDimension();
      FirstOrderConverter firstOrderConverter2 = new FirstOrderConverter(secondOrderDifferentialEquations2);
      threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter1, 655.9392108058915, doubleArray0, (double) 0, doubleArray0);
      ThreeEighthesIntegrator threeEighthesIntegrator1 = new ThreeEighthesIntegrator(387.2330686);
      threeEighthesIntegrator1.getStepHandlers();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(2.38466765651207);
      gillIntegrator0.clearEventHandlers();
      gillIntegrator0.setMaxEvaluations(0);
      PegasusSolver pegasusSolver0 = new PegasusSolver((-1694.101), 2.38466765651207);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0, (-1694.101), (-110.0618511690746), 2289.3567669534877);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(2.38466765651207, (double)0, (-110.0618511690746), 344.0607891943358, (-1694.101)).when(eventHandler0).g(anyDouble() , any(double[].class));
      dormandPrince54Integrator0.addEventHandler(eventHandler0, (-1.4386267593671393E-8), 0.0, 435, (UnivariateSolver) pegasusSolver0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        dormandPrince54Integrator0.integrate(expandableStatefulODE0, (-1675.1031134));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [\uFFFD, \uFFFD], values: [-1,694.101, -1,694.101]
         //
         verifyException("org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 0.0, 0.0, 1311);
      graggBulirschStoerIntegrator0.getStepHandlers();
      graggBulirschStoerIntegrator0.getEventHandlers();
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.0, fixedStepHandler0);
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-913.3463174530531));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ThreeEighthesIntegrator threeEighthesIntegrator1 = new ThreeEighthesIntegrator((-3657.0));
      threeEighthesIntegrator0.getMaxEvaluations();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2291.74143461, 141.95943036017727, 65.42188308, 65.42188308);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-1656.47086661));
      MullerSolver2 mullerSolver2_0 = new MullerSolver2(65.42188308);
      ThreeEighthesIntegrator threeEighthesIntegrator1 = new ThreeEighthesIntegrator((-1));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      threeEighthesIntegrator1.addEventHandler(eventHandler0, 513.0, 249.7765159083, (-1), (UnivariateSolver) mullerSolver2_0);
      double[] doubleArray0 = new double[0];
      threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-4379.7), doubleArray0, 0.0, doubleArray0);
      ThreeEighthesIntegrator threeEighthesIntegrator2 = new ThreeEighthesIntegrator(3.280586734644871E82);
      threeEighthesIntegrator2.getStepHandlers();
      threeEighthesIntegrator2.getStepHandlers();
      BrentSolver brentSolver0 = new BrentSolver(3.280586734644871E82);
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler1, 2814.7283, 0.0, 1310, (UnivariateSolver) null);
      graggBulirschStoerIntegrator0.setStabilityCheck(false, 2124920942, 4, 3262.4733361149);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(2.38466765651207);
      gillIntegrator0.getStepHandlers();
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2.38466765651207, 2.38466765651207, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setStabilityCheck(true, 288, 1427, 1686.39);
      graggBulirschStoerIntegrator0.clearEventHandlers();
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-1339.67719));
      gillIntegrator0.getCurrentSignedStepsize();
      gillIntegrator0.getStepHandlers();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(Double.NaN, 94.17846213400003, Double.NaN, 94.17846213400003);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizer stepNormalizer0 = new StepNormalizer(Double.NaN, (FixedStepHandler) null, stepNormalizerMode0);
      dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
      PegasusSolver pegasusSolver0 = new PegasusSolver(8.136316299122392E-192);
      dormandPrince54Integrator0.addEventHandler(eventHandler0, 1709.261306, 4379.7, 1671, (UnivariateSolver) pegasusSolver0);
      dormandPrince54Integrator0.clearStepHandlers();
      dormandPrince54Integrator0.clearStepHandlers();
      dormandPrince54Integrator0.getCurrentSignedStepsize();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(94.17846213400003, Double.NaN, 672.9, 94.17846213400003);
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler1, 94.17846213400003, (double) 1671, 3105, (UnivariateSolver) pegasusSolver0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-3016.802);
      double[] doubleArray1 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(918.106486331, (-3016.802), doubleArray1, doubleArray0);
      PegasusSolver pegasusSolver0 = new PegasusSolver((-3016.802), (-3016.802));
      DormandPrince54Integrator dormandPrince54Integrator1 = new DormandPrince54Integrator((-1.0), (-3016.802), (-110.0618511690746), (-1675.1031134));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      dormandPrince54Integrator1.addEventHandler(eventHandler0, (-3016.802), (-110.0618511690746), (-1062), (UnivariateSolver) pegasusSolver0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      dormandPrince54Integrator1.addStepHandler(dummyStepHandler0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      dormandPrince54Integrator1.integrate(expandableStatefulODE1, 9.094947017729282E-10);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(0.5156965255737305);
      eulerIntegrator0.getEvaluations();
      eulerIntegrator0.getEvaluations();
      eulerIntegrator0.getStepHandlers();
      eulerIntegrator0.getCurrentStepStart();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 378.1332225470314;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 0.5156965255737305;
      doubleArray0[6] = (double) 0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.5156965255737305, 1038.98087, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setStabilityCheck(true, 2146624989, 0, 0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double double0 = (-2243.838);
      GillIntegrator gillIntegrator0 = new GillIntegrator((-2243.838));
      gillIntegrator0.getEventHandlers();
      gillIntegrator0.getCurrentStepStart();
      int int0 = 1;
      double double1 = 164.2428329;
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = null;
      try {
        adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(1, (-2243.838), Double.NaN, (-2243.838), 164.2428329);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // multistep method needs at least 1 previous steps, got 2
         //
         verifyException("org.apache.commons.math3.ode.MultistepIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(4.38466765651207, 4.38466765651207, doubleArray0, doubleArray0);
      double double0 = 0.13095238095238096;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(4.38466765651207, (-291.6755708734346), 0.13095238095238096, 0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double double1 = (-1656.47086661);
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-1656.47086661));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(139.57488611348148, (-4379.7)).when(eventHandler0).g(anyDouble() , any(double[].class));
      MullerSolver2 mullerSolver2_0 = new MullerSolver2(3.280586734644871E82);
      threeEighthesIntegrator0.addEventHandler(eventHandler0, (-1227.077), 249.7765159083, (-1), (UnivariateSolver) mullerSolver2_0);
      try { 
        threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, (-4379.7), doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-1) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(4.38466765651207, 4.38466765651207, doubleArray0, doubleArray0);
      double double0 = (-291.6755708734346);
      double double1 = 0.13095238095238096;
      double double2 = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(4.38466765651207, (-291.6755708734346), 0.13095238095238096, 0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      graggBulirschStoerIntegrator0.setStepSizeControl(1000.0, (-1656.47086661), 2397.172547848, (double) 5);
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-1656.47086661));
      double double3 = (-4379.7);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      double double4 = 1.0;
      // Undeclared exception!
      threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter1, double4, doubleArray0, double1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-3016.802);
      double[] doubleArray1 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(918.106486331, (-3016.802), doubleArray1, doubleArray0);
      int int0 = (-1062);
      PegasusSolver pegasusSolver0 = new PegasusSolver((-3016.802), (-3016.802));
      DormandPrince54Integrator dormandPrince54Integrator1 = new DormandPrince54Integrator((-1.0), (-3016.802), (-110.0618511690746), (-1675.1031134));
      double double0 = 8.881784197001252E-13;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(8.881784197001252E-13, (-110.0618511690746)).when(eventHandler0).g(anyDouble() , any(double[].class));
      dormandPrince54Integrator1.addEventHandler(eventHandler0, (-3016.802), (-110.0618511690746), (-1062), (UnivariateSolver) pegasusSolver0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        dormandPrince54Integrator1.integrate(expandableStatefulODE1, 9.094947017729282E-10);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-1,062) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double double0 = (-3016.802);
      double double1 = 918.106486331;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-3016.802);
      double[] doubleArray1 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(918.106486331, (-3016.802), doubleArray1, doubleArray0);
      int int0 = (-1062);
      PegasusSolver pegasusSolver0 = new PegasusSolver((-3016.802), (-3016.802));
      double double2 = 2291.74143461;
      MullerSolver2 mullerSolver2_0 = new MullerSolver2(2291.74143461);
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-423.531));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      threeEighthesIntegrator0.addEventHandler(eventHandler0, 1.266589879989624, 1.266589879989624, (-1062), (UnivariateSolver) pegasusSolver0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray2 = new double[0];
      try { 
        threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1.0), doubleArray2, (-1.0), doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1774.158534818);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, (-1774.158534818), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.getEventHandlers();
      graggBulirschStoerIntegrator0.getStepHandlers();
      graggBulirschStoerIntegrator0.setOrderControl(0, (-927.122), (-1774.158534818));
      graggBulirschStoerIntegrator0.getEventHandlers();
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer0 = new StepNormalizer((-1774.158534818), fixedStepHandler0);
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-927.122));
      int int0 = 3032;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(3032).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      graggBulirschStoerIntegrator0.setControlFactors((-1774.158534818), 139.57488611348148, 9.094947017729282E-10, 139.57488611348148);
      double double0 = 1.2340981629677117E-4;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      double[] doubleArray1 = new double[0];
      try { 
        threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter1, 1.2340981629677117E-4, doubleArray1, (-1774.158534818), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(4.38466765651207, 4.38466765651207, doubleArray0, doubleArray0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(4.38466765651207, (-291.6755708734346), 0.13095238095238096, 0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-1656.47086661));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      MullerSolver2 mullerSolver2_0 = new MullerSolver2(3.280586734644871E82);
      threeEighthesIntegrator0.addEventHandler(eventHandler0, (-1227.077), 249.7765159083, (-1), (UnivariateSolver) mullerSolver2_0);
      threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, (-4379.7), doubleArray0);
      threeEighthesIntegrator0.getStepHandlers();
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      BrentSolver brentSolver0 = new BrentSolver((-1656.47086661));
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler1, 0.13095238095238096, (-1656.47086661), 4, (UnivariateSolver) brentSolver0);
      graggBulirschStoerIntegrator0.setStabilityCheck(false, 4, 6, 4379.7);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(100.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 100.0;
      doubleArray0[1] = 100.0;
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1.1505428993246996E-8));
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1, (-436.0), 2251.305305789311, (-600.0));
      graggBulirschStoerIntegrator0.setMaxEvaluations((-331));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations2 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations2).getDimension();
      FirstOrderConverter firstOrderConverter2 = new FirstOrderConverter(secondOrderDifferentialEquations2);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-436.0);
      doubleArray1[1] = 100.0;
      doubleArray1[2] = (-1.1505428993246996E-8);
      doubleArray1[3] = 1620.0;
      try { 
        gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter2, 1620.0, doubleArray1, 1767.4461341341523, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(2.38466765651207);
      gillIntegrator0.getStepHandlers();
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2.38466765651207, 2.38466765651207, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.clearEventHandlers();
      graggBulirschStoerIntegrator0.setControlFactors(2.38466765651207, 1.0, 0.0, (-139.5747627036652));
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(2.38466765651207);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-139.5747627036652), doubleArray0, 1.2340981629677117E-4, doubleArray0);
      threeEighthesIntegrator0.getStepHandlers();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(1.2038767337799072);
      eulerIntegrator0.getEvaluations();
      double double0 = Double.NaN;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(Double.NaN, 1.2038767337799072, 3101.27291, 4379.7);
      double double1 = (-2343.960428479626);
      graggBulirschStoerIntegrator0.setControlFactors(0, 0, (-2343.960428479626), 0.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 1337.300342, (-2343.960428479626), 0, (UnivariateSolver) null);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(220).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.getTotalDimension();
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 4379.7);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-3016.802);
      doubleArray0[1] = 918.106486331;
      doubleArray0[2] = (-3016.802);
      doubleArray0[3] = 918.106486331;
      doubleArray0[4] = (-3016.802);
      doubleArray0[5] = 918.106486331;
      doubleArray0[6] = 918.106486331;
      doubleArray0[7] = 918.106486331;
      doubleArray0[8] = (-3016.802);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3016.802), 918.106486331, doubleArray0, doubleArray0);
      StepNormalizer stepNormalizer0 = new StepNormalizer(918.106486331, (FixedStepHandler) null);
      highamHall54Integrator0.addStepHandler(stepNormalizer0);
      highamHall54Integrator0.getStepHandlers();
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(8, 0.0, 918.106486331, (-3016.802), (-3016.802));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      try { 
        adamsMoultonIntegrator0.integrate(expandableStatefulODE0, 918.106486331);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one column
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(1.2038767337799072);
      eulerIntegrator0.getEvaluations();
      double double0 = Double.NaN;
      double double1 = 3101.27291;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(Double.NaN, 1.2038767337799072, 3101.27291, 4379.7);
      double double2 = (-2343.960428479626);
      double double3 = 0.0;
      graggBulirschStoerIntegrator0.setControlFactors(0, 0, (-2343.960428479626), 0.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 1337.300342, (-2343.960428479626), 0, (UnivariateSolver) null);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.getTotalDimension();
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 4379.7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(0.3870677351951599);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      BisectionSolver bisectionSolver0 = new BisectionSolver();
      gillIntegrator0.addEventHandler(eventHandler0, 4379.7, (-1615.1), 4, (UnivariateSolver) bisectionSolver0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.3870677351951599;
      doubleArray0[1] = 0.3870677351951599;
      doubleArray0[2] = 0.3870677351951599;
      doubleArray0[3] = 0.3870677351951599;
      doubleArray0[4] = 0.3870677351951599;
      doubleArray0[5] = 0.3870677351951599;
      doubleArray0[6] = 0.3870677351951599;
      doubleArray0[7] = 0.3870677351951599;
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
      try { 
        gillIntegrator0.integrate((FirstOrderDifferentialEquations) null, 0.3870677351951599, doubleArray0, 0.3870677351951599, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double double0 = 100.0;
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(100.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1631).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 100.0;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      GillIntegrator gillIntegrator0 = new GillIntegrator(1857.038270547);
      try { 
        gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 523.0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 3,262
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(4.38466765651207, 4.38466765651207, doubleArray0, doubleArray0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(4.38466765651207, (-291.6755708734346), 0.13095238095238096, 0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-1656.47086661));
      threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, (-4379.7), doubleArray0);
      threeEighthesIntegrator0.getStepHandlers();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      BrentSolver brentSolver0 = new BrentSolver((-1656.47086661));
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 0.13095238095238096, (-1656.47086661), 4, (UnivariateSolver) brentSolver0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 136.60964;
      doubleArray0[3] = (-139.5747627036652);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (-139.5747627036652);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0, 0, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setControlFactors(0.0, (-586.153552783978), 0, 3972.664072901061);
      int int0 = (-2311);
      graggBulirschStoerIntegrator0.setMaxEvaluations((-2311));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      GillIntegrator gillIntegrator0 = new GillIntegrator(0.0);
      try { 
        gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 136.60964, doubleArray0, 136.60964, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(2.38466765651207);
      int int0 = 0;
      gillIntegrator0.setMaxEvaluations(0);
      gillIntegrator0.getStepHandlers();
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2.38466765651207, 2.38466765651207, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.clearEventHandlers();
      double double0 = (-139.5747627036652);
      graggBulirschStoerIntegrator0.setControlFactors(2.38466765651207, 1.0, 0.0, (-139.5747627036652));
      graggBulirschStoerIntegrator0.setMaxEvaluations(0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      try { 
        gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-2.0), doubleArray0, 2.38466765651207, doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(527.8081592054236, 0.0, 0.0, 527.8081592054236);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.getStepHandlers();
      BrentSolver brentSolver0 = new BrentSolver();
      brentSolver0.getEvaluations();
      brentSolver0.getEvaluations();
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (-9.15095847217987), 527.8081592054236, 1369, (UnivariateSolver) brentSolver0);
      graggBulirschStoerIntegrator0.clearStepHandlers();
      graggBulirschStoerIntegrator0.clearStepHandlers();
      graggBulirschStoerIntegrator0.clearEventHandlers();
      graggBulirschStoerIntegrator0.clearStepHandlers();
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 2579);
      graggBulirschStoerIntegrator0.getStepHandlers();
      graggBulirschStoerIntegrator0.getEvaluations();
      graggBulirschStoerIntegrator0.setControlFactors(0, 1000.0, 634.5331240756, 2579);
      graggBulirschStoerIntegrator0.getName();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 992.8471512022915);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(4053.8, 0.0, 0.0, (-465.84543378671));
      graggBulirschStoerIntegrator0.getEvaluations();
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-308.0);
      graggBulirschStoerIntegrator0.setInterpolationControl(true, (-1855));
      graggBulirschStoerIntegrator0.clearStepHandlers();
      doubleArray0[1] = (-308.0);
      doubleArray0[2] = (-308.0);
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.computeDerivatives((-308.0), doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2.8853058180580424E-126;
      doubleArray0[1] = 2.8853058180580424E-126;
      doubleArray0[2] = 2.8853058180580424E-126;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2.8853058180580424E-126, 2.8853058180580424E-126, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setControlFactors((-688.943), 2.8853058180580424E-126, (-1725.45), 0.20457673072814941);
      graggBulirschStoerIntegrator0.getName();
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 6296);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 6296;
      doubleArray1[1] = 2.8853058180580424E-126;
      doubleArray1[2] = (-1789.689900118214);
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(1096, 4.2459748085663055E253, (-1789.689900118214), doubleArray1, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, doubleArray0, doubleArray0);
      double double0 = (-298.937451);
      double double1 = 0.13095238095238096;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, (-298.937451), 0.13095238095238096, 0.0);
      graggBulirschStoerIntegrator0.getStepHandlers();
      boolean boolean0 = false;
      int int0 = (-904);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.getSecondaryMappers();
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 0.13095238095238096);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 60.0;
      double double0 = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0E-14;
      doubleArray0[3] = 60.0;
      doubleArray0[4] = 60.0;
      doubleArray0[5] = 1.0E-14;
      doubleArray0[6] = 2936.1912;
      doubleArray0[7] = 1.0E-14;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1.0E-14, 60.0, doubleArray0, doubleArray0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1.0E-14, 2936.1912, doubleArray0, doubleArray0);
      int int0 = 426;
      graggBulirschStoerIntegrator0.setMaxEvaluations(426);
      graggBulirschStoerIntegrator0.setControlFactors(2936.1912, 2936.1912, (-4072.246759179), 0.0);
      boolean boolean0 = false;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2206.713118067, doubleArray0, (-0.0013990241651590145), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(2.38466765651207);
      gillIntegrator0.setMaxEvaluations(0);
      gillIntegrator0.getStepHandlers();
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2.38466765651207, 2.38466765651207, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.clearEventHandlers();
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = null;
      try {
        adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(0, 0.0, (-1709.456), 1.0, 172.36634);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // multistep method needs at least 0 previous steps, got 2
         //
         verifyException("org.apache.commons.math3.ode.MultistepIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(951.8, 951.8, 951.8, 951.8);
      highamHall54Integrator0.clearStepHandlers();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 951.8;
      doubleArray0[1] = 692.7119926;
      doubleArray0[2] = 951.8;
      doubleArray0[3] = 951.8;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 951.8;
      doubleArray0[6] = (-2102.0);
      // Undeclared exception!
      try { 
        highamHall54Integrator0.computeDerivatives((-2102.0), doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(675.3396916346086);
      double double0 = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(675.3396916346086, 675.3396916346086, 0.0, (-1710.23912));
      double double1 = (-3717.4074448600486);
      double double2 = (-1550.61585);
      double double3 = 1531.960275;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1531.960275;
      doubleArray0[1] = (-1550.61585);
      doubleArray0[2] = (-3856.998776);
      doubleArray0[3] = (-2727.1317724537503);
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.computeDerivatives(Double.NaN, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 18.148505520854727;
      doubleArray0[1] = 18.148505520854727;
      doubleArray0[2] = 18.148505520854727;
      doubleArray0[3] = 18.148505520854727;
      doubleArray0[4] = 18.148505520854727;
      doubleArray0[5] = 18.148505520854727;
      doubleArray0[6] = 18.148505520854727;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(18.148505520854727, 18.148505520854727, doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      BrentSolver brentSolver0 = new BrentSolver(18.148505520854727, 1387.2105385171167, 18.148505520854727);
      highamHall54Integrator0.addEventHandler(eventHandler0, 18.148505520854727, 1358.4031, (-2928), (UnivariateSolver) brentSolver0);
      highamHall54Integrator0.setStepSizeControl((-1362.7), 242.28349177525817, 18.148505520854727, 1.0E-6);
      int int0 = highamHall54Integrator0.getMaxEvaluations();
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double double0 = 830.63212787632;
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(830.63212787632);
      ExpandableStatefulODE expandableStatefulODE0 = null;
      // Undeclared exception!
      try { 
        classicalRungeKuttaIntegrator0.integrate((ExpandableStatefulODE) null, 830.63212787632);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1820.1113624870702;
      doubleArray0[1] = 1820.1113624870702;
      doubleArray0[2] = 1820.1113624870702;
      doubleArray0[3] = 3162.0;
      doubleArray0[4] = 1820.1113624870702;
      doubleArray0[5] = 1820.1113624870702;
      doubleArray0[6] = 1820.1113624870702;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1820.1113624870702, 1820.1113624870702, doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      PegasusSolver pegasusSolver0 = new PegasusSolver(1820.1113624870702, 1820.1113624870702);
      dormandPrince54Integrator0.addEventHandler(eventHandler0, Double.NaN, (-1.0), (-1062), (UnivariateSolver) pegasusSolver0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        dormandPrince54Integrator0.integrate(expandableStatefulODE0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 7
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2.38466765651207, 2.38466765651207, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.getStepHandlers();
      double double0 = (-927.122);
      graggBulirschStoerIntegrator0.setOrderControl(0, (-927.122), 0);
      graggBulirschStoerIntegrator0.getEventHandlers();
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0);
      BrentSolver brentSolver0 = new BrentSolver(0.14686977863311768, (-570.508765), 0);
      threeEighthesIntegrator0.addEventHandler((EventHandler) null, 2.38466765651207, (-226.1884085), 2675, (UnivariateSolver) brentSolver0);
      FirstOrderConverter firstOrderConverter0 = null;
      try {
        firstOrderConverter0 = new FirstOrderConverter((SecondOrderDifferentialEquations) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.FirstOrderConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double double0 = (-84.72286821);
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-84.72286821));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double1 = 358.979;
      classicalRungeKuttaIntegrator0.addEventHandler(eventHandler0, (-84.72286821), 358.979, (-486));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-84.72286821);
      doubleArray0[1] = (-84.72286821);
      doubleArray0[2] = 358.979;
      doubleArray0[3] = (-84.72286821);
      doubleArray0[4] = (double) (-486);
      try { 
        classicalRungeKuttaIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-84.72286821), doubleArray0, (double) (-486), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(614.7, 0.0, doubleArray0, doubleArray0);
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      dormandPrince54Integrator0.addStepHandler(dummyStepHandler0);
      dormandPrince54Integrator0.getMaxEvaluations();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(Integer.MAX_VALUE, 0.0, Integer.MAX_VALUE, 331.3592768477);
      graggBulirschStoerIntegrator0.setOrderControl(123, 0.0, 0.0);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-436.0743139489), (-436.0743139489), (-436.0743139489), 0.0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-26.041666666666668);
      doubleArray0[2] = (-26.041666666666668);
      doubleArray0[3] = (-26.041666666666668);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-436.0743139489);
      doubleArray0[7] = (-1668.6564);
      doubleArray0[8] = (-436.0743139489);
      graggBulirschStoerIntegrator0.setStepSizeControl((-1668.6564), 0.0, doubleArray0, doubleArray0);
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.BOTH;
      graggBulirschStoerIntegrator0.setOrderControl((-1), (-436.0743139489), (-1583.088686984));
      StepNormalizer stepNormalizer0 = new StepNormalizer((-26.041666666666668), fixedStepHandler0, stepNormalizerMode0, stepNormalizerBounds0);
      stepNormalizer0.init((-3393.32), (double[]) null, (-26.041666666666668));
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2798.17964045349);
      doubleArray0[1] = (-2798.17964045349);
      doubleArray0[2] = 4.440892098500626E-13;
      doubleArray0[3] = 2313.572506;
      doubleArray0[4] = (-2798.17964045349);
      doubleArray0[5] = 4.440892098500626E-13;
      doubleArray0[6] = 1400.0;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-2798.17964045349), 2313.572506, doubleArray0, doubleArray0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1193.6315562714), 2345.0, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.getEventHandlers();
      StepNormalizer stepNormalizer0 = new StepNormalizer(4.440892098500626E-13, (FixedStepHandler) null);
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(1.2300209999084473);
      FirstOrderConverter firstOrderConverter0 = null;
      try {
        firstOrderConverter0 = new FirstOrderConverter((SecondOrderDifferentialEquations) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.FirstOrderConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NaN;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, Double.NaN, doubleArray0, doubleArray0);
      highamHall54Integrator0.clearStepHandlers();
      highamHall54Integrator0.setInitialStepSize(Double.NaN);
      highamHall54Integrator0.getStepHandlers();
      double double0 = 392.004259;
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = null;
      try {
        adamsMoultonIntegrator0 = new AdamsMoultonIntegrator((-2329), (-3229.0223), (-865.621039), 0.0, 392.004259);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // multistep method needs at least -2,329 previous steps, got 2
         //
         verifyException("org.apache.commons.math3.ode.MultistepIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, Double.NaN, 2659.049, 0.0);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double double0 = 0.0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1774.158534818);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, (-1774.158534818), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.getEventHandlers();
      graggBulirschStoerIntegrator0.getStepHandlers();
      double double1 = (-927.122);
      graggBulirschStoerIntegrator0.setOrderControl(0, (-927.122), (-1774.158534818));
      graggBulirschStoerIntegrator0.getEventHandlers();
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer0 = new StepNormalizer((-1774.158534818), fixedStepHandler0);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-927.122);
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      stepNormalizer0.init((-927.122), doubleArray1, 0.0);
      NordsieckStepInterpolator nordsieckStepInterpolator1 = new NordsieckStepInterpolator(nordsieckStepInterpolator0);
      nordsieckStepInterpolator1.finalizeStep();
      nordsieckStepInterpolator0.finalizeStep();
      // Undeclared exception!
      try { 
        nordsieckStepInterpolator1.getInterpolatedState();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }
}
