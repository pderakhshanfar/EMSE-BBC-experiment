/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 00:01:11 GMT 2021
 */

package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver;
import org.apache.commons.math3.analysis.solvers.BrentSolver;
import org.apache.commons.math3.analysis.solvers.MullerSolver;
import org.apache.commons.math3.analysis.solvers.MullerSolver2;
import org.apache.commons.math3.analysis.solvers.RiddersSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondaryEquations;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator;
import org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.EulerIntegrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.nonstiff.MidpointIntegrator;
import org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator;
import org.apache.commons.math3.ode.sampling.DummyStepHandler;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.StepHandler;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.apache.commons.math3.ode.sampling.StepNormalizerBounds;
import org.apache.commons.math3.ode.sampling.StepNormalizerMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegrator_ESTest extends AbstractIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-3285.1981));
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-3285.1981), 544.533373248461, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.getEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      graggBulirschStoerIntegrator0.setStepSizeControl(2.2737367544323206E-10, 1.880582039589629E-283, doubleArray0, doubleArray0);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 544.533373248461, doubleArray0, (-3285.1981), doubleArray0);
      graggBulirschStoerIntegrator0.getEventHandlers();
      graggBulirschStoerIntegrator0.setStabilityCheck(false, 1396, 1396, 3.2556641859513496E201);
      midpointIntegrator0.getEvaluations();
      midpointIntegrator0.getName();
      graggBulirschStoerIntegrator0.getEvaluations();
      graggBulirschStoerIntegrator0.getStepHandlers();
      graggBulirschStoerIntegrator0.setOrderControl(4, 544.533373248461, 0);
      midpointIntegrator0.getCurrentStepStart();
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(4, 0, 0.20102575421333313, doubleArray0, doubleArray0);
      ExpandableStatefulODE expandableStatefulODE0 = null;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double0 = 1578.0;
      adamsBashforthIntegrator0.addEventHandler(eventHandler0, 1578.0, (-3285.1981), 0);
      // Undeclared exception!
      try { 
        adamsBashforthIntegrator0.integrate((ExpandableStatefulODE) null, 1.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-504.6573042041), (-504.6573042041), (-504.6573042041), (-25.901940756740398));
      dormandPrince853Integrator0.getOrder();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      dormandPrince853Integrator0.getEventHandlers();
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime((-504.6573042041));
      expandableStatefulODE0.getSecondaryMappers();
      dormandPrince853Integrator0.integrate(expandableStatefulODE0, (-25.901940756740398));
      dormandPrince853Integrator0.getOrder();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-504.6573042041), (-504.6573042041), (-504.6573042041), (-504.6573042041));
      int int0 = 12;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(12).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-504.6573042041), (-504.6573042041), 0.0, (-504.6573042041), 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.NEITHER;
      StepNormalizer stepNormalizer0 = new StepNormalizer((-504.6573042041), fixedStepHandler0, stepNormalizerMode0, stepNormalizerBounds0);
      dormandPrince853Integrator0.addStepHandler(stepNormalizer0);
      double double0 = 1796.9;
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(1796.9, (-33.1054681200686), 0.0, 12);
      double double1 = (-1.0);
      dormandPrince853Integrator0.addEventHandler(eventHandler0, (double) 12, (-1.0), 12, (UnivariateSolver) bracketingNthOrderBrentSolver0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      dormandPrince853Integrator0.integrate(expandableStatefulODE0, 1326.097);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double double0 = 1561.38922;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1561.38922;
      doubleArray0[1] = 1561.38922;
      doubleArray0[2] = 1561.38922;
      doubleArray0[3] = 1561.38922;
      doubleArray0[4] = 434.4517775882461;
      doubleArray0[5] = 1561.38922;
      doubleArray0[6] = 434.4517775882461;
      doubleArray0[7] = 434.4517775882461;
      doubleArray0[8] = 1.3861841053630075E-123;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(9.094947017729282E-10, 1.3861841053630075E-123, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getEventHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime((-1035.0));
      try { 
        dormandPrince853Integrator0.integrate(expandableStatefulODE0, (-1035.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, Double.NaN, Double.NaN);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      dormandPrince853Integrator0.getEventHandlers();
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1.880582039589629E-283;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-1397.236869);
      doubleArray0[8] = Double.NaN;
      expandableStatefulODE0.setTime(0.0);
      try { 
        dormandPrince853Integrator0.integrate(expandableStatefulODE0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-1668.5389753640122));
      midpointIntegrator0.getCurrentStepStart();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0.31132614612579346);
      midpointIntegrator0.getCurrentStepStart();
      midpointIntegrator0.getStepHandlers();
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(Double.NaN, (-508.675123553), 921.33923667475, (-508.675123553));
      highamHall54Integrator0.clearStepHandlers();
      highamHall54Integrator0.getOrder();
      highamHall54Integrator0.getMaxEvaluations();
      midpointIntegrator0.addEventHandler((EventHandler) null, (-3031.7455318769607), 2520.708728086, 5);
      highamHall54Integrator0.setMaxGrowth(1.0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1326.097;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 0.31132614612579346;
      doubleArray0[4] = 9.094947017729282E-10;
      doubleArray0[5] = (-508.675123553);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(9.094947017729282E-10, 1326.097, doubleArray0, doubleArray0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.setOrderControl(5, 0.31132614612579346, Integer.MAX_VALUE);
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizer stepNormalizer0 = new StepNormalizer(1326.097, fixedStepHandler0, stepNormalizerMode0);
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1.13047236597869E-8), (-1.0), (-4257.7), (-2392.0316794519));
      double[] doubleArray0 = new double[0];
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(5, 3987.5, (-2392.0316794519), doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      // Undeclared exception!
      try { 
        adamsBashforthIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1012.0, doubleArray0, (-4257.7), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one column
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1284.183557206), (-1284.183557206), doubleArray0, doubleArray0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1284.183557206), (-1284.183557206), (-1284.183557206), 1.0);
      graggBulirschStoerIntegrator0.setStepSizeControl((-1.0), 1.0, doubleArray0, doubleArray0);
      highamHall54Integrator0.getEventHandlers();
      graggBulirschStoerIntegrator0.setControlFactors((-1284.183557206), 1.0, (-1.0), 1.1368683772161603E-10);
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 5);
      highamHall54Integrator0.getCurrentStepStart();
      graggBulirschStoerIntegrator0.getName();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1503.131248345);
      doubleArray1[1] = 1.1368683772161603E-10;
      doubleArray1[2] = 1.1368683772161603E-10;
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = 1.0;
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1.1368683772161603E-10, doubleArray0, Double.NaN, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-504.6573042041), (-504.6573042041), (-504.6573042041), (-0.22150240211583339));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(12).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(1468.073261199335, (-504.6573042041), 0.0, (-0.22150240211583339), 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(1.0, 1796.9, 2.220446049250313E-13, 2460);
      dormandPrince853Integrator0.addEventHandler(eventHandler0, 2.220446049250313E-13, 2.220446049250313E-13, 9, (UnivariateSolver) bracketingNthOrderBrentSolver0);
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(2.220446049250313E-13, (-1.6661676835672304E143), 1.0, 0.0, (double)12).when(eventHandler1).g(anyDouble() , any(double[].class));
      dormandPrince853Integrator0.addEventHandler(eventHandler1, 1.1368683772161603E-10, 0.0, 9, (UnivariateSolver) bracketingNthOrderBrentSolver0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      dormandPrince853Integrator0.integrate(expandableStatefulODE0, (double) 0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-504.6573042041), (-504.6573042041), (-504.6573042041), (-0.22150240211583339));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(12).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(1468.073261199335, (-504.6573042041), 0.0, (-0.22150240211583339), 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(1.0, 1796.9, 2.220446049250313E-13, 2460);
      dormandPrince853Integrator0.addEventHandler(eventHandler0, 2.220446049250313E-13, 2.220446049250313E-13, 9, (UnivariateSolver) bracketingNthOrderBrentSolver0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter0);
      SecondaryEquations secondaryEquations0 = mock(SecondaryEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondaryEquations0).getDimension();
      expandableStatefulODE1.addSecondaryEquations(secondaryEquations0);
      // Undeclared exception!
      dormandPrince853Integrator0.integrate(expandableStatefulODE0, (-376.05680733));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1.13047236597869E-8), (-1.0), (-4257.7), (-2392.0316794519));
      double[] doubleArray0 = new double[0];
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(5, 3987.5, (-2392.0316794519), doubleArray0, doubleArray0);
      AdamsBashforthIntegrator adamsBashforthIntegrator1 = new AdamsBashforthIntegrator(5, (-4257.7), 2383.701725320865, (-3435.0), (-417.567));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        adamsBashforthIntegrator0.integrate(expandableStatefulODE0, 2008.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 10 != 0
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double double0 = (-504.6573042041);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-504.6573042041), (-504.6573042041), (-504.6573042041), 0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(0.0, 9);
      dormandPrince853Integrator0.addEventHandler(eventHandler0, 0.0, (-504.6573042041), 9, (UnivariateSolver) bracketingNthOrderBrentSolver0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      dormandPrince853Integrator0.integrate(expandableStatefulODE0, 3987.5);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-504.6573042041), (-504.6573042041), (-504.6573042041), 0.0);
      dormandPrince853Integrator0.getStepHandlers();
      dormandPrince853Integrator0.getOrder();
      // Undeclared exception!
      try { 
        dormandPrince853Integrator0.integrate((ExpandableStatefulODE) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1.13047236597869E-8), (-1.0), (-4257.7), (-2392.0316794519));
      double[] doubleArray0 = new double[0];
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(5, 3987.5, (-2392.0316794519), doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double double0 = 0.0;
      // Undeclared exception!
      highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1.0), doubleArray0, 0.0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1.13047236597869E-8), (-1.0), (-4257.7), (-2392.0316794519));
      double[] doubleArray0 = new double[0];
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(5, 3987.5, (-2392.0316794519), doubleArray0, doubleArray0);
      AdamsBashforthIntegrator adamsBashforthIntegrator1 = new AdamsBashforthIntegrator(5, (-4257.7), 2383.701725320865, (-3435.0), (-417.567));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      try { 
        adamsBashforthIntegrator0.integrate(expandableStatefulODE0, 2008.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one column
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1.13047236597869E-8), (-1.0), (-4257.7), (-2392.0316794519));
      double[] doubleArray0 = new double[0];
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(5, 3987.5, (-2392.0316794519), doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      adamsBashforthIntegrator0.addEventHandler(eventHandler0, (-1.0), (-4257.7), 5);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      try { 
        adamsBashforthIntegrator0.integrate(expandableStatefulODE0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one column
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double double0 = (-1830.3958978297956);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1778.7860615111088, (-1830.3958978297956), 1778.7860615111088, 0.0);
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      dormandPrince853Integrator0.addStepHandler(dummyStepHandler0);
      dormandPrince853Integrator0.getMaxEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(123).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1830.3958978297956);
      doubleArray0[2] = (-1830.3958978297956);
      doubleArray0[3] = 0.0;
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1830.3958978297956), doubleArray0, 0.0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 246
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          double double0 = 1778.7860615111088;
          double double1 = (-1830.3958978297956);
          SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
          doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
          FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
          ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
          SecondaryEquations secondaryEquations0 = mock(SecondaryEquations.class, new ViolatedAssumptionAnswer());
          doReturn(0).when(secondaryEquations0).getDimension();
          expandableStatefulODE0.addSecondaryEquations(secondaryEquations0);
          ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(3087.86);
          // Undeclared exception!
          classicalRungeKuttaIntegrator0.integrate(expandableStatefulODE0, 3087.86);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(1.0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      double double0 = 1428.1187289;
      FixedStepHandler fixedStepHandler1 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.LAST;
      StepNormalizer stepNormalizer0 = new StepNormalizer(1428.1187289, fixedStepHandler1, stepNormalizerBounds0);
      classicalRungeKuttaIntegrator0.addStepHandler(stepNormalizer0);
      StepNormalizer stepNormalizer1 = new StepNormalizer(1.0, fixedStepHandler0, stepNormalizerMode0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(112).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      classicalRungeKuttaIntegrator0.integrate(expandableStatefulODE0, 1.0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1.13047236597869E-8), (-1.0), (-4257.7), (-2392.0316794519));
      double[] doubleArray0 = new double[0];
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(5, 3987.5, (-2392.0316794519), doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      try { 
        adamsBashforthIntegrator0.integrate(expandableStatefulODE0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one column
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1778.7860615111088, (-1830.3958978297956), 1778.7860615111088, 0.0);
      DummyStepHandler.getInstance();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1830.3958978297956);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 2.219508285637377E-115, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.getCurrentSignedStepsize();
      // Undeclared exception!
      try { 
        dormandPrince54Integrator0.computeDerivatives(0.0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double double0 = 60.0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 60.0;
      doubleArray0[1] = 60.0;
      doubleArray0[2] = 60.0;
      doubleArray0[3] = 60.0;
      doubleArray0[4] = 60.0;
      doubleArray0[5] = 60.0;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(60.0, 60.0, doubleArray0, doubleArray0);
      double double1 = 0.0;
      int int0 = 112;
      dormandPrince54Integrator0.setMaxEvaluations(112);
      // Undeclared exception!
      try { 
        dormandPrince54Integrator0.computeDerivatives(0.0, doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2776.638441248492;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 2776.638441248492;
      doubleArray0[5] = 2776.638441248492;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 2776.638441248492, doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      MullerSolver mullerSolver0 = new MullerSolver(0.0, 0.6512820512820513);
      mullerSolver0.getMaxEvaluations();
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 0.47766253643826434, 2776.638441248492, (-2962), (UnivariateSolver) mullerSolver0);
      graggBulirschStoerIntegrator0.getMaxEvaluations();
      graggBulirschStoerIntegrator0.setInitialStepSize((-507.61716));
      graggBulirschStoerIntegrator0.setStabilityCheck(true, Integer.MAX_VALUE, (-1082), 0.0);
      graggBulirschStoerIntegrator0.clearStepHandlers();
      graggBulirschStoerIntegrator0.setMaxEvaluations(0);
      graggBulirschStoerIntegrator0.setControlFactors(1080.0637251, 2776.638441248492, (-483.6), 0.6512820512820513);
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 609);
      String string0 = graggBulirschStoerIntegrator0.getName();
      assertEquals("Gragg-Bulirsch-Stoer", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(3141.698022752053);
      classicalRungeKuttaIntegrator0.addEventHandler((EventHandler) null, 3141.698022752053, 3141.698022752053, (-1444));
      classicalRungeKuttaIntegrator0.getMaxEvaluations();
      classicalRungeKuttaIntegrator0.setMaxEvaluations((-1));
      classicalRungeKuttaIntegrator0.setMaxEvaluations(24);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 24;
      doubleArray0[1] = (double) 24;
      doubleArray0[2] = 3141.698022752053;
      doubleArray0[3] = (double) Integer.MAX_VALUE;
      doubleArray0[4] = (double) Integer.MAX_VALUE;
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) (-1444);
      doubleArray0[7] = (double) (-1);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(3141.698022752053, 0.0, doubleArray0, doubleArray0);
      int int0 = dormandPrince853Integrator0.getMaxEvaluations();
      dormandPrince853Integrator0.setMaxEvaluations(Integer.MAX_VALUE);
      dormandPrince853Integrator0.getName();
      dormandPrince853Integrator0.getOrder();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1433.899912644), (-1.0), 0.0, Integer.MAX_VALUE);
      graggBulirschStoerIntegrator0.setOrderControl(590, 0.0, 590);
      dormandPrince853Integrator0.getOrder();
      BrentSolver brentSolver0 = new BrentSolver(187.3251);
      dormandPrince853Integrator0.addEventHandler((EventHandler) null, 3141.698022752053, (-9.482896784430338E-8), 914, (UnivariateSolver) brentSolver0);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1227.96251447, 8, 1.0, (-889.02981));
      int int1 = dormandPrince54Integrator0.getOrder();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2413.1384014);
      doubleArray0[1] = (-2413.1384014);
      doubleArray0[2] = 1000.0;
      doubleArray0[3] = 1000.0;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1000.0, (-2413.1384014), doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      dormandPrince54Integrator0.setInitialStepSize(1000.0);
      RiddersSolver riddersSolver0 = new RiddersSolver((-559.9149832115531));
      dormandPrince54Integrator0.addEventHandler(eventHandler0, 0.0, 1000.0, 0, (UnivariateSolver) riddersSolver0);
      dormandPrince54Integrator0.setInitialStepSize(3115.815);
      dormandPrince54Integrator0.getEventHandlers();
      dormandPrince54Integrator0.setMinReduction((-0.3125));
      dormandPrince54Integrator0.setStepSizeControl((-2413.1384014), 1000.0, 1000.0, (-2413.1384014));
      dormandPrince54Integrator0.getEvaluations();
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (-559.9149832115531);
      // Undeclared exception!
      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) null, (-2413.1384014), doubleArray1, (-559.9149832115531), doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(Double.NaN, Double.NaN, Double.NaN, Double.NaN);
      dormandPrince853Integrator0.getEvaluations();
      dormandPrince853Integrator0.getOrder();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2044.77394304);
      doubleArray0[1] = 2.1170345824450285;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = (double) 8;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, (-1628.5389), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setStabilityCheck(true, 884, 884, (-1398.22826231));
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-390.2889296513724), (-390.2889296513724), 148.10319, 151.276349);
      dormandPrince54Integrator0.getCurrentSignedStepsize();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 151.276349;
      doubleArray0[2] = 1.5;
      doubleArray0[3] = 1.5;
      doubleArray0[4] = 151.276349;
      doubleArray0[5] = 1.5;
      doubleArray0[6] = 151.276349;
      doubleArray0[7] = 390.2889296513724;
      doubleArray0[8] = 1.5;
      // Undeclared exception!
      try { 
        dormandPrince54Integrator0.computeDerivatives(1.5, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1.13047236597869E-8), (-1.0), (-4257.7), (-2392.0316794519));
      double[] doubleArray0 = new double[0];
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(5, 3987.5, (-2392.0316794519), doubleArray0, doubleArray0);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-4257.7), (-1.0), 3987.5, (-4257.7));
      dormandPrince54Integrator0.getEventHandlers();
      dormandPrince54Integrator0.setMinReduction(0.0);
      dormandPrince54Integrator0.setStepSizeControl((-0.3125), (-0.3125), (-4257.7), (-1.13047236597869E-8));
      dormandPrince54Integrator0.getEvaluations();
      // Undeclared exception!
      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) null, 0.0, doubleArray0, (-5143.0), doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(1000.0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1000.0;
      doubleArray0[1] = 1000.0;
      doubleArray0[2] = 1000.0;
      doubleArray0[3] = 1000.0;
      doubleArray0[4] = 1000.0;
      doubleArray0[5] = 1000.0;
      // Undeclared exception!
      try { 
        eulerIntegrator0.computeDerivatives(1000.0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(0.0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1516.892102;
      doubleArray0[1] = 1516.892102;
      doubleArray0[2] = 1516.892102;
      doubleArray0[3] = 1516.892102;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1516.892102, 0.0, doubleArray0, doubleArray0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        dormandPrince54Integrator0.initializeStep(true, 103, doubleArray0, (-1.0), doubleArray0, doubleArray0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-1441.805499036061), (-1441.805499036061), doubleArray0, doubleArray0);
      double double0 = (-1087.08);
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      DummyStepHandler.getInstance();
      dormandPrince54Integrator0.addStepHandler(dummyStepHandler0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = null;
      try {
        graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1441.805499036061), (-1087.08), (double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      double double0 = 0.0;
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-265.4217552573025);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-265.4217552573025);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 1942.23628;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-265.4217552573025), 0.0, doubleArray0, doubleArray1);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizer stepNormalizer0 = new StepNormalizer((-1423.25164564022), fixedStepHandler0, stepNormalizerMode0);
      dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime((-265.4217552573025));
      try { 
        expandableStatefulODE0.setPrimaryState(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 0
         //
         verifyException("org.apache.commons.math3.ode.ExpandableStatefulODE", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-606.0);
      doubleArray1[1] = (-585.851159391);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-585.851159391), (-606.0), doubleArray0, doubleArray1);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      dormandPrince853Integrator0.addEventHandler(eventHandler0, (-606.0), (-724.4445603406), 0);
      dormandPrince853Integrator0.setMinReduction(29.8402934266605);
      dormandPrince853Integrator0.getOrder();
      dormandPrince853Integrator0.setMaxEvaluations(8);
      int int0 = dormandPrince853Integrator0.getOrder();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 5.746280211439194;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2599.98845);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 5.746280211439194;
      doubleArray0[6] = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 5.746280211439194, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.clearStepHandlers();
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1672.39417796157), (-1672.39417796157), 0.0, (-203.4514));
      Collection<StepHandler> collection0 = graggBulirschStoerIntegrator0.getStepHandlers();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(3141.698022752053);
      EventHandler eventHandler0 = null;
      classicalRungeKuttaIntegrator0.addEventHandler((EventHandler) null, 3141.698022752053, 3141.698022752053, (-1444));
      classicalRungeKuttaIntegrator0.getMaxEvaluations();
      classicalRungeKuttaIntegrator0.setMaxEvaluations((-1));
      int int0 = 24;
      classicalRungeKuttaIntegrator0.setMaxEvaluations(24);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 24;
      doubleArray0[1] = (double) 24;
      doubleArray0[2] = 3141.698022752053;
      doubleArray0[3] = (double) Integer.MAX_VALUE;
      doubleArray0[4] = (double) Integer.MAX_VALUE;
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) (-1444);
      doubleArray0[7] = (double) (-1);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(24, 24, doubleArray0, doubleArray0);
      classicalRungeKuttaIntegrator0.getMaxEvaluations();
      graggBulirschStoerIntegrator0.setControlFactors(0.0, (-1.0), 207.896861723, 0.0);
      // Undeclared exception!
      try { 
        classicalRungeKuttaIntegrator0.computeDerivatives(3141.698022752053, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-5624.0);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 1539.923473;
      doubleArray0[3] = 1539.923473;
      doubleArray0[4] = (-5624.0);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-5624.0);
      doubleArray1[2] = (-2316.14074593);
      doubleArray1[3] = Double.NaN;
      doubleArray1[4] = 1539.923473;
      doubleArray1[5] = 1539.923473;
      doubleArray1[6] = 1539.923473;
      doubleArray1[7] = (-1124.9943384040164);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-5624.0), 1539.923473, doubleArray0, doubleArray1);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      MullerSolver2 mullerSolver2_0 = new MullerSolver2(0.0);
      dormandPrince54Integrator0.addEventHandler(eventHandler0, 0.0, 0.0, (-1608), (UnivariateSolver) mullerSolver2_0);
      assertEquals(0.0, mullerSolver2_0.getStartValue(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2560.336330333924;
      doubleArray0[1] = (-1840.85278);
      doubleArray0[2] = (-1840.85278);
      doubleArray0[3] = (-1840.85278);
      doubleArray0[4] = 2560.336330333924;
      doubleArray0[5] = 2560.336330333924;
      doubleArray0[6] = 2560.336330333924;
      doubleArray0[7] = 2560.336330333924;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-1840.85278), 2560.336330333924, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.getEventHandlers();
      dormandPrince54Integrator0.getMaxEvaluations();
      dormandPrince54Integrator0.clearEventHandlers();
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double double0 = 1.0;
      double double1 = 60.0;
      double double2 = (-2626.3859004411256);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1.0, 60.0, (-2626.3859004411256), (-2626.3859004411256));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.getEventHandlers();
      int int0 = 0;
      double double3 = 2.38466765651207;
      int int1 = 0;
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = null;
      try {
        bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(2.38466765651207, 2.38466765651207, 60.0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than the minimum (2)
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double double0 = (-3608.4856721039);
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-3608.4856721039));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-3608.4856721039);
      doubleArray0[1] = (-3608.4856721039);
      doubleArray0[2] = (-3608.4856721039);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray1 = new double[5];
      double double1 = (-1191.28);
      doubleArray1[0] = (-1191.28);
      doubleArray1[1] = (-3608.4856721039);
      doubleArray1[2] = (-3608.4856721039);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-3608.4856721039);
      try { 
        threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.8571428571428571, doubleArray0, (-3608.4856721039), doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = 0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = null;
      try {
        adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(0, 0.0, 0, doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one row
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }
}
