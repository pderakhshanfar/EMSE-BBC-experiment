/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 23:47:05 GMT 2021
 */

package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.solvers.BisectionSolver;
import org.apache.commons.math3.analysis.solvers.BrentSolver;
import org.apache.commons.math3.analysis.solvers.MullerSolver;
import org.apache.commons.math3.analysis.solvers.MullerSolver2;
import org.apache.commons.math3.analysis.solvers.PegasusSolver;
import org.apache.commons.math3.analysis.solvers.RegulaFalsiSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.GillIntegrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.nonstiff.MidpointIntegrator;
import org.apache.commons.math3.ode.sampling.DummyStepHandler;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.apache.commons.math3.ode.sampling.StepNormalizerMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegrator_ESTest extends AbstractIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1457.26941), (-1457.26941), (-1457.26941), (-1457.26941));
      highamHall54Integrator0.getEvaluations();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      doReturn((double)0, 2220.92, 2351.7, 1746.31144752615, 2870.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      highamHall54Integrator0.addEventHandler(eventHandler0, (-1457.26941), 2974.10005817385, (-350));
      highamHall54Integrator0.getEventHandlers();
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1457.26941));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1051.4540021, doubleArray0, 2864.03535259503, doubleArray0);
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1746.31144752615, doubleArray0, 2220.92, doubleArray0);
      BrentSolver brentSolver0 = new BrentSolver(1051.4540021, 1746.31144752615, 2.220446049250313E-13);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      highamHall54Integrator0.integrate(expandableStatefulODE0, 1440.72317245809);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      GillIntegrator gillIntegrator0 = new GillIntegrator(394.06293949984655);
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, (-5185.386586065937), doubleArray0);
      BrentSolver brentSolver0 = new BrentSolver(394.06293949984655, (-5185.386586065937), 5.6843418860808015E-11);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(870.55, 5.6843418860808015E-11, 1.7321703934464356E213, 0.0);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1.7321703934464356E213, doubleArray0, (-5185.386586065937), doubleArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1457.26941), (-1457.26941), (-1457.26941), (-1457.26941));
      highamHall54Integrator0.getEvaluations();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      highamHall54Integrator0.addEventHandler(eventHandler0, (-1457.26941), 2974.10005817385, (-350));
      highamHall54Integrator0.getEventHandlers();
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1457.26941));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1051.4540021, doubleArray0, 2864.03535259503, doubleArray0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1746.31144752615, 480.52055101654844, 0, 440.4241);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter1, 552.82929148288, doubleArray1, 3761.23868559503, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1457.26941), (-1457.26941), (-1457.26941), (-1457.26941));
      highamHall54Integrator0.getEvaluations();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(";X^NHZ>?1[API;1@P").when(eventHandler0).toString();
      highamHall54Integrator0.addEventHandler(eventHandler0, (-1457.26941), 839.1940649454706, 12);
      highamHall54Integrator0.getEventHandlers();
      GillIntegrator gillIntegrator0 = new GillIntegrator(1.0039138793945312);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1.0039138793945312, doubleArray0, 839.1940649454706, doubleArray0);
      BrentSolver brentSolver0 = new BrentSolver(1.1368683772161603E-10, 1.0039138793945312, 1826.563914284);
      highamHall54Integrator0.getEvaluations();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(679.32392449, 3136.0, 1.0039138793945312, 1.1368683772161603E-10);
      graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) 0, doubleArray0, 480.52055101654844, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(2974.10005817385, 394.06293949984655, doubleArray0, doubleArray0);
      highamHall54Integrator0.setMinReduction(1.1188538074493408);
      highamHall54Integrator0.getEventHandlers();
      GillIntegrator gillIntegrator0 = new GillIntegrator(2974.10005817385);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 4720.4115057, doubleArray0, 2974.10005817385, doubleArray0);
      BrentSolver brentSolver0 = new BrentSolver(2974.10005817385, 870.55, 2974.10005817385);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1.7321703934464356E213, 2187.951931238, (-5.902712448725381E-8), 2974.10005817385);
      graggBulirschStoerIntegrator0.setMaxEvaluations(676);
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1456.02, doubleArray0, 4720.4115057, doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (676) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double double0 = 0.0;
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 729.5278601987748, doubleArray0, doubleArray0);
      highamHall54Integrator0.getEventHandlers();
      double double1 = (-2914.0);
      GillIntegrator gillIntegrator0 = new GillIntegrator((-2914.0));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      try { 
        gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 729.5278601987748, doubleArray0, 729.5278601987748, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(2.0402105689098835E-224, 2.0402105689098835E-224, (-432.869951077), 396.3223596829);
      try { 
        highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-432.869951077), doubleArray0, (-432.869951077), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = 394.06293949984655;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 394.06293949984655, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      try { 
        highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 0.0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1457.26941), (-1457.26941), (-1457.26941), (-1457.26941));
      highamHall54Integrator0.getEvaluations();
      double double0 = 2974.10005817385;
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizer stepNormalizer0 = new StepNormalizer(0, fixedStepHandler0, stepNormalizerMode0);
      highamHall54Integrator0.addStepHandler(stepNormalizer0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      int int0 = 568;
      GillIntegrator gillIntegrator0 = new GillIntegrator((-3752.23092405));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      highamHall54Integrator0.integrate(expandableStatefulODE0, 103.627627267274);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1457.26941), (-1457.26941), (-1457.26941), (-1457.26941));
      highamHall54Integrator0.getOrder();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn("").when(eventHandler0).toString();
      doReturn(260.626, (-1457.26941), 1078.0, 1.0, 234.4950201).when(eventHandler0).g(anyDouble() , any(double[].class));
      highamHall54Integrator0.addEventHandler(eventHandler0, (double) (-344), 0.0, 206);
      highamHall54Integrator0.getEventHandlers();
      GillIntegrator gillIntegrator0 = new GillIntegrator((-2171.642947411654));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter1);
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter1);
      highamHall54Integrator0.getEvaluations();
      try { 
        highamHall54Integrator0.integrate(expandableStatefulODE1, (-1457.26941));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [\uFFFD, \uFFFD], values: [1, 234.495]
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1457.26941), (-1457.26941), (-1457.26941), (-1457.26941));
      highamHall54Integrator0.getEvaluations();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      highamHall54Integrator0.addEventHandler(eventHandler0, (-1457.26941), 2974.10005817385, (-350));
      highamHall54Integrator0.getEventHandlers();
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1457.26941));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1051.4540021, doubleArray0, 2864.03535259503, doubleArray0);
      int int0 = (-837);
      BrentSolver brentSolver0 = new BrentSolver((-837), (-5.902712448725381E-8), 0.0);
      // Undeclared exception!
      try { 
        highamHall54Integrator0.integrate((ExpandableStatefulODE) null, (-4084.57216673458));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, doubleArray0, doubleArray0);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, (-567.36141971), doubleArray0, doubleArray0);
      highamHall54Integrator0.getEvaluations();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn("").when(eventHandler0).toString();
      doReturn(0.0, (double)0, (-1348.7132126381)).when(eventHandler0).g(anyDouble() , any(double[].class));
      highamHall54Integrator0.addEventHandler(eventHandler0, (-567.36141971), 1812.58135049503, (-2612));
      highamHall54Integrator0.getEventHandlers();
      GillIntegrator gillIntegrator0 = new GillIntegrator((-567.36141971));
      GillIntegrator gillIntegrator1 = new GillIntegrator(1249.65117529);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1658.9959150678), doubleArray0, 0.0, doubleArray0);
      BrentSolver brentSolver0 = new BrentSolver((-837), 0.0, 0.10291612148284912);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        highamHall54Integrator0.integrate(expandableStatefulODE0, 1249.65117529);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-2,612) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1457.26941), (-1457.26941), (-1457.26941), (-1457.26941));
      highamHall54Integrator0.getEvaluations();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(";X^NHZ>?1[API;1@P").when(eventHandler0).toString();
      doReturn((-1457.26941), 729.5278601987748, (double)0, (-1457.26941), (double)0).when(eventHandler0).g(anyDouble() , any(double[].class));
      highamHall54Integrator0.addEventHandler(eventHandler0, (-1457.26941), 839.1940649454706, 12);
      highamHall54Integrator0.getEventHandlers();
      GillIntegrator gillIntegrator0 = new GillIntegrator(1.0039138793945312);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      highamHall54Integrator0.integrate(expandableStatefulODE0, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1457.26941), (-1457.26941), (-1457.26941), (-1457.26941));
      highamHall54Integrator0.getEvaluations();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn("").when(eventHandler0).toString();
      highamHall54Integrator0.addEventHandler(eventHandler0, (-1457.26941), 2974.10005817385, (-350));
      highamHall54Integrator0.getEventHandlers();
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1457.26941));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1051.4540021, doubleArray0, 2864.03535259503, doubleArray0);
      BrentSolver brentSolver0 = new BrentSolver((-837), (-5.902712448725381E-8), 0.0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2864.03535259503, 0.0, 2974.10005817385, 0);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 4.547473508864641E-10, doubleArray0, (-729.52786019832), doubleArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double double0 = (-1457.26941);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1457.26941), (-1457.26941), (-1457.26941), (-1457.26941));
      highamHall54Integrator0.getOrder();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn("").when(eventHandler0).toString();
      doReturn((-326.955208452), (-326.955208452), 0.0, (-326.955208452)).when(eventHandler0).g(anyDouble() , any(double[].class));
      highamHall54Integrator0.addEventHandler(eventHandler0, (-1457.26941), 2974.10005817385, (-350));
      highamHall54Integrator0.getEventHandlers();
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1457.26941));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(706).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        highamHall54Integrator0.integrate(expandableStatefulODE0, 0.0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-350) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double double0 = (-1457.26941);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1457.26941), (-1457.26941), (-1457.26941), (-1457.26941));
      highamHall54Integrator0.getEvaluations();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn("").when(eventHandler0).toString();
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      highamHall54Integrator0.addEventHandler(eventHandler0, (-1457.26941), 2974.10005817385, (-350));
      highamHall54Integrator0.getEventHandlers();
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1457.26941));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      highamHall54Integrator0.integrate(expandableStatefulODE0, 0.0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double double0 = 0.0;
      double[] doubleArray0 = new double[0];
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double1 = 875.402;
      int int0 = (-2871);
      MullerSolver mullerSolver0 = new MullerSolver(875.402, (-2871));
      dormandPrince853Integrator0.addEventHandler(eventHandler0, 875.402, 763.8269638321893, (-2871), (UnivariateSolver) mullerSolver0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double double2 = 2974.10005817385;
      double double3 = Double.NaN;
      double[] doubleArray1 = new double[1];
      double double4 = 0.0;
      doubleArray1[0] = 0.0;
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 763.8269638321893, doubleArray0, Double.NaN, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-2905.828279964217));
      double[] doubleArray0 = new double[14];
      doubleArray0[0] = (-2905.828279964217);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1.0), (-1.0), doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(2243).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-2905.828279964217);
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = (-2905.828279964217);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1.0), (-2905.828279964217), doubleArray0, doubleArray1);
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray1, (-2310.8646), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 4,486
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = (-1.6040513288090055E-287);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1.6040513288090055E-287), 0.0, doubleArray0, doubleArray0);
      EventHandler eventHandler0 = null;
      highamHall54Integrator0.addEventHandler((EventHandler) null, (-1.6040513288090055E-287), (double) (-350), (-350));
      highamHall54Integrator0.getEventHandlers();
      GillIntegrator gillIntegrator0 = new GillIntegrator((-350));
      FirstOrderConverter firstOrderConverter0 = null;
      try {
        firstOrderConverter0 = new FirstOrderConverter((SecondOrderDifferentialEquations) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.FirstOrderConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1457.26941), (-1457.26941), (-1457.26941), (-1457.26941));
      highamHall54Integrator0.getEvaluations();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      highamHall54Integrator0.addEventHandler(eventHandler0, (-1457.26941), 2974.10005817385, (-350));
      highamHall54Integrator0.getEventHandlers();
      double double0 = 2864.03535259503;
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1457.26941));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double double1 = 1051.4540021;
      double[] doubleArray0 = new double[0];
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1051.4540021, doubleArray0, 2864.03535259503, doubleArray0);
      BrentSolver brentSolver0 = new BrentSolver((-837), (-5.902712448725381E-8), 0.0);
      try { 
        brentSolver0.solve(0, (UnivariateFunction) null, (-5.902712448725381E-8), (-983.0455869), 1.1373425785132867E221);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, doubleArray0, doubleArray0);
      DormandPrince853Integrator dormandPrince853Integrator1 = new DormandPrince853Integrator(Double.NaN, (-1079.97), doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      dormandPrince853Integrator0.integrate(expandableStatefulODE0, 1920.44688);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NaN;
      doubleArray0[0] = 3496.0286;
      doubleArray0[2] = 3496.0286;
      doubleArray0[3] = 3496.0286;
      doubleArray0[4] = 3496.0286;
      doubleArray0[5] = 3496.0286;
      doubleArray0[6] = 3496.0286;
      doubleArray0[7] = 3496.0286;
      doubleArray0[8] = 3496.0286;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(3496.0286, 3496.0286, 3496.0286, 3496.0286);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      BisectionSolver bisectionSolver0 = new BisectionSolver();
      dormandPrince853Integrator0.addEventHandler(eventHandler0, (-3035.2637432), (-4251.9677933), 16, (UnivariateSolver) bisectionSolver0);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 885;
      doubleArray1[1] = 3496.0286;
      doubleArray1[2] = Double.NaN;
      doubleArray1[3] = (-3035.2637432);
      doubleArray1[4] = (double) 885;
      // Undeclared exception!
      try { 
        dormandPrince853Integrator0.initializeStep(false, 885, doubleArray1, (-3035.2637432), doubleArray1, doubleArray1, doubleArray0, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double double0 = 0.0;
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getOrder();
      EventHandler eventHandler0 = null;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      dormandPrince853Integrator0.addEventHandler((EventHandler) null, 0.0, (double) 8, 8, (UnivariateSolver) regulaFalsiSolver0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double double1 = 2974.10005817385;
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2974.10005817385, doubleArray0, 0.0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 16
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double double0 = (-1286.1337);
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1286.1337));
      int int0 = 701;
      gillIntegrator0.setMaxEvaluations(701);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1286.1337);
      doubleArray0[1] = (double) 701;
      doubleArray0[2] = (double) 701;
      doubleArray0[3] = (double) 701;
      doubleArray0[4] = (-1286.1337);
      doubleArray0[5] = (-1286.1337);
      // Undeclared exception!
      try { 
        gillIntegrator0.computeDerivatives((-1286.1337), doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double double0 = 0.0;
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getOrder();
      EventHandler eventHandler0 = null;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      dormandPrince853Integrator0.addEventHandler((EventHandler) null, 0.0, (double) 8, 8, (UnivariateSolver) regulaFalsiSolver0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double double1 = 2974.10005817385;
      // Undeclared exception!
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2974.10005817385, doubleArray0, 0.0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = Double.NaN;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(Double.NaN, Double.NaN, doubleArray0, doubleArray1);
      highamHall54Integrator0.setInitialStepSize((-4656.403));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      highamHall54Integrator0.addEventHandler(eventHandler0, Double.NaN, Double.NaN, (-1));
      highamHall54Integrator0.setMaxEvaluations((-1));
      highamHall54Integrator0.clearEventHandlers();
      highamHall54Integrator0.getName();
      highamHall54Integrator0.getCurrentSignedStepsize();
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      highamHall54Integrator0.addEventHandler(eventHandler1, Double.NaN, 956.29311807, (-1), (UnivariateSolver) pegasusSolver0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(Double.NaN, (-1068.97441739544), (-8.87285693353063), Double.NaN);
      EventHandler eventHandler2 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      BrentSolver brentSolver0 = new BrentSolver((-4656.403));
      brentSolver0.getEvaluations();
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler2, Double.NaN, 1.0, (-1), (UnivariateSolver) brentSolver0);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double double0 = (-704.205603);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-704.205603);
      doubleArray0[1] = (-704.205603);
      doubleArray0[2] = (-704.205603);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-704.205603), (-704.205603), doubleArray0, doubleArray0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-704.205603), (-704.205603), (-5795.0), (-704.205603));
      dormandPrince853Integrator0.setSafety(101.1344396630744);
      double double1 = (-1576.055823);
      dormandPrince853Integrator0.clearStepHandlers();
      graggBulirschStoerIntegrator0.setOrderControl((-1691), (-1576.055823), (-704.205603));
      FirstOrderDifferentialEquations firstOrderDifferentialEquations0 = null;
      // Undeclared exception!
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) null, (double) (-1691), doubleArray0, (-2710.263982645), doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1926.8, 1926.8, Double.NaN, 1926.8);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.NaN;
      highamHall54Integrator0.getEvaluations();
      highamHall54Integrator0.clearEventHandlers();
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1926.8;
      highamHall54Integrator0.getEvaluations();
      // Undeclared exception!
      try { 
        highamHall54Integrator0.computeDerivatives(Double.NaN, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double double0 = (-3.75);
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-3.75));
      classicalRungeKuttaIntegrator0.clearEventHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-3.75);
      // Undeclared exception!
      try { 
        classicalRungeKuttaIntegrator0.computeDerivatives((-3.75), doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-22.0), (-67.0523456), (-22.0), 0.0);
      graggBulirschStoerIntegrator0.setControlFactors(Double.NaN, Double.NaN, (-22.0), (-22.0));
      graggBulirschStoerIntegrator0.setControlFactors((-67.0523456), 0.0, 0.0, (-22.0));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      BrentSolver brentSolver0 = new BrentSolver(1102.3921);
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (-67.0523456), 2675.52004, (-1755), (UnivariateSolver) brentSolver0);
      assertEquals(22.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double double0 = 2060.05641617;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2060.05641617;
      doubleArray0[1] = 2060.05641617;
      doubleArray0[2] = 2060.05641617;
      doubleArray0[3] = 2060.05641617;
      doubleArray0[4] = 2060.05641617;
      doubleArray0[5] = 2060.05641617;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2060.05641617, 2060.05641617, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2060.05641617, doubleArray0, 2060.05641617, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1926.8, 1926.8, Double.NaN, 1926.8);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.NaN;
      highamHall54Integrator0.getEvaluations();
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1926.8;
      // Undeclared exception!
      try { 
        highamHall54Integrator0.computeDerivatives(Double.NaN, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(2228.5059119, (-3316.4), 0.0, (-193.0));
      String string0 = highamHall54Integrator0.getName();
      assertEquals("Higham-Hall 5(4)", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double double0 = 5.746280211439194;
      double double1 = 1661.3328253213;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(5.746280211439194, 4268.54745577573, 5.746280211439194, 1661.3328253213);
      highamHall54Integrator0.getEvaluations();
      int int0 = 0;
      highamHall54Integrator0.setMaxEvaluations(0);
      highamHall54Integrator0.getName();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(4268.54745577573, 809.45, 4268.54745577573, 0.0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer0 = new StepNormalizer(4268.54745577573, fixedStepHandler0);
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      NordsieckStepInterpolator nordsieckStepInterpolator1 = new NordsieckStepInterpolator(nordsieckStepInterpolator0);
      // Undeclared exception!
      try { 
        stepNormalizer0.handleStep(nordsieckStepInterpolator1, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1926.8, 1926.8, Double.NaN, 1926.8);
      highamHall54Integrator0.setMaxEvaluations(0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.NaN;
      highamHall54Integrator0.getEvaluations();
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 0.0;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(Double.NaN, 1926.8, Double.NaN, 0);
      dormandPrince54Integrator0.getOrder();
      doubleArray0[3] = 1926.8;
      try { 
        highamHall54Integrator0.computeDerivatives(Double.NaN, doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(0.08192320648511571);
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      gillIntegrator0.addStepHandler(dummyStepHandler0);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 246.443911328248;
      doubleArray0[1] = (-376.62480138022);
      doubleArray0[2] = (-376.62480138022);
      doubleArray0[3] = 246.443911328248;
      doubleArray0[4] = (-376.62480138022);
      doubleArray0[5] = 246.443911328248;
      doubleArray0[6] = 246.443911328248;
      doubleArray0[7] = 246.443911328248;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-376.62480138022), 246.443911328248, doubleArray0, doubleArray0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      StepNormalizer stepNormalizer0 = new StepNormalizer((-376.62480138022), fixedStepHandler0, stepNormalizerMode0);
      dormandPrince853Integrator0.addStepHandler(stepNormalizer0);
      assertEquals(246.443911328248, dormandPrince853Integrator0.getMaxStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2352.9313164, (-1.0), 2352.9313164, (-1.0));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2352.9313164;
      doubleArray0[1] = 181.151235182;
      doubleArray0[2] = 0.0;
      dormandPrince853Integrator0.clearStepHandlers();
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-1.0);
      // Undeclared exception!
      try { 
        dormandPrince853Integrator0.computeDerivatives((-1.0), doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-204.079623769842));
      midpointIntegrator0.clearStepHandlers();
      midpointIntegrator0.getCurrentStepStart();
      midpointIntegrator0.getStepHandlers();
      midpointIntegrator0.getMaxEvaluations();
      double[] doubleArray0 = new double[1];
      midpointIntegrator0.getEventHandlers();
      doubleArray0[0] = Double.NaN;
      // Undeclared exception!
      try { 
        midpointIntegrator0.computeDerivatives((-204.079623769842), doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 559.9059;
      doubleArray0[1] = 1.3020833333333333;
      doubleArray0[2] = 1.3020833333333333;
      doubleArray0[3] = 1.3020833333333333;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1.3020833333333333, 559.9059, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getStepHandlers();
      MullerSolver2 mullerSolver2_0 = new MullerSolver2(2974.10005817385);
      dormandPrince853Integrator0.addEventHandler((EventHandler) null, 559.9059, 4467.516107349, 1994, (UnivariateSolver) mullerSolver2_0);
      double double0 = dormandPrince853Integrator0.getCurrentSignedStepsize();
      assertEquals(27.000817406608267, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 3496.0286;
      doubleArray0[2] = 3496.0286;
      doubleArray0[3] = 3496.0286;
      doubleArray0[4] = 3496.0286;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(721.871, 1214.85742234, 1025.9114065, 3496.0286);
      highamHall54Integrator0.addEventHandler((EventHandler) null, 643.373, 721.871, 0);
      HighamHall54Integrator highamHall54Integrator1 = new HighamHall54Integrator(1025.9114065, (-1.0), doubleArray0, doubleArray0);
      highamHall54Integrator1.addEventHandler((EventHandler) null, 951.3883018, (-255.0182), 227);
      assertEquals(1.0, highamHall54Integrator1.getMaxStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1457.26941), (-1457.26941), (-1457.26941), (-1457.26941));
      highamHall54Integrator0.getEventHandlers();
      highamHall54Integrator0.getOrder();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      highamHall54Integrator0.addEventHandler(eventHandler0, (-1457.26941), (-1457.26941), 0);
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      highamHall54Integrator0.addEventHandler(eventHandler1, (-1948.3578), 22.739487099350505, 963);
      assertEquals(5, highamHall54Integrator0.getOrder());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.94;
      doubleArray0[1] = 0.94;
      doubleArray0[2] = 1291.9071317839475;
      doubleArray0[3] = 1291.9071317839475;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 0.94;
      doubleArray0[6] = 394.06293949984655;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.94, 1291.9071317839475, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        highamHall54Integrator0.integrate(expandableStatefulODE0, 1386.17194445444);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 7
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.6510416666666666, 0.0, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.getStepHandlers();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, 0.0, 1294.5);
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 1747);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
  }
}
