/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 00:08:22 GMT 2021
 */

package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import org.apache.commons.math3.analysis.solvers.IllinoisSolver;
import org.apache.commons.math3.analysis.solvers.MullerSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator;
import org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.EulerIntegrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.nonstiff.MidpointIntegrator;
import org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.StepHandler;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.apache.commons.math3.ode.sampling.StepNormalizerBounds;
import org.apache.commons.math3.ode.sampling.StepNormalizerMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegrator_ESTest extends AbstractIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(193.418274, 405.02065268, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 405.02065268, doubleArray0, 405.020652795463, doubleArray0);
      dormandPrince853Integrator0.setStepSizeControl((-814.8831), 4676.326486658855, 9.639780418418697E-8, (double) 0);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 405.020652795463;
      doubleArray1[1] = 405.020652795463;
      doubleArray1[2] = 405.020652795463;
      doubleArray1[3] = 405.02065268;
      doubleArray1[4] = 405.02065268;
      doubleArray1[5] = 405.020652795463;
      doubleArray1[6] = 193.418274;
      doubleArray1[7] = 193.418274;
      doubleArray1[8] = 405.02065268;
      dormandPrince853Integrator0.computeDerivatives(405.020652795463, doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(193.418274, 405.02065268, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-1619.27), 405.02065268).when(eventHandler0).g(anyDouble() , any(double[].class));
      threeEighthesIntegrator0.addEventHandler(eventHandler0, 3074.968674187854, (double) 2136361578, 0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        threeEighthesIntegrator0.integrate(expandableStatefulODE0, 405.02065268);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(6).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-37.993268922513));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0), (-1359.2850561147), 123.29267899622548, (-1.0), 1000.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      threeEighthesIntegrator0.addEventHandler(eventHandler0, 2.269007733883336E282, (-363.52), 2136361578);
      try { 
        threeEighthesIntegrator0.integrate(expandableStatefulODE0, (-85.938499029));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [\uFFFD, \uFFFD], values: [1,000, 1,000]
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-37.993268922513));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      threeEighthesIntegrator0.addEventHandler(eventHandler0, 2.269007733883336E282, (-363.52), 2136361578);
      // Undeclared exception!
      threeEighthesIntegrator0.integrate(expandableStatefulODE0, (-85.938499029));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(1000.0);
      classicalRungeKuttaIntegrator0.getCurrentStepStart();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.BOTH;
      StepNormalizer stepNormalizer0 = new StepNormalizer(861.6082090322889, fixedStepHandler0, stepNormalizerBounds0);
      classicalRungeKuttaIntegrator0.addStepHandler(stepNormalizer0);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      classicalRungeKuttaIntegrator0.integrate(expandableStatefulODE0, 1000.0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(193.418274, 405.02065268, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 405.02065268, doubleArray0, 405.020652795463, doubleArray0);
      dormandPrince853Integrator0.setMinReduction(193.418274);
      dormandPrince853Integrator0.clearEventHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter1);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(405.02065268, 193.418274, 193.418274, 405.02065268);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-2880.352), 1.014756202697754, doubleArray0, doubleArray0);
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(193.418274);
      classicalRungeKuttaIntegrator0.getMaxEvaluations();
      classicalRungeKuttaIntegrator0.getEvaluations();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(3.2099795870407646E-103, 3.2099795870407646E-103, (-783.95426207783), (-783.95426207783));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-783.95426207783);
      doubleArray0[1] = 3.2099795870407646E-103;
      doubleArray0[2] = 3.2099795870407646E-103;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1968.210533878;
      doubleArray1[1] = 2.2737367544323206E-10;
      doubleArray1[2] = 2.2737367544323206E-10;
      doubleArray1[3] = (-783.95426207783);
      doubleArray1[4] = 3673.886096806104;
      dormandPrince853Integrator0.setStepSizeControl(3673.886096806104, 2.2737367544323206E-10, doubleArray0, doubleArray1);
      doubleArray0[3] = 2.2737367544323206E-10;
      dormandPrince853Integrator0.setStepSizeControl(2.2737367544323206E-10, 3.2099795870407646E-103, doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        dormandPrince853Integrator0.integrate((ExpandableStatefulODE) null, (-783.95426207783));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = 405.02065268;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(193.418274, 405.02065268, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.setMinReduction(193.418274);
      dormandPrince853Integrator0.clearEventHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1150).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(405.02065268, 193.418274, 193.418274, 405.02065268);
      double double1 = (-2880.352);
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        dormandPrince853Integrator0.integrate(expandableStatefulODE1, 2962.0041770441253);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2,300 != 0
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(193.418274);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      threeEighthesIntegrator0.integrate(expandableStatefulODE0, 2626.968655951);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = 405.02065268;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(193.418274, 405.02065268, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 405.02065268, doubleArray0, 405.020652795463, doubleArray0);
      dormandPrince853Integrator0.setMinReduction(193.418274);
      dormandPrince853Integrator0.clearEventHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter1);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(405.02065268, 193.418274, 193.418274, 405.02065268);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-2880.352), 1.014756202697754, doubleArray0, doubleArray0);
      highamHall54Integrator0.getOrder();
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (-2880.352));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(193.418274, 193.418274, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.clearEventHandlers();
      dormandPrince853Integrator0.getEventHandlers();
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(193.418274, 2987.285890908082, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.getOrder();
      dormandPrince853Integrator0.getStepHandlers();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(193.418274, 2987.285890908082, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator1 = new GraggBulirschStoerIntegrator(193.418274, 0.44923629829290207, 762.249543589767, 2987.285890908082);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      // Undeclared exception!
      graggBulirschStoerIntegrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter1, 0.44923629829290207, doubleArray0, 762.249543589767, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(193.418274, 193.418274, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.setMinReduction(193.418274);
      dormandPrince853Integrator0.clearEventHandlers();
      dormandPrince853Integrator0.getEventHandlers();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, 4336.816152, 4.547473508864641E-10);
      dormandPrince853Integrator0.clearEventHandlers();
      DormandPrince853Integrator dormandPrince853Integrator1 = new DormandPrince853Integrator((-1326.3), 1885.462, 0.0, (-1522.73));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      dormandPrince853Integrator1.setStepSizeControl((-106.97), 4.547473508864641E-10, (-1326.3), 0.0);
      MullerSolver mullerSolver0 = new MullerSolver((-1.0));
      dormandPrince853Integrator1.addEventHandler(eventHandler0, 4.547473508864641E-10, 4336.816152, 4237, (UnivariateSolver) mullerSolver0);
      dormandPrince853Integrator1.getEventHandlers();
      Collection<StepHandler> collection0 = dormandPrince853Integrator0.getStepHandlers();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(0.0);
      eulerIntegrator0.setMaxEvaluations(63);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(63).when(secondOrderDifferentialEquations0).getDimension();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 63;
      doubleArray0[3] = 2259.798510893528;
      doubleArray0[4] = (-455.0);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 2259.798510893528;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2259.798510893528, 2259.798510893528, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.setMinReduction(648.174634321);
      dormandPrince853Integrator0.clearEventHandlers();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-8034.6635308783), 2626.968655951, doubleArray0, doubleArray0);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-727.712519), (double[]) null, 2259.798510893528, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(193.418274, 193.418274, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.setMinReduction(193.418274);
      dormandPrince853Integrator0.clearEventHandlers();
      dormandPrince853Integrator0.getEventHandlers();
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(193.418274, 2987.285890908082, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.getOrder();
      dormandPrince853Integrator0.getStepHandlers();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(193.418274, 2987.285890908082, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator1 = new GraggBulirschStoerIntegrator(0.0, (-1519.65355438), doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-1519.65355438);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-401.48325138325);
      doubleArray1[5] = (-1519.65355438);
      try { 
        graggBulirschStoerIntegrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-401.48325138325), doubleArray0, 0.0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(193.418274, 193.418274, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.setMinReduction(193.418274);
      dormandPrince853Integrator0.clearEventHandlers();
      dormandPrince853Integrator0.getEventHandlers();
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(193.418274, 2987.285890908082, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.getOrder();
      dormandPrince853Integrator0.getStepHandlers();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(193.418274, 2987.285890908082, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.44923629829290207, doubleArray0, 0.44923629829290207, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-7.5);
      doubleArray0[1] = (-7.5);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1968.210533878, 1968.210533878, (-1575.899747492), 0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      MullerSolver mullerSolver0 = new MullerSolver();
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 1968.210533878, 4.547473508864641E-10, (-3366), (UnivariateSolver) mullerSolver0);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-446.90749136);
      doubleArray1[1] = 2880.3237838999;
      doubleArray1[2] = 1.0;
      graggBulirschStoerIntegrator0.setMaxEvaluations(1529);
      doubleArray1[3] = 1968.210533878;
      doubleArray1[4] = (-1575.899747492);
      doubleArray1[5] = 1526.67;
      doubleArray1[6] = 1.0;
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1.0, doubleArray0, (-7.5), doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(193.418274, 193.418274, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.setMinReduction(193.418274);
      dormandPrince853Integrator0.setInitialStepSize(193.418274);
      dormandPrince853Integrator0.clearEventHandlers();
      dormandPrince853Integrator0.getEventHandlers();
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(193.418274, 2987.285890908082, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 193.418274, doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-446.90749136), doubleArray0, (-2415.118025238), doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(193.418274, 193.418274, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.setMinReduction(193.418274);
      dormandPrince853Integrator0.clearEventHandlers();
      dormandPrince853Integrator0.getEventHandlers();
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(193.418274, 2987.285890908082, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.clearStepHandlers();
      dormandPrince54Integrator0.getOrder();
      dormandPrince853Integrator0.getStepHandlers();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(193.418274, 2987.285890908082, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setStabilityCheck(true, 5, 5, 2987.285890908082);
      graggBulirschStoerIntegrator0.setControlFactors(Double.NaN, 6.536, Double.NaN, 2987.285890908082);
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 5);
      assertEquals(193.418274, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(193.418274, 193.418274, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.setMinReduction(193.418274);
      dormandPrince853Integrator0.clearEventHandlers();
      dormandPrince853Integrator0.getEventHandlers();
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(193.418274, 2987.285890908082, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.getOrder();
      dormandPrince853Integrator0.getStepHandlers();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(193.418274, 2987.285890908082, doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (double) 5, (double) 5, 584);
      graggBulirschStoerIntegrator0.clearStepHandlers();
      graggBulirschStoerIntegrator0.setControlFactors(Double.NaN, 6.536, Double.NaN, 2987.285890908082);
      double double0 = graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
      assertEquals(760.1287265746464, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1801.3298910633723, 1801.3298910633723, 1801.3298910633723, (-85.938499029));
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizer stepNormalizer0 = new StepNormalizer(1801.3298910633723, fixedStepHandler0, stepNormalizerMode0);
      highamHall54Integrator0.addStepHandler(stepNormalizer0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-85.938499029);
      doubleArray0[1] = (-85.938499029);
      doubleArray0[2] = 1801.3298910633723;
      doubleArray0[3] = 1801.3298910633723;
      doubleArray0[4] = (-85.938499029);
      doubleArray0[5] = (-85.938499029);
      doubleArray0[6] = (-85.938499029);
      doubleArray0[7] = (-85.938499029);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-85.938499029), 0.0, doubleArray0, doubleArray0);
      String string0 = graggBulirschStoerIntegrator0.getName();
      assertEquals("Gragg-Bulirsch-Stoer", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(193.418274, 193.418274, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.setMinReduction(193.418274);
      dormandPrince853Integrator0.clearEventHandlers();
      dormandPrince853Integrator0.getEventHandlers();
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(193.418274, 2987.285890908082, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.getOrder();
      dormandPrince853Integrator0.getStepHandlers();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(5, 2987.285890908082, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setStabilityCheck(false, 444, 5, 0.0);
      StepNormalizer stepNormalizer0 = new StepNormalizer((-994.4502468558774), (FixedStepHandler) null);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(611.0, 2.161656025361765E166, (-941.00050902), 4.547473508864641E-10);
      highamHall54Integrator0.addStepHandler(stepNormalizer0);
      String string0 = graggBulirschStoerIntegrator0.getName();
      assertEquals("Gragg-Bulirsch-Stoer", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(0.0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, 0.0, 0.0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      graggBulirschStoerIntegrator0.getCurrentStepStart();
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      double double0 = classicalRungeKuttaIntegrator0.getCurrentStepStart();
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(0.0);
      eulerIntegrator0.getMaxEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(586).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[4];
      double double0 = (-2019.931754184729);
      doubleArray0[0] = (-2019.931754184729);
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) Integer.MAX_VALUE;
      try { 
        eulerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, Double.NaN, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 1,172
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1000.0;
      doubleArray0[1] = 268.5897161097;
      doubleArray0[2] = 1000.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1000.0, 268.5897161097, doubleArray0, doubleArray0);
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizer stepNormalizer0 = new StepNormalizer((-565.94), (FixedStepHandler) null, stepNormalizerMode0);
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      assertEquals(268.5897161097, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-168.3));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 5737.4198;
      doubleArray0[1] = (-168.3);
      doubleArray0[2] = (-168.3);
      doubleArray0[3] = 5737.4198;
      doubleArray0[4] = (-168.3);
      doubleArray0[5] = 5737.4198;
      doubleArray0[6] = 5737.4198;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-168.3), 5737.4198, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.clearEventHandlers();
      int int0 = 0;
      dormandPrince853Integrator0.setMaxEvaluations(0);
      dormandPrince853Integrator0.setStepSizeControl((-168.3), 5.791903296748099, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.setInitialStepSize((-168.3));
      dormandPrince853Integrator0.setMaxGrowth((-168.3));
      dormandPrince853Integrator0.getOrder();
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(8, (-168.3), 5737.4198, doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 138.11394;
      // Undeclared exception!
      try { 
        adamsMoultonIntegrator0.initializeStep(false, 0, doubleArray0, 138.11394, doubleArray1, doubleArray0, doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
      double double0 = threeEighthesIntegrator0.getCurrentSignedStepsize();
      assertEquals(Double.NaN, double0, 0.01);
      
      threeEighthesIntegrator0.getEvaluations();
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 107.0;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(107.0, 107.0, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.setMaxEvaluations(3095);
      int int0 = dormandPrince54Integrator0.getMaxEvaluations();
      assertEquals(3095, int0);
      
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(3095, 107.0, 107.0, 0.0);
      dormandPrince54Integrator0.setStepSizeControl((double) 3095, 0.0, 107.0, 0.0);
      graggBulirschStoerIntegrator0.setStabilityCheck(true, 3095, 3095, 442.4022282454263);
      double double0 = graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
      assertEquals(575.4693736420732, double0, 0.01);
      
      graggBulirschStoerIntegrator0.setInterpolationControl(false, 3095);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 0.0, (double) 3095, (-4517));
      assertEquals(575.4693736420732, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(0.0);
      eulerIntegrator0.getMaxEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[4];
      double double0 = (-2019.931754184729);
      doubleArray0[0] = (-2019.931754184729);
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) Integer.MAX_VALUE;
      try { 
        eulerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, Double.NaN, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator((-2045.01));
      int int0 = eulerIntegrator0.getEvaluations();
      eulerIntegrator0.clearEventHandlers();
      eulerIntegrator0.getEvaluations();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1000.0, 0, (-2045.01), 4390.2748291737);
      graggBulirschStoerIntegrator0.setOrderControl(0, 4390.2748291737, 0.0);
      graggBulirschStoerIntegrator0.getEventHandlers();
      graggBulirschStoerIntegrator0.setMaxEvaluations((-1504));
      graggBulirschStoerIntegrator0.setControlFactors(1000.0, 0.0, 1000.0, (-2453.008175303481));
      graggBulirschStoerIntegrator0.setOrderControl(Integer.MAX_VALUE, (-2453.008175303481), 0.0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2453.008175303481);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-965.2586603051498), 0.0, doubleArray0, doubleArray0);
      int int1 = dormandPrince54Integrator0.getOrder();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-0.6095245427213856));
      threeEighthesIntegrator0.addEventHandler((EventHandler) null, (-0.6095245427213856), (-0.6095245427213856), 926);
      int int0 = threeEighthesIntegrator0.getMaxEvaluations();
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(193.418274, 193.418274, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.setMinReduction(193.418274);
      dormandPrince853Integrator0.clearEventHandlers();
      dormandPrince853Integrator0.getEventHandlers();
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(193.418274, 2987.285890908082, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.getOrder();
      dormandPrince853Integrator0.getStepHandlers();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(193.418274, 2987.285890908082, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setControlFactors(Double.NaN, 6.536, Double.NaN, 2987.285890908082);
      assertEquals(193.418274, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(1789.83877907202);
      midpointIntegrator0.getEvaluations();
      double[] doubleArray0 = new double[1];
      midpointIntegrator0.clearEventHandlers();
      midpointIntegrator0.clearEventHandlers();
      doubleArray0[0] = (-781.34297252589);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-781.34297252589), 1789.83877907202, doubleArray0, doubleArray0);
      highamHall54Integrator0.getOrder();
      midpointIntegrator0.getEvaluations();
      midpointIntegrator0.getStepHandlers();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(3322.40841832, (-565.6), 0.0);
      highamHall54Integrator0.addEventHandler(eventHandler0, (double) 5, (-4343.379), 652, (UnivariateSolver) illinoisSolver0);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double double0 = 0.0;
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(0.0);
      int int0 = 63;
      eulerIntegrator0.setMaxEvaluations(63);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double double1 = 913.0;
      try { 
        eulerIntegrator0.integrate(expandableStatefulODE0, 913.0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (63) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double double0 = 2716.9602943001;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(2716.9602943001, 1968.210533878, 2716.9602943001, 2716.9602943001);
      int int0 = 3204;
      highamHall54Integrator0.setMaxEvaluations(3204);
      highamHall54Integrator0.getEventHandlers();
      highamHall54Integrator0.getOrder();
      highamHall54Integrator0.setMinReduction(2716.9602943001);
      double double1 = 4.547473508864641E-10;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(4.547473508864641E-10, 4.547473508864641E-10, 4.547473508864641E-10, 4.547473508864641E-10);
      dormandPrince54Integrator0.clearEventHandlers();
      dormandPrince54Integrator0.getMaxEvaluations();
      dormandPrince54Integrator0.getOrder();
      dormandPrince54Integrator0.getOrder();
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        highamHall54Integrator0.computeDerivatives(4.547473508864641E-10, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 756.905850049;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 7
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2016.7254607746;
      doubleArray0[1] = 2016.7254607746;
      doubleArray0[2] = 2016.7254607746;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2016.7254607746, 2016.7254607746, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setStabilityCheck(false, (-631), 0, 2016.7254607746);
      graggBulirschStoerIntegrator0.setInitialStepSize((-5.0));
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.computeDerivatives(0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, 0.0, 0.0);
      int int0 = (-1703);
      int int1 = 0;
      graggBulirschStoerIntegrator0.setStabilityCheck(false, (-1703), 0, (-1703));
      boolean boolean0 = true;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 551636.0;
      doubleArray0[1] = (double) (-1703);
      doubleArray0[2] = 2012.24729392234;
      doubleArray0[3] = (double) 0;
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.computeDerivatives(2012.24729392234, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 472.33736742;
      doubleArray0[7] = 0.0;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 0.0, doubleArray0, doubleArray0);
      highamHall54Integrator0.setStepSizeControl((-877.832527554429), 4179.647342088235, 4179.647342088235, 15.279233632882423);
      highamHall54Integrator0.getOrder();
      highamHall54Integrator0.getMaxEvaluations();
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1.0, (-168.7769597821903), (-168.7769597821903), 4048.83);
      int int0 = dormandPrince54Integrator0.getOrder();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
      threeEighthesIntegrator0.getEvaluations();
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-7.5);
      doubleArray0[1] = (-7.5);
      doubleArray0[2] = (-7.5);
      doubleArray0[3] = (-7.5);
      doubleArray0[4] = (-7.5);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-7.5), (-7.5), doubleArray0, doubleArray0);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
  }
}
