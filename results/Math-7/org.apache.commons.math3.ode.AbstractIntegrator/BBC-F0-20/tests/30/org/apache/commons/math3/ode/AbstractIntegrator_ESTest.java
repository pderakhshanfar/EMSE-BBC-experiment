/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 00:28:42 GMT 2021
 */

package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.function.Acos;
import org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver;
import org.apache.commons.math3.analysis.solvers.MullerSolver;
import org.apache.commons.math3.analysis.solvers.PegasusSolver;
import org.apache.commons.math3.analysis.solvers.RiddersSolver;
import org.apache.commons.math3.analysis.solvers.SecantSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.EulerIntegrator;
import org.apache.commons.math3.ode.nonstiff.GillIntegrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.nonstiff.MidpointIntegrator;
import org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator;
import org.apache.commons.math3.ode.sampling.DummyStepHandler;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.apache.commons.math3.ode.sampling.StepNormalizerBounds;
import org.apache.commons.math3.ode.sampling.StepNormalizerMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegrator_ESTest extends AbstractIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(3701.838559156, 113.326549774588, doubleArray0, doubleArray0);
      DormandPrince54Integrator dormandPrince54Integrator1 = new DormandPrince54Integrator(3701.838559156, 3701.838559156, doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      PegasusSolver pegasusSolver0 = new PegasusSolver(3701.838559156);
      dormandPrince54Integrator1.addEventHandler(eventHandler0, 113.326549774588, 113.326549774588, (-417), (UnivariateSolver) pegasusSolver0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      dormandPrince54Integrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 3701.838559156, doubleArray0, 1282.6657289881814, doubleArray0);
      dormandPrince54Integrator1.computeDerivatives(1000.0, doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double double0 = 0.5568217039108276;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.5568217039108276, 0.5568217039108276, 0.5568217039108276, 0.5568217039108276);
      RiddersSolver riddersSolver0 = new RiddersSolver(2404.81, 1171.46830487227);
      dormandPrince54Integrator0.addEventHandler((EventHandler) null, 0.5568217039108276, 0.5568217039108276, Integer.MAX_VALUE, (UnivariateSolver) riddersSolver0);
      int int0 = 44;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(44).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      try { 
        dormandPrince54Integrator0.integrate(expandableStatefulODE0, 0.5568217039108276);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(3701.838559156, 113.326549774588, doubleArray0, doubleArray0);
      MullerSolver mullerSolver0 = new MullerSolver(113.326549774588);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(113.326549774588, 113.326549774588, Double.NaN, 3701.838559156, 0.36222589015960693).when(eventHandler0).g(anyDouble() , any(double[].class));
      int int0 = 2;
      dormandPrince54Integrator0.addEventHandler(eventHandler0, 1234.6926411264542, (double) 2, 1235, (UnivariateSolver) mullerSolver0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double double0 = (-1764.506346);
      double[] doubleArray1 = new double[0];
      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, Double.NaN, doubleArray1, (-437.4053), doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [\uFFFD, \uFFFD], values: [0.362, 0.362]
         //
         verifyException("org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double double0 = 0.0;
      double[] doubleArray0 = new double[0];
      MullerSolver mullerSolver0 = new MullerSolver((-3540.183));
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-3540.183), 2, doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(1.2710331127772166E-8, 7.041568925985714E96, (-875.18), 1.2710331127772166E-8, (-3540.183)).when(eventHandler0).g(anyDouble() , any(double[].class));
      int int0 = 274;
      int int1 = 2;
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
      dormandPrince54Integrator0.addEventHandler(eventHandler0, (double) 2, 3263.59653619987, 274, (UnivariateSolver) bracketingNthOrderBrentSolver0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter1, 1283.66768402053, doubleArray0, 1.0019550323486328, doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (274) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1000.0, 2621.5029, (-1.0), (-1.0));
      graggBulirschStoerIntegrator0.clearStepHandlers();
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1.1102230246251565E-13, 0.0, doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(1.1102230246251565E-13, 1.1102230246251565E-13, 2621.5029, (-1.0)).when(eventHandler0).g(anyDouble() , any(double[].class));
      MullerSolver mullerSolver0 = new MullerSolver(890.0112358160474);
      dormandPrince54Integrator0.addEventHandler(eventHandler0, (-1.0), 1.1102230246251565E-13, (-3329), (UnivariateSolver) mullerSolver0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        dormandPrince54Integrator0.integrate(expandableStatefulODE0, 1000.0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-3,329) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.75, (-3540.183), 0.75, (-3540.183));
      graggBulirschStoerIntegrator0.clearStepHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray1 = new double[0];
      double[] doubleArray2 = new double[0];
      graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray1, 0.75, doubleArray2);
      graggBulirschStoerIntegrator0.clearStepHandlers();
      graggBulirschStoerIntegrator0.setStepSizeControl(0.5568217039108276, 1933.1968433856964, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setOrderControl(2224, (-3540.183), 0.0);
      double double0 = 2.5836901664733887;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(2.5836901664733887, 0.28229647874832153, doubleArray0, doubleArray0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      dormandPrince54Integrator0.integrate(expandableStatefulODE1, 3862.8972609139664);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1000.0, 2621.5029, (-1.0), (-1.0));
      graggBulirschStoerIntegrator0.clearStepHandlers();
      int int0 = (-3329);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1.1102230246251565E-13, 0.0, doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      MullerSolver mullerSolver0 = new MullerSolver(890.0112358160474);
      dormandPrince54Integrator0.addEventHandler(eventHandler0, (-1.0), 1.1102230246251565E-13, (-3329), (UnivariateSolver) mullerSolver0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      // Undeclared exception!
      dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2.2737367544323206E-10, doubleArray0, 1.1102230246251565E-13, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-2618.007018504977), (-1.0), 1.1102230246251565E-13, (-2618.007018504977));
      graggBulirschStoerIntegrator0.clearStepHandlers();
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(2.2737367544323206E-10, (-758.6), doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
      dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2.8421709430404007E-11, doubleArray1, (-5759.0), doubleArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-8.91), 3172.0, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getEventHandlers();
      dormandPrince853Integrator0.getOrder();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 1.2710331127772166E-8, doubleArray0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(8, (-2151.730214), 2.2737367544323206E-10, 1044.6);
      graggBulirschStoerIntegrator0.setOrderControl(8, 8, 3316.935822442);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations2 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(secondOrderDifferentialEquations2).getDimension();
      FirstOrderConverter firstOrderConverter2 = new FirstOrderConverter(secondOrderDifferentialEquations2);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations3 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations3).getDimension();
      FirstOrderConverter firstOrderConverter3 = new FirstOrderConverter(secondOrderDifferentialEquations3);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter1);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1000.0, 1244.035945405589, doubleArray0, doubleArray0);
      try { 
        dormandPrince54Integrator0.integrate(expandableStatefulODE0, 4.961148056969105E-78);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 16 != 0
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.75, (-3540.183), 0.75, (-3540.183));
      graggBulirschStoerIntegrator0.clearStepHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 0.75, doubleArray0);
      graggBulirschStoerIntegrator0.clearStepHandlers();
      graggBulirschStoerIntegrator0.setStepSizeControl(0.5568217039108276, 1933.1968433856964, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setOrderControl(2224, (-3540.183), 0.0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator1 = new GraggBulirschStoerIntegrator((-1074.0), (-1.0), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator1.getEventHandlers();
      graggBulirschStoerIntegrator1.setMaxEvaluations(970);
      graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double double0 = 0.0;
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.75, (-3540.183), 0.75, (-3540.183));
      graggBulirschStoerIntegrator0.clearStepHandlers();
      graggBulirschStoerIntegrator0.setInterpolationControl(true, (-3329));
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-907.485161568503), 6950.80738879068, doubleArray0, doubleArray0);
      DormandPrince853Integrator dormandPrince853Integrator1 = new DormandPrince853Integrator((-907.485161568503), (-3540.183), doubleArray0, doubleArray0);
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      DummyStepHandler.getInstance();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      dormandPrince853Integrator1.addEventHandler(eventHandler0, 6950.80738879068, (-3540.183), (-2273));
      dormandPrince853Integrator1.addStepHandler(dummyStepHandler0);
      dormandPrince853Integrator1.getEventHandlers();
      dormandPrince853Integrator1.getOrder();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator1 = new GraggBulirschStoerIntegrator((-907.485161568503), 9.462629520363307E-57, (-2906.1758), 0.4462870955467224);
      graggBulirschStoerIntegrator1.setOrderControl(2, 3044.695941287352, (-3329));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 8);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 1.0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1311.4467), (-1311.4467), doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.5568217039108276, (-1905.7091091908), 0.5568217039108276, 1680.387603978);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-1311.4467);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-1.1244184344361017E-8);
      double double0 = (-231.0);
      doubleArray1[3] = (-231.0);
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1905.7091091908), doubleArray0, (-1.1244184344361017E-8), doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = 252.3845032147;
      double double1 = (-967.29352715);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(252.3845032147, (-967.29352715), 0.5568217039108276, (-86.347440439));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, Double.NaN, doubleArray0, (-86.347440439), doubleArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1311.4467), (-1311.4467), doubleArray0, doubleArray0);
      highamHall54Integrator0.getEventHandlers();
      highamHall54Integrator0.clearEventHandlers();
      highamHall54Integrator0.setStepSizeControl((-1311.4467), (-1311.4467), doubleArray0, doubleArray0);
      highamHall54Integrator0.getEventHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1586).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        highamHall54Integrator0.integrate(expandableStatefulODE0, 2.0829952491625585E-8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3,172 != 0
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.75, (-3540.183), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setInterpolationControl(true, (-3329));
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-907.485161568503), 6950.80738879068, doubleArray0, doubleArray0);
      DormandPrince853Integrator dormandPrince853Integrator1 = new DormandPrince853Integrator((-907.485161568503), (-3540.183), doubleArray0, doubleArray0);
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      dormandPrince853Integrator1.addStepHandler(dummyStepHandler0);
      graggBulirschStoerIntegrator0.setStepSizeControl((-364.93022192278), (double) (-3329), doubleArray0, doubleArray0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator1 = new GraggBulirschStoerIntegrator(0.0, 6950.80738879068, (-699.7586217809), (-1074.0));
      graggBulirschStoerIntegrator1.setOrderControl(333, (-1300.233), 6950.80738879068);
      graggBulirschStoerIntegrator1.getEventHandlers();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator2 = new GraggBulirschStoerIntegrator((-3368.770875225192), 6950.80738879068, (-1300.233), (-1074.0));
      graggBulirschStoerIntegrator2.setMaxEvaluations(333);
      graggBulirschStoerIntegrator1.getCurrentSignedStepsize();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1.1776625988228244E-9, 1.1409211158752441, 1.1776625988228244E-9, (-2631.0));
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1.1409211158752441, (-2631.0), (-3083.21), 0.0);
      dormandPrince853Integrator0.setStepSizeControl(0.7777777777777778, 1684.4751, 1.1409211158752441, 1.1102230246251565E-13);
      dormandPrince853Integrator0.getOrder();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2.2737367544323206E-10, (-1.0), (-2072.5963254938), 1.1102230246251565E-13);
      graggBulirschStoerIntegrator0.setMaxEvaluations(8);
      graggBulirschStoerIntegrator0.getEventHandlers();
      graggBulirschStoerIntegrator0.setOrderControl(8, (-2863.9427707), 0.0);
      graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 8;
      doubleArray0[1] = (-3083.21);
      doubleArray0[2] = 1.1776625988228244E-9;
      doubleArray0[3] = (-3083.21);
      doubleArray0[4] = (-2072.5963254938);
      doubleArray0[5] = 1.1102230246251565E-13;
      // Undeclared exception!
      try { 
        dormandPrince853Integrator0.computeDerivatives((-2863.9427707), doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double double0 = (-1026.297);
      double double1 = (-1162.0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-2090.962181408), (-332.1648273), (-1026.297), (-1162.0));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.getCompleteState();
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.LAST;
      StepNormalizer stepNormalizer0 = new StepNormalizer(2.2737367544323206E-10, fixedStepHandler0, stepNormalizerMode0, stepNormalizerBounds0);
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (-1026.297));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 842.1566182, 842.1566182, 41.3535611599);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      dormandPrince54Integrator0.integrate(expandableStatefulODE0, 1.0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1400.09305;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 0.0, doubleArray0, doubleArray0);
      highamHall54Integrator0.setMaxEvaluations(229);
      highamHall54Integrator0.setMaxEvaluations(0);
      highamHall54Integrator0.setStepSizeControl(1.1102230246251565E-13, 1400.09305, doubleArray0, doubleArray0);
      highamHall54Integrator0.clearEventHandlers();
      double double0 = (-1.0);
      double double1 = (-4939.45592833);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1.0), 0.0, 1.1102230246251565E-13, (-4939.45592833));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 1043.68);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double double0 = (-1026.297);
      double double1 = (-2090.962181408);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-2090.962181408), (-332.1648273), (-1026.297), (-1162.0));
      double double2 = (-1.0);
      double[] doubleArray0 = new double[4];
      double double3 = Double.NaN;
      FirstOrderDifferentialEquations firstOrderDifferentialEquations0 = null;
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) null, (double) (-1932), doubleArray0, Double.NaN, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator((-1.0));
      eulerIntegrator0.getStepHandlers();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      eulerIntegrator0.setMaxEvaluations((-3329));
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      eulerIntegrator0.addEventHandler(eventHandler1, (-1035.482251), 67.0805673, 5);
      eulerIntegrator0.setMaxEvaluations(5);
      eulerIntegrator0.addEventHandler(eventHandler0, 0.0, 5.554964922539782, 0);
      eulerIntegrator0.clearEventHandlers();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.5568217039108276, (-1131.3022741), (-1035.482251), 1544.466188);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 458.376);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      double double0 = 3172.0;
      doubleArray0[0] = 3172.0;
      doubleArray0[1] = 2131.6353648812;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2131.6353648812, 2131.6353648812, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(699).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 3172.0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 1,398
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double double0 = (-1311.4467);
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1311.4467), (-1311.4467), doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double double1 = 1055.2;
      double double2 = 1.1102230246251565E-13;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1311.4467), 1.0, 1055.2, 1.1102230246251565E-13);
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1055.2, doubleArray0, 1055.2, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1.1102230246251565E-13, 1.1102230246251565E-13, (-1.89333199110902E-8), 703.5907);
      highamHall54Integrator0.clearStepHandlers();
      Collection<EventHandler> collection0 = highamHall54Integrator0.getEventHandlers();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(3172.0, 0.75, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.5568217039108276, doubleArray0, 0.0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double double0 = 0.75;
      double double1 = 1343.7721534;
      double double2 = (-265.88673);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.75, 1343.7721534, 1343.7721534, (-265.88673));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.getCompleteState();
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 0.75);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-2267.118357488), 0.5568217039108276, 0.0, 0.5568217039108276);
      dormandPrince853Integrator0.getStepHandlers();
      dormandPrince853Integrator0.getEventHandlers();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.5568217039108276;
      doubleArray0[2] = (-2267.118357488);
      doubleArray0[3] = (-2267.118357488);
      doubleArray0[4] = 0.5568217039108276;
      doubleArray0[5] = 0.5568217039108276;
      doubleArray0[6] = (-2267.118357488);
      doubleArray0[7] = 0.5568217039108276;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-2267.118357488), 0.0, doubleArray0, doubleArray0);
      highamHall54Integrator0.getOrder();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(551.9101, 0.5568217039108276, 0.5568217039108276, (-308.3146));
      graggBulirschStoerIntegrator0.setOrderControl((-1607), (-1607), 0.0);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 0.0, doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      dormandPrince54Integrator0.addEventHandler(eventHandler0, 0.0, 0.0, 4590);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 589.4689166605139, 0.0, (-1.0));
      highamHall54Integrator0.setInitialStepSize(0.0);
      highamHall54Integrator0.getOrder();
      dormandPrince54Integrator0.getStepHandlers();
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.0, fixedStepHandler0);
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      // Undeclared exception!
      try { 
        stepNormalizer0.handleStep(nordsieckStepInterpolator0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double double0 = (-4.422011983080043);
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator((-4.422011983080043));
      int int0 = 136;
      eulerIntegrator0.clearEventHandlers();
      eulerIntegrator0.setMaxEvaluations(136);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.0, fixedStepHandler0);
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      // Undeclared exception!
      try { 
        stepNormalizer0.handleStep(nordsieckStepInterpolator0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double double0 = 177.3;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1.1102230246251565E-13, 0.75, (-1026.297), 177.3);
      int int0 = 6;
      highamHall54Integrator0.setMaxEvaluations(6);
      highamHall54Integrator0.setMaxEvaluations(229);
      double[] doubleArray0 = new double[0];
      highamHall54Integrator0.setStepSizeControl((-766.2), 2.2689924240112305, doubleArray0, doubleArray0);
      highamHall54Integrator0.clearEventHandlers();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-766.2), 1.1102230246251565E-13, (-745.198248), (-83.36));
      FirstOrderConverter firstOrderConverter0 = null;
      try {
        firstOrderConverter0 = new FirstOrderConverter((SecondOrderDifferentialEquations) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.FirstOrderConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 195.6256;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 0.0, 195.6256, 0.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double2 = 1366.88991;
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double3 = 112847.0;
      double double4 = (-1.324889724104E12);
      int int0 = 0;
      dormandPrince54Integrator0.getEvaluations();
      SecantSolver secantSolver0 = new SecantSolver();
      int int1 = 1797;
      double[] doubleArray0 = new double[4];
      Acos acos0 = new Acos();
      try { 
        secantSolver0.solve(973, (UnivariateFunction) acos0, 62.5, 0.0, (-2673.12));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [62.5, 0]
         //
         verifyException("org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-4492.48), (-4492.48), (-4492.48), 0.0);
      dormandPrince54Integrator0.getEvaluations();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-4492.48);
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(Double.NaN, 0.0, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setControlFactors((-43.53345659001114), (-4492.48), 178.38, (-4492.48));
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = Double.NaN;
      doubleArray0[8] = Double.NaN;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(Double.NaN, Double.NaN, doubleArray0, doubleArray0);
      String string0 = highamHall54Integrator0.getName();
      assertEquals("Higham-Hall 5(4)", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double double0 = (-1.0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-5345.20213);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-5345.20213);
      doubleArray0[4] = (-5345.20213);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = (-5345.20213);
      doubleArray1[2] = (-5345.20213);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1.0), (-5345.20213), doubleArray0, doubleArray1);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = (-5345.20213);
      doubleArray2[1] = (-1.0);
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1.0), doubleArray2, (-1.0), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(939.0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 939.0;
      doubleArray0[1] = 939.0;
      doubleArray0[2] = (-896.40827974976);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(939.0, (-896.40827974976), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setInitialStepSize((-896.40827974976));
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer0 = new StepNormalizer(939.0, fixedStepHandler0);
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 1917);
      stepNormalizer0.init((-2125.96238), doubleArray0, (-2125.96238));
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      threeEighthesIntegrator0.addEventHandler(eventHandler0, (-896.40827974976), 939.0, 0);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(3281.1153991723695);
      midpointIntegrator0.getEvaluations();
      double double0 = midpointIntegrator0.getCurrentStepStart();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double double0 = 0.0;
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
      threeEighthesIntegrator0.getCurrentStepStart();
      threeEighthesIntegrator0.getMaxEvaluations();
      double[] doubleArray0 = new double[8];
      threeEighthesIntegrator0.getEventHandlers();
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 2757.4;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = Double.NaN;
      // Undeclared exception!
      try { 
        threeEighthesIntegrator0.computeDerivatives(Integer.MAX_VALUE, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(842.1566182, (-1.0), 6.865714679174435E-165, 6.865714679174435E-165);
      int int0 = graggBulirschStoerIntegrator0.getMaxEvaluations();
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1024.2778);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1024.2778);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1024.2778);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 3000.0;
      doubleArray1[1] = (-1024.2778);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-1024.2778);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-1024.2778), 0.0, doubleArray0, doubleArray1);
      // Undeclared exception!
      try { 
        dormandPrince54Integrator0.computeDerivatives(0.0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-641.3695897174581), 0.0, (-641.3695897174581), (-4699.5919));
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      graggBulirschStoerIntegrator0.addStepHandler(dummyStepHandler0);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(0.0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.BOTH;
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.0, fixedStepHandler0, stepNormalizerMode0, stepNormalizerBounds0);
      gillIntegrator0.addStepHandler(stepNormalizer0);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1000.0, 664.771933528616, 664.771933528616, (-5299.218));
      graggBulirschStoerIntegrator0.setStabilityCheck(true, 223, 0, 0.0);
      graggBulirschStoerIntegrator0.getEventHandlers();
      graggBulirschStoerIntegrator0.setOrderControl((-2176), (-1738.0678), (-0.4957589496572502));
      assertEquals(1000.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1400.09305;
      doubleArray0[2] = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1400.09305, 0.0, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setInterpolationControl(true, (-1932));
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1932), 621.79229678946, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getEventHandlers();
      dormandPrince853Integrator0.getOrder();
      graggBulirschStoerIntegrator0.setOrderControl(8, (-154.18974869023643), 14.34375);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 793.1406205060853);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 3
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(808.7897718236);
      midpointIntegrator0.addEventHandler((EventHandler) null, (-227.0), (-227.0), 1);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-3230.35771857262);
      doubleArray0[1] = (-3230.35771857262);
      doubleArray0[2] = (-3230.35771857262);
      doubleArray0[3] = (-3230.35771857262);
      doubleArray0[4] = (-3230.35771857262);
      doubleArray0[5] = (-3230.35771857262);
      doubleArray0[6] = (-3230.35771857262);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-3230.35771857262), (-3230.35771857262), doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      SecantSolver secantSolver0 = new SecantSolver(0.0);
      dormandPrince853Integrator0.addEventHandler(eventHandler0, (-3230.35771857262), (-3230.35771857262), 1, (UnivariateSolver) secantSolver0);
      assertEquals(0.0, secantSolver0.getMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(15.279233632882423, 0.0, 1631.1, 852.0214202);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
  }
}
