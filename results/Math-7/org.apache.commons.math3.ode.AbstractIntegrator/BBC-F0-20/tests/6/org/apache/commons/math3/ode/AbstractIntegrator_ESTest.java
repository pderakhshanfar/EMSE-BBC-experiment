/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 23:49:33 GMT 2021
 */

package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.function.Inverse;
import org.apache.commons.math3.analysis.solvers.AllowedSolution;
import org.apache.commons.math3.analysis.solvers.BrentSolver;
import org.apache.commons.math3.analysis.solvers.IllinoisSolver;
import org.apache.commons.math3.analysis.solvers.MullerSolver;
import org.apache.commons.math3.analysis.solvers.PegasusSolver;
import org.apache.commons.math3.analysis.solvers.SecantSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator;
import org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator;
import org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.EulerIntegrator;
import org.apache.commons.math3.ode.nonstiff.GillIntegrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.nonstiff.MidpointIntegrator;
import org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.StepHandler;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.apache.commons.math3.ode.sampling.StepNormalizerBounds;
import org.apache.commons.math3.ode.sampling.StepNormalizerMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegrator_ESTest extends AbstractIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double double0 = (-973.160122);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(464.26455966611);
      threeEighthesIntegrator0.getMaxEvaluations();
      // Undeclared exception!
      threeEighthesIntegrator0.integrate(expandableStatefulODE0, (-973.160122));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-976.9258918029484));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      doReturn((-1037.1718091934), 0.0, 0.0, (-976.9258918029484), 2539.3121304692736).when(eventHandler0).g(anyDouble() , any(double[].class));
      threeEighthesIntegrator0.addEventHandler(eventHandler0, (-976.9258918029484), (-196.66999159), 713);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(713).when(secondOrderDifferentialEquations0).getDimension();
      threeEighthesIntegrator0.getEventHandlers();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      threeEighthesIntegrator0.integrate(expandableStatefulODE0, 208.0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(7, (-1536.8795580824417), 7, 7, (-1536.8795580824417));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      // Undeclared exception!
      try { 
        adamsBashforthIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2364.06924, doubleArray0, 2.965546585110978E236, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one column
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(1272.1);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double0 = 4172.99360647276;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double double1 = (-3.24981577480893E-27);
      double double2 = (-2.6832941696716294E-8);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(3034.0, (-7.592155950645605E-8), (-2.6832941696716294E-8), (-2406.240709383));
      double double3 = (-1.9589778310104216E-74);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1.9589778310104216E-74), doubleArray0, (-2414.70126553), doubleArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-973.160122));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(secondOrderDifferentialEquations0).getDimension();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-973.160122);
      doubleArray0[1] = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-973.160122), 0.0, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.clearEventHandlers();
      graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator1 = new GraggBulirschStoerIntegrator(0.0, 2.2737367544323206E-10, (-973.160122), (-3.24981577480893E-27));
      try { 
        graggBulirschStoerIntegrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-973.160122), doubleArray0, 2.2737367544323206E-10, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 10
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(1272.1);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      BrentSolver brentSolver0 = new BrentSolver();
      threeEighthesIntegrator0.addEventHandler(eventHandler0, 1272.1, 4172.99360647276, (-1379), (UnivariateSolver) brentSolver0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime((-1379));
      try { 
        threeEighthesIntegrator0.integrate(expandableStatefulODE0, (double) (-1379));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.95;
      doubleArray0[1] = 0.95;
      doubleArray0[2] = 0.95;
      doubleArray0[3] = 0.95;
      PegasusSolver pegasusSolver0 = new PegasusSolver((-1416.5697032049), 0.95);
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(1000.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      threeEighthesIntegrator0.addEventHandler(eventHandler0, (double) (-370), (-1972.9935959), (-370), (UnivariateSolver) pegasusSolver0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime((-2034.0));
      threeEighthesIntegrator0.integrate(expandableStatefulODE0, 1000.0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-973.160122));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(16).when(secondOrderDifferentialEquations0).getDimension();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((double)16, 0.0, (-1428.1), 1.3234889800848443E-20, (double)16).when(eventHandler0).g(anyDouble() , any(double[].class));
      PegasusSolver pegasusSolver0 = new PegasusSolver(1.3234889800848443E-20, (-973.160122));
      threeEighthesIntegrator0.addEventHandler(eventHandler0, (-973.160122), (-973.160122), 16, (UnivariateSolver) pegasusSolver0);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        threeEighthesIntegrator0.integrate(expandableStatefulODE0, (-973.160122));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [\uFFFD, \uFFFD], values: [16, 16]
         //
         verifyException("org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-973.160122));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(667).when(secondOrderDifferentialEquations0).getDimension();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-973.160122), 7.592155950645605E-8).when(eventHandler0).g(anyDouble() , any(double[].class));
      PegasusSolver pegasusSolver0 = new PegasusSolver(1000.0, (-973.160122));
      threeEighthesIntegrator0.addEventHandler(eventHandler0, (-973.160122), (-973.160122), (-370), (UnivariateSolver) pegasusSolver0);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        threeEighthesIntegrator0.integrate(expandableStatefulODE0, (-973.160122));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-370) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.95;
      doubleArray0[1] = 0.95;
      doubleArray0[2] = 0.95;
      doubleArray0[3] = 0.95;
      doubleArray0[4] = 0.95;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      int int0 = 7;
      double double0 = 4740.957619132788;
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(7, 1148.798, 0.95, 4740.957619132788, 0.95);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(7).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.BOTH;
      StepNormalizer stepNormalizer0 = new StepNormalizer(4740.957619132788, fixedStepHandler0, stepNormalizerMode0, stepNormalizerBounds0);
      adamsBashforthIntegrator0.addStepHandler(stepNormalizer0);
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter1);
      double double1 = (-1354.67);
      // Undeclared exception!
      try { 
        adamsBashforthIntegrator0.integrate(expandableStatefulODE0, 0.95);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one column
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double double0 = 1000.0;
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1000.0, 1000.0, doubleArray0, doubleArray0);
      int int0 = Integer.MAX_VALUE;
      graggBulirschStoerIntegrator0.setStabilityCheck(true, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (-2847.3), (-3948.0101), Integer.MAX_VALUE);
      double double1 = 2.1252856254577637;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator1 = new GraggBulirschStoerIntegrator(2.1252856254577637, (-2847.3), 1000.0, 2.1252856254577637);
      graggBulirschStoerIntegrator1.clearEventHandlers();
      graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      graggBulirschStoerIntegrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-3.24981577480893E-27), doubleArray0, (-7.592155950645605E-8), doubleArray0);
      double double2 = 0.0;
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = null;
      try {
        adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(1, 0.0, (-1419.21547027087), (double[]) null, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1000.0, 1000.0, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setStabilityCheck(false, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double0 = (-2847.3);
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler1, (-4089.3664375980616), 1000.0, (-679));
      graggBulirschStoerIntegrator0.clearEventHandlers();
      graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1.0), doubleArray0, 207.0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.95;
      doubleArray0[1] = 0.95;
      doubleArray0[2] = 0.95;
      doubleArray0[3] = 0.95;
      doubleArray0[4] = 0.95;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(7, 1148.798, 0.95, 4740.957619132788, 0.95);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      try { 
        adamsBashforthIntegrator0.integrate(expandableStatefulODE0, (-1354.67));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one column
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(0.125);
      classicalRungeKuttaIntegrator0.getMaxEvaluations();
      classicalRungeKuttaIntegrator0.getStepHandlers();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      doubleArray0[2] = 0.125;
      doubleArray0[3] = 0.125;
      doubleArray0[4] = (double) Integer.MAX_VALUE;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.125, 0.125, 0.125, 0.125);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      MullerSolver mullerSolver0 = new MullerSolver();
      mullerSolver0.getEvaluations();
      dormandPrince853Integrator0.addEventHandler(eventHandler0, 0.125, (-3015.53054456), 695, (UnivariateSolver) mullerSolver0);
      dormandPrince853Integrator0.getOrder();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      dormandPrince853Integrator0.integrate(expandableStatefulODE0, 623.86523989948);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1000.0, 1000.0, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setStabilityCheck(false, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (-2847.3), (-2847.3), Integer.MAX_VALUE);
      graggBulirschStoerIntegrator0.clearEventHandlers();
      graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(4).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) Integer.MAX_VALUE;
      doubleArray1[1] = 1000.0;
      doubleArray1[2] = 1000.0;
      doubleArray1[3] = 207.0;
      doubleArray1[4] = 1000.0;
      double double0 = (-941.798);
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-941.798), doubleArray1, 207.0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 0
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1000.0, 1000.0, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setStabilityCheck(false, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (-2847.3), (-2847.3), Integer.MAX_VALUE);
      graggBulirschStoerIntegrator0.clearEventHandlers();
      graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(3862).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) Integer.MAX_VALUE;
      doubleArray1[1] = 1000.0;
      doubleArray1[2] = 1000.0;
      doubleArray1[3] = 207.0;
      doubleArray1[4] = 1000.0;
      doubleArray1[5] = (double) Integer.MAX_VALUE;
      doubleArray1[6] = (-480.509);
      doubleArray1[7] = (-2847.3);
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-480.509), doubleArray0, 1684.49174, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 7,724
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-70.313837);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 0.0, (-70.313837), 0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(2417).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[4];
      highamHall54Integrator0.setMinReduction((-1200.4133));
      doubleArray0[0] = (-70.313837);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-70.313837);
      doubleArray0[3] = 0.0;
      double double2 = 1000.0;
      try { 
        highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 1000.0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 4,834
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double double0 = 0.0;
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn("").when(eventHandler0).toString();
      threeEighthesIntegrator0.getMaxEvaluations();
      threeEighthesIntegrator0.addEventHandler(eventHandler0, 0.0, 0.0, 0);
      threeEighthesIntegrator0.clearStepHandlers();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, 1.0, 0.0);
      threeEighthesIntegrator0.setMaxEvaluations(0);
      threeEighthesIntegrator0.getEventHandlers();
      graggBulirschStoerIntegrator0.getMaxEvaluations();
      double double1 = (-1873.092);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = (double) 0;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-1873.092);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (-1873.092);
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (double) Integer.MAX_VALUE;
      doubleArray1[7] = (double) 0;
      doubleArray1[8] = (double) 0;
      graggBulirschStoerIntegrator0.setMaxEvaluations(5);
      try { 
        threeEighthesIntegrator0.computeDerivatives(1.0, doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(0.125);
      classicalRungeKuttaIntegrator0.getMaxEvaluations();
      classicalRungeKuttaIntegrator0.getStepHandlers();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      doubleArray0[2] = 0.125;
      doubleArray0[3] = 0.125;
      doubleArray0[4] = (double) Integer.MAX_VALUE;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.125, 0.125, doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      MullerSolver mullerSolver0 = new MullerSolver();
      mullerSolver0.getEvaluations();
      dormandPrince853Integrator0.addEventHandler(eventHandler0, 0.125, (-3015.53054456), 695, (UnivariateSolver) mullerSolver0);
      dormandPrince853Integrator0.getOrder();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-2315.671), 752.23, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setOrderControl(184, (-4010.0), 0.0);
      graggBulirschStoerIntegrator0.setControlFactors(8, 752.23, 752.23, (-915.7));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      classicalRungeKuttaIntegrator0.integrate(expandableStatefulODE0, 0.0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, doubleArray0, doubleArray0);
      int int0 = 0;
      graggBulirschStoerIntegrator0.setStepSizeControl(1.0, (-698.98126572326), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.clearStepHandlers();
      graggBulirschStoerIntegrator0.setOrderControl(0, 0.0, 1.0);
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.integrate((ExpandableStatefulODE) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.037037037037037035, (-3146.513575116671), (-3146.513575116671), (-3146.513575116671));
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, (-3146.513575116671), (-6065.40891129), 1448.296021);
      graggBulirschStoerIntegrator0.setControlFactors(1882.9366414513, 1.0, (-6065.40891129), 1448.296021);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.125, fixedStepHandler0, stepNormalizerMode0);
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      dormandPrince54Integrator0.clearStepHandlers();
      graggBulirschStoerIntegrator0.getName();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-3146.513575116671);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-1834.829163);
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.computeDerivatives((-3146.513575116671), doubleArray0, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1090.7747346189644, Double.NaN, 1456.9, 356.5953);
          SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
          doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
          FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
          ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
          // Undeclared exception!
          graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 356.5953);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1861.528));
      gillIntegrator0.getMaxEvaluations();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1861.528), 0.2222222222222222, (-1861.528), (-876.26970658));
      int int0 = 5;
      graggBulirschStoerIntegrator0.setStabilityCheck(false, 5, 5, 0.0);
      graggBulirschStoerIntegrator0.setStabilityCheck(false, 5, 5, Double.NaN);
      StepHandler stepHandler0 = null;
      graggBulirschStoerIntegrator0.addStepHandler((StepHandler) null);
      gillIntegrator0.getName();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1861.528);
      doubleArray0[1] = (-1298.7815927865458);
      doubleArray0[2] = (-1861.528);
      doubleArray0[3] = (-1861.528);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) Integer.MAX_VALUE;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = Double.NaN;
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(5, (-1298.7815927865458), 0.0, doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        adamsMoultonIntegrator0.integrate((ExpandableStatefulODE) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(0.0);
      eulerIntegrator0.addStepHandler((StepHandler) null);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(554.5340185237, 554.5340185237, 554.5340185237, 1000.0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.LAST;
      StepNormalizer stepNormalizer0 = new StepNormalizer(1.0E-10, (FixedStepHandler) null, stepNormalizerBounds0);
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      StepNormalizerBounds stepNormalizerBounds1 = StepNormalizerBounds.NEITHER;
      StepNormalizer stepNormalizer1 = new StepNormalizer(1000.0, fixedStepHandler0, stepNormalizerBounds1);
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer1);
      graggBulirschStoerIntegrator0.getName();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 554.5340185237, 1000.0, (-2098), (UnivariateSolver) null);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double double0 = 0.0;
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      threeEighthesIntegrator0.getMaxEvaluations();
      threeEighthesIntegrator0.addEventHandler(eventHandler0, 0.0, 0.0, 0);
      threeEighthesIntegrator0.clearStepHandlers();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, 1.0, 0.0);
      threeEighthesIntegrator0.setMaxEvaluations(0);
      threeEighthesIntegrator0.getEventHandlers();
      graggBulirschStoerIntegrator0.getMaxEvaluations();
      double double1 = (-1873.092);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = (double) 0;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-1873.092);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (-1873.092);
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (double) Integer.MAX_VALUE;
      doubleArray1[7] = (double) 0;
      doubleArray1[8] = (double) 0;
      try { 
        threeEighthesIntegrator0.computeDerivatives(1.0, doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-973.160122));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1.1368683772161603E-10;
      doubleArray0[1] = (-973.160122);
      doubleArray0[2] = (-1245.204158844);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1000.0, 1.1368683772161603E-10, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.setMaxEvaluations(8);
      int int0 = dormandPrince853Integrator0.getOrder();
      int int1 = dormandPrince853Integrator0.getEvaluations();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-973.160122));
      double double0 = threeEighthesIntegrator0.getCurrentSignedStepsize();
      double double1 = threeEighthesIntegrator0.getCurrentStepStart();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(1.0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1.0, 1.0, 1.0, 1.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 0.0, 0.0, 313);
      graggBulirschStoerIntegrator0.setControlFactors((-1487.9978687), 1.0, (-232.824187), 0.0);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-68.06339427), (-1487.9978687), 1.0, 1749.049);
      dormandPrince853Integrator0.getOrder();
      graggBulirschStoerIntegrator0.setControlFactors((-68.06339427), 8, (-1487.9978687), 0.0);
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      threeEighthesIntegrator0.addEventHandler(eventHandler1, 0.0, (-11.595793324188385), 8);
      dormandPrince853Integrator0.getOrder();
      EventHandler eventHandler2 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      dormandPrince853Integrator0.addEventHandler(eventHandler2, (-903.9455214772969), 0.0, 313, (UnivariateSolver) pegasusSolver0);
      graggBulirschStoerIntegrator0.getName();
      EventHandler eventHandler3 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler3, (-1918.925), (-1918.925), 8, (UnivariateSolver) null);
      threeEighthesIntegrator0.getCurrentStepStart();
      EventHandler eventHandler4 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      dormandPrince853Integrator0.addEventHandler(eventHandler4, (-2752.256858003533), 1749.049, 3194);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-973.160122));
      threeEighthesIntegrator0.getStepHandlers();
      threeEighthesIntegrator0.getName();
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-1.0));
      int int0 = (-281);
      threeEighthesIntegrator0.clearStepHandlers();
      threeEighthesIntegrator0.setMaxEvaluations((-281));
      threeEighthesIntegrator0.getEventHandlers();
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = null;
      try {
        adamsBashforthIntegrator0 = new AdamsBashforthIntegrator((-1798), 0.6, 151.0257654225, (-4547.6058697912), (-1582.3817781));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // multistep method needs at least -1,798 previous steps, got 2
         //
         verifyException("org.apache.commons.math3.ode.MultistepIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1021.0, 1021.0, 0.0012326388888888888, 1021.0);
      graggBulirschStoerIntegrator0.getStepHandlers();
      graggBulirschStoerIntegrator0.clearStepHandlers();
      graggBulirschStoerIntegrator0.clearStepHandlers();
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0012326388888888888, (-3058.4), (-1823.4940387), (-1823.4940387));
      int int0 = dormandPrince54Integrator0.getOrder();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(0.125);
      classicalRungeKuttaIntegrator0.getEventHandlers();
      int int0 = classicalRungeKuttaIntegrator0.getMaxEvaluations();
      assertEquals(Integer.MAX_VALUE, int0);
      
      classicalRungeKuttaIntegrator0.getStepHandlers();
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-1.0));
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(0.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double0 = 0.0;
      double double1 = (-643.96758965048);
      classicalRungeKuttaIntegrator0.getEventHandlers();
      int int0 = Integer.MAX_VALUE;
      double double2 = (-128.787547);
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-128.787547), 0.0);
      Inverse inverse0 = new Inverse();
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(1720, (UnivariateFunction) inverse0, (-2338.4889972378), 0.0, allowedSolution0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (1,720) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.94);
      threeEighthesIntegrator0.getEvaluations();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.94;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.94;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (-1258.768);
      doubleArray0[6] = (-1416.1);
      doubleArray0[7] = 1614.99166;
      doubleArray0[8] = (-1258.768);
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = null;
      try {
        adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(0, 0, (-1258.768), doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one row
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(2.382468931778144);
      classicalRungeKuttaIntegrator0.getEvaluations();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.1521609496625161, 2.382468931778144, 0.1521609496625161, 2.382468931778144);
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.integrate((ExpandableStatefulODE) null, 2.382468931778144);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1000.0, 1000.0, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setStabilityCheck(false, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (-2847.3), (-2847.3), Integer.MAX_VALUE);
      graggBulirschStoerIntegrator0.clearEventHandlers();
      graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) Integer.MAX_VALUE;
      doubleArray1[1] = 1000.0;
      doubleArray1[2] = 1000.0;
      doubleArray1[3] = 207.0;
      doubleArray1[4] = 1000.0;
      doubleArray1[5] = (double) Integer.MAX_VALUE;
      doubleArray1[6] = (-480.509);
      doubleArray1[7] = (-2847.3);
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-480.509), doubleArray0, 1684.49174, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-70.313837);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 0.0, (-70.313837), 0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[4];
      highamHall54Integrator0.setMinReduction((-1200.4133));
      doubleArray0[0] = (-70.313837);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-70.313837);
      doubleArray0[3] = 0.0;
      double double2 = 1000.0;
      try { 
        highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 1000.0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2825.8792480374696, 3110.6872911260375, 3110.6872911260375, 3110.6872911260375);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3936.333121044622;
      doubleArray0[1] = 3110.6872911260375;
      // Undeclared exception!
      try { 
        dormandPrince853Integrator0.computeDerivatives((-286.70477681292), doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-2162.7351745032192));
      threeEighthesIntegrator0.getMaxEvaluations();
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        threeEighthesIntegrator0.computeDerivatives((-2162.7351745032192), doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1861.528));
      gillIntegrator0.getMaxEvaluations();
      gillIntegrator0.getMaxEvaluations();
      int int0 = gillIntegrator0.getMaxEvaluations();
      assertEquals(Integer.MAX_VALUE, int0);
      
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(Integer.MAX_VALUE);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-973.160122));
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-2204.51251876816), (-2204.51251876816), (-973.160122), 1000.0);
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      graggBulirschStoerIntegrator0.addEventHandler((EventHandler) null, (-973.160122), 1000.0, (-2627), (UnivariateSolver) illinoisSolver0);
      assertEquals(2204.51251876816, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(5331.7, 5331.7, 1506.7765, 1506.7765);
      dormandPrince853Integrator0.setMinReduction((-287.7000251));
      double double0 = dormandPrince853Integrator0.getCurrentSignedStepsize();
      assertEquals(5331.7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(1.0);
      double double0 = threeEighthesIntegrator0.getCurrentSignedStepsize();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 412.61873, (-2054.77776), Double.NaN);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      SecantSolver secantSolver0 = new SecantSolver();
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (-2054.77776), 412.61873, 720, (UnivariateSolver) secantSolver0);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(Double.NaN);
      midpointIntegrator0.clearEventHandlers();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = 1.0;
      // Undeclared exception!
      try { 
        midpointIntegrator0.integrate((FirstOrderDifferentialEquations) null, Double.NaN, doubleArray0, Double.NaN, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }
}
