/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 00:17:13 GMT 2021
 */

package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver;
import org.apache.commons.math3.analysis.solvers.BrentSolver;
import org.apache.commons.math3.analysis.solvers.RiddersSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator;
import org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator;
import org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.GillIntegrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.nonstiff.MidpointIntegrator;
import org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator;
import org.apache.commons.math3.ode.sampling.DummyStepHandler;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.apache.commons.math3.ode.sampling.StepNormalizerBounds;
import org.apache.commons.math3.ode.sampling.StepNormalizerMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegrator_ESTest extends AbstractIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 0;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0.272677481174469);
      double[] doubleArray0 = new double[0];
      midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.272677481174469, doubleArray0, (-1.0), doubleArray0);
      LinkedList<EventHandler> linkedList0 = new LinkedList<EventHandler>();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.272677481174469, 9.295948298604103E-8, (-1.0), 9.295948298604103E-8);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0), 3021.77619503, (double)0, 1553.902537913315, 1453.2470003062915).when(eventHandler0).g(anyDouble() , any(double[].class));
      midpointIntegrator0.getEventHandlers();
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (-1.0), (-2441.0718771), 370);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(3).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      graggBulirschStoerIntegrator0.setInterpolationControl(false, 3);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.getTotalDimension();
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (-1652.0113));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0.272677481174469);
      double[] doubleArray0 = new double[0];
      midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.272677481174469, doubleArray0, (-1.0), doubleArray0);
      LinkedList<EventHandler> linkedList0 = new LinkedList<EventHandler>();
      MidpointIntegrator midpointIntegrator1 = new MidpointIntegrator(0.272677481174469);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      midpointIntegrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-5.617718879466363E-299), doubleArray0, (-1.0), doubleArray0);
      double[] doubleArray1 = new double[0];
      midpointIntegrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1.0, doubleArray0, (-567.5), doubleArray1);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.getTotalDimension();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-5.617718879466363E-299), 4.654720780112994E-8, doubleArray0, doubleArray0);
      double double0 = 1001.0;
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (-567.5));
      MidpointIntegrator midpointIntegrator2 = new MidpointIntegrator(double0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0.272677481174469);
      double[] doubleArray0 = new double[0];
      LinkedList<EventHandler> linkedList0 = new LinkedList<EventHandler>();
      MidpointIntegrator midpointIntegrator1 = new MidpointIntegrator((-1.0));
      midpointIntegrator1.addEventHandler((EventHandler) null, (-1595.657), 2.4801413921885483E-274, (-3166));
      MidpointIntegrator midpointIntegrator2 = new MidpointIntegrator((-3656.53958364298));
      midpointIntegrator2.setMaxEvaluations(0);
      double double0 = (-1024.4644819729604);
      try { 
        midpointIntegrator2.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1024.4644819729604), doubleArray0, (-3656.53958364298), doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double double0 = 0.272677481174469;
      int int0 = 0;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0.272677481174469);
      double double1 = (-1.0);
      double[] doubleArray0 = new double[0];
      midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.272677481174469, doubleArray0, (-1.0), doubleArray0);
      LinkedList<EventHandler> linkedList0 = new LinkedList<EventHandler>();
      MidpointIntegrator midpointIntegrator1 = new MidpointIntegrator(0.272677481174469);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(1433.2562, (-2393.565631)).when(eventHandler0).g(anyDouble() , any(double[].class));
      midpointIntegrator1.addEventHandler(eventHandler0, 0.049787066876888275, 0.049787066876888275, (-1041));
      double double2 = (-5.617718879466363E-299);
      try { 
        midpointIntegrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-5.617718879466363E-299), doubleArray0, (-1.0), doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-1,041) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(4426.02, 4426.02, 4426.02, 4426.02);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(2419.73093139, 9.094947017729282E-10).when(eventHandler0).g(anyDouble() , any(double[].class));
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 4426.02, (double) 2482, 2482);
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 586);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2419.73093139, doubleArray0, 1.4210854715202004E-11, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0.272677481174469);
      double[] doubleArray0 = new double[0];
      midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.272677481174469, doubleArray0, (-1.0), doubleArray0);
      LinkedList<EventHandler> linkedList0 = new LinkedList<EventHandler>();
      MidpointIntegrator midpointIntegrator1 = new MidpointIntegrator(0.272677481174469);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(1433.2562, (-2393.565631), (-1.0), (-1.0), 1433.2562).when(eventHandler0).g(anyDouble() , any(double[].class));
      midpointIntegrator1.addEventHandler(eventHandler0, 719.6508433, 719.6508433, (-1041));
      midpointIntegrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, (-1.0), doubleArray0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1537.71145800993), (-684.513825), doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1.0), doubleArray0, 1000.0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0.272677481174469);
      double[] doubleArray0 = new double[0];
      midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.272677481174469, doubleArray0, (-1.0), doubleArray0);
      LinkedList<EventHandler> linkedList0 = new LinkedList<EventHandler>();
      MidpointIntegrator midpointIntegrator1 = new MidpointIntegrator(0.272677481174469);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(1433.2562, (-2393.565631), (-1.0), (-1.0), 1433.2562).when(eventHandler0).g(anyDouble() , any(double[].class));
      midpointIntegrator1.addEventHandler(eventHandler0, 719.6508433, 719.6508433, (-1041));
      midpointIntegrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-5.617718879466363E-299), doubleArray0, (-1.0), doubleArray0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0, (-1693.0975), doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter1);
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE1, 0.272677481174469);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0.272677481174469);
      double[] doubleArray0 = new double[0];
      midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.272677481174469, doubleArray0, (-1.0), doubleArray0);
      LinkedList<EventHandler> linkedList0 = new LinkedList<EventHandler>();
      MidpointIntegrator midpointIntegrator1 = new MidpointIntegrator(0.272677481174469);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      midpointIntegrator1.addEventHandler(eventHandler0, 1433.2562, 1433.2562, (-1629));
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(1433.2562, (-2393.565631), (-1.0), (-1.0), 1433.2562).when(eventHandler1).g(anyDouble() , any(double[].class));
      midpointIntegrator0.setMaxEvaluations(0);
      midpointIntegrator1.addEventHandler(eventHandler1, 719.6508433, 719.6508433, (-1041));
      midpointIntegrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-5.617718879466363E-299), doubleArray0, (-1.0), doubleArray0);
      try { 
        midpointIntegrator0.computeDerivatives((-953.3796707429467), doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1384.0, 3244.83537, (-1829.189822), 499.8906417516885);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(14.101419448852539, 5269.140940732, 499.8906417516885, (-1829.189822)).when(eventHandler0).g(anyDouble() , any(double[].class));
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 1384.0, 499.8906417516885, (-1250));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (-1829.189822));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-1,250) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1142.7298079228), (-710.4923932839517), (-443.49804216949), (-443.49804216949));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (double) 0, 857.34322673997, 0);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.getTotalDimension();
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter0);
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(3341.6759);
      classicalRungeKuttaIntegrator0.setMaxEvaluations(0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-710.4923932839517);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 3341.6759;
      doubleArray0[3] = 3341.6759;
      doubleArray0[4] = 4.94E-321;
      doubleArray0[5] = (-1.0753950588009912E-8);
      doubleArray0[6] = (-1.0753950588009912E-8);
      doubleArray0[7] = (-710.4923932839517);
      doubleArray0[8] = 3341.6759;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(4.94E-321, 0, doubleArray0, doubleArray0);
      highamHall54Integrator0.getOrder();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0.272677481174469);
      double[] doubleArray0 = new double[0];
      midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.272677481174469, doubleArray0, (-1.0), doubleArray0);
      LinkedList<EventHandler> linkedList0 = new LinkedList<EventHandler>();
      MidpointIntegrator midpointIntegrator1 = new MidpointIntegrator(0.272677481174469);
      double[] doubleArray1 = new double[0];
      midpointIntegrator0.computeDerivatives((-1.0), doubleArray1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-4572.5263526253));
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      StepNormalizer stepNormalizer0 = new StepNormalizer((-4572.5263526253), fixedStepHandler0, stepNormalizerMode0);
      gillIntegrator0.addStepHandler(stepNormalizer0);
      gillIntegrator0.clearStepHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-4572.5263526253), doubleArray0, (-4941.05), doubleArray0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-4572.5263526253), (-4572.5263526253), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setControlFactors((-4941.05), 7.105427357601002E-12, (-4941.05), (-4572.5263526253));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(4230.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 4230.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 4230.0;
      doubleArray1[7] = 4230.0;
      doubleArray1[8] = 0.0;
      try { 
        midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 0.0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-2463.712903029706));
      double[] doubleArray0 = new double[0];
      double double0 = 5.6843418860808015E-11;
      midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1.0), doubleArray0, 5.6843418860808015E-11, doubleArray0);
      LinkedList<EventHandler> linkedList0 = new LinkedList<EventHandler>();
      MidpointIntegrator midpointIntegrator1 = new MidpointIntegrator(Double.NaN);
      double double1 = Double.NaN;
      midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, Double.NaN, doubleArray0, 1.0, doubleArray0);
      double double2 = (-1584.9974046862);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(double1, double0, double0, double2);
      double double3 = 2234.72710435245;
      double double4 = 1372.7557764189455;
      double double5 = 4470.0;
      graggBulirschStoerIntegrator0.setControlFactors(double3, double4, double2, double5);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-2463.712903029706));
      double[] doubleArray0 = new double[0];
      midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1.0), doubleArray0, 5.6843418860808015E-11, doubleArray0);
      LinkedList<EventHandler> linkedList0 = new LinkedList<EventHandler>();
      MidpointIntegrator midpointIntegrator1 = new MidpointIntegrator(Double.NaN);
      midpointIntegrator0.getEvaluations();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(0.272677481174469);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.272677481174469, 0.272677481174469, 0.272677481174469, 0.272677481174469);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double double0 = (-2.850217520533226E-270);
      double[] doubleArray0 = new double[0];
      classicalRungeKuttaIntegrator0.clearEventHandlers();
      double double1 = 0.0;
      classicalRungeKuttaIntegrator0.getEvaluations();
      graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-2.850217520533226E-270), doubleArray0, 0.0, doubleArray0);
      graggBulirschStoerIntegrator0.clearStepHandlers();
      graggBulirschStoerIntegrator0.setControlFactors(0.272677481174469, 0.272677481174469, 0.0, 0.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double2 = 1.0;
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = null;
      try {
        bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(0.0, 5.6843418860808015E-11, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than the minimum (2)
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double double0 = 4517.06;
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(4517.06);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      try { 
        midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2414.405154045, doubleArray0, 2414.405154045, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(5.759440286608551E-191, (-2555.342871581817), (-5.685526961588504), 4.85464582112459E-8);
      dormandPrince54Integrator0.getStepHandlers();
      dormandPrince54Integrator0.getStepHandlers();
      dormandPrince54Integrator0.setMaxEvaluations(38);
      dormandPrince54Integrator0.getOrder();
      dormandPrince54Integrator0.getEventHandlers();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(38, 498.7550386897, (-487.17284299715), 4.85464582112459E-8);
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.FIRST;
      StepNormalizer stepNormalizer0 = new StepNormalizer(3.911086668967361E112, (FixedStepHandler) null, stepNormalizerMode0, stepNormalizerBounds0);
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      graggBulirschStoerIntegrator0.clearEventHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 3.55284719912458E-8, (double) 5, 1264);
      graggBulirschStoerIntegrator0.getMaxEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter1);
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, Double.NaN);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.sampling.StepNormalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-1510.85180618052));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      threeEighthesIntegrator0.addEventHandler(eventHandler0, (-1510.85180618052), (-1510.85180618052), 670);
      threeEighthesIntegrator0.getEventHandlers();
      threeEighthesIntegrator0.getCurrentStepStart();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(938.9937, Double.NaN, (-1510.85180618052), 938.9937);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 4576.5);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(494.2051147901, (-2555.342871581817), 3703.59632483, (-5.685526961588504));
      dormandPrince54Integrator0.getStepHandlers();
      dormandPrince54Integrator0.setMaxEvaluations(38);
      dormandPrince54Integrator0.getOrder();
      dormandPrince54Integrator0.getEventHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(38).when(secondOrderDifferentialEquations0).getDimension();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1358.7169387308556, 2136.3160875, 5, 5);
      graggBulirschStoerIntegrator0.clearEventHandlers();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 1358.7169387308556, (-5.685526961588504), 2084322364);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter1);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double double0 = (-1510.85180618052);
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-1510.85180618052));
      midpointIntegrator0.getEventHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1510.85180618052);
      doubleArray0[1] = (-1170.0);
      doubleArray0[2] = (-1510.85180618052);
      doubleArray0[3] = (-1170.0);
      doubleArray0[4] = (-1510.85180618052);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-1170.0), (-1510.85180618052), doubleArray0, doubleArray0);
      double double1 = 499.8906417516885;
      try { 
        dormandPrince54Integrator0.integrate(expandableStatefulODE0, 499.8906417516885);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 5
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-1510.85180618052));
      midpointIntegrator0.getEventHandlers();
      midpointIntegrator0.getEventHandlers();
      midpointIntegrator0.getEventHandlers();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-3069.6855785389625);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 3.5759315936869937E-9;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 3.5759315936869937E-9, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.clearStepHandlers();
      DormandPrince54Integrator dormandPrince54Integrator1 = new DormandPrince54Integrator(Double.NaN, (-3069.6855785389625), 1000.0, (-396.757234222));
      dormandPrince54Integrator0.getOrder();
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3742.0), 556.75517223841, (-396.757234222), 499.8906417516885);
      highamHall54Integrator0.getCurrentStepStart();
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(5, 5.6843418860808015E-11, 5.6843418860808015E-11, 1000.0, (-3069.6855785389625));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      try { 
        adamsMoultonIntegrator0.integrate(expandableStatefulODE1, 32.1953845816746);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one column
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-1114.3922), (-1114.3922), 5.6843418860808015E-11, (-1114.3922));
      dormandPrince54Integrator0.getStepHandlers();
      dormandPrince54Integrator0.getOrder();
      dormandPrince54Integrator0.getEventHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime(5);
      dormandPrince54Integrator0.integrate(expandableStatefulODE0, (double) 38);
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1787.0, 1.0E15, doubleArray0, doubleArray0);
      RiddersSolver riddersSolver0 = new RiddersSolver(3060.6387, 5.6843418860808015E-11);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(5.6843418860808015E-11);
      MidpointIntegrator midpointIntegrator1 = new MidpointIntegrator(5.68253547942899E295);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 5.68253547942899E295;
      doubleArray1[1] = 1000.0;
      doubleArray1[2] = 1805.36023;
      doubleArray1[3] = 1.0E15;
      doubleArray1[4] = (-1114.3922);
      doubleArray1[5] = (-2075.4582071);
      doubleArray1[6] = 1000.0;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, (-2075.4582071), doubleArray1, doubleArray1);
      highamHall54Integrator0.getOrder();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double double0 = (-1114.3922);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-1114.3922), (-1114.3922), 5.6843418860808015E-11, (-1114.3922));
      dormandPrince54Integrator0.getStepHandlers();
      dormandPrince54Integrator0.setMaxEvaluations(38);
      dormandPrince54Integrator0.getOrder();
      dormandPrince54Integrator0.getEventHandlers();
      double double1 = 1.0E15;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(5294).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      dormandPrince54Integrator0.integrate(expandableStatefulODE0, (double) 38);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-487.17284299715), 1634.0229717, (-963.34761544), (-963.34761544));
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-2668.2));
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        midpointIntegrator0.integrate((FirstOrderDifferentialEquations) null, 2.850217520533226E-270, doubleArray0, 1952.802283173, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double double0 = (-940.8603119553);
      double double1 = (-4327.8077408065055);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-4327.8077408065055);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-940.8603119553), (-4327.8077408065055), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.getCurrentStepStart();
      graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
      graggBulirschStoerIntegrator0.getMaxEvaluations();
      boolean boolean0 = false;
      int int0 = 257;
      graggBulirschStoerIntegrator0.getEventHandlers();
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = (double) 257;
      doubleArray1[2] = (-940.8603119553);
      doubleArray1[3] = 1920.878082;
      doubleArray1[4] = (-4327.8077408065055);
      doubleArray1[5] = (-940.8603119553);
      doubleArray1[6] = Double.NaN;
      doubleArray1[7] = 1.0;
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.computeDerivatives(Integer.MAX_VALUE, doubleArray0, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double double0 = 494.2051147901;
      double double1 = 3703.59632483;
      double double2 = (-5.685526961588504);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(494.2051147901, (-2555.342871581817), 3703.59632483, (-5.685526961588504));
      dormandPrince54Integrator0.getStepHandlers();
      int int0 = 38;
      dormandPrince54Integrator0.setMaxEvaluations(38);
      dormandPrince54Integrator0.getOrder();
      dormandPrince54Integrator0.getEventHandlers();
      double double3 = 1358.7169387308556;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        dormandPrince54Integrator0.integrate(expandableStatefulODE0, 1358.7169387308556);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (38) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-0.3125), (-1510.1577027), (-1510.1577027), 685.4708232387178);
      DummyStepHandler.getInstance();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1510.1577027);
      doubleArray0[1] = 685.4708232387178;
      doubleArray0[2] = 685.4708232387178;
      doubleArray0[3] = 685.4708232387178;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator1 = new GraggBulirschStoerIntegrator(77.25991211239, (-1510.1577027), 7.230020851688713E-185, (-1510.1577027));
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1000.0, (-362.42), 1000.0, 685.4708232387178);
      highamHall54Integrator0.setSafety(7.230020851688713E-185);
      int int0 = 4368;
      graggBulirschStoerIntegrator1.setStabilityCheck(false, 6, 4368, 1000.0);
      graggBulirschStoerIntegrator1.clearStepHandlers();
      graggBulirschStoerIntegrator1.setOrderControl(0, (-80.68937), 521.32);
      // Undeclared exception!
      try { 
        highamHall54Integrator0.integrate((ExpandableStatefulODE) null, 1000.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-2315.7735651811));
      midpointIntegrator0.getEvaluations();
      midpointIntegrator0.getCurrentStepStart();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-50.7847096));
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizer stepNormalizer0 = new StepNormalizer(48.5197745, fixedStepHandler0, stepNormalizerMode0);
      gillIntegrator0.addStepHandler(stepNormalizer0);
      gillIntegrator0.setMaxEvaluations(940);
      FixedStepHandler fixedStepHandler1 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode1 = StepNormalizerMode.MULTIPLES;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.LAST;
      gillIntegrator0.getMaxEvaluations();
      StepNormalizer stepNormalizer1 = new StepNormalizer((-50.7847096), fixedStepHandler1, stepNormalizerMode1, stepNormalizerBounds0);
      double[] doubleArray0 = new double[0];
      stepNormalizer1.init(940, doubleArray0, Double.NaN);
      gillIntegrator0.addStepHandler(stepNormalizer1);
      gillIntegrator0.getCurrentStepStart();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2555.342871581817), 1549.0, 0.0, 5.6843418860808015E-11);
      dormandPrince54Integrator0.getStepHandlers();
      dormandPrince54Integrator0.setMaxEvaluations((-1));
      dormandPrince54Integrator0.getOrder();
      dormandPrince54Integrator0.getEventHandlers();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1.0E15, 3.831007739580998E22, 0.0, 2357.8527);
      graggBulirschStoerIntegrator0.setStabilityCheck(true, (-633), 5, 0.0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-1278.21535553028));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(2184).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double double0 = 2783.2345571104;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2783.2345571104;
      doubleArray0[1] = 2783.2345571104;
      doubleArray0[2] = (-1278.21535553028);
      try { 
        midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2783.2345571104, doubleArray0, 2783.2345571104, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 4,368
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double double0 = (-2555.342871581817);
      double double1 = 3703.59632483;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 0.0, doubleArray0, doubleArray0);
      // Undeclared exception!
      highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-5.685526961588504), doubleArray0, 494.2051147901, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(4762.0, 4762.0, 2135.594, (-1202.6));
      double double0 = 0.0;
      double double1 = 1214.67;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1202.6);
      doubleArray0[2] = 2135.594;
      doubleArray0[3] = 2135.594;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1214.67;
      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 1214.67, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(10.0);
      classicalRungeKuttaIntegrator0.getEventHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      classicalRungeKuttaIntegrator0.getEventHandlers();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      BrentSolver brentSolver0 = new BrentSolver(1358.0, 5.333333333333333);
      classicalRungeKuttaIntegrator0.addEventHandler(eventHandler0, (-260.337791684), 10.0, 1213, (UnivariateSolver) brentSolver0);
      expandableStatefulODE0.getTotalDimension();
      classicalRungeKuttaIntegrator0.getStepHandlers();
      // Undeclared exception!
      try { 
        expandableStatefulODE0.getSecondaryStateDot(1058);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1058, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(494.2051147901, (-2555.342871581817), 3703.59632483, (-5.685526961588504));
      dormandPrince54Integrator0.getStepHandlers();
      dormandPrince54Integrator0.setMaxEvaluations(38);
      dormandPrince54Integrator0.getOrder();
      dormandPrince54Integrator0.getEventHandlers();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-5.685526961588504), 1358.7169387308556, 1.0E15, 1.0E15);
      graggBulirschStoerIntegrator0.setStabilityCheck(true, (-633), (-633), 3703.59632483);
      assertEquals(87.89210310557641, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, 0.0, 0.0);
      double double0 = graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-1510.85180618052));
      midpointIntegrator0.getEventHandlers();
      midpointIntegrator0.getEventHandlers();
      midpointIntegrator0.getEventHandlers();
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-1510.85180618052), 825.58719847, 825.58719847, (-1368.006));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2654.458673001748);
      doubleArray0[1] = (-1510.85180618052);
      doubleArray0[2] = 825.58719847;
      doubleArray0[3] = (double) 137;
      doubleArray0[4] = 798.667232945;
      doubleArray0[5] = (-1510.85180618052);
      dormandPrince54Integrator0.getEvaluations();
      // Undeclared exception!
      try { 
        dormandPrince54Integrator0.initializeStep(true, 137, doubleArray0, 1631.64, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-487.17284299715), 1634.0229717, (-963.34761544), (-963.34761544));
      graggBulirschStoerIntegrator0.clearEventHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (-487.17284299715));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-0.3125), (-1510.1577027), (-1510.1577027), 685.4708232387178);
      DummyStepHandler.getInstance();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1510.1577027);
      doubleArray0[1] = 685.4708232387178;
      doubleArray0[2] = 685.4708232387178;
      doubleArray0[3] = 685.4708232387178;
      doubleArray0[4] = 1000.0;
      DummyStepHandler.getInstance();
      doubleArray0[5] = 685.4708232387178;
      doubleArray0[6] = 685.4708232387178;
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.computeDerivatives(1000.0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(1032.449934094);
      double double0 = 0.624;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1032.449934094, 0.624, (-1.0), 0.9);
      dormandPrince853Integrator0.getOrder();
      dormandPrince853Integrator0.getName();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (double) 8;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-1.3020833333333333);
      doubleArray0[5] = (-1.0);
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(8, (-1.0), 0.9, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-1.3020833333333333);
      doubleArray1[1] = 0.9;
      doubleArray1[2] = 1032.449934094;
      try { 
        expandableStatefulODE0.setPrimaryState(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 0
         //
         verifyException("org.apache.commons.math3.ode.ExpandableStatefulODE", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(1000.0);
      midpointIntegrator0.getName();
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1490.753303083;
      doubleArray0[1] = 1490.753303083;
      doubleArray0[2] = 1490.753303083;
      doubleArray0[3] = 1490.753303083;
      doubleArray0[4] = (-3975.45485);
      doubleArray0[5] = 1490.753303083;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1490.753303083, (-3975.45485), doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.setInterpolationControl(true, (-404));
      RiddersSolver riddersSolver0 = new RiddersSolver(1490.753303083, (-1657.81815629));
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 1490.753303083, 1490.753303083, (-311), (UnivariateSolver) riddersSolver0);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 0.0, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      highamHall54Integrator0.setStepSizeControl(0.0, 0.0, (-1015.0), 0.0);
      double double0 = 2920.3282846977013;
      try { 
        highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-3067.05349107), doubleArray0, 2920.3282846977013, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-1553.8837233));
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1553.8837233), (-1553.8837233), 1.0E-15, 2780.308923359);
      graggBulirschStoerIntegrator0.clearEventHandlers();
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 849);
      int int0 = graggBulirschStoerIntegrator0.getEvaluations();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 850.3025043124;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(850.3025043124, 850.3025043124, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.clearEventHandlers();
      int int0 = (-5112);
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = null;
      try {
        adamsBashforthIntegrator0 = new AdamsBashforthIntegrator((-5112), (-5112), 0.0, doubleArray0, doubleArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-832.91790058);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 753.181;
      doubleArray0[3] = (-832.91790058);
      doubleArray0[4] = (-832.91790058);
      doubleArray0[5] = (-832.91790058);
      doubleArray0[6] = (-832.91790058);
      doubleArray0[7] = 0.0;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-832.91790058), 753.181, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.setSafety((-832.91790058));
      dormandPrince54Integrator0.setInitialStepSize(0.0);
      dormandPrince54Integrator0.getMaxEvaluations();
      dormandPrince54Integrator0.setStepSizeControl(0.0, (-832.91790058), doubleArray0, doubleArray0);
      dormandPrince54Integrator0.clearEventHandlers();
      dormandPrince54Integrator0.addEventHandler((EventHandler) null, (-832.91790058), 165.95888052, Integer.MAX_VALUE);
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.NEITHER;
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.0, (FixedStepHandler) null, stepNormalizerBounds0);
      dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
      dormandPrince54Integrator0.clearStepHandlers();
      dormandPrince54Integrator0.setInitialStepSize(0.0);
      dormandPrince54Integrator0.addEventHandler((EventHandler) null, (-1.0), (-832.91790058), 0);
      assertEquals(832.91790058, dormandPrince54Integrator0.getMaxStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double double0 = 1186.626;
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(1186.626);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 1186.626;
      doubleArray0[2] = 1186.626;
      doubleArray0[3] = Double.NaN;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(Double.NaN, 1186.626, doubleArray0, doubleArray0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.0, fixedStepHandler0);
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      int int0 = 2092;
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(2092, (-889.267829643559), (-9.147934308113573), doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = (-1024);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1024);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (-1024);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) (-1024);
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = null;
      try {
        adamsMoultonIntegrator0 = new AdamsMoultonIntegrator((-1024), (-1024), 0.0, doubleArray0, doubleArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double double0 = 0.0;
      GillIntegrator gillIntegrator0 = new GillIntegrator(0.0);
      FirstOrderConverter firstOrderConverter0 = null;
      try {
        firstOrderConverter0 = new FirstOrderConverter((SecondOrderDifferentialEquations) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.FirstOrderConverter", e);
      }
  }
}
