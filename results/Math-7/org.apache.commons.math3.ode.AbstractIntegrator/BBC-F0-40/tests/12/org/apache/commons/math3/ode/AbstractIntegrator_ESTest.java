/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 00:01:14 GMT 2021
 */

package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.solvers.PegasusSolver;
import org.apache.commons.math3.analysis.solvers.RiddersSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondaryEquations;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator;
import org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator;
import org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.GillIntegrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.nonstiff.MidpointIntegrator;
import org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator;
import org.apache.commons.math3.ode.sampling.DummyStepHandler;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator;
import org.apache.commons.math3.ode.sampling.StepInterpolator;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.apache.commons.math3.ode.sampling.StepNormalizerBounds;
import org.apache.commons.math3.ode.sampling.StepNormalizerMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegrator_ESTest extends AbstractIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(99.7304434544);
      threeEighthesIntegrator0.clearStepHandlers();
      double[] doubleArray0 = new double[0];
      threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) 153, doubleArray0, (-93.38114154624658), doubleArray0);
      threeEighthesIntegrator0.getEvaluations();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter1);
      GillIntegrator gillIntegrator0 = new GillIntegrator(1680.64819);
      gillIntegrator0.getEventHandlers();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      gillIntegrator0.addEventHandler(eventHandler0, 1366.1388939990904, 20.154067550477894, 317);
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      gillIntegrator0.addStepHandler(dummyStepHandler0);
      gillIntegrator0.integrate(expandableStatefulODE0, (-2104.493));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1917.91910737963));
      gillIntegrator0.getEventHandlers();
      expandableStatefulODE0.getTotalDimension();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-2719.598347), 1521.84888641).when(eventHandler0).g(anyDouble() , any(double[].class));
      gillIntegrator0.addEventHandler(eventHandler0, 2.8421709430404007E-11, 4661.081934308168, (-449));
      try { 
        gillIntegrator0.integrate(expandableStatefulODE0, (-4030.471));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-449) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-93.38114154624658));
      double[] doubleArray0 = new double[0];
      threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 860.7291732738, doubleArray0, 319.861106, doubleArray0);
      RiddersSolver riddersSolver0 = new RiddersSolver();
      ThreeEighthesIntegrator threeEighthesIntegrator1 = new ThreeEighthesIntegrator(6.574128018028633E-24);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      threeEighthesIntegrator1.addEventHandler(eventHandler0, 1.0, 1.0, 150, (UnivariateSolver) riddersSolver0);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-2048.0);
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = 282.685;
      doubleArray1[3] = (-1721.58125002);
      try { 
        threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 282.685, doubleArray0, 0.0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1454.1199328644313));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-1454.1199328644313), (double)0, (-93.38114154624658), (double)0, 2.8421709430404007E-11).when(eventHandler0).g(anyDouble() , any(double[].class));
      gillIntegrator0.getEventHandlers();
      gillIntegrator0.addEventHandler(eventHandler0, 2614.0, 2758.5359125699997, 1958);
      // Undeclared exception!
      gillIntegrator0.integrate(expandableStatefulODE0, (-93.38114154624658));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(334).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1454.1199328644313));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((double)334, (double)0, (-93.38114154624658), (double)334, (-2.3574653182047758E-7)).when(eventHandler0).g(anyDouble() , any(double[].class));
      gillIntegrator0.getEventHandlers();
      gillIntegrator0.addEventHandler(eventHandler0, 2614.0, 2758.5359125699997, 1958);
      try { 
        gillIntegrator0.integrate(expandableStatefulODE0, (-93.38114154624658));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [\uFFFD, \uFFFD], values: [-0, -0]
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(1726.163);
      double[] doubleArray0 = new double[0];
      threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 319.861106, doubleArray0, (double) 0, doubleArray0);
      RiddersSolver riddersSolver0 = new RiddersSolver();
      ThreeEighthesIntegrator threeEighthesIntegrator1 = new ThreeEighthesIntegrator(0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      threeEighthesIntegrator0.addEventHandler(eventHandler0, 1.0, 1.3399392455370071E-284, 1452, (UnivariateSolver) riddersSolver0);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(93.38114154624658, (-485.259462065269), 1452, 356.15885);
      DormandPrince853Integrator dormandPrince853Integrator1 = new DormandPrince853Integrator(Double.NaN, 6.574128018028633E-24, doubleArray0, doubleArray0);
      dormandPrince853Integrator1.setSafety(4802.192827);
      DormandPrince853Integrator dormandPrince853Integrator2 = new DormandPrince853Integrator(1726.163, 4802.192827, doubleArray0, doubleArray0);
      dormandPrince853Integrator2.getOrder();
      // Undeclared exception!
      threeEighthesIntegrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1828.0), doubleArray0, (-93.38114154624658), doubleArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-286.3423));
      ThreeEighthesIntegrator threeEighthesIntegrator1 = new ThreeEighthesIntegrator(1615.2300279562467);
      double[] doubleArray0 = new double[0];
      threeEighthesIntegrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) 0, doubleArray0, 1686.0, doubleArray0);
      ThreeEighthesIntegrator threeEighthesIntegrator2 = new ThreeEighthesIntegrator(1686.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-649.303405), (-649.303405), 6.574128018028633E-24, (-2144.7));
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-2115.24837583), 6.574128018028633E-24, (-1967.74), 0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator1 = new GraggBulirschStoerIntegrator((-2144.7), 1.4210854715202004E-11, doubleArray0, doubleArray0);
      double double0 = 0.0;
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1686.0, doubleArray0, 0.0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(1.185064946717304E-27);
      int int0 = 5;
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(5, 3978.087514135885, 3978.087514135885, 1.185064946717304E-27, (-380.91603109713));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double double0 = 1000.0;
      // Undeclared exception!
      try { 
        adamsBashforthIntegrator0.integrate(expandableStatefulODE0, 1000.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one column
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-93.38114154624658));
      double[] doubleArray0 = new double[0];
      RiddersSolver riddersSolver0 = new RiddersSolver();
      ThreeEighthesIntegrator threeEighthesIntegrator1 = new ThreeEighthesIntegrator(6.574128018028633E-24);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      threeEighthesIntegrator0.clearStepHandlers();
      threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1521.84888641, doubleArray0, (-93.38114154624658), doubleArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1.0));
      gillIntegrator0.getCurrentStepStart();
      gillIntegrator0.getCurrentStepStart();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(0.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      gillIntegrator0.addEventHandler(eventHandler0, 0.0, 0.0, 301);
      gillIntegrator0.getCurrentStepStart();
      gillIntegrator0.getStepHandlers();
      gillIntegrator0.getEventHandlers();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double double0 = (-93.38114154624658);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-93.38114154624658));
      double[] doubleArray0 = new double[0];
      threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 860.7291732738, doubleArray0, 319.861106, doubleArray0);
      RiddersSolver riddersSolver0 = new RiddersSolver();
      ThreeEighthesIntegrator threeEighthesIntegrator1 = new ThreeEighthesIntegrator(6.574128018028633E-24);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      threeEighthesIntegrator1.addEventHandler(eventHandler0, 1.0, 1.0, 150, (UnivariateSolver) riddersSolver0);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(4802.192827, Double.NaN, 0.0, 1203.34266443795);
      dormandPrince853Integrator0.setSafety((-93.38114154624658));
      dormandPrince853Integrator0.getOrder();
      double double1 = 2.2737367544323206E-10;
      // Undeclared exception!
      threeEighthesIntegrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, double0, doubleArray0, double1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-286.3423));
      ThreeEighthesIntegrator threeEighthesIntegrator1 = new ThreeEighthesIntegrator(1521.84888641);
      double[] doubleArray0 = new double[0];
      threeEighthesIntegrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) 0, doubleArray0, 1686.0, doubleArray0);
      RiddersSolver riddersSolver0 = new RiddersSolver();
      ThreeEighthesIntegrator threeEighthesIntegrator2 = new ThreeEighthesIntegrator((-4661.081934308054));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      threeEighthesIntegrator1.addEventHandler(eventHandler0, 4802.192827, 1521.84888641, 150, (UnivariateSolver) riddersSolver0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-4661.081934308054), (-1967.74), (-1214.5158580865532), 540.8680672738001);
      graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 540.8680672738001, doubleArray0, 1.1368683772161603E-10, doubleArray0);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 2211.1321217268774);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(5.900089995748943E-29);
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-2576.992827), 2225.2, doubleArray0, doubleArray0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 540.8680672738001);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double double0 = 5.900089995748943E-29;
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(5.900089995748943E-29);
      double double1 = 2225.2;
      double[] doubleArray0 = new double[0];
      try { 
        threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-2576.992827), doubleArray0, (-2576.992827), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-1508.1004818980462));
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(234.8, 2630.3162, 2630.3162, 234.8);
      threeEighthesIntegrator0.clearEventHandlers();
      dormandPrince54Integrator0.clearEventHandlers();
      // Undeclared exception!
      try { 
        dormandPrince54Integrator0.computeDerivatives((-1.0), (double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      SecondaryEquations secondaryEquations0 = mock(SecondaryEquations.class, new ViolatedAssumptionAnswer());
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(470).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1199.34540437309), 0.9595430519861834, (-417.5780083003), 2.083115484919861E219);
      highamHall54Integrator0.getOrder();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 5;
      doubleArray0[2] = (-5.718749537552229E-8);
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) (-2293);
      doubleArray0[1] = (-1199.34540437309);
      doubleArray1[2] = 2.083115484919861E219;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-2293), 0.9595430519861834, doubleArray0, doubleArray1);
      graggBulirschStoerIntegrator0.setOrderControl((-900), (-2293.0), 709.96137784);
      highamHall54Integrator0.getCurrentSignedStepsize();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double double0 = 102.48594150914354;
      double double1 = 4.0;
      double double2 = 3770.5949879652057;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(4.0, 0.0, 3770.5949879652057, 319.861106);
      int int0 = 5;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      graggBulirschStoerIntegrator0.setMaxEvaluations(5);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 1547.634);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (5) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(601.323, 601.323, 601.323, 601.323);
      graggBulirschStoerIntegrator0.clearStepHandlers();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      RiddersSolver riddersSolver0 = new RiddersSolver(4802.192827, Double.NaN);
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (double) 1232, 4.547473508864641E-10, (-1614), (UnivariateSolver) riddersSolver0);
      graggBulirschStoerIntegrator0.setOrderControl(1232, 1232, (-318.44745090306));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1232).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (-1373.09721249));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1.0));
      gillIntegrator0.getCurrentSignedStepsize();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      SecondaryEquations secondaryEquations0 = mock(SecondaryEquations.class, new ViolatedAssumptionAnswer());
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1203.34266443795), 0.0, (-417.5780083003), 2.083115484919861E219);
      highamHall54Integrator0.getOrder();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 5;
      doubleArray0[2] = (-5.718749537552229E-8);
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) (-2293);
      doubleArray1[1] = (-1203.34266443795);
      doubleArray1[2] = 2.083115484919861E219;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-2293), 0.0, doubleArray0, doubleArray1);
      graggBulirschStoerIntegrator0.setOrderControl((-900), (-2293.0), 709.96137784);
      highamHall54Integrator0.getCurrentSignedStepsize();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(3464.329457765, 3464.329457765, 0.0, 3464.329457765);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1967.28984));
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 4802.192827;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 3464.329457765;
      doubleArray0[3] = 3464.329457765;
      gillIntegrator0.setMaxEvaluations(0);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1967.28984);
      doubleArray0[6] = 4802.192827;
      doubleArray0[7] = (double) 0;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = 3464.329457765;
      doubleArray1[2] = (-1248.1872076);
      try { 
        gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 4802.192827, doubleArray0, (-1967.28984), doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-93.38114154624658));
      double[] doubleArray0 = new double[0];
      threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 860.7291732738, doubleArray0, 319.861106, doubleArray0);
      RiddersSolver riddersSolver0 = new RiddersSolver();
      ThreeEighthesIntegrator threeEighthesIntegrator1 = new ThreeEighthesIntegrator(6.574128018028633E-24);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      threeEighthesIntegrator1.addEventHandler(eventHandler0, 1.0, 1.0, 150, (UnivariateSolver) riddersSolver0);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(4802.192827, Double.NaN, 0.0, 1203.34266443795);
      dormandPrince853Integrator0.getOrder();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-744.829893246), 150, 4802.192827, (-2576.992827));
      graggBulirschStoerIntegrator0.setInterpolationControl(true, (-3769));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      int int0 = 150;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double double0 = 5.900089995748943E-29;
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(5.900089995748943E-29);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2225.2, doubleArray0, (-2576.992827), doubleArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double double0 = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, 102.48594150914354, 4.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      graggBulirschStoerIntegrator0.setMaxEvaluations((-3254));
      SecondaryEquations secondaryEquations0 = mock(SecondaryEquations.class, new ViolatedAssumptionAnswer());
      double double1 = 0.0;
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 102.48594150914354);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1.0));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      PegasusSolver pegasusSolver0 = new PegasusSolver((-774.414581999934), Double.NaN);
      gillIntegrator0.addEventHandler(eventHandler0, (-774.414581999934), (-774.414581999934), (-1103), (UnivariateSolver) pegasusSolver0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-2.2394073401050633E-7));
      ThreeEighthesIntegrator threeEighthesIntegrator1 = new ThreeEighthesIntegrator((-286.3423));
      double double0 = 1686.0;
      FirstOrderDifferentialEquations firstOrderDifferentialEquations0 = null;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1521.84888641;
      doubleArray0[1] = (-286.3423);
      doubleArray0[2] = 1521.84888641;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-2.2394073401050633E-7);
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = 1521.84888641;
      // Undeclared exception!
      try { 
        threeEighthesIntegrator1.integrate((FirstOrderDifferentialEquations) null, 1521.84888641, doubleArray0, (-1633.788), doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-1620.36195));
      threeEighthesIntegrator0.getEventHandlers();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double0 = 319.861106;
      double double1 = (-93.38114154624658);
      int int0 = 150;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(708).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-93.38114154624658);
      doubleArray0[1] = (-1620.36195);
      doubleArray0[2] = (-1620.36195);
      doubleArray0[3] = (-2576.992827);
      doubleArray0[4] = (-1620.36195);
      doubleArray0[5] = 319.861106;
      doubleArray0[6] = 319.861106;
      try { 
        threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-93.38114154624658), doubleArray0, 1000.4310151193629, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 1,416
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1.0E-15, 1.0E-15, 0.0, 1.0E-15);
      // Undeclared exception!
      try { 
        highamHall54Integrator0.integrate((ExpandableStatefulODE) null, 611.69466684);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.getStepHandlers();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, (-408.5055411), (-43.48988418106996), 0.0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.LAST;
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.0, fixedStepHandler0, stepNormalizerBounds0);
      graggBulirschStoerIntegrator0.getStepHandlers();
      graggBulirschStoerIntegrator0.setInitialStepSize((-1.0));
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      graggBulirschStoerIntegrator0.getMaxEvaluations();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 102.48594150914354;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, 102.48594150914354, 4.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      graggBulirschStoerIntegrator0.setMaxEvaluations((-3254));
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      SecondaryEquations secondaryEquations0 = mock(SecondaryEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondaryEquations0).getDimension();
      expandableStatefulODE0.addSecondaryEquations(secondaryEquations0);
      double double2 = 0.0;
      expandableStatefulODE0.setTime((-1203.34266443795));
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 0.0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(108.0, 947.3, (-0.4353557902216363), (-0.4353557902216363));
      graggBulirschStoerIntegrator0.setStepSizeControl(1.0, 2520.077655, 0.0, 2002.983782338);
      graggBulirschStoerIntegrator0.clearStepHandlers();
      assertEquals(319.85684297822985, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double double0 = 1070.6487;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-2604.12863534), 1070.6487, (-2039.9021), 1070.6487);
      int int0 = 111;
      dormandPrince853Integrator0.setMaxEvaluations(111);
      double double1 = (-1493.6978);
      dormandPrince853Integrator0.setStepSizeControl(213.842699497671, 1070.6487, (-1493.6978), (-1493.6978));
      dormandPrince853Integrator0.setMaxEvaluations(1);
      dormandPrince853Integrator0.getEvaluations();
      dormandPrince853Integrator0.setInitialStepSize(4784.515323146);
      dormandPrince853Integrator0.getEventHandlers();
      dormandPrince853Integrator0.setMaxEvaluations(1387);
      double double2 = 1209.1994520384;
      dormandPrince853Integrator0.getEvaluations();
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizer stepNormalizer0 = new StepNormalizer(1209.1994520384, fixedStepHandler0, stepNormalizerMode0);
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      StepInterpolator stepInterpolator0 = nordsieckStepInterpolator0.copy();
      // Undeclared exception!
      try { 
        stepNormalizer0.handleStep(stepInterpolator0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 860.7291732738;
      doubleArray0[1] = 860.7291732738;
      doubleArray0[2] = (-78.125);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(860.7291732738, (-78.125), doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        highamHall54Integrator0.integrate(expandableStatefulODE0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 3
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 1000.0, 540.8680672738001, 540.8680672738001);
      RiddersSolver riddersSolver0 = new RiddersSolver(540.8680672738001);
      dormandPrince54Integrator0.addEventHandler((EventHandler) null, 1203.34266443795, 1203.34266443795, 79, (UnivariateSolver) riddersSolver0);
      dormandPrince54Integrator0.addEventHandler((EventHandler) null, (-12.442), 0.0, 79);
      dormandPrince54Integrator0.getMaxEvaluations();
      dormandPrince54Integrator0.getEventHandlers();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(540.8680672738001, 1.0, 1.960616287777496E-7, 1.102583646774292);
      graggBulirschStoerIntegrator0.setStabilityCheck(true, 79, (-485), 1000.0);
      assertEquals(540.8680672738001, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-3427.692139354753), 118.0, (-3427.692139354753), 1385.9460417);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      dormandPrince54Integrator0.getEventHandlers();
      dormandPrince54Integrator0.getMaxEvaluations();
      dormandPrince54Integrator0.getEventHandlers();
      dormandPrince54Integrator0.getEvaluations();
      dormandPrince54Integrator0.addEventHandler(eventHandler0, 1000.0, Double.NaN, 2283);
      dormandPrince54Integrator0.getEventHandlers();
      dormandPrince54Integrator0.getName();
      dormandPrince54Integrator0.getMaxEvaluations();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1829.0, 1000.0, (-3081.502092214), 1829.0);
      graggBulirschStoerIntegrator0.setInterpolationControl(true, (-1059));
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(Integer.MAX_VALUE, 242.28349177525817, 288.685824, 398.71113592);
      int int0 = dormandPrince853Integrator0.getOrder();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 0.0, (-5647.925092037185), (-1554.58092208));
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1234.64612412, 1234.64612412, 2639.428678291, 0.0);
      graggBulirschStoerIntegrator0.getMaxEvaluations();
      graggBulirschStoerIntegrator0.setControlFactors(0.0, 1059.5, 679.4135985749, (-1037.324324121));
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator1 = new GraggBulirschStoerIntegrator(2.2, (-5647.925092037185), (-2138.41882911), (-641));
      graggBulirschStoerIntegrator1.setStabilityCheck(false, (-641), 478, 0.0);
      graggBulirschStoerIntegrator1.setStabilityCheck(true, 447, (-641), (-2.238614484037969E-159));
      graggBulirschStoerIntegrator1.setOrderControl((-2518), (-2152.33), 2357.43);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator1.getName());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-1948.963731);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1948.963731), (-1948.963731), doubleArray0, doubleArray0);
      int int0 = dormandPrince853Integrator0.getEvaluations();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(1432.817);
      midpointIntegrator0.setMaxEvaluations(164);
      midpointIntegrator0.setMaxEvaluations(164);
      midpointIntegrator0.setMaxEvaluations(0);
      midpointIntegrator0.getName();
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1664.854), (-3786.1101591), doubleArray0, doubleArray0);
      double double0 = 0.95;
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.NEITHER;
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.95, fixedStepHandler0, stepNormalizerBounds0);
      stepNormalizer0.init(3508.4385, doubleArray0, 0.0);
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      SecondaryEquations secondaryEquations0 = mock(SecondaryEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondaryEquations0).getDimension();
      expandableStatefulODE0.addSecondaryEquations(secondaryEquations0);
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-1620.36195));
      threeEighthesIntegrator0.getEventHandlers();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double0 = 319.861106;
      double double1 = (-93.38114154624658);
      int int0 = 150;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-93.38114154624658);
      doubleArray0[1] = (-1620.36195);
      doubleArray0[2] = (-1620.36195);
      doubleArray0[3] = (-2576.992827);
      doubleArray0[4] = (-1620.36195);
      doubleArray0[5] = 319.861106;
      doubleArray0[6] = 319.861106;
      try { 
        threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-93.38114154624658), doubleArray0, 1000.4310151193629, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 951.623496820177;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 951.623496820177;
      doubleArray0[3] = 951.623496820177;
      doubleArray0[4] = 951.623496820177;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(951.623496820177, 951.623496820177, doubleArray0, doubleArray0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(951.623496820177, 951.623496820177, (-0.9371424300859873), (-1.0));
      boolean boolean0 = false;
      int int0 = 542;
      graggBulirschStoerIntegrator0.setStabilityCheck(false, 542, 542, (-3595.6));
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-0.9371424300859873);
      doubleArray1[1] = (-3595.6);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (double) 542;
      graggBulirschStoerIntegrator0.getEventHandlers();
      doubleArray1[4] = (-3595.6);
      doubleArray1[5] = (-3595.6);
      doubleArray1[6] = (-3595.6);
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.computeDerivatives((-1775.7), doubleArray1, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double double0 = 3464.329457765;
      double double1 = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(3464.329457765, 3464.329457765, 0.0, 3464.329457765);
      int int0 = 0;
      graggBulirschStoerIntegrator0.setMaxEvaluations(0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 3464.329457765);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1.3333333333333333));
      gillIntegrator0.setMaxEvaluations(3206);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 0;
      double double0 = 0.0;
      double double1 = 1405.6450972844;
      double double2 = (-2078.0);
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = null;
      try {
        adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(0, 0.0, 1405.6450972844, (-2078.0), (-2078.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // multistep method needs at least 0 previous steps, got 2
         //
         verifyException("org.apache.commons.math3.ode.MultistepIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 0.0, 1000.0, 0.0);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
  }
}
