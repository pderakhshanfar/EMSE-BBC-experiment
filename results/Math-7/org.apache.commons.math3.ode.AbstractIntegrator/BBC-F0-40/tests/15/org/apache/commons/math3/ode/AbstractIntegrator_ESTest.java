/*
 * This file was automatically generated by EvoSuite
 * Sat Mar 06 00:04:02 GMT 2021
 */

package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import org.apache.commons.math3.analysis.solvers.BrentSolver;
import org.apache.commons.math3.analysis.solvers.IllinoisSolver;
import org.apache.commons.math3.analysis.solvers.MullerSolver;
import org.apache.commons.math3.analysis.solvers.MullerSolver2;
import org.apache.commons.math3.analysis.solvers.RegulaFalsiSolver;
import org.apache.commons.math3.analysis.solvers.RiddersSolver;
import org.apache.commons.math3.analysis.solvers.SecantSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator;
import org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator;
import org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.EulerIntegrator;
import org.apache.commons.math3.ode.nonstiff.GillIntegrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.nonstiff.MidpointIntegrator;
import org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator;
import org.apache.commons.math3.ode.sampling.DummyStepHandler;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.StepHandler;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.apache.commons.math3.ode.sampling.StepNormalizerBounds;
import org.apache.commons.math3.ode.sampling.StepNormalizerMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegrator_ESTest extends AbstractIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(1054.27);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertNotNull(eulerIntegrator0);
      
      Collection<StepHandler> collection0 = eulerIntegrator0.getStepHandlers();
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertNotNull(collection0);
      
      int int0 = eulerIntegrator0.getEvaluations();
      assertEquals(0, int0);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      double[] doubleArray0 = new double[0];
      double double0 = eulerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-2446.258137579314), doubleArray0, (double) 0, doubleArray0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(0, firstOrderConverter0.getDimension());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1868.405111367998, 1868.405111367998, 1054.27, 1054.27);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(1868.405111367998, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(1868.405111367998, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(1868.405111367998, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertNotNull(dormandPrince54Integrator0);
      
      double double0 = (-1030.8066704594858);
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(8, (-408.99), (-1030.8066704594858), 8, 0.21293538808822632);
      assertEquals(Double.NaN, adamsMoultonIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Adams-Moulton", adamsMoultonIntegrator0.getName());
      assertEquals(0.9, adamsMoultonIntegrator0.getSafety(), 0.01);
      assertEquals(1030.8066704594858, adamsMoultonIntegrator0.getMaxStep(), 0.01);
      assertEquals(408.99, adamsMoultonIntegrator0.getMinStep(), 0.01);
      assertEquals(649.2993301638506, adamsMoultonIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.2, adamsMoultonIntegrator0.getMinReduction(), 0.01);
      assertEquals(1.080059738892306, adamsMoultonIntegrator0.getMaxGrowth(), 0.01);
      assertNotNull(adamsMoultonIntegrator0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(secondOrderDifferentialEquations0).getDimension();
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer0 = new StepNormalizer((-541.323363779237), fixedStepHandler0);
      assertNotNull(stepNormalizer0);
      
      adamsMoultonIntegrator0.addStepHandler(stepNormalizer0);
      assertEquals(Double.NaN, adamsMoultonIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Adams-Moulton", adamsMoultonIntegrator0.getName());
      assertEquals(0.9, adamsMoultonIntegrator0.getSafety(), 0.01);
      assertEquals(1030.8066704594858, adamsMoultonIntegrator0.getMaxStep(), 0.01);
      assertEquals(408.99, adamsMoultonIntegrator0.getMinStep(), 0.01);
      assertEquals(649.2993301638506, adamsMoultonIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.2, adamsMoultonIntegrator0.getMinReduction(), 0.01);
      assertEquals(1.080059738892306, adamsMoultonIntegrator0.getMaxGrowth(), 0.01);
      
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(16, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      adamsMoultonIntegrator0.setStepSizeControl((double) 8, (double) 8, (-726.3214761913265), 102.49945);
      assertEquals(8.0, adamsMoultonIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, adamsMoultonIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Adams-Moulton", adamsMoultonIntegrator0.getName());
      assertEquals(0.9, adamsMoultonIntegrator0.getSafety(), 0.01);
      assertEquals(649.2993301638506, adamsMoultonIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.2, adamsMoultonIntegrator0.getMinReduction(), 0.01);
      assertEquals(1.080059738892306, adamsMoultonIntegrator0.getMaxGrowth(), 0.01);
      assertEquals(8.0, adamsMoultonIntegrator0.getMinStep(), 0.01);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-213.5858163737751), 1868.405111367998, 1868.405111367998, (-726.3214761913265), 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      BrentSolver brentSolver0 = new BrentSolver(1000.0, (-408.99));
      assertEquals(0.0, brentSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, brentSolver0.getMax(), 0.01);
      assertEquals(0.0, brentSolver0.getMin(), 0.01);
      assertEquals(1000.0, brentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-408.99), brentSolver0.getAbsoluteAccuracy(), 0.01);
      assertNotNull(brentSolver0);
      
      int int0 = brentSolver0.getEvaluations();
      assertEquals(0, int0);
      assertEquals(0.0, brentSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, brentSolver0.getMax(), 0.01);
      assertEquals(0.0, brentSolver0.getMin(), 0.01);
      assertEquals(1000.0, brentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-408.99), brentSolver0.getAbsoluteAccuracy(), 0.01);
      
      adamsMoultonIntegrator0.addEventHandler(eventHandler0, 1868.405111367998, 3771.91, 8, (UnivariateSolver) brentSolver0);
      assertEquals(8.0, adamsMoultonIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, adamsMoultonIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Adams-Moulton", adamsMoultonIntegrator0.getName());
      assertEquals(0.9, adamsMoultonIntegrator0.getSafety(), 0.01);
      assertEquals(649.2993301638506, adamsMoultonIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.2, adamsMoultonIntegrator0.getMinReduction(), 0.01);
      assertEquals(1.080059738892306, adamsMoultonIntegrator0.getMaxGrowth(), 0.01);
      assertEquals(8.0, adamsMoultonIntegrator0.getMinStep(), 0.01);
      assertEquals(0.0, brentSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, brentSolver0.getMax(), 0.01);
      assertEquals(0.0, brentSolver0.getMin(), 0.01);
      assertEquals(1000.0, brentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-408.99), brentSolver0.getAbsoluteAccuracy(), 0.01);
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertEquals(16, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      assertNotNull(expandableStatefulODE0);
      
      // Undeclared exception!
      adamsMoultonIntegrator0.integrate(expandableStatefulODE0, (double) 8);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(1054.27);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertNotNull(eulerIntegrator0);
      
      Collection<StepHandler> collection0 = eulerIntegrator0.getStepHandlers();
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertNotNull(collection0);
      
      int int0 = eulerIntegrator0.getEvaluations();
      assertEquals(0, int0);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      double[] doubleArray0 = new double[0];
      double double0 = eulerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) 0, doubleArray0, 2765.161706057207, doubleArray0);
      assertEquals(2765.161706057207, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer0 = new StepNormalizer(2765.161706057207, fixedStepHandler0, stepNormalizerMode0);
      assertNotNull(stepNormalizer0);
      
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-61.0375787779033), 2765.161706057207, doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(410.8269410190966, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(61.0375787779033, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(2765.161706057207, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertNotNull(graggBulirschStoerIntegrator0);
      
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(410.8269410190966, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(61.0375787779033, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(2765.161706057207, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(1054.27);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertNotNull(eulerIntegrator0);
      
      Collection<StepHandler> collection0 = eulerIntegrator0.getStepHandlers();
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertNotNull(collection0);
      
      int int0 = eulerIntegrator0.getEvaluations();
      assertEquals(0, int0);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = 1683.86797311;
      try { 
        eulerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1683.86797311, doubleArray0, (-1.0), doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator((-0.2735313036020583));
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertNotNull(eulerIntegrator0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1003).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(2006, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertEquals(2006, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      assertNotNull(expandableStatefulODE0);
      
      expandableStatefulODE0.setTime((-0.2735313036020583));
      assertEquals(2006, firstOrderConverter0.getDimension());
      assertEquals((-0.2735313036020583), expandableStatefulODE0.getTime(), 0.01);
      
      eulerIntegrator0.integrate(expandableStatefulODE0, (-7.709990443086711E-10));
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(2006, firstOrderConverter0.getDimension());
      assertEquals((-7.709990443086711E-10), expandableStatefulODE0.getTime(), 0.01);
      
      eulerIntegrator0.integrate(expandableStatefulODE0, (-0.2735313036020583));
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(2006, firstOrderConverter0.getDimension());
      assertEquals((-0.2735313036020583), expandableStatefulODE0.getTime(), 0.01);
      
      int int0 = eulerIntegrator0.getEvaluations();
      assertEquals(2, int0);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-0.2735313036020583), 1003, (-7.709990443086711E-10), 2);
      assertEquals(1003.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(16.56357139969712, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.2735313036020583, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertNotNull(graggBulirschStoerIntegrator0);
      
      graggBulirschStoerIntegrator0.setInterpolationControl(true, (-1115));
      assertEquals(1003.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(16.56357139969712, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.2735313036020583, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator((-0.2735313036020583));
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertNotNull(eulerIntegrator0);
      
      Collection<StepHandler> collection0 = eulerIntegrator0.getStepHandlers();
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertNotNull(collection0);
      
      int int0 = eulerIntegrator0.getEvaluations();
      assertEquals(0, int0);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      double[] doubleArray0 = new double[0];
      double double0 = eulerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) 0, doubleArray0, (-0.2735313036020583), doubleArray0);
      assertEquals((-0.2735313036020583), double0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0, Double.NaN, doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertNotNull(graggBulirschStoerIntegrator0);
      
      graggBulirschStoerIntegrator0.setOrderControl(0, (-0.2735313036020583), (-0.2735313036020583));
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(9.098790295810902E-8);
      assertEquals("classical Runge-Kutta", classicalRungeKuttaIntegrator0.getName());
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertNotNull(classicalRungeKuttaIntegrator0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      double[] doubleArray0 = new double[0];
      double double0 = 1868.405111367998;
      // Undeclared exception!
      classicalRungeKuttaIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 9.098790295810902E-8, doubleArray0, 1868.405111367998, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double double0 = 1054.27;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1868.405111367998, 1868.405111367998, 1054.27, 1054.27);
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(1868.405111367998, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals(1868.405111367998, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(1868.405111367998, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertNotNull(dormandPrince54Integrator0);
      
      int int0 = 8;
      double double1 = 0.21293538808822632;
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(8, (-408.99), (-1031.4), 8, 0.21293538808822632);
      assertEquals(408.99, adamsMoultonIntegrator0.getMinStep(), 0.01);
      assertEquals(0.2, adamsMoultonIntegrator0.getMinReduction(), 0.01);
      assertEquals(Double.NaN, adamsMoultonIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Adams-Moulton", adamsMoultonIntegrator0.getName());
      assertEquals(1.080059738892306, adamsMoultonIntegrator0.getMaxGrowth(), 0.01);
      assertEquals(1031.4, adamsMoultonIntegrator0.getMaxStep(), 0.01);
      assertEquals(649.4861707534657, adamsMoultonIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.9, adamsMoultonIntegrator0.getSafety(), 0.01);
      assertNotNull(adamsMoultonIntegrator0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(16, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      adamsMoultonIntegrator0.setStepSizeControl((double) 8, (double) 8, (-726.3214761913265), 102.49945);
      assertEquals(8.0, adamsMoultonIntegrator0.getMinStep(), 0.01);
      assertEquals(0.2, adamsMoultonIntegrator0.getMinReduction(), 0.01);
      assertEquals(Double.NaN, adamsMoultonIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(8.0, adamsMoultonIntegrator0.getMaxStep(), 0.01);
      assertEquals("Adams-Moulton", adamsMoultonIntegrator0.getName());
      assertEquals(1.080059738892306, adamsMoultonIntegrator0.getMaxGrowth(), 0.01);
      assertEquals(649.4861707534657, adamsMoultonIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.9, adamsMoultonIntegrator0.getSafety(), 0.01);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-213.5858163737751), 1868.405111367998, 1868.405111367998, (-726.3214761913265), 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      BrentSolver brentSolver0 = new BrentSolver(1000.0, (-408.99));
      assertEquals((-408.99), brentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, brentSolver0.getMin(), 0.01);
      assertEquals(0.0, brentSolver0.getStartValue(), 0.01);
      assertEquals(1000.0, brentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, brentSolver0.getMax(), 0.01);
      assertNotNull(brentSolver0);
      
      adamsMoultonIntegrator0.addEventHandler(eventHandler0, 1868.405111367998, 3771.91, 8, (UnivariateSolver) brentSolver0);
      assertEquals(8.0, adamsMoultonIntegrator0.getMinStep(), 0.01);
      assertEquals(0.2, adamsMoultonIntegrator0.getMinReduction(), 0.01);
      assertEquals(Double.NaN, adamsMoultonIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(8.0, adamsMoultonIntegrator0.getMaxStep(), 0.01);
      assertEquals("Adams-Moulton", adamsMoultonIntegrator0.getName());
      assertEquals(1.080059738892306, adamsMoultonIntegrator0.getMaxGrowth(), 0.01);
      assertEquals(649.4861707534657, adamsMoultonIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.9, adamsMoultonIntegrator0.getSafety(), 0.01);
      assertEquals((-408.99), brentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, brentSolver0.getMin(), 0.01);
      assertEquals(0.0, brentSolver0.getStartValue(), 0.01);
      assertEquals(1000.0, brentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, brentSolver0.getMax(), 0.01);
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertEquals(16, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      assertNotNull(expandableStatefulODE0);
      
      // Undeclared exception!
      adamsMoultonIntegrator0.integrate(expandableStatefulODE0, (double) 8);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator((-0.2735313036020583));
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertNotNull(eulerIntegrator0);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1443);
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1443.0, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01);
      assertNotNull(regulaFalsiSolver0);
      
      eulerIntegrator0.addEventHandler(eventHandler0, (-0.2735313036020583), 0.0, (-285), (UnivariateSolver) regulaFalsiSolver0);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(1.0E-14, regulaFalsiSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1443.0, regulaFalsiSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01);
      assertEquals(1.0E-15, regulaFalsiSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getMin(), 0.01);
      assertEquals(0.0, regulaFalsiSolver0.getStartValue(), 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1443).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(2886, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertEquals(2886, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      assertNotNull(expandableStatefulODE0);
      
      // Undeclared exception!
      eulerIntegrator0.integrate(expandableStatefulODE0, (-604.152939975));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double double0 = 1054.27;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1868.405111367998, 1868.405111367998, 1054.27, 1054.27);
      assertEquals(1868.405111367998, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(1868.405111367998, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals(1868.405111367998, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertNotNull(dormandPrince54Integrator0);
      
      int int0 = 8;
      double double1 = 0.21293538808822632;
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(8, (-408.99), (-1031.4), 8, 0.21293538808822632);
      assertEquals(1031.4, adamsMoultonIntegrator0.getMaxStep(), 0.01);
      assertEquals(1.080059738892306, adamsMoultonIntegrator0.getMaxGrowth(), 0.01);
      assertEquals(0.2, adamsMoultonIntegrator0.getMinReduction(), 0.01);
      assertEquals(Double.NaN, adamsMoultonIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(408.99, adamsMoultonIntegrator0.getMinStep(), 0.01);
      assertEquals(649.4861707534657, adamsMoultonIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Adams-Moulton", adamsMoultonIntegrator0.getName());
      assertEquals(0.9, adamsMoultonIntegrator0.getSafety(), 0.01);
      assertNotNull(adamsMoultonIntegrator0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(16, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      adamsMoultonIntegrator0.setStepSizeControl((double) 8, (double) 8, (-726.3214761913265), 102.49945);
      assertEquals(1.080059738892306, adamsMoultonIntegrator0.getMaxGrowth(), 0.01);
      assertEquals(0.2, adamsMoultonIntegrator0.getMinReduction(), 0.01);
      assertEquals(Double.NaN, adamsMoultonIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(8.0, adamsMoultonIntegrator0.getMaxStep(), 0.01);
      assertEquals(8.0, adamsMoultonIntegrator0.getMinStep(), 0.01);
      assertEquals(649.4861707534657, adamsMoultonIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Adams-Moulton", adamsMoultonIntegrator0.getName());
      assertEquals(0.9, adamsMoultonIntegrator0.getSafety(), 0.01);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      BrentSolver brentSolver0 = new BrentSolver(1000.0, (-408.99));
      assertEquals(0.0, brentSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-408.99), brentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1000.0, brentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, brentSolver0.getMin(), 0.01);
      assertEquals(0.0, brentSolver0.getMax(), 0.01);
      assertNotNull(brentSolver0);
      
      adamsMoultonIntegrator0.addEventHandler(eventHandler0, 1868.405111367998, 3771.91, 8, (UnivariateSolver) brentSolver0);
      assertEquals(1.080059738892306, adamsMoultonIntegrator0.getMaxGrowth(), 0.01);
      assertEquals(0.2, adamsMoultonIntegrator0.getMinReduction(), 0.01);
      assertEquals(Double.NaN, adamsMoultonIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(8.0, adamsMoultonIntegrator0.getMaxStep(), 0.01);
      assertEquals(8.0, adamsMoultonIntegrator0.getMinStep(), 0.01);
      assertEquals(649.4861707534657, adamsMoultonIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Adams-Moulton", adamsMoultonIntegrator0.getName());
      assertEquals(0.9, adamsMoultonIntegrator0.getSafety(), 0.01);
      assertEquals(0.0, brentSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-408.99), brentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1000.0, brentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, brentSolver0.getMin(), 0.01);
      assertEquals(0.0, brentSolver0.getMax(), 0.01);
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertEquals(16, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      assertNotNull(expandableStatefulODE0);
      
      // Undeclared exception!
      adamsMoultonIntegrator0.integrate(expandableStatefulODE0, (double) 8);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator((-0.2735313036020583));
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertNotNull(eulerIntegrator0);
      
      EulerIntegrator eulerIntegrator1 = new EulerIntegrator(4981.36577251);
      assertFalse(eulerIntegrator1.equals((Object)eulerIntegrator0));
      assertEquals("Euler", eulerIntegrator1.getName());
      assertEquals(Double.NaN, eulerIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator1.getCurrentStepStart(), 0.01);
      assertNotNull(eulerIntegrator1);
      
      int int0 = eulerIntegrator1.getEvaluations();
      assertEquals(0, int0);
      assertFalse(eulerIntegrator1.equals((Object)eulerIntegrator0));
      assertEquals("Euler", eulerIntegrator1.getName());
      assertEquals(Double.NaN, eulerIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator1.getCurrentStepStart(), 0.01);
      assertNotSame(eulerIntegrator1, eulerIntegrator0);
      
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-0.2735313036020583), 0, (-0.2735313036020583), 2499.840067463);
      assertEquals(0.2735313036020583, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(0.0, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(0.0, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertNotNull(dormandPrince54Integrator0);
      
      int int1 = dormandPrince54Integrator0.getOrder();
      assertEquals(5, int1);
      assertFalse(int1 == int0);
      assertEquals(0.2735313036020583, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(0.0, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(0.0, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      
      double double0 = dormandPrince54Integrator0.getCurrentSignedStepsize();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.2735313036020583, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(0.0, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(0.0, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator((-0.2735313036020583));
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertNotNull(eulerIntegrator0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      assertNotNull(expandableStatefulODE0);
      
      expandableStatefulODE0.setTime((-0.2735313036020583));
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals((-0.2735313036020583), expandableStatefulODE0.getTime(), 0.01);
      
      eulerIntegrator0.integrate(expandableStatefulODE0, 9.082960673843353E-9);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(9.082960673843353E-9, expandableStatefulODE0.getTime(), 0.01);
      
      int int0 = eulerIntegrator0.getEvaluations();
      assertEquals(2, int0);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator((-0.2735313036020583));
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertNotNull(eulerIntegrator0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      assertNotNull(expandableStatefulODE0);
      
      expandableStatefulODE0.setTime((-0.2735313036020583));
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals((-0.2735313036020583), expandableStatefulODE0.getTime(), 0.01);
      
      try { 
        eulerIntegrator0.integrate(expandableStatefulODE0, (-0.2735313036020583));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double double0 = 1054.27;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1868.405111367998, 1868.405111367998, 1054.27, 1054.27);
      assertEquals(1868.405111367998, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(1868.405111367998, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(1868.405111367998, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertNotNull(dormandPrince54Integrator0);
      
      int int0 = 8;
      double double1 = 0.21293538808822632;
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(8, (-408.99), (-1031.4145749), 8, 0.21293538808822632);
      assertEquals(408.99, adamsMoultonIntegrator0.getMinStep(), 0.01);
      assertEquals(1.080059738892306, adamsMoultonIntegrator0.getMaxGrowth(), 0.01);
      assertEquals(Double.NaN, adamsMoultonIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Adams-Moulton", adamsMoultonIntegrator0.getName());
      assertEquals(0.9, adamsMoultonIntegrator0.getSafety(), 0.01);
      assertEquals(1031.4145749, adamsMoultonIntegrator0.getMaxStep(), 0.01);
      assertEquals(649.4907597405455, adamsMoultonIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.2, adamsMoultonIntegrator0.getMinReduction(), 0.01);
      assertNotNull(adamsMoultonIntegrator0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      adamsMoultonIntegrator0.setStepSizeControl((double) 8, (double) 8, (-726.3214761913265), 102.49945);
      assertEquals(8.0, adamsMoultonIntegrator0.getMinStep(), 0.01);
      assertEquals(1.080059738892306, adamsMoultonIntegrator0.getMaxGrowth(), 0.01);
      assertEquals(Double.NaN, adamsMoultonIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Adams-Moulton", adamsMoultonIntegrator0.getName());
      assertEquals(0.9, adamsMoultonIntegrator0.getSafety(), 0.01);
      assertEquals(8.0, adamsMoultonIntegrator0.getMaxStep(), 0.01);
      assertEquals(649.4907597405455, adamsMoultonIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.2, adamsMoultonIntegrator0.getMinReduction(), 0.01);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      BrentSolver brentSolver0 = new BrentSolver(1000.0, (-408.99));
      assertEquals(0.0, brentSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, brentSolver0.getMin(), 0.01);
      assertEquals((-408.99), brentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, brentSolver0.getMax(), 0.01);
      assertEquals(1000.0, brentSolver0.getRelativeAccuracy(), 0.01);
      assertNotNull(brentSolver0);
      
      adamsMoultonIntegrator0.addEventHandler(eventHandler0, 1868.405111367998, 167.2, 8, (UnivariateSolver) brentSolver0);
      assertEquals(8.0, adamsMoultonIntegrator0.getMinStep(), 0.01);
      assertEquals(1.080059738892306, adamsMoultonIntegrator0.getMaxGrowth(), 0.01);
      assertEquals(Double.NaN, adamsMoultonIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Adams-Moulton", adamsMoultonIntegrator0.getName());
      assertEquals(0.9, adamsMoultonIntegrator0.getSafety(), 0.01);
      assertEquals(8.0, adamsMoultonIntegrator0.getMaxStep(), 0.01);
      assertEquals(649.4907597405455, adamsMoultonIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.2, adamsMoultonIntegrator0.getMinReduction(), 0.01);
      assertEquals(0.0, brentSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, brentSolver0.getMin(), 0.01);
      assertEquals((-408.99), brentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, brentSolver0.getMax(), 0.01);
      assertEquals(1000.0, brentSolver0.getRelativeAccuracy(), 0.01);
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      assertNotNull(expandableStatefulODE0);
      
      // Undeclared exception!
      try { 
        adamsMoultonIntegrator0.integrate(expandableStatefulODE0, (double) 8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one column
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double double0 = 1868.405111367998;
      double double1 = 1054.27;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1868.405111367998, 1868.405111367998, 1054.27, 1054.27);
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(1868.405111367998, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals(1868.405111367998, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(1868.405111367998, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertNotNull(dormandPrince54Integrator0);
      
      int int0 = 5;
      double double2 = (-3065.74);
      double double3 = 1868.405111367998;
      double double4 = (-726.3214761913265);
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(5, (-3065.74), 1868.405111367998, (-726.3214761913265), 1868.405111367998);
      assertEquals(1868.405111367998, adamsMoultonIntegrator0.getMaxStep(), 0.01);
      assertEquals(0.2, adamsMoultonIntegrator0.getMinReduction(), 0.01);
      assertEquals(3065.74, adamsMoultonIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, adamsMoultonIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Adams-Moulton", adamsMoultonIntegrator0.getName());
      assertEquals(0.9, adamsMoultonIntegrator0.getSafety(), 0.01);
      assertEquals(1.122462048309373, adamsMoultonIntegrator0.getMaxGrowth(), 0.01);
      assertEquals(2393.333300258308, adamsMoultonIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertNotNull(adamsMoultonIntegrator0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      double double5 = 1868.405111367998;
      adamsMoultonIntegrator0.setStepSizeControl(1868.405111367998, 1868.405111367998, 1868.405111367998, 0.0);
      assertEquals(1868.405111367998, adamsMoultonIntegrator0.getMaxStep(), 0.01);
      assertEquals(0.2, adamsMoultonIntegrator0.getMinReduction(), 0.01);
      assertEquals(1868.405111367998, adamsMoultonIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, adamsMoultonIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Adams-Moulton", adamsMoultonIntegrator0.getName());
      assertEquals(0.9, adamsMoultonIntegrator0.getSafety(), 0.01);
      assertEquals(1.122462048309373, adamsMoultonIntegrator0.getMaxGrowth(), 0.01);
      assertEquals(2393.333300258308, adamsMoultonIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      assertNotNull(expandableStatefulODE0);
      
      expandableStatefulODE0.setTime(1868.405111367998);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(1868.405111367998, expandableStatefulODE0.getTime(), 0.01);
      
      // Undeclared exception!
      try { 
        adamsMoultonIntegrator0.integrate(expandableStatefulODE0, 315.3969029917);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-7.618630670664422), (-7.618630670664422), (-7.618630670664422), (-7.618630670664422));
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(7.618630670664422, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(7.618630670664422, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(7.618630670664422, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertNotNull(highamHall54Integrator0);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      highamHall54Integrator0.setMaxEvaluations((-668));
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(7.618630670664422, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(7.618630670664422, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(7.618630670664422, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      
      MullerSolver mullerSolver0 = new MullerSolver(1000.0);
      assertEquals(0.0, mullerSolver0.getMax(), 0.01);
      assertEquals(1000.0, mullerSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, mullerSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver0.getMin(), 0.01);
      assertEquals(0.0, mullerSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, mullerSolver0.getFunctionValueAccuracy(), 0.01);
      assertNotNull(mullerSolver0);
      
      int int0 = mullerSolver0.getEvaluations();
      assertEquals(0, int0);
      assertEquals(0.0, mullerSolver0.getMax(), 0.01);
      assertEquals(1000.0, mullerSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, mullerSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver0.getMin(), 0.01);
      assertEquals(0.0, mullerSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, mullerSolver0.getFunctionValueAccuracy(), 0.01);
      
      highamHall54Integrator0.addEventHandler(eventHandler0, (-7.618630670664422), 0.0, 126, (UnivariateSolver) mullerSolver0);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(7.618630670664422, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(7.618630670664422, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(7.618630670664422, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(0.0, mullerSolver0.getMax(), 0.01);
      assertEquals(1000.0, mullerSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, mullerSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver0.getMin(), 0.01);
      assertEquals(0.0, mullerSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, mullerSolver0.getFunctionValueAccuracy(), 0.01);
      
      Collection<EventHandler> collection0 = highamHall54Integrator0.getEventHandlers();
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(7.618630670664422, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(7.618630670664422, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(7.618630670664422, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertNotNull(collection0);
      assertTrue(collection0.contains(eventHandler0));
      
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(2128, 2128, 2128, 2128, 2128);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double double0 = 1868.405111367998;
      double double1 = 1054.27;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1868.405111367998, 1868.405111367998, 1054.27, 1054.27);
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals(1868.405111367998, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(1868.405111367998, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(1868.405111367998, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertNotNull(dormandPrince54Integrator0);
      
      int int0 = 5;
      double double2 = (-3065.74);
      double double3 = 1868.405111367998;
      double double4 = (-726.3214761913265);
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(5, (-3065.74), 1868.405111367998, (-726.3214761913265), 1868.405111367998);
      assertEquals(1.122462048309373, adamsMoultonIntegrator0.getMaxGrowth(), 0.01);
      assertEquals(Double.NaN, adamsMoultonIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Adams-Moulton", adamsMoultonIntegrator0.getName());
      assertEquals(0.9, adamsMoultonIntegrator0.getSafety(), 0.01);
      assertEquals(2393.333300258308, adamsMoultonIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(3065.74, adamsMoultonIntegrator0.getMinStep(), 0.01);
      assertEquals(1868.405111367998, adamsMoultonIntegrator0.getMaxStep(), 0.01);
      assertEquals(0.2, adamsMoultonIntegrator0.getMinReduction(), 0.01);
      assertNotNull(adamsMoultonIntegrator0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(10, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      double double5 = 1868.405111367998;
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      assertNotNull(dummyStepHandler0);
      
      adamsMoultonIntegrator0.addStepHandler(dummyStepHandler0);
      assertEquals(1.122462048309373, adamsMoultonIntegrator0.getMaxGrowth(), 0.01);
      assertEquals(Double.NaN, adamsMoultonIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Adams-Moulton", adamsMoultonIntegrator0.getName());
      assertEquals(0.9, adamsMoultonIntegrator0.getSafety(), 0.01);
      assertEquals(2393.333300258308, adamsMoultonIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(3065.74, adamsMoultonIntegrator0.getMinStep(), 0.01);
      assertEquals(1868.405111367998, adamsMoultonIntegrator0.getMaxStep(), 0.01);
      assertEquals(0.2, adamsMoultonIntegrator0.getMinReduction(), 0.01);
      
      adamsMoultonIntegrator0.setStepSizeControl(1868.405111367998, 1868.405111367998, 1868.405111367998, 0.0);
      assertEquals(1.122462048309373, adamsMoultonIntegrator0.getMaxGrowth(), 0.01);
      assertEquals(Double.NaN, adamsMoultonIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Adams-Moulton", adamsMoultonIntegrator0.getName());
      assertEquals(0.9, adamsMoultonIntegrator0.getSafety(), 0.01);
      assertEquals(2393.333300258308, adamsMoultonIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(1868.405111367998, adamsMoultonIntegrator0.getMinStep(), 0.01);
      assertEquals(1868.405111367998, adamsMoultonIntegrator0.getMaxStep(), 0.01);
      assertEquals(0.2, adamsMoultonIntegrator0.getMinReduction(), 0.01);
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertEquals(10, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      assertNotNull(expandableStatefulODE0);
      
      // Undeclared exception!
      adamsMoultonIntegrator0.integrate(expandableStatefulODE0, 315.3969029917);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-7.618630670664422), (-7.618630670664422), (-7.618630670664422), (-7.618630670664422));
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(7.618630670664422, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(7.618630670664422, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(7.618630670664422, highamHall54Integrator0.getMinStep(), 0.01);
      assertNotNull(highamHall54Integrator0);
      
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1261.2, (-7.618630670664422), (-7.618630670664422), 1868.405111367998);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(98.02355330144877, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(7.618630670664422, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(1261.2, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertNotNull(dormandPrince853Integrator0);
      
      dormandPrince853Integrator0.setMaxEvaluations((-1));
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(98.02355330144877, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(7.618630670664422, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(1261.2, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      
      double double0 = 619.4;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1261.2;
      doubleArray0[1] = 1868.405111367998;
      doubleArray0[2] = (double) (-1);
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(2998, (-1), 1868.405111367998, doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double double0 = 1868.405111367998;
      double double1 = 1054.27;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1868.405111367998, 1868.405111367998, 1054.27, 1054.27);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(1868.405111367998, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(1868.405111367998, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals(1868.405111367998, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertNotNull(dormandPrince54Integrator0);
      
      int int0 = 5;
      double double2 = (-3065.74);
      double double3 = 1868.405111367998;
      double double4 = (-726.3214761913265);
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(5, (-3065.74), 1868.405111367998, (-726.3214761913265), 1868.405111367998);
      assertEquals(0.2, adamsMoultonIntegrator0.getMinReduction(), 0.01);
      assertEquals(Double.NaN, adamsMoultonIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(3065.74, adamsMoultonIntegrator0.getMinStep(), 0.01);
      assertEquals("Adams-Moulton", adamsMoultonIntegrator0.getName());
      assertEquals(0.9, adamsMoultonIntegrator0.getSafety(), 0.01);
      assertEquals(2393.333300258308, adamsMoultonIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(1868.405111367998, adamsMoultonIntegrator0.getMaxStep(), 0.01);
      assertEquals(1.122462048309373, adamsMoultonIntegrator0.getMaxGrowth(), 0.01);
      assertNotNull(adamsMoultonIntegrator0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      double double5 = 1868.405111367998;
      adamsMoultonIntegrator0.setStepSizeControl(1868.405111367998, 1868.405111367998, 1868.405111367998, 0.0);
      assertEquals(0.2, adamsMoultonIntegrator0.getMinReduction(), 0.01);
      assertEquals(Double.NaN, adamsMoultonIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(1868.405111367998, adamsMoultonIntegrator0.getMinStep(), 0.01);
      assertEquals("Adams-Moulton", adamsMoultonIntegrator0.getName());
      assertEquals(0.9, adamsMoultonIntegrator0.getSafety(), 0.01);
      assertEquals(2393.333300258308, adamsMoultonIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(1868.405111367998, adamsMoultonIntegrator0.getMaxStep(), 0.01);
      assertEquals(1.122462048309373, adamsMoultonIntegrator0.getMaxGrowth(), 0.01);
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      assertNotNull(expandableStatefulODE0);
      
      // Undeclared exception!
      try { 
        adamsMoultonIntegrator0.integrate(expandableStatefulODE0, 315.3969029917);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one column
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(868);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("midpoint", midpointIntegrator0.getName());
      assertNotNull(midpointIntegrator0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2089.0);
      doubleArray0[1] = 4.0889180422033095E8;
      doubleArray0[2] = (double) 868;
      doubleArray0[3] = 4.0889180422033095E8;
      doubleArray0[4] = (double) 868;
      doubleArray0[5] = 1380.5178027;
      try { 
        midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 4.0889180422033095E8, doubleArray0, 4.0889180422033095E8, (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1485.0143278, (-1.0), (-2919.64615467529), (-1.0));
      assertEquals(1.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(38.53588363849985, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(1485.0143278, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertNotNull(graggBulirschStoerIntegrator0);
      
      int int0 = graggBulirschStoerIntegrator0.getMaxEvaluations();
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(1.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(38.53588363849985, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(1485.0143278, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      BrentSolver brentSolver0 = new BrentSolver(1133.477534, (-122.5208), 5.359568079675375E-212);
      assertEquals(0.0, brentSolver0.getStartValue(), 0.01);
      assertEquals(0.0, brentSolver0.getMax(), 0.01);
      assertEquals(5.359568079675375E-212, brentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-122.5208), brentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1133.477534, brentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, brentSolver0.getMin(), 0.01);
      assertNotNull(brentSolver0);
      
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 359.954676133, 1133.477534, 1, (UnivariateSolver) brentSolver0);
      assertEquals(1.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(38.53588363849985, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(1485.0143278, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0.0, brentSolver0.getStartValue(), 0.01);
      assertEquals(0.0, brentSolver0.getMax(), 0.01);
      assertEquals(5.359568079675375E-212, brentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-122.5208), brentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1133.477534, brentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, brentSolver0.getMin(), 0.01);
      
      int int1 = graggBulirschStoerIntegrator0.getMaxEvaluations();
      assertEquals(Integer.MAX_VALUE, int1);
      assertTrue(int1 == int0);
      assertEquals(1.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(38.53588363849985, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(1485.0143278, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 1);
      assertEquals(1.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(38.53588363849985, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(1485.0143278, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 1);
      assertEquals(1.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(38.53588363849985, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(1485.0143278, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      BrentSolver brentSolver1 = new BrentSolver(4.0939972479624634E35, 0.0);
      assertFalse(brentSolver1.equals((Object)brentSolver0));
      assertEquals(0.0, brentSolver1.getStartValue(), 0.01);
      assertEquals(0.0, brentSolver1.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, brentSolver1.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, brentSolver1.getMax(), 0.01);
      assertEquals(0.0, brentSolver1.getMin(), 0.01);
      assertEquals(4.0939972479624634E35, brentSolver1.getRelativeAccuracy(), 0.01);
      assertNotNull(brentSolver1);
      
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler1, 0.0, (-3522.1), Integer.MAX_VALUE, (UnivariateSolver) brentSolver1);
      assertFalse(brentSolver1.equals((Object)brentSolver0));
      assertEquals(1.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(38.53588363849985, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(1485.0143278, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0.0, brentSolver1.getStartValue(), 0.01);
      assertEquals(0.0, brentSolver1.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, brentSolver1.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, brentSolver1.getMax(), 0.01);
      assertEquals(0.0, brentSolver1.getMin(), 0.01);
      assertEquals(4.0939972479624634E35, brentSolver1.getRelativeAccuracy(), 0.01);
      assertNotSame(brentSolver1, brentSolver0);
      
      graggBulirschStoerIntegrator0.setStepSizeControl(1868.405111367998, (-283.471050013039), doubleArray0, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertEquals(38.53588363849985, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(1868.405111367998, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(283.471050013039, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      String string0 = graggBulirschStoerIntegrator0.getName();
      assertEquals("Gragg-Bulirsch-Stoer", string0);
      assertEquals(38.53588363849985, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(1868.405111367998, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(283.471050013039, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertNotNull(string0);
      
      int int2 = graggBulirschStoerIntegrator0.getEvaluations();
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(38.53588363849985, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(1868.405111367998, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(283.471050013039, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-2394.7923));
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("midpoint", midpointIntegrator0.getName());
      assertNotNull(midpointIntegrator0);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1677.03551;
      doubleArray0[1] = (-2394.7923);
      doubleArray0[2] = 1677.03551;
      doubleArray0[3] = (-2394.7923);
      doubleArray0[4] = (-2394.7923);
      doubleArray0[5] = (-2394.7923);
      doubleArray0[6] = (-2394.7923);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1677.03551, 1677.03551, doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1677.03551, (-2394.7923), 1677.03551, (-2394.7923), (-2394.7923), (-2394.7923), (-2394.7923)}, doubleArray0, 0.01);
      assertEquals(1677.03551, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(1677.03551, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(1677.03551, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertNotNull(graggBulirschStoerIntegrator0);
      
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 2490);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {1677.03551, (-2394.7923), 1677.03551, (-2394.7923), (-2394.7923), (-2394.7923), (-2394.7923)}, doubleArray0, 0.01);
      assertEquals(1677.03551, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(1677.03551, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(1677.03551, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      
      String string0 = midpointIntegrator0.getName();
      assertEquals("midpoint", string0);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("midpoint", midpointIntegrator0.getName());
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        midpointIntegrator0.computeDerivatives(1868.405111367998, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 15.0;
      doubleArray0[1] = 15.0;
      doubleArray0[2] = Double.NaN;
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = Double.NaN;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(15.0, Double.NaN, doubleArray0, doubleArray1);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {15.0, 15.0, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray1, 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(15.0, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertNotNull(dormandPrince853Integrator0);
      
      dormandPrince853Integrator0.setMaxEvaluations(9);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {15.0, 15.0, Double.NaN}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {Double.NaN}, doubleArray1, 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(15.0, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      RiddersSolver riddersSolver0 = new RiddersSolver(517.4661, (-1612.252518));
      assertEquals(517.4661, riddersSolver0.getRelativeAccuracy(), 0.01);
      assertEquals((-1612.252518), riddersSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, riddersSolver0.getStartValue(), 0.01);
      assertEquals(0.0, riddersSolver0.getMin(), 0.01);
      assertEquals(0.0, riddersSolver0.getMax(), 0.01);
      assertEquals(1.0E-15, riddersSolver0.getFunctionValueAccuracy(), 0.01);
      assertNotNull(riddersSolver0);
      
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(3825.0, 0.29981517791748047, Double.NaN, (-4110.604400708));
      assertEquals(3825.0, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(0.29981517791748047, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals(33.86433308858101, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertNotNull(dormandPrince54Integrator0);
      
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0.29981517791748047);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("midpoint", midpointIntegrator0.getName());
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertNotNull(midpointIntegrator0);
      
      // Undeclared exception!
      try { 
        midpointIntegrator0.integrate((FirstOrderDifferentialEquations) null, (-1612.252518), doubleArray0, 0.0, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 1000.0;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 1000.0, 1000.0, (-2640.36253877));
      assertEquals(1000.0, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(0.0, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(0.0, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertNotNull(dormandPrince853Integrator0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(2, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      double[] doubleArray0 = new double[0];
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1000.0, doubleArray0, 2868.405111367998, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 2
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double double0 = (-2.516866097506943E81);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2.516866097506943E81), (-2.516866097506943E81), (-2.516866097506943E81), (-2.516866097506943E81));
      assertEquals(2.516866097506943E81, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(2.516866097506943E81, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(2.516866097506943E81, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertNotNull(dormandPrince54Integrator0);
      
      double double1 = dormandPrince54Integrator0.getCurrentSignedStepsize();
      assertEquals(2.516866097506943E81, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(2.516866097506943E81, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(2.516866097506943E81, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(2.516866097506943E81, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      
      double[] doubleArray0 = new double[5];
      int int0 = 1;
      double double2 = 934.91;
      // Undeclared exception!
      try { 
        dormandPrince54Integrator0.initializeStep(false, 1, doubleArray0, 934.91, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator((-0.2735313036020583));
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertNotNull(eulerIntegrator0);
      
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(2042.4);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("midpoint", midpointIntegrator0.getName());
      assertNotNull(midpointIntegrator0);
      
      int int0 = midpointIntegrator0.getEvaluations();
      assertEquals(0, int0);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("midpoint", midpointIntegrator0.getName());
      
      double double0 = midpointIntegrator0.getCurrentSignedStepsize();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("midpoint", midpointIntegrator0.getName());
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1285.27);
      doubleArray0[1] = 4.547473508864641E-10;
      doubleArray0[2] = 1639.41787133;
      doubleArray0[3] = 2042.4;
      try { 
        midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 4.547473508864641E-10, doubleArray0, (-0.2735313036020583), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0.0);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("midpoint", midpointIntegrator0.getName());
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertNotNull(midpointIntegrator0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(117).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(234, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertEquals(234, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      assertNotNull(expandableStatefulODE0);
      
      midpointIntegrator0.setMaxEvaluations(1218);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("midpoint", midpointIntegrator0.getName());
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      double double0 = (-690.905375765079);
      // Undeclared exception!
      midpointIntegrator0.integrate(expandableStatefulODE0, (-690.905375765079));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1429.451311105613));
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gill", gillIntegrator0.getName());
      assertNotNull(gillIntegrator0);
      
      double double0 = gillIntegrator0.getCurrentStepStart();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gill", gillIntegrator0.getName());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double double0 = 0.0;
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(0.0);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("classical Runge-Kutta", classicalRungeKuttaIntegrator0.getName());
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01);
      assertNotNull(classicalRungeKuttaIntegrator0);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double1 = 1671.224515;
      Collection<EventHandler> collection0 = classicalRungeKuttaIntegrator0.getEventHandlers();
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("classical Runge-Kutta", classicalRungeKuttaIntegrator0.getName());
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01);
      assertNotNull(collection0);
      assertFalse(collection0.contains(eventHandler0));
      
      int int0 = (-958);
      classicalRungeKuttaIntegrator0.addEventHandler(eventHandler0, 1671.224515, 3504.487310578576, (-958));
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("classical Runge-Kutta", classicalRungeKuttaIntegrator0.getName());
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01);
      
      double double2 = classicalRungeKuttaIntegrator0.getCurrentStepStart();
      assertEquals(Double.NaN, double2, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("classical Runge-Kutta", classicalRungeKuttaIntegrator0.getName());
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01);
      
      double double3 = 0.0;
      double[] doubleArray0 = new double[0];
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = null;
      try {
        adamsBashforthIntegrator0 = new AdamsBashforthIntegrator((-958), 0.0, Double.NaN, doubleArray0, doubleArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(689.549861, 689.549861, (-2759.6741914514), 0.0);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(689.549861, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals(689.549861, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(689.549861, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertNotNull(dormandPrince54Integrator0);
      
      int int0 = dormandPrince54Integrator0.getEvaluations();
      assertEquals(0, int0);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(689.549861, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals(689.549861, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(689.549861, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      assertNotNull(dummyStepHandler0);
      
      dormandPrince54Integrator0.addStepHandler(dummyStepHandler0);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(689.549861, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals(689.549861, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(689.549861, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double double0 = (-1704.473042335);
      double double1 = Double.NaN;
      double double2 = 2615.8627255383535;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1704.473042335), (-1704.473042335), Double.NaN, 2615.8627255383535);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(1704.473042335, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(1704.473042335, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(1704.473042335, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertNotNull(dormandPrince853Integrator0);
      
      int int0 = 0;
      dormandPrince853Integrator0.setMaxEvaluations(0);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(1704.473042335, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(1704.473042335, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(1704.473042335, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2615.8627255383535;
      try { 
        dormandPrince853Integrator0.computeDerivatives(2615.8627255383535, doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 4117.2175693;
      doubleArray0[1] = 4117.2175693;
      doubleArray0[2] = 1000.0;
      doubleArray0[3] = 4117.2175693;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1740.08985917, 4117.2175693, doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {4117.2175693, 4117.2175693, 1000.0, 4117.2175693}, doubleArray0, 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(2676.6263355828146, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(1740.08985917, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(4117.2175693, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertNotNull(highamHall54Integrator0);
      
      Collection<EventHandler> collection0 = highamHall54Integrator0.getEventHandlers();
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {4117.2175693, 4117.2175693, 1000.0, 4117.2175693}, doubleArray0, 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(2676.6263355828146, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(1740.08985917, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(4117.2175693, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertNotNull(collection0);
      
      int int0 = highamHall54Integrator0.getMaxEvaluations();
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {4117.2175693, 4117.2175693, 1000.0, 4117.2175693}, doubleArray0, 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(2676.6263355828146, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(1740.08985917, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(4117.2175693, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01);
      assertNotNull(illinoisSolver0);
      
      highamHall54Integrator0.addEventHandler(eventHandler0, 4117.2175693, 1000.0, Integer.MAX_VALUE, (UnivariateSolver) illinoisSolver0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {4117.2175693, 4117.2175693, 1000.0, 4117.2175693}, doubleArray0, 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(2676.6263355828146, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(1740.08985917, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(4117.2175693, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-14, illinoisSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-6, illinoisSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 0.0, 0.0, 0.0);
      assertEquals(0.0, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertNotNull(highamHall54Integrator0);
      
      Collection<EventHandler> collection0 = highamHall54Integrator0.getEventHandlers();
      assertEquals(0.0, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertNotNull(collection0);
      
      highamHall54Integrator0.clearEventHandlers();
      assertEquals(0.0, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      
      int int0 = highamHall54Integrator0.getMaxEvaluations();
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(0.0, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      
      highamHall54Integrator0.setInitialStepSize(1192.417);
      assertEquals(0.0, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      
      double double0 = highamHall54Integrator0.getCurrentStepStart();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      
      highamHall54Integrator0.clearStepHandlers();
      assertEquals(0.0, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double double0 = 0.0;
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      int int0 = 1218;
      midpointIntegrator0.setMaxEvaluations(1218);
      double double1 = (-690.905375765079);
      try { 
        midpointIntegrator0.integrate(expandableStatefulODE0, (-690.905375765079));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (1,218) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(1000.0);
      eulerIntegrator0.addEventHandler((EventHandler) null, 2.0760536193847656, 2.0760536193847656, (-1499));
      int int0 = eulerIntegrator0.getMaxEvaluations();
      assertEquals(Integer.MAX_VALUE, int0);
      
      eulerIntegrator0.getEvaluations();
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 1.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1.0, 1.0, doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 1.0, 0.0, Integer.MAX_VALUE);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = (-501.56371);
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.initializeStep(true, 0, doubleArray0, (-501.56371), doubleArray0, doubleArray1, doubleArray1, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-768.264830363), (-0.3111643669578199), 0.0, 718.791);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2214.51203);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-0.3111643669578199);
      doubleArray0[3] = (-0.3111643669578199);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-2214.51203);
      doubleArray0[7] = 0.225;
      doubleArray0[8] = (-0.3111643669578199);
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-2214.51203), doubleArray0, 0.225, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(2726.37554193);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.NEITHER;
      StepNormalizer stepNormalizer0 = new StepNormalizer((-2291.914), fixedStepHandler0, stepNormalizerBounds0);
      classicalRungeKuttaIntegrator0.addStepHandler(stepNormalizer0);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 0.0, 0.0, 0.0);
      highamHall54Integrator0.getEventHandlers();
      highamHall54Integrator0.setInitialStepSize(1192.417);
      highamHall54Integrator0.getCurrentStepStart();
      highamHall54Integrator0.clearStepHandlers();
      assertEquals(0.0, highamHall54Integrator0.getMaxStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-48.0), 0.16666666666666666, (-0.015319437748624402), 0.16666666666666666);
      dormandPrince54Integrator0.clearEventHandlers();
      dormandPrince54Integrator0.getEventHandlers();
      dormandPrince54Integrator0.setMaxEvaluations(2490);
      dormandPrince54Integrator0.setMaxEvaluations(2490);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-48.0);
      doubleArray0[1] = (double) 2490;
      doubleArray0[2] = (double) 2490;
      doubleArray0[3] = 0.16666666666666666;
      doubleArray0[4] = 491.093129;
      doubleArray0[5] = (-48.0);
      doubleArray0[6] = (-691.41);
      doubleArray0[7] = 0.16666666666666666;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(2490, 491.093129, doubleArray0, doubleArray0);
      highamHall54Integrator0.getEventHandlers();
      highamHall54Integrator0.setInitialStepSize(491.093129);
      highamHall54Integrator0.getCurrentStepStart();
      highamHall54Integrator0.clearStepHandlers();
      assertEquals(2490.0, highamHall54Integrator0.getMinStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 0.0, 0.0, 0.0);
      highamHall54Integrator0.getEventHandlers();
      highamHall54Integrator0.setInitialStepSize(1192.417);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(4.547473508864641E-10, 0.0, 1355.282469771, 0.0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 4.547473508864641E-10;
      doubleArray0[1] = 1192.417;
      doubleArray0[2] = (double) (-291);
      doubleArray0[3] = 3091.2;
      doubleArray0[4] = (-1037.49);
      doubleArray0[5] = 3091.2;
      doubleArray0[6] = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator1 = new GraggBulirschStoerIntegrator(0.0, 4.547473508864641E-10, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator1.setInterpolationControl(true, 0);
      MullerSolver2 mullerSolver2_0 = new MullerSolver2();
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-3324.767603490982));
      midpointIntegrator0.addEventHandler((EventHandler) null, 3403.642, 1868.405111367998, 271, (UnivariateSolver) mullerSolver2_0);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(157.1292126812);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 157.1292126812;
      doubleArray0[1] = 157.1292126812;
      doubleArray0[2] = 157.1292126812;
      doubleArray0[3] = 157.1292126812;
      doubleArray0[4] = 157.1292126812;
      doubleArray0[5] = 157.1292126812;
      doubleArray0[6] = 157.1292126812;
      // Undeclared exception!
      try { 
        threeEighthesIntegrator0.computeDerivatives(157.1292126812, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-156.3692893);
      doubleArray0[1] = (-156.3692893);
      doubleArray0[2] = (-1818.97481959);
      doubleArray0[3] = (-1818.97481959);
      doubleArray0[4] = (-156.3692893);
      doubleArray0[5] = (-944.4423629504577);
      doubleArray0[6] = (-156.3692893);
      doubleArray0[7] = (-156.3692893);
      doubleArray0[8] = (-1818.97481959);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-1818.97481959), (-156.3692893), doubleArray0, doubleArray0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-156.3692893), (-401.13951078628696), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setControlFactors((-1818.97481959), 0.0, (-397.22389442), (-1084.55));
      graggBulirschStoerIntegrator0.setOrderControl(0, (-106.40881171), (-401.13951078628696));
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      DummyStepHandler.getInstance();
      dormandPrince54Integrator0.addStepHandler(dummyStepHandler0);
      graggBulirschStoerIntegrator0.addStepHandler(dummyStepHandler0);
      Collection<StepHandler> collection0 = dormandPrince54Integrator0.getStepHandlers();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(197.97088956353, 197.97088956353, 197.97088956353, 15.0);
      dormandPrince853Integrator0.setMaxEvaluations(0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(15.0, 15.0, (-0.022459085953066622), 15.0);
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 2080);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 15.0;
      doubleArray0[3] = 15.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 287;
      doubleArray0[6] = Double.NaN;
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(287, 0.0, 15.0, doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double double0 = 0.16666666666666666;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-48.0), 0.16666666666666666, (-0.015319437748624402), 0.16666666666666666);
      dormandPrince54Integrator0.clearEventHandlers();
      dormandPrince54Integrator0.getEventHandlers();
      dormandPrince54Integrator0.setMaxEvaluations(2490);
      dormandPrince54Integrator0.setMaxEvaluations(2490);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-48.0);
      doubleArray0[1] = (double) (-1440);
      double double1 = (-187.5687);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double2 = 174.83;
      SecantSolver secantSolver0 = new SecantSolver();
      secantSolver0.getEvaluations();
      dormandPrince54Integrator0.addEventHandler(eventHandler0, 174.83, (-1440.0), (-349), (UnivariateSolver) secantSolver0);
      // Undeclared exception!
      try { 
        dormandPrince54Integrator0.initializeStep(false, (-1440), doubleArray0, (-187.5687), doubleArray0, doubleArray0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
