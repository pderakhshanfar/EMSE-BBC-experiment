/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 12:05:04 GMT 2021
 */

package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.solvers.BisectionSolver;
import org.apache.commons.math3.analysis.solvers.MullerSolver;
import org.apache.commons.math3.analysis.solvers.RegulaFalsiSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator;
import org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.EulerIntegrator;
import org.apache.commons.math3.ode.nonstiff.GillIntegrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.nonstiff.MidpointIntegrator;
import org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.apache.commons.math3.ode.sampling.StepNormalizerBounds;
import org.apache.commons.math3.ode.sampling.StepNormalizerMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegrator_ESTest extends AbstractIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 0;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double double0 = 1402.49;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(462);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(1000.0, (-2817.0), (-2817.0), (double)0, (-3278.53249)).when(eventHandler0).g(anyDouble() , any(double[].class));
      double[] doubleArray0 = new double[0];
      eulerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1402.49, doubleArray0, 0.0, doubleArray0);
      double[] doubleArray1 = new double[0];
      eulerIntegrator0.computeDerivatives((-2817.0), doubleArray1, doubleArray0);
      eulerIntegrator0.addEventHandler(eventHandler0, 1000.0, 1402.49, 462, (UnivariateSolver) regulaFalsiSolver0);
      eulerIntegrator0.getEvaluations();
      // Undeclared exception!
      eulerIntegrator0.integrate(expandableStatefulODE0, 0.0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double double0 = 1402.49;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(462);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[0];
      eulerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1402.49, doubleArray0, 2.970445258959489E-73, doubleArray0);
      double[] doubleArray1 = new double[0];
      eulerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1000.0, doubleArray1, (double) 0, doubleArray0);
      // Undeclared exception!
      eulerIntegrator0.integrate(expandableStatefulODE0, (-629.0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 0;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double double0 = 1402.49;
      int int1 = 462;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(462);
      double double1 = (-3278.53249);
      eulerIntegrator0.setMaxEvaluations(0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[0];
      try { 
        eulerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1402.49, doubleArray0, (double) 0, doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(462);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1.0, 1052.492, 981.269, 3593.857232908194);
      dormandPrince853Integrator0.setMaxGrowth(3593.857232908194);
      double[] doubleArray0 = new double[0];
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter1, 3593.857232908194, doubleArray0, 3593.857232908194, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-563.710644));
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer0 = new StepNormalizer(2.1775261204E-314, fixedStepHandler0, stepNormalizerMode0);
      threeEighthesIntegrator0.addStepHandler(stepNormalizer0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      threeEighthesIntegrator0.addEventHandler(eventHandler0, (double) 5346, (double) 0, 2143247338);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      threeEighthesIntegrator0.getEventHandlers();
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      threeEighthesIntegrator0.integrate(expandableStatefulODE0, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-657.0));
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizer stepNormalizer0 = new StepNormalizer(8.81860282490643E125, fixedStepHandler0, stepNormalizerMode0);
      threeEighthesIntegrator0.addStepHandler(stepNormalizer0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(5346).when(secondOrderDifferentialEquations0).getDimension();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      threeEighthesIntegrator0.addEventHandler(eventHandler0, (-657.0), 0.0, 0);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      threeEighthesIntegrator0.getEventHandlers();
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      threeEighthesIntegrator0.integrate(expandableStatefulODE0, (-657.0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      int int0 = 0;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(462);
      double double0 = 1.1368683772161603E-10;
      double double1 = (-3278.53249);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(1000.0, (-2817.0)).when(eventHandler0).g(anyDouble() , any(double[].class));
      double[] doubleArray0 = new double[0];
      double double2 = 0.0;
      eulerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1.1368683772161603E-10, doubleArray0, 1402.49, doubleArray0);
      eulerIntegrator0.computeDerivatives((-3057.390480384085), doubleArray0, doubleArray0);
      eulerIntegrator0.addEventHandler(eventHandler0, (-1309.9), 1000.0, 0, (UnivariateSolver) regulaFalsiSolver0);
      try { 
        eulerIntegrator0.integrate(expandableStatefulODE0, (-3057.390480384085));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(462);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(1000.0, (-2817.0), 1.1368683772161603E-10, (double)0, (-3278.53249)).when(eventHandler0).g(anyDouble() , any(double[].class));
      double[] doubleArray0 = new double[0];
      eulerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1402.49, doubleArray0, 291.5135, doubleArray0);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 1402.49;
      doubleArray1[1] = 1402.49;
      doubleArray1[2] = (double) 462;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 1402.49;
      doubleArray2[1] = 1402.49;
      doubleArray2[2] = 1402.49;
      doubleArray2[3] = (double) 462;
      doubleArray2[4] = (double) 462;
      doubleArray2[5] = 1402.49;
      eulerIntegrator0.setMaxEvaluations(462);
      doubleArray2[6] = (double) 462;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1274.0337017, 1000.0, 1402.49, 462.0);
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler1, 9.350990339947455E-147, (-3278.53249), 0, (UnivariateSolver) regulaFalsiSolver0);
      eulerIntegrator0.computeDerivatives(1402.49, doubleArray1, doubleArray2);
      eulerIntegrator0.addEventHandler(eventHandler0, 1402.49, (-1352.797), 462, (UnivariateSolver) regulaFalsiSolver0);
      try { 
        eulerIntegrator0.integrate(expandableStatefulODE0, 657.0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (462) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      int int0 = 462;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(462);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(1000.0, (-2817.0), 1.1368683772161603E-10, (double)0, (-3278.53249)).when(eventHandler0).g(anyDouble() , any(double[].class));
      double[] doubleArray0 = new double[0];
      eulerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1402.49, doubleArray0, 291.5135, doubleArray0);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 1402.49;
      doubleArray1[1] = 1402.49;
      doubleArray1[2] = (double) 462;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 1402.49;
      doubleArray2[1] = 1402.49;
      doubleArray2[2] = 1402.49;
      doubleArray2[3] = (double) 462;
      doubleArray2[4] = (double) 462;
      doubleArray2[5] = 1402.49;
      doubleArray2[6] = (double) 462;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1274.0337017, 1000.0, 1402.49, 462.0);
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler1, 9.350990339947455E-147, (-3278.53249), 0, (UnivariateSolver) regulaFalsiSolver0);
      eulerIntegrator0.computeDerivatives(1402.49, doubleArray1, doubleArray2);
      eulerIntegrator0.addEventHandler(eventHandler0, 1402.49, (-1352.797), 462, (UnivariateSolver) regulaFalsiSolver0);
      double double0 = 657.0;
      // Undeclared exception!
      eulerIntegrator0.integrate(expandableStatefulODE0, 657.0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(46).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-517.626086717);
      doubleArray1[1] = (-517.626086717);
      doubleArray1[2] = (-3307.1459524414195);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1402.49, (-3307.1459524414195), doubleArray0, doubleArray1);
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (-3307.1459524414195);
      doubleArray2[1] = (-517.626086717);
      doubleArray2[2] = 1052.492;
      doubleArray2[3] = 1052.492;
      doubleArray2[4] = (-3307.1459524414195);
      doubleArray2[5] = 1052.492;
      doubleArray2[6] = 1052.492;
      doubleArray2[7] = (-1780.2846959339);
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter1, (-1780.2846959339), doubleArray0, 2006.465124715, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      int int0 = 462;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(462);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      double[] doubleArray0 = new double[0];
      eulerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1402.49, doubleArray0, 291.5135, doubleArray0);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 1402.49;
      doubleArray1[1] = 1402.49;
      doubleArray1[2] = (double) 462;
      double[] doubleArray2 = new double[7];
      doubleArray2[0] = 1402.49;
      doubleArray2[1] = 1402.49;
      doubleArray2[2] = 1402.49;
      doubleArray2[3] = (double) 462;
      doubleArray2[4] = (double) 462;
      doubleArray2[5] = 1402.49;
      doubleArray2[6] = (double) 462;
      eulerIntegrator0.computeDerivatives(1402.49, doubleArray1, doubleArray2);
      eulerIntegrator0.addEventHandler(eventHandler0, 1402.49, (-1352.797), 462, (UnivariateSolver) regulaFalsiSolver0);
      double double0 = 657.0;
      // Undeclared exception!
      eulerIntegrator0.integrate(expandableStatefulODE0, 657.0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1.0), (-976.5843331803959), (-1.0), (-657.0));
      dormandPrince853Integrator0.setSafety(1302.2713);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.3416208028793335, doubleArray0, 0.0, doubleArray0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1.0), (-488.7), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setStabilityCheck(false, 5, 1293, 2249);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator1 = new GraggBulirschStoerIntegrator((-2655.098830844117), 657.0, 5, 5);
      graggBulirschStoerIntegrator1.setInterpolationControl(false, 1590);
      graggBulirschStoerIntegrator1.setMaxEvaluations(1746);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1.1368683772161603E-10, (-1404.895942), 0.6471850872039795, (-1404.895942));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1052.492, doubleArray0, 1.1368683772161603E-10, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator((-1.6E-8));
      // Undeclared exception!
      try { 
        eulerIntegrator0.integrate((ExpandableStatefulODE) null, 657.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-58.0);
      doubleArray0[1] = 3096.913676130665;
      doubleArray0[2] = (-657.0);
      doubleArray0[3] = (-1990.1676382667335);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-657.0), (-1990.1676382667335), doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 3096.913676130665;
      doubleArray1[1] = (-1990.1676382667335);
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-58.0), doubleArray0, 2.2737367544323206E-10, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(Double.NaN);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(664).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime((-1233.86));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-517.626086717), (-517.626086717), (double)664, 1402.49, 1402.49).when(eventHandler0).g(anyDouble() , any(double[].class));
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      eulerIntegrator0.addEventHandler(eventHandler0, (-163.06833524), 995.0, 462, (UnivariateSolver) regulaFalsiSolver0);
      // Undeclared exception!
      eulerIntegrator0.integrate(expandableStatefulODE0, (-517.626086717));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double double0 = Double.NaN;
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(Double.NaN);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(657.730114512042, (-222.85174696718), Double.NaN, 1.0, 657.730114512042).when(eventHandler0).g(anyDouble() , any(double[].class));
      double double1 = 995.0;
      int int0 = 462;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      eulerIntegrator0.addEventHandler(eventHandler0, (-163.06833524), 995.0, 462, (UnivariateSolver) regulaFalsiSolver0);
      double double2 = 0.0;
      try { 
        eulerIntegrator0.integrate(expandableStatefulODE0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [\uFFFD, \uFFFD], values: [657.73, 657.73]
         //
         verifyException("org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(3653.228);
      threeEighthesIntegrator0.getCurrentStepStart();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(Double.NaN);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      eulerIntegrator0.getCurrentStepStart();
      eulerIntegrator0.getStepHandlers();
      eulerIntegrator0.getEventHandlers();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double double0 = (-5079.4305057);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-5079.4305057);
      doubleArray0[1] = 287.6086868631;
      doubleArray0[2] = (-5079.4305057);
      double[] doubleArray1 = null;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(25.99496926141491, (-5079.4305057), (-1586.2800525654336), 461.051002243);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      // Undeclared exception!
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1.1368683772161603E-10, (double[]) null, (-22.0), doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1196).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 120.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 120.0;
      doubleArray0[3] = 120.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      try { 
        midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 120.0, doubleArray0, (-121.24733835327), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 2,392
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 120.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 120.0;
      doubleArray0[3] = 120.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      try { 
        midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 120.0, doubleArray0, (-121.24733835327), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(4523.826058264921);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3599.647;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(4523.826058264921, 627.77774, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setControlFactors(3599.647, 3599.647, (-1193.264928), 4523.826058264921);
      graggBulirschStoerIntegrator0.setControlFactors((-1062.6371377813498), 1.0, (-4.4703076268400615E-80), (-917.28935));
      graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) null, (-1210.79528348346), doubleArray0, 1326.735477833011, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double double0 = Double.NaN;
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(Double.NaN);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      eulerIntegrator0.addEventHandler(eventHandler0, (-163.06833524), 995.0, 462, (UnivariateSolver) regulaFalsiSolver0);
      double double1 = 0.0;
      // Undeclared exception!
      eulerIntegrator0.integrate(expandableStatefulODE0, 0.0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double double0 = 0.0;
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[8];
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      classicalRungeKuttaIntegrator0.integrate(expandableStatefulODE0, (-0.022355307863886294));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-657.0));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2578.3;
      doubleArray0[1] = (-1258.3848);
      doubleArray0[2] = (double) 2249;
      doubleArray0[3] = (-657.0);
      doubleArray0[4] = 2578.3;
      doubleArray0[5] = (double) 2249;
      doubleArray0[6] = (-657.0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2578.3, (-657.0), doubleArray0, doubleArray0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator1 = new GraggBulirschStoerIntegrator((-1761.837138), 2578.3, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator1.clearStepHandlers();
      graggBulirschStoerIntegrator1.setMaxEvaluations(2249);
      graggBulirschStoerIntegrator1.setOrderControl(2249, 1140.578, (-657.0));
      assertEquals(Double.NaN, graggBulirschStoerIntegrator1.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double double0 = (-1.0);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-976.48892598925), (-1.0), (-1.0), (-1.0));
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1.0), 268.08555861175, (-976.48892598925), 268.08555861175);
      double double1 = (-2816.30765);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.getMaxEvaluations();
      graggBulirschStoerIntegrator0.clearStepHandlers();
      double double2 = (-4.450312892752409);
      StepNormalizer stepNormalizer0 = new StepNormalizer((-4.450312892752409), (FixedStepHandler) null);
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      NordsieckStepInterpolator nordsieckStepInterpolator1 = new NordsieckStepInterpolator(nordsieckStepInterpolator0);
      double[] doubleArray0 = new double[1];
      // Undeclared exception!
      try { 
        stepNormalizer0.handleStep(nordsieckStepInterpolator0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(500.95318013504, 500.95318013504, 1110.9765, 1110.9765);
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-2218.85411), (-4205.953102837455), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.getStepHandlers();
      MullerSolver mullerSolver0 = new MullerSolver(500.95318013504, 2562.5142);
      graggBulirschStoerIntegrator0.addEventHandler((EventHandler) null, (-4205.953102837455), (-4205.953102837455), (-1842), (UnivariateSolver) mullerSolver0);
      graggBulirschStoerIntegrator0.setOrderControl(2553, 1110.9765, 500.95318013504);
      graggBulirschStoerIntegrator0.getEventHandlers();
      graggBulirschStoerIntegrator0.getMaxEvaluations();
      String string0 = graggBulirschStoerIntegrator0.getName();
      assertEquals("Gragg-Bulirsch-Stoer", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(1.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      gillIntegrator0.addEventHandler(eventHandler0, 1.0, 1.0, (-2423));
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler1).toString();
      gillIntegrator0.getEvaluations();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1.0, (-359.5351020969), 1.0);
      gillIntegrator0.addEventHandler(eventHandler1, 1.0, 0.0, (-2423), (UnivariateSolver) regulaFalsiSolver0);
      gillIntegrator0.setMaxEvaluations((-2423));
      gillIntegrator0.getEvaluations();
      gillIntegrator0.getEventHandlers();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-359.5351020969);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 1.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0, doubleArray0, doubleArray0);
      EventHandler eventHandler2 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler2, 0.0, 1000.0, 186, (UnivariateSolver) regulaFalsiSolver0);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double double0 = 434.248564814492;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 434.248564814492;
      doubleArray0[1] = 434.248564814492;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(434.248564814492, 434.248564814492, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.setSafety(434.248564814492);
      dormandPrince54Integrator0.getMaxEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        dormandPrince54Integrator0.integrate(expandableStatefulODE0, 434.248564814492);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 2
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-657.0), (-657.0), 0.0, (-657.0));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      dormandPrince853Integrator0.getMaxEvaluations();
      dormandPrince853Integrator0.setSafety((-1.0));
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, (-657.0), doubleArray0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-488.7), (-5080.7646565), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setStabilityCheck(false, 2249, 2249, 0.0);
      graggBulirschStoerIntegrator0.setInterpolationControl(false, Integer.MAX_VALUE);
      graggBulirschStoerIntegrator0.setMaxEvaluations(Integer.MAX_VALUE);
      assertEquals(488.7, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-0.04432804463693693), 3727.832947521, (-0.04432804463693693), (-0.04432804463693693));
      dormandPrince853Integrator0.setInitialStepSize((-0.04432804463693693));
      dormandPrince853Integrator0.setMaxEvaluations(2696);
      dormandPrince853Integrator0.getOrder();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      dormandPrince853Integrator0.addEventHandler(eventHandler0, 0.0, (double) 2696, 2696);
      FirstOrderConverter firstOrderConverter0 = null;
      try {
        firstOrderConverter0 = new FirstOrderConverter((SecondOrderDifferentialEquations) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.FirstOrderConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(8, (-78.125), (-39.17726167561544), 0.0, (-39.17726167561544));
      adamsMoultonIntegrator0.clearEventHandlers();
      adamsMoultonIntegrator0.setMaxEvaluations((-1568));
      adamsMoultonIntegrator0.getStepHandlers();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-4707.735995147454), (-1.8379759110070617), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setMaxEvaluations(8);
      graggBulirschStoerIntegrator0.setMaxEvaluations(0);
      graggBulirschStoerIntegrator0.setOrderControl(0, (-26.041666666666668), 8);
      graggBulirschStoerIntegrator0.setOrderControl(8, 0.0, (-1128.2329479722991));
      assertEquals(4707.735995147454, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(5590.146023008, 0.0, 5590.146023008, 5590.146023008);
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      dormandPrince54Integrator0.getMaxEvaluations();
      StepNormalizer stepNormalizer0 = new StepNormalizer(5590.146023008, (FixedStepHandler) null, stepNormalizerMode0);
      dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, doubleArray0, doubleArray0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.FIRST;
      StepNormalizer stepNormalizer0 = new StepNormalizer(18.0, fixedStepHandler0, stepNormalizerBounds0);
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1211.0), (-876.65911167449), (-1211.0), (-1211.0));
      double[] doubleArray0 = new double[0];
      dormandPrince853Integrator0.setStepSizeControl((-1211.0), (-1211.0), doubleArray0, doubleArray0);
      dormandPrince853Integrator0.setInitialStepSize(1004);
      dormandPrince853Integrator0.addEventHandler((EventHandler) null, (-876.65911167449), (-876.65911167449), 1004);
      dormandPrince853Integrator0.clearEventHandlers();
      dormandPrince853Integrator0.getCurrentStepStart();
      dormandPrince853Integrator0.getEventHandlers();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1.0, (-202.0), 0.0419047619047619, (-202.0));
      graggBulirschStoerIntegrator0.setInterpolationControl(true, Integer.MAX_VALUE);
      graggBulirschStoerIntegrator0.setInterpolationControl(true, (-3631));
      assertEquals(202.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, (-677.900698), 0.0, 0.0);
      graggBulirschStoerIntegrator0.getEvaluations();
      graggBulirschStoerIntegrator0.getEvaluations();
      int int0 = 0;
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 0);
      graggBulirschStoerIntegrator0.getName();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 0;
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.computeDerivatives((-551.1082), doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(1.0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 1.0;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = 1.0;
      doubleArray1[3] = 1.0;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      BisectionSolver bisectionSolver0 = new BisectionSolver(1.0, 1.0);
      threeEighthesIntegrator0.addEventHandler(eventHandler0, 0.0, 1.0, 1388, (UnivariateSolver) bisectionSolver0);
      // Undeclared exception!
      try { 
        threeEighthesIntegrator0.computeDerivatives(1.0, doubleArray0, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-241.998);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2171.40903116061;
      doubleArray0[3] = (-241.998);
      doubleArray0[4] = 2171.40903116061;
      doubleArray0[5] = (-241.998);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 2171.40903116061;
      doubleArray0[8] = (-241.998);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 2171.40903116061;
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = 2171.40903116061;
      doubleArray1[4] = 2171.40903116061;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (-241.998);
      doubleArray1[7] = 0.0;
      doubleArray1[8] = (-241.998);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-241.998), 2171.40903116061, doubleArray0, doubleArray1);
      assertEquals(724.897677415789, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
  }
}
