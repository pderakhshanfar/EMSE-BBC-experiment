/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 23:07:51 GMT 2021
 */

package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.function.Asinh;
import org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver;
import org.apache.commons.math3.analysis.solvers.BrentSolver;
import org.apache.commons.math3.analysis.solvers.PegasusSolver;
import org.apache.commons.math3.analysis.solvers.RegulaFalsiSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondaryEquations;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator;
import org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.EulerIntegrator;
import org.apache.commons.math3.ode.nonstiff.GillIntegrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.nonstiff.MidpointIntegrator;
import org.apache.commons.math3.ode.sampling.DummyStepHandler;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.StepHandler;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.apache.commons.math3.ode.sampling.StepNormalizerBounds;
import org.apache.commons.math3.ode.sampling.StepNormalizerMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegrator_ESTest extends AbstractIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double double0 = 593.258157069;
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(593.258157069);
      int int0 = 0;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double double1 = 2590.35144;
      double[] doubleArray0 = new double[0];
      classicalRungeKuttaIntegrator0.getStepHandlers();
      classicalRungeKuttaIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2590.35144, doubleArray0, (-2480.1190354292), doubleArray0);
      classicalRungeKuttaIntegrator0.setMaxEvaluations(0);
      classicalRungeKuttaIntegrator0.getCurrentSignedStepsize();
      double double2 = 4.125337057189083E-84;
      double double3 = (-519.9);
      double double4 = 9.3881;
      try { 
        classicalRungeKuttaIntegrator0.computeDerivatives(1.4565123573071036E164, doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(593.258157069);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      classicalRungeKuttaIntegrator0.getStepHandlers();
      classicalRungeKuttaIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2590.35144, doubleArray0, (-2480.1190354292), doubleArray0);
      classicalRungeKuttaIntegrator0.setMaxEvaluations(0);
      classicalRungeKuttaIntegrator0.getCurrentSignedStepsize();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator((-2480.1190354292));
      eulerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter1, 3.3057007442449645E-37, doubleArray0, 0.0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(9.094947017729282E-10);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(1.1174279267498045E-159, (-2156.762)).when(eventHandler0).g(anyDouble() , any(double[].class));
      eulerIntegrator0.addEventHandler(eventHandler0, 9.094947017729282E-10, 2.5631381141873417E-132, (-4283));
      double[] doubleArray0 = new double[0];
      try { 
        eulerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2.5631381141873417E-132, doubleArray0, 4.547473508864641E-10, doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-4,283) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(593.258157069);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      classicalRungeKuttaIntegrator0.setMaxEvaluations(0);
      classicalRungeKuttaIntegrator0.getStepHandlers();
      try { 
        classicalRungeKuttaIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2590.35144, doubleArray0, (-2480.1190354292), doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(9.094947017729282E-10);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      eulerIntegrator0.addEventHandler(eventHandler0, 9.094947017729282E-10, 2.5631381141873417E-132, (-4283));
      double[] doubleArray0 = new double[0];
      eulerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2.5631381141873417E-132, doubleArray0, 4.547473508864641E-10, doubleArray0);
      eulerIntegrator0.getMaxEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter1);
      SecondaryEquations secondaryEquations0 = mock(SecondaryEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondaryEquations0).getDimension();
      expandableStatefulODE0.getSecondaryMappers();
      expandableStatefulODE0.addSecondaryEquations(secondaryEquations0);
      // Undeclared exception!
      eulerIntegrator0.integrate(expandableStatefulODE0, 1.0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-193.9605), (-1.0), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.getEventHandlers();
      graggBulirschStoerIntegrator0.setStepSizeControl((-1.0), (-193.9605), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setMaxEvaluations((-971));
      graggBulirschStoerIntegrator0.setControlFactors((-193.9605), (-193.9605), (-1.0), (-239.7390756689));
      graggBulirschStoerIntegrator0.getStepHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1.0), doubleArray0, (-239.7390756689), doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(593.258157069);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      classicalRungeKuttaIntegrator0.getStepHandlers();
      classicalRungeKuttaIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2590.35144, doubleArray0, (-2480.1190354292), doubleArray0);
      classicalRungeKuttaIntegrator0.setMaxEvaluations(0);
      classicalRungeKuttaIntegrator0.getCurrentSignedStepsize();
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0, (-2480.1190354292), (-519.9), 9.3881);
      dormandPrince54Integrator0.getStepHandlers();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      dormandPrince54Integrator0.addEventHandler(eventHandler0, (-2480.1190354292), 2590.35144, 1175);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(2511).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(1.0);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 9.3881;
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = (double) 2511;
      doubleArray1[3] = (-2480.1190354292);
      doubleArray1[4] = 593.258157069;
      try { 
        eulerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1000.0, doubleArray0, (double) 1175, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(9.094947017729282E-10);
      eulerIntegrator0.setMaxEvaluations(412);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      eulerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2.5631381141873417E-132, doubleArray0, 4.547473508864641E-10, doubleArray0);
      eulerIntegrator0.getEvaluations();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(9.094947017729282E-10);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      eulerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2.5631381141873417E-132, doubleArray0, 4.547473508864641E-10, doubleArray0);
      eulerIntegrator0.computeDerivatives(4.547473508864641E-10, doubleArray0, doubleArray0);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(4.547473508864641E-10, 2.5631381141873417E-132, 1.0000000004547474, 1.0000000004547474);
      dormandPrince853Integrator0.getOrder();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(593.258157069);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      classicalRungeKuttaIntegrator0.getStepHandlers();
      classicalRungeKuttaIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2590.35144, doubleArray0, (-2480.1190354292), doubleArray0);
      classicalRungeKuttaIntegrator0.getCurrentSignedStepsize();
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0, 4.125337057189083E-84, (-519.9), 9.3881);
      dormandPrince54Integrator0.getStepHandlers();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(457.0637247309095, 457.0637247309095, 1000.0, (-1.4088399542613178E-38)).when(eventHandler0).g(anyDouble() , any(double[].class));
      dormandPrince54Integrator0.addEventHandler(eventHandler0, (-2480.1190354292), 2590.35144, 0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        dormandPrince54Integrator0.integrate(expandableStatefulODE0, (-1666.2));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(593.258157069);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      classicalRungeKuttaIntegrator0.getStepHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      double double0 = 4.547473508864641E-10;
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(2.5631381141873417E-132);
      double double1 = Double.NaN;
      // Undeclared exception!
      eulerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter1, double1, doubleArray0, double0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(593.258157069);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[0];
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(0);
      try { 
        eulerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-809.9), doubleArray0, (-809.9), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(9.094947017729282E-10);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      eulerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2.5631381141873417E-132, doubleArray0, 4.547473508864641E-10, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 863.1484678;
      doubleArray0[0] = 863.1484678;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(4.547473508864641E-10, 863.1484678, (-467.029892), 863.1484678);
      dormandPrince54Integrator0.getName();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      LinkedList<StepHandler> linkedList0 = new LinkedList<StepHandler>();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-467.029892), (-467.029892), 4.547473508864641E-10, (-1262.9), (-467.029892)).when(eventHandler0).g(anyDouble() , any(double[].class));
      dormandPrince54Integrator0.addEventHandler(eventHandler0, 1476.7720755, 3.733241849647479E32, 5);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        dormandPrince54Integrator0.integrate(expandableStatefulODE0, 4.547473508864641E-10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [\uFFFD, \uFFFD], values: [-467.03, -467.03]
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 863.1484678;
      doubleArray0[0] = 863.1484678;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(4.547473508864641E-10, 863.1484678, (-467.029892), 863.1484678);
      dormandPrince54Integrator0.getName();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      dormandPrince54Integrator0.getStepHandlers();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 4.547473508864641E-10, (-1262.9), 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      dormandPrince54Integrator0.addEventHandler(eventHandler0, 1476.7720755, 3.733241849647479E32, 5);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      dormandPrince54Integrator0.integrate(expandableStatefulODE0, 4.547473508864641E-10);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-467.029892));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 863.1484678;
      doubleArray0[1] = 863.1484678;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(4.547473508864641E-10, 863.1484678, (-467.029892), 863.1484678);
      dormandPrince54Integrator0.getName();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      dormandPrince54Integrator0.addEventHandler(eventHandler0, 1476.7720755, 3.733241849647479E32, 5);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      dormandPrince54Integrator0.integrate(expandableStatefulODE0, (-5766.289649391907));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(4.547473508864641E-10);
      midpointIntegrator0.setMaxEvaluations((-593));
      midpointIntegrator0.getCurrentStepStart();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(1.0000000004547474);
      eulerIntegrator0.clearStepHandlers();
      eulerIntegrator0.getStepHandlers();
      eulerIntegrator0.getCurrentStepStart();
      eulerIntegrator0.getName();
      double double0 = 5070.4704754292;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(Double.NaN, 1443.316153, 2898.2, 5070.4704754292);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1443.316153;
      doubleArray0[1] = 1443.316153;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 1.0000000004547474;
      doubleArray0[4] = 5070.4704754292;
      doubleArray0[5] = Double.NaN;
      try { 
        expandableStatefulODE0.setCompleteState(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 0
         //
         verifyException("org.apache.commons.math3.ode.ExpandableStatefulODE", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1000.0;
      doubleArray0[1] = 1000.0;
      doubleArray0[2] = 1000.0;
      doubleArray0[3] = 1000.0;
      doubleArray0[4] = 1000.0;
      doubleArray0[5] = 1000.0;
      doubleArray0[6] = 357.567;
      doubleArray0[7] = 1000.0;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1000.0, 1000.0, doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      double double0 = 0.0;
      int int0 = Integer.MAX_VALUE;
      highamHall54Integrator0.addEventHandler(eventHandler0, 0.0, 1000.0, Integer.MAX_VALUE);
      highamHall54Integrator0.getEventHandlers();
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(Integer.MAX_VALUE, 4.547473508864641E-10, 2598.6, 1000.0);
      // Undeclared exception!
      try { 
        dormandPrince54Integrator0.computeDerivatives(1000.0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(3780.51, 3780.51, (-395.6596396429233), 4.547473508864641E-10);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3780.51;
      doubleArray0[1] = 5070.4704754292;
      doubleArray0[2] = (-2434.9262);
      doubleArray0[3] = 4.547473508864641E-10;
      doubleArray0[4] = 4.547473508864641E-10;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-395.6596396429233), 3780.51, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.clearStepHandlers();
      dormandPrince54Integrator0.getStepHandlers();
      dormandPrince54Integrator0.clearStepHandlers();
      dormandPrince54Integrator0.getOrder();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(5070.4704754292, 4.547473508864641E-10, 1193.7067611, 4.547473508864641E-10);
      graggBulirschStoerIntegrator0.setOrderControl(5, (-2434.9262), 1000.0);
      graggBulirschStoerIntegrator0.setControlFactors(3780.51, 3780.51, 4.547473508864641E-10, (-646.394575824443));
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.FIRST;
      StepNormalizer stepNormalizer0 = new StepNormalizer(5070.4704754292, fixedStepHandler0, stepNormalizerBounds0);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-646.394575824443);
      stepNormalizer0.init(4.547473508864641E-10, doubleArray1, 3780.51);
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
      dormandPrince54Integrator0.getEvaluations();
      graggBulirschStoerIntegrator0.getEvaluations();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-58.034415);
      doubleArray0[1] = 583.5409859151962;
      doubleArray0[2] = (-58.034415);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(583.5409859151962, (-58.034415), doubleArray0, doubleArray0);
      highamHall54Integrator0.getOrder();
      highamHall54Integrator0.getEvaluations();
      highamHall54Integrator0.getEvaluations();
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2.929085835358592E-8), 1.0, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.getOrder();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(3, 1967.991743765432, 583.5409859151962, (-58.034415), 583.5409859151962);
      // Undeclared exception!
      try { 
        adamsMoultonIntegrator0.integrate(expandableStatefulODE0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one column
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(593.258157069);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1073).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      classicalRungeKuttaIntegrator0.getStepHandlers();
      try { 
        classicalRungeKuttaIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2590.35144, doubleArray0, (-2480.1190354292), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 2,146
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1821.53);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-0.1521609496625161);
      doubleArray0[4] = (-1821.53);
      doubleArray0[5] = 537.91495752;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1821.53), 0.0, doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.getEventHandlers();
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 537.91495752, 1.0, 771);
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      EventHandler eventHandler2 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler2, (-1607.149122), 0.0, 2117);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-3281.0482182261), (-1168.68441), doubleArray0, doubleArray0);
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        dormandPrince54Integrator0.integrate(expandableStatefulODE1, 906.7367);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 6
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double double0 = 0.0;
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      midpointIntegrator0.addStepHandler(dummyStepHandler0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      midpointIntegrator0.integrate(expandableStatefulODE0, 724.05);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getName();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, (-3459.961), (-3.0467644718982196), (-3459.961));
      graggBulirschStoerIntegrator0.setStabilityCheck(false, 0, 0, (-1006.92826));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray1 = new double[0];
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-0.4353557902216363), doubleArray0, (-3459.961), doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double double0 = Double.NaN;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, Double.NaN, 0.0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 0.0;
      // Undeclared exception!
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) null, 0.0, doubleArray0, 0.0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double double0 = (-2346.5406);
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-2346.5406));
      ExpandableStatefulODE expandableStatefulODE0 = null;
      double double1 = (-947.0);
      classicalRungeKuttaIntegrator0.getMaxEvaluations();
      // Undeclared exception!
      try { 
        classicalRungeKuttaIntegrator0.integrate((ExpandableStatefulODE) null, (-947.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(593.258157069);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      classicalRungeKuttaIntegrator0.getStepHandlers();
      classicalRungeKuttaIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2590.35144, doubleArray0, (-2480.1190354292), doubleArray0);
      int int0 = 0;
      classicalRungeKuttaIntegrator0.setMaxEvaluations(0);
      classicalRungeKuttaIntegrator0.getCurrentSignedStepsize();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-119.63223), (-2480.1190354292), 0.0, 1000.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double0 = (-5203.92);
      int int1 = (-1490);
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = null;
      try {
        bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver((-119.63223), (-2096.9), 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 is smaller than the minimum (2)
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 457.0637247309095;
      doubleArray0[1] = 457.0637247309095;
      doubleArray0[2] = 457.0637247309095;
      doubleArray0[3] = 457.0637247309095;
      doubleArray0[4] = 457.0637247309095;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(457.0637247309095, 457.0637247309095, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.getStepHandlers();
      // Undeclared exception!
      try { 
        dormandPrince54Integrator0.integrate((ExpandableStatefulODE) null, 457.0637247309095);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 578.32721952;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 1.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1.0, 1.0, doubleArray0, doubleArray0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      StepNormalizer stepNormalizer0 = new StepNormalizer((-1506.246697968412), fixedStepHandler0, stepNormalizerMode0);
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      graggBulirschStoerIntegrator0.setMaxEvaluations(249);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-2486.785348));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-6.458486486369316E-8);
      doubleArray0[1] = (-6.458486486369316E-8);
      doubleArray0[2] = (-2486.785348);
      doubleArray0[3] = 4134.737822;
      doubleArray0[4] = (-2486.785348);
      doubleArray0[5] = (-2486.785348);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-6.458486486369316E-8), (-6.458486486369316E-8), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setMaxEvaluations(1673);
      graggBulirschStoerIntegrator0.setControlFactors(5070.4704754292, (-2486.785348), 4134.737822, 3083.0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-2486.785348));
      midpointIntegrator0.getEventHandlers();
      midpointIntegrator0.getMaxEvaluations();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      doubleArray0[2] = (double) Integer.MAX_VALUE;
      doubleArray0[3] = (-2486.785348);
      doubleArray0[4] = (double) Integer.MAX_VALUE;
      doubleArray0[5] = 957.65293315697;
      doubleArray0[6] = 957.65293315697;
      doubleArray0[7] = (-2486.785348);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(4.547473508864641E-10, 957.65293315697, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setControlFactors(2.147483647E9, 0.0, 957.65293315697, 3321.8244052);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double double0 = (-1821.53);
      double double1 = 0.0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1821.53);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-0.1521609496625161);
      doubleArray0[4] = (-1821.53);
      doubleArray0[5] = 537.91495752;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1821.53), 0.0, doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.getEventHandlers();
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 537.91495752, 1.0, 771);
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double2 = (-5304.549396);
      EventHandler eventHandler2 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler2, (-1607.149122), 0.0, 2117);
      int int0 = 0;
      PegasusSolver pegasusSolver0 = new PegasusSolver(0.0, 771);
      Asinh asinh0 = new Asinh();
      // Undeclared exception!
      try { 
        pegasusSolver0.solve(74, (UnivariateFunction) asinh0, (-1821.53), (-1636.0), (-0.1521609496625161));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [-1,821.53, -1,636], values: [-8.201, -8.093]
         //
         verifyException("org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 863.1484678;
      doubleArray0[0] = 863.1484678;
      double double0 = 4.547473508864641E-10;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(2297.52746176416, 2297.52746176416, 4.547473508864641E-10, 4.547473508864641E-10);
      dormandPrince54Integrator0.getName();
      LinkedList<StepHandler> linkedList0 = new LinkedList<StepHandler>();
      int int0 = 5;
      double double1 = 9.094947017729282E-10;
      dormandPrince54Integrator0.addEventHandler((EventHandler) null, (-365.1), 9.094947017729282E-10, 5);
      FirstOrderConverter firstOrderConverter0 = null;
      try {
        firstOrderConverter0 = new FirstOrderConverter((SecondOrderDifferentialEquations) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.FirstOrderConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1.7976931348623157E308, (-840.0), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setControlFactors((-2201.84432), 1.7976931348623157E308, (-2201.84432), (-2201.84432));
      graggBulirschStoerIntegrator0.getStepHandlers();
      graggBulirschStoerIntegrator0.getEvaluations();
      graggBulirschStoerIntegrator0.clearStepHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (double) 0, (double) 0, 599);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      graggBulirschStoerIntegrator0.clearStepHandlers();
      SecondaryEquations secondaryEquations0 = mock(SecondaryEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondaryEquations0).getDimension();
      expandableStatefulODE0.addSecondaryEquations(secondaryEquations0);
      double double0 = 1040.7642550769;
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 1040.7642550769);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-2486.785348));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2486.785348);
      doubleArray0[1] = 1.0000000004547474;
      doubleArray0[2] = 1.0000000004547474;
      doubleArray0[3] = 1.0000000004547474;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-2486.785348);
      doubleArray1[1] = 1.4678359031677246;
      doubleArray1[2] = (-2486.785348);
      doubleArray1[3] = 1.4678359031677246;
      doubleArray1[4] = 1.4678359031677246;
      doubleArray1[5] = 1.4678359031677246;
      doubleArray1[6] = (-2486.785348);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1.0000000004547474, 1.4678359031677246, doubleArray0, doubleArray1);
      graggBulirschStoerIntegrator0.clearStepHandlers();
      graggBulirschStoerIntegrator0.addStepHandler((StepHandler) null);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator((-1695.6069991));
      eulerIntegrator0.getEvaluations();
      eulerIntegrator0.getName();
      FirstOrderConverter firstOrderConverter0 = null;
      try {
        firstOrderConverter0 = new FirstOrderConverter((SecondOrderDifferentialEquations) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.FirstOrderConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1735.38571, 0.0, 1735.38571, 1735.38571);
      dormandPrince853Integrator0.clearEventHandlers();
      int int0 = (-726);
      dormandPrince853Integrator0.setMaxEvaluations((-726));
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      dormandPrince853Integrator0.addStepHandler(dummyStepHandler0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-726);
      doubleArray0[1] = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1735.38571, 0.0, doubleArray0, doubleArray0);
      DummyStepHandler dummyStepHandler1 = DummyStepHandler.getInstance();
      DummyStepHandler.getInstance();
      graggBulirschStoerIntegrator0.addStepHandler(dummyStepHandler1);
      dormandPrince853Integrator0.getEvaluations();
      graggBulirschStoerIntegrator0.getEvaluations();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      int int1 = 0;
      graggBulirschStoerIntegrator0.setStabilityCheck(true, 0, 0, 0.0);
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = null;
      try {
        bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver((-1.0), (-726));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -726 is smaller than the minimum (2)
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0.0);
      midpointIntegrator0.clearStepHandlers();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setOrderControl(69, 3488.1, (-0.04432804463693693));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1557.08646297, 1557.08646297, 1557.08646297, 0.0);
      dormandPrince54Integrator0.getName();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      dormandPrince54Integrator0.integrate(expandableStatefulODE0, 1557.08646297);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1000.0, 1000.0, 1000.0, (-2798.760148401203));
      String string0 = dormandPrince54Integrator0.getName();
      assertEquals("Dormand-Prince 5(4)", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(3065.904);
      double double0 = gillIntegrator0.getCurrentSignedStepsize();
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 3065.904, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setStabilityCheck(true, 0, 5, 5);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.8888888888888888, (-4688.0525), 0.8888888888888888);
      graggBulirschStoerIntegrator0.clearEventHandlers();
      boolean boolean0 = false;
      double double0 = (-2359.0);
      double double1 = (-3509.178840348666);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-3509.178840348666);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-3509.178840348666);
      doubleArray1[1] = (-3509.178840348666);
      doubleArray1[2] = (-3509.178840348666);
      doubleArray1[3] = (-2359.0);
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.computeDerivatives((-3685.0248723), doubleArray0, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double double0 = 0.0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.clearEventHandlers();
      graggBulirschStoerIntegrator0.setControlFactors(0.0, 221.578563033825, (-1401.6832593), 0.0);
      graggBulirschStoerIntegrator0.setInitialStepSize(0.0);
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.initializeStep(false, 222, doubleArray0, Double.NaN, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 4.547473508864641E-10;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-1340.34), 4.547473508864641E-10, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.getOrder();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(178.65563519783, 1.0000000004547474, 5, (-1340.34));
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-679.435691138534), 1.0000000004547474, (-749.2596972501));
      graggBulirschStoerIntegrator0.addEventHandler((EventHandler) null, 2.220446049250313E-13, 0.0, 5, (UnivariateSolver) regulaFalsiSolver0);
      assertEquals(0.0, regulaFalsiSolver0.getMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0.0);
      midpointIntegrator0.getStepHandlers();
      double double0 = 1.0;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1414);
      doubleArray0[1] = 0.0;
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = null;
      try {
        adamsMoultonIntegrator0 = new AdamsMoultonIntegrator((-1414), 1.0, 0.0, doubleArray0, doubleArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double double0 = 2248.16;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2248.16;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(64.0, 2248.16, doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      int int0 = 1831;
      BrentSolver brentSolver0 = new BrentSolver();
      dormandPrince853Integrator0.addEventHandler(eventHandler0, (-3797.077059315), 0.0, 1831, (UnivariateSolver) brentSolver0);
      dormandPrince853Integrator0.getCurrentStepStart();
      dormandPrince853Integrator0.getStepHandlers();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 151.353227903655, 2248.16, (-1360.68012795254));
      boolean boolean0 = false;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = 151.353227903655;
      doubleArray1[2] = 2248.16;
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 64.0, doubleArray1, (-3039.8714186569937), doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = (-384);
      double double0 = 0.0;
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = null;
      try {
        adamsMoultonIntegrator0 = new AdamsMoultonIntegrator((-384), 0.0, 3290.879, (-25.69393346270375), 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // multistep method needs at least -384 previous steps, got 2
         //
         verifyException("org.apache.commons.math3.ode.MultistepIntegrator", e);
      }
  }
}
