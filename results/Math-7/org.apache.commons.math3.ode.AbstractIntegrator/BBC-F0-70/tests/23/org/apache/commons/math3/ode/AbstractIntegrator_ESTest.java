/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 23:01:18 GMT 2021
 */

package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.LinkedList;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.function.Asinh;
import org.apache.commons.math3.analysis.solvers.BisectionSolver;
import org.apache.commons.math3.analysis.solvers.BrentSolver;
import org.apache.commons.math3.analysis.solvers.IllinoisSolver;
import org.apache.commons.math3.analysis.solvers.MullerSolver;
import org.apache.commons.math3.analysis.solvers.RegulaFalsiSolver;
import org.apache.commons.math3.analysis.solvers.SecantSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator;
import org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator;
import org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.EulerIntegrator;
import org.apache.commons.math3.ode.nonstiff.GillIntegrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.nonstiff.MidpointIntegrator;
import org.apache.commons.math3.ode.sampling.DummyStepHandler;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.StepHandler;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.apache.commons.math3.ode.sampling.StepNormalizerBounds;
import org.apache.commons.math3.ode.sampling.StepNormalizerMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegrator_ESTest extends AbstractIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(3749.771779);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(3749.771779, (-2766.1916848), (-214.5792766236285), 0.0);
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1880.470193), Double.NaN, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 3749.771779;
      doubleArray1[1] = (-696.59);
      doubleArray1[2] = (-2168.6);
      doubleArray1[3] = 483.0;
      doubleArray1[4] = 0.0;
      try { 
        gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 483.0, doubleArray0, (-696.59), doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(3749.771779);
      BrentSolver brentSolver0 = new BrentSolver(3749.771779, (-1928.9));
      gillIntegrator0.addEventHandler((EventHandler) null, 1.1368683772161603E-10, 1000.0, 8, (UnivariateSolver) brentSolver0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime(1000.0);
      GillIntegrator gillIntegrator1 = new GillIntegrator((-1928.9));
      gillIntegrator1.integrate(expandableStatefulODE0, (-135.0));
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(8);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 8;
      doubleArray0[1] = (-1928.9);
      doubleArray0[2] = 3749.771779;
      doubleArray0[3] = (double) 8;
      doubleArray0[4] = 1.1368683772161603E-10;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(3749.7717789995454, (-1109.73597), doubleArray0, doubleArray0);
      dormandPrince54Integrator0.getOrder();
      gillIntegrator1.computeDerivatives(1924.192802621, doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-327.23691989);
      doubleArray0[1] = (-327.23691989);
      doubleArray0[2] = (-327.23691989);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (-327.23691989);
      doubleArray0[5] = 1.0;
      doubleArray0[6] = (-327.23691989);
      doubleArray0[7] = (-327.23691989);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-327.23691989), 1.0, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.clearEventHandlers();
      dormandPrince54Integrator0.setInitialStepSize(1188.66822);
      boolean boolean0 = true;
      dormandPrince54Integrator0.setStepSizeControl(1188.66822, (-327.23691989), doubleArray0, doubleArray0);
      int int0 = 0;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        dormandPrince54Integrator0.integrate(expandableStatefulODE0, 2.2737367544323206E-10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 8
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          GillIntegrator gillIntegrator0 = new GillIntegrator(1174.82);
          SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
          doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
          FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
          double[] doubleArray0 = new double[0];
          gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 4.547473508864641E-10, doubleArray0, 0.0, doubleArray0);
          BrentSolver brentSolver0 = new BrentSolver(Double.NaN, Double.NaN);
          GillIntegrator gillIntegrator1 = new GillIntegrator(3749.7717789995454);
          EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
          gillIntegrator1.addEventHandler(eventHandler0, 2.220446049250313E-13, 3749.7717789995454, 233, (UnivariateSolver) brentSolver0);
          SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
          doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
          FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
          ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
          GillIntegrator gillIntegrator2 = new GillIntegrator(1.1368683772161603E-10);
          double double0 = (-154.5427);
          // Undeclared exception!
          gillIntegrator2.integrate(expandableStatefulODE0, (-154.5427));
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(1174.82);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1174.82, (-1880.470193), 2.220446049250313E-13, 2.220446049250313E-13);
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(2.220446049250313E-13, 1174.82, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      GillIntegrator gillIntegrator1 = new GillIntegrator((-2053.082258586137));
      // Undeclared exception!
      gillIntegrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1880.470193), doubleArray0, 2.220446049250313E-13, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 5;
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(5, 5, 5, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      AdamsBashforthIntegrator adamsBashforthIntegrator1 = new AdamsBashforthIntegrator(5, 5.554964922539782, 3594.0390944, 5.554964922539782, 1000.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(7.374944406615125E-186, 1275.133803, (double)5, (-3029.831493), 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      expandableStatefulODE0.getSecondaryMappers();
      BrentSolver brentSolver0 = new BrentSolver(2445.0229446, 56.9392);
      GillIntegrator gillIntegrator0 = new GillIntegrator((-3029.831493));
      gillIntegrator0.addEventHandler(eventHandler0, 56.9392, 1000.0, 919, (UnivariateSolver) brentSolver0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      gillIntegrator0.integrate(expandableStatefulODE1, (-5588.964482991845));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(1174.82);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1174.82, (-1880.470193), 2.220446049250313E-13, 2.220446049250313E-13);
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(2.220446049250313E-13, 1174.82, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-3132.277475), doubleArray0, 1174.82, doubleArray0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      gillIntegrator0.integrate(expandableStatefulODE0, 1000.0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(1174.82);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1174.82, (-1880.470193), 2.220446049250313E-13, 2.220446049250313E-13);
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(2.220446049250313E-13, 1174.82, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1584.0, doubleArray0, (-1880.470193), doubleArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(710.567008140996);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(710.567008140996, 0.2763880491256714, 710.567008140996, 0.2763880491256714);
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(5.55496492253956, 1216.9290651625186, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      try { 
        gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 710.567008140996, doubleArray0, 710.567008140996, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(3749.771779);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.FIRST;
      StepNormalizer stepNormalizer0 = new StepNormalizer(2.2737367544323206E-10, fixedStepHandler0, stepNormalizerMode0, stepNormalizerBounds0);
      gillIntegrator0.addStepHandler(stepNormalizer0);
      double double0 = (-4280.96252691);
      double double1 = 0.0;
      int int0 = 8;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(secondOrderDifferentialEquations0).getDimension();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, (-2766.1916848), (double)8, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      BrentSolver brentSolver0 = new BrentSolver((-4280.96252691), (-2766.1916848));
      gillIntegrator0.addEventHandler(eventHandler0, (double) 8, (double) 8, 8, (UnivariateSolver) brentSolver0);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      gillIntegrator0.integrate(expandableStatefulODE0, (-4280.96252691));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(3749.771779);
      double double0 = 0.0;
      double double1 = (-4280.96252691);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      SecantSolver secantSolver0 = new SecantSolver(3749.771779, 3749.771779);
      gillIntegrator0.addEventHandler(eventHandler0, (-2766.1916848), 3749.771779, 0, (UnivariateSolver) secantSolver0);
      LinkedList<StepHandler> linkedList0 = new LinkedList<StepHandler>();
      int int0 = 8;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(secondOrderDifferentialEquations0).getDimension();
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, (-2766.1916848), (double)8, 0.0).when(eventHandler1).g(anyDouble() , any(double[].class));
      gillIntegrator0.setMaxEvaluations(8);
      BrentSolver brentSolver0 = new BrentSolver((-4280.96252691), (-2766.1916848));
      gillIntegrator0.addEventHandler(eventHandler1, (double) 8, (double) 8, 8, (UnivariateSolver) brentSolver0);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        gillIntegrator0.integrate(expandableStatefulODE0, (-4280.96252691));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (8) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(1174.82);
      gillIntegrator0.getName();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(3749.771779);
      double double0 = (-4280.96252691);
      LinkedList<StepHandler> linkedList0 = new LinkedList<StepHandler>();
      double double1 = 0.0;
      int int0 = 8;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(secondOrderDifferentialEquations0).getDimension();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, (-2766.1916848), (double)8, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      BrentSolver brentSolver0 = new BrentSolver((-4280.96252691), (-2766.1916848));
      gillIntegrator0.addEventHandler(eventHandler0, (double) 8, (double) 8, 8, (UnivariateSolver) brentSolver0);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      gillIntegrator0.integrate(expandableStatefulODE0, (-4280.96252691));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (-2748.0013596627396);
      doubleArray0[2] = (double) (-968);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1174.82, (-2748.0013596627396), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setStabilityCheck(false, 31, 1, (-1.0));
      graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
      BrentSolver brentSolver0 = new BrentSolver(570.3222606294833, 1000.0, 3576.1465621464);
      GillIntegrator gillIntegrator0 = new GillIntegrator(1.0);
      gillIntegrator0.addEventHandler((EventHandler) null, 1.0, 2.220446049250313E-13, 31, (UnivariateSolver) brentSolver0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      try { 
        gillIntegrator0.integrate(expandableStatefulODE0, (-2748.0013596627396));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(3749.771779);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-2766.1916848), 3749.771779, (-2766.1916848), (-2766.1916848));
      double double0 = (-4280.96252691);
      graggBulirschStoerIntegrator0.getStepHandlers();
      double double1 = 0.0;
      graggBulirschStoerIntegrator0.setControlFactors((-2766.1916848), 0.0, (-4280.96252691), 0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(secondOrderDifferentialEquations0).getDimension();
      double double2 = 2.220446049250313E-13;
      double double3 = 2481.0;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(2.220446049250313E-13, 2481.0, (-44.0), 1728.88821).when(eventHandler0).g(anyDouble() , any(double[].class));
      int int0 = 0;
      graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
      double double4 = 708.8495557619;
      BrentSolver brentSolver0 = new BrentSolver((-334.0), 0.0, 708.8495557619);
      gillIntegrator0.addEventHandler(eventHandler0, (double) 8, (double) 8, 0, (UnivariateSolver) brentSolver0);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        gillIntegrator0.integrate(expandableStatefulODE0, (-4280.96252691));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double double0 = 3749.771779;
      GillIntegrator gillIntegrator0 = new GillIntegrator(3749.771779);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-2766.1916848), 3749.771779, (-2766.1916848), (-2766.1916848));
      double double1 = 0.0;
      double double2 = (-4280.96252691);
      graggBulirschStoerIntegrator0.getStepHandlers();
      double double3 = 0.0;
      graggBulirschStoerIntegrator0.setControlFactors((-2766.1916848), 0.0, (-4280.96252691), 0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(secondOrderDifferentialEquations0).getDimension();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
      BrentSolver brentSolver0 = new BrentSolver((-334.0), 0.0, 708.8495557619);
      gillIntegrator0.addEventHandler(eventHandler0, (double) 8, (double) 8, 0, (UnivariateSolver) brentSolver0);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      gillIntegrator0.integrate(expandableStatefulODE0, (-4280.96252691));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1665.0), (-1665.0), (-82.1630717760253), 3276.75996796);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1.1174279267498045E-159, 1.1174279267498045E-159, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getOrder();
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(8, (-663.0976037), 1.5732207298278809, 0.0, (-2037.274840833179));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE1.setTime(1.317044973373413);
      // Undeclared exception!
      try { 
        adamsBashforthIntegrator0.integrate(expandableStatefulODE1, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(8.66419234315257E-255);
      eulerIntegrator0.clearStepHandlers();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(8.66419234315257E-255);
      eulerIntegrator0.addEventHandler(eventHandler0, 8.66419234315257E-255, 8.66419234315257E-255, 340, (UnivariateSolver) illinoisSolver0);
      eulerIntegrator0.getEvaluations();
      eulerIntegrator0.getCurrentStepStart();
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(8.66419234315257E-255, (-833.7496353034954), (-833.7496353034954), 3141.711522962);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3141.711522962;
      doubleArray0[1] = (-833.7496353034954);
      dormandPrince54Integrator0.setStepSizeControl((-833.7496353034954), (-2915.79479019951), doubleArray0, doubleArray0);
      dormandPrince54Integrator0.getOrder();
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      eulerIntegrator0.addStepHandler(dummyStepHandler0);
      eulerIntegrator0.getEventHandlers();
      eulerIntegrator0.getCurrentStepStart();
      eulerIntegrator0.getStepHandlers();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2.2737367544323206E-10, 5.27579825970359E190, 1728.88821, (-1.4672600326020399E299));
      graggBulirschStoerIntegrator0.setControlFactors((-950.97902978424), (-833.7496353034954), (-2748.4), (-2748.4));
      graggBulirschStoerIntegrator0.clearStepHandlers();
      graggBulirschStoerIntegrator0.setStabilityCheck(true, 5, (-2170), (-2170));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double double0 = 0.0;
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0.0);
      midpointIntegrator0.clearStepHandlers();
      double double1 = (-2745.980489721892);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, (-2745.980489721892), 0.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double2 = (-424.27960699);
      double double3 = (-957.868972667);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-957.868972667);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(7).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double double4 = 8.058695;
      try { 
        midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-4936.93213711), doubleArray0, 8.058695, (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 14
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(5.554964922539782, 5.554964922539782, 5.554964922539782, 5.554964922539782);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1805.0), (-1199.5), 0.0, (-1199.5));
      graggBulirschStoerIntegrator0.setStabilityCheck(true, (-1), (-1), (-1199.5));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2658.55;
      doubleArray0[1] = (double) (-1);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2658.55, (-938.889708391637), doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getOrder();
      BisectionSolver bisectionSolver0 = new BisectionSolver();
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-1.0));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      midpointIntegrator0.addEventHandler(eventHandler0, (double) (-1), 1217.1030891981, (-128), (UnivariateSolver) bisectionSolver0);
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-2037.274840833179), 3049.702421362458);
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler1, 1430.8857367, 0.0, 739, (UnivariateSolver) regulaFalsiSolver0);
      midpointIntegrator0.clearStepHandlers();
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 2658.55;
      doubleArray1[2] = 3049.702421362458;
      doubleArray1[3] = (-2037.274840833179);
      doubleArray1[4] = (double) (-128);
      doubleArray1[5] = (double) (-128);
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(8, 8, 1.7020465042442242E-8, doubleArray0, doubleArray1);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        adamsMoultonIntegrator0.integrate(expandableStatefulODE0, 1873.967437082195);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 2
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(1174.82);
      gillIntegrator0.getCurrentStepStart();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double double0 = 3749.771779;
      GillIntegrator gillIntegrator0 = new GillIntegrator(3749.771779);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-2766.1916848), 3749.771779, (-2766.1916848), (-2766.1916848));
      graggBulirschStoerIntegrator0.getStepHandlers();
      double double1 = 0.0;
      graggBulirschStoerIntegrator0.setControlFactors((-2766.1916848), 0.0, (-4280.96252691), 0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      gillIntegrator0.integrate(expandableStatefulODE0, (-4280.96252691));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-22.113666853125302), 16.0, 0.0, 16.0);
      double[] doubleArray0 = new double[0];
      highamHall54Integrator0.getStepHandlers();
      highamHall54Integrator0.setStepSizeControl(3780.696136002452, (double) 340, doubleArray0, doubleArray0);
      highamHall54Integrator0.setInitialStepSize((-22.113666853125302));
      highamHall54Integrator0.getEvaluations();
      highamHall54Integrator0.getOrder();
      highamHall54Integrator0.getMaxEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(358).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      highamHall54Integrator0.setStepSizeControl((double) Integer.MAX_VALUE, (-22.113666853125302), 1.0, 0.0);
      try { 
        highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1728.88821), doubleArray0, (double) 0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 716
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(5.554964922539782, 5.554964922539782, 5.554964922539782, 5.554964922539782);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1805.0), (-1199.5), 0.0, (-1199.5));
      graggBulirschStoerIntegrator0.setStabilityCheck(true, (-1), (-1), (-1199.5));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2658.55;
      doubleArray0[1] = (double) (-1);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2658.55, (-938.889708391637), doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getOrder();
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(8, (-2037.274840833179), (-1199.5), 160.954147, 1217.1030891981);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      try { 
        adamsBashforthIntegrator0.integrate(expandableStatefulODE0, 5.554964922539782);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one column
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(974.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      gillIntegrator0.clearEventHandlers();
      gillIntegrator0.addEventHandler(eventHandler0, 954.27807382953, (-1.0), 139);
      gillIntegrator0.clearEventHandlers();
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(135.0, 135.0, 139, 139);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = 954.27807382953;
      doubleArray0[3] = 954.27807382953;
      doubleArray0[4] = 974.0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 954.27807382953;
      doubleArray0[7] = (-1117.729493332);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (-1.0);
      // Undeclared exception!
      try { 
        dormandPrince54Integrator0.initializeStep(true, 0, doubleArray0, 139, doubleArray0, doubleArray1, doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-178.362), 0.0, (-2721.81357633), 1017.9836479034);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 3358.7012068375);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(2.2737367544323206E-10);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.317044973373413;
      doubleArray0[1] = 2.2737367544323206E-10;
      doubleArray0[2] = 1.317044973373413;
      doubleArray0[3] = 8.720743087611513E168;
      doubleArray0[4] = 2.2737367544323206E-10;
      doubleArray0[5] = 2.2737367544323206E-10;
      doubleArray0[6] = 531.0;
      doubleArray0[7] = 1639.634;
      double[] doubleArray1 = new double[7];
      classicalRungeKuttaIntegrator0.setMaxEvaluations(1220663637);
      doubleArray1[0] = 2.2737367544323206E-10;
      doubleArray1[1] = 2.2737367544323206E-10;
      doubleArray1[2] = 1.317044973373413;
      doubleArray1[3] = 1639.634;
      doubleArray1[4] = 1639.634;
      doubleArray1[5] = 531.0;
      doubleArray1[6] = 2.2737367544323206E-10;
      // Undeclared exception!
      try { 
        classicalRungeKuttaIntegrator0.integrate((FirstOrderDifferentialEquations) null, 1.317044973373413, doubleArray0, 2.2737367544323206E-10, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(956.9);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(956.9, 0.0, (-760.566438342), 0.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      BrentSolver brentSolver0 = new BrentSolver((-2933.4), 1182, 0.0);
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 0.0, 956.9, 1182, (UnivariateSolver) brentSolver0);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.9;
      doubleArray0[1] = 0.9;
      doubleArray0[2] = 0.9;
      doubleArray0[3] = 0.9;
      doubleArray0[4] = 0.9;
      doubleArray0[5] = 0.9;
      doubleArray0[6] = 6.265569375E11;
      doubleArray0[7] = 3174.0;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.9, 0.9, doubleArray0, doubleArray0);
      int int0 = 211;
      highamHall54Integrator0.setMaxEvaluations(211);
      highamHall54Integrator0.getEventHandlers();
      highamHall54Integrator0.setMaxEvaluations(0);
      highamHall54Integrator0.getEventHandlers();
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.9, 0.9, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.getOrder();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.9, 0, doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.initializeStep(false, 2050, doubleArray0, 3.141592653589793, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double double0 = (-975.368118518089);
      double double1 = (-3206.5702);
      double double2 = (-2.0);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-975.368118518089), (-3206.5702), (-2.0), (-975.368118518089));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2.0);
      doubleArray0[1] = (-3206.5702);
      doubleArray0[2] = (-975.368118518089);
      doubleArray0[3] = (-975.368118518089);
      dormandPrince54Integrator0.setStepSizeControl((-975.368118518089), (-975.368118518089), doubleArray0, doubleArray0);
      int int0 = (-706);
      dormandPrince54Integrator0.setMaxEvaluations((-706));
      dormandPrince54Integrator0.clearStepHandlers();
      double double3 = (-1646.949);
      double double4 = (-2159.306);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        dormandPrince54Integrator0.integrate(expandableStatefulODE0, (-2159.306));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 4
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double double0 = (-3782.10222394393);
      GillIntegrator gillIntegrator0 = new GillIntegrator((-3782.10222394393));
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-3782.10222394393);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-3782.10222394393);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-3782.10222394393);
      doubleArray0[5] = 0.0;
      // Undeclared exception!
      try { 
        gillIntegrator0.computeDerivatives(0.0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-381.8), (-381.8), (-381.8), (-381.8));
      boolean boolean0 = true;
      int int0 = 0;
      double double0 = 0.0;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (-381.8);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 0;
      // Undeclared exception!
      try { 
        highamHall54Integrator0.computeDerivatives(0.0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double double0 = (-2123.2471202429665);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-2123.2471202429665), 3276.96918398085, 0.0, 3276.96918398085);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      SecantSolver secantSolver0 = new SecantSolver(3276.96918398085);
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (-2123.2471202429665), (-2123.2471202429665), 0, (UnivariateSolver) secantSolver0);
      FirstOrderConverter firstOrderConverter0 = null;
      try {
        firstOrderConverter0 = new FirstOrderConverter((SecondOrderDifferentialEquations) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.FirstOrderConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double double0 = 1174.82;
      GillIntegrator gillIntegrator0 = new GillIntegrator(1174.82);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1174.82, (-1880.470193), 2.220446049250313E-13, 2.220446049250313E-13);
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(2.220446049250313E-13, 1174.82, doubleArray0, doubleArray0);
      BrentSolver brentSolver0 = new BrentSolver((-1880.470193), 2400);
      gillIntegrator0.addEventHandler((EventHandler) null, 1174.82, 1174.82, 2400, (UnivariateSolver) brentSolver0);
      FirstOrderConverter firstOrderConverter0 = null;
      try {
        firstOrderConverter0 = new FirstOrderConverter((SecondOrderDifferentialEquations) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.FirstOrderConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 0.0, 0.0, (-630.187));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      dormandPrince54Integrator0.addEventHandler(eventHandler0, 0.0, 0.0, 0);
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator((-994.3614));
      eulerIntegrator0.getStepHandlers();
      eulerIntegrator0.getName();
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator((-994.3614));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-994.3614);
      doubleArray0[1] = (-3.7398514182529506E-8);
      doubleArray0[2] = (-3.7398514182529506E-8);
      doubleArray0[3] = (-3.7398514182529506E-8);
      doubleArray0[4] = (-3.7398514182529506E-8);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-3.7398514182529506E-8), (-994.3614), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setOrderControl(3295, (-3.7398514182529506E-8), (-3.7398514182529506E-8));
      graggBulirschStoerIntegrator0.setInterpolationControl(false, 2085);
      int int0 = graggBulirschStoerIntegrator0.getEvaluations();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-22.113666853125302), 16.0, 0.0, 16.0);
      highamHall54Integrator0.setMaxEvaluations(340);
      double[] doubleArray0 = new double[0];
      highamHall54Integrator0.getStepHandlers();
      highamHall54Integrator0.setStepSizeControl(3780.696136002452, (double) 340, doubleArray0, doubleArray0);
      highamHall54Integrator0.setInitialStepSize((-22.113666853125302));
      highamHall54Integrator0.getEvaluations();
      highamHall54Integrator0.getOrder();
      highamHall54Integrator0.getMaxEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      highamHall54Integrator0.setStepSizeControl((double) 340, (-22.113666853125302), 1.0, 0.0);
      try { 
        highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1728.88821), doubleArray0, (double) 0, doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (340) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.9;
      doubleArray0[1] = 0.9;
      doubleArray0[2] = 0.9;
      doubleArray0[3] = 0.9;
      doubleArray0[4] = 0.9;
      doubleArray0[5] = 0.9;
      doubleArray0[6] = 6.265569375E11;
      doubleArray0[7] = 3174.0;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.9, 0.9, doubleArray0, doubleArray0);
      int int0 = 0;
      int int1 = 211;
      highamHall54Integrator0.setMaxEvaluations(211);
      highamHall54Integrator0.getEventHandlers();
      highamHall54Integrator0.setMaxEvaluations(0);
      highamHall54Integrator0.getEventHandlers();
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.9, 0.9, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.getOrder();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.9, 0, doubleArray0, doubleArray0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.initializeStep(false, 2050, doubleArray0, 3.141592653589793, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(11.99229113618279);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1.0E-10;
      doubleArray0[1] = 11.99229113618279;
      doubleArray0[2] = 1.0E-10;
      doubleArray0[3] = 11.99229113618279;
      doubleArray0[4] = 1.0E-10;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1.0E-10, 11.99229113618279, doubleArray0, doubleArray0);
      double double0 = (-0.05);
      graggBulirschStoerIntegrator0.setOrderControl((-2869), 613.71, (-0.05));
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1209.673137856461), (-0.05), doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getOrder();
      dormandPrince853Integrator0.getCurrentSignedStepsize();
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      classicalRungeKuttaIntegrator0.addStepHandler(dummyStepHandler0);
      FirstOrderConverter firstOrderConverter0 = null;
      try {
        firstOrderConverter0 = new FirstOrderConverter((SecondOrderDifferentialEquations) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.FirstOrderConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1875.8);
      doubleArray0[1] = (-1875.8);
      doubleArray0[2] = (-1875.8);
      doubleArray0[3] = (-1875.8);
      doubleArray0[4] = (-1875.8);
      doubleArray0[5] = (-1875.8);
      doubleArray0[6] = (-1875.8);
      doubleArray0[7] = (-1875.8);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1875.8), (-1875.8), doubleArray0, doubleArray0);
      EventHandler eventHandler0 = null;
      double double0 = 259.0;
      graggBulirschStoerIntegrator0.clearEventHandlers();
      double double1 = 0.0;
      int int0 = 278;
      graggBulirschStoerIntegrator0.setInitialStepSize(1097.436978);
      MullerSolver mullerSolver0 = new MullerSolver();
      Asinh asinh0 = new Asinh();
      // Undeclared exception!
      try { 
        mullerSolver0.solve(4016, (UnivariateFunction) asinh0, 354216.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [\uFFFD, \uFFFD], values: [\uFFFD, \uFFFD]
         //
         verifyException("org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1743.735;
      doubleArray0[1] = 1743.735;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1743.735, 1743.735, doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1743.735;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 1743.735;
      doubleArray1[4] = 1743.735;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 0.0;
      doubleArray1[8] = 1743.735;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 1743.735, doubleArray1, doubleArray1);
      // Undeclared exception!
      try { 
        dormandPrince853Integrator0.initializeStep(true, 933, doubleArray0, 1761.1723499999998, doubleArray1, doubleArray1, doubleArray1, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-327.23691989);
      doubleArray0[1] = (-327.23691989);
      doubleArray0[2] = (-327.23691989);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (-327.23691989);
      doubleArray0[5] = 1.0;
      doubleArray0[6] = (-327.23691989);
      doubleArray0[7] = (-327.23691989);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-327.23691989), 1.0, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.clearEventHandlers();
      dormandPrince54Integrator0.setInitialStepSize(1188.66822);
      // Undeclared exception!
      try { 
        dormandPrince54Integrator0.initializeStep(true, 0, doubleArray0, (-330.5092890889), doubleArray0, doubleArray0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-3782.10222394393));
      gillIntegrator0.clearStepHandlers();
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double double0 = 0.0;
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0.0);
      midpointIntegrator0.clearStepHandlers();
      double double1 = (-2745.980489721892);
      double double2 = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, (-2745.980489721892), 0.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double3 = (-424.27960699);
      double double4 = (-957.868972667);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-957.868972667);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      try { 
        midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-4936.93213711), doubleArray0, 8.058695, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, 1000.0, 1000.0);
      graggBulirschStoerIntegrator0.getMaxEvaluations();
      graggBulirschStoerIntegrator0.setStepSizeControl(0.0, 0.0, 0.0, 0.0);
      double double2 = 845.226277379165;
      graggBulirschStoerIntegrator0.setControlFactors(1000.0, 845.226277379165, 845.226277379165, 1000.0);
      int int0 = 0;
      double double3 = (-2385.00089203);
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = null;
      try {
        adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(0, (-2385.00089203), Double.NaN, 3161.0992, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // multistep method needs at least 0 previous steps, got 2
         //
         verifyException("org.apache.commons.math3.ode.MultistepIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 0.6510416666666666;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, (-2087.99), 19.985053242002433, 0.6510416666666666);
      dormandPrince853Integrator0.setMinReduction(0.0);
      dormandPrince853Integrator0.getMaxEvaluations();
      int int0 = (-2200);
      dormandPrince853Integrator0.clearEventHandlers();
      dormandPrince853Integrator0.setMaxEvaluations((-2200));
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-2200), 0.0, (-2200), 4141.45713);
      graggBulirschStoerIntegrator0.setControlFactors(0.0, 15.0, (-2087.99), 15.0);
      ExpandableStatefulODE expandableStatefulODE0 = null;
      graggBulirschStoerIntegrator0.clearStepHandlers();
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.integrate((ExpandableStatefulODE) null, 1.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3297.88183), 0.0, 0.0, 1.0);
      assertEquals(0.0, highamHall54Integrator0.getMaxStep(), 0.01);
  }
}
