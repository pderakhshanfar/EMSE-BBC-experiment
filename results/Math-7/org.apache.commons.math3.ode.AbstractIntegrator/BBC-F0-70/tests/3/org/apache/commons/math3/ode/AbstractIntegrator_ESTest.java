/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 22:31:19 GMT 2021
 */

package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
import org.apache.commons.math3.analysis.function.Log;
import org.apache.commons.math3.analysis.function.Sinc;
import org.apache.commons.math3.analysis.function.Tanh;
import org.apache.commons.math3.analysis.solvers.BisectionSolver;
import org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver;
import org.apache.commons.math3.analysis.solvers.BrentSolver;
import org.apache.commons.math3.analysis.solvers.IllinoisSolver;
import org.apache.commons.math3.analysis.solvers.MullerSolver2;
import org.apache.commons.math3.analysis.solvers.RiddersSolver;
import org.apache.commons.math3.analysis.solvers.SecantSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.ode.EquationsMapper;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator;
import org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator;
import org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.EulerIntegrator;
import org.apache.commons.math3.ode.nonstiff.GillIntegrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.nonstiff.MidpointIntegrator;
import org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator;
import org.apache.commons.math3.ode.sampling.DummyStepHandler;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.StepHandler;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.apache.commons.math3.ode.sampling.StepNormalizerBounds;
import org.apache.commons.math3.ode.sampling.StepNormalizerMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegrator_ESTest extends AbstractIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double double0 = (-2033.5116543);
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, (-2033.5116543), doubleArray0, doubleArray0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(2033.5116543, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(1228.0, 3822.3168407355274, (-2033.5116543), 1218.832642894, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      double double1 = 541.72332;
      int int0 = 366;
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 541.72332, 541.72332, 366);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(2033.5116543, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler1).g(anyDouble() , any(double[].class));
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler1, 541.72332, 4115.70356075, 366);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(2033.5116543, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      double double2 = 284.069558;
      graggBulirschStoerIntegrator0.setStepSizeControl(2.2868466674913266E-7, (-1.0772154376548336E-8), 1340.8611231113, 2.2868466674913266E-7);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(2.2868466674913266E-7, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(1.0772154376548336E-8, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      graggBulirschStoerIntegrator0.setMaxEvaluations(371);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(2.2868466674913266E-7, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(1.0772154376548336E-8, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 501.96054030487, doubleArray0, (-1.0772154376548336E-8), doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (371) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, (-2033.5116543), doubleArray0, doubleArray0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(2033.5116543, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      double double0 = 1228.0;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(1228.0, 3822.3168407355274, (-2033.5116543), 1218.832642894, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 541.72332, 541.72332, 366);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(2033.5116543, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      double double1 = 5.3514180410849046E-8;
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-902.7517400887), (-902.7517400887), 5.3514180410849046E-8, (-902.7517400887), 0.0).when(eventHandler1).g(anyDouble() , any(double[].class));
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler1, 1218.832642894, 118.33815523298244, 366);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(2033.5116543, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      graggBulirschStoerIntegrator0.setStepSizeControl(118.33815523298244, 0.0, 864.0426606726, (-3995.744596832));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(118.33815523298244, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      EventHandler eventHandler2 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertNotNull(expandableStatefulODE0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (-3995.744596832));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1000.0, 1000.0, 1000.0, 1000.0);
      assertNotNull(highamHall54Integrator0);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(1000.0, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(1000.0, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(1000.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      
      double double0 = highamHall54Integrator0.getCurrentStepStart();
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(1000.0, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(1000.0, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(1000.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-2542.2), 1.1748409271240234, (-343.54137218), 42.3040761860002, 1.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      BrentSolver brentSolver0 = new BrentSolver(1000.0, 1000.0);
      assertNotNull(brentSolver0);
      assertEquals(1000.0, brentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1000.0, brentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, brentSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, brentSolver0.getMin(), 0.01);
      assertEquals(0.0, brentSolver0.getMax(), 0.01);
      
      highamHall54Integrator0.addEventHandler(eventHandler0, (double) 8, Double.NaN, 8, (UnivariateSolver) brentSolver0);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(1000.0, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(1000.0, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(1000.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(1000.0, brentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1000.0, brentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, brentSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, brentSolver0.getMin(), 0.01);
      assertEquals(0.0, brentSolver0.getMax(), 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(16, firstOrderConverter0.getDimension());
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertNotNull(expandableStatefulODE0);
      assertEquals(16, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      
      expandableStatefulODE0.setTime(792.7659353192);
      assertEquals(16, firstOrderConverter0.getDimension());
      assertEquals(792.7659353192, expandableStatefulODE0.getTime(), 0.01);
      
      try { 
        highamHall54Integrator0.integrate(expandableStatefulODE0, 1000.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // number of iterations=6, maximum iterations=6, initial=792.766, lower bound=792.766, upper bound=800.736, final a value=792.766, final b value=800.736, f(a)=1, f(b)=1
         //
         verifyException("org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1000.0, 1000.0, 1000.0, 1000.0);
      assertNotNull(highamHall54Integrator0);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(1000.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(1000.0, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(1000.0, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      
      double double0 = highamHall54Integrator0.getCurrentStepStart();
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(1000.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(1000.0, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(1000.0, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      BrentSolver brentSolver0 = new BrentSolver(1000.0, 1000.0);
      assertNotNull(brentSolver0);
      assertEquals(0.0, brentSolver0.getStartValue(), 0.01);
      assertEquals(1000.0, brentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1000.0, brentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, brentSolver0.getMin(), 0.01);
      assertEquals(0.0, brentSolver0.getMax(), 0.01);
      
      highamHall54Integrator0.addEventHandler(eventHandler0, (double) 8, Double.NaN, 8, (UnivariateSolver) brentSolver0);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(1000.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(1000.0, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(1000.0, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(0.0, brentSolver0.getStartValue(), 0.01);
      assertEquals(1000.0, brentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1000.0, brentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-15, brentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, brentSolver0.getMin(), 0.01);
      assertEquals(0.0, brentSolver0.getMax(), 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(16, firstOrderConverter0.getDimension());
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertNotNull(expandableStatefulODE0);
      assertEquals(16, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      
      expandableStatefulODE0.setTime(792.7659353192);
      assertEquals(16, firstOrderConverter0.getDimension());
      assertEquals(792.7659353192, expandableStatefulODE0.getTime(), 0.01);
      
      highamHall54Integrator0.integrate(expandableStatefulODE0, 1000.0);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(1000.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(1000.0, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(1000.0, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(16, firstOrderConverter0.getDimension());
      assertEquals(1000.0, expandableStatefulODE0.getTime(), 0.01);
      
      int int0 = highamHall54Integrator0.getEvaluations();
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(1000.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(1000.0, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(1000.0, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double double0 = 215.276183519;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2399.5116543, 2399.5116543, 215.276183519, (-1015.0));
      assertNotNull(dormandPrince853Integrator0);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(2399.5116543, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(2399.5116543, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(2399.5116543, dormandPrince853Integrator0.getMinStep(), 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      assertFalse(firstOrderConverter1.equals((Object)firstOrderConverter0));
      assertNotNull(firstOrderConverter1);
      assertEquals(0, firstOrderConverter1.getDimension());
      
      double[] doubleArray0 = new double[0];
      double double1 = dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter1, 0.0, doubleArray0, (-2033.5116543), doubleArray0);
      assertFalse(firstOrderConverter1.equals((Object)firstOrderConverter0));
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(2399.5116543, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(2399.5116543, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(2399.5116543, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(0, firstOrderConverter1.getDimension());
      assertEquals(0, doubleArray0.length);
      assertEquals((-2033.5116543), double1, 0.01);
      assertNotSame(firstOrderConverter1, firstOrderConverter0);
      
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = null;
      try {
        adamsMoultonIntegrator0 = new AdamsMoultonIntegrator((-389), (-9.377320954068088E-8), (-2526.4410156), (-9.377320954068088E-8), 1265.2272174729);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // multistep method needs at least -389 previous steps, got 2
         //
         verifyException("org.apache.commons.math3.ode.MultistepIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1157.689, 1157.689, 1157.689, 1000.0);
      assertNotNull(highamHall54Integrator0);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(1157.689, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(1157.689, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(1157.689, highamHall54Integrator0.getMinStep(), 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(2874).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(5748, firstOrderConverter0.getDimension());
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1000.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1259.2;
      doubleArray0[3] = 1157.689;
      doubleArray0[4] = 2014.43505480922;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 2014.43505480922;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1.0, 2014.43505480922, doubleArray0, doubleArray0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertArrayEquals(new double[] {1000.0, 1.0, 1259.2, 1157.689, 2014.43505480922, 1.0, 2014.43505480922}, doubleArray0, 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(2014.43505480922, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(1.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(44.88245820818218, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(7, doubleArray0.length);
      
      graggBulirschStoerIntegrator0.clearStepHandlers();
      assertArrayEquals(new double[] {1000.0, 1.0, 1259.2, 1157.689, 2014.43505480922, 1.0, 2014.43505480922}, doubleArray0, 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(2014.43505480922, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(1.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(44.88245820818218, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(7, doubleArray0.length);
      
      graggBulirschStoerIntegrator0.clearEventHandlers();
      assertArrayEquals(new double[] {1000.0, 1.0, 1259.2, 1157.689, 2014.43505480922, 1.0, 2014.43505480922}, doubleArray0, 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(2014.43505480922, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(1.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(44.88245820818218, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(7, doubleArray0.length);
      
      HighamHall54Integrator highamHall54Integrator1 = new HighamHall54Integrator(2.167272474431968E-8, 3314.60656, 1.0, 1.0);
      assertFalse(highamHall54Integrator1.equals((Object)highamHall54Integrator0));
      assertNotNull(highamHall54Integrator1);
      assertEquals(5, highamHall54Integrator1.getOrder());
      assertEquals(Double.NaN, highamHall54Integrator1.getCurrentStepStart(), 0.01);
      assertEquals(0.00847564484924872, highamHall54Integrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(2.167272474431968E-8, highamHall54Integrator1.getMinStep(), 0.01);
      assertEquals(0.2, highamHall54Integrator1.getMinReduction(), 0.01);
      assertEquals(3314.60656, highamHall54Integrator1.getMaxStep(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator1.getName());
      assertEquals(10.0, highamHall54Integrator1.getMaxGrowth(), 0.01);
      assertEquals(0.9, highamHall54Integrator1.getSafety(), 0.01);
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertNotNull(expandableStatefulODE0);
      assertEquals(5748, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      
      // Undeclared exception!
      try { 
        highamHall54Integrator1.integrate((ExpandableStatefulODE) null, (-826.156902));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1000.0, 1000.0, 1000.0, 1000.0);
      assertNotNull(highamHall54Integrator0);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(1000.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(1000.0, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(1000.0, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      
      double double0 = highamHall54Integrator0.getCurrentStepStart();
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(1000.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(1000.0, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(1000.0, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(Double.NaN, double0, 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertNotNull(expandableStatefulODE0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      
      expandableStatefulODE0.setTime(792.7659353192);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(792.7659353192, expandableStatefulODE0.getTime(), 0.01);
      
      highamHall54Integrator0.integrate(expandableStatefulODE0, 1000.0);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(1000.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(1000.0, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(1000.0, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(1000.0, expandableStatefulODE0.getTime(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, (-2033.5116543), doubleArray0, doubleArray0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(2033.5116543, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      double double0 = 1228.0;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((EventHandler.Action) null).when(eventHandler0).eventOccurred(anyDouble() , any(double[].class) , anyBoolean());
      doReturn(1228.0, 3822.3168407355274, (-2033.5116543), 1218.832642894, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 541.72332, 541.72332, 366);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(2033.5116543, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(1591.97, 0.0, (-3173.3), 3822.3168407355274, 4115.70356075).when(eventHandler1).g(anyDouble() , any(double[].class));
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler1, 541.72332, 4115.70356075, 366);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(2033.5116543, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      double double1 = (-1.0772154376548336E-8);
      graggBulirschStoerIntegrator0.setStepSizeControl(2.2868466674913266E-7, (-1.0772154376548336E-8), 1340.8611231113, 2.2868466674913266E-7);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(1.0772154376548336E-8, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(2.2868466674913266E-7, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      graggBulirschStoerIntegrator0.setStepSizeControl(3822.3168407355274, 1340.8611231113, 792.7659353192, 4054.684799999972);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(3822.3168407355274, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(1340.8611231113, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      double double2 = 848.112;
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 848.112, doubleArray0, 5.169878828456423E-23, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [\uFFFD, 0], values: [4,115.704, 4,115.704]
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-284.069558), (-284.069558), 253.012558682744, 4.091704288360009E306);
      assertNotNull(highamHall54Integrator0);
      assertEquals(284.069558, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(284.069558, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(284.069558, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(38.02615586745044, 4.091704288360009E306, doubleArray0, doubleArray0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(1.24736436149464E154, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(38.02615586745044, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(4.091704288360009E306, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      LinkedList<StepHandler> linkedList0 = new LinkedList<StepHandler>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((double)0, 253.012558682744, 1076.5920417, (double)0).when(eventHandler0).g(anyDouble() , any(double[].class));
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (-2033.5116543), 0.0, 0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(1.24736436149464E154, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(38.02615586745044, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(4.091704288360009E306, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      graggBulirschStoerIntegrator0.setStepSizeControl(8.077935669463161E-25, 253.012558682744, 38.02615586745044, (double) 0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(1.24736436149464E154, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(8.077935669463161E-25, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(253.012558682744, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      double double0 = graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 4.547473508864641E-10, doubleArray0, 0.0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(1.4296220383742966E-11, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(8.077935669463161E-25, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(253.012558682744, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      graggBulirschStoerIntegrator0.clearStepHandlers();
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(1.4296220383742966E-11, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(8.077935669463161E-25, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(253.012558682744, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      graggBulirschStoerIntegrator0.clearEventHandlers();
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(1.4296220383742966E-11, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(8.077935669463161E-25, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(253.012558682744, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      HighamHall54Integrator highamHall54Integrator1 = new HighamHall54Integrator((-284.069558), (-826.156902), 4.547473508864641E-10, 0.0);
      assertFalse(highamHall54Integrator1.equals((Object)highamHall54Integrator0));
      assertNotNull(highamHall54Integrator1);
      assertEquals(826.156902, highamHall54Integrator1.getMaxStep(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator1.getName());
      assertEquals(484.44403803720127, highamHall54Integrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.2, highamHall54Integrator1.getMinReduction(), 0.01);
      assertEquals(5, highamHall54Integrator1.getOrder());
      assertEquals(10.0, highamHall54Integrator1.getMaxGrowth(), 0.01);
      assertEquals(0.9, highamHall54Integrator1.getSafety(), 0.01);
      assertEquals(284.069558, highamHall54Integrator1.getMinStep(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator1.getCurrentStepStart(), 0.01);
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertNotNull(expandableStatefulODE0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 253.012558682744);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double double0 = (-2033.5116543);
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, (-2033.5116543), doubleArray0, doubleArray0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(2033.5116543, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(1228.0, 3822.3168407355274, (-2033.5116543), 1218.832642894, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      double double1 = 541.72332;
      int int0 = 366;
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 541.72332, 541.72332, 366);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(2033.5116543, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler1).g(anyDouble() , any(double[].class));
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler1, 541.72332, 4115.70356075, 366);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(2033.5116543, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      double double2 = 284.069558;
      graggBulirschStoerIntegrator0.setStepSizeControl(2.2868466674913266E-7, (-1.0772154376548336E-8), 1340.8611231113, 2.2868466674913266E-7);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(2.2868466674913266E-7, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(1.0772154376548336E-8, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 501.96054030487, doubleArray0, (-1.0772154376548336E-8), doubleArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double double0 = 253.012558682744;
      double double1 = (-284.069558);
      double double2 = 4.091704288360009E306;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-284.069558), (-284.069558), 253.012558682744, 4.091704288360009E306);
      assertNotNull(highamHall54Integrator0);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(284.069558, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(284.069558, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(284.069558, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(37.97544926401763, 4.091704288360009E306, doubleArray0, doubleArray0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(4.091704288360009E306, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(1.2465324247927884E154, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(37.97544926401763, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      LinkedList<StepHandler> linkedList0 = new LinkedList<StepHandler>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      double double3 = 4115.70356075;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((double)0, 253.012558682744, 1076.5920417, (double)0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      double double4 = (-2033.5116543);
      double double5 = 0.0;
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (-2033.5116543), 0.0, 0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(4.091704288360009E306, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(1.2465324247927884E154, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(37.97544926401763, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      graggBulirschStoerIntegrator0.setStepSizeControl(253.012558682744, 4.091704288360009E306, (double) 0, 2428.925284);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(253.012558682744, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(4.091704288360009E306, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(1.2465324247927884E154, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-742.402523), doubleArray0, 0.2741633653640747, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, (-2033.5116543), doubleArray0, doubleArray0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(2033.5116543, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.013579258695244789, 740.89754).when(eventHandler0).g(anyDouble() , any(double[].class));
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 541.72332, 541.72332, 366);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(2033.5116543, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      graggBulirschStoerIntegrator0.setStepSizeControl(4115.70356075, 2.2868466674913266E-7, 0.0, (-1.0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(4115.70356075, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(2.2868466674913266E-7, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      graggBulirschStoerIntegrator0.setStepSizeControl((double) 366, 223.0604504385683, (-1.0), 0.0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(366.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(223.0604504385683, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      double double0 = graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 223.0604504385683, doubleArray0, 70.51, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(366.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(285.72736106385753, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(223.0604504385683, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(0, doubleArray0.length);
      assertEquals(70.50999999999999, double0, 0.01);
      
      graggBulirschStoerIntegrator0.clearStepHandlers();
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(366.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(285.72736106385753, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(223.0604504385683, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertNotNull(expandableStatefulODE0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(2.862518609581133E-20, 4.547473508864641E-10, doubleArray0, doubleArray0);
      assertNotNull(highamHall54Integrator0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(3.607939515249978E-15, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(4.547473508864641E-10, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(2.862518609581133E-20, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter0);
      assertFalse(expandableStatefulODE1.equals((Object)expandableStatefulODE0));
      assertNotNull(expandableStatefulODE1);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE1.getTime(), 0.01);
      
      // Undeclared exception!
      highamHall54Integrator0.integrate(expandableStatefulODE1, 70.51);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-284.069558), (-284.069558), 253.012558682744, 4.091704288360009E306);
      assertNotNull(highamHall54Integrator0);
      assertEquals(284.069558, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(284.069558, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(284.069558, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      
      double[] doubleArray0 = new double[1];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(37.97544926401763, 0.0, doubleArray0, doubleArray0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(37.97544926401763, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      LinkedList<StepHandler> linkedList0 = new LinkedList<StepHandler>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (-284.069558), (-284.069558), Integer.MAX_VALUE);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(37.97544926401763, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      int int0 = 0;
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler1, (-2033.5116543), 0.0, 0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(37.97544926401763, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      graggBulirschStoerIntegrator0.setMaxEvaluations(0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(37.97544926401763, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      graggBulirschStoerIntegrator0.setStepSizeControl(284.069558, 0.0, 37.97544926401763, (double) 0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(284.069558, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 4.547473508864641E-10, doubleArray0, 0.0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-284.069558), (-284.069558), 253.012558682744, 4.091704288360009E306);
      assertNotNull(highamHall54Integrator0);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(284.069558, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(284.069558, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(284.069558, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(37.97544926401763, 4.091704288360009E306, doubleArray0, doubleArray0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(4.091704288360009E306, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(1.2465324247927884E154, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(37.97544926401763, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      LinkedList<StepHandler> linkedList0 = new LinkedList<StepHandler>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((double)0, 253.012558682744, 1076.5920417, (double)0).when(eventHandler0).g(anyDouble() , any(double[].class));
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (-2033.5116543), 0.0, 0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(4.091704288360009E306, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(1.2465324247927884E154, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(37.97544926401763, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      graggBulirschStoerIntegrator0.setStepSizeControl(284.069558, 253.012558682744, 37.97544926401763, (double) 0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(284.069558, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(1.2465324247927884E154, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(253.012558682744, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      double double0 = graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 4.547473508864641E-10, doubleArray0, 0.0, doubleArray0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(284.069558, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(253.012558682744, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(268.0917113852201, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
      
      graggBulirschStoerIntegrator0.clearStepHandlers();
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(284.069558, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(253.012558682744, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(268.0917113852201, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      graggBulirschStoerIntegrator0.clearEventHandlers();
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(284.069558, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(253.012558682744, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(268.0917113852201, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      BisectionSolver bisectionSolver0 = new BisectionSolver();
      assertNotNull(bisectionSolver0);
      assertEquals(1.0E-15, bisectionSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, bisectionSolver0.getMax(), 0.01);
      assertEquals(0.0, bisectionSolver0.getMin(), 0.01);
      assertEquals(1.0E-6, bisectionSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, bisectionSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-14, bisectionSolver0.getRelativeAccuracy(), 0.01);
      
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler1, 1777.2, 4115.70356075, 942, (UnivariateSolver) bisectionSolver0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(284.069558, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(253.012558682744, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(268.0917113852201, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(1.0E-15, bisectionSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, bisectionSolver0.getMax(), 0.01);
      assertEquals(0.0, bisectionSolver0.getMin(), 0.01);
      assertEquals(1.0E-6, bisectionSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, bisectionSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-14, bisectionSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      double double1 = graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
      assertNotEquals(double1, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(284.069558, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(253.012558682744, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(268.0917113852201, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(268.0917113852201, double1, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-284.069558), (-284.069558), 253.012558682744, 4.091704288360009E306);
      assertNotNull(highamHall54Integrator0);
      assertEquals(284.069558, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(284.069558, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(284.069558, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(37.97544926401763, 0.0, doubleArray0, doubleArray0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(37.97544926401763, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      Collection<StepHandler> collection0 = graggBulirschStoerIntegrator0.getStepHandlers();
      assertNotNull(collection0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(37.97544926401763, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, (double)0, 1000.0, 37.97544926401763, (-4611.43397386616)).when(eventHandler0).g(anyDouble() , any(double[].class));
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 37.97544926401763, 0.0, 0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(37.97544926401763, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      graggBulirschStoerIntegrator0.setStepSizeControl(0.0, 0.0, (-1.0), 415.9755);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      assertFalse(firstOrderConverter1.equals((Object)firstOrderConverter0));
      assertNotNull(firstOrderConverter1);
      assertEquals(0, firstOrderConverter1.getDimension());
      
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter1, 841.72279596, doubleArray0, (double) 0, doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1000.0, 1000.0, 1000.0, 1000.0);
      assertNotNull(highamHall54Integrator0);
      assertEquals(1000.0, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(1000.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(1000.0, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      
      double double0 = highamHall54Integrator0.getCurrentStepStart();
      assertEquals(1000.0, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(1000.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(1000.0, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertNotNull(expandableStatefulODE0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      
      // Undeclared exception!
      highamHall54Integrator0.integrate(expandableStatefulODE0, 1000.0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-284.069558), (-284.069558), 253.012558682744, 4.091704288360009E306);
      assertNotNull(highamHall54Integrator0);
      assertEquals(284.069558, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(284.069558, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(284.069558, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-284.069558), 0.0, doubleArray0, doubleArray0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(284.069558, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      Collection<StepHandler> collection0 = graggBulirschStoerIntegrator0.getStepHandlers();
      assertNotNull(collection0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(284.069558, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.clearEventHandlers();
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(284.069558, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 253.012558682744, doubleArray0, 253.012558682744, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-284.069558), (-284.069558), 253.012558682744, 4.091704288360009E306);
      assertNotNull(highamHall54Integrator0);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(284.069558, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(284.069558, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(284.069558, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(37.97544926401763, 0.0, doubleArray0, doubleArray0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(37.97544926401763, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(0, doubleArray0.length);
      
      Collection<StepHandler> collection0 = graggBulirschStoerIntegrator0.getStepHandlers();
      assertNotNull(collection0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(37.97544926401763, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(0, doubleArray0.length);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (-2033.5116543), 0.0, 0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(37.97544926401763, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(0, doubleArray0.length);
      
      graggBulirschStoerIntegrator0.setStepSizeControl(284.069558, 0.0, 37.97544926401763, (double) 0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(284.069558, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(0, doubleArray0.length);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertNotNull(expandableStatefulODE0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 5338.9032847);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(40.0, 40.0, 40.0, 0.0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(40.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(40.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(40.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      
      Collection<StepHandler> collection0 = graggBulirschStoerIntegrator0.getStepHandlers();
      assertNotNull(collection0);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(40.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(40.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(40.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn("b3z(Yv)y").when(eventHandler0).toString();
      double double0 = (-2033.5116543);
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (-2033.5116543), 0.0, 0);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(40.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(40.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(40.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      
      Collection<EventHandler> collection1 = graggBulirschStoerIntegrator0.getEventHandlers();
      assertNotNull(collection1);
      assertTrue(collection1.contains(eventHandler0));
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(40.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(40.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(40.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      
      graggBulirschStoerIntegrator0.clearEventHandlers();
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(40.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(40.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(40.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, (double) 0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-284.069558), (-284.069558), 253.012558682744, 4.091704288360009E306);
      assertNotNull(highamHall54Integrator0);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(284.069558, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(284.069558, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(284.069558, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(40.0, 0.0, doubleArray0, doubleArray0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(40.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      Collection<StepHandler> collection0 = graggBulirschStoerIntegrator0.getStepHandlers();
      assertNotNull(collection0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(40.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      assertNotNull(dummyStepHandler0);
      
      highamHall54Integrator0.addStepHandler(dummyStepHandler0);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(284.069558, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(284.069558, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(284.069558, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn("exception generated in user code").when(eventHandler0).toString();
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 0.0, 0.0, 0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(40.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      graggBulirschStoerIntegrator0.addStepHandler(dummyStepHandler0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(40.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      Collection<EventHandler> collection1 = graggBulirschStoerIntegrator0.getEventHandlers();
      assertNotNull(collection1);
      assertTrue(collection1.contains(eventHandler0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(40.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      graggBulirschStoerIntegrator0.clearEventHandlers();
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(40.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      graggBulirschStoerIntegrator0.setStepSizeControl((-1750.658361309707), 284.069558, 40.0, (-284.069558));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(284.069558, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(1750.658361309707, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      assertFalse(firstOrderConverter1.equals((Object)firstOrderConverter0));
      assertNotNull(firstOrderConverter1);
      assertEquals(0, firstOrderConverter1.getDimension());
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertFalse(firstOrderConverter0.equals((Object)firstOrderConverter1));
      assertNotNull(expandableStatefulODE0);
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 40.0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double double0 = 253.012558682744;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-284.069558), (-284.069558), 253.012558682744, 4.091704288360009E306);
      assertNotNull(highamHall54Integrator0);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(284.069558, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(284.069558, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(284.069558, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(40.0, 0.0, doubleArray0, doubleArray0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(40.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      Collection<StepHandler> collection0 = graggBulirschStoerIntegrator0.getStepHandlers();
      assertNotNull(collection0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(40.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator1 = new GraggBulirschStoerIntegrator(40.0, 3097.05337940723, (-284.069558), (-1794.167746962986));
      assertFalse(graggBulirschStoerIntegrator1.equals((Object)graggBulirschStoerIntegrator0));
      assertNotNull(graggBulirschStoerIntegrator1);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator1.getName());
      assertEquals(40.0, graggBulirschStoerIntegrator1.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator1.getCurrentStepStart(), 0.01);
      assertEquals(351.968940641485, graggBulirschStoerIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(3097.05337940723, graggBulirschStoerIntegrator1.getMaxStep(), 0.01);
      
      Collection<StepHandler> collection1 = graggBulirschStoerIntegrator1.getStepHandlers();
      assertFalse(graggBulirschStoerIntegrator1.equals((Object)graggBulirschStoerIntegrator0));
      assertFalse(collection1.equals((Object)collection0));
      assertNotNull(collection1);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator1.getName());
      assertEquals(40.0, graggBulirschStoerIntegrator1.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator1.getCurrentStepStart(), 0.01);
      assertEquals(351.968940641485, graggBulirschStoerIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(3097.05337940723, graggBulirschStoerIntegrator1.getMaxStep(), 0.01);
      assertNotSame(graggBulirschStoerIntegrator1, graggBulirschStoerIntegrator0);
      assertNotSame(collection1, collection0);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      int int0 = (-1109);
      graggBulirschStoerIntegrator1.addEventHandler(eventHandler0, (-2033.5116543), 4.091704288360009E306, (-1109));
      assertFalse(graggBulirschStoerIntegrator1.equals((Object)graggBulirschStoerIntegrator0));
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator1.getName());
      assertEquals(40.0, graggBulirschStoerIntegrator1.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator1.getCurrentStepStart(), 0.01);
      assertEquals(351.968940641485, graggBulirschStoerIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(3097.05337940723, graggBulirschStoerIntegrator1.getMaxStep(), 0.01);
      assertNotSame(graggBulirschStoerIntegrator1, graggBulirschStoerIntegrator0);
      
      Collection<EventHandler> collection2 = graggBulirschStoerIntegrator0.getEventHandlers();
      assertFalse(graggBulirschStoerIntegrator0.equals((Object)graggBulirschStoerIntegrator1));
      assertNotNull(collection2);
      assertFalse(collection2.contains(eventHandler0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(40.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotSame(graggBulirschStoerIntegrator0, graggBulirschStoerIntegrator1);
      
      graggBulirschStoerIntegrator1.clearEventHandlers();
      assertFalse(graggBulirschStoerIntegrator1.equals((Object)graggBulirschStoerIntegrator0));
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator1.getName());
      assertEquals(40.0, graggBulirschStoerIntegrator1.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator1.getCurrentStepStart(), 0.01);
      assertEquals(351.968940641485, graggBulirschStoerIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(3097.05337940723, graggBulirschStoerIntegrator1.getMaxStep(), 0.01);
      assertNotSame(graggBulirschStoerIntegrator1, graggBulirschStoerIntegrator0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      double[] doubleArray1 = new double[3];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      graggBulirschStoerIntegrator1.setMaxEvaluations(430);
      assertFalse(graggBulirschStoerIntegrator1.equals((Object)graggBulirschStoerIntegrator0));
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator1.getName());
      assertEquals(40.0, graggBulirschStoerIntegrator1.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator1.getCurrentStepStart(), 0.01);
      assertEquals(351.968940641485, graggBulirschStoerIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(3097.05337940723, graggBulirschStoerIntegrator1.getMaxStep(), 0.01);
      assertNotSame(graggBulirschStoerIntegrator1, graggBulirschStoerIntegrator0);
      
      doubleArray1[0] = (double) (-1109);
      doubleArray1[1] = 2.384185791015625E-4;
      doubleArray1[2] = (double) 0;
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 3097.05337940723, doubleArray0, 2.384185791015625E-4, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-284.069558), (-284.069558), 253.012558682744, 4.091704288360009E306);
      assertNotNull(highamHall54Integrator0);
      assertEquals(284.069558, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(284.069558, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(284.069558, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 329.7465379026881, doubleArray0, doubleArray0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(329.7465379026881, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      Collection<StepHandler> collection0 = graggBulirschStoerIntegrator0.getStepHandlers();
      assertNotNull(collection0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(329.7465379026881, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      int int0 = 0;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 329.7465379026881, 1.0, 0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(329.7465379026881, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator1 = new GraggBulirschStoerIntegrator(1000.0, (-284.069558), (-709.5114108351), 4.091704288360009E306);
      assertFalse(graggBulirschStoerIntegrator1.equals((Object)graggBulirschStoerIntegrator0));
      assertNotNull(graggBulirschStoerIntegrator1);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator1.getName());
      assertEquals(532.9817614140281, graggBulirschStoerIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator1.getCurrentStepStart(), 0.01);
      assertEquals(1000.0, graggBulirschStoerIntegrator1.getMinStep(), 0.01);
      assertEquals(284.069558, graggBulirschStoerIntegrator1.getMaxStep(), 0.01);
      
      Collection<EventHandler> collection1 = graggBulirschStoerIntegrator1.getEventHandlers();
      assertFalse(graggBulirschStoerIntegrator1.equals((Object)graggBulirschStoerIntegrator0));
      assertNotNull(collection1);
      assertFalse(collection1.contains(eventHandler0));
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator1.getName());
      assertEquals(532.9817614140281, graggBulirschStoerIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator1.getCurrentStepStart(), 0.01);
      assertEquals(1000.0, graggBulirschStoerIntegrator1.getMinStep(), 0.01);
      assertEquals(284.069558, graggBulirschStoerIntegrator1.getMaxStep(), 0.01);
      assertNotSame(graggBulirschStoerIntegrator1, graggBulirschStoerIntegrator0);
      
      graggBulirschStoerIntegrator0.clearEventHandlers();
      assertFalse(graggBulirschStoerIntegrator0.equals((Object)graggBulirschStoerIntegrator1));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(329.7465379026881, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0, doubleArray0.length);
      assertNotSame(graggBulirschStoerIntegrator0, graggBulirschStoerIntegrator1);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      // Undeclared exception!
      graggBulirschStoerIntegrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) 0, doubleArray0, 2869.62405755892, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-284.069558), (-284.069558), 253.012558682744, 4.091704288360009E306);
      assertNotNull(highamHall54Integrator0);
      assertEquals(284.069558, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(284.069558, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(284.069558, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(40.0, 0.0, doubleArray0, doubleArray0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(40.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      Collection<StepHandler> collection0 = graggBulirschStoerIntegrator0.getStepHandlers();
      assertNotNull(collection0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(40.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn("b3z(Yv)y").when(eventHandler0).toString();
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (-2033.5116543), 0.0, 0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(40.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      Collection<EventHandler> collection1 = graggBulirschStoerIntegrator0.getEventHandlers();
      assertNotNull(collection1);
      assertTrue(collection1.contains(eventHandler0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(40.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      graggBulirschStoerIntegrator0.clearEventHandlers();
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(40.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, (double) 0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(253.012558682744, (-0.84375), (-0.84375), (-563.69030647681));
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(14.610932427075461, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.84375, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(253.012558682744, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(422).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(844, firstOrderConverter0.getDimension());
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertNotNull(expandableStatefulODE0);
      assertEquals(844, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      
      double double0 = (-4521408.0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.LAST;
      StepNormalizer stepNormalizer0 = new StepNormalizer(253.012558682744, fixedStepHandler0, stepNormalizerBounds0);
      assertNotNull(stepNormalizer0);
      
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(14.610932427075461, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.84375, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(253.012558682744, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-0.84375), (-0.84375), (-408.0298762146), 252.581356);
      assertNotNull(highamHall54Integrator0);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(0.84375, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.84375, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(0.84375, highamHall54Integrator0.getMinStep(), 0.01);
      
      int int0 = highamHall54Integrator0.getOrder();
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(0.84375, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.84375, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(0.84375, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(5, int0);
      
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (-4521408.0));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double double0 = 1000.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(253.012558682744, 1000.0, 253.012558682744, (-697.06672503));
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(1000.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(503.00353744555713, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(253.012558682744, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertNotNull(expandableStatefulODE0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      
      expandableStatefulODE0.setTime((-2572.17514));
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals((-2572.17514), expandableStatefulODE0.getTime(), 0.01);
      
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 253.012558682744);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-284.069558), (-284.069558), 253.012558682744, 4.091704288360009E306);
      assertNotNull(highamHall54Integrator0);
      assertEquals(284.069558, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(284.069558, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(284.069558, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(40.0, 0.0, doubleArray0, doubleArray0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(40.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      Collection<StepHandler> collection0 = graggBulirschStoerIntegrator0.getStepHandlers();
      assertNotNull(collection0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(40.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      int int0 = 0;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 0.0, 0.0, 0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(40.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      Collection<EventHandler> collection1 = graggBulirschStoerIntegrator0.getEventHandlers();
      assertNotNull(collection1);
      assertTrue(collection1.contains(eventHandler0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(40.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      graggBulirschStoerIntegrator0.clearEventHandlers();
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(40.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) 0, doubleArray0, 5.6843418860808015E-11, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, (-2033.5116543), doubleArray0, doubleArray0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(2033.5116543, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0, doubleArray0.length);
      
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator1 = new GraggBulirschStoerIntegrator(0.0, (-3055.671841340039), 66.8736, 1228.0);
      assertFalse(graggBulirschStoerIntegrator1.equals((Object)graggBulirschStoerIntegrator0));
      assertNotNull(graggBulirschStoerIntegrator1);
      assertEquals(0.0, graggBulirschStoerIntegrator1.getMinStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(3055.671841340039, graggBulirschStoerIntegrator1.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator1.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator1.getCurrentStepStart(), 0.01);
      
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator1.integrate((FirstOrderDifferentialEquations) null, 3822.3168407355274, doubleArray0, (-1180.87067), doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-284.069558), (-284.069558), 253.012558682744, 4.091704288360009E306);
      assertNotNull(highamHall54Integrator0);
      assertEquals(284.069558, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(284.069558, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(284.069558, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(40.0, 0.0, doubleArray0, doubleArray0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(40.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(0, doubleArray0.length);
      
      Collection<StepHandler> collection0 = graggBulirschStoerIntegrator0.getStepHandlers();
      assertNotNull(collection0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(40.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(0, doubleArray0.length);
      
      double double0 = 0.0;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      double double1 = (-2033.5116543);
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (-2033.5116543), 0.0, 0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(40.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(0, doubleArray0.length);
      
      Collection<EventHandler> collection1 = graggBulirschStoerIntegrator0.getEventHandlers();
      assertNotNull(collection1);
      assertTrue(collection1.contains(eventHandler0));
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(40.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(0, doubleArray0.length);
      
      graggBulirschStoerIntegrator0.clearEventHandlers();
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(40.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(0, doubleArray0.length);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-284.069558), doubleArray0, 0.0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator((-240.1567185487));
      assertNotNull(eulerIntegrator0);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-3010.809);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1.0, 261.59463, doubleArray0, doubleArray0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertArrayEquals(new double[] {(-3010.809)}, doubleArray0, 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(16.173887287847656, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(1.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(261.59463, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1922).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(3844, firstOrderConverter0.getDimension());
      
      MullerSolver2 mullerSolver2_0 = new MullerSolver2(1.0);
      assertNotNull(mullerSolver2_0);
      assertEquals(1.0E-14, mullerSolver2_0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getStartValue(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getMin(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getMax(), 0.01);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      MullerSolver2 mullerSolver2_1 = new MullerSolver2();
      assertFalse(mullerSolver2_1.equals((Object)mullerSolver2_0));
      assertNotNull(mullerSolver2_1);
      assertEquals(0.0, mullerSolver2_1.getMax(), 0.01);
      assertEquals(1.0E-6, mullerSolver2_1.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, mullerSolver2_1.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver2_1.getStartValue(), 0.01);
      assertEquals(0.0, mullerSolver2_1.getMin(), 0.01);
      assertEquals(1.0E-15, mullerSolver2_1.getFunctionValueAccuracy(), 0.01);
      
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (-3010.809), 1.0, 2255, (UnivariateSolver) mullerSolver2_1);
      assertFalse(mullerSolver2_1.equals((Object)mullerSolver2_0));
      assertArrayEquals(new double[] {(-3010.809)}, doubleArray0, 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(16.173887287847656, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(1.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(261.59463, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0.0, mullerSolver2_1.getMax(), 0.01);
      assertEquals(1.0E-6, mullerSolver2_1.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, mullerSolver2_1.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver2_1.getStartValue(), 0.01);
      assertEquals(0.0, mullerSolver2_1.getMin(), 0.01);
      assertEquals(1.0E-15, mullerSolver2_1.getFunctionValueAccuracy(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertNotSame(mullerSolver2_1, mullerSolver2_0);
      
      double double0 = graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
      assertArrayEquals(new double[] {(-3010.809)}, doubleArray0, 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(16.173887287847656, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(1.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(261.59463, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(16.173887287847656, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(0.0);
      assertNotNull(gillIntegrator0);
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      gillIntegrator0.setMaxEvaluations((-229));
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      double double0 = gillIntegrator0.getCurrentStepStart();
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray0 = null;
      DormandPrince853Integrator dormandPrince853Integrator0 = null;
      try {
        dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 4779.82424, (double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(253.012558682744, (-0.84375), (-0.84375), (-563.69030647681));
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(0.84375, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(253.012558682744, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(14.610932427075461, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(3457).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(6914, firstOrderConverter0.getDimension());
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertNotNull(expandableStatefulODE0);
      assertEquals(6914, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(0.0);
      assertNotNull(classicalRungeKuttaIntegrator0);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("classical Runge-Kutta", classicalRungeKuttaIntegrator0.getName());
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      classicalRungeKuttaIntegrator0.addEventHandler(eventHandler0, 1000.0, (-0.84375), (-3279));
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("classical Runge-Kutta", classicalRungeKuttaIntegrator0.getName());
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1000.0;
      doubleArray0[2] = (-941.83131);
      doubleArray0[3] = (-563.69030647681);
      doubleArray0[4] = 1000.0;
      doubleArray0[5] = 253.012558682744;
      doubleArray0[6] = (double) (-3279);
      doubleArray0[7] = (-563.69030647681);
      doubleArray0[8] = (-0.84375);
      try { 
        classicalRungeKuttaIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1000.0, doubleArray0, 0.0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 6,914
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, 0.0, 4142.266022656782);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      assertNotNull(dummyStepHandler0);
      
      DummyStepHandler dummyStepHandler1 = DummyStepHandler.getInstance();
      assertNotNull(dummyStepHandler1);
      assertSame(dummyStepHandler1, dummyStepHandler0);
      
      DummyStepHandler dummyStepHandler2 = DummyStepHandler.getInstance();
      assertNotNull(dummyStepHandler2);
      assertSame(dummyStepHandler2, dummyStepHandler0);
      assertSame(dummyStepHandler2, dummyStepHandler1);
      
      DummyStepHandler dummyStepHandler3 = DummyStepHandler.getInstance();
      assertNotNull(dummyStepHandler3);
      assertSame(dummyStepHandler3, dummyStepHandler2);
      assertSame(dummyStepHandler3, dummyStepHandler0);
      assertSame(dummyStepHandler3, dummyStepHandler1);
      
      graggBulirschStoerIntegrator0.addStepHandler(dummyStepHandler0);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertSame(dummyStepHandler0, dummyStepHandler1);
      assertSame(dummyStepHandler0, dummyStepHandler3);
      assertSame(dummyStepHandler0, dummyStepHandler2);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      RiddersSolver riddersSolver0 = new RiddersSolver(4428.61646425, 0.0);
      assertNotNull(riddersSolver0);
      assertEquals(4428.61646425, riddersSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-15, riddersSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, riddersSolver0.getMax(), 0.01);
      assertEquals(0.0, riddersSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, riddersSolver0.getStartValue(), 0.01);
      assertEquals(0.0, riddersSolver0.getMin(), 0.01);
      
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 0.0, 0.0, 179, (UnivariateSolver) riddersSolver0);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(4428.61646425, riddersSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-15, riddersSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, riddersSolver0.getMax(), 0.01);
      assertEquals(0.0, riddersSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, riddersSolver0.getStartValue(), 0.01);
      assertEquals(0.0, riddersSolver0.getMin(), 0.01);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 4142.266022656782;
      doubleArray0[2] = 4428.61646425;
      doubleArray0[3] = 4142.266022656782;
      doubleArray0[4] = (-1844.74839);
      doubleArray0[5] = 4428.61646425;
      doubleArray0[6] = 4142.266022656782;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(179, (-1844.74839), doubleArray0, doubleArray0);
      assertNotNull(highamHall54Integrator0);
      assertArrayEquals(new double[] {0.0, 4142.266022656782, 4428.61646425, 4142.266022656782, (-1844.74839), 4428.61646425, 4142.266022656782}, doubleArray0, 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(574.6389838933659, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(1844.74839, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(179.0, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(7, doubleArray0.length);
      
      int int0 = highamHall54Integrator0.getOrder();
      assertArrayEquals(new double[] {0.0, 4142.266022656782, 4428.61646425, 4142.266022656782, (-1844.74839), 4428.61646425, 4142.266022656782}, doubleArray0, 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(574.6389838933659, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(1844.74839, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(179.0, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1815.05535042, 1815.05535042, 1815.05535042, 1815.05535042);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(1815.05535042, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(1815.05535042, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(1815.05535042, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      int int0 = graggBulirschStoerIntegrator0.getEvaluations();
      assertEquals(1815.05535042, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(1815.05535042, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(1815.05535042, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0, int0);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 7;
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (double) 2429;
      graggBulirschStoerIntegrator0.setStepSizeControl(134.76, 187.77691605561, doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0, 7.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {2429.0}, doubleArray1, 0.01);
      assertEquals(134.76, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(187.77691605561, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(1815.05535042, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(3, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      
      graggBulirschStoerIntegrator0.setStabilityCheck(false, 2429, 7, 2429);
      assertEquals(134.76, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(187.77691605561, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(1815.05535042, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      Collection<EventHandler> collection0 = graggBulirschStoerIntegrator0.getEventHandlers();
      assertNotNull(collection0);
      assertEquals(134.76, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(187.77691605561, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(1815.05535042, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      int int1 = graggBulirschStoerIntegrator0.getEvaluations();
      assertTrue(int1 == int0);
      assertEquals(134.76, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(187.77691605561, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(1815.05535042, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0, int1);
      
      FirstOrderConverter firstOrderConverter0 = null;
      try {
        firstOrderConverter0 = new FirstOrderConverter((SecondOrderDifferentialEquations) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.FirstOrderConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator((-240.1567185487));
      assertNotNull(eulerIntegrator0);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-3010.809);
      MullerSolver2 mullerSolver2_0 = new MullerSolver2(68.584373884);
      assertNotNull(mullerSolver2_0);
      assertEquals(68.584373884, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getMin(), 0.01);
      assertEquals(1.0E-14, mullerSolver2_0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getStartValue(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getMax(), 0.01);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-298.401209), 1.0, (-3885.868132), 2.9167986204137332E-182);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(1.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(298.401209, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(17.274293299582475, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(1, 2.9167986204137332E-182, 310);
      assertNotNull(bracketingNthOrderBrentSolver0);
      assertEquals(1.0, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(2.9167986204137332E-182, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01);
      assertEquals(310, bracketingNthOrderBrentSolver0.getMaximalOrder());
      
      graggBulirschStoerIntegrator0.addEventHandler((EventHandler) null, (-3306.64346), (-135.0), 1, (UnivariateSolver) bracketingNthOrderBrentSolver0);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(1.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(298.401209, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(17.274293299582475, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(1.0, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(2.9167986204137332E-182, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01);
      assertEquals(310, bracketingNthOrderBrentSolver0.getMaximalOrder());
      
      double double0 = graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(1.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(298.401209, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(17.274293299582475, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(17.274293299582475, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1000.0, 1000.0, 1000.0, 0.0);
      assertNotNull(highamHall54Integrator0);
      assertEquals(1000.0, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(1000.0, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(1000.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.9777777777777777;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(40.0, 0.0, doubleArray0, doubleArray0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertArrayEquals(new double[] {0.9777777777777777}, doubleArray0, 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(40.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      Collection<StepHandler> collection0 = graggBulirschStoerIntegrator0.getStepHandlers();
      assertNotNull(collection0);
      assertArrayEquals(new double[] {0.9777777777777777}, doubleArray0, 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(40.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 1585.13, 0.0, 0);
      assertArrayEquals(new double[] {0.9777777777777777}, doubleArray0, 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(40.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      Collection<EventHandler> collection1 = graggBulirschStoerIntegrator0.getEventHandlers();
      assertNotNull(collection1);
      assertTrue(collection1.contains(eventHandler0));
      assertArrayEquals(new double[] {0.9777777777777777}, doubleArray0, 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(40.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      graggBulirschStoerIntegrator0.clearEventHandlers();
      assertArrayEquals(new double[] {0.9777777777777777}, doubleArray0, 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(40.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      graggBulirschStoerIntegrator0.clearStepHandlers();
      assertArrayEquals(new double[] {0.9777777777777777}, doubleArray0, 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(40.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      graggBulirschStoerIntegrator0.clearEventHandlers();
      assertArrayEquals(new double[] {0.9777777777777777}, doubleArray0, 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(40.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      graggBulirschStoerIntegrator0.setOrderControl(Integer.MAX_VALUE, 0.9777777777777777, 0.9777777777777777);
      assertArrayEquals(new double[] {0.9777777777777777}, doubleArray0, 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(40.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      double double0 = graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
      assertArrayEquals(new double[] {0.9777777777777777}, doubleArray0, 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(40.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-1818.0), (-3711.0), doubleArray0, doubleArray0);
      assertNotNull(dormandPrince54Integrator0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals(2597.421413633144, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(3711.0, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals(1818.0, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      dormandPrince54Integrator0.setSafety(0.0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals(2597.421413633144, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(3711.0, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals(1818.0, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals(1, doubleArray0.length);
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertNotNull(expandableStatefulODE0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      
      int int0 = dormandPrince54Integrator0.getMaxEvaluations();
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals(2597.421413633144, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(3711.0, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals(1818.0, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals(1, doubleArray0.length);
      assertEquals(Integer.MAX_VALUE, int0);
      
      double double0 = (-3446.98676599);
      dormandPrince54Integrator0.setStepSizeControl((-3446.98676599), (-1818.0), doubleArray0, doubleArray0);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertEquals(0.0, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(3446.98676599, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(1818.0, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals(2597.421413633144, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(1, doubleArray0.length);
      
      EquationsMapper[] equationsMapperArray0 = expandableStatefulODE0.getSecondaryMappers();
      assertNotNull(equationsMapperArray0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      assertEquals(0, equationsMapperArray0.length);
      
      double double1 = (-9.194632392478356);
      try { 
        dormandPrince54Integrator0.integrate(expandableStatefulODE0, (-9.194632392478356));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 1
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(0.0);
      assertNotNull(classicalRungeKuttaIntegrator0);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("classical Runge-Kutta", classicalRungeKuttaIntegrator0.getName());
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-626.6525180559502);
      doubleArray0[2] = 0.0;
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-1097.55228576);
      doubleArray1[3] = (-626.6525180559502);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-626.6525180559502);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      classicalRungeKuttaIntegrator0.addEventHandler(eventHandler0, 2477.40886652, 0.0, (-3279));
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("classical Runge-Kutta", classicalRungeKuttaIntegrator0.getName());
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      doubleArray1[6] = (-626.6525180559502);
      doubleArray1[7] = (-626.6525180559502);
      doubleArray1[8] = 0.0;
      try { 
        classicalRungeKuttaIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 0.0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(6.283185307179586);
      assertNotNull(gillIntegrator0);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gill", gillIntegrator0.getName());
      
      gillIntegrator0.clearEventHandlers();
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gill", gillIntegrator0.getName());
      
      Collection<StepHandler> collection0 = gillIntegrator0.getStepHandlers();
      assertNotNull(collection0);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gill", gillIntegrator0.getName());
      
      gillIntegrator0.setMaxEvaluations(1629);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gill", gillIntegrator0.getName());
      
      double double0 = gillIntegrator0.getCurrentStepStart();
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, double0, 0.01);
      
      double[] doubleArray0 = null;
      DormandPrince853Integrator dormandPrince853Integrator0 = null;
      try {
        dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, (double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, (-94.213505045527), 482.3500082, 0.0);
      assertNotNull(highamHall54Integrator0);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0.0, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(0.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(94.213505045527, highamHall54Integrator0.getMaxStep(), 0.01);
      
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, (-94.213505045527), 0.0, 0.0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(94.213505045527, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      graggBulirschStoerIntegrator0.clearStepHandlers();
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(94.213505045527, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double double0 = (-2053.6);
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-2053.6));
      assertNotNull(midpointIntegrator0);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("midpoint", midpointIntegrator0.getName());
      
      double double1 = 476.47;
      double[] doubleArray0 = new double[7];
      midpointIntegrator0.clearStepHandlers();
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("midpoint", midpointIntegrator0.getName());
      
      doubleArray0[0] = (-2053.6);
      doubleArray0[1] = 476.47;
      doubleArray0[2] = 476.47;
      doubleArray0[3] = (-2053.6);
      midpointIntegrator0.clearStepHandlers();
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("midpoint", midpointIntegrator0.getName());
      
      doubleArray0[4] = (-2053.6);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double2 = 1.0;
      int int0 = 0;
      double double3 = 1000.0;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0, 1000.0);
      assertNotNull(illinoisSolver0);
      assertEquals(0.0, illinoisSolver0.getMax(), 0.01);
      assertEquals(1000.0, illinoisSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, illinoisSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, illinoisSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, illinoisSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01);
      
      Sinc sinc0 = new Sinc(true);
      assertNotNull(sinc0);
      
      Tanh tanh0 = new Tanh();
      assertNotNull(tanh0);
      
      Log log0 = new Log();
      assertNotNull(log0);
      
      DerivativeStructure derivativeStructure0 = null;
      try {
        derivativeStructure0 = new DerivativeStructure(0, 0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 1
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DerivativeStructure", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(2255.32382);
      assertNotNull(threeEighthesIntegrator0);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      
      String string0 = threeEighthesIntegrator0.getName();
      assertNotNull(string0);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("3/8", string0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2255.32382;
      doubleArray0[1] = 1000.0;
      doubleArray0[2] = 1000.0;
      doubleArray0[3] = 2255.32382;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 1000.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1.0), 1000.0, doubleArray0, doubleArray0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertArrayEquals(new double[] {2255.32382, 1000.0, 1000.0, 2255.32382, 1.0, 1000.0}, doubleArray0, 0.01);
      assertEquals(1000.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(1.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(31.622776601683793, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(6, doubleArray0.length);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      SecantSolver secantSolver0 = new SecantSolver();
      assertNotNull(secantSolver0);
      assertEquals(0.0, secantSolver0.getMax(), 0.01);
      assertEquals(0.0, secantSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-6, secantSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, secantSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, secantSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, secantSolver0.getFunctionValueAccuracy(), 0.01);
      
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 0.0, 1.0, 182, (UnivariateSolver) secantSolver0);
      assertArrayEquals(new double[] {2255.32382, 1000.0, 1000.0, 2255.32382, 1.0, 1000.0}, doubleArray0, 0.01);
      assertEquals(1000.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(1.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(31.622776601683793, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(0.0, secantSolver0.getMax(), 0.01);
      assertEquals(0.0, secantSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-6, secantSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, secantSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, secantSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, secantSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(6, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(0.0);
      assertNotNull(classicalRungeKuttaIntegrator0);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("classical Runge-Kutta", classicalRungeKuttaIntegrator0.getName());
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01);
      
      String string0 = classicalRungeKuttaIntegrator0.getName();
      assertNotNull(string0);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("classical Runge-Kutta", classicalRungeKuttaIntegrator0.getName());
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("classical Runge-Kutta", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(5.6843418860808015E-11, 5.6843418860808015E-11, 5.6843418860808015E-11, 5.6843418860808015E-11);
      assertNotNull(dormandPrince853Integrator0);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(5.6843418860808015E-11, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(5.6843418860808015E-11, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(5.6843418860808015E-11, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      assertNotNull(dummyStepHandler0);
      
      dormandPrince853Integrator0.addStepHandler(dummyStepHandler0);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(5.6843418860808015E-11, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(5.6843418860808015E-11, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(5.6843418860808015E-11, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      
      dormandPrince853Integrator0.clearStepHandlers();
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(5.6843418860808015E-11, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(5.6843418860808015E-11, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(5.6843418860808015E-11, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      
      int int0 = dormandPrince853Integrator0.getOrder();
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(5.6843418860808015E-11, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(5.6843418860808015E-11, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(5.6843418860808015E-11, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-4928.2069));
      assertNotNull(classicalRungeKuttaIntegrator0);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("classical Runge-Kutta", classicalRungeKuttaIntegrator0.getName());
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      classicalRungeKuttaIntegrator0.clearEventHandlers();
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("classical Runge-Kutta", classicalRungeKuttaIntegrator0.getName());
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.NEITHER;
      StepNormalizer stepNormalizer0 = new StepNormalizer(1317.32, fixedStepHandler0, stepNormalizerMode0, stepNormalizerBounds0);
      assertNotNull(stepNormalizer0);
      
      classicalRungeKuttaIntegrator0.addStepHandler(stepNormalizer0);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("classical Runge-Kutta", classicalRungeKuttaIntegrator0.getName());
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-4137.4588880478));
      classicalRungeKuttaIntegrator0.getMaxEvaluations();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, Integer.MAX_VALUE, 0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 0.0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 0.0, 482.3500082, 0.0);
      highamHall54Integrator0.getCurrentStepStart();
      int int0 = highamHall54Integrator0.getMaxEvaluations();
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 284.0;
      doubleArray0[1] = 284.0;
      doubleArray0[2] = 284.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(284.0, 284.0, doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      BrentSolver brentSolver0 = new BrentSolver(284.0, (-2991.0));
      brentSolver0.getEvaluations();
      graggBulirschStoerIntegrator0.getEvaluations();
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 340.207538487, (-2991.0), 0, (UnivariateSolver) brentSolver0);
      graggBulirschStoerIntegrator0.setOrderControl(286, 284.0, 284.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) 0, doubleArray0, 0.0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int int0 = 3;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 3;
      double double0 = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 3;
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (double) 3;
      doubleArray0[5] = 4042.0;
      doubleArray0[6] = (double) 3;
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(3, 3, 3, doubleArray0, doubleArray0);
      double double1 = 0.0;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-2587.435926230896), 1000.0, 3.0, 0.0);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (double) 3;
      // Undeclared exception!
      try { 
        highamHall54Integrator0.computeDerivatives((-2587.435926230896), doubleArray1, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1798.90584));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-801.473725299048);
      doubleArray0[1] = (-1798.90584);
      doubleArray0[2] = (-1798.90584);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1798.90584), (-801.473725299048), doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      BisectionSolver bisectionSolver0 = new BisectionSolver();
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (-801.473725299048), 949.2987828426417, 903, (UnivariateSolver) bisectionSolver0);
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      gillIntegrator0.addEventHandler(eventHandler1, (-194.3628465), (-1798.90584), 0);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(471.83508955);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      threeEighthesIntegrator0.addEventHandler(eventHandler0, 471.83508955, 81.03320693744159, (-1174));
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0.0);
      midpointIntegrator0.getCurrentStepStart();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = Double.NaN;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 0.0, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.getOrder();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1.0), Double.NaN, (-1.0), (-1049.8640603815));
      graggBulirschStoerIntegrator0.setOrderControl(0, (-1709.63261409308), Double.NaN);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(253.012558682744, (-0.84375), (-0.84375), (-563.69030647681));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double double0 = (-4521408.0);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (-4521408.0));
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      double double0 = (-3327.0);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-3327.0), (-3327.0), (-3327.0), (-3327.0));
      double double1 = 933.57255;
      double[] doubleArray0 = new double[3];
      dormandPrince853Integrator0.setMinReduction(933.57255);
      dormandPrince853Integrator0.getEvaluations();
      doubleArray0[0] = (-3327.0);
      doubleArray0[1] = (-3327.0);
      doubleArray0[2] = 933.57255;
      dormandPrince853Integrator0.addEventHandler((EventHandler) null, 0.0, 0.0, (-937));
      dormandPrince853Integrator0.getEvaluations();
      // Undeclared exception!
      try { 
        dormandPrince853Integrator0.computeDerivatives(933.57255, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      double double0 = (-1463.19514887809);
      double double1 = (-1834.6);
      double double2 = 1915.52661127;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1463.19514887809), (-1834.6), (-1463.19514887809), 1915.52661127);
      double[] doubleArray0 = new double[5];
      boolean boolean0 = true;
      int int0 = 1966;
      // Undeclared exception!
      try { 
        dormandPrince853Integrator0.initializeStep(true, 1966, doubleArray0, 1915.52661127, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-0.008298);
      doubleArray0[1] = 1417.9;
      doubleArray0[2] = 2.1170345824450285;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 1417.9, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.clearEventHandlers();
      graggBulirschStoerIntegrator0.setInterpolationControl(true, (-970));
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
  }
}
