/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 22:29:38 GMT 2021
 */

package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.function.Exp;
import org.apache.commons.math3.analysis.function.Log10;
import org.apache.commons.math3.analysis.function.Log1p;
import org.apache.commons.math3.analysis.function.Sin;
import org.apache.commons.math3.analysis.solvers.BisectionSolver;
import org.apache.commons.math3.analysis.solvers.IllinoisSolver;
import org.apache.commons.math3.analysis.solvers.MullerSolver;
import org.apache.commons.math3.analysis.solvers.MullerSolver2;
import org.apache.commons.math3.analysis.solvers.PegasusSolver;
import org.apache.commons.math3.analysis.solvers.RiddersSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator;
import org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator;
import org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.GillIntegrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.nonstiff.MidpointIntegrator;
import org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.StepHandler;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.apache.commons.math3.ode.sampling.StepNormalizerBounds;
import org.apache.commons.math3.ode.sampling.StepNormalizerMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegrator_ESTest extends AbstractIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(392.15);
      threeEighthesIntegrator0.getEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 392.15, doubleArray0, (double) 0, doubleArray0);
      threeEighthesIntegrator0.computeDerivatives(0.0, doubleArray0, doubleArray0);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1196.579236222), 0.0, (-1196.579236222), 0);
      dormandPrince853Integrator0.getOrder();
      threeEighthesIntegrator0.getStepHandlers();
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(8, (-5.23735298540578E-9), 0.0, 80.0, 1424.331781275556);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      try { 
        adamsBashforthIntegrator0.integrate(expandableStatefulODE0, 1424.331781275556);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one column
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(392.15);
      threeEighthesIntegrator0.setMaxEvaluations((-223));
      threeEighthesIntegrator0.getEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      double double0 = 5224.7;
      threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) 0, doubleArray0, 5224.7, doubleArray0);
      threeEighthesIntegrator0.computeDerivatives(5224.7, doubleArray0, doubleArray0);
      threeEighthesIntegrator0.setMaxEvaluations(0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(697.04047326605, 1381, doubleArray0, doubleArray0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.LAST;
      StepNormalizer stepNormalizer0 = new StepNormalizer(882.274527325, fixedStepHandler0, stepNormalizerBounds0);
      threeEighthesIntegrator0.addStepHandler(stepNormalizer0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      try { 
        threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 3625.0, doubleArray0, (double) 1381, doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double double0 = 0.4462870955467224;
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.4462870955467224);
      threeEighthesIntegrator0.getEvaluations();
      threeEighthesIntegrator0.addStepHandler((StepHandler) null);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.4462870955467224;
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      try { 
        threeEighthesIntegrator0.integrate(expandableStatefulODE0, 966.77);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(392.15);
      gillIntegrator0.getCurrentStepStart();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(392.15);
      threeEighthesIntegrator0.getEvaluations();
      threeEighthesIntegrator0.addStepHandler((StepHandler) null);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      try { 
        threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-2235.09), doubleArray0, (-2235.09), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(392.15);
      int int0 = (-223);
      threeEighthesIntegrator0.setMaxEvaluations((-223));
      threeEighthesIntegrator0.getEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) 0, doubleArray0, 5224.7, doubleArray0);
      threeEighthesIntegrator0.computeDerivatives(5224.7, doubleArray0, doubleArray0);
      threeEighthesIntegrator0.setMaxEvaluations(0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(697.04047326605, 1381, doubleArray0, doubleArray0);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(5224.7, 2.8421709430404007E-11, doubleArray0, doubleArray0);
      try { 
        threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) (-223), doubleArray0, Double.NaN, doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 2361.706353885;
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-3691.040815196438), 0.0, (-3691.040815196438), (-3691.040815196438));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-1.9287515190177685E-7));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double double2 = 1331.8430846637;
      // Undeclared exception!
      threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1331.8430846637, doubleArray0, (-470.2653813), doubleArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(1.260420322418213);
      threeEighthesIntegrator0.getEvaluations();
      threeEighthesIntegrator0.getEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 3.3922703599272275E-47, doubleArray0, 1.260420322418213, doubleArray0);
      threeEighthesIntegrator0.computeDerivatives(0.0, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0, 4615.143, 0.0, 1.260420322418213);
      threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1.260420322418213, doubleArray0, 0.0, doubleArray0);
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = null;
      try {
        adamsBashforthIntegrator0 = new AdamsBashforthIntegrator((-1559), 2.02598237991333, 1960.5918932645, (-1559), 2.02598237991333);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // multistep method needs at least -1,559 previous steps, got 2
         //
         verifyException("org.apache.commons.math3.ode.MultistepIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-3691.040815196438), 0.0, (-3691.040815196438), (-3691.040815196438));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, (-2322.0218889), 0.0, (-2322.0218889), 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      Exp exp0 = new Exp();
      illinoisSolver0.solve(560, (UnivariateFunction) exp0, (-3691.040815196438), (-3691.040815196438), (-3691.040815196438));
      dormandPrince853Integrator0.addEventHandler(eventHandler0, (-2322.0218889), 0.0, 560, (UnivariateSolver) illinoisSolver0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      dormandPrince853Integrator0.integrate(expandableStatefulODE0, (-473.9081));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(1.260420322418213);
      threeEighthesIntegrator0.getEvaluations();
      threeEighthesIntegrator0.getEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 3.3922703599272275E-47, doubleArray0, 1.260420322418213, doubleArray0);
      threeEighthesIntegrator0.computeDerivatives(0.0, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      threeEighthesIntegrator0.getEvaluations();
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0, 0, 0, 0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      dormandPrince853Integrator0.integrate(expandableStatefulODE0, 184.58150328499244);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(3.975449484028966E-31, 1.6284313912612293E-9, 1.0, (-1.0));
      highamHall54Integrator0.setMaxEvaluations(6);
      highamHall54Integrator0.getCurrentSignedStepsize();
      highamHall54Integrator0.getEventHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        highamHall54Integrator0.integrate(expandableStatefulODE0, (-1.0));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (6) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 1381;
      double double0 = 392.15;
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(392.15);
      threeEighthesIntegrator0.setMaxEvaluations((-223));
      threeEighthesIntegrator0.getEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      double double1 = 5224.7;
      threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) 0, doubleArray0, 5224.7, doubleArray0);
      threeEighthesIntegrator0.computeDerivatives(5224.7, doubleArray0, doubleArray0);
      threeEighthesIntegrator0.setMaxEvaluations(0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(697.04047326605, 1381, doubleArray0, doubleArray0);
      double double2 = 2.8421709430404007E-11;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(5224.7, 2.8421709430404007E-11, doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double3 = (-2177.06);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        threeEighthesIntegrator0.integrate(expandableStatefulODE0, 1648.724986973);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 1381;
      double double0 = 392.15;
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(392.15);
      int int1 = (-223);
      threeEighthesIntegrator0.setMaxEvaluations((-223));
      threeEighthesIntegrator0.getEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) 0, doubleArray0, 5224.7, doubleArray0);
      threeEighthesIntegrator0.computeDerivatives(5224.7, doubleArray0, doubleArray0);
      threeEighthesIntegrator0.setMaxEvaluations(0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(697.04047326605, 1381, doubleArray0, doubleArray0);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(5224.7, 2.8421709430404007E-11, doubleArray0, doubleArray0);
      try { 
        threeEighthesIntegrator0.computeDerivatives((-1766.9030326), doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(392.15);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      threeEighthesIntegrator0.setMaxEvaluations((-1));
      threeEighthesIntegrator0.getEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) (-1), doubleArray0, (double) (-223), doubleArray0);
      ThreeEighthesIntegrator threeEighthesIntegrator1 = new ThreeEighthesIntegrator(1131.701824938461);
      threeEighthesIntegrator0.setMaxEvaluations((-223));
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-223), Double.NaN, doubleArray0, doubleArray0);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(5224.7, (-223.0), doubleArray0, doubleArray0);
      BisectionSolver bisectionSolver0 = new BisectionSolver(0, (-223));
      bisectionSolver0.getEvaluations();
      dormandPrince853Integrator0.addEventHandler(eventHandler0, (-3119.6444565223), 4227.0, (-1), (UnivariateSolver) bisectionSolver0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      dormandPrince853Integrator0.integrate(expandableStatefulODE1, 1.1368683772161603E-10);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(381.344, 381.344, 381.344, 745.0);
      dormandPrince853Integrator0.getCurrentSignedStepsize();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1460.71475035, 0.0, 0.0, 422.32);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(7).when(secondOrderDifferentialEquations0).getDimension();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-1520.082146), (-2845.2135292), (-2845.2135292), 4200.49329277, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-2845.2135292), (-1842.5244970194597));
      dormandPrince853Integrator0.addEventHandler(eventHandler0, 1955.1422828364055, 0.0, 521, (UnivariateSolver) illinoisSolver0);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      dormandPrince853Integrator0.integrate(expandableStatefulODE0, (-2845.2135292));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double double0 = 697.04047326605;
      int int0 = 1381;
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(392.15);
      int int1 = (-223);
      threeEighthesIntegrator0.setMaxEvaluations((-223));
      threeEighthesIntegrator0.getEvaluations();
      threeEighthesIntegrator0.addStepHandler((StepHandler) null);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      double double1 = 5224.7;
      // Undeclared exception!
      try { 
        threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) 0, doubleArray0, 5224.7, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(392.15);
      threeEighthesIntegrator0.setMaxEvaluations((-223));
      threeEighthesIntegrator0.getEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) 0, doubleArray0, 5224.7, doubleArray0);
      threeEighthesIntegrator0.computeDerivatives(5224.7, doubleArray0, doubleArray0);
      threeEighthesIntegrator0.setMaxEvaluations(0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(697.04047326605, 1381, doubleArray0, doubleArray0);
      MullerSolver mullerSolver0 = new MullerSolver(2.2737367544323206E-10, (-1778.2782050553385));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 2.2737367544323206E-10, (double) 0, (-1), (UnivariateSolver) mullerSolver0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      int int0 = 1381;
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(1.260420322418213);
      threeEighthesIntegrator0.setMaxEvaluations((-223));
      threeEighthesIntegrator0.getEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 3.3922703599272275E-47, doubleArray0, 1913.96, doubleArray0);
      threeEighthesIntegrator0.computeDerivatives(2.2951597845188004E-8, doubleArray0, doubleArray0);
      threeEighthesIntegrator0.setMaxEvaluations((-223));
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1.0), 0, doubleArray0, doubleArray0);
      MullerSolver mullerSolver0 = new MullerSolver(2313.01072669, 9.094947017729282E-10);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double0 = (-503.06);
      Log1p log1p0 = new Log1p();
      // Undeclared exception!
      try { 
        mullerSolver0.solve(1381, (UnivariateFunction) log1p0, 1913.96);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [\uFFFD, \uFFFD], values: [\uFFFD, \uFFFD]
         //
         verifyException("org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-3567.5617440695714));
      double double0 = 5.6843418860808015E-11;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-2564.8), (-617.1956557255852), (-1.0), 5.6843418860808015E-11);
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(5.6843418860808015E-11, (-3567.5617440695714));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      dormandPrince853Integrator0.addEventHandler(eventHandler0, (-1.0), (-2564.8), (-335), (UnivariateSolver) illinoisSolver0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double double1 = 0.0;
      expandableStatefulODE0.setTime((-2564.8));
      // Undeclared exception!
      dormandPrince853Integrator0.integrate(expandableStatefulODE0, (double) (-335));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double double0 = 0.0;
      int int0 = 1381;
      double double1 = 1.260420322418213;
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(1.260420322418213);
      threeEighthesIntegrator0.setMaxEvaluations((-223));
      threeEighthesIntegrator0.getEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double double2 = (-1778.2782050553385);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = 1000.0;
      doubleArray1[2] = 697.04047326605;
      doubleArray1[3] = (-1778.2782050553385);
      doubleArray1[4] = (double) 1381;
      try { 
        threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 697.04047326605, doubleArray0, 3.3922703599272275E-47, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1460.71475035, 0.0, 0.0, 422.32);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(Double.NaN, 1460.71475035).when(eventHandler0).g(anyDouble() , any(double[].class));
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(422.32, 0.0);
      dormandPrince853Integrator0.addEventHandler(eventHandler0, 1460.71475035, 0.0, (-335), (UnivariateSolver) illinoisSolver0);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime(422.32);
      try { 
        dormandPrince853Integrator0.integrate(expandableStatefulODE0, 0.0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-335) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-5.412881689012608E-8), (-5.412881689012608E-8), (-5.412881689012608E-8), 2447.6847);
      graggBulirschStoerIntegrator0.setMaxEvaluations((-1019));
      graggBulirschStoerIntegrator0.setStabilityCheck(false, (-212), 444, 444);
      double double0 = 717.130254;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2202.0, 5224.7, 717.130254, 717.130254);
      dormandPrince853Integrator0.setMinReduction(1802.1084659637);
      dormandPrince853Integrator0.setMaxEvaluations(2142021397);
      dormandPrince853Integrator0.getOrder();
      graggBulirschStoerIntegrator0.setInterpolationControl(false, (-1122));
      dormandPrince853Integrator0.getEventHandlers();
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.integrate((ExpandableStatefulODE) null, 4.547473508864641E-10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(243.144152268459);
      classicalRungeKuttaIntegrator0.addEventHandler((EventHandler) null, 1099.4, 1099.4, (-1752));
      classicalRungeKuttaIntegrator0.setMaxEvaluations((-1752));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(158).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      classicalRungeKuttaIntegrator0.getStepHandlers();
      double double0 = (-99.780112946618);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 243.144152268459;
      classicalRungeKuttaIntegrator0.getMaxEvaluations();
      doubleArray0[1] = (-99.780112946618);
      double double1 = 0.0;
      try { 
        classicalRungeKuttaIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-99.780112946618), doubleArray0, 0.0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 316
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-2249.2637234567), 0.0, 1.0, (-3326.9405423));
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(2.719805132368625E-271, 3.5555555555555554);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      dormandPrince853Integrator0.addEventHandler(eventHandler0, 0.0, (-236.0333605), (-1752), (UnivariateSolver) illinoisSolver0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      dormandPrince853Integrator0.integrate(expandableStatefulODE0, 3.5555555555555554);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = (-335);
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-1111.117925), (-1111.117925));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1111.117925);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, (-335), doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      dormandPrince853Integrator0.addEventHandler(eventHandler0, (-1111.117925), (-7.12854317090566E-8), (-335), (UnivariateSolver) illinoisSolver0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        dormandPrince853Integrator0.integrate(expandableStatefulODE0, 524.4569123517);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 2
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(Double.NaN, 3.5555555555555554, 1000.0, 51544.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(334).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(3.5555555555555554, 1.0, 485.3997699423, 0.6931470632553101);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      dormandPrince853Integrator0.addEventHandler(eventHandler0, 51544.0, (-887.59747033965), 334);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1460.71475035, 0.0, 0.0, 422.32);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(422.32, 0.0);
      dormandPrince853Integrator0.addEventHandler(eventHandler0, 1460.71475035, 0.0, (-335), (UnivariateSolver) illinoisSolver0);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      dormandPrince853Integrator0.integrate(expandableStatefulODE0, 0.0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, (-1.0), 0.0, 0.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      double double0 = (-1730.0);
      dormandPrince853Integrator0.setMaxGrowth(0.0);
      int int0 = (-2509);
      MullerSolver2 mullerSolver2_0 = new MullerSolver2();
      mullerSolver2_0.getMaxEvaluations();
      dormandPrince853Integrator0.addEventHandler(eventHandler0, 0.0, (-1730.0), (-2509), (UnivariateSolver) mullerSolver2_0);
      dormandPrince853Integrator0.getEventHandlers();
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(43, 635.059469027003, (-1730.0), (-2509), Double.NaN);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double double0 = 1198.8;
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(1198.8);
      threeEighthesIntegrator0.clearEventHandlers();
      threeEighthesIntegrator0.clearEventHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double double1 = 191.9917991358595;
      // Undeclared exception!
      threeEighthesIntegrator0.integrate(expandableStatefulODE0, 191.9917991358595);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2107.407595849143;
      doubleArray0[1] = 229.4253635986208;
      doubleArray0[2] = 2107.407595849143;
      doubleArray0[3] = 2107.407595849143;
      doubleArray0[4] = (-945.7193803966608);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(2107.407595849143, (-945.7193803966608), doubleArray0, doubleArray0);
      highamHall54Integrator0.setSafety((-945.7193803966608));
      double double0 = 1379.2406551771244;
      highamHall54Integrator0.setStepSizeControl(229.4253635986208, (-1318.820931), 1379.2406551771244, 1.8386917534879182E-8);
      highamHall54Integrator0.getEvaluations();
      highamHall54Integrator0.setMinReduction(2522.40921515236);
      highamHall54Integrator0.setInitialStepSize(0);
      FirstOrderDifferentialEquations firstOrderDifferentialEquations0 = null;
      // Undeclared exception!
      try { 
        highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) null, (-280.839717958), doubleArray0, 2107.407595849143, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double double0 = 243.144152268459;
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(243.144152268459);
      int int0 = (-1752);
      classicalRungeKuttaIntegrator0.addEventHandler((EventHandler) null, 1099.4, 1099.4, (-1752));
      classicalRungeKuttaIntegrator0.setMaxEvaluations((-1752));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      classicalRungeKuttaIntegrator0.getStepHandlers();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 243.144152268459;
      classicalRungeKuttaIntegrator0.getMaxEvaluations();
      doubleArray0[1] = (-99.780112946618);
      try { 
        classicalRungeKuttaIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-99.780112946618), doubleArray0, 0.0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-3565.371959521238));
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(166.1930602913264, 714.7, (-3565.371959521238), 807.42455);
      threeEighthesIntegrator0.getStepHandlers();
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(1732.84697);
      classicalRungeKuttaIntegrator0.getStepHandlers();
      classicalRungeKuttaIntegrator0.getMaxEvaluations();
      int int0 = 1280;
      classicalRungeKuttaIntegrator0.setMaxEvaluations(1280);
      double double0 = 0.0;
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(1280, 1280, 0.0, 1280, 0.0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-9.194632392478356));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      threeEighthesIntegrator0.addEventHandler(eventHandler0, (-9.194632392478356), (-9.194632392478356), 5);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 5;
      doubleArray0[1] = (-9.194632392478356);
      doubleArray0[2] = (double) 5;
      doubleArray0[3] = (double) 5;
      doubleArray0[4] = (-3457480.0);
      doubleArray0[5] = (double) 5;
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(5, (-3457480.0), Double.NaN, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        adamsMoultonIntegrator0.integrate(expandableStatefulODE0, 1.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 6
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double double0 = (-1592.453323);
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-1592.453323));
      classicalRungeKuttaIntegrator0.clearStepHandlers();
      classicalRungeKuttaIntegrator0.getEvaluations();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      classicalRungeKuttaIntegrator0.clearEventHandlers();
      double double1 = (-2259.179491851);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1592.453323);
      doubleArray0[1] = (-1592.453323);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (-1592.453323);
      doubleArray0[4] = (-2259.179491851);
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 0.0;
      // Undeclared exception!
      try { 
        classicalRungeKuttaIntegrator0.computeDerivatives((-1194.5), doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-0.7815774104844326));
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1310.0, (-935.2306744186036), (-935.2306744186036), 3.3922703599272275E-47);
      threeEighthesIntegrator0.getEvaluations();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-0.7815774104844326);
      doubleArray0[1] = (-0.7815774104844326);
      doubleArray0[2] = 1310.0;
      doubleArray0[3] = (-935.2306744186036);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (-935.2306744186036);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 3.3922703599272275E-47;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = 3.3922703599272275E-47;
      doubleArray1[3] = 3.3922703599272275E-47;
      doubleArray1[4] = 1310.0;
      doubleArray1[5] = 3.3922703599272275E-47;
      doubleArray1[6] = (-935.2306744186036);
      doubleArray1[7] = 2229.8;
      doubleArray1[8] = 1310.0;
      // Undeclared exception!
      try { 
        threeEighthesIntegrator0.computeDerivatives(8.881784197001252E-13, doubleArray0, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(Double.NaN, 3.5555555555555554, 1000.0, 51544.0);
      double double0 = (-795.39720765238);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1000.0;
      doubleArray0[1] = (-795.39720765238);
      doubleArray0[2] = 1000.0;
      doubleArray0[3] = (-795.39720765238);
      doubleArray0[4] = 1617.96911;
      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1617.96911, doubleArray0, 357.6391179106141, (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, (-736.677049), 0.0, 3.0374839443564585E-159);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-736.677049);
      doubleArray0[1] = (-1111.117925);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2767.5);
      doubleArray0[4] = (-1582.42);
      doubleArray0[5] = 3.0374839443564585E-159;
      doubleArray0[6] = (-1582.42);
      // Undeclared exception!
      try { 
        dormandPrince853Integrator0.computeDerivatives((-1582.42), doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0.0);
      double double0 = 0.0;
      double double1 = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, 0.0, 0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.getSecondaryMappers();
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 0.0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-3027.0), 1000.0, (-3027.0), 289.5);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1017.455107);
      doubleArray0[1] = 1000.0;
      doubleArray0[2] = (-3027.0);
      doubleArray0[3] = 289.5;
      doubleArray0[4] = (-3027.0);
      doubleArray0[5] = (-1017.455107);
      doubleArray0[6] = (-3027.0);
      doubleArray0[7] = 1.0;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1000.0;
      graggBulirschStoerIntegrator0.setStepSizeControl((-1017.455107), 1.0, doubleArray0, doubleArray1);
      graggBulirschStoerIntegrator0.setOrderControl(0, 289.5, 1472.0);
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.BOTH;
      StepNormalizer stepNormalizer0 = new StepNormalizer((-3027.0), fixedStepHandler0, stepNormalizerMode0, stepNormalizerBounds0);
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      String string0 = graggBulirschStoerIntegrator0.getName();
      assertEquals("Gragg-Bulirsch-Stoer", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-3691.040815196438), 1460.71475035, 1460.71475035, 0.0);
      dormandPrince853Integrator0.getName();
      int int0 = dormandPrince853Integrator0.getEvaluations();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-22.0);
      doubleArray0[1] = (-22.0);
      doubleArray0[2] = (-22.0);
      doubleArray0[3] = (-22.0);
      doubleArray0[4] = (-22.0);
      doubleArray0[5] = (-788.3);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-22.0), (-788.3), doubleArray0, doubleArray0);
      highamHall54Integrator0.clearStepHandlers();
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(403.82, 0.0, 0.0, 160.5918842193);
      double double0 = dormandPrince853Integrator0.getCurrentSignedStepsize();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 19.985053242002433;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 19.985053242002433, 0.0, 0.0);
      graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 19.985053242002433;
      doubleArray0[2] = 19.985053242002433;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 19.985053242002433;
      doubleArray0[6] = 0.0;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 19.985053242002433, doubleArray0, doubleArray0);
      double double2 = (-1271.532706820365);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      try { 
        highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 0.0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(381.344, 381.344, 381.344, 381.344);
      dormandPrince853Integrator0.setInitialStepSize(381.344);
      Collection<EventHandler> collection0 = dormandPrince853Integrator0.getEventHandlers();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2899.375);
      doubleArray0[1] = (-2899.375);
      doubleArray0[2] = (-2899.375);
      doubleArray0[3] = (-2899.375);
      doubleArray0[4] = (-2899.375);
      doubleArray0[5] = (-2899.375);
      doubleArray0[6] = (-2899.375);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-2899.375), (-2899.375), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setInterpolationControl(false, 2855);
      graggBulirschStoerIntegrator0.setMaxEvaluations(2855);
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(2855, (-391.09), 2855, (-2899.375), 4105.869990414928);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1000.0, 73.0, doubleArray0, doubleArray0);
      highamHall54Integrator0.getEventHandlers();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double0 = (-4.450312892752409);
      MullerSolver mullerSolver0 = new MullerSolver(1000.0);
      mullerSolver0.getMaxEvaluations();
      highamHall54Integrator0.addEventHandler(eventHandler0, (double) 2292, (-4.450312892752409), 2292, (UnivariateSolver) mullerSolver0);
      highamHall54Integrator0.setMaxEvaluations(2292);
      mullerSolver0.getMaxEvaluations();
      highamHall54Integrator0.getOrder();
      double double1 = (-1.0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      StepNormalizer stepNormalizer0 = new StepNormalizer((-1.0), fixedStepHandler0, stepNormalizerMode0);
      highamHall54Integrator0.addStepHandler(stepNormalizer0);
      FixedStepHandler fixedStepHandler1 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode1 = StepNormalizerMode.MULTIPLES;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.NEITHER;
      try { 
        mullerSolver0.solve(0, (UnivariateFunction) null, (-3233.00913), (-2186.4024721), 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-1279.2727756336);
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = 1.0;
      doubleArray0[8] = 1.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1.0, 1.0, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.addStepHandler((StepHandler) null);
      assertEquals(1.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1.7407497662694827E-295, 0.5278670787811279, 0.0, 2933.2905338846);
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(422.32, 0.0);
      Sin sin0 = new Sin();
      illinoisSolver0.solve(996, (UnivariateFunction) sin0, 0.0, (-1482.14635994726));
      dormandPrince853Integrator0.addEventHandler((EventHandler) null, 0.0, 0.0, (-335), (UnivariateSolver) illinoisSolver0);
      FirstOrderConverter firstOrderConverter0 = null;
      try {
        firstOrderConverter0 = new FirstOrderConverter((SecondOrderDifferentialEquations) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.FirstOrderConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2040.2720770828);
      doubleArray0[2] = (-2040.2720770828);
      doubleArray0[3] = 0.0;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, (-2040.2720770828), doubleArray0, doubleArray0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-2040.2720770828), 0.0, doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      PegasusSolver pegasusSolver0 = new PegasusSolver(4597.03894, (-1236.82930753855));
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (-2730.1), (-2040.2720770828), 3187, (UnivariateSolver) pegasusSolver0);
      graggBulirschStoerIntegrator0.setStabilityCheck(true, (-317), 3187, 0.0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      StepNormalizer stepNormalizer0 = new StepNormalizer((-2040.2720770828), fixedStepHandler0, stepNormalizerMode0);
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, 0.0, 0.0);
      dormandPrince853Integrator0.clearEventHandlers();
      GillIntegrator gillIntegrator0 = new GillIntegrator(4.1218749988429474E239);
      Collection<EventHandler> collection0 = dormandPrince853Integrator0.getEventHandlers();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(1.0);
      threeEighthesIntegrator0.clearEventHandlers();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 1.0;
      doubleArray0[8] = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1.0, 0.0, doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double0 = 0.0;
      graggBulirschStoerIntegrator0.getMaxEvaluations();
      double double1 = 1000.0;
      int int0 = 619;
      RiddersSolver riddersSolver0 = new RiddersSolver(0.0, 1051.01144);
      Log10 log10_0 = new Log10();
      // Undeclared exception!
      try { 
        riddersSolver0.solve(Integer.MAX_VALUE, (UnivariateFunction) log10_0, (-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [\uFFFD, \uFFFD], values: [\uFFFD, \uFFFD]
         //
         verifyException("org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1111.117925), (-1111.117925), 0.0, (-3691.040815196438));
      int int0 = dormandPrince853Integrator0.getMaxEvaluations();
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0.0);
      // Undeclared exception!
      try { 
        midpointIntegrator0.integrate((ExpandableStatefulODE) null, 2896.73);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      int int0 = 0;
      double double0 = 0.0;
      double double1 = 0.0;
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = null;
      try {
        adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(0, 0.0, 217.14906036, 0.0, 482.0631435);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // multistep method needs at least 0 previous steps, got 2
         //
         verifyException("org.apache.commons.math3.ode.MultistepIntegrator", e);
      }
  }
}
