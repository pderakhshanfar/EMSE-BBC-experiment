/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 22:44:58 GMT 2021
 */

package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.solvers.BisectionSolver;
import org.apache.commons.math3.analysis.solvers.BrentSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondaryEquations;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator;
import org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator;
import org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.EulerIntegrator;
import org.apache.commons.math3.ode.nonstiff.GillIntegrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.nonstiff.MidpointIntegrator;
import org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator;
import org.apache.commons.math3.ode.sampling.DummyStepHandler;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator;
import org.apache.commons.math3.ode.sampling.StepHandler;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.apache.commons.math3.ode.sampling.StepNormalizerBounds;
import org.apache.commons.math3.ode.sampling.StepNormalizerMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegrator_ESTest extends AbstractIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(35.81684148639408, 35.81684148639408, 35.81684148639408, 35.81684148639408);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-938.5), 2.432623425087251E159, 0.0, 2.432623425087251E159, 35.81684148639408).when(eventHandler0).g(anyDouble() , any(double[].class));
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 2.432623425087251E159, 2.432623425087251E159, 5);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime(5);
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (-938.5));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-938.5);
      doubleArray0[1] = 0.0;
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.computeDerivatives(2.432623425087251E159, doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.EquationsMapper", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3351.76024), (-3351.76024), (-3351.76024), (-3351.76024));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      highamHall54Integrator0.setInitialStepSize((-3351.76024));
      double[] doubleArray0 = new double[0];
      highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1253.2849), doubleArray0, (-2586.99976679), doubleArray0);
      highamHall54Integrator0.setMaxEvaluations(0);
      highamHall54Integrator0.setMaxEvaluations(675);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 644.645144424, 0.0, 1244.14);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      highamHall54Integrator0.setInitialStepSize(644.645144424);
      highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1244.14, doubleArray0, 610.149241525211, doubleArray0);
      highamHall54Integrator0.setMaxEvaluations(0);
      highamHall54Integrator0.setMaxEvaluations((-1611));
      highamHall54Integrator0.getCurrentStepStart();
      highamHall54Integrator0.getEvaluations();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 644.645144424, 0.0, 1244.14);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      highamHall54Integrator0.setInitialStepSize(644.645144424);
      highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1244.14, doubleArray0, 610.149241525211, doubleArray0);
      highamHall54Integrator0.setMaxEvaluations(0);
      highamHall54Integrator0.setMaxEvaluations((-1611));
      highamHall54Integrator0.computeDerivatives((-1.0), doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 644.645144424, 0.0, 1244.14);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      highamHall54Integrator0.setInitialStepSize(644.645144424);
      highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1244.14, doubleArray0, 610.149241525211, doubleArray0);
      highamHall54Integrator0.setMaxEvaluations(0);
      highamHall54Integrator0.setMaxEvaluations((-1611));
      highamHall54Integrator0.getName();
      // Undeclared exception!
      highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1.3240710866573994E38, doubleArray0, 1.0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2.2737367544323206E-10;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2.2737367544323206E-10, 2.2737367544323206E-10, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(7).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(2.2737367544323206E-10, (-1611), 2.2737367544323206E-10, (-1611));
      highamHall54Integrator0.setMaxEvaluations(2030);
      highamHall54Integrator0.getOrder();
      highamHall54Integrator0.getCurrentSignedStepsize();
      int int0 = 4;
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(4, 313.28359576, (-1611), 0.0, 2.2737367544323206E-10);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      adamsBashforthIntegrator0.integrate(expandableStatefulODE0, (double) 5);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 644.645144424, 0.0, 1244.14);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      highamHall54Integrator0.setMaxEvaluations(1387);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      highamHall54Integrator0.setStepSizeControl(1244.14, 610.66046757, 644.645144424, 610.66046757);
      highamHall54Integrator0.setStepSizeControl(0.0, 0.4764525294303894, doubleArray0, doubleArray0);
      highamHall54Integrator0.setInitialStepSize(644.645144424);
      try { 
        highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1244.14, doubleArray0, 610.149241525211, doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (1,387) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(35.81684148639408, 35.81684148639408, 35.81684148639408, 35.81684148639408);
      DummyStepHandler.getInstance();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (-3110.99), 2.432623425087251E159, 5);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(35.81684148639408, 5, (-767.921937), (-3470.122605));
      highamHall54Integrator0.setMaxEvaluations((-1532));
      highamHall54Integrator0.setMaxEvaluations(447);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        highamHall54Integrator0.integrate(expandableStatefulODE0, 0.0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (447) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(35.81684148639408, 35.81684148639408, 35.81684148639408, 35.81684148639408);
      int int0 = 4840;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-938.5), 644.645144424, doubleArray0, doubleArray0);
      double double0 = (-583.406438);
      try { 
        highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-583.406438), doubleArray0, (-583.406438), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 644.645144424, 0.0, 1244.14);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(4840).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      try { 
        highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter1, 610.149241525211, doubleArray0, 610.149241525211, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(35.81684148639408, 35.81684148639408, 35.81684148639408, 35.81684148639408);
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      DummyStepHandler.getInstance();
      DummyStepHandler.getInstance();
      graggBulirschStoerIntegrator0.addStepHandler(dummyStepHandler0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-938.5), 2.432623425087251E159, 0.0, 2.432623425087251E159, 35.81684148639408).when(eventHandler0).g(anyDouble() , any(double[].class));
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (-3110.99), 2.432623425087251E159, 5);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime(2977.918234994739);
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (-938.5));
      double double0 = (-2802.39456149);
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(651, 651, (-2802.39456149), 1785.16, 35.81684148639408);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(4.547473508864641E-10, 1000.0, 1244.14, 633.9907584747891);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      highamHall54Integrator0.clearStepHandlers();
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 610.149241525211;
      doubleArray1[1] = 0.0;
      try { 
        highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1244.14, doubleArray0, 4.547473508864641E-10, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double double0 = 35.81684148639408;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(35.81684148639408, 35.81684148639408, 35.81684148639408, 35.81684148639408);
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      double double1 = 2.432623425087251E159;
      graggBulirschStoerIntegrator0.addStepHandler(dummyStepHandler0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-938.5), 2.432623425087251E159, 0.0, 2.432623425087251E159, 35.81684148639408).when(eventHandler0).g(anyDouble() , any(double[].class));
      double double2 = 0.0;
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 0.1413124436746325, 0.0, 5);
      double double3 = 1842.7282;
      double double4 = 1.888946593147858E25;
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(1842.7282, 0.1413124436746325, 1.888946593147858E25, 35.81684148639408, (double)5).when(eventHandler1).g(anyDouble() , any(double[].class));
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler1, (-60.1798), 0.0, 5);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 3.7485528226129495E-163);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double double0 = 1.0;
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(1.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double double1 = 1000.0;
      // Undeclared exception!
      threeEighthesIntegrator0.integrate(expandableStatefulODE0, 1000.0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(35.81684148639408, 35.81684148639408, 35.81684148639408, 35.81684148639408);
      DummyStepHandler.getInstance();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-938.5), 2.432623425087251E159, 0.0, 2.432623425087251E159, 35.81684148639408).when(eventHandler0).g(anyDouble() , any(double[].class));
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 0.1413124436746325, 0.0, 5);
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-478.2686813479734), (double)5, 0.0, 2359.89253401, 0.0).when(eventHandler1).g(anyDouble() , any(double[].class));
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler1, (-60.1798), 0.0, 5);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 3.7485528226129495E-163);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 0.0, 0.0, 1244.14);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[0];
      highamHall54Integrator0.setMaxEvaluations(834);
      highamHall54Integrator0.getCurrentSignedStepsize();
      highamHall54Integrator0.setStepSizeControl((-1.0), (-1572.7), doubleArray0, doubleArray0);
      highamHall54Integrator0.setMaxEvaluations(0);
      highamHall54Integrator0.setMaxEvaluations((-1611));
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.BOTH;
      StepNormalizer stepNormalizer0 = new StepNormalizer(1284.687578631927, fixedStepHandler0, stepNormalizerMode0, stepNormalizerBounds0);
      highamHall54Integrator0.getStepHandlers();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(35.81684148639408, 35.81684148639408, 35.81684148639408, 35.81684148639408);
      DummyStepHandler.getInstance();
      DummyStepHandler.getInstance();
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(610.149241525211, 174.4933, (-1806.9303), 610.149241525211);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 174.4933;
      // Undeclared exception!
      try { 
        highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) null, 610.149241525211, doubleArray0, 633.9907584747891, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double double0 = 644.645144424;
      double double1 = (-314.86943);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1244.14, (-314.86943), Double.NaN, Double.NaN);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double double2 = (-2070.25029267);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-2070.25029267), doubleArray0, (-810.6231040654), doubleArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1.8544977697201776E-7, 964.1831585136059, 1.8544977697201776E-7, 949.6345755656);
      // Undeclared exception!
      try { 
        dormandPrince54Integrator0.integrate((ExpandableStatefulODE) null, 1.8544977697201776E-7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 0.0, 0.0, 1244.14);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1244.14;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 610.149241525211;
      doubleArray1[1] = 610.149241525211;
      doubleArray1[2] = (-4003.421792446484);
      try { 
        highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1.0), doubleArray0, (-1.0), doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 0.0, 0.0, 1244.14);
      double[] doubleArray0 = new double[0];
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      highamHall54Integrator0.addEventHandler(eventHandler0, 0.0, 1894.576411693247, 2187, (UnivariateSolver) null);
      highamHall54Integrator0.setInitialStepSize(1191.6759921743);
      highamHall54Integrator0.setMaxEvaluations(0);
      try { 
        highamHall54Integrator0.computeDerivatives((-1611), doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(35.81684148639408, Double.NaN, Double.NaN, Double.NaN);
      DummyStepHandler.getInstance();
      graggBulirschStoerIntegrator0.getMaxEvaluations();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 0.1413124436746325, 0.0, 5);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(577).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 35.81684148639408);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double double0 = 2193.4943367114;
      double[] doubleArray0 = new double[6];
      int int0 = 0;
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(0.0);
      eulerIntegrator0.setMaxEvaluations(0);
      eulerIntegrator0.getMaxEvaluations();
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = null;
      try {
        adamsBashforthIntegrator0 = new AdamsBashforthIntegrator((-42), 633.9907584747891, 2193.4943367114, doubleArray0, doubleArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-1.0));
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(Double.NaN, (-4110.0), 4.547473508864641E-10, 1.0197231769561768);
      highamHall54Integrator0.getOrder();
      classicalRungeKuttaIntegrator0.getMaxEvaluations();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-303.883865);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-480.152444899632);
      doubleArray0[3] = 1244.14;
      doubleArray0[4] = 644.645144424;
      doubleArray0[5] = (-303.883865);
      doubleArray0[6] = 610.149241525211;
      doubleArray0[7] = 610.149241525211;
      doubleArray0[8] = (double) (-1061);
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(5, (-303.883865), Double.NaN, doubleArray0, doubleArray0);
      adamsMoultonIntegrator0.getName();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0.5461324453353882);
      midpointIntegrator0.addEventHandler((EventHandler) null, 0.5461324453353882, 2203.207289461, 1012);
      midpointIntegrator0.getCurrentStepStart();
      midpointIntegrator0.getEventHandlers();
      midpointIntegrator0.getName();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double double0 = 35.81684148639408;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(35.81684148639408, Double.NaN, Double.NaN, Double.NaN);
      DummyStepHandler.getInstance();
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator((-2762.69709));
      int int0 = (-1637);
      eulerIntegrator0.setMaxEvaluations((-1637));
      double double1 = (-2238.18329069);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1637);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-2238.18329069);
      doubleArray0[3] = (-2762.69709);
      doubleArray0[4] = (double) 0;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = (-2762.69709);
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = null;
      try {
        adamsBashforthIntegrator0 = new AdamsBashforthIntegrator((-1637), (-2238.18329069), Double.NaN, doubleArray0, doubleArray1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 644.645144424, 0.0, 1244.14);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1244.14, doubleArray0, 610.149241525211, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(35.81684148639408, Double.NaN, Double.NaN, Double.NaN);
      DummyStepHandler.getInstance();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      doReturn((-938.5), 2.432623425087251E159, 0.0, 2.432623425087251E159, 35.81684148639408).when(eventHandler0).g(anyDouble() , any(double[].class));
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 0.1413124436746325, 0.0, 5);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(secondOrderDifferentialEquations0).getDimension();
      graggBulirschStoerIntegrator0.getEventHandlers();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 35.81684148639408);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 644.645144424, 0.0, 1244.14);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1126).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      try { 
        highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1244.14, doubleArray0, 610.149241525211, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 2,252
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DummyStepHandler.getInstance();
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1.0), 964.1831585136059, (-1.0), (-1.0));
      graggBulirschStoerIntegrator0.addStepHandler((StepHandler) null);
      graggBulirschStoerIntegrator0.clearStepHandlers();
      graggBulirschStoerIntegrator0.setInitialStepSize((-96.32088746));
      graggBulirschStoerIntegrator0.addStepHandler(dummyStepHandler0);
      graggBulirschStoerIntegrator0.clearEventHandlers();
      graggBulirschStoerIntegrator0.getCurrentStepStart();
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1.0), 1455.363047, (-664.96068193426), 1455.363047);
      dormandPrince853Integrator0.getOrder();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator1 = new GraggBulirschStoerIntegrator((-1.0), 964.1831585136059, 1.1368683772161603E-10, (-1.0));
      graggBulirschStoerIntegrator1.setStabilityCheck(false, 527, (-1), 1.1368683772161603E-10);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 788.63831195787, 0.0, 312.0637586969);
      BrentSolver brentSolver0 = new BrentSolver();
      highamHall54Integrator0.addEventHandler((EventHandler) null, 0.0, 0.0, (-4674), (UnivariateSolver) brentSolver0);
      highamHall54Integrator0.setMaxGrowth(0.0);
      highamHall54Integrator0.getCurrentStepStart();
      highamHall54Integrator0.getStepHandlers();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 788.63831195787;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (-4674);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-4674), (-145.5), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.clearStepHandlers();
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizer stepNormalizer0 = new StepNormalizer(1207.28, fixedStepHandler0, stepNormalizerMode0);
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      graggBulirschStoerIntegrator0.setControlFactors(2034.35895708784, (-145.5), (-4674), (-1.0));
      graggBulirschStoerIntegrator0.clearEventHandlers();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double double0 = 0.5006242;
      double double1 = (-1263.0);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.5006242, (-1263.0), 330.1212778281642, 0.5006242);
      dormandPrince853Integrator0.getCurrentSignedStepsize();
      double double2 = 0.0;
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.0, (FixedStepHandler) null);
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      NordsieckStepInterpolator nordsieckStepInterpolator1 = new NordsieckStepInterpolator(nordsieckStepInterpolator0);
      // Undeclared exception!
      try { 
        stepNormalizer0.handleStep(nordsieckStepInterpolator0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(35.81684148639408, Double.NaN, Double.NaN, Double.NaN);
      DummyStepHandler.getInstance();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 0.1413124436746325, 0.0, 5);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 35.81684148639408);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(497.753);
      double double0 = (-1.0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-453.4616);
      doubleArray0[1] = 497.753;
      doubleArray0[2] = 497.753;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 497.753;
      doubleArray0[5] = 497.753;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1.0), (-1.0), doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      BrentSolver brentSolver0 = new BrentSolver((-453.4616), 497.753, 0.0);
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (-453.4616), 497.753, 179, (UnivariateSolver) brentSolver0);
      double double1 = (-1.0);
      boolean boolean0 = true;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-1.0);
      doubleArray1[1] = (-1.0);
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.computeDerivatives((-1.2), doubleArray1, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-3523.12);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-3523.12);
      doubleArray0[5] = (-3523.12);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (-3523.12);
      doubleArray0[8] = 0.0;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, (-3523.12), doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      SecondaryEquations secondaryEquations0 = mock(SecondaryEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondaryEquations0).getDimension();
      expandableStatefulODE0.addSecondaryEquations(secondaryEquations0);
      try { 
        dormandPrince54Integrator0.integrate(expandableStatefulODE0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 9
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double double0 = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(312.61202421, 312.61202421, 0.0, 0.0);
      graggBulirschStoerIntegrator0.getEventHandlers();
      int int0 = 0;
      graggBulirschStoerIntegrator0.setInterpolationControl(false, 0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 4143.6264;
      doubleArray0[1] = 0.0;
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 4143.6264, doubleArray0, 312.61202421, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(631.56846);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 631.56846;
      doubleArray0[1] = 631.56846;
      doubleArray0[2] = 631.56846;
      doubleArray0[3] = 631.56846;
      doubleArray0[4] = 631.56846;
      doubleArray0[5] = 631.56846;
      doubleArray0[6] = 631.56846;
      doubleArray0[7] = 631.56846;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(631.56846, 631.56846, doubleArray0, doubleArray0);
      highamHall54Integrator0.getOrder();
      highamHall54Integrator0.getEventHandlers();
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 631.56846;
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = 631.56846;
      doubleArray1[3] = 631.56846;
      doubleArray1[4] = 631.56846;
      doubleArray1[5] = (double) 5;
      doubleArray1[6] = (double) 5;
      // Undeclared exception!
      try { 
        highamHall54Integrator0.computeDerivatives(631.56846, doubleArray1, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1956.943802930015;
      doubleArray0[1] = 1956.943802930015;
      doubleArray0[2] = 1956.943802930015;
      doubleArray0[3] = 1956.943802930015;
      doubleArray0[4] = 1956.943802930015;
      doubleArray0[5] = 1956.943802930015;
      doubleArray0[6] = (-1167.97018);
      doubleArray0[7] = 1956.943802930015;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1956.943802930015, 1956.943802930015, doubleArray0, doubleArray0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1956.943802930015, 1956.943802930015, 1000.0, 1956.943802930015);
      BrentSolver brentSolver0 = new BrentSolver((-1167.97018), 1956.943802930015);
      graggBulirschStoerIntegrator0.addEventHandler((EventHandler) null, (-2337.33811835366), 1956.943802930015, 7186, (UnivariateSolver) brentSolver0);
      assertEquals(0.0, brentSolver0.getMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-4503.755555606097), (-812.9789038317747), 0.0, 0.0);
      DummyStepHandler.getInstance();
      double double0 = (-938.5);
      double double1 = 2.432623425087251E159;
      double double2 = 1096.9;
      graggBulirschStoerIntegrator0.addEventHandler((EventHandler) null, 1096.9, (-812.9789038317747), 227);
      graggBulirschStoerIntegrator0.getEventHandlers();
      FirstOrderConverter firstOrderConverter0 = null;
      try {
        firstOrderConverter0 = new FirstOrderConverter((SecondOrderDifferentialEquations) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.FirstOrderConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double double0 = (-546.87174596578);
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-546.87174596578), (-546.87174596578), doubleArray0, doubleArray0);
      highamHall54Integrator0.getStepHandlers();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      highamHall54Integrator0.getEventHandlers();
      int int0 = (-1276);
      highamHall54Integrator0.addEventHandler(eventHandler0, (-546.87174596578), (-546.87174596578), (-1276));
      highamHall54Integrator0.setMaxGrowth((-546.87174596578));
      highamHall54Integrator0.getCurrentStepStart();
      highamHall54Integrator0.setSafety(Double.NaN);
      highamHall54Integrator0.setInitialStepSize(Double.NaN);
      ExpandableStatefulODE expandableStatefulODE0 = null;
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double1 = 1485.432;
      BisectionSolver bisectionSolver0 = new BisectionSolver(Double.NaN, (-12.0));
      int int1 = (-2340);
      UnivariateFunction univariateFunction0 = null;
      bisectionSolver0.getEvaluations();
      bisectionSolver0.getEvaluations();
      try { 
        bisectionSolver0.solve((-357), (UnivariateFunction) null, (-2024.5), (double) (-1276), 1485.432);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator((-9.35292435884448));
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.LAST;
      eulerIntegrator0.clearStepHandlers();
      StepNormalizer stepNormalizer0 = new StepNormalizer(1768.55, (FixedStepHandler) null, stepNormalizerMode0, stepNormalizerBounds0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-9.35292435884448);
      doubleArray0[1] = 1768.55;
      doubleArray0[2] = 1768.55;
      doubleArray0[3] = 1768.55;
      doubleArray0[4] = 1768.55;
      doubleArray0[5] = (-1.324889724104E12);
      doubleArray0[6] = 0.0;
      // Undeclared exception!
      try { 
        stepNormalizer0.init(0.0, doubleArray0, (-683.3447));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.sampling.StepNormalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator((-3461.57607674148));
      eulerIntegrator0.clearStepHandlers();
      int int0 = 0;
      eulerIntegrator0.setMaxEvaluations(0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-3461.57607674148);
      doubleArray0[1] = (double) 0;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 0;
      double double0 = (-2238.18329069);
      doubleArray1[1] = (-2238.18329069);
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = null;
      try {
        adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(0, 0, (-3461.57607674148), doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one row
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[] doubleArray0 = new double[11];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1862.4087346789784;
      doubleArray0[4] = 1862.4087346789784;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1862.4087346789784;
      doubleArray0[7] = (-809.8739);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-809.8739), 1862.4087346789784, doubleArray0, doubleArray0);
      highamHall54Integrator0.getOrder();
      highamHall54Integrator0.setMaxEvaluations(2);
      highamHall54Integrator0.getEvaluations();
      highamHall54Integrator0.getEventHandlers();
      // Undeclared exception!
      try { 
        highamHall54Integrator0.computeDerivatives(Double.NaN, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(936.0473085538);
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      classicalRungeKuttaIntegrator0.addStepHandler(dummyStepHandler0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.03697916666666667;
      doubleArray0[1] = 936.0473085538;
      doubleArray0[2] = 0.03697916666666667;
      doubleArray0[3] = 936.0473085538;
      doubleArray0[4] = 0.03697916666666667;
      doubleArray0[5] = 0.03697916666666667;
      doubleArray0[6] = 0.03697916666666667;
      doubleArray0[7] = 936.0473085538;
      // Undeclared exception!
      try { 
        classicalRungeKuttaIntegrator0.computeDerivatives(0.03697916666666667, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(837.65756);
      eulerIntegrator0.getStepHandlers();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(Double.NaN, 0.0, 0.0, 0.0);
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.0, (FixedStepHandler) null);
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-1414.16272899631));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1414.16272899631);
      doubleArray0[1] = (-1414.16272899631);
      // Undeclared exception!
      try { 
        midpointIntegrator0.computeDerivatives((-1414.16272899631), doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, 0.0, 1521.0);
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      DummyStepHandler.getInstance();
      DummyStepHandler.getInstance();
      graggBulirschStoerIntegrator0.getStepHandlers();
      DummyStepHandler.getInstance();
      graggBulirschStoerIntegrator0.addStepHandler(dummyStepHandler0);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.computeDerivatives((-37.45832313645163), doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = 822;
      double double0 = 0.0;
      double double1 = Double.NaN;
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(822, 822, 822, 0.0, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NaN;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, doubleArray0, doubleArray0);
      ExpandableStatefulODE expandableStatefulODE0 = null;
      try {
        expandableStatefulODE0 = new ExpandableStatefulODE((FirstOrderDifferentialEquations) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.ExpandableStatefulODE", e);
      }
  }
}
