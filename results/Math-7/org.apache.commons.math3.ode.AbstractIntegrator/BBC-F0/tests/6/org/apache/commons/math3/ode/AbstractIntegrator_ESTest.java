/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 09:54:21 GMT 2020
 */

package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.function.Log1p;
import org.apache.commons.math3.analysis.solvers.BisectionSolver;
import org.apache.commons.math3.analysis.solvers.IllinoisSolver;
import org.apache.commons.math3.analysis.solvers.PegasusSolver;
import org.apache.commons.math3.analysis.solvers.RegulaFalsiSolver;
import org.apache.commons.math3.analysis.solvers.RiddersSolver;
import org.apache.commons.math3.analysis.solvers.SecantSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.linear.Array2DRowRealMatrix;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator;
import org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator;
import org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.EulerIntegrator;
import org.apache.commons.math3.ode.nonstiff.GillIntegrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.nonstiff.MidpointIntegrator;
import org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator;
import org.apache.commons.math3.ode.sampling.DummyStepHandler;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.StepHandler;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.apache.commons.math3.ode.sampling.StepNormalizerBounds;
import org.apache.commons.math3.ode.sampling.StepNormalizerMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegrator_ESTest extends AbstractIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(286.4846567906837);
      double double0 = (-1012.97377413);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      StepNormalizer stepNormalizer0 = new StepNormalizer((-1012.97377413), fixedStepHandler0, stepNormalizerMode0);
      eulerIntegrator0.addStepHandler(stepNormalizer0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      eulerIntegrator0.integrate(expandableStatefulODE0, 0.6022218465805054);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double double0 = 364.65992568854756;
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(364.65992568854756);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(3499).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((double)3499).when(eventHandler0).g(anyDouble() , any(double[].class));
      double double1 = (-530.504441);
      eulerIntegrator0.addEventHandler(eventHandler0, 364.65992568854756, (-530.504441), (-2716));
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      eulerIntegrator0.integrate(expandableStatefulODE0, 364.65992568854756);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(2864.2972347686555);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      double double0 = 1.0;
      threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1.0, doubleArray0, (double) 0, doubleArray0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      threeEighthesIntegrator0.integrate(expandableStatefulODE0, 1.0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double double0 = 364.65992568854756;
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(364.65992568854756);
      int int0 = 3499;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(3499).when(secondOrderDifferentialEquations0).getDimension();
      eulerIntegrator0.addStepHandler((StepHandler) null);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      try { 
        eulerIntegrator0.integrate(expandableStatefulODE0, 364.65992568854756);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double double0 = 364.65992568854756;
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(364.65992568854756);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(3499).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      eulerIntegrator0.addEventHandler(eventHandler0, 364.65992568854756, (-530.504441), (-2716));
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      eulerIntegrator0.integrate(expandableStatefulODE0, 364.65992568854756);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(2864.2972347686555);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter1, 2864.2972347686555, doubleArray0, (-0.33761270056201975), doubleArray0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(97.898, 1000.0, (-2210.0), 1586.224935694);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(2864.2972347686555);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      threeEighthesIntegrator0.setMaxEvaluations(0);
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      try { 
        threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter1, 2864.2972347686555, doubleArray0, 1.0697050094604492, doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(2864.2972347686555);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter1, 2864.2972347686555, doubleArray0, 1.0697050094604492, doubleArray0);
      threeEighthesIntegrator0.setMaxEvaluations(0);
      threeEighthesIntegrator0.getName();
      threeEighthesIntegrator0.getMaxEvaluations();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1.0697050094604492, 1.0, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations2 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations2).getDimension();
      FirstOrderConverter firstOrderConverter2 = new FirstOrderConverter(secondOrderDifferentialEquations2);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter2);
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.computeDerivatives(0.0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(2864.2972347686555);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1.0, doubleArray0, (double) 0, doubleArray0);
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(2246, 1.0, 0.0, 0.0, (-1816));
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(2864.2972347686555);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter1, 2864.2972347686555, doubleArray0, 1.0697050094604492, doubleArray0);
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = null;
      try {
        adamsMoultonIntegrator0 = new AdamsMoultonIntegrator((-1816), 1000.0, Double.NaN, 987.728, 224.8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // multistep method needs at least -1,816 previous steps, got 2
         //
         verifyException("org.apache.commons.math3.ode.MultistepIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(3.7906173667738715E-206);
      threeEighthesIntegrator0.getMaxEvaluations();
      threeEighthesIntegrator0.getMaxEvaluations();
      threeEighthesIntegrator0.getCurrentStepStart();
      threeEighthesIntegrator0.getMaxEvaluations();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(Integer.MAX_VALUE, 4554.265218964296, 3.7906173667738715E-206, (-2086.0));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 4554.265218964296;
      doubleArray0[2] = (double) Integer.MAX_VALUE;
      doubleArray0[3] = 3000.0251516214917;
      doubleArray0[4] = (double) Integer.MAX_VALUE;
      doubleArray0[5] = 3.7906173667738715E-206;
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = 3728.260503;
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.computeDerivatives((-1.0), doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 1074;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2558.0);
      doubleArray0[1] = (-2558.0);
      doubleArray0[2] = (-2558.0);
      doubleArray0[3] = 2551.42053;
      doubleArray0[4] = (-2558.0);
      doubleArray0[5] = (-2558.0);
      double double0 = 364.65992568854756;
      doubleArray0[6] = 364.65992568854756;
      doubleArray0[7] = 2551.42053;
      doubleArray0[8] = (-2558.0);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(2551.42053, (-2558.0), doubleArray0, doubleArray0);
      double double1 = 364.65992568854756;
      try { 
        dormandPrince54Integrator0.integrate(expandableStatefulODE0, 364.65992568854756);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 9
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-1.0);
      doubleArray1[6] = (-1.0);
      doubleArray1[7] = (-1.0);
      doubleArray1[8] = 0.0;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, (-1.0), doubleArray1, doubleArray1);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 0.0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(364.65992568854756);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      eulerIntegrator0.addEventHandler(eventHandler0, (-942.65513900178), 1238.32469737, 1);
      eulerIntegrator0.getEventHandlers();
      double[] doubleArray0 = new double[3];
      doubleArray0[1] = 364.65992568854756;
      doubleArray0[2] = 364.65992568854756;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1047.208), (-1047.208), doubleArray0, doubleArray0);
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = null;
      try {
        adamsMoultonIntegrator0 = new AdamsMoultonIntegrator((-624), 0.0, (-1879.0300439101868), (-1879.0300439101868), (-1879.0300439101868));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // multistep method needs at least -624 previous steps, got 2
         //
         verifyException("org.apache.commons.math3.ode.MultistepIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-102.0);
      doubleArray0[1] = (-102.0);
      doubleArray0[2] = (-3150.925874116);
      doubleArray0[3] = (-102.0);
      doubleArray0[4] = (-102.0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-102.0), (-102.0), doubleArray0, doubleArray0);
      StepNormalizer stepNormalizer0 = new StepNormalizer((-102.0), (FixedStepHandler) null);
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.getEvaluations();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (-102.0), 0.0, (-3276), (UnivariateSolver) regulaFalsiSolver0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1631).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-3861.6877244513), doubleArray0, (-3861.6877244513), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 3,262
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-1.0), (-1.0), doubleArray0, doubleArray0);
      dormandPrince54Integrator0.getCurrentSignedStepsize();
      double double0 = 3881.2;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1.0, 3881.2, 3881.2, 3881.2);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double1 = (-1837.3190771);
      int int0 = (-4235);
      BisectionSolver bisectionSolver0 = new BisectionSolver();
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (-1837.3190771), 0.0, (-4235), (UnivariateSolver) bisectionSolver0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      dormandPrince54Integrator0.getStepHandlers();
      graggBulirschStoerIntegrator0.setInterpolationControl(true, (-4235));
      // Undeclared exception!
      dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-2939.6377), doubleArray0, 0.0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double double0 = (-870.1774672077);
      GillIntegrator gillIntegrator0 = new GillIntegrator((-870.1774672077));
      gillIntegrator0.getMaxEvaluations();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double1 = 695.0630835689;
      gillIntegrator0.clearEventHandlers();
      gillIntegrator0.addEventHandler(eventHandler0, (-734.8377722887606), 695.0630835689, Integer.MAX_VALUE);
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      int int0 = 155;
      gillIntegrator0.addEventHandler(eventHandler1, (-3.0689499459498917), (-3.0689499459498917), 155);
      double double2 = 462.0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (double) 155;
      doubleArray0[2] = (-3.0689499459498917);
      doubleArray0[3] = (-734.8377722887606);
      // Undeclared exception!
      try { 
        gillIntegrator0.computeDerivatives(1000.0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-176.334640565));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      try { 
        classicalRungeKuttaIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-176.334640565), doubleArray0, (-176.334640565), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(0.0);
      double double0 = (-0.2735313036020583);
      double double1 = 3.141592653589793;
      double double2 = (-2904.3987);
      double double3 = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-0.2735313036020583), 3.141592653589793, (-2904.3987), 0.0);
      int int0 = 0;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3.141592653589793;
      doubleArray0[1] = (-2904.3987);
      doubleArray0[2] = (double) 0;
      double double4 = 0.0;
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 0.0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator((-265.4807868668));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double0 = (-2464.42670267165);
      eulerIntegrator0.getEvaluations();
      double double1 = 375.0;
      RiddersSolver riddersSolver0 = new RiddersSolver();
      eulerIntegrator0.clearStepHandlers();
      riddersSolver0.getEvaluations();
      eulerIntegrator0.addEventHandler(eventHandler0, (-2464.42670267165), 375.0, 266, (UnivariateSolver) riddersSolver0);
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double2 = 1.0E-15;
      double double3 = 0.0;
      eulerIntegrator0.addEventHandler(eventHandler1, 1.0E-15, 0.0, 0);
      eulerIntegrator0.clearStepHandlers();
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = null;
      try {
        adamsBashforthIntegrator0 = new AdamsBashforthIntegrator((-95), (-2464.42670267165), 0.0, 0, (-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // multistep method needs at least -95 previous steps, got 2
         //
         verifyException("org.apache.commons.math3.ode.MultistepIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(4551.99);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.LAST;
      StepNormalizer stepNormalizer0 = new StepNormalizer(4551.99, fixedStepHandler0, stepNormalizerBounds0);
      threeEighthesIntegrator0.addStepHandler(stepNormalizer0);
      threeEighthesIntegrator0.getName();
      threeEighthesIntegrator0.clearStepHandlers();
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1000.0, 1000.0, 1000.0, Double.NaN);
      dormandPrince54Integrator0.setStepSizeControl(1000.0, 0.0, Double.NaN, 1643.288079480573);
      dormandPrince54Integrator0.getOrder();
      dormandPrince54Integrator0.clearEventHandlers();
      dormandPrince54Integrator0.clearEventHandlers();
      dormandPrince54Integrator0.getName();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1000.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(Double.NaN, 0.0, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setControlFactors((-815.563519554348), 0.0, 0.0, 5318.813566097);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(2890.607541111887);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      PegasusSolver pegasusSolver0 = new PegasusSolver(1827.6595931564639);
      gillIntegrator0.getEventHandlers();
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      pegasusSolver0.getMaxEvaluations();
      gillIntegrator0.addEventHandler(eventHandler1, 1827.6595931564639, 1.0, 0, (UnivariateSolver) pegasusSolver0);
      gillIntegrator0.addEventHandler(eventHandler0, 2890.607541111887, 2890.607541111887, 0, (UnivariateSolver) pegasusSolver0);
      gillIntegrator0.clearStepHandlers();
      gillIntegrator0.getEvaluations();
      gillIntegrator0.getEvaluations();
      gillIntegrator0.setMaxEvaluations((-58));
      gillIntegrator0.setMaxEvaluations(5);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 1827.6595931564639;
      doubleArray0[2] = 1827.6595931564639;
      doubleArray0[3] = (double) 5;
      doubleArray0[4] = (-2194.094699241224);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0, 2.2404374302607883, doubleArray0, doubleArray0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.FIRST;
      StepNormalizer stepNormalizer0 = new StepNormalizer(2123.313, fixedStepHandler0, stepNormalizerMode0, stepNormalizerBounds0);
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(1.0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1.0, 1.0, 1.0, 0.0);
      graggBulirschStoerIntegrator0.setStabilityCheck(true, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1.0, (-4155.103661), 976.5, Integer.MAX_VALUE);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 500.65148;
      doubleArray0[2] = 500.65148;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) Integer.MAX_VALUE;
      doubleArray0[5] = (double) Integer.MAX_VALUE;
      doubleArray0[6] = 500.65148;
      doubleArray0[7] = 976.5;
      // Undeclared exception!
      try { 
        dormandPrince54Integrator0.computeDerivatives(500.65148, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 0.0, 672.73742, 1014.7414);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 0.0, 0.0, 0.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      highamHall54Integrator0.setMinReduction(0.0);
      highamHall54Integrator0.addEventHandler(eventHandler0, 0.0, 0.0, 1311);
      highamHall54Integrator0.getStepHandlers();
      highamHall54Integrator0.getOrder();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      dormandPrince54Integrator0.integrate(expandableStatefulODE0, (-1.0));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(2718.76855621769);
      eulerIntegrator0.getEvaluations();
      eulerIntegrator0.getEventHandlers();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2.8421709430404007E-11, 2718.76855621769, doubleArray0, doubleArray0);
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      graggBulirschStoerIntegrator0.addEventHandler((EventHandler) null, 2.8421709430404007E-11, 0.3333333134651184, 0, (UnivariateSolver) illinoisSolver0);
      assertEquals(2718.76855621769, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(1000.0);
      midpointIntegrator0.clearEventHandlers();
      double double0 = midpointIntegrator0.getCurrentSignedStepsize();
      assertEquals(Double.NaN, double0, 0.01);
      
      midpointIntegrator0.clearEventHandlers();
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01);
      
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-4519.7388658287), 1000.0, 1000.0, 1000.0);
      graggBulirschStoerIntegrator0.setControlFactors((-1730.523442312), (-2353.079696), (-1730.523442312), (-2353.079696));
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2353.079696);
      doubleArray0[1] = (-4519.7388658287);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-4519.7388658287);
      doubleArray0[4] = 2937500.0;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1000.0, 2937500.0, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getOrder();
      assertEquals(54198.708471697, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(525.4558, 525.4558, 525.4558, 525.4558);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      SecantSolver secantSolver0 = new SecantSolver();
      Log1p log1p0 = new Log1p();
      secantSolver0.solve(5, (UnivariateFunction) log1p0, 525.4558, 0.0, 525.4558);
      secantSolver0.getEvaluations();
      highamHall54Integrator0.addEventHandler(eventHandler0, 525.4558, 525.4558, 240, (UnivariateSolver) secantSolver0);
      double double0 = highamHall54Integrator0.getCurrentSignedStepsize();
      assertEquals(525.4558, double0, 0.01);
      
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      highamHall54Integrator0.addEventHandler(eventHandler1, 0.0, (-1031.24422), 2, (UnivariateSolver) secantSolver0);
      highamHall54Integrator0.setMaxEvaluations(0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 525.4558;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 240;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(240, 0.16666666666666666, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setOrderControl(3170, (-783.85), Double.NaN);
      assertEquals(6.324555320336759, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(0.0);
      double[] doubleArray0 = new double[9];
      gillIntegrator0.getStepHandlers();
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-440.78971348864576);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      gillIntegrator0.setMaxEvaluations(13);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      // Undeclared exception!
      try { 
        gillIntegrator0.computeDerivatives(0.0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(Double.NaN);
      midpointIntegrator0.getEventHandlers();
      midpointIntegrator0.getName();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-2528.522159174554);
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = Double.NaN;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(Double.NaN, Double.NaN, doubleArray0, doubleArray0);
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      graggBulirschStoerIntegrator0.addStepHandler(dummyStepHandler0);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 0.0, 0.0, 0.0);
      highamHall54Integrator0.clearEventHandlers();
      highamHall54Integrator0.setInitialStepSize(0.0);
      highamHall54Integrator0.clearEventHandlers();
      highamHall54Integrator0.getMaxEvaluations();
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.0, fixedStepHandler0, stepNormalizerMode0);
      highamHall54Integrator0.addStepHandler(stepNormalizer0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1837.0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 6.265569375E11;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) Integer.MAX_VALUE;
      doubleArray0[6] = (-1459.79558);
      doubleArray0[7] = 1524.45008340762;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(Integer.MAX_VALUE, 6.265569375E11, doubleArray0, doubleArray0);
      ExpandableStatefulODE expandableStatefulODE0 = null;
      try {
        expandableStatefulODE0 = new ExpandableStatefulODE((FirstOrderDifferentialEquations) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.ExpandableStatefulODE", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2.4936055526796523;
      doubleArray0[1] = 2.4936055526796523;
      doubleArray0[2] = 2.4936055526796523;
      doubleArray0[3] = 2.4936055526796523;
      doubleArray0[4] = 2.4936055526796523;
      doubleArray0[5] = 2.4936055526796523;
      doubleArray0[6] = (-1071.94470297);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2.4936055526796523, 2.4936055526796523, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setOrderControl((-1174), (-1174), 2.4936055526796523);
      boolean boolean0 = true;
      graggBulirschStoerIntegrator0.clearEventHandlers();
      graggBulirschStoerIntegrator0.setStabilityCheck(true, (-1174), 1342, (-220.34573287));
      double double0 = (-1.0);
      graggBulirschStoerIntegrator0.setOrderControl(0, 2.4936055526796523, (-1071.94470297));
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) null, (-1.0), doubleArray0, 0.0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2893.994401846249, 0.0, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.getMaxEvaluations();
      graggBulirschStoerIntegrator0.getEvaluations();
      boolean boolean0 = false;
      double double0 = 0.0;
      graggBulirschStoerIntegrator0.getMaxEvaluations();
      double double1 = 2739.6694669063;
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) null, 0.0, doubleArray0, 2739.6694669063, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2864.6348474692177;
      doubleArray0[1] = 2864.6348474692177;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = 2864.6348474692177;
      doubleArray0[5] = (double) 1;
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(1, 1, 2864.6348474692177, doubleArray0, doubleArray0);
      adamsMoultonIntegrator0.getMaxEvaluations();
      double[][] doubleArray1 = new double[8][1];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      doubleArray1[2] = doubleArray0;
      adamsMoultonIntegrator0.clearStepHandlers();
      doubleArray1[3] = doubleArray0;
      adamsMoultonIntegrator0.addStepHandler((StepHandler) null);
      adamsMoultonIntegrator0.clearStepHandlers();
      doubleArray1[4] = doubleArray0;
      doubleArray1[5] = doubleArray0;
      doubleArray1[6] = doubleArray0;
      doubleArray1[7] = doubleArray0;
      Array2DRowRealMatrix array2DRowRealMatrix0 = new Array2DRowRealMatrix(doubleArray1);
      // Undeclared exception!
      try { 
        adamsMoultonIntegrator0.updateHighOrderDerivativesPhase1(array2DRowRealMatrix0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 8
         //
         verifyException("org.apache.commons.math3.linear.MatrixUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(0.3);
      gillIntegrator0.clearStepHandlers();
      gillIntegrator0.getEvaluations();
      gillIntegrator0.getStepHandlers();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.3;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setControlFactors(0.0, 1494.051880070481, 0.0, 0.3);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, (-111.088), doubleArray0, doubleArray0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, (-173.41), (-111.088), 0.0);
      graggBulirschStoerIntegrator0.setStabilityCheck(false, 555, 0, (-173.41));
      graggBulirschStoerIntegrator0.clearEventHandlers();
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.integrate((ExpandableStatefulODE) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }
}
