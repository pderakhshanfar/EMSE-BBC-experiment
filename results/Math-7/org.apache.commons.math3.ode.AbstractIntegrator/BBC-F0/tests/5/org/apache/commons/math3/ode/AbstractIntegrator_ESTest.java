/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 09:54:10 GMT 2020
 */

package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import org.apache.commons.math3.analysis.solvers.BisectionSolver;
import org.apache.commons.math3.analysis.solvers.IllinoisSolver;
import org.apache.commons.math3.analysis.solvers.MullerSolver;
import org.apache.commons.math3.analysis.solvers.RegulaFalsiSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator;
import org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator;
import org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.GillIntegrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.nonstiff.MidpointIntegrator;
import org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator;
import org.apache.commons.math3.ode.sampling.DummyStepHandler;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.StepHandler;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.apache.commons.math3.ode.sampling.StepNormalizerBounds;
import org.apache.commons.math3.ode.sampling.StepNormalizerMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegrator_ESTest extends AbstractIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-4408.3119));
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.BOTH;
      StepNormalizer stepNormalizer0 = new StepNormalizer(686.61974, fixedStepHandler0, stepNormalizerMode0, stepNormalizerBounds0);
      midpointIntegrator0.addStepHandler(stepNormalizer0);
      midpointIntegrator0.clearStepHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(7.984485303520287E21, (-4408.3119), 1000.0, 288.3489238528);
      double[] doubleArray0 = new double[0];
      dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-3573.29119), doubleArray0, (-811.5755), doubleArray0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(288.3489238528, (-3573.29119), 2.020719528198242, (-4.49020710638897));
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator1 = new GraggBulirschStoerIntegrator((-811.5754999999999), (-918.7507174977571), 1000.0, (-4.49020710638897));
      graggBulirschStoerIntegrator1.getEvaluations();
      graggBulirschStoerIntegrator1.setOrderControl(3, 1302.350174, (-2410.1587709));
      graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
      dormandPrince54Integrator0.computeDerivatives(3, doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-4408.3119));
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.BOTH;
      StepNormalizer stepNormalizer0 = new StepNormalizer(686.61974, fixedStepHandler0, stepNormalizerMode0, stepNormalizerBounds0);
      midpointIntegrator0.addStepHandler(stepNormalizer0);
      midpointIntegrator0.clearStepHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(7.984485303520287E21, (-4408.3119), 1000.0, 288.3489238528);
      double[] doubleArray0 = new double[0];
      dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-3573.29119), doubleArray0, (-811.5755), doubleArray0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double[] doubleArray1 = new double[8];
      doubleArray1[1] = 7.984485303520287E21;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = 7.984485303520287E21;
      doubleArray1[4] = (-811.5755);
      doubleArray1[5] = (-811.5754999999999);
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = (-4849.5696);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1.0, (-5337.228418147305), doubleArray1, doubleArray1);
      highamHall54Integrator0.getOrder();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations2 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations2).getDimension();
      FirstOrderConverter firstOrderConverter2 = new FirstOrderConverter(secondOrderDifferentialEquations2);
      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter2, (-811.5755), doubleArray0, (-3573.29119), doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-100.9246), 0.65, 1906.4672041, 1906.4672041);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 0.65, 1906.4672041, (-799));
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 0.0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(973.6304957797703);
      classicalRungeKuttaIntegrator0.getEventHandlers();
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(973.6304957797703, (-2259.298344236), 973.6304957797703, (-2259.298344236));
      dormandPrince853Integrator0.getEvaluations();
      dormandPrince853Integrator0.getOrder();
      dormandPrince853Integrator0.getOrder();
      dormandPrince853Integrator0.getStepHandlers();
      dormandPrince853Integrator0.getEvaluations();
      dormandPrince853Integrator0.setInitialStepSize(1307.705371);
      ExpandableStatefulODE expandableStatefulODE0 = null;
      double double0 = (-3110.10611918);
      // Undeclared exception!
      try { 
        dormandPrince853Integrator0.integrate((ExpandableStatefulODE) null, (-3110.10611918));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1906.4672041, 1445.1, doubleArray0, doubleArray0);
      int int0 = 1886;
      BisectionSolver bisectionSolver0 = new BisectionSolver(6944.2056680000005, (-2513.0));
      dormandPrince54Integrator0.addEventHandler((EventHandler) null, (-1450.369), (-2513.0), 1886, (UnivariateSolver) bisectionSolver0);
      DormandPrince54Integrator dormandPrince54Integrator1 = new DormandPrince54Integrator(0.0, (-100.9246), (-1064.032), 1906.4672041);
      dormandPrince54Integrator1.setMinReduction(1287.7);
      dormandPrince54Integrator1.getOrder();
      dormandPrince54Integrator0.getEventHandlers();
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-2410.8873), (-2410.8873), doubleArray0, doubleArray0);
      highamHall54Integrator0.getOrder();
      dormandPrince54Integrator0.clearStepHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      // Undeclared exception!
      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-2410.8873), doubleArray0, (-1064.032), doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.NEITHER;
      StepNormalizer stepNormalizer0 = new StepNormalizer((-386.477), fixedStepHandler0, stepNormalizerMode0, stepNormalizerBounds0);
      double double0 = 0.0;
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0.0);
      midpointIntegrator0.addStepHandler(stepNormalizer0);
      midpointIntegrator0.clearStepHandlers();
      int int0 = 0;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double double1 = 7.984485303520287E21;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-162.3), (-162.3), 0.5133614540100098, 1397.2144844);
      double double2 = (-811.5755);
      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 7.984485303520287E21, doubleArray0, 7.984485303520287E21, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-4408.3119));
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.BOTH;
      StepNormalizer stepNormalizer0 = new StepNormalizer(686.61974, fixedStepHandler0, stepNormalizerMode0, stepNormalizerBounds0);
      midpointIntegrator0.addStepHandler(stepNormalizer0);
      midpointIntegrator0.clearStepHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(2379).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double double0 = 1000.0;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(7.984485303520287E21, (-4408.3119), 1000.0, 288.3489238528);
      double[] doubleArray0 = new double[0];
      double double1 = (-811.5755);
      double double2 = new Double((-811.5755));
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      dormandPrince54Integrator0.setStepSizeControl(686.61974, (-4849.5696), doubleArray0, doubleArray0);
      try { 
        dormandPrince54Integrator0.integrate(expandableStatefulODE0, (-4408.3119));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4,758 != 0
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1906.4672041, 1445.1, doubleArray0, doubleArray0);
      DormandPrince54Integrator dormandPrince54Integrator1 = new DormandPrince54Integrator(0.0, (-100.9246), (-1064.032), 1906.4672041);
      dormandPrince54Integrator1.setMinReduction(1287.7);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, (-1064.032), doubleArray0);
      dormandPrince54Integrator1.getOrder();
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-2410.8873), (-1064.032), doubleArray0, doubleArray0);
      highamHall54Integrator0.getOrder();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      // Undeclared exception!
      dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter1, 1906.4672041, doubleArray0, (-323.34211474), doubleArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double double0 = (-100.9246);
      double[] doubleArray0 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1906.4672041, 1445.1, doubleArray0, doubleArray0);
      double double1 = (-1064.032);
      DormandPrince54Integrator dormandPrince54Integrator1 = new DormandPrince54Integrator(0.0, (-100.9246), (-1064.032), 1906.4672041);
      double double2 = 1287.7;
      dormandPrince54Integrator1.setMinReduction(1287.7);
      dormandPrince54Integrator1.getOrder();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      // Undeclared exception!
      dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-2410.8873), doubleArray0, 4533.318368, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(4.0651709187617596E-117, 4.0651709187617596E-117, 4.0651709187617596E-117, 4.0651709187617596E-117);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 4.0651709187617596E-117;
      doubleArray0[1] = 4.0651709187617596E-117;
      doubleArray0[2] = 4.0651709187617596E-117;
      doubleArray0[3] = 4.0651709187617596E-117;
      doubleArray0[4] = 4.0651709187617596E-117;
      graggBulirschStoerIntegrator0.setStepSizeControl(4.0651709187617596E-117, 4.0651709187617596E-117, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.getStepHandlers();
      graggBulirschStoerIntegrator0.clearStepHandlers();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 4.0651709187617596E-117, (-1263.8), 1259);
      graggBulirschStoerIntegrator0.getStepHandlers();
      graggBulirschStoerIntegrator0.getEventHandlers();
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 310);
      graggBulirschStoerIntegrator0.getName();
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(1259, 4.0651709187617596E-117, (-652.6350460372216), doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-100.9246), 0.65, 1906.4672041, 1906.4672041);
      graggBulirschStoerIntegrator0.getEventHandlers();
      graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
      graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-100.9246), 0.65, 1906.4672041, 1906.4672041);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      graggBulirschStoerIntegrator0.addStepHandler(dummyStepHandler0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 1906.4672041);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-0.4831900357003607);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 3983.26997;
      doubleArray0[6] = (-223.181);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1.0), (-1.0), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setMaxEvaluations(335);
      graggBulirschStoerIntegrator0.setStepSizeControl((double) 0, 1000.0, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.getEventHandlers();
      graggBulirschStoerIntegrator0.setStabilityCheck(true, (-1989), 0, 204.86659);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-1.0), 0.0, (-2369.73977869896), 4.139937459513021E-8);
      dormandPrince54Integrator0.setMinReduction((-1.0));
      dormandPrince54Integrator0.getOrder();
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1271.9527187259878), (-1415.2832681), 196.1665, 1000.0);
      highamHall54Integrator0.getOrder();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(335).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 3983.26997, doubleArray0, (-2369.73977869896), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 670
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-4408.3119));
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.BOTH;
      StepNormalizer stepNormalizer0 = new StepNormalizer(686.61974, fixedStepHandler0, stepNormalizerMode0, stepNormalizerBounds0);
      midpointIntegrator0.addStepHandler(stepNormalizer0);
      midpointIntegrator0.clearStepHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(7.984485303520287E21, (-4408.3119), 1000.0, 288.3489238528);
      double[] doubleArray0 = new double[0];
      double double0 = (-811.5755);
      dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-3573.29119), doubleArray0, (-811.5755), doubleArray0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      dormandPrince54Integrator0.integrate(expandableStatefulODE0, (-4408.3119));
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double double0 = 0.0;
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
      double[] doubleArray0 = new double[3];
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, 0.0, 0.0);
      int int0 = 711;
      graggBulirschStoerIntegrator0.setMaxEvaluations(711);
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (double) Integer.MAX_VALUE);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (711) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1906.4672041, 1445.1, doubleArray0, doubleArray0);
      DormandPrince54Integrator dormandPrince54Integrator1 = new DormandPrince54Integrator(0.0, (-100.9246), (-1064.032), 1906.4672041);
      dormandPrince54Integrator1.setMinReduction(1287.7);
      dormandPrince54Integrator1.getOrder();
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-2410.8873), (-1064.032), doubleArray0, doubleArray0);
      highamHall54Integrator0.getOrder();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      // Undeclared exception!
      dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1906.4672041, doubleArray0, (-323.34211474), doubleArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1.0, 1.0, 726.2936124331774, 1146.8820914);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.BOTH;
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.0, fixedStepHandler0, stepNormalizerMode0, stepNormalizerBounds0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 974.01361420882;
      doubleArray0[2] = (-2479.51622173062);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1146.8820914;
      doubleArray0[5] = 974.01361420882;
      stepNormalizer0.init(974.01361420882, doubleArray0, 1390.0679474475);
      highamHall54Integrator0.addEventHandler(eventHandler0, (-2479.51622173062), (-2479.51622173062), 177);
      highamHall54Integrator0.addStepHandler(stepNormalizer0);
      highamHall54Integrator0.clearEventHandlers();
      highamHall54Integrator0.addStepHandler((StepHandler) null);
      highamHall54Integrator0.getOrder();
      highamHall54Integrator0.setMaxEvaluations(177);
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(5, 0.0, 1.0, 0.0, Double.NaN);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      try { 
        adamsBashforthIntegrator0.integrate(expandableStatefulODE0, (-596.89851291363));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one column
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(258.231149379);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 258.231149379;
      doubleArray0[1] = 258.231149379;
      doubleArray0[2] = 1311.640443256908;
      threeEighthesIntegrator0.getEvaluations();
      doubleArray0[3] = 258.231149379;
      doubleArray0[4] = 258.231149379;
      doubleArray0[5] = 1311.640443256908;
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.BOTH;
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer0 = new StepNormalizer(258.231149379, fixedStepHandler0, stepNormalizerMode0, stepNormalizerBounds0);
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(258.231149379);
      midpointIntegrator0.addStepHandler(stepNormalizer0);
      midpointIntegrator0.clearStepHandlers();
      midpointIntegrator0.setMaxEvaluations((-2053));
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double double0 = 1537.484248434347;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1537.484248434347;
      doubleArray0[1] = 0.3;
      doubleArray0[2] = 1537.484248434347;
      doubleArray0[3] = 1537.484248434347;
      doubleArray0[4] = 1537.484248434347;
      double double1 = 0.0;
      doubleArray0[5] = 0.0;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1537.484248434347, 0.3, doubleArray0, doubleArray0);
      double double2 = (-308.24164853788);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer0 = new StepNormalizer((-308.24164853788), fixedStepHandler0);
      dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
      dormandPrince54Integrator0.getName();
      double double3 = 0.0;
      double double4 = (-1121.214);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, (-1121.214), doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 115.833199);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 6
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 17.228842071172913;
      doubleArray0[1] = 5.6843418860808015E-11;
      doubleArray0[2] = (-100.9246);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(5.6843418860808015E-11, 17.228842071172913, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.getEventHandlers();
      String string0 = graggBulirschStoerIntegrator0.getName();
      assertEquals("Gragg-Bulirsch-Stoer", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1025.234;
      doubleArray0[1] = 9.822892851699436;
      doubleArray0[2] = 9.822892851699436;
      doubleArray0[3] = 1025.234;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1025.234, 9.822892851699436, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.clearEventHandlers();
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.NEITHER;
      StepNormalizer stepNormalizer0 = new StepNormalizer(9.822892851699436, fixedStepHandler0, stepNormalizerMode0, stepNormalizerBounds0);
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      graggBulirschStoerIntegrator0.addEventHandler((EventHandler) null, 0.0, 1025.234, 305);
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(305, 1025.234, 9.822892851699436, doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double double0 = 1445.1;
      double[] doubleArray0 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1906.4672041, 1445.1, doubleArray0, doubleArray0);
      double double1 = 6944.2056680000005;
      BisectionSolver bisectionSolver0 = new BisectionSolver(6944.2056680000005, (-2513.0));
      dormandPrince54Integrator0.addEventHandler((EventHandler) null, (-1450.369), (-2513.0), 1886, (UnivariateSolver) bisectionSolver0);
      DormandPrince54Integrator dormandPrince54Integrator1 = new DormandPrince54Integrator(0.0, (-100.9246), (-1064.032), 1906.4672041);
      dormandPrince54Integrator1.setMinReduction(1287.7);
      dormandPrince54Integrator1.getOrder();
      dormandPrince54Integrator0.getEventHandlers();
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-2410.8873), (-2410.8873), doubleArray0, doubleArray0);
      highamHall54Integrator0.getOrder();
      FirstOrderDifferentialEquations firstOrderDifferentialEquations0 = null;
      // Undeclared exception!
      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) null, (-2136.82), doubleArray0, (-2410.8873), doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-2407.5059548326));
      midpointIntegrator0.clearStepHandlers();
      midpointIntegrator0.getStepHandlers();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 6.680679913078676E139;
      doubleArray0[1] = (-2407.5059548326);
      doubleArray0[2] = 2272.02260228614;
      doubleArray0[3] = 2272.02260228614;
      doubleArray0[4] = 2272.02260228614;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(6.680679913078676E139, 2272.02260228614, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setStabilityCheck(false, 175, 175, 2.2737367544323206E-10);
      double double0 = midpointIntegrator0.getCurrentStepStart();
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
      assertEquals(3.895979435412071E71, double1, 0.01);
      
      graggBulirschStoerIntegrator0.setOrderControl(175, 1.1368683772161603E-10, Double.NaN);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2.2737367544323206E-10, 1163.30337, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getOrder();
      assertEquals(5.143000708656359E-4, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-2944.60328));
      gillIntegrator0.getCurrentStepStart();
      gillIntegrator0.getStepHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double double0 = Double.NaN;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.NaN;
      gillIntegrator0.getMaxEvaluations();
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) Integer.MAX_VALUE;
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = 1243.5;
      doubleArray1[3] = (-2944.60328);
      doubleArray1[4] = (double) Integer.MAX_VALUE;
      doubleArray1[5] = (-1316.0);
      doubleArray1[6] = (-2944.60328);
      try { 
        gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, Double.NaN, doubleArray1, Double.NaN, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, (-1640.0), doubleArray0, doubleArray0);
      highamHall54Integrator0.getMaxEvaluations();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(Integer.MAX_VALUE, Integer.MAX_VALUE, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setOrderControl(0, Integer.MAX_VALUE, (-1080.42935731));
      assertEquals(2.147483647E9, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-266.2251354386);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, (-266.2251354386), (-266.2251354386), 0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      graggBulirschStoerIntegrator0.getStepHandlers();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      int int0 = Integer.MAX_VALUE;
      graggBulirschStoerIntegrator0.setMaxEvaluations(Integer.MAX_VALUE);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 0.0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(258.231149379);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 258.231149379;
      doubleArray0[1] = 258.231149379;
      doubleArray0[2] = 1311.640443256908;
      threeEighthesIntegrator0.getEvaluations();
      doubleArray0[3] = 258.231149379;
      doubleArray0[4] = 258.231149379;
      doubleArray0[5] = 1311.640443256908;
      doubleArray0[6] = 1311.640443256908;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(258.231149379, 1311.640443256908, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.setMaxEvaluations(5684);
      dormandPrince54Integrator0.getOrder();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      threeEighthesIntegrator0.getStepHandlers();
      int int0 = 3181;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(258.231149379);
      threeEighthesIntegrator0.addEventHandler(eventHandler0, (double) 5, (-1060.09751222), 3181, (UnivariateSolver) illinoisSolver0);
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(112, 1311.640443256908, 2368.399164, doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, 1.0, 1.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1000.272588);
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 0.001;
      doubleArray0[7] = 0.0;
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 0.0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(505.1);
      gillIntegrator0.getStepHandlers();
      gillIntegrator0.getEvaluations();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-326.5494);
      doubleArray0[2] = 505.1;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 505.1;
      doubleArray0[5] = 505.1;
      gillIntegrator0.clearEventHandlers();
      doubleArray0[6] = (double) 0;
      // Undeclared exception!
      try { 
        gillIntegrator0.computeDerivatives(0.0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double double0 = 2.5;
      double double1 = 221.8108781;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-578.71364), 2.5, 221.8108781, 2.5);
      dormandPrince54Integrator0.getEvaluations();
      dormandPrince54Integrator0.getMaxEvaluations();
      int int0 = 218;
      double double2 = 2286.0795722704;
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(218, 2.5, 0.0, 2286.0795722704, 2.5);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-4408.3119));
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.BOTH;
      StepNormalizer stepNormalizer0 = new StepNormalizer(686.61974, fixedStepHandler0, stepNormalizerMode0, stepNormalizerBounds0);
      midpointIntegrator0.addStepHandler(stepNormalizer0);
      midpointIntegrator0.clearStepHandlers();
      midpointIntegrator0.setMaxEvaluations(0);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-100.9246), 0.65, 1906.4672041, 1906.4672041);
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      graggBulirschStoerIntegrator0.addStepHandler(dummyStepHandler0);
      double double0 = graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
      assertEquals(8.099443808064848, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1.0, 1.0, 726.2936124331774, 1146.8820914);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.LAST;
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.0, fixedStepHandler0, stepNormalizerMode0, stepNormalizerBounds0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 974.01361420882;
      doubleArray0[2] = (-2479.51622173062);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1146.8820914;
      doubleArray0[5] = 974.01361420882;
      stepNormalizer0.init(974.01361420882, doubleArray0, 1390.0679474475);
      highamHall54Integrator0.addEventHandler(eventHandler0, (-2479.51622173062), (-2479.51622173062), 177);
      highamHall54Integrator0.addStepHandler(stepNormalizer0);
      highamHall54Integrator0.clearEventHandlers();
      highamHall54Integrator0.addStepHandler((StepHandler) null);
      highamHall54Integrator0.getOrder();
      highamHall54Integrator0.setMaxEvaluations(177);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-0.4831900357003607);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = 3983.26997;
      doubleArray0[6] = (-223.181);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1.0), (-1.0), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setMaxEvaluations(335);
      graggBulirschStoerIntegrator0.setStepSizeControl((double) 0, 1000.0, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.getEventHandlers();
      graggBulirschStoerIntegrator0.setStabilityCheck(true, (-1989), 0, 204.86659);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1727.1272149, 0.0, (-0.4831900357003607), (-223.181));
      highamHall54Integrator0.getOrder();
      // Undeclared exception!
      try { 
        highamHall54Integrator0.computeDerivatives(204.86659, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double double0 = (-1.0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = (-1.0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1.0), (-1.0), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.clearEventHandlers();
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 0);
      graggBulirschStoerIntegrator0.clearStepHandlers();
      double double1 = 0.0;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1.0), 27.59209969944671, 1340.0, 0.0);
      // Undeclared exception!
      try { 
        dormandPrince853Integrator0.setStepSizeControl((double) 0, (double) 0, doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0.0);
      midpointIntegrator0.getCurrentSignedStepsize();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 4119.44139915;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, Double.NaN, doubleArray0, doubleArray0);
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(Double.NaN, 999.9);
      graggBulirschStoerIntegrator0.addEventHandler((EventHandler) null, 4119.44139915, 1970.9267322345706, 951, (UnivariateSolver) regulaFalsiSolver0);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.225;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.225;
      doubleArray0[3] = 0.225;
      doubleArray0[4] = 0.225;
      doubleArray0[5] = 0.225;
      doubleArray0[6] = 0.225;
      doubleArray0[7] = 0.225;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.225;
      doubleArray1[1] = 0.225;
      doubleArray1[2] = 0.225;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.225;
      doubleArray1[6] = 0.0;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.225, 0.225, doubleArray0, doubleArray1);
      dormandPrince853Integrator0.clearStepHandlers();
      dormandPrince853Integrator0.clearEventHandlers();
      dormandPrince853Integrator0.getStepHandlers();
      dormandPrince853Integrator0.clearStepHandlers();
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (-921.871835813);
      doubleArray2[1] = 0.225;
      doubleArray2[2] = 0.225;
      doubleArray2[3] = (-921.871835813);
      doubleArray2[4] = 0.0;
      doubleArray2[5] = 0.225;
      doubleArray2[6] = (-921.871835813);
      doubleArray2[7] = (-921.871835813);
      doubleArray2[8] = 0.225;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-921.871835813), 0.225, doubleArray2, doubleArray1);
      graggBulirschStoerIntegrator0.setInterpolationControl(false, 129);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, 0.0, 0.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      MullerSolver mullerSolver0 = new MullerSolver((-595.71033141));
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 0.3076923076923077, (-595.71033141), 186, (UnivariateSolver) mullerSolver0);
      Collection<StepHandler> collection0 = graggBulirschStoerIntegrator0.getStepHandlers();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 273.6083417967766;
      double double2 = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 273.6083417967766, 273.6083417967766, 0.0);
      graggBulirschStoerIntegrator0.setInterpolationControl(true, (-570));
      boolean boolean0 = true;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 273.6083417967766;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.initializeStep(true, (-570), doubleArray0, 0.0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
