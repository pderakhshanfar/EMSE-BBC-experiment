/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 09:57:35 GMT 2020
 */

package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import org.apache.commons.math3.analysis.solvers.BisectionSolver;
import org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver;
import org.apache.commons.math3.analysis.solvers.BrentSolver;
import org.apache.commons.math3.analysis.solvers.MullerSolver;
import org.apache.commons.math3.analysis.solvers.PegasusSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator;
import org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator;
import org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.GillIntegrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.nonstiff.MidpointIntegrator;
import org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator;
import org.apache.commons.math3.ode.sampling.DummyStepHandler;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator;
import org.apache.commons.math3.ode.sampling.StepHandler;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.apache.commons.math3.ode.sampling.StepNormalizerBounds;
import org.apache.commons.math3.ode.sampling.StepNormalizerMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegrator_ESTest extends AbstractIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double double0 = 1893.51689;
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(1893.51689);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(2146936274, 0.0, 4.94E-321, 2770);
      bracketingNthOrderBrentSolver0.getEvaluations();
      threeEighthesIntegrator0.addEventHandler(eventHandler0, (-1830.794897517673), 19.2312166, 2146936274, (UnivariateSolver) bracketingNthOrderBrentSolver0);
      // Undeclared exception!
      try { 
        threeEighthesIntegrator0.integrate((ExpandableStatefulODE) null, 1893.51689);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-3821.661685509167), (-3821.661685509167), (-3821.661685509167), (-3821.661685509167));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(76).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      double[] doubleArray0 = new double[0];
      dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter1, (-3402.360322644856), doubleArray0, (-1160.5), doubleArray0);
      PegasusSolver pegasusSolver0 = new PegasusSolver(0.0, (-2376.6102487632));
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter1);
      dormandPrince54Integrator0.getOrder();
      dormandPrince54Integrator0.computeDerivatives(1815.0, doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(2, (-3281.43902585), (-3281.43902585), 2.8421709430404007E-11);
      double[] doubleArray0 = new double[0];
      double double0 = 1047.5811158410547;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 2;
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = 165.34911487035004;
      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter1, (-43.48988418106996), doubleArray0, 1047.5811158410547, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-3821.59597), (-3821.59597), (-3821.59597), (-3821.59597));
      double double0 = (-2376.6102487632);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(76).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      dormandPrince54Integrator0.setMaxEvaluations(0);
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      double[] doubleArray0 = new double[0];
      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter1, (-3402.360322644856), doubleArray0, (-1160.5), doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-3821.59597), (-3821.59597), (-3821.59597), (-3821.59597));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-259.66009), (-164), 5.6843418860808015E-11, 2241.860322644856);
      graggBulirschStoerIntegrator0.setInterpolationControl(true, (-164));
      dormandPrince54Integrator0.getName();
      graggBulirschStoerIntegrator0.setOrderControl((-164), 5.6843418860808015E-11, (-1283.14549107));
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE1, 6.206776940880773E-9);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double double0 = 2.8421709430404007E-11;
      double double1 = 0.0;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-3821.59597), 2.8421709430404007E-11, 2.8421709430404007E-11, 0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double double2 = 1941.111311927908;
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1941.111311927908, doubleArray0, (-3821.59597), doubleArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(2, 2.0200552940368652, 734.6180885612642, 165.20045171727028, 2.8421709430404007E-11);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      adamsMoultonIntegrator0.getStepHandlers();
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizer stepNormalizer0 = new StepNormalizer(734.6180885612642, fixedStepHandler0, stepNormalizerMode0);
      adamsMoultonIntegrator0.addStepHandler(stepNormalizer0);
      BrentSolver brentSolver0 = new BrentSolver(2.8421709430404007E-11);
      adamsMoultonIntegrator0.addEventHandler(eventHandler0, 2.8421709430404007E-11, 0.0, (-2398), (UnivariateSolver) brentSolver0);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      adamsMoultonIntegrator0.integrate(expandableStatefulODE0, 0.0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-3821.59597), (-3821.59597), (-3821.59597), (-3821.59597));
      double double0 = (-3723.107146413);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-1.0), (-1.0)).when(eventHandler0).g(anyDouble() , any(double[].class));
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      dormandPrince54Integrator0.addEventHandler(eventHandler0, (-3821.59597), 1014.3539080163428, (-1), (UnivariateSolver) pegasusSolver0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 4.547473508864641E-10, doubleArray0, 441.86389872, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(613).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter1);
      // Undeclared exception!
      dormandPrince54Integrator0.integrate(expandableStatefulODE0, (double) (-1));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-3821.59597), (-3821.59597), (-3821.59597), (-3821.59597));
      double double0 = (-3723.107146413);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      int int0 = (-1);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, (-2376.6102487632), doubleArray0);
      PegasusSolver pegasusSolver0 = new PegasusSolver(2.8421709430404007E-11, (-3723.107146413));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = null;
      try {
        firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.FirstOrderConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-3821.59597), (-3821.59597), (-3821.59597), (-3821.59597));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(5, (-3821.59597), 5, 1.3480763914637323E214, 0.0);
      // Undeclared exception!
      try { 
        adamsMoultonIntegrator0.integrate(expandableStatefulODE0, 2.8421709430404007E-11);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one column
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 109.136, (-1114.015), (-2647.02228945441));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 2598.6, 0.0, (-3619), (UnivariateSolver) null);
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler1, 1.0, 109.136, 0, (UnivariateSolver) null);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-3619);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator1 = new GraggBulirschStoerIntegrator((-3619), 2.8421709430404007E-11, doubleArray0, doubleArray0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator2 = new GraggBulirschStoerIntegrator(2598.6, (-474.5146675941669), 0.0, 0.0);
      graggBulirschStoerIntegrator2.setMaxEvaluations(0);
      graggBulirschStoerIntegrator1.getName();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 1.3794148633283659E-8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 109.136, (-1114.015), (-2647.02228945441));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.setStabilityCheck(false, 4133, 240, 0.0);
      UnivariateSolver univariateSolver0 = null;
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 2598.6, 0.0, (-3619), (UnivariateSolver) null);
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double0 = 1.0;
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler1, 1.0, 109.136, 0, (UnivariateSolver) null);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-393.9359324429129), (-3619), 204.732238, (-1114.015));
      EventHandler eventHandler2 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(1.991444798915497E-192, 0.0, 0.0, 0.0, 0.0).when(eventHandler2).g(anyDouble() , any(double[].class));
      dormandPrince54Integrator0.addEventHandler(eventHandler2, (-3723.107146413), (-3723.107146413), 0, (UnivariateSolver) null);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(3).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      graggBulirschStoerIntegrator0.setStabilityCheck(true, 4131, (-2273), 2.8421709430404007E-11);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      dormandPrince54Integrator0.integrate(expandableStatefulODE0, (-1114.015));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 109.136, (-1114.015), (-2647.02228945441));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double0 = 0.0;
      int int0 = (-3619);
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 2598.6, 0.0, (-3619), (UnivariateSolver) null);
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      int int1 = 0;
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler1, 1.0, 109.136, 0, (UnivariateSolver) null);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-393.9359324429129), (-3619), 204.732238, (-1114.015));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      dormandPrince54Integrator0.setSafety(0.0);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      dormandPrince54Integrator0.integrate(expandableStatefulODE0, (-1114.015));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 109.136, (-1114.015), (-2647.02228945441));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.setStabilityCheck(false, 4133, 240, 0.0);
      UnivariateSolver univariateSolver0 = null;
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 2598.6, 0.0, (-3619), (UnivariateSolver) null);
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double0 = 1.0;
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler1, 1.0, 109.136, 0, (UnivariateSolver) null);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-393.9359324429129), (-3619), 204.732238, (-1114.015));
      EventHandler eventHandler2 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(eventHandler2).g(anyDouble() , any(double[].class));
      dormandPrince54Integrator0.addEventHandler(eventHandler2, (-3723.107146413), (-3723.107146413), 0, (UnivariateSolver) null);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      try { 
        dormandPrince54Integrator0.integrate(expandableStatefulODE0, (-1114.015));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      int int0 = 2;
      double double0 = 2.0200552940368652;
      double double1 = 2.8421709430404007E-11;
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(2, 2.0200552940368652, 734.6180885612642, 165.20045171727028, 2.8421709430404007E-11);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double double2 = 0.0;
      // Undeclared exception!
      adamsMoultonIntegrator0.integrate(expandableStatefulODE0, 0.0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double double0 = 134.063729335079;
      double[] doubleArray0 = new double[0];
      try { 
        midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 134.063729335079, doubleArray0, 134.063729335079, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 4
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double double0 = 2.0200552940368652;
      double double1 = 2.8421709430404007E-11;
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(2, 2.0200552940368652, 734.6180885612642, 165.20045171727028, 2.8421709430404007E-11);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double double2 = 0.0;
      // Undeclared exception!
      try { 
        adamsMoultonIntegrator0.integrate(expandableStatefulODE0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one column
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double double0 = 2.451642;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2.451642;
      doubleArray0[1] = (-794.8);
      doubleArray0[2] = 2.451642;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(2.451642, 2.451642, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      dormandPrince54Integrator0.setStepSizeControl(2.451642, 2.451642, doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[3];
      dormandPrince54Integrator0.setInitialStepSize(1054.245);
      doubleArray1[0] = 2.451642;
      doubleArray1[1] = (-1115.8);
      doubleArray1[2] = 0.0;
      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-794.8), doubleArray0, (-0.19316434850839564), doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-3834.12613656);
      doubleArray0[1] = (-3834.12613656);
      doubleArray0[2] = (-3834.12613656);
      doubleArray0[3] = (-3834.12613656);
      doubleArray0[4] = (-3834.12613656);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-3834.12613656), (-3834.12613656), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setMaxEvaluations(3741);
      graggBulirschStoerIntegrator0.getName();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 5
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(Double.NaN);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-2857.0854222479816);
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (-722.8996);
      doubleArray0[5] = (-722.8996);
      doubleArray0[6] = (-2645.6);
      doubleArray0[7] = Double.NaN;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-722.8996), (-722.8996), doubleArray0, doubleArray0);
      highamHall54Integrator0.getOrder();
      threeEighthesIntegrator0.getName();
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 103.4147;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 103.4147;
      doubleArray0[3] = (-25.69393346270375);
      doubleArray0[4] = (-25.69393346270375);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(103.4147, (-25.69393346270375), doubleArray0, doubleArray0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.0, fixedStepHandler0, stepNormalizerMode0);
      dormandPrince853Integrator0.addStepHandler(stepNormalizer0);
      int int0 = (-2596);
      dormandPrince853Integrator0.setMaxEvaluations((-2596));
      dormandPrince853Integrator0.getEvaluations();
      dormandPrince853Integrator0.clearStepHandlers();
      dormandPrince853Integrator0.clearEventHandlers();
      dormandPrince853Integrator0.clearStepHandlers();
      dormandPrince853Integrator0.getEvaluations();
      dormandPrince853Integrator0.getStepHandlers();
      FirstOrderConverter firstOrderConverter0 = null;
      try {
        firstOrderConverter0 = new FirstOrderConverter((SecondOrderDifferentialEquations) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.FirstOrderConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double double0 = 134.063729335079;
      double[] doubleArray0 = new double[0];
      try { 
        midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 134.063729335079, doubleArray0, 134.063729335079, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-5541.48);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-5541.48);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, (-5541.48), doubleArray0, doubleArray0);
      Collection<StepHandler> collection0 = highamHall54Integrator0.getStepHandlers();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-2155.5), (-2155.5), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setStepSizeControl((-2155.5), (-1117.5409939), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setStabilityCheck(false, 197, (-1582), (-2155.5));
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-2155.5), (-2155.5), (-2155.5), (-1582));
      dormandPrince853Integrator0.getOrder();
      dormandPrince853Integrator0.getStepHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      graggBulirschStoerIntegrator0.addStepHandler((StepHandler) null);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.getTotalDimension();
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 7.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-15.0));
      double double0 = 0.0;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-15.0), 0.0, 0.0, (-1050.4));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      BisectionSolver bisectionSolver0 = new BisectionSolver();
      dormandPrince853Integrator0.addEventHandler(eventHandler0, (-15.0), (-15.0), (-1852), (UnivariateSolver) bisectionSolver0);
      boolean boolean0 = false;
      int int0 = (-872);
      double double1 = (-1791.0780678072);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.FIRST;
      StepNormalizer stepNormalizer0 = new StepNormalizer((-1791.0780678072), fixedStepHandler0, stepNormalizerBounds0);
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2878.10835;
      stepNormalizer0.init(0.0, doubleArray0, (-1852));
      NordsieckStepInterpolator nordsieckStepInterpolator1 = new NordsieckStepInterpolator(nordsieckStepInterpolator0);
      // Undeclared exception!
      try { 
        stepNormalizer0.handleStep(nordsieckStepInterpolator1, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double double0 = 165.20045171727028;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(165.20045171727028, 165.20045171727028, 0.9777777777777777, 0.9777777777777777);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 165.20045171727028;
      doubleArray0[1] = 165.20045171727028;
      doubleArray0[2] = 0.9777777777777777;
      doubleArray0[3] = 0.9777777777777777;
      doubleArray0[4] = 0.9777777777777777;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.9777777777777777, 165.20045171727028, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.clearEventHandlers();
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 1000.0;
      doubleArray1[1] = 1000.0;
      doubleArray1[2] = 1008.26856691;
      doubleArray1[3] = 1000.0;
      doubleArray1[4] = 0.9777777777777777;
      doubleArray1[5] = 1000.0;
      doubleArray1[6] = 165.20045171727028;
      doubleArray1[7] = 0.9777777777777777;
      doubleArray1[8] = 1000.0;
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) null, 1000.0, doubleArray0, 0.9777777777777777, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, 0.0, 0.0);
      graggBulirschStoerIntegrator0.setMaxEvaluations(5);
      graggBulirschStoerIntegrator0.clearEventHandlers();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (double) 5, 0.0, 1258);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      FirstOrderDifferentialEquations firstOrderDifferentialEquations0 = null;
      graggBulirschStoerIntegrator0.setMaxEvaluations(62);
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) null, 3619.35575, doubleArray0, 0.0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2071.0), (-2071.0), (-2071.0), 258.75177834009);
      dormandPrince54Integrator0.getEvaluations();
      dormandPrince54Integrator0.getCurrentSignedStepsize();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-2071.0);
      doubleArray0[1] = (-1198.59247);
      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1336.83363, doubleArray0, (-1198.59247), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double double0 = 0.0;
      GillIntegrator gillIntegrator0 = new GillIntegrator(0.0);
      gillIntegrator0.getEvaluations();
      int int0 = 613;
      gillIntegrator0.setMaxEvaluations(613);
      gillIntegrator0.getCurrentStepStart();
      int int1 = 1434;
      double[] doubleArray0 = new double[0];
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(1434, 0.0, 0.0, doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(165.20045171727028, 165.20045171727028, 0.9777777777777777, 0.9777777777777777);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-713.731095861), (-713.731095861), 939.1629492, 939.1629492);
      dormandPrince853Integrator0.getEventHandlers();
      graggBulirschStoerIntegrator0.setStabilityCheck(false, 828, 828, 165.20045171727028);
      int int0 = dormandPrince853Integrator0.getEvaluations();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-3821.59597), (-3821.59597), (-3821.59597), (-3821.59597));
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      DummyStepHandler.getInstance();
      dormandPrince54Integrator0.addStepHandler(dummyStepHandler0);
      dormandPrince54Integrator0.getOrder();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2.8421709430404007E-11, 2.677136737066629E238, 5, (-934.5985931493));
      graggBulirschStoerIntegrator0.setControlFactors((-934.5985931493), 2.8421709430404007E-11, Double.NaN, 5);
      assertEquals(8.722889569768015E113, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.04471061572777259;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.04471061572777259, 1.0, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setStepSizeControl(0.0, 1.0, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setControlFactors(1.0, 1.0, 1000.0, 1.0);
      graggBulirschStoerIntegrator0.setOrderControl(7, 1325.7509278570415, 1541.097413);
      double double0 = graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
      assertEquals(0.21144884896298818, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(679.0, 0.0, 0.0, 3302.92);
      dormandPrince54Integrator0.getCurrentSignedStepsize();
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizer stepNormalizer0 = new StepNormalizer((-11.595793324188385), fixedStepHandler0, stepNormalizerMode0);
      double[] doubleArray0 = null;
      stepNormalizer0.init((-563.12), (double[]) null, 0.0);
      dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
      // Undeclared exception!
      try { 
        dormandPrince54Integrator0.computeDerivatives((-563.12), (double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2433.802328, 2433.802328, 2433.802328, 2039.939990751009);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 2039.939990751009, 0.0, 290);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      graggBulirschStoerIntegrator0.setMaxEvaluations(5115);
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler1).toString();
      PegasusSolver pegasusSolver0 = new PegasusSolver(290, 0.04556282049746119);
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler1, (-2285.8199), 0.0, 5115, (UnivariateSolver) pegasusSolver0);
      doubleArray0[1] = 2433.802328;
      doubleArray0[2] = 2039.939990751009;
      graggBulirschStoerIntegrator0.setStepSizeControl((-1082.95293146), 0.0, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.getEventHandlers();
      graggBulirschStoerIntegrator0.setOrderControl((-2254), 0.0, (-2254));
      double double0 = graggBulirschStoerIntegrator0.getCurrentStepStart();
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double double0 = 0.0;
      double double1 = Double.NaN;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, Double.NaN, 2385.72116, (-1642.57));
      dormandPrince853Integrator0.getMaxEvaluations();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      // Undeclared exception!
      try { 
        dormandPrince853Integrator0.initializeStep(true, 0, doubleArray0, 0.0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-3821.59597), (-3821.59597), (-3821.59597), (-3821.59597));
      int int0 = dormandPrince54Integrator0.getMaxEvaluations();
      int int1 = dormandPrince54Integrator0.getOrder();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-3160.1010184), 8.642254225732676E-9, doubleArray0, doubleArray0);
      MullerSolver mullerSolver0 = new MullerSolver(Double.NaN);
      graggBulirschStoerIntegrator0.addEventHandler((EventHandler) null, 348.0, (-3160.1010184), 382, (UnivariateSolver) mullerSolver0);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 0.0, 0.0, 0.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      dormandPrince54Integrator0.addEventHandler(eventHandler0, 0.0, 0.0, 56);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double double0 = (-1903.3116192118516);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1903.3116192118516), (-1903.3116192118516), (-1245.17275), 0.0);
      highamHall54Integrator0.setMinReduction(0.0);
      highamHall54Integrator0.setSafety(0.0);
      highamHall54Integrator0.getEventHandlers();
      double double1 = 1090.2268667357955;
      double double2 = 0.0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1090.2268667357955;
      doubleArray0[6] = 0.0;
      doubleArray0[2] = (-1903.3116192118516);
      doubleArray0[3] = 0.0;
      // Undeclared exception!
      try { 
        highamHall54Integrator0.integrate((ExpandableStatefulODE) null, 0.78125);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0.0);
      midpointIntegrator0.setMaxEvaluations(4133);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, (-195.2993291981), 4133, 0.23015019297599792);
      double[] doubleArray0 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator1 = new DormandPrince54Integrator((-3821.59597), 4133, doubleArray0, doubleArray0);
      dormandPrince54Integrator1.getMaxEvaluations();
      dormandPrince54Integrator0.getOrder();
      midpointIntegrator0.clearStepHandlers();
      Collection<EventHandler> collection0 = dormandPrince54Integrator1.getEventHandlers();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-16.3311));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      classicalRungeKuttaIntegrator0.getEventHandlers();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double[] doubleArray0 = new double[9];
      double double0 = 241.4;
      doubleArray0[0] = 241.4;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-16.3311);
      doubleArray0[3] = (-16.3311);
      classicalRungeKuttaIntegrator0.clearStepHandlers();
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (-16.3311);
      doubleArray0[6] = (-16.3311);
      doubleArray0[7] = (-16.3311);
      doubleArray0[8] = (double) 0;
      // Undeclared exception!
      try { 
        expandableStatefulODE0.setSecondaryState(0, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-729.96755451432);
      doubleArray0[1] = (-729.96755451432);
      doubleArray0[2] = (-729.96755451432);
      doubleArray0[3] = (-630.081);
      doubleArray0[4] = (-729.96755451432);
      doubleArray0[5] = (-729.96755451432);
      doubleArray0[6] = (-729.96755451432);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-729.96755451432), (-729.96755451432), doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        highamHall54Integrator0.integrate(expandableStatefulODE0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 7
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(Double.NaN);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = Double.NaN;
      // Undeclared exception!
      try { 
        threeEighthesIntegrator0.computeDerivatives(0.0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double double0 = 1398.111497967506;
      double double1 = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1398.111497967506, 0.0, Double.NaN, 0.0);
      boolean boolean0 = false;
      int int0 = (-1013);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1398.111497967506;
      doubleArray0[1] = (double) (-1013);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = (-0.10416666666666667);
      doubleArray0[5] = 0.0;
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.initializeStep(true, (-1013), doubleArray0, 20.154067550477894, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 575.7673;
      doubleArray0[1] = 575.7673;
      doubleArray0[2] = (-1551.9468935936);
      doubleArray0[3] = (-1551.9468935936);
      doubleArray0[4] = 575.7673;
      doubleArray0[5] = (-1551.9468935936);
      doubleArray0[6] = 575.7673;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(575.7673, (-1551.9468935936), doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        dormandPrince54Integrator0.computeDerivatives(4305.227, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-2223.34489285955);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2223.34489285955);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, (-2223.34489285955), doubleArray0, doubleArray0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.0, fixedStepHandler0, stepNormalizerMode0);
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      NordsieckStepInterpolator nordsieckStepInterpolator1 = new NordsieckStepInterpolator(nordsieckStepInterpolator0);
      nordsieckStepInterpolator1.copy();
      // Undeclared exception!
      try { 
        nordsieckStepInterpolator1.getInterpolatedStateVariation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
