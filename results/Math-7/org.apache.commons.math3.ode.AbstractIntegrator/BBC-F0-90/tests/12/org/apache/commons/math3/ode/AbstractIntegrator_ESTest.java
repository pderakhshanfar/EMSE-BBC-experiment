/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 22:46:18 GMT 2021
 */

package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.solvers.BisectionSolver;
import org.apache.commons.math3.analysis.solvers.BrentSolver;
import org.apache.commons.math3.analysis.solvers.RiddersSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator;
import org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator;
import org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.EulerIntegrator;
import org.apache.commons.math3.ode.nonstiff.GillIntegrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.nonstiff.MidpointIntegrator;
import org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator;
import org.apache.commons.math3.ode.sampling.DummyStepHandler;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.apache.commons.math3.ode.sampling.StepNormalizerBounds;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegrator_ESTest extends AbstractIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(964.5, 964.5, 0.0, 1000.0);
      int int0 = 0;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      try { 
        highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 964.5, doubleArray0, 964.5, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 5;
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(5, 5, 5, doubleArray0, doubleArray0);
      adamsBashforthIntegrator0.getCurrentSignedStepsize();
      RiddersSolver riddersSolver0 = new RiddersSolver(0.0, 5.0);
      double double0 = 785.4789776553561;
      double double1 = (-1.0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(5, 0.0, 785.4789776553561, (-1.0));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      int int0 = 5;
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 0.0, 297.8779198036, 5, (UnivariateSolver) riddersSolver0);
      graggBulirschStoerIntegrator0.setMaxEvaluations((-1687));
      AdamsBashforthIntegrator adamsBashforthIntegrator1 = new AdamsBashforthIntegrator(5, 2592.73214, 1565.0, 0.0, (-1.0));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(secondOrderDifferentialEquations0).getDimension();
      graggBulirschStoerIntegrator0.addEventHandler((EventHandler) null, 3548.2955, 0.5162794589996338, 5);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(2592.73214, (-1.0), 718.90044447, 1565.0, 0.0).when(eventHandler1).g(anyDouble() , any(double[].class));
      adamsBashforthIntegrator1.addEventHandler(eventHandler1, 4291.0576129697, 38.899934972, 1328, (UnivariateSolver) riddersSolver0);
      // Undeclared exception!
      adamsBashforthIntegrator1.integrate(expandableStatefulODE0, 0.0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2195.653056;
      doubleArray0[1] = 3852.115931;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2195.653056, 3852.115931, doubleArray0, doubleArray0);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1935.796), 3852.115931, 158.00753, 3852.115931);
      highamHall54Integrator0.setMaxEvaluations(8);
      highamHall54Integrator0.setMaxEvaluations(0);
      highamHall54Integrator0.setInitialStepSize((-1770.72689));
      double double0 = (-958.29316418);
      double double1 = 1.1155805587768555;
      try { 
        highamHall54Integrator0.computeDerivatives((-958.29316418), doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(3426.4473985526333);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(2.546119213104248, 1000.0, 2.546119213104248, 1110.1590480276);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      EulerIntegrator eulerIntegrator1 = new EulerIntegrator((-112.5430167927));
      double[] doubleArray0 = new double[0];
      eulerIntegrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter1, (-298.2668178), doubleArray0, (-9.485602512220194E-8), doubleArray0);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 633.5193659919868;
      doubleArray1[1] = (-112.5430167927);
      doubleArray1[2] = (-447.919929);
      doubleArray1[3] = 2.546119213104248;
      doubleArray1[4] = (-9.485602512220194E-8);
      HighamHall54Integrator highamHall54Integrator1 = new HighamHall54Integrator(5232, (-447.919929), doubleArray0, doubleArray1);
      highamHall54Integrator1.getStepHandlers();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 5;
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(5, 5, 5, doubleArray0, doubleArray0);
      RiddersSolver riddersSolver0 = new RiddersSolver(0.0, 5.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      AdamsBashforthIntegrator adamsBashforthIntegrator1 = new AdamsBashforthIntegrator(5, 2592.73214, 1565.0, 0.0, 0.5489565134048462);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE1.getTotalDimension();
      // Undeclared exception!
      adamsBashforthIntegrator1.integrate(expandableStatefulODE1, (-1.2680260585213095));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(0.0);
      classicalRungeKuttaIntegrator0.getName();
      classicalRungeKuttaIntegrator0.getMaxEvaluations();
      classicalRungeKuttaIntegrator0.getEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(684).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1000.0;
      doubleArray0[1] = 2257.916093905609;
      doubleArray0[2] = (double) Integer.MAX_VALUE;
      ExpandableStatefulODE expandableStatefulODE2 = new ExpandableStatefulODE(firstOrderConverter1);
      expandableStatefulODE1.getTotalDimension();
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(5, 1000.0, (-2337.235), doubleArray0, doubleArray0);
      try { 
        adamsBashforthIntegrator0.integrate(expandableStatefulODE0, (-2337.235));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1,368 != 3
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, 0.0, 0.0);
      graggBulirschStoerIntegrator0.getStepHandlers();
      graggBulirschStoerIntegrator0.setStepSizeControl(1.1368683772161603E-10, (-190.1331), 0.0, 964.5);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-0.9371424300859873), Double.NaN, Double.NaN, 928.174563621143);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(2044.883056639);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 928.174563621143;
      doubleArray1[1] = (-0.9371424300859873);
      doubleArray1[2] = 964.5;
      doubleArray1[3] = 2323.21420746598;
      doubleArray1[4] = 964.5;
      doubleArray1[5] = 1000.0;
      doubleArray1[6] = 633.5193659919868;
      doubleArray1[7] = 1000.0;
      try { 
        eulerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter1, 2323.21420746598, doubleArray0, 0.0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 5;
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(5, 5, 5, doubleArray0, doubleArray0);
      adamsBashforthIntegrator0.getCurrentSignedStepsize();
      RiddersSolver riddersSolver0 = new RiddersSolver(0.0, 5.0);
      double double0 = (-1.2680260585213095);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(5, 0.0, 785.4789776553561, (-1.2680260585213095));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      graggBulirschStoerIntegrator0.clearStepHandlers();
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 0.0, 297.8779198036, 5, (UnivariateSolver) riddersSolver0);
      graggBulirschStoerIntegrator0.setMaxEvaluations((-1687));
      AdamsBashforthIntegrator adamsBashforthIntegrator1 = new AdamsBashforthIntegrator(5, 2592.73214, 1565.0, 0.0, 0.5489565134048462);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (-2337.235));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-20.667077539839692));
      classicalRungeKuttaIntegrator0.getName();
      classicalRungeKuttaIntegrator0.getMaxEvaluations();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-3118.0), (-4234.79309), 686.529423749635, 1.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      BrentSolver brentSolver0 = new BrentSolver();
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 297.8779198036, (-1.0), Integer.MAX_VALUE, (UnivariateSolver) brentSolver0);
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(4.547473508864641E-10);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3.216046320616945E29;
      doubleArray0[1] = 686.529423749635;
      doubleArray0[2] = 4.547473508864641E-10;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 1777.3580716326198;
      doubleArray1[1] = 3.216046320616945E29;
      doubleArray1[2] = (-2323.21420746598);
      doubleArray1[3] = (double) 5;
      doubleArray1[4] = (double) Integer.MAX_VALUE;
      doubleArray1[5] = 686.529423749635;
      doubleArray1[6] = (-20.667077539839692);
      try { 
        eulerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) Integer.MAX_VALUE, doubleArray0, 4.547473508864641E-10, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, 0.0, 0.0);
      graggBulirschStoerIntegrator0.getStepHandlers();
      graggBulirschStoerIntegrator0.setStepSizeControl(0.0, 964.5, Double.NaN, Double.NaN);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(633.5193659919868, 633.5193659919868, (-112.5430167927), 1000.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(2378).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator((-0.9371424300859873));
      eulerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter1, (-2323.21420746598), doubleArray0, 0.0, doubleArray0);
      highamHall54Integrator0.getStepHandlers();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 5;
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(5, 5, 5, doubleArray0, doubleArray0);
      adamsBashforthIntegrator0.getCurrentSignedStepsize();
      RiddersSolver riddersSolver0 = new RiddersSolver(0.0, 5.0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1322.0564454249), 5.0, 0.0, 5.0);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(2562.24423624, 0.0, doubleArray0, doubleArray0);
      highamHall54Integrator0.setMaxEvaluations((-947));
      highamHall54Integrator0.setMinReduction((-1075.0));
      highamHall54Integrator0.getCurrentSignedStepsize();
      HighamHall54Integrator highamHall54Integrator1 = new HighamHall54Integrator((-1359.130726107), 0.0, doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      highamHall54Integrator1.addEventHandler(eventHandler0, (double) 713, 293.056883615513, 5);
      highamHall54Integrator0.getEventHandlers();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator1 = new GraggBulirschStoerIntegrator(1.1368683772161603E-10, 1005.813230149, (-1284.31609411576), 1005.813230149);
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      DummyStepHandler.getInstance();
      graggBulirschStoerIntegrator0.addStepHandler(dummyStepHandler0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 0.0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = 5;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 5;
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(5, 5, 5, doubleArray0, doubleArray0);
      adamsBashforthIntegrator0.getCurrentSignedStepsize();
      RiddersSolver riddersSolver0 = new RiddersSolver(0.0, 5.0);
      riddersSolver0.getEvaluations();
      double double0 = 785.4789776553561;
      double double1 = (-1.0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(5, 0.0, 785.4789776553561, (-1.0));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 0.0, 297.8779198036, 5, (UnivariateSolver) riddersSolver0);
      int int1 = (-1687);
      graggBulirschStoerIntegrator0.setMaxEvaluations((-1687));
      AdamsBashforthIntegrator adamsBashforthIntegrator1 = new AdamsBashforthIntegrator(5, 2592.73214, 1565.0, 0.0, 0.5489565134048462);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1116).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double double2 = 1595.879;
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 1595.879);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double double0 = (-1.0);
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-1.0));
      threeEighthesIntegrator0.getMaxEvaluations();
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      threeEighthesIntegrator0.addStepHandler(dummyStepHandler0);
      double double1 = Double.NaN;
      GillIntegrator gillIntegrator0 = new GillIntegrator(Double.NaN);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double double2 = (-561.4726);
      double[] doubleArray0 = new double[0];
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-561.4726), doubleArray0, Double.NaN, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, 0.0, 0.0);
      graggBulirschStoerIntegrator0.setStepSizeControl(0.0, 964.5, Double.NaN, Double.NaN);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(633.5193659919868, 633.5193659919868, (-112.5430167927), 1000.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 633.5193659919868, doubleArray0, 964.5, doubleArray0);
      highamHall54Integrator0.getEventHandlers();
      highamHall54Integrator0.setMaxEvaluations((-947));
      highamHall54Integrator0.setMinReduction((-0.9371424300859873));
      highamHall54Integrator0.getCurrentSignedStepsize();
      HighamHall54Integrator highamHall54Integrator1 = new HighamHall54Integrator((-947), (-112.5430167927), doubleArray0, doubleArray0);
      highamHall54Integrator1.addEventHandler(eventHandler0, Double.NaN, Double.NaN, 713);
      highamHall54Integrator1.getEventHandlers();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator1 = new GraggBulirschStoerIntegrator(1000.0, 633.5193659919868, Double.NaN, (-203.4049474829));
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      DummyStepHandler.getInstance();
      graggBulirschStoerIntegrator0.addStepHandler(dummyStepHandler0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 0.0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 5;
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(5, 5, 5, doubleArray0, doubleArray0);
      adamsBashforthIntegrator0.getCurrentSignedStepsize();
      RiddersSolver riddersSolver0 = new RiddersSolver(0.0, 5.0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(5, 0.0, 785.4789776553561, (-1.0));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 0.0, 297.8779198036, 5, (UnivariateSolver) riddersSolver0);
      graggBulirschStoerIntegrator0.setMaxEvaluations((-1687));
      AdamsBashforthIntegrator adamsBashforthIntegrator1 = new AdamsBashforthIntegrator(5, 2592.73214, 1565.0, 0.0, 0.5489565134048462);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      try { 
        adamsBashforthIntegrator1.integrate(expandableStatefulODE0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one column
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(230.822505526102);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(7).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double double0 = (-382.966219468);
      try { 
        threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, (-382.966219468), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 14
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, 0.0, 0.0);
      graggBulirschStoerIntegrator0.getStepHandlers();
      graggBulirschStoerIntegrator0.setStepSizeControl(0.0, Double.NaN, 964.5, 0.0);
      double double0 = (-0.9371424300859873);
      double double1 = (-112.5430167927);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(2323.21420746598, 0.2881702184677124, 964.5, (-2347.3120447193505));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = null;
      FirstOrderConverter firstOrderConverter0 = null;
      try {
        firstOrderConverter0 = new FirstOrderConverter((SecondOrderDifferentialEquations) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.FirstOrderConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.20136540080403034, (-1140.8), (-71.8406056225604), (-71.8406056225604));
      int int0 = 141;
      dormandPrince54Integrator0.setMaxEvaluations(141);
      dormandPrince54Integrator0.getStepHandlers();
      double double0 = 1939.32958010743;
      double double1 = 1.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1939.32958010743, 1.0, (-1140.8), 141);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer0 = new StepNormalizer((-598.6180578567831), fixedStepHandler0);
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      try { 
        expandableStatefulODE0.getSecondaryState(141);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 141, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, 0.0, 0.0);
      double double0 = Double.NaN;
      graggBulirschStoerIntegrator0.setStepSizeControl(0.0, 964.5, Double.NaN, Double.NaN);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      RiddersSolver riddersSolver0 = new RiddersSolver(0.0, 2296.408468);
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 1000.0, (-0.42268232132379197), 123, (UnivariateSolver) riddersSolver0);
      graggBulirschStoerIntegrator0.setMaxEvaluations(0);
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = null;
      try {
        adamsBashforthIntegrator0 = new AdamsBashforthIntegrator((-1), (-1), 0.0, 0.0, (-875.1681703941231));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // multistep method needs at least -1 previous steps, got 2
         //
         verifyException("org.apache.commons.math3.ode.MultistepIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(3427.98972235);
      int int0 = eulerIntegrator0.getMaxEvaluations();
      assertEquals(Integer.MAX_VALUE, int0);
      
      eulerIntegrator0.setMaxEvaluations(1163);
      eulerIntegrator0.getStepHandlers();
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, doubleArray0, doubleArray0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.BOTH;
      StepNormalizer stepNormalizer0 = new StepNormalizer(1000.0, fixedStepHandler0, stepNormalizerBounds0);
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      graggBulirschStoerIntegrator0.setOrderControl(0, Double.NaN, 3306.5609264122368);
      graggBulirschStoerIntegrator0.getName();
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.9777777777777777, (-3656.716464387), doubleArray0, doubleArray0);
      int int0 = dormandPrince853Integrator0.getOrder();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(0.0);
      classicalRungeKuttaIntegrator0.getName();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = null;
      FirstOrderConverter firstOrderConverter0 = null;
      try {
        firstOrderConverter0 = new FirstOrderConverter((SecondOrderDifferentialEquations) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.FirstOrderConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2739.1371867);
      doubleArray0[1] = (-2739.1371867);
      doubleArray0[2] = 186.438;
      doubleArray0[3] = 186.438;
      doubleArray0[4] = (-2739.1371867);
      doubleArray0[5] = 186.438;
      doubleArray0[6] = 186.438;
      doubleArray0[7] = 186.438;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(186.438, (-2739.1371867), doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      BisectionSolver bisectionSolver0 = new BisectionSolver(0.0012326388888888888);
      dormandPrince853Integrator0.addEventHandler(eventHandler0, 186.438, 186.438, (-2088), (UnivariateSolver) bisectionSolver0);
      dormandPrince853Integrator0.getEventHandlers();
      // Undeclared exception!
      try { 
        dormandPrince853Integrator0.computeDerivatives(1482.1216105901046, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(230.822505526102);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      double double0 = (-382.966219468);
      try { 
        threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, (-382.966219468), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(3427.98972235);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3427.98972235;
      doubleArray0[1] = 3427.98972235;
      // Undeclared exception!
      try { 
        eulerIntegrator0.integrate((FirstOrderDifferentialEquations) null, 3427.98972235, doubleArray0, 3427.98972235, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double double0 = 0.037109375;
      double double1 = 0.0;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.037109375, 0.037109375, 0.0, 0.037109375);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      // Undeclared exception!
      try { 
        highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1.0), (double[]) null, (-0.9371424300859873), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 5;
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(5, 5, 5, doubleArray0, doubleArray0);
      adamsBashforthIntegrator0.getCurrentSignedStepsize();
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(5, 5, doubleArray0, doubleArray0);
      highamHall54Integrator0.getEvaluations();
      highamHall54Integrator0.getOrder();
      // Undeclared exception!
      try { 
        adamsBashforthIntegrator0.computeDerivatives(0.0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double double0 = (-2796.60422294);
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-2796.60422294));
      midpointIntegrator0.getEvaluations();
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        midpointIntegrator0.computeDerivatives((-2796.60422294), doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1066.11345206), 0.0, 0.0, 0.0);
      int int0 = highamHall54Integrator0.getEvaluations();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double double0 = 3427.98972235;
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(3427.98972235);
      classicalRungeKuttaIntegrator0.getCurrentStepStart();
      classicalRungeKuttaIntegrator0.clearEventHandlers();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(Double.NaN, Double.NaN, Double.NaN, 2.761628769925529E-8);
      ExpandableStatefulODE expandableStatefulODE0 = null;
      try {
        expandableStatefulODE0 = new ExpandableStatefulODE((FirstOrderDifferentialEquations) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.ExpandableStatefulODE", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(806.655616526185);
      eulerIntegrator0.getCurrentStepStart();
      ExpandableStatefulODE expandableStatefulODE0 = null;
      try {
        expandableStatefulODE0 = new ExpandableStatefulODE((FirstOrderDifferentialEquations) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.ExpandableStatefulODE", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double double0 = 0.0;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, 0.0, 0.0);
      double double1 = (-909.37085031737);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2233.136876;
      doubleArray0[1] = (double) (-1261);
      doubleArray0[2] = (double) (-1261);
      doubleArray0[3] = (double) (-1261);
      doubleArray0[4] = 347.187809113;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-909.37085031737);
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (double) (-1261);
      doubleArray1[2] = 347.187809113;
      doubleArray1[3] = (-337.184);
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      doubleArray1[6] = (double) (-1261);
      doubleArray1[7] = 2233.136876;
      doubleArray1[8] = 1673.631508166616;
      // Undeclared exception!
      try { 
        dormandPrince853Integrator0.initializeStep(false, (-1261), doubleArray0, 0.0, doubleArray0, doubleArray0, doubleArray0, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(3427.98972235);
      eulerIntegrator0.getEventHandlers();
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(5, 5, 5, doubleArray0, doubleArray0);
      double double0 = adamsBashforthIntegrator0.getCurrentSignedStepsize();
      assertEquals(5.0, double0, 0.01);
      
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(5, 5, doubleArray0, doubleArray0);
      highamHall54Integrator0.getEvaluations();
      highamHall54Integrator0.getOrder();
      highamHall54Integrator0.getOrder();
      highamHall54Integrator0.clearEventHandlers();
      GillIntegrator gillIntegrator0 = new GillIntegrator(1.1368683772161603E-10);
      double double1 = gillIntegrator0.getCurrentSignedStepsize();
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      
      HighamHall54Integrator highamHall54Integrator1 = new HighamHall54Integrator(Double.NaN, 0.0, doubleArray0, doubleArray0);
      int int0 = highamHall54Integrator1.getMaxEvaluations();
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 0.0, (-2224.736301), (-2224.736301));
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, 13.910415, 15.279233632882423);
      graggBulirschStoerIntegrator0.setInitialStepSize(0.0);
      graggBulirschStoerIntegrator0.clearStepHandlers();
      graggBulirschStoerIntegrator0.setStabilityCheck(false, (-1557), (-1557), (-1557));
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-1.0));
      threeEighthesIntegrator0.getMaxEvaluations();
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      threeEighthesIntegrator0.addStepHandler(dummyStepHandler0);
      threeEighthesIntegrator0.getCurrentSignedStepsize();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = (-1.0);
      // Undeclared exception!
      try { 
        threeEighthesIntegrator0.computeDerivatives((-1.0), doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-239.004507), (-239.004507), (-239.004507), (-239.004507));
      graggBulirschStoerIntegrator0.clearStepHandlers();
      graggBulirschStoerIntegrator0.clearEventHandlers();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (-239.004507), 0.0, 1);
      int int0 = 675;
      graggBulirschStoerIntegrator0.setStabilityCheck(true, 675, 675, (-239.004507));
      graggBulirschStoerIntegrator0.setOrderControl((-4884), (-239.004507), (-4884));
      graggBulirschStoerIntegrator0.setOrderControl((-4884), 1, 1);
      graggBulirschStoerIntegrator0.getEventHandlers();
      int int1 = (-644);
      graggBulirschStoerIntegrator0.setInterpolationControl(false, (-644));
      graggBulirschStoerIntegrator0.getMaxEvaluations();
      double[] doubleArray0 = null;
      DormandPrince54Integrator dormandPrince54Integrator0 = null;
      try {
        dormandPrince54Integrator0 = new DormandPrince54Integrator((-239.004507), 0.0, (double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(340.0, 340.0, 340.0, 340.0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 340.0;
      doubleArray0[1] = 1189.838;
      doubleArray0[2] = (-1904.5245789594);
      doubleArray0[3] = (double) 2640;
      doubleArray0[4] = (double) 2640;
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(2640, (-1904.5245789594), 1000.0, doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-400.4803), (-20.73151581), 736.886083, 736.886083);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 736.886083, (-400.4803), 736.886083);
      FirstOrderConverter firstOrderConverter0 = null;
      try {
        firstOrderConverter0 = new FirstOrderConverter((SecondOrderDifferentialEquations) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.FirstOrderConverter", e);
      }
  }
}
