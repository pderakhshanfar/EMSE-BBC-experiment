/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 23:11:23 GMT 2021
 */

package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
import org.apache.commons.math3.analysis.function.Sinc;
import org.apache.commons.math3.analysis.solvers.BisectionSolver;
import org.apache.commons.math3.analysis.solvers.MullerSolver2;
import org.apache.commons.math3.analysis.solvers.RegulaFalsiSolver;
import org.apache.commons.math3.analysis.solvers.SecantSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator;
import org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.EulerIntegrator;
import org.apache.commons.math3.ode.nonstiff.GillIntegrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.nonstiff.MidpointIntegrator;
import org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator;
import org.apache.commons.math3.ode.sampling.DummyStepHandler;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.apache.commons.math3.ode.sampling.StepNormalizerBounds;
import org.apache.commons.math3.ode.sampling.StepNormalizerMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegrator_ESTest extends AbstractIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-2.0990705315716225));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-2.0990705315716225), doubleArray0, (-290.08), doubleArray0);
      gillIntegrator0.getName();
      gillIntegrator0.computeDerivatives(0.0, doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(0.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-200.180172), 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      gillIntegrator0.addEventHandler(eventHandler0, (-3160.4897225697), (-9.0), (-2147483631));
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, (-9.0), 2015.4665142418746, (-2147483631));
      graggBulirschStoerIntegrator0.setOrderControl((-2147483631), 1974.0, 2015.4665142418746);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        gillIntegrator0.integrate(expandableStatefulODE0, (-3160.4897225697));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-2,147,483,631) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-2.0990705315716225));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-2.0990705315716225), doubleArray0, (-290.08), doubleArray0);
      gillIntegrator0.getName();
      gillIntegrator0.getEvaluations();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(4702.64534, 287.98092946842837, 1545.769706548678, 4.547473508864641E-10);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      MullerSolver2 mullerSolver2_0 = new MullerSolver2();
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 287.98092946842837, 1.0, 2203, (UnivariateSolver) mullerSolver2_0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.3020833333333333);
      doubleArray0[1] = (-1.3020833333333333);
      doubleArray0[2] = (-1.3020833333333333);
      doubleArray0[3] = (-1.3020833333333333);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1.3020833333333333), (-1.3020833333333333), doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime((-1.3020833333333333));
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (-1.3020833333333333));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, 1997.18888, 1997.18888);
      dormandPrince853Integrator0.getOrder();
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1997.18888, (-9.194632392478356), doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-9.194632392478356);
      doubleArray1[1] = (double) 8;
      doubleArray1[2] = (-2757.647518);
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0.0);
      highamHall54Integrator0.getCurrentSignedStepsize();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, 1997.18888, 1997.18888);
      dormandPrince853Integrator0.getOrder();
      double[] doubleArray0 = new double[0];
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      SecantSolver secantSolver0 = new SecantSolver((-2757.647518));
      secantSolver0.getMaxEvaluations();
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-9.194632392478356), (-2757.647518), 990.2306726939211, 0.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      highamHall54Integrator0.addEventHandler(eventHandler0, (-542.2), (-671.922), 0, (UnivariateSolver) secantSolver0);
      // Undeclared exception!
      highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1.1554977893829346, doubleArray0, (double) 2879, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(0.0);
      double double0 = (-1265.64417);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-200.180172), 0.0, (-9.0), 0.0, (-1265.64417)).when(eventHandler0).g(anyDouble() , any(double[].class));
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      gillIntegrator0.addStepHandler(dummyStepHandler0);
      gillIntegrator0.addEventHandler(eventHandler0, (-3160.4897225697), 1118.01008497572, 2147483645);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 1118.01008497572, 2015.4665142418746, Double.NaN);
      graggBulirschStoerIntegrator0.setOrderControl(1192, 2015.4665142418746, (-3160.4897225697));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(7).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      gillIntegrator0.integrate(expandableStatefulODE0, (-3160.4897225697));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1.0));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      gillIntegrator0.addStepHandler(dummyStepHandler0);
      gillIntegrator0.addEventHandler(eventHandler0, 1118.01008497572, (-3093.058), 495);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(495, (-3093.058), 1000.0, 392.06666666666666);
      graggBulirschStoerIntegrator0.setOrderControl(495, (-2368.35616018), 1000.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      gillIntegrator0.integrate(expandableStatefulODE0, 5.6843418860808015E-11);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(604).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1005.0364, (-925.4994), 0.0, 187.349434729);
      graggBulirschStoerIntegrator0.addEventHandler((EventHandler) null, 1047.104694793293, 187.349434729, 604);
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 187.349434729);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      GillIntegrator gillIntegrator0 = new GillIntegrator(2147483645);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(392.06666666666666, 392.06666666666666, (-1024.7854), (double)2147483645, 1.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler1).g(anyDouble() , any(double[].class));
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(233.7);
      gillIntegrator0.addEventHandler(eventHandler1, 1.0, (-72.0), 2147483645, (UnivariateSolver) regulaFalsiSolver0);
      gillIntegrator0.addEventHandler(eventHandler0, 3.8718282216768776E250, 2239.0437, 2147483645);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2239.0437, 2015.4665142418746, 392.06666666666666, 2239.0437);
      graggBulirschStoerIntegrator0.setOrderControl(1192, (-1024.7854), 392.06666666666666);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        gillIntegrator0.integrate(expandableStatefulODE0, 2239.0437);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [\uFFFD, \uFFFD], values: [1, 1]
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(0.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-200.180172), 0.0, (-9.0), 0.0, (-1265.64417)).when(eventHandler0).g(anyDouble() , any(double[].class));
      gillIntegrator0.addEventHandler(eventHandler0, (-3160.4897225697), 1118.01008497572, 2147483645);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 1118.01008497572, 2015.4665142418746, Double.NaN);
      graggBulirschStoerIntegrator0.setOrderControl(1192, 2015.4665142418746, (-3160.4897225697));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(7).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      gillIntegrator0.integrate(expandableStatefulODE0, (-3160.4897225697));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(5.6843418860808015E-11);
      int int0 = (-3879);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      gillIntegrator0.addEventHandler(eventHandler0, 0.0, (-3746.18664), 3076);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-3746.18664), 5.6843418860808015E-11, 5.6843418860808015E-11, (-967.16651));
      graggBulirschStoerIntegrator0.setOrderControl((-3879), 5.6843418860808015E-11, 1192);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) (-3879);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator1 = new GraggBulirschStoerIntegrator(5.6843418860808015E-11, 0.0, doubleArray0, doubleArray0);
      try { 
        graggBulirschStoerIntegrator1.integrate(expandableStatefulODE0, (-938.231954463235));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 2
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-53.986972212);
      doubleArray0[1] = (-53.986972212);
      doubleArray0[2] = (-53.986972212);
      doubleArray0[3] = (-53.986972212);
      doubleArray0[4] = 5.6843418860808015E-11;
      doubleArray0[5] = (-53.986972212);
      doubleArray0[6] = (-53.986972212);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(5.6843418860808015E-11, (-53.986972212), doubleArray0, doubleArray0);
      highamHall54Integrator0.getEventHandlers();
      highamHall54Integrator0.getCurrentSignedStepsize();
      highamHall54Integrator0.getOrder();
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-53.986972212);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-53.986972212), (-53.986972212), doubleArray1, doubleArray0);
      graggBulirschStoerIntegrator0.setStabilityCheck(true, 5, 0, (-53.986972212));
      graggBulirschStoerIntegrator0.setStabilityCheck(false, 2597, 760, (-1859.158143));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(0.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double0 = (-3160.4897225697);
      gillIntegrator0.addEventHandler(eventHandler0, (-3160.4897225697), 1118.01008497572, 2147483645);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 1118.01008497572, 2015.4665142418746, Double.NaN);
      graggBulirschStoerIntegrator0.setOrderControl(1192, 2015.4665142418746, (-3160.4897225697));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn((-3619)).when(secondOrderDifferentialEquations0).getDimension();
      gillIntegrator0.getCurrentSignedStepsize();
      FirstOrderConverter firstOrderConverter0 = null;
      try {
        firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.FirstOrderConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(0.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      gillIntegrator0.addEventHandler(eventHandler0, (-3160.4897225697), 1118.01008497572, 2147483645);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 1118.01008497572, 2015.4665142418746, Double.NaN);
      graggBulirschStoerIntegrator0.setOrderControl(1192, 2015.4665142418746, (-3160.4897225697));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      gillIntegrator0.integrate(expandableStatefulODE0, (-3160.4897225697));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(1013.4195946);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      gillIntegrator0.addEventHandler(eventHandler0, 0.0, 0.0, (-3879));
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-3879), (-4.450312892752409), 0.0, 0.0);
      int int0 = 1192;
      graggBulirschStoerIntegrator0.setOrderControl(1192, 1.0E-14, 0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (-925.4994));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-2746.870934));
      midpointIntegrator0.getMaxEvaluations();
      midpointIntegrator0.getCurrentStepStart();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-3030.36));
      FirstOrderDifferentialEquations firstOrderDifferentialEquations0 = null;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-3030.36);
      doubleArray0[1] = 7.255611264437603E-109;
      doubleArray0[2] = (-3030.36);
      doubleArray0[3] = 7.255611264437603E-109;
      doubleArray0[5] = 7.255611264437603E-109;
      doubleArray0[6] = (-3030.36);
      doubleArray0[7] = (-3030.36);
      doubleArray0[8] = 1.1368683772161603E-10;
      // Undeclared exception!
      try { 
        gillIntegrator0.integrate((FirstOrderDifferentialEquations) null, (-3030.36), doubleArray0, 7.255611264437603E-109, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, 1997.18888, 1997.18888);
      dormandPrince853Integrator0.getOrder();
      double double0 = (-9.194632392478356);
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1997.18888, (-9.194632392478356), doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-9.194632392478356);
      doubleArray1[1] = (double) 8;
      doubleArray1[2] = (-2757.647518);
      doubleArray1[3] = 1997.18888;
      doubleArray1[4] = (-9.194632392478356);
      doubleArray1[5] = 1997.18888;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 1997.18888;
      try { 
        highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-542.2), doubleArray0, (-9.194632392478356), doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 16
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0419047619047619, (-43.13715306), doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      GillIntegrator gillIntegrator0 = new GillIntegrator(392.06666666666666);
      gillIntegrator0.addEventHandler(eventHandler0, 392.06666666666666, 571.11148, 5);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(50.18091720351467, 0.0, 1051.0293867063883, 1000.0);
      graggBulirschStoerIntegrator0.setOrderControl((-988), 1051.0293867063883, (-772.3213));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, 1997.18888, 1997.18888);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-2189.7605411939);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, (-2008.830275796), doubleArray0, doubleArray0);
      dormandPrince54Integrator0.setMaxEvaluations((-1));
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = null;
      try {
        adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(0, (-2023), 1997.18888, doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one row
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1000.0, 5.6843418860808015E-11, 392.06666666666666, 515.60144);
      DummyStepHandler.getInstance();
      graggBulirschStoerIntegrator0.getMaxEvaluations();
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      graggBulirschStoerIntegrator0.addStepHandler(dummyStepHandler0);
      graggBulirschStoerIntegrator0.clearEventHandlers();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double double0 = 1793.761482;
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(1793.761482);
      classicalRungeKuttaIntegrator0.getEvaluations();
      classicalRungeKuttaIntegrator0.clearEventHandlers();
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      StepNormalizer stepNormalizer0 = new StepNormalizer(0, (FixedStepHandler) null, stepNormalizerMode0);
      double double1 = (-1651.86149);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-320.7991214259886);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-1651.86149);
      doubleArray0[3] = 1793.761482;
      doubleArray0[4] = 1793.761482;
      // Undeclared exception!
      try { 
        stepNormalizer0.init((-1651.86149), doubleArray0, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.sampling.StepNormalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double double0 = 397.4;
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(397.4);
      eulerIntegrator0.getEventHandlers();
      double double1 = 0.25;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime(5.333333333333333);
      eulerIntegrator0.integrate(expandableStatefulODE0, 397.4);
      double double2 = 3.141592653589793;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(397.4, 0.25, 3.141592653589793, 3.141592653589793);
      dormandPrince54Integrator0.getOrder();
      eulerIntegrator0.getEventHandlers();
      // Undeclared exception!
      try { 
        expandableStatefulODE0.getSecondaryState(1064);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1064, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.08192320648511571;
      doubleArray0[1] = 0.08192320648511571;
      doubleArray0[2] = (-1024.7854366111);
      doubleArray0[3] = 0.08192320648511571;
      doubleArray0[4] = 0.08192320648511571;
      doubleArray0[5] = 0.08192320648511571;
      doubleArray0[6] = (-1024.7854366111);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.08192320648511571, (-1024.7854366111), doubleArray0, doubleArray0);
      dormandPrince54Integrator0.setMaxEvaluations(0);
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = null;
      try {
        adamsBashforthIntegrator0 = new AdamsBashforthIntegrator((-2023), 3540.4717364479143, (-2366.0316905122), doubleArray0, doubleArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(0.0);
      eulerIntegrator0.getEvaluations();
      eulerIntegrator0.getEventHandlers();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 0.0, doubleArray0, doubleArray0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      highamHall54Integrator0.addEventHandler(eventHandler0, 0.0, 0.0, 1253);
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.0, fixedStepHandler0);
      highamHall54Integrator0.addStepHandler(stepNormalizer0);
      highamHall54Integrator0.setStepSizeControl(0.0, 0.0, (-135.660880485223), (-135.660880485223));
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-1268.8748039009);
      doubleArray1[2] = (-1268.8748039009);
      doubleArray1[3] = (-1056.0336766);
      doubleArray1[4] = (double) 1253;
      doubleArray1[5] = 906.4912578;
      highamHall54Integrator0.getEventHandlers();
      doubleArray1[6] = (-1268.8748039009);
      // Undeclared exception!
      try { 
        highamHall54Integrator0.computeDerivatives((-1268.8748039009), doubleArray1, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2265.234;
      doubleArray0[1] = 2265.234;
      doubleArray0[2] = 2265.234;
      doubleArray0[3] = 2265.234;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(2265.234, 1590.1726, doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 1590.1726;
      doubleArray1[1] = 1590.1726;
      doubleArray1[2] = 1590.1726;
      doubleArray1[3] = 2265.234;
      doubleArray1[4] = 1590.1726;
      doubleArray1[5] = 2265.234;
      doubleArray1[6] = 2265.234;
      // Undeclared exception!
      try { 
        dormandPrince54Integrator0.computeDerivatives(1590.1726, doubleArray1, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double double0 = 595.281144;
      double double1 = 0.0;
      double double2 = (-0.3333333333333333);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(595.281144, 595.281144, 0.0, (-0.3333333333333333));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-0.3333333333333333);
      doubleArray0[1] = 595.281144;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-0.3333333333333333);
      doubleArray0[4] = (-0.3333333333333333);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-0.3333333333333333);
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.computeDerivatives((-0.3333333333333333), doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-3837.185), (-3412.71), 0.0, 0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      graggBulirschStoerIntegrator0.setInitialStepSize((-3837.185));
      doubleArray0[3] = 0.0;
      double double0 = (-1677.97);
      graggBulirschStoerIntegrator0.setStepSizeControl(2509.58084249461, 524.5479186989231, (-1677.97), 0.0);
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-3837.185), doubleArray0, 163.0768759366617, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double double0 = (-488.083346585);
      double double1 = 502.6;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-488.083346585), 0.84375, 502.6, (-1072.1));
      dormandPrince853Integrator0.setStepSizeControl((-488.083346585), (-1072.1), 502.6, (-1072.1));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 502.6;
      doubleArray0[1] = 0.84375;
      doubleArray0[2] = (-488.083346585);
      doubleArray0[3] = (-488.083346585);
      // Undeclared exception!
      try { 
        dormandPrince853Integrator0.initializeStep(false, 0, doubleArray0, (-1839.1), doubleArray0, doubleArray0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double double0 = 258.196396;
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(258.196396);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      threeEighthesIntegrator0.integrate(expandableStatefulODE0, 258.196396);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double double0 = 187.349434729;
      GillIntegrator gillIntegrator0 = new GillIntegrator(187.349434729);
      gillIntegrator0.addEventHandler((EventHandler) null, 187.349434729, 187.349434729, 435);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2015.4665142418746, 0.0, 0.0, (-2731.1));
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator1 = new GraggBulirschStoerIntegrator(Double.NaN, 1.0016001590267064E-9, Double.NaN, 0.0);
      graggBulirschStoerIntegrator1.setOrderControl((-717), 1974.0, 5.6843418860808015E-11);
      FirstOrderConverter firstOrderConverter0 = null;
      try {
        firstOrderConverter0 = new FirstOrderConverter((SecondOrderDifferentialEquations) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.FirstOrderConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(1013.4195946);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      gillIntegrator0.addEventHandler(eventHandler0, 0.0, 0.0, (-3879));
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-3879), (-4.450312892752409), 0.0, 0.0);
      graggBulirschStoerIntegrator0.setOrderControl(1192, 1.0E-14, 0.0);
      assertEquals(4.450312892752409, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, 1997.18888, 1997.18888);
      dormandPrince853Integrator0.getOrder();
      double double0 = (-9.194632392478356);
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1997.18888, (-9.194632392478356), doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-9.194632392478356);
      doubleArray1[1] = (double) 8;
      doubleArray1[2] = (-2757.647518);
      doubleArray1[3] = 1997.18888;
      doubleArray1[4] = (-9.194632392478356);
      doubleArray1[5] = 1997.18888;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 1997.18888;
      try { 
        highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-542.2), doubleArray0, (-9.194632392478356), doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(7.255611264437603E-109);
      threeEighthesIntegrator0.clearStepHandlers();
      double double0 = threeEighthesIntegrator0.getCurrentSignedStepsize();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double double0 = 2421.210274162107;
      GillIntegrator gillIntegrator0 = new GillIntegrator(2421.210274162107);
      gillIntegrator0.clearStepHandlers();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2421.210274162107;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double1 = 5389.164250835;
      double double2 = 3901.609097885;
      int int0 = 2194;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(3901.609097885, 5389.164250835);
      Sinc sinc0 = new Sinc(false);
      sinc0.value(3901.609097885);
      DerivativeStructure derivativeStructure0 = null;
      try {
        derivativeStructure0 = new DerivativeStructure(2194, 0, 2194, 3901.609097885);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2,194 is larger than, or equal to, the maximum (2,194)
         //
         verifyException("org.apache.commons.math3.analysis.differentiation.DerivativeStructure", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.3020833333333333);
      doubleArray0[1] = (-1.3020833333333333);
      doubleArray0[2] = (-1.3020833333333333);
      doubleArray0[3] = (-1.3020833333333333);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1.3020833333333333), (-1.3020833333333333), doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (-1.3020833333333333));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 4
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(592.869, 592.869, (-496.802737636404), (-2042.173668766));
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.BOTH;
      StepNormalizer stepNormalizer0 = new StepNormalizer(592.869, (FixedStepHandler) null, stepNormalizerMode0, stepNormalizerBounds0);
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      assertEquals(592.869, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-14.9433085873), 0.0, (-14.9433085873), 1286.0);
      dormandPrince853Integrator0.getName();
      dormandPrince853Integrator0.getStepHandlers();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1294.864079;
      doubleArray0[1] = (-14.9433085873);
      doubleArray0[2] = 1286.0;
      doubleArray0[3] = (-1005.718);
      doubleArray0[4] = 1286.0;
      doubleArray0[5] = (-14.9433085873);
      doubleArray0[6] = 1286.0;
      doubleArray0[7] = (-2439.8);
      doubleArray0[8] = (-1005.718);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-14.9433085873), (-1005.718), doubleArray0, doubleArray0);
      SecantSolver secantSolver0 = new SecantSolver((-2439.8), 3706.462466);
      graggBulirschStoerIntegrator0.addEventHandler((EventHandler) null, (-2439.8), 1294.864079, (-818), (UnivariateSolver) secantSolver0);
      assertEquals(0.0, secantSolver0.getMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2291.353594981;
      doubleArray0[3] = 0.0;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 2291.353594981, doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      BisectionSolver bisectionSolver0 = new BisectionSolver(56, 0.0);
      highamHall54Integrator0.addEventHandler(eventHandler0, 2291.353594981, (-250.6831329123916), 56, (UnivariateSolver) bisectionSolver0);
      highamHall54Integrator0.setMaxEvaluations(99);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(47.1983226, 995.101137113139, 995.101137113139, 0.0);
      graggBulirschStoerIntegrator0.setOrderControl((-1581), (-1935.461982430886), (-1935.461982430886));
      assertEquals(995.101137113139, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(187.349434729);
      eulerIntegrator0.setMaxEvaluations(5);
      eulerIntegrator0.getStepHandlers();
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double double0 = 0.0;
      double[] doubleArray0 = null;
      HighamHall54Integrator highamHall54Integrator0 = null;
      try {
        highamHall54Integrator0 = new HighamHall54Integrator(0.0, 960905.0, (double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-532.058));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3391.4;
      doubleArray0[1] = 3391.4;
      doubleArray0[2] = 3391.4;
      doubleArray0[3] = (-532.058);
      doubleArray0[4] = 0.9;
      doubleArray0[5] = 0.9;
      doubleArray0[6] = 3391.4;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(3391.4, 0.9, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setInterpolationControl(false, 1474);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
  }
}
