/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 22:35:50 GMT 2021
 */

package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.solvers.BisectionSolver;
import org.apache.commons.math3.analysis.solvers.SecantSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator;
import org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator;
import org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.GillIntegrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.nonstiff.MidpointIntegrator;
import org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator;
import org.apache.commons.math3.ode.sampling.DummyStepHandler;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.StepHandler;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.apache.commons.math3.ode.sampling.StepNormalizerBounds;
import org.apache.commons.math3.ode.sampling.StepNormalizerMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegrator_ESTest extends AbstractIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(Double.NaN);
      gillIntegrator0.getEvaluations();
      gillIntegrator0.getMaxEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(3).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((double)3, (-2292.072), Double.NaN, (double)3, (double)0).when(eventHandler0).g(anyDouble() , any(double[].class));
      gillIntegrator0.addEventHandler(eventHandler0, (double) 1244, 1.3725786770437066E105, 3);
      GillIntegrator gillIntegrator1 = new GillIntegrator(2.1475287752262735E9);
      gillIntegrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) Integer.MAX_VALUE, doubleArray0, 2.1475287752262735E9, doubleArray0);
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(Double.NaN, 1.3725786770437066E105, 1.3725786770437066E105, 0.0, Double.NaN).when(eventHandler1).g(anyDouble() , any(double[].class));
      gillIntegrator0.addEventHandler(eventHandler1, 2.147483647E9, 367.1390420297, 1244);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      gillIntegrator0.integrate(expandableStatefulODE0, 3338.19);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double double0 = (-1.0);
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1.0));
      gillIntegrator0.getEvaluations();
      gillIntegrator0.getMaxEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      gillIntegrator0.getEvaluations();
      double double1 = 2.2737367544323206E-10;
      double double2 = (-1199.4);
      EventHandler.Action eventHandler_Action0 = EventHandler.Action.RESET_DERIVATIVES;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(eventHandler_Action0).when(eventHandler0).eventOccurred(anyDouble() , any(double[].class) , anyBoolean());
      doReturn(2.2737367544323206E-10, (-1.0), (-1199.4), 3.552713678800501E-12, (-1199.4)).when(eventHandler0).g(anyDouble() , any(double[].class));
      int int0 = 2049816847;
      gillIntegrator0.clearStepHandlers();
      gillIntegrator0.addEventHandler(eventHandler0, 20.987857031525188, (double) 0, 2049816847);
      double[] doubleArray0 = new double[0];
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 20.987857031525188, doubleArray0, (double) 0, doubleArray0);
      // Undeclared exception!
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) Integer.MAX_VALUE, doubleArray0, 2078.790441119345, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(Double.NaN);
      gillIntegrator0.getEvaluations();
      gillIntegrator0.getMaxEvaluations();
      gillIntegrator0.setMaxEvaluations(796);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(3).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      gillIntegrator0.getEvaluations();
      double[] doubleArray0 = new double[6];
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      gillIntegrator0.addEventHandler(eventHandler0, (-1.0), (double) 3, Integer.MAX_VALUE);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.getTotalDimension();
      try { 
        gillIntegrator0.integrate(expandableStatefulODE0, 1000.0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (796) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double double0 = 339.99572;
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-4066.843687409165), (-1430.39894719397), doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      GillIntegrator gillIntegrator0 = new GillIntegrator(5253.70735);
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 5253.70735, doubleArray0, (-4066.843687409165), doubleArray0);
      gillIntegrator0.getMaxEvaluations();
      gillIntegrator0.getEvaluations();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator1 = new GraggBulirschStoerIntegrator(339.99572, (-1430.39894719397), 339.99572, 5253.70735);
      boolean boolean0 = false;
      graggBulirschStoerIntegrator1.setStabilityCheck(false, (-1013), 3, 1136.217733444364);
      gillIntegrator0.getEvaluations();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator2 = new GraggBulirschStoerIntegrator((-50.95954), 848.870472169819, (-1305.971105874542), (-4066.843687409165));
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      graggBulirschStoerIntegrator2.integrate(expandableStatefulODE0, (-1.650155887561251E-8));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double double0 = (-1.0);
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1.0));
      gillIntegrator0.getEvaluations();
      gillIntegrator0.getMaxEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      gillIntegrator0.getEvaluations();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      gillIntegrator0.clearStepHandlers();
      gillIntegrator0.addEventHandler(eventHandler0, 20.987857031525188, (double) 0, 2049816847);
      double[] doubleArray0 = new double[0];
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 20.987857031525188, doubleArray0, (double) 0, doubleArray0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-3125.3266461167223), (-716.92618), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 2049816847);
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = null;
      try {
        adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(0, 20.987857031525188, (-716.92618), 1.0, 1000.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // multistep method needs at least 0 previous steps, got 2
         //
         verifyException("org.apache.commons.math3.ode.MultistepIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double double0 = Double.NaN;
      GillIntegrator gillIntegrator0 = new GillIntegrator(Double.NaN);
      gillIntegrator0.getEvaluations();
      gillIntegrator0.getMaxEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(3).when(secondOrderDifferentialEquations0).getDimension();
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.BOTH;
      StepNormalizer stepNormalizer0 = new StepNormalizer(Double.NaN, fixedStepHandler0, stepNormalizerMode0, stepNormalizerBounds0);
      gillIntegrator0.addStepHandler(stepNormalizer0);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      gillIntegrator0.getEvaluations();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      EventHandler.Action eventHandler_Action0 = EventHandler.Action.RESET_DERIVATIVES;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(eventHandler_Action0).when(eventHandler0).eventOccurred(anyDouble() , any(double[].class) , anyBoolean());
      doReturn((double)3, (-2292.072), Double.NaN, (double)3, (double)0).when(eventHandler0).g(anyDouble() , any(double[].class));
      gillIntegrator0.addEventHandler(eventHandler0, (double) 0, 2996.0, 1244);
      doubleArray0[4] = 22.739487099350505;
      // Undeclared exception!
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2996.0, doubleArray0, 313.7847399, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(Double.NaN);
      gillIntegrator0.getEvaluations();
      gillIntegrator0.getMaxEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(3).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      EventHandler.Action eventHandler_Action0 = EventHandler.Action.RESET_DERIVATIVES;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(eventHandler_Action0).when(eventHandler0).eventOccurred(anyDouble() , any(double[].class) , anyBoolean());
      doReturn((double)3, (-2292.072), Double.NaN, (double)3, (double)0).when(eventHandler0).g(anyDouble() , any(double[].class));
      gillIntegrator0.addEventHandler(eventHandler0, (double) 0, 2996.0, 1244);
      doubleArray0[4] = 22.739487099350505;
      // Undeclared exception!
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2996.0, doubleArray0, 313.7847399, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(Double.NaN);
      gillIntegrator0.getEvaluations();
      gillIntegrator0.getMaxEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(3).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      doubleArray0[4] = 22.739487099350505;
      double[] doubleArray1 = new double[6];
      // Undeclared exception!
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) 1244, doubleArray0, 107.782266555636, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(Double.NaN);
      gillIntegrator0.getEvaluations();
      gillIntegrator0.getMaxEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(Double.NaN, 6470.362224283566).when(eventHandler0).g(anyDouble() , any(double[].class));
      gillIntegrator0.addEventHandler(eventHandler0, Double.NaN, (-71.2988213), 0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        gillIntegrator0.integrate(expandableStatefulODE1, 3937.3768457);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(Double.NaN);
      gillIntegrator0.getEvaluations();
      gillIntegrator0.getMaxEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(3).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((double)3, (-2292.072), Double.NaN, (double)3, (double)0).when(eventHandler0).g(anyDouble() , any(double[].class));
      gillIntegrator0.addEventHandler(eventHandler0, (double) 0, 2996.0, 1244);
      doubleArray0[4] = 22.739487099350505;
      // Undeclared exception!
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, Double.NaN, doubleArray0, 107.782266555636, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(Double.NaN);
      gillIntegrator0.getEvaluations();
      gillIntegrator0.getMaxEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(3).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-1379.591343669223), (double)Integer.MAX_VALUE, (double)Integer.MAX_VALUE, Double.NaN, Double.NaN).when(eventHandler0).g(anyDouble() , any(double[].class));
      gillIntegrator0.addEventHandler(eventHandler0, (double) 0, 2996.0, 1244);
      doubleArray0[4] = 22.739487099350505;
      try { 
        gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, Double.NaN, doubleArray0, 107.782266555636, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [\uFFFD, \uFFFD], values: [\uFFFD, \uFFFD]
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(Double.NaN);
      gillIntegrator0.getEvaluations();
      gillIntegrator0.getMaxEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(3).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(2.147483647E9, Double.NaN, (double)Integer.MAX_VALUE, Double.NaN, (-172.4725724)).when(eventHandler0).g(anyDouble() , any(double[].class));
      gillIntegrator0.addEventHandler(eventHandler0, (double) 0, 2996.0, 1244);
      doubleArray0[4] = 2.147485354E9;
      try { 
        gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, Double.NaN, doubleArray0, 107.782266555636, doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (1,244) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1833.0));
      gillIntegrator0.getCurrentStepStart();
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(339.99572, Double.NaN, doubleArray0, doubleArray0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator1 = new GraggBulirschStoerIntegrator((-1833.0), (-1216.67), doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1055).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter1, 4839.853596665966, doubleArray0, (-1833.0), doubleArray0);
      gillIntegrator0.getMaxEvaluations();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator2 = new GraggBulirschStoerIntegrator(1000.0, 339.99572, Integer.MAX_VALUE, (-510.704520212232));
      StepNormalizer stepNormalizer0 = new StepNormalizer(313.7847399, (FixedStepHandler) null);
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      gillIntegrator0.getCurrentSignedStepsize();
      gillIntegrator0.getName();
      graggBulirschStoerIntegrator1.setInterpolationControl(false, 2389);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(Double.NaN);
      gillIntegrator0.getEvaluations();
      gillIntegrator0.getMaxEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(3).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      gillIntegrator0.addEventHandler(eventHandler0, (double) 0, 2996.0, 1244);
      doubleArray0[4] = 22.739487099350505;
      // Undeclared exception!
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, Double.NaN, doubleArray0, 107.782266555636, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1833.0));
      gillIntegrator0.getCurrentStepStart();
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(339.99572, Double.NaN, doubleArray0, doubleArray0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator1 = new GraggBulirschStoerIntegrator((-1833.0), (-1216.67), doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double double0 = 317.2562329006495;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 5253.70735;
      doubleArray1[1] = 317.2562329006495;
      doubleArray1[2] = Double.NaN;
      try { 
        gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 5253.70735, doubleArray0, 317.2562329006495, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1063.27903));
      gillIntegrator0.getEvaluations();
      gillIntegrator0.getMaxEvaluations();
      gillIntegrator0.clearStepHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(3).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1063.27903);
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      doubleArray0[2] = 933.4136326120064;
      doubleArray0[3] = (-0.015319437748624402);
      doubleArray0[4] = 22.739487099350505;
      doubleArray0[5] = (double) Integer.MAX_VALUE;
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1063.27903), doubleArray0, 933.4136326120064, doubleArray0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(6.403477383195494E-34, 2.1475290507670426E9, 1947.42750144, 2.266777992248535);
      graggBulirschStoerIntegrator0.addStepHandler((StepHandler) null);
      gillIntegrator0.getCurrentStepStart();
      gillIntegrator0.getMaxEvaluations();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator1 = new GraggBulirschStoerIntegrator(Integer.MAX_VALUE, 0.0, 0.0, 4.287864841977586E12);
      StepNormalizer stepNormalizer0 = new StepNormalizer((-3227.0439933), (FixedStepHandler) null);
      graggBulirschStoerIntegrator1.addStepHandler(stepNormalizer0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      gillIntegrator0.integrate(expandableStatefulODE0, 2.384185791015625E-4);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(Double.NaN);
      gillIntegrator0.getEvaluations();
      gillIntegrator0.getMaxEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(3).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-949.6695), 933.4136326120064, 3176.6, 2.147483647E9);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      gillIntegrator0.addEventHandler(eventHandler0, 933.4136326120064, 3176.6, 2024);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-391.281418), 2149.0520662858835, (-2781.19), (-1.0));
      dormandPrince54Integrator0.getOrder();
      gillIntegrator0.getEventHandlers();
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 4.547473508864641E-10, doubleArray0, 0.0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(Double.NaN);
      gillIntegrator0.getEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(3).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 933.4136326120064;
      doubleArray0[3] = (-0.015319437748624402);
      doubleArray0[4] = 22.739487099350505;
      doubleArray0[5] = (double) 0;
      try { 
        gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1000.0, doubleArray0, 1000.0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1833.0), (-1216.67), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setMaxEvaluations(760);
      graggBulirschStoerIntegrator0.clearEventHandlers();
      graggBulirschStoerIntegrator0.getEventHandlers();
      DummyStepHandler.getInstance();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (-1833.0));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(Double.NaN);
      gillIntegrator0.getEvaluations();
      gillIntegrator0.getMaxEvaluations();
      gillIntegrator0.clearStepHandlers();
      int int0 = 3;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(3).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      gillIntegrator0.clearStepHandlers();
      double double0 = 1.0;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (double) 3;
      try { 
        gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1000.0, doubleArray0, 1.0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 6
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(Double.NaN);
      gillIntegrator0.getEvaluations();
      gillIntegrator0.getMaxEvaluations();
      gillIntegrator0.clearStepHandlers();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-155.55582443);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (double) Integer.MAX_VALUE;
      doubleArray0[5] = (double) Integer.MAX_VALUE;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(Integer.MAX_VALUE, 0, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.getEventHandlers();
      DummyStepHandler.getInstance();
      gillIntegrator0.getCurrentSignedStepsize();
      gillIntegrator0.getName();
      graggBulirschStoerIntegrator0.setInterpolationControl(false, 491);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.integrate((ExpandableStatefulODE) null, (-949.6695));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1833.0));
      gillIntegrator0.getCurrentStepStart();
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(339.99572, Double.NaN, doubleArray0, doubleArray0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator1 = new GraggBulirschStoerIntegrator((-1833.0), (-1216.67), doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1216.67), doubleArray0, 5253.70735, doubleArray0);
      gillIntegrator0.getMaxEvaluations();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator2 = new GraggBulirschStoerIntegrator(312.9, (-1016.2177), 442.63883, 339.99572);
      StepNormalizer stepNormalizer0 = new StepNormalizer((-429.75), (FixedStepHandler) null);
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      gillIntegrator0.getCurrentSignedStepsize();
      gillIntegrator0.getName();
      graggBulirschStoerIntegrator1.setInterpolationControl(true, (-993));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(Double.NaN);
      gillIntegrator0.getEvaluations();
      gillIntegrator0.getMaxEvaluations();
      gillIntegrator0.setMaxEvaluations(0);
      gillIntegrator0.clearStepHandlers();
      int int0 = 3;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(3).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      doubleArray0[2] = 933.4136326120064;
      doubleArray0[3] = (-0.015319437748624402);
      doubleArray0[4] = 22.739487099350505;
      doubleArray0[5] = (double) Integer.MAX_VALUE;
      gillIntegrator0.getStepHandlers();
      try { 
        gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, Double.NaN, doubleArray0, 933.4136326120064, doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(Double.NaN);
      gillIntegrator0.getEvaluations();
      gillIntegrator0.getMaxEvaluations();
      gillIntegrator0.clearStepHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[6];
      double double0 = 933.4136326120064;
      double double1 = 1329.5749721;
      try { 
        gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, Double.NaN, doubleArray0, 1329.5749721, (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(Double.NaN);
      gillIntegrator0.getEvaluations();
      gillIntegrator0.getMaxEvaluations();
      gillIntegrator0.clearStepHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(3).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      double double0 = (-0.015319437748624402);
      // Undeclared exception!
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1707.0), doubleArray0, (double) Integer.MAX_VALUE, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1988.93);
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-1988.93));
      classicalRungeKuttaIntegrator0.setMaxEvaluations(0);
      double double0 = (-1.0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1.0), (-1988.93), doubleArray0, doubleArray0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      StepNormalizer stepNormalizer0 = new StepNormalizer((-1988.93), fixedStepHandler0, stepNormalizerMode0);
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1988.93));
      // Undeclared exception!
      try { 
        gillIntegrator0.integrate((FirstOrderDifferentialEquations) null, 1321.2, doubleArray0, (double) 1, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(375.0702216171);
      gillIntegrator0.getCurrentStepStart();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 375.0702216171;
      doubleArray0[1] = 375.0702216171;
      doubleArray0[2] = 375.0702216171;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1803.04), Double.NaN, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.getEventHandlers();
      DummyStepHandler.getInstance();
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.0, fixedStepHandler0, stepNormalizerMode0);
      stepNormalizer0.init(0.0, doubleArray0, (-2857.628523346));
      graggBulirschStoerIntegrator0.setOrderControl(2797, (-861.448358968), 2023);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator1 = new GraggBulirschStoerIntegrator((-1563.06934935603), 107.410749454561, 2023, (-1853.4885));
      graggBulirschStoerIntegrator1.addStepHandler(stepNormalizer0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(Double.NaN);
      gillIntegrator0.getEvaluations();
      gillIntegrator0.getMaxEvaluations();
      gillIntegrator0.clearStepHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      doubleArray0[2] = 933.4136326120064;
      doubleArray0[3] = (-0.015319437748624402);
      doubleArray0[4] = 22.739487099350505;
      doubleArray0[5] = (double) Integer.MAX_VALUE;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter1);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(22.739487099350505, (-0.015319437748624402), doubleArray0, doubleArray0);
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (-0.015319437748624402));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 6
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(Double.NaN);
      gillIntegrator0.getEvaluations();
      gillIntegrator0.getMaxEvaluations();
      gillIntegrator0.clearStepHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1988).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      doubleArray0[2] = 933.4136326120064;
      doubleArray0[3] = (-0.015319437748624402);
      doubleArray0[4] = 22.739487099350505;
      doubleArray0[5] = (double) Integer.MAX_VALUE;
      try { 
        gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, Double.NaN, doubleArray0, 933.4136326120064, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 3,976
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1988.93);
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-1988.93));
      classicalRungeKuttaIntegrator0.setMaxEvaluations(0);
      classicalRungeKuttaIntegrator0.setMaxEvaluations(1389);
      classicalRungeKuttaIntegrator0.getEvaluations();
      classicalRungeKuttaIntegrator0.getName();
      classicalRungeKuttaIntegrator0.getName();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0, 0.0, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 3
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(Double.NaN);
      gillIntegrator0.getEvaluations();
      gillIntegrator0.getMaxEvaluations();
      gillIntegrator0.clearStepHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(3).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      doubleArray0[2] = 933.4136326120064;
      doubleArray0[3] = (-0.015319437748624402);
      doubleArray0[4] = 22.739487099350505;
      doubleArray0[5] = (double) Integer.MAX_VALUE;
      // Undeclared exception!
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, Double.NaN, doubleArray0, 933.4136326120064, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double double0 = 402.77820632665;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(61.716856007108, 0.0, 3833.037736764945, 402.77820632665);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.BOTH;
      StepNormalizer stepNormalizer0 = new StepNormalizer((-44.330650163), fixedStepHandler0, stepNormalizerMode0, stepNormalizerBounds0);
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (-44.330650163));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 4730.77;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1.0, 1.0, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.getStepHandlers();
      graggBulirschStoerIntegrator0.getMaxEvaluations();
      graggBulirschStoerIntegrator0.setControlFactors(Integer.MAX_VALUE, 2.0, 4730.77, 0.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.setStabilityCheck(true, 1, 267, 1.0);
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler1, 0.0, 0.0, Integer.MAX_VALUE);
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 0.0, 4730.77, (-4676));
      graggBulirschStoerIntegrator0.setInterpolationControl(false, 267);
      graggBulirschStoerIntegrator0.clearEventHandlers();
      graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
      graggBulirschStoerIntegrator0.getEventHandlers();
      EventHandler eventHandler2 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler2, 1.0, 6.0, Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double double0 = 1415.1035385;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1415.1035385, 1415.1035385, 1415.1035385, 1415.1035385);
      dormandPrince853Integrator0.getEvaluations();
      dormandPrince853Integrator0.getMaxEvaluations();
      dormandPrince853Integrator0.getCurrentStepStart();
      double double1 = 0.0;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 568.7098228498, 0.0, 0);
      highamHall54Integrator0.setSafety(Double.NaN);
      double double2 = 280.5715;
      highamHall54Integrator0.setStepSizeControl(1000.0, 280.5715, 1415.1035385, 0.0);
      highamHall54Integrator0.getMaxEvaluations();
      highamHall54Integrator0.getOrder();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      highamHall54Integrator0.integrate(expandableStatefulODE0, 0.0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(Double.NaN);
      gillIntegrator0.getEvaluations();
      int int0 = gillIntegrator0.getMaxEvaluations();
      assertEquals(Integer.MAX_VALUE, int0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = (double) 0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0, Double.NaN, doubleArray0, doubleArray0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator1 = new GraggBulirschStoerIntegrator((-2.260957518848075E-281), 1.0, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.getEventHandlers();
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      graggBulirschStoerIntegrator0.addStepHandler(dummyStepHandler0);
      GillIntegrator gillIntegrator1 = new GillIntegrator((-2.260957518848075E-281));
      double double0 = gillIntegrator1.getCurrentSignedStepsize();
      assertEquals(Double.NaN, double0, 0.01);
      
      gillIntegrator1.getName();
      assertEquals(Double.NaN, gillIntegrator1.getCurrentStepStart(), 0.01);
      
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator2 = new GraggBulirschStoerIntegrator(0.0, (-1005.5575211909834), 0, Integer.MAX_VALUE);
      graggBulirschStoerIntegrator2.setInterpolationControl(true, (-2024));
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1.0, (-1.0), doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getOrder();
      assertEquals(1.0, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-2151.710703971);
      doubleArray0[1] = (-2151.710703971);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-2151.710703971);
      doubleArray0[4] = (-2151.710703971);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-2151.710703971), (-2151.710703971), doubleArray0, doubleArray0);
      dormandPrince853Integrator0.setMaxEvaluations(595);
      dormandPrince853Integrator0.setStepSizeControl(0.0, (-2151.710703971), 0.0, (-2151.710703971));
      dormandPrince853Integrator0.clearStepHandlers();
      dormandPrince853Integrator0.setMinReduction((-3628.273638));
      dormandPrince853Integrator0.getStepHandlers();
      dormandPrince853Integrator0.clearStepHandlers();
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2151.710703971), 0.0, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.getOrder();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      dormandPrince54Integrator0.addEventHandler(eventHandler0, 0.0, (-3628.273638), 5, (UnivariateSolver) null);
      // Undeclared exception!
      try { 
        dormandPrince54Integrator0.computeDerivatives(595, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(1.0);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1.0, 1.0, 1.0, 1.0);
      dormandPrince54Integrator0.setStepSizeControl(1.0, 1.0, (-30.674084731089398), (-30.674084731089398));
      dormandPrince54Integrator0.clearEventHandlers();
      dormandPrince54Integrator0.getStepHandlers();
      int int0 = dormandPrince54Integrator0.getOrder();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-5.685526961588504), (-5.685526961588504), (-5.685526961588504), 1.0);
      dormandPrince54Integrator0.clearEventHandlers();
      dormandPrince54Integrator0.getEvaluations();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      int int0 = (-1);
      dormandPrince54Integrator0.addEventHandler(eventHandler0, 960905.0, 1.0, (-1));
      dormandPrince54Integrator0.getEvaluations();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 960905.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.getStepHandlers();
      FixedStepHandler fixedStepHandler0 = null;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) (-1), doubleArray0, 1137963.0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-1456.202719443));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      BisectionSolver bisectionSolver0 = new BisectionSolver(0.0, Double.NaN);
      midpointIntegrator0.addEventHandler(eventHandler0, (-963.052882411033), 4215.776608, 0, (UnivariateSolver) bisectionSolver0);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1471.774), 0.0, (-1998.88483), (-1471.774));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      int int0 = 0;
      graggBulirschStoerIntegrator0.setOrderControl(0, 2.4936055526796523, 40.0);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      int int1 = 0;
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1471.774);
      doubleArray0[1] = (-1998.88483);
      doubleArray0[2] = (-1998.88483);
      double double0 = (-1.0);
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1471.774), doubleArray0, (-1.0), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(396.0, 396.0, 396.0, (-608.334161));
      int int0 = 0;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      graggBulirschStoerIntegrator0.setInitialStepSize((-1955.7));
      doubleArray0[1] = 396.0;
      doubleArray0[2] = 396.0;
      doubleArray0[3] = 1917.287683746268;
      doubleArray0[4] = (-608.334161);
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 396.0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = 396.0;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.8571428571428571;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      SecantSolver secantSolver0 = new SecantSolver();
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 0.0, 1917.287683746268, 0, (UnivariateSolver) secantSolver0);
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.computeDerivatives((-608.334161), doubleArray0, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = (-800.8436851236647);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1.0), (-800.8436851236647), (-800.8436851236647), (-1313.24001));
      graggBulirschStoerIntegrator0.getStepHandlers();
      int int0 = 88;
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 88);
      graggBulirschStoerIntegrator0.clearStepHandlers();
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.NEITHER;
      StepNormalizer stepNormalizer0 = new StepNormalizer(620.9352436418404, (FixedStepHandler) null, stepNormalizerMode0, stepNormalizerBounds0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1313.24001);
      doubleArray0[1] = 0.10416666666666667;
      doubleArray0[2] = (-800.8436851236647);
      doubleArray0[3] = 70.29020522559;
      // Undeclared exception!
      try { 
        stepNormalizer0.init(0.10416666666666667, doubleArray0, 1000.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.sampling.StepNormalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2.4;
      doubleArray0[1] = 2.4;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 2.4;
      doubleArray1[1] = 2.4;
      doubleArray1[2] = 2.4;
      doubleArray1[3] = 23.0;
      double double0 = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 2.4;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(2.4, 1583.6, doubleArray0, doubleArray1);
      dormandPrince54Integrator0.getEvaluations();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      dormandPrince54Integrator0.getStepHandlers();
      double double1 = (-115.5595132354);
      boolean boolean0 = false;
      int int0 = (-934);
      // Undeclared exception!
      try { 
        dormandPrince54Integrator0.initializeStep(false, (-934), doubleArray0, 2.376, doubleArray1, doubleArray0, doubleArray0, doubleArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0.0);
      midpointIntegrator0.setMaxEvaluations(2443);
      int int0 = midpointIntegrator0.getEvaluations();
      midpointIntegrator0.getName();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 2443;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 2443;
      doubleArray0[3] = (double) 0;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(2443, 2443, doubleArray0, doubleArray0);
      int int1 = dormandPrince54Integrator0.getOrder();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1227.2433));
      // Undeclared exception!
      try { 
        gillIntegrator0.computeDerivatives((-505.960581481), (double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double double0 = 1000.0;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1000.0, 0.0, 1000.0, 1000.0);
      int int0 = (-1728);
      dormandPrince853Integrator0.setMaxEvaluations((-1728));
      double double1 = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1000.0, 0.0, (-1728), 0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double double2 = (-4626.6010340515);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (-4626.6010340515));
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(375.0702216171);
      gillIntegrator0.getCurrentStepStart();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 375.0702216171;
      doubleArray0[1] = 375.0702216171;
      doubleArray0[2] = 375.0702216171;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1803.04), Double.NaN, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.getEventHandlers();
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      graggBulirschStoerIntegrator0.addStepHandler(dummyStepHandler0);
      gillIntegrator0.getCurrentSignedStepsize();
      gillIntegrator0.getName();
      graggBulirschStoerIntegrator0.setInterpolationControl(false, 0);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double double0 = (-1.3333333333333333);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1.3333333333333333), (-1.3333333333333333), (-1.3333333333333333), 242.28349177525817);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1430.7175041264504;
      doubleArray0[1] = 242.28349177525817;
      doubleArray0[2] = 242.28349177525817;
      doubleArray0[3] = 242.28349177525817;
      doubleArray0[4] = 6.283185307179586;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1.3333333333333333), (-1.3333333333333333), doubleArray0, doubleArray0);
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      DummyStepHandler.getInstance();
      DummyStepHandler.getInstance();
      graggBulirschStoerIntegrator0.addStepHandler(dummyStepHandler0);
      int int0 = 0;
      graggBulirschStoerIntegrator0.setStabilityCheck(false, 0, 2047, 728.537085991355);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.getCompleteState();
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 1338.14608819291);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 5
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      GillIntegrator gillIntegrator0 = new GillIntegrator(339.99572);
      double double0 = 1.0;
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
      try { 
        gillIntegrator0.integrate((FirstOrderDifferentialEquations) null, (-1833.0), doubleArray0, 1.0, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double double0 = (-1988.93);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1988.93);
      doubleArray0[1] = (-1988.93);
      doubleArray0[2] = (-1988.93);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1988.93), (-1988.93), doubleArray0, doubleArray0);
      FirstOrderDifferentialEquations firstOrderDifferentialEquations0 = null;
      double double1 = 2058.0;
      // Undeclared exception!
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) null, 2058.0, doubleArray0, (-1988.93), doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = null;
      try {
        adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(0, 264.08, 264.08, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // multistep method needs at least 0 previous steps, got 2
         //
         verifyException("org.apache.commons.math3.ode.MultistepIntegrator", e);
      }
  }
}
