/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 22:34:15 GMT 2021
 */

package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.math3.analysis.polynomials.PolynomialFunctionLagrangeForm;
import org.apache.commons.math3.analysis.solvers.BrentSolver;
import org.apache.commons.math3.analysis.solvers.MullerSolver;
import org.apache.commons.math3.analysis.solvers.PegasusSolver;
import org.apache.commons.math3.analysis.solvers.RegulaFalsiSolver;
import org.apache.commons.math3.analysis.solvers.SecantSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator;
import org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.EulerIntegrator;
import org.apache.commons.math3.ode.nonstiff.GillIntegrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.nonstiff.MidpointIntegrator;
import org.apache.commons.math3.ode.sampling.DummyStepHandler;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.StepHandler;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.apache.commons.math3.ode.sampling.StepNormalizerBounds;
import org.apache.commons.math3.ode.sampling.StepNormalizerMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegrator_ESTest extends AbstractIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 4362;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(4362).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 4362;
      doubleArray0[1] = (double) 4362;
      doubleArray0[3] = 429.501;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(524.4011846999999, 1000.0, doubleArray0, doubleArray0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        highamHall54Integrator0.integrate(expandableStatefulODE0, 4.547473508864641E-10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8,724 != 4
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator((-2952.81));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      eulerIntegrator0.setMaxEvaluations(252);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.getCompleteState();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      eulerIntegrator0.addEventHandler(eventHandler0, 0.6729245185852051, (-2952.81), (-1));
      try { 
        eulerIntegrator0.integrate(expandableStatefulODE0, 658.487024);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (252) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator((-2952.81));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.getCompleteState();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(8.881784197001252E-13, (-2952.81)).when(eventHandler0).g(anyDouble() , any(double[].class));
      eulerIntegrator0.addEventHandler(eventHandler0, 0.6517757177352905, 2319.519547487048, (-2767));
      try { 
        eulerIntegrator0.integrate(expandableStatefulODE0, 0.0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-2,767) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator((-2952.81));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.getCompleteState();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((double)5, (double)5, (double)5, (-133.0), (-133.0)).when(eventHandler0).g(anyDouble() , any(double[].class));
      int int0 = 186;
      eulerIntegrator0.addEventHandler(eventHandler0, 647.588235193, (-2939.90735952), 186);
      try { 
        eulerIntegrator0.integrate(expandableStatefulODE0, (-2952.81));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [\uFFFD, \uFFFD], values: [-133, -133]
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1011.83589, (-2573.4167057), (-1860.08), (-2354.378919));
      DormandPrince54Integrator dormandPrince54Integrator1 = new DormandPrince54Integrator((-1457), (-2573.4167057), (-2573.4167057), (-1430.579));
      double[] doubleArray0 = new double[0];
      Double double0 = new Double(7.657270000401296);
      DormandPrince54Integrator dormandPrince54Integrator2 = new DormandPrince54Integrator(1578.0459861169463, (-2354.378919), 491.83653652, (-1457));
      dormandPrince54Integrator2.getOrder();
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(4.2303826056297614E-123);
      try { 
        eulerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) double0, doubleArray0, 7.657270000401296, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator((-2952.813125696048));
      double double0 = (-1036.84536);
      ExpandableStatefulODE expandableStatefulODE0 = null;
      // Undeclared exception!
      try { 
        eulerIntegrator0.integrate((ExpandableStatefulODE) null, (-1036.84536));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator((-2952.81));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.getCompleteState();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      eulerIntegrator0.addEventHandler(eventHandler0, 0.6517757177352905, 2319.519547487048, (-2767));
      eulerIntegrator0.integrate(expandableStatefulODE0, 0.0);
      eulerIntegrator0.getCurrentSignedStepsize();
      double double0 = 38.12;
      eulerIntegrator0.integrate(expandableStatefulODE0, double0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator((-2952.813125696048));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      eulerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1000.0, doubleArray0, (-633.293578209), doubleArray0);
      eulerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-2952.813125696048), doubleArray0, (-633.293578209), doubleArray0);
      eulerIntegrator0.getStepHandlers();
      eulerIntegrator0.getMaxEvaluations();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator((-2952.813125696048));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      eulerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-2952.813125696048), doubleArray0, (-633.293578209), doubleArray0);
      eulerIntegrator0.getStepHandlers();
      eulerIntegrator0.computeDerivatives((-2952.813125696048), doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator((-2952.813125696048));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      eulerIntegrator0.addEventHandler(eventHandler0, (-3810.0), 1.0, 0);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      eulerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-2952.813125696048), doubleArray0, (-633.293578209), doubleArray0);
      eulerIntegrator0.getStepHandlers();
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = null;
      try {
        adamsMoultonIntegrator0 = new AdamsMoultonIntegrator((-3231), 1.0, (-3231), (-13.0), 980.1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // multistep method needs at least -3,231 previous steps, got 2
         //
         verifyException("org.apache.commons.math3.ode.MultistepIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 0.0, (-2354.378919), (-2354.378919));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      highamHall54Integrator0.addEventHandler(eventHandler0, (-1430.579), (-1266.649692689117), (-1457));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1011.83589, (-2573.4167057), (-1860.08), (-2354.378919));
      DormandPrince54Integrator dormandPrince54Integrator1 = new DormandPrince54Integrator((-1457), (-2573.4167057), (-2573.4167057), (-1430.579));
      dormandPrince54Integrator1.getEvaluations();
      double[] doubleArray0 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator2 = new DormandPrince54Integrator(1011.83589, 491.83653652, 1.4521887058451231E-183, 1859.68);
      dormandPrince54Integrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1860.08), doubleArray0, (-1430.579), doubleArray0);
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator((-5387.600848));
      eulerIntegrator0.getName();
      dormandPrince54Integrator1.getMaxEvaluations();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 0.0, (-2354.378919), (-2354.378919));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      highamHall54Integrator0.addEventHandler(eventHandler0, (-1430.579), (-1266.649692689117), (-1457));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1011.83589, (-2573.4167057), (-1860.08), (-2354.378919));
      DormandPrince54Integrator dormandPrince54Integrator1 = new DormandPrince54Integrator((-1457), (-2573.4167057), (-2573.4167057), (-1430.579));
      double[] doubleArray0 = new double[0];
      dormandPrince54Integrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1.4521887058451231E-183, doubleArray0, (double) 0, doubleArray0);
      DormandPrince54Integrator dormandPrince54Integrator2 = new DormandPrince54Integrator(1578.0459861169463, (-2354.378919), 491.83653652, (-1457));
      dormandPrince54Integrator2.getOrder();
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(4.2303826056297614E-123);
      try { 
        eulerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 0.0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double double0 = 989.5241760678426;
      double double1 = (-25.1102205313);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(193.55221, 193.55221, (-25.1102205313), (-1.0));
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 710.0163000001137;
      doubleArray1[1] = 193.55221;
      doubleArray1[2] = (-2156.989194896);
      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-2573.4167057), doubleArray0, 487.4347053, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator((-2952.813125696048));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      eulerIntegrator0.addEventHandler(eventHandler0, 1577.7196140100764, Double.NaN, (-3141));
      eulerIntegrator0.getEventHandlers();
      eulerIntegrator0.getName();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2.561702766944378E139;
      doubleArray0[1] = 2.561702766944378E139;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2.561702766944378E139, 2.561702766944378E139, doubleArray0, doubleArray0);
      double double0 = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2.561702766944378E139, 2.561702766944378E139, 0.0, 2.561702766944378E139);
      boolean boolean0 = false;
      int int0 = Integer.MAX_VALUE;
      dormandPrince853Integrator0.setMaxEvaluations(1767);
      graggBulirschStoerIntegrator0.setStabilityCheck(false, 1, Integer.MAX_VALUE, Integer.MAX_VALUE);
      graggBulirschStoerIntegrator0.getStepHandlers();
      graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-222.1252766641), doubleArray0, 1577.7196140100764, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-2952.813125696048), (-2952.813125696048), (-2952.813125696048), (-2952.813125696048));
          double double0 = (-1430.579);
          double double1 = (-1266.649692689117);
          EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
          highamHall54Integrator0.addEventHandler(eventHandler0, 149.657, 149.657, (-1));
          SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
          doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
          FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
          double double2 = 491.83653652;
          DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1577.7196140100764, (-1266.649692689117), (-1860.08), 491.83653652);
          double[] doubleArray0 = new double[0];
          // Undeclared exception!
          dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1430.579), doubleArray0, 149.657, doubleArray0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, (-192.6913412674), (-192.6913412674), 78.995166471);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      PegasusSolver pegasusSolver0 = new PegasusSolver(710.0163000001137);
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (-192.6913412674), (-192.6913412674), 5, (UnivariateSolver) pegasusSolver0);
      double double0 = graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2134.1;
      doubleArray0[1] = 2134.1;
      doubleArray0[2] = 2134.1;
      doubleArray0[3] = 2134.1;
      doubleArray0[4] = 2134.1;
      doubleArray0[5] = 2134.1;
      doubleArray0[6] = 2134.1;
      doubleArray0[7] = 2134.1;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(2134.1, 2134.1, doubleArray0, doubleArray0);
      double double0 = 1.0;
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      StepNormalizer stepNormalizer0 = new StepNormalizer(1.0, fixedStepHandler0, stepNormalizerMode0);
      highamHall54Integrator0.addStepHandler(stepNormalizer0);
      highamHall54Integrator0.getName();
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(3799, 2134.1, Double.NaN, 2134.1, 2134.1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator((-2952.813125696048));
      eulerIntegrator0.getName();
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 0.0, (-2354.378919), (-1162.6964223));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      highamHall54Integrator0.addEventHandler(eventHandler0, (-1430.579), (-1266.649692689117), (-1457));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1011.83589, (-2573.4167057), (-1860.08), (-2354.378919));
      double[] doubleArray0 = new double[0];
      double double0 = dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 487.4347053, doubleArray0, 1011.83589, doubleArray0);
      DormandPrince54Integrator dormandPrince54Integrator1 = new DormandPrince54Integrator(1.0, (-2573.4167057), 0.0, 1.0);
      dormandPrince54Integrator1.getOrder();
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator((-710.0163));
      double double1 = eulerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1578.150152783613, doubleArray0, 0.43053877353668213, doubleArray0);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator((-2952.81));
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-1012.304), (-823.95822425), 1011.83589, (-388.2363323722489));
      DormandPrince54Integrator dormandPrince54Integrator1 = new DormandPrince54Integrator((-1253.050810919521), 5747.6777881274, 4362, (-1012.304));
      Double double0 = new Double(1.4521887058451231E-183);
      DormandPrince54Integrator dormandPrince54Integrator2 = new DormandPrince54Integrator(2971.245933802, (-1012.304), (-1012.304), 1193.805621263);
      dormandPrince54Integrator0.getOrder();
      EulerIntegrator eulerIntegrator1 = new EulerIntegrator((-1012.304));
      // Undeclared exception!
      try { 
        eulerIntegrator0.integrate((FirstOrderDifferentialEquations) null, 1.4521887058451231E-183, (double[]) null, (-2952.81), (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(Double.NaN);
      eulerIntegrator0.getEventHandlers();
      eulerIntegrator0.getCurrentSignedStepsize();
      eulerIntegrator0.clearStepHandlers();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, (-940.082119), 0.0);
      BrentSolver brentSolver0 = new BrentSolver((-2255.37538512757));
      brentSolver0.getEvaluations();
      graggBulirschStoerIntegrator0.addEventHandler((EventHandler) null, 236.5542566606154, 236.5542566606154, 1722, (UnivariateSolver) brentSolver0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1722).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 236.5542566606154;
      doubleArray0[1] = (double) 1722;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-2255.37538512757);
      double double0 = 582.79;
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      eulerIntegrator0.integrate(expandableStatefulODE0, 0.0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double double0 = 1242.6428561022;
      GillIntegrator gillIntegrator0 = new GillIntegrator(1242.6428561022);
      double double1 = (-2758.83);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(100.0, (-2758.83), (-1082.3), 1242.6428561022);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(9).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1082.3);
      doubleArray0[1] = 1242.6428561022;
      doubleArray0[2] = 1448.292;
      doubleArray0[3] = (-2758.83);
      doubleArray0[4] = (-2758.83);
      doubleArray0[5] = (-1233.9829364324492);
      doubleArray0[6] = 1242.6428561022;
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-2758.83), doubleArray0, 1395.53, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 18
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(0.0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, 1.35, 0.0);
      graggBulirschStoerIntegrator0.setStabilityCheck(false, 175, 0, 0.0);
      graggBulirschStoerIntegrator0.setOrderControl(0, (-2227.4705384), (-194.302));
      eulerIntegrator0.setMaxEvaluations((-277));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      eulerIntegrator0.addEventHandler(eventHandler0, (double) (-277), (-2227.4705384), 0);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2089.710458087, 1000.0, 1000.0, 2089.710458087);
      dormandPrince853Integrator0.setMaxEvaluations(0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      PegasusSolver pegasusSolver0 = new PegasusSolver(0.0, 1.0);
      dormandPrince853Integrator0.addEventHandler(eventHandler0, (double) 0, 1000.0, 0, (UnivariateSolver) pegasusSolver0);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 0.0, (-2354.378919), (-1162.6964223));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      highamHall54Integrator0.addEventHandler(eventHandler0, (-1430.579), (-1266.649692689117), (-1457));
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, (-1457), (-1430.579));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      graggBulirschStoerIntegrator0.setStabilityCheck(false, 1320, (-1457), (-1430.579));
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 0.0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.5;
      doubleArray0[1] = 1.5;
      doubleArray0[2] = 2020.13;
      doubleArray0[3] = 1.5;
      doubleArray0[4] = 1.5;
      doubleArray0[5] = 1.5;
      doubleArray0[6] = 1.5;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1.5, 1.5, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      dormandPrince853Integrator0.getEventHandlers();
      expandableStatefulODE0.getSecondaryMappers();
      try { 
        dormandPrince853Integrator0.integrate(expandableStatefulODE0, 107.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 7
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double double0 = 0.50625;
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0.50625);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.50625;
      doubleArray0[1] = 0.50625;
      doubleArray0[2] = 1474.1311;
      doubleArray0[3] = 0.50625;
      doubleArray0[4] = 0.50625;
      doubleArray0[5] = 0.50625;
      doubleArray0[6] = 1474.1311;
      doubleArray0[7] = 0.50625;
      doubleArray0[8] = 0.50625;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.50625, 1474.1311, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      graggBulirschStoerIntegrator0.getEvaluations();
      graggBulirschStoerIntegrator0.clearStepHandlers();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.50625, doubleArray0, 0.50625, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator((-2952.813125696048));
      eulerIntegrator0.getEventHandlers();
      int int0 = eulerIntegrator0.getMaxEvaluations();
      assertEquals(Integer.MAX_VALUE, int0);
      
      eulerIntegrator0.getName();
      eulerIntegrator0.getEvaluations();
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(602.43214, 602.43214, 1.0, 602.43214);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 602.43214;
      doubleArray0[1] = 602.43214;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 602.43214;
      doubleArray0[6] = 1.0;
      doubleArray0[7] = 1.0;
      doubleArray0[8] = 1.0;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 602.43214;
      doubleArray1[2] = 602.43214;
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = 1.0;
      doubleArray1[5] = (-11.7789);
      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, (-11.16), doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double double0 = 652.7;
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(652.7);
      midpointIntegrator0.clearEventHandlers();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      midpointIntegrator0.getEventHandlers();
      MullerSolver mullerSolver0 = new MullerSolver(982.0, 0.3076923076923077);
      mullerSolver0.getMaxEvaluations();
      midpointIntegrator0.addEventHandler(eventHandler0, 0.3076923076923077, 652.7, 2359, (UnivariateSolver) mullerSolver0);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(982.0, 652.7, 0, 0.2222222222222222);
      highamHall54Integrator0.getOrder();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1.0, 0, 0.0, 652.7);
      graggBulirschStoerIntegrator0.setOrderControl((-1), 1940.517101, (-1));
      int int0 = 858;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 2359;
      doubleArray0[1] = 1940.517101;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.3076923076923077;
      doubleArray0[4] = 1940.517101;
      doubleArray0[5] = (double) 2359;
      doubleArray0[6] = (double) 5;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (double) 5;
      PolynomialFunctionLagrangeForm polynomialFunctionLagrangeForm0 = null;
      try {
        polynomialFunctionLagrangeForm0 = new PolynomialFunctionLagrangeForm(doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // points 0 and 1 are not strictly increasing (0 >= 0)
         //
         verifyException("org.apache.commons.math3.util.MathArrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1640.7501138;
      doubleArray0[1] = 1640.7501138;
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 1640.7501138;
      doubleArray1[1] = 1640.7501138;
      doubleArray1[2] = 1640.7501138;
      doubleArray1[3] = 1640.7501138;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1640.7501138, 1640.7501138, doubleArray0, doubleArray1);
      highamHall54Integrator0.getEventHandlers();
      double double0 = (-118.1);
      FirstOrderConverter firstOrderConverter0 = null;
      try {
        firstOrderConverter0 = new FirstOrderConverter((SecondOrderDifferentialEquations) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.FirstOrderConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-643.0), (-643.0), (-643.0), (-643.0));
      graggBulirschStoerIntegrator0.getEventHandlers();
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.NEITHER;
      StepNormalizer stepNormalizer0 = new StepNormalizer((-1881.0), fixedStepHandler0, stepNormalizerMode0, stepNormalizerBounds0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1881.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1881.0);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-1.0);
      doubleArray0[5] = (-643.0);
      doubleArray0[6] = (-643.0);
      stepNormalizer0.init((-1.0), doubleArray0, 0.0);
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1881.0);
      doubleArray1[1] = (-643.0);
      doubleArray1[2] = (-1881.0);
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (-643.0);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1881.0), (-1881.0), doubleArray1, doubleArray1);
      int int0 = highamHall54Integrator0.getOrder();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double double0 = (-0.2908093278463649);
      double double1 = 0.0;
      double double2 = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-0.2908093278463649), 0.0, 0.0, (-0.2908093278463649));
      graggBulirschStoerIntegrator0.getMaxEvaluations();
      graggBulirschStoerIntegrator0.clearStepHandlers();
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 181);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double3 = (-1691.0);
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (-1691.0), (double) Integer.MAX_VALUE, Integer.MAX_VALUE);
      graggBulirschStoerIntegrator0.setControlFactors((-1691.0), 5091.1238587403, 0.0, 181);
      graggBulirschStoerIntegrator0.setMaxEvaluations(1186);
      int int0 = 0;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(0.0, 881.9062566);
      graggBulirschStoerIntegrator0.addEventHandler((EventHandler) null, (-64.1043000698535), 0.0, 0, (UnivariateSolver) regulaFalsiSolver0);
      ExpandableStatefulODE expandableStatefulODE0 = null;
      try {
        expandableStatefulODE0 = new ExpandableStatefulODE((FirstOrderDifferentialEquations) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.ExpandableStatefulODE", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(0.0);
      eulerIntegrator0.getStepHandlers();
      eulerIntegrator0.getMaxEvaluations();
      eulerIntegrator0.setMaxEvaluations(1767);
      eulerIntegrator0.clearStepHandlers();
      eulerIntegrator0.getCurrentStepStart();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3599.939500695459;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setControlFactors((-1251.4153918), 3599.939500695459, (-1251.4153918), 1330.00037954);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-136.40549507611692);
      doubleArray0[1] = (-136.40549507611692);
      doubleArray0[2] = (-136.40549507611692);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-136.40549507611692), (-136.40549507611692), doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      SecantSolver secantSolver0 = new SecantSolver(0.0);
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (-94.718427906827), (-136.40549507611692), (-3600), (UnivariateSolver) secantSolver0);
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(5, (-3600), (-899.1372111), doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        adamsBashforthIntegrator0.integrate((ExpandableStatefulODE) null, 566.6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(Double.NaN);
      eulerIntegrator0.getEventHandlers();
      double double0 = eulerIntegrator0.getCurrentSignedStepsize();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, (-940.082119), 0.0);
      BrentSolver brentSolver0 = new BrentSolver((-2255.37538512757));
      graggBulirschStoerIntegrator0.addEventHandler((EventHandler) null, 236.5542566606154, 236.5542566606154, 1722, (UnivariateSolver) brentSolver0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator1 = new GraggBulirschStoerIntegrator(3919.91887458594, (-6.793094743406533E110), 597.04, (-2431.9172889144));
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(236.5542566606154, (-1463.98547), 0.0, 0.0);
      int int0 = graggBulirschStoerIntegrator0.getMaxEvaluations();
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1369.8;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1369.8;
      doubleArray0[3] = 1369.8;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1369.8;
      doubleArray0[7] = 1369.8;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 1369.8, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setControlFactors(1369.8, 0.0, (-4329.5191789), 0.0);
      graggBulirschStoerIntegrator0.setStepSizeControl(0.0, (-496.42593), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.clearStepHandlers();
      graggBulirschStoerIntegrator0.setOrderControl((-440), 2937500.0, 0.0);
      graggBulirschStoerIntegrator0.setStabilityCheck(true, 207, 0, Double.NaN);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-2184.570145515081), (-707.5367), doubleArray0, doubleArray0);
      highamHall54Integrator0.getEventHandlers();
      highamHall54Integrator0.clearEventHandlers();
      highamHall54Integrator0.getOrder();
      highamHall54Integrator0.getOrder();
      Collection<StepHandler> collection0 = graggBulirschStoerIntegrator0.getStepHandlers();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-927.6645);
      doubleArray0[1] = (-927.6645);
      doubleArray0[2] = (-927.6645);
      doubleArray0[3] = (-927.6645);
      doubleArray0[4] = (-789.3660952);
      doubleArray0[5] = (-927.6645);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (-927.6645);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-927.6645), 0.0, doubleArray0, doubleArray0);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-927.6645), 4182.661845, (-1213.395422815527), 1019.5136034386247);
      dormandPrince853Integrator0.getStepHandlers();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      dormandPrince853Integrator0.addEventHandler(eventHandler0, (-927.6645), 0.0, 1058);
      int int0 = dormandPrince853Integrator0.getOrder();
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double double0 = 3706.7062834;
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(3706.7062834);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3706.7062834;
      doubleArray0[1] = 3706.7062834;
      doubleArray0[2] = 3706.7062834;
      doubleArray0[3] = 3706.7062834;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 3706.7062834;
      doubleArray1[1] = (-44.0);
      doubleArray1[2] = 3706.7062834;
      doubleArray1[3] = 3706.7062834;
      doubleArray1[4] = 3706.7062834;
      doubleArray1[5] = 3706.7062834;
      doubleArray1[6] = 3706.7062834;
      doubleArray1[7] = 3706.7062834;
      doubleArray1[8] = 3706.7062834;
      // Undeclared exception!
      try { 
        midpointIntegrator0.computeDerivatives(3706.7062834, doubleArray1, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-608.814);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-608.814), (-608.814), doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double double0 = 0.0;
      double double1 = (-1271.270838142);
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.initializeStep(false, (-594), doubleArray0, (-594), doubleArray0, doubleArray0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2952.813125696048), (-2952.813125696048), (-2952.813125696048), 840.56078);
      dormandPrince54Integrator0.getCurrentStepStart();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 262.726;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 840.56078;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1580.2359999999999, 262.726, doubleArray0, doubleArray0);
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      graggBulirschStoerIntegrator0.addStepHandler(dummyStepHandler0);
      int int0 = dormandPrince54Integrator0.getMaxEvaluations();
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1775.1;
      doubleArray0[1] = 1775.1;
      doubleArray0[2] = 1775.1;
      doubleArray0[3] = 73.0;
      doubleArray0[4] = 1775.1;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1775.1, 73.0, doubleArray0, doubleArray0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer0 = new StepNormalizer(1117.646337, fixedStepHandler0);
      highamHall54Integrator0.addStepHandler(stepNormalizer0);
      assertEquals(359.97541582724784, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      int int0 = (-1413);
      double double0 = 3396.5;
      double double1 = 0.0;
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = null;
      try {
        adamsBashforthIntegrator0 = new AdamsBashforthIntegrator((-1413), 3396.5, (-1413), (-1413), 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // multistep method needs at least -1,413 previous steps, got 2
         //
         verifyException("org.apache.commons.math3.ode.MultistepIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator((-3458.8));
      eulerIntegrator0.getCurrentSignedStepsize();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 178;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-3458.8);
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(178, 178, Double.NaN, doubleArray0, doubleArray0);
  }
}
