/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 22:48:10 GMT 2021
 */

package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver;
import org.apache.commons.math3.analysis.solvers.IllinoisSolver;
import org.apache.commons.math3.analysis.solvers.MullerSolver;
import org.apache.commons.math3.analysis.solvers.MullerSolver2;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator;
import org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.EulerIntegrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator;
import org.apache.commons.math3.ode.sampling.DummyStepHandler;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.StepHandler;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.apache.commons.math3.ode.sampling.StepNormalizerBounds;
import org.apache.commons.math3.ode.sampling.StepNormalizerMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegrator_ESTest extends AbstractIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      assertNotNull(expandableStatefulODE0);
      
      double double0 = (-3524.535532865266);
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-3524.535532865266));
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      assertNotNull(threeEighthesIntegrator0);
      
      int int0 = 1;
      threeEighthesIntegrator0.setMaxEvaluations(1);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      
      double double1 = 189.77522741899998;
      try { 
        threeEighthesIntegrator0.integrate(expandableStatefulODE0, 189.77522741899998);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (1) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator((-1200.0));
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertNotNull(eulerIntegrator0);
      
      eulerIntegrator0.clearEventHandlers();
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      double double0 = eulerIntegrator0.getCurrentStepStart();
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(369.70419763, 1189.775227419, 1189.775227419, 369.70419763);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(1189.775227419, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(663.2231116396595, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(369.70419763, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertNotNull(dormandPrince853Integrator0);
      
      int int0 = 2261;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(2261).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(4522, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      double[] doubleArray0 = new double[0];
      double double0 = (-1572.81740660985);
      double double1 = (-1523.0);
      DormandPrince853Integrator dormandPrince853Integrator1 = new DormandPrince853Integrator((-1572.81740660985), 2261, (-1523.0), 2.2737367544323206E-10);
      assertEquals(1572.81740660985, dormandPrince853Integrator1.getMinStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator1.getCurrentStepStart(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator1.getMinReduction(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator1.getMaxGrowth(), 0.01);
      assertEquals(8, dormandPrince853Integrator1.getOrder());
      assertEquals(1885.7730924861746, dormandPrince853Integrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(2261.0, dormandPrince853Integrator1.getMaxStep(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator1.getSafety(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator1.getName());
      assertFalse(dormandPrince853Integrator1.equals((Object)dormandPrince853Integrator0));
      assertNotNull(dormandPrince853Integrator1);
      
      dormandPrince853Integrator1.setMinReduction(2.2737367544323206E-10);
      assertEquals(1572.81740660985, dormandPrince853Integrator1.getMinStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator1.getCurrentStepStart(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator1.getMaxGrowth(), 0.01);
      assertEquals(8, dormandPrince853Integrator1.getOrder());
      assertEquals(2.2737367544323206E-10, dormandPrince853Integrator1.getMinReduction(), 0.01);
      assertEquals(1885.7730924861746, dormandPrince853Integrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(2261.0, dormandPrince853Integrator1.getMaxStep(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator1.getSafety(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator1.getName());
      assertNotSame(dormandPrince853Integrator1, dormandPrince853Integrator0);
      assertFalse(dormandPrince853Integrator1.equals((Object)dormandPrince853Integrator0));
      
      int int1 = 0;
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      dormandPrince853Integrator1.setMaxEvaluations(0);
      assertEquals(1572.81740660985, dormandPrince853Integrator1.getMinStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator1.getCurrentStepStart(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator1.getMaxGrowth(), 0.01);
      assertEquals(8, dormandPrince853Integrator1.getOrder());
      assertEquals(2.2737367544323206E-10, dormandPrince853Integrator1.getMinReduction(), 0.01);
      assertEquals(1885.7730924861746, dormandPrince853Integrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(2261.0, dormandPrince853Integrator1.getMaxStep(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator1.getSafety(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator1.getName());
      assertNotSame(dormandPrince853Integrator1, dormandPrince853Integrator0);
      assertFalse(dormandPrince853Integrator1.equals((Object)dormandPrince853Integrator0));
      
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      assertEquals(0, firstOrderConverter1.getDimension());
      assertFalse(firstOrderConverter1.equals((Object)firstOrderConverter0));
      assertNotNull(firstOrderConverter1);
      
      try { 
        dormandPrince853Integrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter1, (-679.9483), doubleArray0, (-1523.0), doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(2261).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(4522, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      double[] doubleArray0 = new double[0];
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      assertEquals(0, firstOrderConverter1.getDimension());
      assertFalse(firstOrderConverter1.equals((Object)firstOrderConverter0));
      assertNotNull(firstOrderConverter1);
      
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-3095.8243), (-278.3), (-3095.8243), (-278.3));
      assertEquals(928.2068210749154, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(3095.8243, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(278.3, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertNotNull(dormandPrince853Integrator0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations2 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations2).getDimension();
      FirstOrderConverter firstOrderConverter2 = new FirstOrderConverter(secondOrderDifferentialEquations2);
      assertEquals(0, firstOrderConverter2.getDimension());
      assertFalse(firstOrderConverter2.equals((Object)firstOrderConverter1));
      assertFalse(firstOrderConverter2.equals((Object)firstOrderConverter0));
      assertNotNull(firstOrderConverter2);
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1.8576309291617257E302;
      doubleArray1[1] = (double) 2261;
      doubleArray1[2] = (-1572.81740660985);
      doubleArray1[3] = 1.8576309291617257E302;
      doubleArray1[4] = 179.75;
      doubleArray1[5] = (-278.3);
      doubleArray1[6] = 179.75;
      doubleArray1[7] = (-1494.91857216);
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter2, 179.75, doubleArray0, (-3095.8243), doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, (-3284.0), (-3284.0), 112847.0);
      assertEquals(3284.0, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(0.0, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(0.0, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertNotNull(dormandPrince54Integrator0);
      
      dormandPrince54Integrator0.setInitialStepSize((-3284.0));
      assertEquals(3284.0, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(0.0, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(0.0, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      
      double double0 = dormandPrince54Integrator0.getCurrentSignedStepsize();
      assertEquals(3284.0, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(0.0, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(0.0, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2.2737367544323206E-10, 112847.0, Double.NaN, (-2522.282));
      assertEquals(112847.0, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(0.005065415792681032, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(2.2737367544323206E-10, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertNotNull(dormandPrince853Integrator0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      dormandPrince853Integrator0.setMinReduction(655.15732971);
      assertEquals(112847.0, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(0.005065415792681032, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(2.2737367544323206E-10, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(655.15732971, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      double[] doubleArray0 = new double[0];
      double double1 = dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 5.32346341339996E-260, doubleArray0);
      assertEquals(112847.0, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(0.005065415792681032, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(2.2737367544323206E-10, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(655.15732971, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(double1, double0, 0.01);
      assertEquals(5.32346341339996E-260, double1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01);
      assertEquals(5, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(1.0E-6, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01);
      assertNotNull(bracketingNthOrderBrentSolver0);
      
      // Undeclared exception!
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 879.59564, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(2261).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(4522, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1572.81740660985), 2261, (-1523.0), 2.2737367544323206E-10);
      assertEquals(2261.0, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(1885.7730924861746, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(1572.81740660985, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertNotNull(dormandPrince853Integrator0);
      
      dormandPrince853Integrator0.setMinReduction(2.2737367544323206E-10);
      assertEquals(2261.0, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(1885.7730924861746, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(1572.81740660985, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(2.2737367544323206E-10, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      assertEquals(0, firstOrderConverter1.getDimension());
      assertFalse(firstOrderConverter1.equals((Object)firstOrderConverter0));
      assertNotNull(firstOrderConverter1);
      
      double double0 = dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter1, (-679.9483), doubleArray0, (-1523.0), doubleArray0);
      assertEquals(2261.0, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(1885.7730924861746, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(1572.81740660985, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(2.2737367544323206E-10, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0, firstOrderConverter1.getDimension());
      assertNotSame(firstOrderConverter1, firstOrderConverter0);
      assertFalse(firstOrderConverter1.equals((Object)firstOrderConverter0));
      assertEquals((-1523.0), double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      MullerSolver2 mullerSolver2_0 = new MullerSolver2();
      assertEquals(1.0E-14, mullerSolver2_0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-6, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getMax(), 0.01);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getMin(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getStartValue(), 0.01);
      assertNotNull(mullerSolver2_0);
      
      Collection<EventHandler> collection0 = dormandPrince853Integrator0.getEventHandlers();
      assertEquals(2261.0, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(1885.7730924861746, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(1572.81740660985, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(2.2737367544323206E-10, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertNotNull(collection0);
      
      dormandPrince853Integrator0.computeDerivatives(652.262, doubleArray0, doubleArray0);
      assertEquals(2261.0, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(1885.7730924861746, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(1572.81740660985, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(2.2737367544323206E-10, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(369.70419763, 1189.775227419, 1189.775227419, 369.70419763);
      assertEquals(1189.775227419, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(663.2231116396595, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(369.70419763, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertNotNull(dormandPrince853Integrator0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator1 = new DormandPrince853Integrator((-1572.81740660985), 2261, (-1523.0), 2.2737367544323206E-10);
      assertEquals(1885.7730924861746, dormandPrince853Integrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(1572.81740660985, dormandPrince853Integrator1.getMinStep(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator1.getMaxGrowth(), 0.01);
      assertEquals(8, dormandPrince853Integrator1.getOrder());
      assertEquals(2261.0, dormandPrince853Integrator1.getMaxStep(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator1.getName());
      assertEquals(0.2, dormandPrince853Integrator1.getMinReduction(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator1.getSafety(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator1.getCurrentStepStart(), 0.01);
      assertFalse(dormandPrince853Integrator1.equals((Object)dormandPrince853Integrator0));
      assertNotNull(dormandPrince853Integrator1);
      
      dormandPrince853Integrator1.setMinReduction(2.2737367544323206E-10);
      assertEquals(2.2737367544323206E-10, dormandPrince853Integrator1.getMinReduction(), 0.01);
      assertEquals(1885.7730924861746, dormandPrince853Integrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(1572.81740660985, dormandPrince853Integrator1.getMinStep(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator1.getMaxGrowth(), 0.01);
      assertEquals(8, dormandPrince853Integrator1.getOrder());
      assertEquals(2261.0, dormandPrince853Integrator1.getMaxStep(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator1.getName());
      assertEquals(0.9, dormandPrince853Integrator1.getSafety(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator1.getCurrentStepStart(), 0.01);
      assertNotSame(dormandPrince853Integrator1, dormandPrince853Integrator0);
      assertFalse(dormandPrince853Integrator1.equals((Object)dormandPrince853Integrator0));
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      dormandPrince853Integrator1.setMinReduction(1189.775227419);
      assertEquals(1885.7730924861746, dormandPrince853Integrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(1572.81740660985, dormandPrince853Integrator1.getMinStep(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator1.getMaxGrowth(), 0.01);
      assertEquals(8, dormandPrince853Integrator1.getOrder());
      assertEquals(2261.0, dormandPrince853Integrator1.getMaxStep(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator1.getName());
      assertEquals(1189.775227419, dormandPrince853Integrator1.getMinReduction(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator1.getSafety(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator1.getCurrentStepStart(), 0.01);
      assertNotSame(dormandPrince853Integrator1, dormandPrince853Integrator0);
      assertFalse(dormandPrince853Integrator1.equals((Object)dormandPrince853Integrator0));
      
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      double double0 = dormandPrince853Integrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-679.9483), doubleArray0, (-1523.0), doubleArray0);
      assertEquals(1885.7730924861746, dormandPrince853Integrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(1572.81740660985, dormandPrince853Integrator1.getMinStep(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator1.getMaxGrowth(), 0.01);
      assertEquals(8, dormandPrince853Integrator1.getOrder());
      assertEquals(2261.0, dormandPrince853Integrator1.getMaxStep(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator1.getName());
      assertEquals(1189.775227419, dormandPrince853Integrator1.getMinReduction(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator1.getSafety(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator1.getCurrentStepStart(), 0.01);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotSame(dormandPrince853Integrator1, dormandPrince853Integrator0);
      assertFalse(dormandPrince853Integrator1.equals((Object)dormandPrince853Integrator0));
      assertEquals((-1523.0), double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
      assertEquals(5, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(1.0E-6, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01);
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01);
      assertNotNull(bracketingNthOrderBrentSolver0);
      
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter1.getDimension());
      assertFalse(firstOrderConverter1.equals((Object)firstOrderConverter0));
      assertNotNull(firstOrderConverter1);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations2 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations2).getDimension();
      FirstOrderConverter firstOrderConverter2 = new FirstOrderConverter(secondOrderDifferentialEquations2);
      assertEquals(0, firstOrderConverter2.getDimension());
      assertFalse(firstOrderConverter2.equals((Object)firstOrderConverter1));
      assertFalse(firstOrderConverter2.equals((Object)firstOrderConverter0));
      assertNotNull(firstOrderConverter2);
      
      double double1 = dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter2, 9.7944, doubleArray0, 0.0, doubleArray0);
      assertEquals(1189.775227419, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(663.2231116396595, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(369.70419763, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0, firstOrderConverter2.getDimension());
      assertNotSame(dormandPrince853Integrator0, dormandPrince853Integrator1);
      assertNotSame(firstOrderConverter2, firstOrderConverter1);
      assertNotSame(firstOrderConverter2, firstOrderConverter0);
      assertFalse(dormandPrince853Integrator0.equals((Object)dormandPrince853Integrator1));
      assertFalse(firstOrderConverter2.equals((Object)firstOrderConverter1));
      assertFalse(firstOrderConverter2.equals((Object)firstOrderConverter0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      MullerSolver2 mullerSolver2_0 = new MullerSolver2();
      assertEquals(1.0E-6, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, mullerSolver2_0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getStartValue(), 0.01);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getMax(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getMin(), 0.01);
      assertNotNull(mullerSolver2_0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(369.70419763, 1189.775227419, 1189.775227419, 369.70419763);
      assertEquals(369.70419763, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(1189.775227419, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(663.2231116396595, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertNotNull(dormandPrince853Integrator0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(2261).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(4522, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator1 = new DormandPrince853Integrator((-1572.81740660985), 2261, (-1523.0), 2.2737367544323206E-10);
      assertEquals(2261.0, dormandPrince853Integrator1.getMaxStep(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator1.getMaxGrowth(), 0.01);
      assertEquals(1572.81740660985, dormandPrince853Integrator1.getMinStep(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator1.getSafety(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator1.getCurrentStepStart(), 0.01);
      assertEquals(1885.7730924861746, dormandPrince853Integrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(8, dormandPrince853Integrator1.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator1.getName());
      assertEquals(0.2, dormandPrince853Integrator1.getMinReduction(), 0.01);
      assertFalse(dormandPrince853Integrator1.equals((Object)dormandPrince853Integrator0));
      assertNotNull(dormandPrince853Integrator1);
      
      dormandPrince853Integrator1.setMinReduction(2.2737367544323206E-10);
      assertEquals(2261.0, dormandPrince853Integrator1.getMaxStep(), 0.01);
      assertEquals(2.2737367544323206E-10, dormandPrince853Integrator1.getMinReduction(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator1.getMaxGrowth(), 0.01);
      assertEquals(1572.81740660985, dormandPrince853Integrator1.getMinStep(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator1.getSafety(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator1.getCurrentStepStart(), 0.01);
      assertEquals(1885.7730924861746, dormandPrince853Integrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(8, dormandPrince853Integrator1.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator1.getName());
      assertNotSame(dormandPrince853Integrator1, dormandPrince853Integrator0);
      assertFalse(dormandPrince853Integrator1.equals((Object)dormandPrince853Integrator0));
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      assertEquals(0, firstOrderConverter1.getDimension());
      assertFalse(firstOrderConverter1.equals((Object)firstOrderConverter0));
      assertNotNull(firstOrderConverter1);
      
      double double0 = dormandPrince853Integrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter1, (-679.9483), doubleArray0, (-1523.0), doubleArray0);
      assertEquals(2261.0, dormandPrince853Integrator1.getMaxStep(), 0.01);
      assertEquals(2.2737367544323206E-10, dormandPrince853Integrator1.getMinReduction(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator1.getMaxGrowth(), 0.01);
      assertEquals(1572.81740660985, dormandPrince853Integrator1.getMinStep(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator1.getSafety(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator1.getCurrentStepStart(), 0.01);
      assertEquals(1885.7730924861746, dormandPrince853Integrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(8, dormandPrince853Integrator1.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator1.getName());
      assertEquals(0, firstOrderConverter1.getDimension());
      assertNotSame(dormandPrince853Integrator1, dormandPrince853Integrator0);
      assertNotSame(firstOrderConverter1, firstOrderConverter0);
      assertFalse(dormandPrince853Integrator1.equals((Object)dormandPrince853Integrator0));
      assertFalse(firstOrderConverter1.equals((Object)firstOrderConverter0));
      assertEquals((-1523.0), double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-6, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(5, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertNotNull(bracketingNthOrderBrentSolver0);
      
      dormandPrince853Integrator0.addEventHandler((EventHandler) null, 3028.20957814, 4.547473508864641E-10, 2261, (UnivariateSolver) bracketingNthOrderBrentSolver0);
      assertEquals(369.70419763, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(1189.775227419, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(663.2231116396595, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-6, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(5, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertNotSame(dormandPrince853Integrator0, dormandPrince853Integrator1);
      assertFalse(dormandPrince853Integrator0.equals((Object)dormandPrince853Integrator1));
      
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1523.0), 2261, 189.77522741899998, 1189.775227419);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(1855.6678043227457, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(1523.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(2261.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertNotNull(graggBulirschStoerIntegrator0);
      
      graggBulirschStoerIntegrator0.setStabilityCheck(true, (-1), 2586, 4.547473508864641E-10);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(1855.6678043227457, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(1523.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(2261.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(1189.775227419);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertNotNull(eulerIntegrator0);
      
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1189.775227419, 1272.314394, 1197.654, 1189.775227419);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(1272.314394, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(1230.352854863115, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(1189.775227419, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertNotNull(dormandPrince853Integrator0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      double[] doubleArray0 = new double[0];
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1189.775227419, doubleArray0, 1189.775227419, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, (-3284.0), (-3284.0), 112847.0);
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(0.0, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals(0.0, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(3284.0, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertNotNull(dormandPrince54Integrator0);
      
      dormandPrince54Integrator0.setInitialStepSize((-3284.0));
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(0.0, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals(0.0, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(3284.0, dormandPrince54Integrator0.getMaxStep(), 0.01);
      
      double double0 = dormandPrince54Integrator0.getCurrentSignedStepsize();
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(0.0, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals(0.0, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(3284.0, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2.2737367544323206E-10, 112847.0, Double.NaN, (-2522.282));
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(0.005065415792681032, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(112847.0, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(2.2737367544323206E-10, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertNotNull(dormandPrince853Integrator0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      dormandPrince853Integrator0.setMinReduction(655.15732971);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(0.005065415792681032, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(112847.0, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(2.2737367544323206E-10, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(655.15732971, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      double[] doubleArray0 = new double[0];
      double double1 = dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 5.32346341339996E-260, doubleArray0);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(0.005065415792681032, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(112847.0, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(2.2737367544323206E-10, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(655.15732971, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(double1, double0, 0.01);
      assertEquals(5.32346341339996E-260, double1, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
      assertEquals(5, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01);
      assertEquals(1.0E-6, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01);
      assertNotNull(bracketingNthOrderBrentSolver0);
      
      dormandPrince853Integrator0.addEventHandler((EventHandler) null, 0.0, 112847.0, Integer.MAX_VALUE, (UnivariateSolver) bracketingNthOrderBrentSolver0);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(0.005065415792681032, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(112847.0, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(2.2737367544323206E-10, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(655.15732971, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(5, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01);
      assertEquals(1.0E-6, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01);
      
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(5.324902289537048E274, 860.2019, (-3284.0), 4.547473508864641E-10);
      assertEquals(5.324902289537048E274, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(860.2019, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(6.76793252535375E138, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertNotNull(graggBulirschStoerIntegrator0);
      
      graggBulirschStoerIntegrator0.setStabilityCheck(true, (-1), 5, (-2522.282));
      assertEquals(5.324902289537048E274, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(860.2019, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(6.76793252535375E138, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      MullerSolver mullerSolver0 = new MullerSolver(407.33, 1930.742868505496);
      assertEquals(407.33, mullerSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1930.742868505496, mullerSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver0.getMin(), 0.01);
      assertEquals(0.0, mullerSolver0.getMax(), 0.01);
      assertEquals(1.0E-15, mullerSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver0.getStartValue(), 0.01);
      assertNotNull(mullerSolver0);
      
      int int0 = mullerSolver0.getEvaluations();
      assertEquals(407.33, mullerSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1930.742868505496, mullerSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver0.getMin(), 0.01);
      assertEquals(0.0, mullerSolver0.getMax(), 0.01);
      assertEquals(1.0E-15, mullerSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver0.getStartValue(), 0.01);
      assertEquals(0, int0);
      
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(790.8372, 3525.095295229642, (-818.7264424558508), 407.33);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(3525.095295229642, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(790.8372, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(1669.6635867780622, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertNotNull(graggBulirschStoerIntegrator0);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
      assertEquals(1.0E-6, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(5, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01);
      assertNotNull(bracketingNthOrderBrentSolver0);
      
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (-3973.955520609482), 2.0769322678328357E-128, 2145680214, (UnivariateSolver) bracketingNthOrderBrentSolver0);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(3525.095295229642, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(790.8372, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(1669.6635867780622, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(1.0E-6, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(5, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01);
      
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-999.259), (-1), 1.3629491735708616E151, (-3973.955520609482));
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(1.0, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(31.611058191715127, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(999.259, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertNotNull(dormandPrince853Integrator0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      int int1 = mullerSolver0.getEvaluations();
      assertEquals(407.33, mullerSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1930.742868505496, mullerSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver0.getMin(), 0.01);
      assertEquals(0.0, mullerSolver0.getMax(), 0.01);
      assertEquals(1.0E-15, mullerSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver0.getStartValue(), 0.01);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      assertNotNull(expandableStatefulODE0);
      
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE1.getTime(), 0.01);
      assertFalse(expandableStatefulODE1.equals((Object)expandableStatefulODE0));
      assertNotNull(expandableStatefulODE1);
      
      double[] doubleArray1 = expandableStatefulODE1.getCompleteState();
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE1.getTime(), 0.01);
      assertNotSame(expandableStatefulODE1, expandableStatefulODE0);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(expandableStatefulODE1.equals((Object)expandableStatefulODE0));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertNotNull(doubleArray1);
      assertEquals(0, doubleArray1.length);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      assertEquals(0, firstOrderConverter1.getDimension());
      assertFalse(firstOrderConverter1.equals((Object)firstOrderConverter0));
      assertNotNull(firstOrderConverter1);
      
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0625);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertNotNull(threeEighthesIntegrator0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations2 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations2).getDimension();
      FirstOrderConverter firstOrderConverter2 = new FirstOrderConverter(secondOrderDifferentialEquations2);
      assertEquals(0, firstOrderConverter2.getDimension());
      assertFalse(firstOrderConverter2.equals((Object)firstOrderConverter1));
      assertFalse(firstOrderConverter2.equals((Object)firstOrderConverter0));
      assertNotNull(firstOrderConverter2);
      
      // Undeclared exception!
      threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter2, (-1299.9732), doubleArray0, 3525.095295229642, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-818.7264424558508);
      doubleArray0[1] = 1189.775227419;
      doubleArray0[2] = 1189.775227419;
      doubleArray0[3] = 1189.775227419;
      doubleArray0[4] = 407.33;
      doubleArray0[5] = 1189.775227419;
      doubleArray0[6] = 2196.3014;
      doubleArray0[7] = 407.33;
      doubleArray0[8] = 407.33;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1189.775227419, 407.33, doubleArray0, doubleArray0);
      assertEquals(1189.775227419, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(407.33, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(696.154539872133, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertArrayEquals(new double[] {(-818.7264424558508), 1189.775227419, 1189.775227419, 1189.775227419, 407.33, 1189.775227419, 2196.3014, 407.33, 407.33}, doubleArray0, 0.01);
      assertNotNull(highamHall54Integrator0);
      assertEquals(9, doubleArray0.length);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      assertEquals(0, firstOrderConverter1.getDimension());
      assertFalse(firstOrderConverter1.equals((Object)firstOrderConverter0));
      assertNotNull(firstOrderConverter1);
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter1);
      assertEquals(0, firstOrderConverter1.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      assertFalse(firstOrderConverter1.equals((Object)firstOrderConverter0));
      assertNotNull(expandableStatefulODE0);
      
      try { 
        highamHall54Integrator0.integrate(expandableStatefulODE0, 1189.775227419);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 9
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 468.32580236999996;
      doubleArray0[1] = 468.32580236999996;
      doubleArray0[2] = 468.32580236999996;
      doubleArray0[3] = 468.32580236999996;
      doubleArray0[4] = 468.32580236999996;
      doubleArray0[5] = 468.32580236999996;
      doubleArray0[6] = 468.32580236999996;
      doubleArray0[7] = 468.32580236999996;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(468.32580236999996, 468.32580236999996, doubleArray0, doubleArray0);
      assertEquals(468.32580236999996, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(468.32580236999996, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(468.32580236999996, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertArrayEquals(new double[] {468.32580236999996, 468.32580236999996, 468.32580236999996, 468.32580236999996, 468.32580236999996, 468.32580236999996, 468.32580236999996, 468.32580236999996}, doubleArray0, 0.01);
      assertNotNull(highamHall54Integrator0);
      assertEquals(8, doubleArray0.length);
      
      // Undeclared exception!
      try { 
        highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) null, 1189.775227419, doubleArray0, 468.32580236999996, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double double0 = 242.28349177525817;
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(242.28349177525817);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertNotNull(eulerIntegrator0);
      
      int int0 = 0;
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      assertNotNull(threeEighthesIntegrator0);
      
      int int1 = (-290);
      threeEighthesIntegrator0.setMaxEvaluations((-290));
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      
      threeEighthesIntegrator0.clearStepHandlers();
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      
      double double1 = 0.3341791187130175;
      double double2 = 3.690690354793168E281;
      // Undeclared exception!
      try { 
        threeEighthesIntegrator0.integrate((ExpandableStatefulODE) null, 3.690690354793168E281);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double double0 = (-1071.379165158365);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1071.379165158365);
      doubleArray0[1] = (-1071.379165158365);
      doubleArray0[2] = (-1071.379165158365);
      doubleArray0[3] = (-1071.379165158365);
      doubleArray0[4] = (-1071.379165158365);
      doubleArray0[5] = (-1071.379165158365);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, (-1071.379165158365), doubleArray0, doubleArray0);
      assertEquals(1071.379165158365, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertArrayEquals(new double[] {(-1071.379165158365), (-1071.379165158365), (-1071.379165158365), (-1071.379165158365), (-1071.379165158365), (-1071.379165158365)}, doubleArray0, 0.01);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(6, doubleArray0.length);
      
      graggBulirschStoerIntegrator0.clearEventHandlers();
      assertEquals(1071.379165158365, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertArrayEquals(new double[] {(-1071.379165158365), (-1071.379165158365), (-1071.379165158365), (-1071.379165158365), (-1071.379165158365), (-1071.379165158365)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      graggBulirschStoerIntegrator0.setControlFactors((-1071.379165158365), (-1071.379165158365), 0.0, 4.547473508864641E-10);
      assertEquals(1071.379165158365, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertArrayEquals(new double[] {(-1071.379165158365), (-1071.379165158365), (-1071.379165158365), (-1071.379165158365), (-1071.379165158365), (-1071.379165158365)}, doubleArray0, 0.01);
      assertEquals(6, doubleArray0.length);
      
      String string0 = graggBulirschStoerIntegrator0.getName();
      assertEquals(1071.379165158365, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", string0);
      assertArrayEquals(new double[] {(-1071.379165158365), (-1071.379165158365), (-1071.379165158365), (-1071.379165158365), (-1071.379165158365), (-1071.379165158365)}, doubleArray0, 0.01);
      assertNotNull(string0);
      assertEquals(6, doubleArray0.length);
      
      double[] doubleArray1 = null;
      double[] doubleArray2 = new double[4];
      assertFalse(doubleArray2.equals((Object)doubleArray0));
      
      doubleArray2[0] = (-609.56996697);
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 0.0;
      doubleArray2[3] = 4.547473508864641E-10;
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = null;
      try {
        adamsMoultonIntegrator0 = new AdamsMoultonIntegrator((-1209), (-1071.379165158365), (-1071.379165158365), (double[]) null, doubleArray2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, (-3284.0), (-3284.0), 112847.0);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(0.0, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.0, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(3284.0, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertNotNull(dormandPrince54Integrator0);
      
      dormandPrince54Integrator0.setInitialStepSize((-3284.0));
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(0.0, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.0, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(3284.0, dormandPrince54Integrator0.getMaxStep(), 0.01);
      
      double double0 = dormandPrince54Integrator0.getCurrentSignedStepsize();
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(0.0, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.0, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(3284.0, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals(0.0, double0, 0.01);
      
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, 112847.0, 0.0);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertNotNull(graggBulirschStoerIntegrator0);
      
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      assertNotNull(dummyStepHandler0);
      
      DummyStepHandler dummyStepHandler1 = DummyStepHandler.getInstance();
      assertSame(dummyStepHandler1, dummyStepHandler0);
      assertNotNull(dummyStepHandler1);
      
      DummyStepHandler dummyStepHandler2 = DummyStepHandler.getInstance();
      assertSame(dummyStepHandler2, dummyStepHandler0);
      assertSame(dummyStepHandler2, dummyStepHandler1);
      assertNotNull(dummyStepHandler2);
      
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(1647.271389461104);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertNotNull(threeEighthesIntegrator0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-4046.642512);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator1 = new GraggBulirschStoerIntegrator((-4046.642512), 0.0, doubleArray0, doubleArray0);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator1.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator1.getMaxStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator1.getName());
      assertEquals(4046.642512, graggBulirschStoerIntegrator1.getMinStep(), 0.01);
      assertFalse(graggBulirschStoerIntegrator1.equals((Object)graggBulirschStoerIntegrator0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-4046.642512)}, doubleArray0, 0.01);
      assertNotNull(graggBulirschStoerIntegrator1);
      assertEquals(4, doubleArray0.length);
      
      graggBulirschStoerIntegrator1.setOrderControl(3520, 2395.461236499, 112847.0);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator1.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator1.getMaxStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator1.getName());
      assertEquals(4046.642512, graggBulirschStoerIntegrator1.getMinStep(), 0.01);
      assertNotSame(graggBulirschStoerIntegrator1, graggBulirschStoerIntegrator0);
      assertFalse(graggBulirschStoerIntegrator1.equals((Object)graggBulirschStoerIntegrator0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-4046.642512)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      graggBulirschStoerIntegrator1.setControlFactors((-925.23), 0.0, (-925.23), 4.547473508864641E-10);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator1.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator1.getMaxStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator1.getName());
      assertEquals(4046.642512, graggBulirschStoerIntegrator1.getMinStep(), 0.01);
      assertNotSame(graggBulirschStoerIntegrator1, graggBulirschStoerIntegrator0);
      assertFalse(graggBulirschStoerIntegrator1.equals((Object)graggBulirschStoerIntegrator0));
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-4046.642512)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      double double1 = graggBulirschStoerIntegrator1.getCurrentStepStart();
      assertEquals(Double.NaN, graggBulirschStoerIntegrator1.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator1.getMaxStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator1.getName());
      assertEquals(4046.642512, graggBulirschStoerIntegrator1.getMinStep(), 0.01);
      assertNotSame(graggBulirschStoerIntegrator1, graggBulirschStoerIntegrator0);
      assertNotEquals(double1, double0, 0.01);
      assertFalse(graggBulirschStoerIntegrator1.equals((Object)graggBulirschStoerIntegrator0));
      assertEquals(Double.NaN, double1, 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-4046.642512)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      int int0 = graggBulirschStoerIntegrator1.getEvaluations();
      assertEquals(Double.NaN, graggBulirschStoerIntegrator1.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator1.getMaxStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator1.getName());
      assertEquals(4046.642512, graggBulirschStoerIntegrator1.getMinStep(), 0.01);
      assertNotSame(graggBulirschStoerIntegrator1, graggBulirschStoerIntegrator0);
      assertFalse(graggBulirschStoerIntegrator1.equals((Object)graggBulirschStoerIntegrator0));
      assertEquals(0, int0);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, (-4046.642512)}, doubleArray0, 0.01);
      assertEquals(4, doubleArray0.length);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      ThreeEighthesIntegrator threeEighthesIntegrator1 = new ThreeEighthesIntegrator(0.0);
      assertEquals("3/8", threeEighthesIntegrator1.getName());
      assertEquals(Double.NaN, threeEighthesIntegrator1.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertFalse(threeEighthesIntegrator1.equals((Object)threeEighthesIntegrator0));
      assertNotNull(threeEighthesIntegrator1);
      
      try { 
        threeEighthesIntegrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-3284.0), doubleArray0, 0.0, (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double double0 = 112847.95738766131;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, (-3284.0), (-3284.0), 112847.95738766131);
      assertEquals(3284.0, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals(0.0, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals(0.0, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertNotNull(dormandPrince54Integrator0);
      
      dormandPrince54Integrator0.setInitialStepSize((-3284.0));
      assertEquals(3284.0, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals(0.0, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals(0.0, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      
      double double1 = dormandPrince54Integrator0.getCurrentSignedStepsize();
      assertEquals(3284.0, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals(0.0, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals(0.0, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertNotEquals(double1, double0, 0.01);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = 0.0;
      double double3 = 0.0;
      double double4 = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, 112847.95738766131, 0.0);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertNotNull(graggBulirschStoerIntegrator0);
      
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      assertNotNull(dummyStepHandler0);
      
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertNotNull(threeEighthesIntegrator0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      assertNotNull(expandableStatefulODE0);
      
      // Undeclared exception!
      threeEighthesIntegrator0.integrate(expandableStatefulODE0, 112847.95738766131);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double double0 = 599.77897;
      double double1 = 1272.314394;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1272.314394, 3525.095295229642, 3525.095295229642, 1272.314394);
      assertEquals(2117.788819581016, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(3525.095295229642, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(1272.314394, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertNotNull(dormandPrince853Integrator0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      double double2 = 0.0;
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 5.32346341339996E-260, doubleArray0, 3525.095295229642, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(242.28349177525817);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertNotNull(eulerIntegrator0);
      
      eulerIntegrator0.setMaxEvaluations(0);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      int int0 = eulerIntegrator0.getMaxEvaluations();
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0, int0);
      
      int int1 = eulerIntegrator0.getEvaluations();
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      double double0 = (-1811.40441309);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0, 0, (-1811.40441309), 1982.1475);
      assertEquals(0.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0.0, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(0.0, highamHall54Integrator0.getMinStep(), 0.01);
      assertNotNull(highamHall54Integrator0);
      
      int int2 = highamHall54Integrator0.getOrder();
      assertEquals(0.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0.0, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(0.0, highamHall54Integrator0.getMinStep(), 0.01);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(5, int2);
      
      double double1 = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 1.0, (-1811.40441309), 242.28349177525817);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(1.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertNotNull(graggBulirschStoerIntegrator0);
      
      highamHall54Integrator0.clearEventHandlers();
      assertEquals(0.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0.0, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(0.0, highamHall54Integrator0.getMinStep(), 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertEquals(16, firstOrderConverter0.getDimension());
      assertNotNull(firstOrderConverter0);
      
      double[] doubleArray0 = new double[1];
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      MullerSolver mullerSolver0 = new MullerSolver();
      assertEquals(1.0E-14, mullerSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, mullerSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver0.getMax(), 0.01);
      assertEquals(0.0, mullerSolver0.getMin(), 0.01);
      assertEquals(1.0E-6, mullerSolver0.getAbsoluteAccuracy(), 0.01);
      assertNotNull(mullerSolver0);
      
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (-0.27), 1.0, 5, (UnivariateSolver) mullerSolver0);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(1.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(1.0E-14, mullerSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, mullerSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver0.getMax(), 0.01);
      assertEquals(0.0, mullerSolver0.getMin(), 0.01);
      assertEquals(1.0E-6, mullerSolver0.getAbsoluteAccuracy(), 0.01);
      
      int int3 = highamHall54Integrator0.getMaxEvaluations();
      assertEquals(0.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0.0, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(0.0, highamHall54Integrator0.getMinStep(), 0.01);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(Integer.MAX_VALUE, int3);
      
      graggBulirschStoerIntegrator0.setStabilityCheck(false, 0, 4525, 94326.0);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(1.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      
      doubleArray0[0] = (double) 5;
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1982.1475, doubleArray0, (double) 0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 16
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      assertNotNull(threeEighthesIntegrator0);
      
      Collection<EventHandler> collection0 = threeEighthesIntegrator0.getEventHandlers();
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      assertNotNull(collection0);
      
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2.6367639658206183E288, 0.0, doubleArray0, doubleArray0);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(2.6367639658206183E288, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(0, doubleArray0.length);
      
      graggBulirschStoerIntegrator0.setControlFactors(0.0, 0.0, (-3321.0), (-3321.0));
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(2.6367639658206183E288, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(1189.775227419);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertNotNull(eulerIntegrator0);
      
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-741.4), 4219.8, 0.0, 0.0);
      assertEquals(741.4, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(1768.7735072642852, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(4219.8, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertNotNull(graggBulirschStoerIntegrator0);
      
      graggBulirschStoerIntegrator0.setControlFactors(4219.8, 0.0, 4219.8, 0.0);
      assertEquals(741.4, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(1768.7735072642852, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(4219.8, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      MullerSolver mullerSolver0 = new MullerSolver((-1), 1189.775227419);
      assertEquals((-1.0), mullerSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver0.getMax(), 0.01);
      assertEquals(0.0, mullerSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, mullerSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver0.getMin(), 0.01);
      assertEquals(1189.775227419, mullerSolver0.getAbsoluteAccuracy(), 0.01);
      assertNotNull(mullerSolver0);
      
      int int0 = mullerSolver0.getEvaluations();
      assertEquals((-1.0), mullerSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver0.getMax(), 0.01);
      assertEquals(0.0, mullerSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, mullerSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver0.getMin(), 0.01);
      assertEquals(1189.775227419, mullerSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0, int0);
      
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (-741.4), 4219.8, (-1), (UnivariateSolver) mullerSolver0);
      assertEquals(741.4, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(1768.7735072642852, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(4219.8, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals((-1.0), mullerSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver0.getMax(), 0.01);
      assertEquals(0.0, mullerSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, mullerSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver0.getMin(), 0.01);
      assertEquals(1189.775227419, mullerSolver0.getAbsoluteAccuracy(), 0.01);
      
      Collection<EventHandler> collection0 = graggBulirschStoerIntegrator0.getEventHandlers();
      assertEquals(741.4, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(1768.7735072642852, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(4219.8, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertTrue(collection0.contains(eventHandler0));
      assertNotNull(collection0);
      
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0625, 1533.62, 0.0, 1.0);
      assertEquals(9.790365161729158, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(1533.62, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(0.0625, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertNotNull(dormandPrince853Integrator0);
      
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      dormandPrince853Integrator0.addEventHandler(eventHandler1, 0.0, 3497.0, 0, (UnivariateSolver) mullerSolver0);
      assertEquals((-1.0), mullerSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver0.getMax(), 0.01);
      assertEquals(0.0, mullerSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, mullerSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver0.getMin(), 0.01);
      assertEquals(1189.775227419, mullerSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(9.790365161729158, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(1533.62, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(0.0625, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      
      int int1 = dormandPrince853Integrator0.getOrder();
      assertEquals(9.790365161729158, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(1533.62, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(0.0625, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertFalse(int1 == int0);
      assertEquals(8, int1);
      
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      assertNotNull(dummyStepHandler0);
      
      graggBulirschStoerIntegrator0.addStepHandler(dummyStepHandler0);
      assertEquals(741.4, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(1768.7735072642852, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(4219.8, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 0.0, 0.0, 0.0);
      assertEquals(0.0, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(0.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.0, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertNotNull(highamHall54Integrator0);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      highamHall54Integrator0.setStepSizeControl(0.0, 0.0, doubleArray0, doubleArray1);
      assertEquals(0.0, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(0.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.0, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray1, 0.01);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      
      int int0 = highamHall54Integrator0.getOrder();
      assertEquals(0.0, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(0.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.0, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(5, int0);
      
      highamHall54Integrator0.clearStepHandlers();
      assertEquals(0.0, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(0.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.0, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.FIRST;
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.0, fixedStepHandler0, stepNormalizerMode0, stepNormalizerBounds0);
      assertNotNull(stepNormalizer0);
      
      stepNormalizer0.init((-257.9), doubleArray0, (-257.9));
      assertNotSame(doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertArrayEquals(new double[] {0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(2, doubleArray0.length);
      
      highamHall54Integrator0.addStepHandler(stepNormalizer0);
      assertEquals(0.0, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(0.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.0, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      
      highamHall54Integrator0.clearStepHandlers();
      assertEquals(0.0, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(0.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.0, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      
      double double0 = highamHall54Integrator0.getCurrentStepStart();
      assertEquals(0.0, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(0.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.0, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.037109375, Double.NaN, (-0.5), 0.0);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(0.037109375, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertNotNull(graggBulirschStoerIntegrator0);
      
      graggBulirschStoerIntegrator0.setOrderControl(5, (-2226.158184261712), 0.0);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(0.037109375, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(408.32638384759144, (-818.7264424558508), doubleArray0, doubleArray0);
      assertEquals(408.32638384759144, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(578.1933998312336, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(818.7264424558508, highamHall54Integrator0.getMaxStep(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(highamHall54Integrator0);
      assertEquals(0, doubleArray0.length);
      
      double double0 = highamHall54Integrator0.getCurrentSignedStepsize();
      assertEquals(408.32638384759144, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(578.1933998312336, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(818.7264424558508, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(578.1933998312336, double0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
      
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(578.1933998312336, 408.32638384759144, doubleArray0, doubleArray0);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals(485.8926014230225, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(408.32638384759144, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals(578.1933998312336, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(dormandPrince54Integrator0);
      assertEquals(0, doubleArray0.length);
      
      int int0 = dormandPrince54Integrator0.getOrder();
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals(485.8926014230225, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(408.32638384759144, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals(578.1933998312336, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals(5, int0);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, doubleArray0.length);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, (-3284.0), (-3284.0), 112847.0);
      dormandPrince54Integrator0.setInitialStepSize((-3284.0));
      dormandPrince54Integrator0.getCurrentSignedStepsize();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, 112847.0, 0.0);
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      DummyStepHandler.getInstance();
      DummyStepHandler dummyStepHandler1 = DummyStepHandler.getInstance();
      graggBulirschStoerIntegrator0.addStepHandler(dummyStepHandler0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      graggBulirschStoerIntegrator0.setStabilityCheck(false, 579, 579, (-2158.72509));
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (-3284.0), (-1785.6139194691), 0);
      graggBulirschStoerIntegrator0.addStepHandler(dummyStepHandler1);
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      dormandPrince54Integrator0.addEventHandler(eventHandler1, 0.0, 0.0, 0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.getCompleteState();
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (-1785.6139194691));
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      threeEighthesIntegrator0.addEventHandler(eventHandler0, 3856.4, 0.0, 215);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1214.5656742104522), 155.432735599, (-1214.5656742104522), (-1541.514543));
      threeEighthesIntegrator0.getEvaluations();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.0, 0.0);
      graggBulirschStoerIntegrator0.addEventHandler((EventHandler) null, (-856.9705467), (-1214.5656742104522), (-1), (UnivariateSolver) illinoisSolver0);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        threeEighthesIntegrator0.computeDerivatives(0.0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2437.8725079949, 0.0, 2437.8725079949, 1409.294973738);
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      DummyStepHandler.getInstance();
      DummyStepHandler.getInstance();
      graggBulirschStoerIntegrator0.addStepHandler(dummyStepHandler0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1409.294973738;
      doubleArray0[2] = 542.2228;
      doubleArray0[3] = 542.2228;
      doubleArray0[4] = 1409.294973738;
      doubleArray0[5] = 1409.294973738;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 1409.294973738;
      doubleArray0[8] = 2437.8725079949;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(542.2228, 542.2228, doubleArray0, doubleArray0);
      highamHall54Integrator0.getStepHandlers();
      highamHall54Integrator0.getOrder();
      graggBulirschStoerIntegrator0.addEventHandler((EventHandler) null, 0.0, 2437.8725079949, 5);
      graggBulirschStoerIntegrator0.clearStepHandlers();
      graggBulirschStoerIntegrator0.getCurrentStepStart();
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(1101, 326.893141421, 0.0, 1195.243, 0.0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1930.814), (-1930.814), (-1930.814), (-1930.814));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1930.814);
      doubleArray0[1] = (-1930.814);
      doubleArray0[2] = (-1930.814);
      doubleArray0[3] = 0.0;
      // Undeclared exception!
      try { 
        highamHall54Integrator0.computeDerivatives((-457.0), doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(472.378326);
      double double0 = 656.7378;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(472.378326, 472.378326, 656.7378, (-3509.3349465781));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double double1 = Double.NaN;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 472.378326;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 472.378326;
      doubleArray0[5] = 472.378326;
      expandableStatefulODE0.computeDerivatives(Double.NaN, doubleArray0, doubleArray0);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 472.378326);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(242.28349177525817);
      eulerIntegrator0.setMaxEvaluations(0);
      eulerIntegrator0.getMaxEvaluations();
      eulerIntegrator0.getEvaluations();
      double double0 = (-1811.40441309);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0, 0, (-1811.40441309), 1982.1475);
      highamHall54Integrator0.getOrder();
      double double1 = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 1.0, (-1811.40441309), 242.28349177525817);
      highamHall54Integrator0.clearEventHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[1];
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      MullerSolver mullerSolver0 = new MullerSolver();
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (-0.27), 1.0, 5, (UnivariateSolver) mullerSolver0);
      highamHall54Integrator0.getMaxEvaluations();
      graggBulirschStoerIntegrator0.setStabilityCheck(false, 0, 4525, 94326.0);
      doubleArray0[0] = (double) 5;
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1982.1475, doubleArray0, (double) 0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 0.0, (-4289.807585212151), 112847.0);
      dormandPrince54Integrator0.getCurrentStepStart();
      dormandPrince54Integrator0.getMaxEvaluations();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(Integer.MAX_VALUE, 0.0, 420.946603, (-528.6580506832444));
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      graggBulirschStoerIntegrator0.addStepHandler(dummyStepHandler0);
      assertEquals(2.147483647E9, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(81, (-2111.12), (-1385.07378), (-3194.086510694011));
      dormandPrince853Integrator0.addEventHandler((EventHandler) null, 407.33, (-2320.6297616), 81, (UnivariateSolver) bracketingNthOrderBrentSolver0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2.787906051540986E261, (-1.0), 3525.095295229642, (-1026.2385));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 935.5002949;
      doubleArray0[1] = 1080.98;
      doubleArray0[2] = (-55.68363811803);
      graggBulirschStoerIntegrator0.setStepSizeControl(935.5002949, 3525.095295229642, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setStabilityCheck(true, 2151, 2151, 4.547473508864641E-10);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(407.33, (-818.7264424558508), doubleArray0, doubleArray0);
      highamHall54Integrator0.getCurrentStepStart();
      Collection<StepHandler> collection0 = highamHall54Integrator0.getStepHandlers();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 3270;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1700.881), 36.558887580297, 0.0, 3270);
      graggBulirschStoerIntegrator0.addEventHandler((EventHandler) null, (-1700.881), 6320.73264607318, 3270);
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      graggBulirschStoerIntegrator0.addStepHandler(dummyStepHandler0);
      FirstOrderConverter firstOrderConverter0 = null;
      try {
        firstOrderConverter0 = new FirstOrderConverter((SecondOrderDifferentialEquations) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.FirstOrderConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 4441.3861;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 0.0, doubleArray0, doubleArray1);
      dormandPrince54Integrator0.getStepHandlers();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      dormandPrince54Integrator0.addEventHandler(eventHandler0, 0.0, 0.0, (-1));
      EventHandler eventHandler1 = null;
      double double0 = 3136.0;
      double double1 = 0.0;
      int int0 = 2173;
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = null;
      try {
        bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(0.0, 0.0, (-2786));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -2,786 is smaller than the minimum (2)
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.8888888888888888);
      threeEighthesIntegrator0.setMaxEvaluations(72);
      threeEighthesIntegrator0.clearStepHandlers();
      double double0 = 0.3341791187130175;
      // Undeclared exception!
      try { 
        threeEighthesIntegrator0.integrate((ExpandableStatefulODE) null, 0.3341791187130175);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double double0 = 0.8888888888888888;
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.8888888888888888);
      int int0 = 72;
      threeEighthesIntegrator0.setMaxEvaluations(72);
      threeEighthesIntegrator0.clearStepHandlers();
      double double1 = 0.3341791187130175;
      // Undeclared exception!
      try { 
        threeEighthesIntegrator0.integrate((ExpandableStatefulODE) null, 0.3341791187130175);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
      threeEighthesIntegrator0.getMaxEvaluations();
      threeEighthesIntegrator0.clearEventHandlers();
      threeEighthesIntegrator0.setMaxEvaluations(161);
      threeEighthesIntegrator0.getEvaluations();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 161;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 2299.092988165219;
      doubleArray0[4] = (double) 161;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1000.0, Integer.MAX_VALUE, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 958);
      assertEquals(2.147483647E9, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 895.0, 0.0, 895.0);
      graggBulirschStoerIntegrator0.clearEventHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 895.0;
      doubleArray0[1] = 895.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 895.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1.0);
      try { 
        expandableStatefulODE0.setPrimaryState(doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 0
         //
         verifyException("org.apache.commons.math3.ode.ExpandableStatefulODE", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(6.4099, 6.4099, 6.4099, 6.4099);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 6.4099;
      doubleArray0[1] = 6.4099;
      doubleArray0[2] = (-255.85148959272);
      doubleArray0[3] = (-255.85148959272);
      doubleArray0[4] = (-255.85148959272);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(6.4099, (-255.85148959272), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setInterpolationControl(false, 1);
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 0);
      graggBulirschStoerIntegrator0.getCurrentStepStart();
      int int0 = graggBulirschStoerIntegrator0.getEvaluations();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      int int0 = 0;
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = null;
      try {
        adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(0, 0, 2193.8082676799418, 1276.781682608797, 1276.781682608797);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // multistep method needs at least 0 previous steps, got 2
         //
         verifyException("org.apache.commons.math3.ode.MultistepIntegrator", e);
      }
  }
}
