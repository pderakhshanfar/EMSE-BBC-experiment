/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 22:29:17 GMT 2021
 */

package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.math3.analysis.solvers.MullerSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondaryEquations;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator;
import org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator;
import org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.EulerIntegrator;
import org.apache.commons.math3.ode.nonstiff.GillIntegrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.nonstiff.MidpointIntegrator;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.StepHandler;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.apache.commons.math3.ode.sampling.StepNormalizerMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegrator_ESTest extends AbstractIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(441);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(441).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      gillIntegrator0.setMaxEvaluations(5);
      try { 
        gillIntegrator0.integrate(expandableStatefulODE0, (double) 441);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (5) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(4481.9);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(675).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-146.6896219), 1397.08202, (-298.32), (-146.6896219), 1377.8072547801137).when(eventHandler0).g(anyDouble() , any(double[].class));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      GillIntegrator gillIntegrator0 = new GillIntegrator(0.0);
      gillIntegrator0.addEventHandler(eventHandler0, 4481.9, 266.05, 261);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter1);
      try { 
        gillIntegrator0.integrate(expandableStatefulODE0, 4481.9);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (261) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(441);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(441).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-1480.650594432765), (double)441, (-1864.211), (-1864.211), 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      gillIntegrator0.addEventHandler(eventHandler0, (double) 441, (double) 441, 441);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      gillIntegrator0.integrate(expandableStatefulODE0, (double) 441);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(4481.9);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      eulerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-995.02573482), doubleArray0, 490.35218089, doubleArray0);
      eulerIntegrator0.getEvaluations();
      eulerIntegrator0.computeDerivatives((-172.8548765140806), doubleArray0, doubleArray0);
      eulerIntegrator0.getEventHandlers();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator((-161.253007582421));
      int int0 = 8;
      eulerIntegrator0.getEventHandlers();
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(8, (-161.253007582421), 8, 2230.7038081599, 2230.7038081599);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      try { 
        adamsMoultonIntegrator0.integrate(expandableStatefulODE0, 1001.9874054390749);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one column
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(4481.9);
      // Undeclared exception!
      try { 
        gillIntegrator0.integrate((ExpandableStatefulODE) null, 4481.9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1370.3256322002371));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime((-1370.3256322002371));
      try { 
        gillIntegrator0.integrate(expandableStatefulODE0, (-1370.3256322002371));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(2.1474826523409364E9);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(2.1474826523409364E9, 2.1474826523409364E9, 2.1474826523409364E9, 5.6843418860808015E-11);
      highamHall54Integrator0.getStepHandlers();
      highamHall54Integrator0.getOrder();
      highamHall54Integrator0.getMaxEvaluations();
      classicalRungeKuttaIntegrator0.getEvaluations();
      classicalRungeKuttaIntegrator0.getCurrentStepStart();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(4481.9);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      MullerSolver mullerSolver0 = new MullerSolver();
      eulerIntegrator0.addEventHandler(eventHandler0, (double) 261, (-2506.11186728807), 261, (UnivariateSolver) mullerSolver0);
      double[] doubleArray0 = new double[0];
      eulerIntegrator0.getCurrentStepStart();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          EulerIntegrator eulerIntegrator0 = new EulerIntegrator(4481.9);
          SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
          doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
          FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
          EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
          doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
          eulerIntegrator0.addEventHandler(eventHandler0, 1001.9874054390749, 80.45153593528816, 261);
          double[] doubleArray0 = new double[0];
          eulerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 490.35218089, doubleArray0, 0.0, doubleArray0);
          GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2.325337720526947E133, 2.325337720526947E133, 0.0, 261);
          graggBulirschStoerIntegrator0.setInitialStepSize(207.9302622893975);
          graggBulirschStoerIntegrator0.setInterpolationControl(false, 6);
          ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
          // Undeclared exception!
          graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 0.0);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(4481.9);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      eulerIntegrator0.addEventHandler(eventHandler0, (-995.02573482), 4481.9, 261);
      double[] doubleArray0 = new double[0];
      eulerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-995.02573482), doubleArray0, 490.35218089, doubleArray0);
      eulerIntegrator0.computeDerivatives(1.2924697071141057E-23, doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(4481.9);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      double double0 = 490.35218089;
      double double1 = eulerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-995.02573482), doubleArray0, 490.35218089, doubleArray0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double[] doubleArray1 = expandableStatefulODE0.getCompleteState();
      eulerIntegrator0.integrate(expandableStatefulODE0, double0);
      int int0 = (-581);
      double double2 = 0.0;
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(int0, double1, double2, doubleArray1, doubleArray1);
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE1.getTotalDimension();
      adamsMoultonIntegrator0.integrate(expandableStatefulODE1, double1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-1370.3256322002371));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-1370.3256322002371), (-1370.3256322002371), 1827.054, 1827.054, (-1370.3256322002371)).when(eventHandler0).g(anyDouble() , any(double[].class));
      midpointIntegrator0.addEventHandler(eventHandler0, (-1370.3256322002371), (-1836.58859), 0);
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizer stepNormalizer0 = new StepNormalizer(2.384185791015625E-4, fixedStepHandler0, stepNormalizerMode0);
      midpointIntegrator0.addStepHandler(stepNormalizer0);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter0);
      SecondaryEquations secondaryEquations0 = mock(SecondaryEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondaryEquations0).getDimension();
      expandableStatefulODE1.addSecondaryEquations(secondaryEquations0);
      // Undeclared exception!
      midpointIntegrator0.integrate(expandableStatefulODE1, (double) 0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0.0);
      midpointIntegrator0.getEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      midpointIntegrator0.addStepHandler((StepHandler) null);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      SecondaryEquations secondaryEquations0 = mock(SecondaryEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondaryEquations0).getDimension();
      expandableStatefulODE0.addSecondaryEquations(secondaryEquations0);
      // Undeclared exception!
      try { 
        midpointIntegrator0.integrate(expandableStatefulODE0, (double) 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double double0 = 0.0;
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0.0);
      midpointIntegrator0.getEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      midpointIntegrator0.addStepHandler((StepHandler) null);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      double double1 = (-1.9874054390748568);
      // Undeclared exception!
      try { 
        midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1000.0, doubleArray0, (-1.9874054390748568), doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1.2027015686035156, 5.0, doubleArray0, doubleArray0);
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(5.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      eulerIntegrator0.addEventHandler(eventHandler0, 1.1368683772161603E-10, (double) (-1962), 1706, (UnivariateSolver) null);
      eulerIntegrator0.getEventHandlers();
      eulerIntegrator0.getMaxEvaluations();
      eulerIntegrator0.setMaxEvaluations((-1962));
      eulerIntegrator0.getCurrentSignedStepsize();
      eulerIntegrator0.getMaxEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      try { 
        eulerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-626.802991040223), doubleArray0, (-626.802991040223), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(1.0);
      EulerIntegrator eulerIntegrator1 = new EulerIntegrator(0.0);
      eulerIntegrator1.getMaxEvaluations();
      eulerIntegrator0.setMaxEvaluations(0);
      EulerIntegrator eulerIntegrator2 = new EulerIntegrator(1020);
      eulerIntegrator2.getCurrentSignedStepsize();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      EulerIntegrator eulerIntegrator3 = new EulerIntegrator(1.0);
      try { 
        eulerIntegrator3.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) 0, doubleArray0, 4.1422578754033235E-279, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0.0);
      midpointIntegrator0.getEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      midpointIntegrator0.clearStepHandlers();
      midpointIntegrator0.getStepHandlers();
      midpointIntegrator0.getMaxEvaluations();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (-0.871391583777973);
      doubleArray0[4] = (double) Integer.MAX_VALUE;
      doubleArray0[5] = (-0.871391583777973);
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = Double.NaN;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (-0.871391583777973);
      doubleArray1[1] = (double) Integer.MAX_VALUE;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (double) 0;
      doubleArray1[5] = (-0.871391583777973);
      doubleArray1[6] = (-0.871391583777973);
      try { 
        midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, Double.NaN, doubleArray0, (double) 0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(2750.5);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      gillIntegrator0.integrate(expandableStatefulODE0, 2750.5);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 4924.792315256372;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 4924.792315256372, (-1.0), (-144.466851));
      highamHall54Integrator0.getName();
      double double2 = (-4334.8926);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-1.0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1.0), (-4334.8926), doubleArray0, doubleArray0);
      double double3 = 1.1368683772161603E-10;
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.computeDerivatives(1.1368683772161603E-10, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(3639.614378104072);
      eulerIntegrator0.getName();
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0.0);
      midpointIntegrator0.getMaxEvaluations();
      midpointIntegrator0.getStepHandlers();
      midpointIntegrator0.getMaxEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-4925.66370684015), doubleArray0, (-0.871391583777973), doubleArray0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(490.35218089);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 4481.9;
      doubleArray0[1] = 4481.9;
      doubleArray0[2] = 490.35218089;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 4481.9;
      doubleArray1[1] = 9.094947017729282E-10;
      doubleArray1[2] = 490.35218089;
      // Undeclared exception!
      try { 
        eulerIntegrator0.integrate((FirstOrderDifferentialEquations) null, 490.35218089, doubleArray0, 490.35218089, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double double0 = 0.0;
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0.0);
      midpointIntegrator0.getEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      midpointIntegrator0.addStepHandler((StepHandler) null);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      double double1 = 0.0;
      // Undeclared exception!
      try { 
        midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1000.0, doubleArray0, 0.0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-0.2735313036020583);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, (-0.2735313036020583), doubleArray0, doubleArray0);
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(6.943684261645378E-10);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      eulerIntegrator0.addEventHandler(eventHandler0, (-3356.5874947), 2378.2, (-1962), (UnivariateSolver) null);
      eulerIntegrator0.getEventHandlers();
      eulerIntegrator0.getMaxEvaluations();
      eulerIntegrator0.setMaxEvaluations((-1962));
      eulerIntegrator0.getCurrentSignedStepsize();
      eulerIntegrator0.getMaxEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      try { 
        eulerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) Integer.MAX_VALUE, doubleArray0, (-3356.5874947), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-1370.3256322002371));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      int int0 = 0;
      midpointIntegrator0.addEventHandler(eventHandler0, (-1370.3256322002371), (-1836.58859), 0);
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double0 = 1603.62834841838;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      midpointIntegrator0.integrate(expandableStatefulODE0, 1.1368683772161603E-10);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double double0 = 0.0;
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0.0);
      midpointIntegrator0.getEvaluations();
      int int0 = 760;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(760).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double double1 = 1000.0;
      double[] doubleArray0 = new double[0];
      double double2 = 0.0;
      try { 
        midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1000.0, doubleArray0, 0.0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 1,520
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double double0 = (-0.2735313036020583);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-0.2735313036020583);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, (-0.2735313036020583), doubleArray0, doubleArray0);
      double double1 = 0.0;
      graggBulirschStoerIntegrator0.setControlFactors((-0.2735313036020583), (-1952.39534424899), (-1394.198), 0.0);
      graggBulirschStoerIntegrator0.addStepHandler((StepHandler) null);
      int int0 = 0;
      graggBulirschStoerIntegrator0.setInterpolationControl(false, 0);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, (-1394.198), (-0.2735313036020583), (-1394.198));
      dormandPrince54Integrator0.getOrder();
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(5, 0.0, 0.0, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      adamsMoultonIntegrator0.getStepHandlers();
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.getSecondaryMappers();
      try { 
        adamsMoultonIntegrator0.integrate(expandableStatefulODE0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 1
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double double0 = 1266.21077;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1266.21077;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1266.21077, 1.0E-15, doubleArray0, doubleArray0);
      int int0 = 238;
      dormandPrince54Integrator0.setMaxEvaluations(238);
      dormandPrince54Integrator0.getCurrentSignedStepsize();
      double double1 = 0.03697916666666667;
      double double2 = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1266.21077, 0.03697916666666667, 1266.21077, 0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.getCompleteState();
      // Undeclared exception!
      try { 
        expandableStatefulODE0.getSecondaryStateDot(238);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 238, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(1.0);
      eulerIntegrator0.getEventHandlers();
      eulerIntegrator0.getEventHandlers();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      eulerIntegrator0.addEventHandler(eventHandler0, 5.0, 5.0, 0, (UnivariateSolver) null);
      eulerIntegrator0.getEventHandlers();
      eulerIntegrator0.getMaxEvaluations();
      eulerIntegrator0.setMaxEvaluations(Integer.MAX_VALUE);
      eulerIntegrator0.getCurrentSignedStepsize();
      eulerIntegrator0.getMaxEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1103.4622409783);
      doubleArray0[1] = 5.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) Integer.MAX_VALUE;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = Double.NaN;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = Double.NaN;
      try { 
        eulerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 5.0, doubleArray0, (double) Integer.MAX_VALUE, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1.0), 0.0, Double.NaN, Double.NaN);
      graggBulirschStoerIntegrator0.setStabilityCheck(false, 1673, 5, (-1401.4779));
      double double0 = graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double double0 = (-4255.981);
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-4255.981));
      midpointIntegrator0.getEvaluations();
      midpointIntegrator0.setMaxEvaluations(5);
      midpointIntegrator0.getMaxEvaluations();
      double double1 = 1116.2183271324;
      double[] doubleArray0 = new double[1];
      double double2 = 0.0;
      doubleArray0[0] = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1116.2183271324, (-4255.981), doubleArray0, doubleArray0);
      double double3 = (-3525.926266607839);
      double double4 = 0.0;
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-4255.981), doubleArray0, 0.0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1952.4878775), (-188.24889864809), (-1952.4878775), (-1952.4878775));
      dormandPrince853Integrator0.clearEventHandlers();
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(4481.9);
      gillIntegrator0.getEventHandlers();
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1266.21077;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1266.21077, 1.0E-15, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.setMaxEvaluations(238);
      dormandPrince54Integrator0.getCurrentSignedStepsize();
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(1.0E-15);
      midpointIntegrator0.addEventHandler((EventHandler) null, (double) 238, (double) 238, 594);
      midpointIntegrator0.addEventHandler((EventHandler) null, 1266.21077, (double) 0, 0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(594, 5477052.0646243105, 594, 1719.421507873531);
      double double0 = 994.659063672877;
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(1.1368683772161603E-10);
      eulerIntegrator0.getCurrentSignedStepsize();
      eulerIntegrator0.getMaxEvaluations();
      FirstOrderConverter firstOrderConverter0 = null;
      try {
        firstOrderConverter0 = new FirstOrderConverter((SecondOrderDifferentialEquations) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.FirstOrderConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-1370.3256322002371));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      midpointIntegrator0.addEventHandler(eventHandler0, (-1370.3256322002371), (-1836.58859), 0);
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler1).toString();
      midpointIntegrator0.addEventHandler(eventHandler1, 1603.62834841838, 20.154067550477894, 0);
      midpointIntegrator0.getEventHandlers();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.47766253643826434, (-1836.58859), doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 0.47766253643826434);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 1
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 0.1521609496625161;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.1521609496625161;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.1521609496625161;
      doubleArray0[3] = 0.1521609496625161;
      doubleArray0[4] = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.1521609496625161, doubleArray0, doubleArray0);
      double double2 = 2095.942465665597;
      double double3 = 157.8530242;
      graggBulirschStoerIntegrator0.setControlFactors(0.0, 2095.942465665597, 157.8530242, 0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.computeDerivatives(0.0, doubleArray0, doubleArray0);
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 157.8530242);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 5
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(0.0);
      double double0 = gillIntegrator0.getCurrentSignedStepsize();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-2722.06432663));
      midpointIntegrator0.getStepHandlers();
      midpointIntegrator0.clearStepHandlers();
      midpointIntegrator0.getStepHandlers();
      double[] doubleArray0 = new double[5];
      doubleArray0[4] = (-2722.06432663);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-3319.3258631);
      doubleArray0[1] = (-3319.3258631);
      doubleArray0[2] = 15.697238121770845;
      doubleArray0[3] = (-3319.3258631);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(15.697238121770845, (-3319.3258631), doubleArray0, doubleArray0);
      Collection<StepHandler> collection0 = highamHall54Integrator0.getStepHandlers();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-2722.06432663));
      midpointIntegrator0.getStepHandlers();
      midpointIntegrator0.clearStepHandlers();
      midpointIntegrator0.getStepHandlers();
      midpointIntegrator0.getMaxEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = (-2722.06432663);
      doubleArray0[2] = (double) Integer.MAX_VALUE;
      doubleArray0[3] = (double) Integer.MAX_VALUE;
      doubleArray0[4] = (-2722.06432663);
      try { 
        midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) Integer.MAX_VALUE, doubleArray0, (-0.871391583777973), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2258.436441044, 2295.9390221905073, 2258.436441044, 79.56240733667428);
      StepNormalizer stepNormalizer0 = new StepNormalizer(2258.436441044, (FixedStepHandler) null);
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      graggBulirschStoerIntegrator0.setOrderControl(534, 5190.0533, 534);
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 0);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(79.56240733667428, (-2403.77406719255), 0.0, 4311.481210287932);
      int int0 = dormandPrince54Integrator0.getOrder();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1789.998008714;
      doubleArray0[1] = 1789.998008714;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1789.998008714, 1789.998008714, doubleArray0, doubleArray0);
      int int0 = graggBulirschStoerIntegrator0.getMaxEvaluations();
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, 0.0, 0.0);
      graggBulirschStoerIntegrator0.setInterpolationControl(false, 551);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-118.782055557);
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.computeDerivatives((-2051.22), doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double double0 = 0.0;
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0.0);
      midpointIntegrator0.getEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      double double1 = 0.0;
      // Undeclared exception!
      midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1000.0, doubleArray0, 0.0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0.0);
      midpointIntegrator0.getEvaluations();
      GillIntegrator gillIntegrator0 = new GillIntegrator(834.8479348);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = (-2403);
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = null;
      try {
        adamsBashforthIntegrator0 = new AdamsBashforthIntegrator((-2403), (-2740.183572688411), (-2403), (-2740.183572688411), (-2740.183572688411));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // multistep method needs at least -2,403 previous steps, got 2
         //
         verifyException("org.apache.commons.math3.ode.MultistepIntegrator", e);
      }
  }
}
