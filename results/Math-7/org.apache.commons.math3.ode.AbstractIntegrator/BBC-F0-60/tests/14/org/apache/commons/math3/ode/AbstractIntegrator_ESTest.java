/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 22:47:30 GMT 2021
 */

package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import org.apache.commons.math3.analysis.differentiation.DerivativeStructure;
import org.apache.commons.math3.analysis.function.Expm1;
import org.apache.commons.math3.analysis.function.Sigmoid;
import org.apache.commons.math3.analysis.function.Sin;
import org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver;
import org.apache.commons.math3.analysis.solvers.RiddersSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator;
import org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator;
import org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.EulerIntegrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.nonstiff.MidpointIntegrator;
import org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.StepHandler;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.apache.commons.math3.ode.sampling.StepNormalizerBounds;
import org.apache.commons.math3.ode.sampling.StepNormalizerMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegrator_ESTest extends AbstractIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double double0 = Double.NaN;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(Double.NaN, Double.NaN, (-15.49297), Double.NaN);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      dormandPrince853Integrator0.setMaxEvaluations(6936);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        dormandPrince853Integrator0.integrate(expandableStatefulODE0, Double.NaN);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (6,936) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(18.685774655785732);
      double[] doubleArray0 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(594.337859, (-5812.778595182303), (-5812.778595182303), 18.685774655785732);
      DormandPrince54Integrator dormandPrince54Integrator1 = new DormandPrince54Integrator((-1.0), (-5812.778595182303), (-705.657926458923), 594.337859);
      DormandPrince54Integrator dormandPrince54Integrator2 = new DormandPrince54Integrator((-5812.778595182303), (-5812.778595182303), (-1.6104730195920897E-7), (-1.0));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      dormandPrince54Integrator2.addEventHandler(eventHandler0, (-5812.778595182303), (-705.657926458923), (-1539));
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.NEITHER;
      StepNormalizer stepNormalizer0 = new StepNormalizer(1936.5784055, (FixedStepHandler) null, stepNormalizerBounds0);
      dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      // Undeclared exception!
      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1.0), doubleArray0, 912.9776309198, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.sampling.StepNormalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(18.685774655785732);
      double[] doubleArray0 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(594.337859, (-5812.778595182303), (-5812.778595182303), 18.685774655785732);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2.50909423828125, doubleArray0, 594.337859, doubleArray0);
      threeEighthesIntegrator0.getStepHandlers();
      // Undeclared exception!
      dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-3442.97514626), doubleArray0, (-5812.778595182303), doubleArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(18.685774655785732);
      double[] doubleArray0 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(4324.000000000114, 4324.000000000114, 4324.000000000114, (-2855.3889));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-2855.3889), doubleArray0, 1.2168786525726318, doubleArray0);
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(7, (-2855.3889), 4324.000000000114, doubleArray0, doubleArray0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      try { 
        adamsMoultonIntegrator0.integrate(expandableStatefulODE0, 4324.000000000114);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one column
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(18.685774655785732);
      double[] doubleArray0 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(594.337859, (-5812.778595182303), (-5812.778595182303), 18.685774655785732);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(959).when(secondOrderDifferentialEquations0).getDimension();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-5812.778595182303), 2.2737367544323206E-10).when(eventHandler0).g(anyDouble() , any(double[].class));
      dormandPrince54Integrator0.addEventHandler(eventHandler0, 0.0, 0.0, (-1539));
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter1, (-5812.778595182303), doubleArray0, 1920.7638, doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-1,539) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(18.685774655785732);
      double[] doubleArray0 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(594.337859, (-5812.778595182303), (-5812.778595182303), 18.685774655785732);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2.50909423828125, doubleArray0, 594.337859, doubleArray0);
      dormandPrince54Integrator0.getEvaluations();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(18.685774655785732);
      double[] doubleArray0 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(3551.095213099583, 1067.26393087495, 18.685774655785732, (-2511.4091472));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      dormandPrince54Integrator0.addEventHandler(eventHandler0, 18.685774655785732, 5257.209825182304, (-1145));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
      dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-2511.4091472), doubleArray0, 1067.26393087495, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(Double.NaN, Double.NaN, (-15.49297), Double.NaN);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(Double.NaN, (-15.49297), 441.9999999997726, 4787.39990761);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 4787.39990761, doubleArray0, 4787.39990761, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double double0 = Double.NaN;
      double double1 = (-31.190098562664108);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(Double.NaN, Double.NaN, (-31.190098562664108), Double.NaN);
      int int0 = 2263;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(2263).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      try { 
        dormandPrince853Integrator0.integrate((ExpandableStatefulODE) null, Double.NaN);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(4.8516190384397154E232, (-1234.7033241383876), (-15.49297), (-1944.5357033836406));
      dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1944.5357033836406), doubleArray0, (-1234.7033241383876), doubleArray0);
      dormandPrince54Integrator0.computeDerivatives(709.8323792452529, doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(Double.NaN, Double.NaN, (-15.49297), Double.NaN);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(2071).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 124.6592924;
      doubleArray0[1] = (-15.49297);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = 124.6592924;
      doubleArray1[2] = (-15.49297);
      doubleArray1[3] = Double.NaN;
      DormandPrince853Integrator dormandPrince853Integrator1 = new DormandPrince853Integrator(124.6592924, 7.149792225695347E-142, doubleArray0, doubleArray1);
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        dormandPrince853Integrator1.integrate(expandableStatefulODE1, 1.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4,142 != 2
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(Double.NaN, 2120.0, (-15.49297), 2120.0);
      double[] doubleArray0 = new double[0];
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-1597.56600547893), 582.021506, (-423.0698373465896), (-1944.5357033836406));
      // Undeclared exception!
      dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1234.7033241383876), doubleArray0, 582.021506, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1.1368683772161603E-10, (-578.390446621591), 2.7897360297480367E104, 1.1368683772161603E-10);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.1368683772161603E-10;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-578.390446621591);
      doubleArray0[3] = 0.0;
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-8.472642266772353E218);
      doubleArray1[2] = (-578.390446621591);
      doubleArray1[3] = Double.NaN;
      doubleArray1[4] = 2.7897360297480367E104;
      doubleArray1[5] = 2.7897360297480367E104;
      doubleArray1[6] = 1.1368683772161603E-10;
      doubleArray1[7] = (-578.04918354408);
      doubleArray1[8] = 0.142645001411438;
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-578.04918354408), doubleArray0, 2.7897360297480367E104, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setOrderControl(1404, (-2.870168560029448E-284), (-2.870168560029448E-284));
      graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(Double.NaN, 2120.0, (-15.49297), 2120.0);
      double double0 = 2.3789334438756013E245;
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2120.0, 2.3789334438756013E245, doubleArray0, doubleArray0);
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(2.3789334438756013E245);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(2.3789334438756013E245, (-1458.598)).when(eventHandler0).g(anyDouble() , any(double[].class));
      classicalRungeKuttaIntegrator0.addEventHandler(eventHandler0, 2120.0, 0.0, 0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.computeDerivatives(2120.0, doubleArray0, doubleArray0);
      try { 
        classicalRungeKuttaIntegrator0.integrate(expandableStatefulODE0, 2120.0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(Double.NaN, 2120.0, (-15.49297), 2120.0);
      double[] doubleArray0 = new double[0];
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(2.3789334438756013E245);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 2.3789334438756013E245;
      doubleArray1[1] = 2.3789334438756013E245;
      try { 
        classicalRungeKuttaIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2120.0, doubleArray0, (-2108.34832), doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(Double.NaN, 2120.0, (-15.49297), 2120.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      dormandPrince853Integrator0.addEventHandler(eventHandler0, Double.NaN, Double.NaN, (-3397));
      dormandPrince853Integrator0.getEventHandlers();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double double0 = (-15.49297);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(Double.NaN, 2120.0, (-15.49297), 2120.0);
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2120.0, 2.3789334438756013E245, doubleArray0, doubleArray0);
      int int0 = (-2854);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2.3789334438756013E245, doubleArray0, (-578.04918354408), doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(Double.NaN, 2120.0, (-15.49297), 2120.0);
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2120.0, 2.3789334438756013E245, doubleArray0, doubleArray0);
      int int0 = (-2854);
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(2.3789334438756013E245);
      double double0 = 3262.91609;
      // Undeclared exception!
      try { 
        classicalRungeKuttaIntegrator0.integrate((FirstOrderDifferentialEquations) null, 1681.661241735, doubleArray0, 3262.91609, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(2486.9443790593505);
      threeEighthesIntegrator0.getCurrentStepStart();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      threeEighthesIntegrator0.getEventHandlers();
      RiddersSolver riddersSolver0 = new RiddersSolver(Double.NaN, (-3729.0));
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(1.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-3729.0);
      doubleArray1[1] = 2.5;
      doubleArray1[2] = Double.NaN;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (-3729.0);
      // Undeclared exception!
      try { 
        classicalRungeKuttaIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 151.9, (double[]) null, (-4.676849004137386E-23), doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double double0 = 0.0;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 0.0, 0.0, 0.0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, 35.81684148639408, 0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(373).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      int int0 = 0;
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(0.0);
      classicalRungeKuttaIntegrator0.addEventHandler((EventHandler) null, 0.0, 0.0, 0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator1 = new ClassicalRungeKuttaIntegrator(0);
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter1);
      double double1 = (-1269.5657);
      // Undeclared exception!
      classicalRungeKuttaIntegrator1.integrate(expandableStatefulODE1, (-1269.5657));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double double0 = 0.054293734116568765;
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(0.054293734116568765);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(895).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-391.38123893997);
      try { 
        classicalRungeKuttaIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-391.38123893997), doubleArray0, (-391.38123893997), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 1,790
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(2638.325);
      midpointIntegrator0.clearEventHandlers();
      midpointIntegrator0.getEventHandlers();
      double double0 = Double.NaN;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(Double.NaN, (-3001.0), (-1720.1), (-9.194632392478356));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      double double1 = (-1596.2712247795012);
      int int0 = 0;
      RiddersSolver riddersSolver0 = new RiddersSolver(32.59180477821572);
      graggBulirschStoerIntegrator0.setInitialStepSize((-1720.1));
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (-1596.2712247795012), Double.NaN, 0, (UnivariateSolver) riddersSolver0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.getSecondaryMappers();
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (-9.194632392478356));
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(2638.325);
      midpointIntegrator0.clearEventHandlers();
      midpointIntegrator0.getEventHandlers();
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(Double.NaN, (-3001.0), (-3001.0), (-1217.43525519));
      dormandPrince853Integrator0.getEventHandlers();
      dormandPrince853Integrator0.getName();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-140.6258992067123);
      doubleArray0[3] = 2638.325;
      doubleArray0[4] = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(239.619824497427, 1913.64279, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setOrderControl(0, (-592.7289963), 0.0);
      assertEquals(677.1608003204014, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-7.4072644);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setStabilityCheck(true, 1, 1, 0.0);
      graggBulirschStoerIntegrator0.getEvaluations();
      graggBulirschStoerIntegrator0.clearEventHandlers();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.setMaxEvaluations(1809);
      graggBulirschStoerIntegrator0.setMaxEvaluations((-2854));
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 1531.5764029895413, 3663.6991324697, 1809);
      graggBulirschStoerIntegrator0.setControlFactors(0.0, 0.0, 0.0, 4587.811160870627);
      graggBulirschStoerIntegrator0.setOrderControl(2043, 0.0, 0.0);
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      RiddersSolver riddersSolver0 = new RiddersSolver(0.0);
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler1, (double) 1, 3663.6991324697, 1809, (UnivariateSolver) riddersSolver0);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 1531.5764029895413;
      doubleArray1[1] = (double) 1809;
      doubleArray1[2] = (double) 1809;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = 0.0;
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = null;
      try {
        adamsMoultonIntegrator0 = new AdamsMoultonIntegrator((-2854), 1198.26005778, 1198.26005778, doubleArray1, doubleArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-2105.8525);
      doubleArray0[1] = (-2105.8525);
      doubleArray0[2] = (-2105.8525);
      doubleArray0[3] = (-2105.8525);
      doubleArray0[4] = (-2105.8525);
      doubleArray0[5] = (-2105.8525);
      doubleArray0[6] = (-2105.8525);
      doubleArray0[7] = (-2105.8525);
      doubleArray0[8] = 4.8516190384397154E232;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-2105.8525), (-2105.8525), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setControlFactors((-2105.8525), (-2105.8525), (-2105.8525), 0.0);
      Collection<StepHandler> collection0 = graggBulirschStoerIntegrator0.getStepHandlers();
      graggBulirschStoerIntegrator0.setStabilityCheck(true, 644, 5, 5);
      Collection<StepHandler> collection1 = graggBulirschStoerIntegrator0.getStepHandlers();
      assertNotSame(collection1, collection0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(3443.81169);
      classicalRungeKuttaIntegrator0.getStepHandlers();
      double double0 = (-1174.686735);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-1174.686735);
      doubleArray0[1] = (-1174.686735);
      doubleArray0[2] = 3443.81169;
      doubleArray0[3] = 3443.81169;
      doubleArray0[4] = 3443.81169;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1174.686735), 3443.81169, doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      int int0 = 253;
      graggBulirschStoerIntegrator0.setMaxEvaluations(125);
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver((-703.8472883), (-2780.496721158), 3443.81169, 253);
      int int1 = 201;
      Sigmoid sigmoid0 = new Sigmoid();
      Expm1 expm1_0 = new Expm1();
      Sin sin0 = new Sin();
      DerivativeStructure derivativeStructure0 = new DerivativeStructure(125, 201);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(Double.NaN);
      threeEighthesIntegrator0.getCurrentStepStart();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(693.0368823, (-2249.85199), 1.1368683772161603E-10, 693.0368823);
      graggBulirschStoerIntegrator0.setOrderControl((-1001), 709.8323792452529, 1000.0);
      assertEquals(1248.691478623143, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(2486.9443790593505);
      threeEighthesIntegrator0.getCurrentStepStart();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      threeEighthesIntegrator0.getEventHandlers();
      RiddersSolver riddersSolver0 = new RiddersSolver(Double.NaN, (-3729.0));
      riddersSolver0.getMaxEvaluations();
      threeEighthesIntegrator0.addEventHandler(eventHandler0, 1000.0, 2486.9443790593505, 0, (UnivariateSolver) riddersSolver0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (-3729.0);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-30.0), 0.0, doubleArray0, doubleArray1);
      double[] doubleArray2 = new double[6];
      doubleArray2[0] = Double.NaN;
      doubleArray2[1] = (-30.0);
      doubleArray2[2] = (double) 0;
      doubleArray2[3] = (double) 0;
      doubleArray2[4] = (-223.660507);
      doubleArray2[5] = (-3729.0);
      // Undeclared exception!
      try { 
        dormandPrince853Integrator0.computeDerivatives(0.0, doubleArray1, doubleArray2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(0.0);
      eulerIntegrator0.addStepHandler((StepHandler) null);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 1.0, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setControlFactors(0.0, 1.0, 0.0, 0.0);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
      threeEighthesIntegrator0.clearEventHandlers();
      threeEighthesIntegrator0.clearStepHandlers();
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        threeEighthesIntegrator0.computeDerivatives(0.0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(Double.NaN, 2120.0, (-15.49297), 2120.0);
      dormandPrince853Integrator0.getCurrentSignedStepsize();
      double double0 = dormandPrince853Integrator0.getCurrentSignedStepsize();
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2.3789334438756013E245, 4.8516190384397154E232, 3282.60778, 4.8516190384397154E232);
      graggBulirschStoerIntegrator0.getEvaluations();
      graggBulirschStoerIntegrator0.setStabilityCheck(false, (-85), 2838, (-85));
      graggBulirschStoerIntegrator0.setStepSizeControl(3282.60778, 3282.60778, 0.0, 1000.0);
      graggBulirschStoerIntegrator0.getCurrentStepStart();
      graggBulirschStoerIntegrator0.getCurrentStepStart();
      graggBulirschStoerIntegrator0.getEvaluations();
      int int0 = graggBulirschStoerIntegrator0.getMaxEvaluations();
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 617.8653432603602;
      doubleArray0[1] = 2310.40166;
      doubleArray0[2] = (-3028.472505);
      doubleArray0[3] = 2310.40166;
      doubleArray0[4] = (-3028.472505);
      doubleArray0[5] = 2310.40166;
      doubleArray0[6] = 2310.40166;
      doubleArray0[7] = (-3028.472505);
      doubleArray0[8] = 2310.40166;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-3028.472505), 2310.40166, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.getEvaluations();
      dormandPrince54Integrator0.setMaxGrowth(0.0);
      dormandPrince54Integrator0.getEvaluations();
      dormandPrince54Integrator0.setInitialStepSize((-3028.472505));
      dormandPrince54Integrator0.getEventHandlers();
      dormandPrince54Integrator0.setStepSizeControl(2310.40166, 2310.40166, doubleArray0, doubleArray0);
      double double0 = dormandPrince54Integrator0.getCurrentSignedStepsize();
      assertEquals(2645.1820169539105, double0, 0.01);
      
      dormandPrince54Integrator0.getOrder();
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      dormandPrince54Integrator0.setStepSizeControl((-1378.1102505), 0.0, 191.009, (-1378.1102505));
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizer stepNormalizer0 = new StepNormalizer(450.93951, fixedStepHandler0, stepNormalizerMode0);
      dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
      dormandPrince54Integrator0.getName();
      dormandPrince54Integrator0.clearStepHandlers();
      dormandPrince54Integrator0.getOrder();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1.8915178993145003, 617.8653432603602, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setStabilityCheck(false, 0, (-796), (-188.2539));
      assertEquals(34.18630363381027, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, 0.0, (-784.2));
      dormandPrince853Integrator0.getEventHandlers();
      dormandPrince853Integrator0.getName();
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 239.619824497427, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setOrderControl(0, 0.0, 0.0);
      assertEquals(239.619824497427, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        threeEighthesIntegrator0.computeDerivatives(0.0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double double0 = 2476.897152061945;
      double[] doubleArray0 = new double[3];
      double double1 = (-1465.1907417);
      doubleArray0[0] = (-1465.1907417);
      doubleArray0[1] = 2476.897152061945;
      doubleArray0[2] = 2476.897152061945;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(2476.897152061945, 2476.897152061945, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.getOrder();
      double double2 = (-2820.395);
      double[] doubleArray1 = new double[3];
      dormandPrince54Integrator0.setMinReduction((-1465.1907417));
      double double3 = 0.0;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      dormandPrince54Integrator0.getEventHandlers();
      dormandPrince54Integrator0.setMaxEvaluations(5);
      dormandPrince54Integrator0.addEventHandler(eventHandler0, 0.0, (-1465.1907417), 0, (UnivariateSolver) null);
      dormandPrince54Integrator0.setStepSizeControl(0.0, (double) 5, doubleArray1, doubleArray0);
      doubleArray1[0] = (double) 5;
      doubleArray1[1] = (-2820.395);
      dormandPrince54Integrator0.setInitialStepSize(5);
      doubleArray1[2] = (-2820.395);
      // Undeclared exception!
      try { 
        dormandPrince54Integrator0.computeDerivatives((-2820.395), doubleArray0, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double double0 = 0.50625;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.50625, 0.50625, 0.0, 0.0);
      double double1 = 0.0;
      highamHall54Integrator0.getMaxEvaluations();
      double double2 = (-436.506220976);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-436.506220976);
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.50625;
      doubleArray0[5] = 0.50625;
      doubleArray0[6] = (-436.506220976);
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (double) Integer.MAX_VALUE;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-436.506220976);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-436.506220976);
      // Undeclared exception!
      try { 
        highamHall54Integrator0.initializeStep(false, 3259, doubleArray0, 0.0, doubleArray0, doubleArray1, doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(3638.55354);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 3638.55354;
      doubleArray0[1] = 3638.55354;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 3638.55354;
      double double0 = 2809.9220403;
      doubleArray0[4] = 2809.9220403;
      doubleArray0[5] = 3638.55354;
      doubleArray0[6] = 3638.55354;
      doubleArray0[7] = 3638.55354;
      try { 
        classicalRungeKuttaIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 3638.55354, doubleArray0, 2.5, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2953.69999;
      doubleArray0[1] = 317.3890758;
      doubleArray0[2] = (-1133.37874529939);
      doubleArray0[3] = (-1133.37874529939);
      doubleArray0[4] = 317.3890758;
      doubleArray0[5] = 317.3890758;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(317.3890758, (-1133.37874529939), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setControlFactors((-1133.37874529939), (-1133.37874529939), (-1132.3566500776), 3262.543947);
      graggBulirschStoerIntegrator0.setControlFactors(317.3890758, (-25.69393346270375), 1000.0, 2886.678);
      graggBulirschStoerIntegrator0.setMaxEvaluations(0);
      assertEquals(1133.37874529939, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = 0;
      double double0 = 0.0;
      double double1 = 1851.873083921;
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = null;
      try {
        adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(0, 0, 0.0, 1851.873083921, 1.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // multistep method needs at least 0 previous steps, got 2
         //
         verifyException("org.apache.commons.math3.ode.MultistepIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-468.1121273356);
      doubleArray0[6] = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, doubleArray0, doubleArray0);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
  }
}
