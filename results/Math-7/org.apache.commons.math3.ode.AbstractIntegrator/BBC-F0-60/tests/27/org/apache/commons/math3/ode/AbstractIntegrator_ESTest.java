/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 23:06:57 GMT 2021
 */

package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver;
import org.apache.commons.math3.analysis.solvers.BrentSolver;
import org.apache.commons.math3.analysis.solvers.MullerSolver;
import org.apache.commons.math3.analysis.solvers.MullerSolver2;
import org.apache.commons.math3.analysis.solvers.PegasusSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondaryEquations;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator;
import org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.GillIntegrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.nonstiff.MidpointIntegrator;
import org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator;
import org.apache.commons.math3.ode.sampling.DummyStepHandler;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator;
import org.apache.commons.math3.ode.sampling.StepHandler;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.apache.commons.math3.ode.sampling.StepNormalizerBounds;
import org.apache.commons.math3.ode.sampling.StepNormalizerMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegrator_ESTest extends AbstractIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1329.604892), (-1329.604892), (-1329.604892), 1107.47856);
      graggBulirschStoerIntegrator0.setMaxEvaluations(0);
      graggBulirschStoerIntegrator0.setControlFactors(0.0, 0, 0, 0.0);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1107.47856, (-1265.21), 0.0, 0.0);
      dormandPrince853Integrator0.getOrder();
      dormandPrince853Integrator0.setMaxGrowth(0.0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator1 = new GraggBulirschStoerIntegrator(0.0, 1390.46623, 0.9999999997726263, 0.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      BrentSolver brentSolver0 = new BrentSolver(935.2957090835034, 699.0, 699.0);
      graggBulirschStoerIntegrator1.addEventHandler(eventHandler0, 1620.0, 1620.0, (-1702), (UnivariateSolver) brentSolver0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 935.2957090835034);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1233.9, 1099.47856, 1233.9, 1233.9);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-3360.1746663), 1233.9).when(eventHandler0).g(anyDouble() , any(double[].class));
      GillIntegrator gillIntegrator0 = new GillIntegrator(4.7640323331013947E-101);
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
      gillIntegrator0.addEventHandler(eventHandler0, 4.7640323331013947E-101, 4.547473508864641E-10, (-1996), (UnivariateSolver) bracketingNthOrderBrentSolver0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      SecondaryEquations secondaryEquations0 = mock(SecondaryEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondaryEquations0).getDimension();
      expandableStatefulODE0.addSecondaryEquations(secondaryEquations0);
      try { 
        gillIntegrator0.integrate(expandableStatefulODE0, (double) (-1996));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-1,996) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(1233.9);
      midpointIntegrator0.getEventHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-2158.6), doubleArray0, (-4.044932340334176E-9), doubleArray0);
      midpointIntegrator0.getEvaluations();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(3672.527, 0.25239890813827515, 0.25239890813827515, (-4.044932340334176E-9));
      graggBulirschStoerIntegrator0.setOrderControl(6, 0.45623743534088135, (-3.8207793300052055E-8));
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(1233.9);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(245).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      MullerSolver2 mullerSolver2_0 = new MullerSolver2(2927.11224631, 0.0);
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1974.671088274127));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((double)245, 1.1368683772161603E-10, (-1974.671088274127), 8.306111510463843E-162, 1611.33605).when(eventHandler0).g(anyDouble() , any(double[].class));
      gillIntegrator0.addEventHandler(eventHandler0, (-897.65), 588.9641757707245, 276, (UnivariateSolver) mullerSolver2_0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(2480).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        gillIntegrator0.integrate(expandableStatefulODE0, 1233.9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [\uFFFD, \uFFFD], values: [1,611.336, 1,611.336]
         //
         verifyException("org.apache.commons.math3.analysis.solvers.MullerSolver2", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double double0 = 1233.9;
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(1233.9);
      midpointIntegrator0.getEventHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-2158.6), 4.0891054447206644E61, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      graggBulirschStoerIntegrator0.setMaxEvaluations(0);
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter1, 1.0, doubleArray0, 0.6666666666666666, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double double0 = (-1158.8);
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1158.8));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      MullerSolver2 mullerSolver2_0 = new MullerSolver2((-449), 521.9644249334162);
      gillIntegrator0.addEventHandler(eventHandler0, 1000.0, (-1158.8), (-449), (UnivariateSolver) mullerSolver2_0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      gillIntegrator0.integrate(expandableStatefulODE0, (-1158.8));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1329.604892), (-1329.604892), (-1329.604892), 1107.47856);
      graggBulirschStoerIntegrator0.setMaxEvaluations(0);
      graggBulirschStoerIntegrator0.setControlFactors(0.0, 0, 0, 0.0);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1107.47856, (-1265.21), 0.0, 0.0);
      dormandPrince853Integrator0.getOrder();
      dormandPrince853Integrator0.setMaxGrowth(0.0);
      dormandPrince853Integrator0.getEventHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      dormandPrince853Integrator0.getStepHandlers();
      double[] doubleArray0 = new double[0];
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-524.4834622521356), doubleArray0, 0.0, doubleArray0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1.0));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter1);
      // Undeclared exception!
      try { 
        gillIntegrator0.integrate((ExpandableStatefulODE) null, (-2390.122895904));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1329.604892), (-1329.604892), (-1329.604892), 1107.47856);
      int int0 = 0;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (-1329.604892), 1107.47856, Integer.MAX_VALUE);
      graggBulirschStoerIntegrator0.setMaxEvaluations(0);
      graggBulirschStoerIntegrator0.setControlFactors(0.0, 0, 0, 0.0);
      double double0 = (-1265.21);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1107.47856, (-1265.21), 0.0, 0.0);
      dormandPrince853Integrator0.getOrder();
      dormandPrince853Integrator0.setMaxGrowth(0.0);
      dormandPrince853Integrator0.getEventHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.NEITHER;
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.0, fixedStepHandler0, stepNormalizerMode0, stepNormalizerBounds0);
      dormandPrince853Integrator0.addStepHandler(stepNormalizer0);
      dormandPrince853Integrator0.getStepHandlers();
      double[] doubleArray0 = new double[0];
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-524.4834622521356), doubleArray0, 0.0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      // Undeclared exception!
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter1, 1000.0, doubleArray0, (-1329.604892), doubleArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double double0 = (-61.08041);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1736.1581);
      doubleArray0[1] = 2353.0;
      doubleArray0[2] = (-61.08041);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1736.1581), (-61.08041), doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (-1736.1581));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 3
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double double0 = (-1329.604892);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1329.604892), (-1329.604892), (-1329.604892), 1107.47856);
      graggBulirschStoerIntegrator0.setMaxEvaluations(0);
      graggBulirschStoerIntegrator0.setControlFactors(0.0, 0, 0, 0.0);
      double double1 = 0.0;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1107.47856, (-1265.21), 0.0, 0.0);
      dormandPrince853Integrator0.getOrder();
      dormandPrince853Integrator0.setMaxGrowth(0.0);
      dormandPrince853Integrator0.getEventHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (-1265.21), 208.7088029, 8);
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.NEITHER;
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.0, fixedStepHandler0, stepNormalizerMode0, stepNormalizerBounds0);
      dormandPrince853Integrator0.addStepHandler(stepNormalizer0);
      dormandPrince853Integrator0.getStepHandlers();
      double[] doubleArray0 = new double[0];
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-524.4834622521356), doubleArray0, 0.0, doubleArray0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (-1.0));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(5184.916537747864, 1.0, (-339.69), (-337.5058598313872));
      dormandPrince853Integrator0.getOrder();
      dormandPrince853Integrator0.setMaxGrowth((-2523.486989587));
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-339.69);
      doubleArray1[1] = (-2523.486989587);
      doubleArray1[2] = 1344.0;
      DormandPrince853Integrator dormandPrince853Integrator1 = new DormandPrince853Integrator(2682.5281982756615, (-1460.969315514447), doubleArray0, doubleArray1);
      dormandPrince853Integrator0.getEventHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      dormandPrince853Integrator0.getStepHandlers();
      dormandPrince853Integrator1.setStepSizeControl(2206.998, (-1130.247110987), 5184.916537747864, (-1746.035));
      dormandPrince853Integrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1521.7304), doubleArray0, (-1077.331476713212), doubleArray0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(2682.5281982756615);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1113.940665533245, 1113.940665533245, (-4124.641), (-4124.641));
      highamHall54Integrator0.getEvaluations();
      highamHall54Integrator0.getEventHandlers();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(4351.98806, (-4124.641), (-4124.641), (-4124.641));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime(4351.98806);
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 1113.940665533245);
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(1302.8790991418596);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1329.604892), (-1329.604892), (-1329.604892), 1107.47856);
      int int0 = 0;
      graggBulirschStoerIntegrator0.setMaxEvaluations(0);
      graggBulirschStoerIntegrator0.setControlFactors(0, (-180.86565), (-1329.604892), (-1.0));
      graggBulirschStoerIntegrator0.setControlFactors(0.0, 0, 0, 0);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1107.47856, (-180.86565), 0.0, 0.0);
      dormandPrince853Integrator0.getOrder();
      dormandPrince853Integrator0.setMaxGrowth((-180.86565));
      graggBulirschStoerIntegrator0.getEventHandlers();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1329.604892);
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 2012.8741;
      doubleArray0[4] = 0.0;
      graggBulirschStoerIntegrator0.getMaxEvaluations();
      doubleArray0[5] = 1107.47856;
      doubleArray0[6] = (-1.0);
      doubleArray0[7] = (-180.86565);
      doubleArray0[8] = 2012.8741;
      try { 
        graggBulirschStoerIntegrator0.computeDerivatives(0, doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double double0 = (-4124.641);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1113.940665533245, 1113.940665533245, (-4124.641), (-4124.641));
      highamHall54Integrator0.getEvaluations();
      highamHall54Integrator0.getEventHandlers();
      double double1 = 4351.98806;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(4351.98806, (-4124.641), (-4124.641), (-4124.641));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.NEITHER;
      StepNormalizer stepNormalizer0 = new StepNormalizer(1113.940665533245, fixedStepHandler0, stepNormalizerMode0, stepNormalizerBounds0);
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      PegasusSolver pegasusSolver0 = new PegasusSolver(1113.940665533245, (-1.0));
      highamHall54Integrator0.addEventHandler((EventHandler) null, (-215.284), (double) 0, 0, (UnivariateSolver) pegasusSolver0);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 1113.940665533245);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1113.940665533245, 1113.940665533245, (-4124.641), (-4124.641));
      highamHall54Integrator0.getEvaluations();
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1113.940665533245, 0.6296497583389282, (-1.0), 1113.940665533245);
      dormandPrince853Integrator0.getOrder();
      dormandPrince853Integrator0.setMaxGrowth(1.2530567646026611);
      dormandPrince853Integrator0.getEventHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      dormandPrince853Integrator0.getStepHandlers();
      dormandPrince853Integrator0.setStepSizeControl(1.0, (double) 0, 1.0, 1.2530567646026611);
      double[] doubleArray0 = new double[0];
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.6296497583389282, doubleArray0, 0.6296497583389282, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double double0 = 0.0;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1107.47856, (-1265.21), 0.0, 0);
      dormandPrince853Integrator0.getOrder();
      dormandPrince853Integrator0.setMaxGrowth(0.0);
      dormandPrince853Integrator0.getEventHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.NEITHER;
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizer stepNormalizer0 = new StepNormalizer(1285.7812467, fixedStepHandler0, stepNormalizerMode0, stepNormalizerBounds0);
      dormandPrince853Integrator0.addStepHandler(stepNormalizer0);
      dormandPrince853Integrator0.getStepHandlers();
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1285.7812467;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 129.5708628305661;
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1265.21), doubleArray0, 0.0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double double0 = (-1329.604892);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1329.604892), (-1329.604892), (-1329.604892), 1107.47856);
      graggBulirschStoerIntegrator0.setMaxEvaluations(0);
      graggBulirschStoerIntegrator0.setControlFactors(0.0, 0, 0, 0.0);
      double double1 = 0.0;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1107.47856, (-1265.21), 0.0, 0.0);
      dormandPrince853Integrator0.getOrder();
      dormandPrince853Integrator0.setMaxGrowth(0.0);
      dormandPrince853Integrator0.getEventHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.NEITHER;
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.0, fixedStepHandler0, stepNormalizerMode0, stepNormalizerBounds0);
      dormandPrince853Integrator0.addStepHandler(stepNormalizer0);
      dormandPrince853Integrator0.getStepHandlers();
      double[] doubleArray0 = new double[0];
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-524.4834622521356), doubleArray0, 0.0, doubleArray0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (-1.0));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(9.79045937979623E-8, (-337.5058598313872), 5184.916537747864, (-2062.55670315478));
      dormandPrince853Integrator0.getOrder();
      dormandPrince853Integrator0.setMaxGrowth(1344.0);
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator1 = new DormandPrince853Integrator(8, 2206.998, doubleArray0, doubleArray0);
      dormandPrince853Integrator1.getEventHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      dormandPrince853Integrator0.getStepHandlers();
      dormandPrince853Integrator0.setStepSizeControl(5184.916537747864, (-1746.035), (-874.7283204), 1.1368683772161603E-10);
      dormandPrince853Integrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2.2737367544323206E-10, doubleArray0, 1.0, doubleArray0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(129.5708628305661);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double double0 = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, 0.0, 0.0);
      boolean boolean0 = true;
      int int0 = (-413);
      graggBulirschStoerIntegrator0.getStepHandlers();
      graggBulirschStoerIntegrator0.getEventHandlers();
      graggBulirschStoerIntegrator0.setMaxEvaluations((-413));
      int int1 = 2145787654;
      int int2 = 2525;
      graggBulirschStoerIntegrator0.setStabilityCheck(true, 2145787654, 2525, (-2508.0097555515));
      graggBulirschStoerIntegrator0.getEventHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 524.4834622521356);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double double0 = (-1329.604892);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1329.604892), (-1329.604892), (-1329.604892), 1107.47856);
      graggBulirschStoerIntegrator0.setMaxEvaluations(0);
      graggBulirschStoerIntegrator0.setControlFactors(0.0, 0, 0, 0);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1107.47856, (-1265.21), (-1329.604892), 0.0);
      dormandPrince853Integrator0.getOrder();
      dormandPrince853Integrator0.getEventHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      dormandPrince853Integrator0.getStepHandlers();
      dormandPrince853Integrator0.setMaxEvaluations(8);
      double[] doubleArray0 = new double[0];
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-524.4834622521356), doubleArray0, (double) 0, doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (8) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double double0 = 1107.47856;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1329.604892), (-1329.604892), (-1329.604892), 1107.47856);
      graggBulirschStoerIntegrator0.setMaxEvaluations(0);
      double double1 = 0.0;
      graggBulirschStoerIntegrator0.setControlFactors(0.0, 0, 0, 0.0);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1107.47856, (-1265.21), 0.0, 0.0);
      dormandPrince853Integrator0.getOrder();
      dormandPrince853Integrator0.setMaxGrowth(0.0);
      dormandPrince853Integrator0.getEventHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.NEITHER;
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.0, fixedStepHandler0, stepNormalizerMode0, stepNormalizerBounds0);
      dormandPrince853Integrator0.addStepHandler(stepNormalizer0);
      dormandPrince853Integrator0.getStepHandlers();
      double[] doubleArray0 = new double[0];
      dormandPrince853Integrator0.getStepHandlers();
      double double2 = (-524.4834622521356);
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-524.4834622521356), doubleArray0, (-1781.6161), doubleArray1);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1113.940665533245, 1113.940665533245, (-4124.641), (-4124.641));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      highamHall54Integrator0.addEventHandler(eventHandler0, (-4124.641), (-4124.641), 2331);
      highamHall54Integrator0.getEventHandlers();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-4124.641), (-4124.641), (-4124.641), (-2989.793));
      double[] doubleArray0 = new double[8];
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.computeDerivatives((-4124.641), doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double double0 = (-1329.604892);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1329.604892), (-1329.604892), (-1329.604892), 1107.47856);
      graggBulirschStoerIntegrator0.setMaxEvaluations(0);
      graggBulirschStoerIntegrator0.setControlFactors(0.0, 0, 0, 0.0);
      double double1 = 0.0;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1107.47856, (-1265.21), 0.0, 0.0);
      dormandPrince853Integrator0.getOrder();
      dormandPrince853Integrator0.setMaxGrowth(0.0);
      dormandPrince853Integrator0.getEventHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.NEITHER;
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.0, fixedStepHandler0, stepNormalizerMode0, stepNormalizerBounds0);
      dormandPrince853Integrator0.addStepHandler(stepNormalizer0);
      double double2 = (-1.0);
      dormandPrince853Integrator0.getStepHandlers();
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-524.4834622521356), doubleArray0, 0.0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1329.707746903636), (-1329.707746903636), (-1329.707746903636), 1107.47856);
      graggBulirschStoerIntegrator0.setMaxEvaluations(0);
      graggBulirschStoerIntegrator0.setControlFactors(0.0, 0, 0, 0.0);
      double double0 = 0.0;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1107.47856, 0.0, 0.0, 0.0);
      dormandPrince853Integrator0.getOrder();
      dormandPrince853Integrator0.setMaxGrowth(0.0);
      dormandPrince853Integrator0.getEventHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double double1 = (-1.0);
      dormandPrince853Integrator0.getStepHandlers();
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.FIRST;
      StepNormalizer stepNormalizer0 = new StepNormalizer(8, fixedStepHandler0, stepNormalizerMode0, stepNormalizerBounds0);
      dormandPrince853Integrator0.addStepHandler(stepNormalizer0);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-524.4834622521356), doubleArray0, 0.0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0.0);
      midpointIntegrator0.getCurrentStepStart();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, 2928.5021, 524.4834622521356);
      graggBulirschStoerIntegrator0.setOrderControl((-149), 857.0, 524.4834622521356);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1329.604892), (-1329.604892), (-1329.604892), 1107.47856);
      graggBulirschStoerIntegrator0.setMaxEvaluations(3373);
      graggBulirschStoerIntegrator0.setControlFactors(0.0, 0.0, 592.3639022878, 5184.916537747864);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-885.64531876), 1107.47856, 3373, (-1458.5));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1107.47856;
      doubleArray0[1] = 1107.47856;
      doubleArray0[2] = (-1458.5);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, (-1697.8), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1329.604892), (-1329.604892), (-1329.604892), 1107.47856);
      graggBulirschStoerIntegrator0.setMaxEvaluations(0);
      graggBulirschStoerIntegrator0.setControlFactors(0.0, 0.0, 0.0, 0.0);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1.1368683772161603E-10, Double.NaN, 0.0, (-1151.53073371));
      dormandPrince853Integrator0.getEventHandlers();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.1368683772161603E-10;
      try { 
        graggBulirschStoerIntegrator0.computeDerivatives(0.0, doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double double0 = 1113.940665533245;
      double double1 = (-4124.641);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1113.940665533245, 1113.940665533245, (-4124.641), (-4124.641));
      highamHall54Integrator0.getEvaluations();
      Collection<EventHandler> collection0 = new LinkedList<EventHandler>();
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-485.741484), (-893.379299074), (-485.741484), 41.7);
      DormandPrince853Integrator dormandPrince853Integrator1 = new DormandPrince853Integrator(0.0, 458.0331972326653, (-893.379299074), 458.0331972326653);
      dormandPrince853Integrator1.getOrder();
      double double2 = (-988.028059);
      dormandPrince853Integrator0.setMaxGrowth(Double.NaN);
      dormandPrince853Integrator1.getEventHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      dormandPrince853Integrator0.getStepHandlers();
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      dormandPrince853Integrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 524.4834622521356, doubleArray0, 5709.4, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1329.604892), (-1329.604892), (-1329.604892), 1107.47856);
      graggBulirschStoerIntegrator0.setMaxEvaluations(0);
      graggBulirschStoerIntegrator0.setControlFactors(0.0, 0, 0, 0.0);
      double double0 = 0.0;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1107.47856, 0.0, 0.0, 0.0);
      dormandPrince853Integrator0.getOrder();
      dormandPrince853Integrator0.setMaxGrowth(0.0);
      dormandPrince853Integrator0.getEventHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double double1 = (-1.0);
      dormandPrince853Integrator0.getStepHandlers();
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-524.4834622521356), doubleArray0, 0.0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 1.0;
      doubleArray0[0] = 1.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(27.59209969944671, 27.59209969944671, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.getMaxEvaluations();
      graggBulirschStoerIntegrator0.getStepHandlers();
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1.0, 27.59209969944671, 0.0, 1.0);
      dormandPrince853Integrator0.getOrder();
      dormandPrince853Integrator0.setMaxGrowth((-988.028059));
      dormandPrince853Integrator0.getEventHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray1 = new double[1];
      dormandPrince853Integrator0.getStepHandlers();
      doubleArray1[0] = 0.0;
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 27.59209969944671, doubleArray0, (-1.0), doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 16
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-659.0);
      double[] doubleArray1 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1000.0, 0.2815598249435425, doubleArray0, doubleArray1);
      double double0 = dormandPrince853Integrator0.getCurrentSignedStepsize();
      assertEquals(16.77974448385739, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1329.604892), (-1329.604892), (-1329.604892), 1107.47856);
      graggBulirschStoerIntegrator0.setControlFactors(0.0, 0.0, 0.0, 0.0);
      double double0 = (-1791.3);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3600.35735852179;
      doubleArray0[2] = (-1329.604892);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-1329.604892);
      graggBulirschStoerIntegrator0.clearStepHandlers();
      graggBulirschStoerIntegrator0.setInterpolationControl(false, 51);
      graggBulirschStoerIntegrator0.setControlFactors((-1329.604892), 0.0, (-8.149787010746927), 0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      try { 
        expandableStatefulODE0.getSecondaryStateDot(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1873.881536), 813.087593334286, (-1873.881536), 813.087593334286);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 0.0, (-2110.764250102), 0);
      graggBulirschStoerIntegrator0.clearEventHandlers();
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(1233.9);
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1233.9, (-590.1664407755721), doubleArray0, doubleArray0);
      MullerSolver mullerSolver0 = new MullerSolver((-590.1664407755721), 1335.82372314);
      graggBulirschStoerIntegrator0.addEventHandler((EventHandler) null, 1233.9, (-590.1664407755721), 123, (UnivariateSolver) mullerSolver0);
      assertEquals(0.0, mullerSolver0.getMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-2463.292434014458));
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1087.151782274726), (-5481.093992996444), (-5481.093992996444), (-732.11));
      graggBulirschStoerIntegrator0.setOrderControl(393, (-732.11), 1.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      threeEighthesIntegrator0.addEventHandler(eventHandler0, (double) 393, (-1170.44), 393, (UnivariateSolver) pegasusSolver0);
      double[] doubleArray0 = new double[1];
      pegasusSolver0.getEvaluations();
      doubleArray0[0] = 0.0;
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(393, 0.0, (-5481.093992996444), doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double double0 = 1113.940665533245;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1113.940665533245, 1113.940665533245, (-4124.641), (-4124.641));
      highamHall54Integrator0.getEvaluations();
      highamHall54Integrator0.getEventHandlers();
      double double1 = 4351.98806;
      double double2 = (-2989.793);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(4351.98806, (-4124.641), (-4124.641), (-2989.793));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 1113.940665533245);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double double0 = 0.0;
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(0.0);
      classicalRungeKuttaIntegrator0.getName();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      // Undeclared exception!
      try { 
        classicalRungeKuttaIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, (double[]) null, 0.0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(2007.388267032);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-284.98951705);
      doubleArray0[1] = (-284.98951705);
      doubleArray0[3] = (-284.98951705);
      doubleArray0[4] = 1387.235378131837;
      doubleArray0[5] = (-284.98951705);
      doubleArray0[7] = 2007.388267032;
      doubleArray0[8] = (-284.98951705);
      gillIntegrator0.clearStepHandlers();
      String string0 = gillIntegrator0.getName();
      double[] doubleArray1 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2007.388267032, (-4090.7), doubleArray1, doubleArray1);
      dormandPrince853Integrator0.getOrder();
      String string1 = dormandPrince853Integrator0.getName();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double double0 = (-1329.604892);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1329.604892), (-1329.604892), (-1329.604892), 1107.47856);
      EventHandler eventHandler0 = null;
      graggBulirschStoerIntegrator0.setMaxEvaluations(0);
      double double1 = 0.0;
      graggBulirschStoerIntegrator0.setControlFactors(0.0, 0.0, 0.0, 0.0);
      double double2 = (-1791.3);
      int int0 = (-1190);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3600.35735852179;
      doubleArray0[1] = (double) (-1190);
      doubleArray0[2] = (-1329.604892);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) (-1190);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-1329.604892);
      try { 
        graggBulirschStoerIntegrator0.initializeStep(true, 0, doubleArray0, 1107.47856, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1329.604892), (-1329.604892), (-1329.604892), 1107.47856);
      graggBulirschStoerIntegrator0.setMaxEvaluations(0);
      graggBulirschStoerIntegrator0.setControlFactors(0.0, 0.0, 0.0, 0.0);
      double[] doubleArray0 = new double[7];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-3060.0), 0.0, 1.0, (-236.819602413));
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(2722.54, 0, doubleArray0, doubleArray0);
      highamHall54Integrator0.getOrder();
      double double0 = highamHall54Integrator0.getCurrentStepStart();
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.2222222222222222, 0.2222222222222222, (-749.167283585463), 0.0);
      graggBulirschStoerIntegrator0.setStabilityCheck(true, (-1030), 0, 0);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-1030), (-1412.857703527), (-749.167283585463), (-387.0373087493518));
      dormandPrince54Integrator0.setMaxEvaluations((-1030));
      dormandPrince54Integrator0.getOrder();
      graggBulirschStoerIntegrator0.setControlFactors((-2019.7), (-749.167283585463), 0, (-3570.177869407));
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      double double0 = 1.0;
      doubleArray0[0] = 1.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(27.59209969944671, 27.59209969944671, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.getMaxEvaluations();
      graggBulirschStoerIntegrator0.getStepHandlers();
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1.0, 27.59209969944671, 0.0, 1.0);
      dormandPrince853Integrator0.getOrder();
      dormandPrince853Integrator0.setMaxGrowth((-988.028059));
      dormandPrince853Integrator0.getEventHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray1 = new double[1];
      dormandPrince853Integrator0.getStepHandlers();
      doubleArray1[0] = 0.0;
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 27.59209969944671, doubleArray0, (-1.0), doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double double0 = 0.0;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 0.0, 0.0, 0.0);
      dormandPrince54Integrator0.getMaxEvaluations();
      dormandPrince54Integrator0.getOrder();
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(Double.NaN, 585.889, doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (double) Integer.MAX_VALUE;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = (double) 5;
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.computeDerivatives(0.0, doubleArray0, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, 0.0, 0.0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.NEITHER;
      StepNormalizer stepNormalizer0 = new StepNormalizer((-779.62617019), fixedStepHandler0, stepNormalizerMode0, stepNormalizerBounds0);
      dormandPrince853Integrator0.addStepHandler(stepNormalizer0);
      dormandPrince853Integrator0.getEvaluations();
      dormandPrince853Integrator0.getEventHandlers();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-2294.9955556394), (-1488.4784434), Double.NaN, 0.0);
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1661.1, 1661.1, 712.748029850055, 712.748029850055);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 712.748029850055;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1661.1;
      doubleArray0[4] = 1661.1;
      doubleArray0[5] = 1661.1;
      doubleArray0[6] = 1661.1;
      doubleArray0[7] = 0.0;
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 0.0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 819.62;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 9
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1113.940665533245, 1113.940665533245, (-4124.641), (-4124.641));
      highamHall54Integrator0.getEvaluations();
      highamHall54Integrator0.getEventHandlers();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1113.940665533245;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1113.940665533245;
      doubleArray0[4] = 4351.98806;
      doubleArray0[5] = 4351.98806;
      doubleArray0[6] = (-2989.793);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0, 0.0, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setOrderControl(0, (-2989.793), 0.0);
      DummyStepHandler.getInstance();
      DummyStepHandler.getInstance();
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator1 = new GraggBulirschStoerIntegrator(0.0, 4.718103502869148E-29, 0.0, (-1786.03324103));
      graggBulirschStoerIntegrator1.addStepHandler(dummyStepHandler0);
      graggBulirschStoerIntegrator1.setControlFactors(90.6447020217823, 557.9925643, 0.0, (-1371.0932005564166));
      graggBulirschStoerIntegrator0.getMaxEvaluations();
      double double0 = graggBulirschStoerIntegrator0.getCurrentStepStart();
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1.0, 577.72673874906, 0.0, 426.9828);
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 287);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(426.9828, 1561.60536675297, (-1.0), 0.0);
      dormandPrince853Integrator0.getOrder();
      dormandPrince853Integrator0.getStepHandlers();
      StepNormalizer stepNormalizer0 = new StepNormalizer((-1.0), (FixedStepHandler) null);
      dormandPrince853Integrator0.addStepHandler(stepNormalizer0);
      assertEquals(1561.60536675297, dormandPrince853Integrator0.getMaxStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 0.0, 0.0, (-900.81376402));
      dormandPrince54Integrator0.getOrder();
      dormandPrince54Integrator0.getEventHandlers();
      double[] doubleArray0 = new double[5];
      dormandPrince54Integrator0.setMinReduction(1176.88);
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 5;
      dormandPrince54Integrator0.addStepHandler((StepHandler) null);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-900.81376402);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-900.81376402), 5, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      int int0 = 204;
      // Undeclared exception!
      try { 
        expandableStatefulODE0.getSecondaryStateDot(204);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 204, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1767.94467456);
      doubleArray0[1] = (-1767.94467456);
      doubleArray0[2] = (-1767.94467456);
      doubleArray0[3] = (-1767.94467456);
      doubleArray0[4] = (-1767.94467456);
      doubleArray0[5] = (-2099.0);
      doubleArray0[6] = (-1767.94467456);
      doubleArray0[7] = (-1767.94467456);
      doubleArray0[8] = (-1767.94467456);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1767.94467456), (-1767.94467456), doubleArray0, doubleArray0);
      int int0 = 0;
      double double0 = 0.0;
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (-2221.68062987328);
      doubleArray1[1] = 0.0;
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) null, (-1767.94467456), doubleArray1, (-1767.94467456), doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1.0, (-3.0689499459498917), 0.0, 1.0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-3.0689499459498917);
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (-3.0689499459498917);
      doubleArray0[5] = 1.0;
      doubleArray0[6] = (-3.0689499459498917);
      doubleArray0[7] = (-3.0689499459498917);
      // Undeclared exception!
      try { 
        dormandPrince54Integrator0.computeDerivatives((-3.0689499459498917), doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(3118.460509385597);
      classicalRungeKuttaIntegrator0.clearEventHandlers();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(3118.460509385597, 3118.460509385597, 3118.460509385597, 3118.460509385597);
      graggBulirschStoerIntegrator0.setStabilityCheck(false, 0, 2605, 0);
      assertEquals(3118.460509385597, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, (-78.0556057387), (-78.0556057387), (-652.978580749));
      graggBulirschStoerIntegrator0.setInterpolationControl(false, 1764);
      graggBulirschStoerIntegrator0.setOrderControl(0, 0, 0.0);
      graggBulirschStoerIntegrator0.clearEventHandlers();
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(3486.7336, (-60.19669523126412), 0, 0.0);
      dormandPrince54Integrator0.getOrder();
      dormandPrince54Integrator0.clearEventHandlers();
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.LAST;
      StepNormalizer stepNormalizer0 = new StepNormalizer(0, fixedStepHandler0, stepNormalizerMode0, stepNormalizerBounds0);
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      NordsieckStepInterpolator nordsieckStepInterpolator1 = new NordsieckStepInterpolator(nordsieckStepInterpolator0);
      // Undeclared exception!
      try { 
        stepNormalizer0.handleStep(nordsieckStepInterpolator1, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      double double0 = 0.08333333333333333;
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(3221, 3221, 1796.395335785284, (-2197.4526678412617), 0.08333333333333333);
  }
}
