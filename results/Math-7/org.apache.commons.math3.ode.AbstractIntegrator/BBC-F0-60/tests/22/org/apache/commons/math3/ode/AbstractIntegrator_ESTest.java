/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 23:00:05 GMT 2021
 */

package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.function.Power;
import org.apache.commons.math3.analysis.function.Sinc;
import org.apache.commons.math3.analysis.solvers.AllowedSolution;
import org.apache.commons.math3.analysis.solvers.RegulaFalsiSolver;
import org.apache.commons.math3.analysis.solvers.SecantSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondaryEquations;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator;
import org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator;
import org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.EulerIntegrator;
import org.apache.commons.math3.ode.nonstiff.GillIntegrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.nonstiff.MidpointIntegrator;
import org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator;
import org.apache.commons.math3.ode.sampling.DummyStepHandler;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.NordsieckStepInterpolator;
import org.apache.commons.math3.ode.sampling.StepInterpolator;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.apache.commons.math3.ode.sampling.StepNormalizerBounds;
import org.apache.commons.math3.ode.sampling.StepNormalizerMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegrator_ESTest extends AbstractIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-770.5588673410015), (-770.5588673410015), (-770.5588673410015), (-770.5588673410015));
      highamHall54Integrator0.getOrder();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-770.5588673410015), (double)5, (-180.96), (-770.5588673410015), (-770.5588673410015)).when(eventHandler0).g(anyDouble() , any(double[].class));
      highamHall54Integrator0.addEventHandler(eventHandler0, (double) 5, (-460.2518503), 5);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        highamHall54Integrator0.integrate(expandableStatefulODE0, (double) 5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [\uFFFD, \uFFFD], values: [-770.559, -770.559]
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double double0 = (-313.6623);
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1782.02916560486), (-313.6623), doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      graggBulirschStoerIntegrator0.clearEventHandlers();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      graggBulirschStoerIntegrator0.clearEventHandlers();
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-313.6623), doubleArray0, 0.0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-915.657), 942.2182491, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getMaxEvaluations();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((double)Integer.MAX_VALUE, (-892.4582886781), 2077.6378137080924, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      dormandPrince853Integrator0.addEventHandler(eventHandler0, (double) Integer.MAX_VALUE, 5499.485951000001, Integer.MAX_VALUE);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      // Undeclared exception!
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-915.657), doubleArray0, (-3.286964881802063E-8), doubleArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double double0 = (-915.657);
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-915.657), 942.2182491, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getMaxEvaluations();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((double)Integer.MAX_VALUE, (-1484.911), 942.2182491).when(eventHandler0).g(anyDouble() , any(double[].class));
      double double1 = 1711.9646120741;
      int int0 = (-1308);
      dormandPrince853Integrator0.addEventHandler(eventHandler0, 1711.9646120741, 1418.27907, (-1308));
      double double2 = 4777.748612409967;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double double3 = 933.8751262;
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-2527.0622643995775), doubleArray0, 933.8751262, doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-1,308) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(942.2182491, 942.2182491, doubleArray0, doubleArray0);
      int int0 = dormandPrince853Integrator0.getMaxEvaluations();
      assertEquals(Integer.MAX_VALUE, int0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      dormandPrince853Integrator0.addEventHandler(eventHandler0, 621.425709058, 1.0, Integer.MAX_VALUE);
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 828.9647495, doubleArray0, 0.0, doubleArray0);
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 942.2182491, doubleArray0);
      dormandPrince853Integrator0.computeDerivatives(1556.1735688530928, doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double double0 = 2.14748148502E9;
      double[] doubleArray0 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-114.2813828172815), 2.14748148502E9, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.setMaxEvaluations(0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        dormandPrince54Integrator0.integrate(expandableStatefulODE0, (-5.095229574221907E-8));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(942.2182491, 942.2182491, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getMaxEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      dormandPrince853Integrator0.addEventHandler(eventHandler0, 621.425709058, 1.0, Integer.MAX_VALUE);
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 828.9647495, doubleArray0, 0.0, doubleArray0);
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 942.2182491, doubleArray0);
      dormandPrince853Integrator0.getMaxEvaluations();
      dormandPrince853Integrator0.getEvaluations();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(942.2182491, 942.2182491, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getMaxEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(2994).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      dormandPrince853Integrator0.setMaxEvaluations(1294);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter1, 1091.8, doubleArray0, (double) Integer.MAX_VALUE, doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (1,294) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(4061.97138451784, 4061.97138451784, 0.0, 4061.97138451784);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      SecantSolver secantSolver0 = new SecantSolver(7.230020851688713E-185);
      secantSolver0.getMaxEvaluations();
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 0.0, 1397.779, 1353, (UnivariateSolver) secantSolver0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 0.0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(4061.97138451784, 4061.97138451784, 0.0, 4061.97138451784);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime(4049.4077095316397);
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 0.0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-505.70337207697145), (-3360.7100256971), (-815.04251812), (-3470.536337981819));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.FIRST;
      StepNormalizer stepNormalizer0 = new StepNormalizer((-815.04251812), fixedStepHandler0, stepNormalizerBounds0);
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 2607.692722316507);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(942.2182491, 942.2182491, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getMaxEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 828.9647495, doubleArray0, 0.0, doubleArray0);
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 942.2182491, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double double0 = 3060.610992;
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(3060.610992);
      double double1 = 2.147483647E9;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3060.610992;
      doubleArray0[1] = 2.147483647E9;
      doubleArray0[2] = 2.147483647E9;
      doubleArray0[3] = 2.147483647E9;
      doubleArray0[4] = 2.147483647E9;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2.147483647E9, 2.147483647E9, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getMaxEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray1 = new double[0];
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 3060.610992, doubleArray1, 3060.610992, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(942.2182491, 942.2182491, doubleArray0, doubleArray0);
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(942.2182491);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1505.90073), doubleArray0, 9.710435805122717E-67, doubleArray0);
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(942.2182491);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(942.2182491, (-1436.3338169767803), (-86.879), 9.710435805122717E-67);
      graggBulirschStoerIntegrator0.setMaxEvaluations(3514);
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(2.384185791015625E-4);
      regulaFalsiSolver0.getMaxEvaluations();
      graggBulirschStoerIntegrator0.addEventHandler((EventHandler) null, 2.384185791015625E-4, 1.4399358260219398E-7, (-499), (UnivariateSolver) regulaFalsiSolver0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(4061.97138451784, 4061.97138451784, 0.0, 4061.97138451784);
      graggBulirschStoerIntegrator0.getName();
      graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[1] = 747.0287363324283;
      doubleArray0[3] = 747.0287363324283;
      doubleArray0[4] = 747.0287363324283;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(747.0287363324283, 747.0287363324283, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(3).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray1 = new double[0];
      double double0 = Double.NaN;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      dormandPrince853Integrator0.addEventHandler(eventHandler0, 747.0287363324283, 747.0287363324283, 0);
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 747.0287363324283, doubleArray1, Double.NaN, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 6
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(3060.610992);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1969).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(3060.610992, 3060.610992, 3060.610992, (-3667.0));
      dormandPrince853Integrator0.getMaxEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      // Undeclared exception!
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter1, (-3667.0), doubleArray0, 4.547473508864641E-10, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(3060.610992);
      double[] doubleArray0 = new double[0];
      midpointIntegrator0.getCurrentStepStart();
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-880.2591999306), 160.7348731, 0.0, (-1192.9981));
      highamHall54Integrator0.getOrder();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(2070.3528694099673);
      midpointIntegrator0.getStepHandlers();
      midpointIntegrator0.getCurrentStepStart();
      midpointIntegrator0.getCurrentSignedStepsize();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2070.3528694099673;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 2070.3528694099673;
      doubleArray0[6] = 2070.3528694099673;
      try { 
        midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2070.3528694099673, doubleArray0, 1708.0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2.147483647E9, 2.147483647E9, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getMaxEvaluations();
      dormandPrince853Integrator0.clearEventHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      DormandPrince853Integrator dormandPrince853Integrator1 = new DormandPrince853Integrator(Integer.MAX_VALUE, Integer.MAX_VALUE, doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[0];
      dormandPrince853Integrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2070.3528694099673, doubleArray0, (-2773.395743), doubleArray1);
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2070.3528694099673, doubleArray1, (-2773.3957429999996), doubleArray1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(942.2182491, 942.2182491, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getMaxEvaluations();
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(3924.37406574217);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 942.2182491, doubleArray0, (-1128.1346203099672), doubleArray0);
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(1.4399358260219398E-7);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1436.3338169767803), 2.384185791015625E-4, (-1128.1346203099672), Integer.MAX_VALUE);
      graggBulirschStoerIntegrator0.setMaxEvaluations(Integer.MAX_VALUE);
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1.4399358260219398E-7);
      graggBulirschStoerIntegrator0.addEventHandler((EventHandler) null, 2.384185791015625E-4, 2.384185791015625E-4, (-3162), (UnivariateSolver) regulaFalsiSolver0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(942.2182491, 942.2182491, 942.2182491, 942.2182491);
      dormandPrince853Integrator0.getMaxEvaluations();
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(4843.748612409967);
      // Undeclared exception!
      try { 
        eulerIntegrator0.integrate((ExpandableStatefulODE) null, (-1192.320242545102));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(942.2182491, 942.2182491, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getMaxEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      // Undeclared exception!
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) Integer.MAX_VALUE, doubleArray0, 0.0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-439.97213482566));
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(0.0);
      int int0 = (-1721);
      classicalRungeKuttaIntegrator0.addEventHandler((EventHandler) null, 1000.0, 615.51993, (-1721));
      classicalRungeKuttaIntegrator0.getEventHandlers();
      classicalRungeKuttaIntegrator0.getEvaluations();
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.6892333030700684, (-439.97213482566), Double.NaN, 1432.629123472);
      highamHall54Integrator0.getOrder();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 703.028650923727;
      doubleArray0[1] = 1000.0;
      doubleArray0[2] = 0.6892333030700684;
      doubleArray0[3] = (double) 5;
      HighamHall54Integrator highamHall54Integrator1 = new HighamHall54Integrator(703.028650923727, (-439.97213482566), doubleArray0, doubleArray0);
      try { 
        highamHall54Integrator1.integrate(expandableStatefulODE0, 400.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 4
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(0.0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1000.0, 1000.0, 0.0, 1000.0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.setStabilityCheck(true, 267, 267, 0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(850).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(4.547473508864641E-10, 850, 2.3703896609663678E-8, (-1152.339715));
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizer stepNormalizer0 = new StepNormalizer((-1152.339715), fixedStepHandler0, stepNormalizerMode0);
      dormandPrince853Integrator0.addStepHandler(stepNormalizer0);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(4.547473508864641E-10, 0.0, (-1.0), 341.4);
      highamHall54Integrator0.setInitialStepSize(341.4);
      highamHall54Integrator0.setMaxEvaluations(1974);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(4061.97138451784, 4061.97138451784, 0.0, 4061.97138451784);
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      graggBulirschStoerIntegrator0.addStepHandler(dummyStepHandler0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, Double.NaN, 4.547473508864641E-10, 4.547473508864641E-10);
      graggBulirschStoerIntegrator0.clearStepHandlers();
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 986);
      graggBulirschStoerIntegrator0.getStepHandlers();
      graggBulirschStoerIntegrator0.getMaxEvaluations();
      graggBulirschStoerIntegrator0.clearEventHandlers();
      graggBulirschStoerIntegrator0.setOrderControl(1446, Double.NaN, (-2902));
      graggBulirschStoerIntegrator0.setInitialStepSize(0.0);
      graggBulirschStoerIntegrator0.getMaxEvaluations();
      graggBulirschStoerIntegrator0.setOrderControl((-2902), (-1.0), (-2573.51));
      graggBulirschStoerIntegrator0.getName();
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer0 = new StepNormalizer((-2573.51), fixedStepHandler0);
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      graggBulirschStoerIntegrator0.setStabilityCheck(true, 0, 986, (-2573.51));
      graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
      graggBulirschStoerIntegrator0.getEventHandlers();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(3060.610992);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      try { 
        midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 3060.610992, doubleArray0, 3060.610992, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double double0 = 2666.291929;
      double[] doubleArray0 = new double[3];
      double double1 = (-1662.66);
      doubleArray0[0] = (-1662.66);
      doubleArray0[1] = 2666.291929;
      doubleArray0[2] = 2666.291929;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2666.291929, 2666.291929, doubleArray0, doubleArray0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.BOTH;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      int int0 = 1727;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1354).when(secondOrderDifferentialEquations0).getDimension();
      dormandPrince853Integrator0.getEvaluations();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2666.291929, 2666.291929, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setOrderControl(845, 1354, 0);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2666.291929, doubleArray0, 2666.291929, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 2,708
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 0.0, 726.405597536431, 0.0);
      highamHall54Integrator0.setMinReduction(726.405597536431);
      highamHall54Integrator0.getOrder();
      highamHall54Integrator0.getCurrentSignedStepsize();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 726.405597536431;
      doubleArray0[2] = (double) 5;
      doubleArray0[3] = 726.405597536431;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 1264.954792281;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1946.65866389414, 0.0, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.getOrder();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-2.778205752353508));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double0 = 0.0;
      double double1 = 309.729875392573;
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(430.8721976, 309.729875392573, 0.0);
      classicalRungeKuttaIntegrator0.addEventHandler(eventHandler0, 0.0, 0.0, 0, (UnivariateSolver) regulaFalsiSolver0);
      classicalRungeKuttaIntegrator0.clearStepHandlers();
      Sinc sinc0 = new Sinc(true);
      AllowedSolution allowedSolution0 = AllowedSolution.BELOW_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(2332, (UnivariateFunction) sinc0, 0.0, 0.0, 0.0, allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [0, 0]
         //
         verifyException("org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(4061.97138451784, 4061.97138451784, 0.0, 4061.97138451784);
      graggBulirschStoerIntegrator0.getStepHandlers();
      graggBulirschStoerIntegrator0.setInterpolationControl(false, (-1363));
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double double0 = 588.0;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(588.0, (-5519.7), 2673.782656288, 588.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      dormandPrince853Integrator0.getStepHandlers();
      dormandPrince853Integrator0.getEvaluations();
      dormandPrince853Integrator0.clearEventHandlers();
      int int0 = 0;
      dormandPrince853Integrator0.addEventHandler(eventHandler0, 0.0, 0.0, 0);
      double double1 = (-1552.0);
      int int1 = 0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 588.0;
      doubleArray0[2] = (-8.149787010746927);
      // Undeclared exception!
      try { 
        dormandPrince853Integrator0.initializeStep(false, 0, doubleArray0, 1000.0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double double0 = 942.2182491;
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(942.2182491, 942.2182491, doubleArray0, doubleArray0);
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(942.2182491);
      double double1 = (-1034.264483);
      // Undeclared exception!
      try { 
        midpointIntegrator0.integrate((FirstOrderDifferentialEquations) null, (-1034.264483), doubleArray0, 942.2182491, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double double0 = (-1.0);
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1.0));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      int int0 = 1256;
      gillIntegrator0.addEventHandler(eventHandler0, (-1.0), (-1.0), 1256);
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler1).toString();
      gillIntegrator0.addEventHandler(eventHandler1, 354216.0, 0.0, 4828);
      int int1 = 2247;
      gillIntegrator0.setMaxEvaluations(2247);
      gillIntegrator0.getEventHandlers();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 2247;
      doubleArray0[2] = 0.0;
      // Undeclared exception!
      try { 
        gillIntegrator0.integrate((FirstOrderDifferentialEquations) null, 0.0, doubleArray0, (-26.771948721), doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double double0 = (-799.22359033908);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-799.22359033908), (-799.22359033908), (-799.22359033908), (-799.22359033908));
      int int0 = 0;
      graggBulirschStoerIntegrator0.setStabilityCheck(true, 0, 0, (-799.22359033908));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 2659.976983611, 20.8028, 86, (UnivariateSolver) null);
      graggBulirschStoerIntegrator0.clearEventHandlers();
      graggBulirschStoerIntegrator0.clearEventHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.getTotalDimension();
      double double1 = 166.71352954436;
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 166.71352954436);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double double0 = 0.008273789163814023;
      GillIntegrator gillIntegrator0 = new GillIntegrator(0.008273789163814023);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.008273789163814023;
      doubleArray0[1] = 0.008273789163814023;
      doubleArray0[2] = 0.008273789163814023;
      doubleArray0[3] = 0.008273789163814023;
      doubleArray0[4] = (-22.0);
      // Undeclared exception!
      try { 
        gillIntegrator0.computeDerivatives(0.008273789163814023, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double double0 = 857.448593537;
      double double1 = 0.0;
      double double2 = 1000.0;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(857.448593537, 857.448593537, 0.0, 1000.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      dormandPrince54Integrator0.setMinReduction(0.0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      SecondaryEquations secondaryEquations0 = mock(SecondaryEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondaryEquations0).getDimension();
      expandableStatefulODE0.addSecondaryEquations(secondaryEquations0);
      // Undeclared exception!
      dormandPrince54Integrator0.integrate(expandableStatefulODE0, 0.0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, (-441.75587695), (-441.75587695), (-441.75587695));
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2815.769258;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-441.75587695);
      doubleArray0[4] = 2818.503678802857;
      doubleArray0[5] = (-260.61713304846);
      doubleArray0[6] = 0.0;
      highamHall54Integrator0.setStepSizeControl(2818.503678802857, 2818.503678802857, doubleArray0, doubleArray0);
      SecantSolver secantSolver0 = new SecantSolver();
      highamHall54Integrator0.addEventHandler((EventHandler) null, 2381.95571, 0.0, (-2299), (UnivariateSolver) secantSolver0);
      highamHall54Integrator0.getName();
      int int0 = highamHall54Integrator0.getEvaluations();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-2668.1244386383105));
      classicalRungeKuttaIntegrator0.addEventHandler((EventHandler) null, 0.50625, 0.0, (-228));
      classicalRungeKuttaIntegrator0.getEventHandlers();
      double double0 = (-7.796557225750673E-258);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1.4198782892306878E-112, (-228), 4.547473508864641E-10, (-7.796557225750673E-258));
      FirstOrderConverter firstOrderConverter0 = null;
      try {
        firstOrderConverter0 = new FirstOrderConverter((SecondOrderDifferentialEquations) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.FirstOrderConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 216.55231549994596;
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = 216.55231549994596;
      doubleArray0[5] = (-1.0);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(216.55231549994596, (-1.0), doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      dormandPrince853Integrator0.getEventHandlers();
      dormandPrince853Integrator0.getMaxEvaluations();
      dormandPrince853Integrator0.addEventHandler(eventHandler0, (-1.0), (-764.2), 0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(216.55231549994596, (-1059.04644501), (-1.0), (-1059.04644501));
      graggBulirschStoerIntegrator0.setOrderControl(Integer.MAX_VALUE, 0.0, 0.0);
      assertEquals(216.55231549994596, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-2186.9537452204);
      doubleArray0[2] = (-2186.9537452204);
      doubleArray0[3] = (-2186.9537452204);
      doubleArray0[4] = (-2186.9537452204);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2186.9537452204), (-2186.9537452204), doubleArray0, doubleArray0);
      dormandPrince54Integrator0.getMaxEvaluations();
      dormandPrince54Integrator0.setMaxEvaluations(0);
      dormandPrince54Integrator0.clearStepHandlers();
      dormandPrince54Integrator0.setMaxEvaluations((-3162));
      dormandPrince54Integrator0.clearEventHandlers();
      dormandPrince54Integrator0.getEvaluations();
      dormandPrince54Integrator0.getName();
      dormandPrince54Integrator0.clearEventHandlers();
      dormandPrince54Integrator0.clearEventHandlers();
      dormandPrince54Integrator0.getEvaluations();
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = null;
      try {
        adamsBashforthIntegrator0 = new AdamsBashforthIntegrator((-776), 0, (-3162), (-2186.9537452204), 1000.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // multistep method needs at least -776 previous steps, got 2
         //
         verifyException("org.apache.commons.math3.ode.MultistepIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double double0 = 747.0287363324283;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 747.0287363324283;
      doubleArray0[1] = 747.0287363324283;
      doubleArray0[2] = 747.0287363324283;
      doubleArray0[3] = 747.0287363324283;
      doubleArray0[4] = 747.0287363324283;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(747.0287363324283, 747.0287363324283, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 747.0287363324283, doubleArray0, Double.NaN, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1029.783787897;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1029.783787897, Double.NaN, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getName();
      dormandPrince853Integrator0.getEvaluations();
      int int0 = 521;
      double double0 = 3239.0199;
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(521, 1029.783787897, 3239.0199, doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(364.7824523534, 364.7824523534, 0.0, 0.0);
      int int0 = highamHall54Integrator0.getEvaluations();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double double0 = (-465.0);
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-465.0));
      double double1 = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, 0.0, 313.5121068223236);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.0, fixedStepHandler0);
      double double2 = (-1.324889724104E12);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-465.0);
      doubleArray0[2] = (-465.0);
      graggBulirschStoerIntegrator0.setStepSizeControl(0.0, 0.0, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setMaxEvaluations(220);
      NordsieckStepInterpolator nordsieckStepInterpolator0 = new NordsieckStepInterpolator();
      StepInterpolator stepInterpolator0 = nordsieckStepInterpolator0.copy();
      // Undeclared exception!
      try { 
        stepNormalizer0.handleStep(stepInterpolator0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      EventHandler eventHandler0 = null;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-3980.8);
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = 1.2791850600366742E-9;
      doubleArray0[7] = 4061.97138451784;
      doubleArray0[8] = Double.NaN;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(Double.NaN, 0.0, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setMaxEvaluations(481);
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(Double.NaN);
      double double0 = (-1834.6624);
      Power power0 = new Power(4777.748612409967);
      AllowedSolution allowedSolution0 = AllowedSolution.ANY_SIDE;
      // Undeclared exception!
      try { 
        regulaFalsiSolver0.solve(481, (UnivariateFunction) power0, (double) 481, (-855.607401112316), allowedSolution0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [481, -855.607]
         //
         verifyException("org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1237.08786434);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 0.0, doubleArray0, doubleArray0);
      String string0 = highamHall54Integrator0.getName();
      assertEquals("Higham-Hall 5(4)", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(4061.97138451784, 4061.97138451784, 0.0, 4061.97138451784);
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 542);
      Collection<EventHandler> collection0 = graggBulirschStoerIntegrator0.getEventHandlers();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-1618.0));
      threeEighthesIntegrator0.setMaxEvaluations((-1363));
      threeEighthesIntegrator0.setMaxEvaluations((-1363));
      threeEighthesIntegrator0.clearStepHandlers();
      threeEighthesIntegrator0.setMaxEvaluations((-1363));
      threeEighthesIntegrator0.clearEventHandlers();
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, (-2979.51719112), (-1363), (-3.141592653589793));
      int int0 = highamHall54Integrator0.getOrder();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 5;
      double double0 = (-1444.67228086771);
      doubleArray0[1] = (-1444.67228086771);
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(5, 5, 5, doubleArray0, doubleArray0);
      adamsBashforthIntegrator0.setStepSizeControl((double) 5, (double) 5, 3000.0, 5.0);
      adamsBashforthIntegrator0.getEventHandlers();
      int int0 = 198;
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(198, 198, (-1444.67228086771), doubleArray0, doubleArray0);
  }
}
