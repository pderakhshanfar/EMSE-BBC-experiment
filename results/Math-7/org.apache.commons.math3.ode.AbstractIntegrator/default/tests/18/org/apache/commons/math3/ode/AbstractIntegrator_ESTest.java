/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 09:57:45 GMT 2020
 */

package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.function.Ceil;
import org.apache.commons.math3.analysis.solvers.AllowedSolution;
import org.apache.commons.math3.analysis.solvers.BisectionSolver;
import org.apache.commons.math3.analysis.solvers.IllinoisSolver;
import org.apache.commons.math3.analysis.solvers.MullerSolver;
import org.apache.commons.math3.analysis.solvers.MullerSolver2;
import org.apache.commons.math3.analysis.solvers.RiddersSolver;
import org.apache.commons.math3.analysis.solvers.SecantSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator;
import org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.EulerIntegrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.nonstiff.MidpointIntegrator;
import org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator;
import org.apache.commons.math3.ode.sampling.DummyStepHandler;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.StepHandler;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.apache.commons.math3.ode.sampling.StepNormalizerBounds;
import org.apache.commons.math3.ode.sampling.StepNormalizerMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegrator_ESTest extends AbstractIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(325.55024604235, 325.55024604235, 325.55024604235, 325.55024604235);
      assertNotNull(dormandPrince853Integrator0);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(325.55024604235, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator0.getMaxStep(), 0.01);
      
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator1 = new DormandPrince853Integrator(325.55024604235, 325.55024604235, doubleArray0, doubleArray0);
      assertFalse(dormandPrince853Integrator1.equals((Object)dormandPrince853Integrator0));
      assertNotNull(dormandPrince853Integrator1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.2, dormandPrince853Integrator1.getMinReduction(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator1.getMaxStep(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator1.getMinStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator1.getCurrentStepStart(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator1.getName());
      assertEquals(0.9, dormandPrince853Integrator1.getSafety(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator1.getMaxGrowth(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(8, dormandPrince853Integrator1.getOrder());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      DormandPrince853Integrator dormandPrince853Integrator2 = new DormandPrince853Integrator(4185.7029474, Double.NaN, doubleArray0, doubleArray0);
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator1));
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator0));
      assertNotNull(dormandPrince853Integrator2);
      assertEquals(0, doubleArray0.length);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getMaxStep(), 0.01);
      assertEquals(4185.7029474, dormandPrince853Integrator2.getMinStep(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator2.getMinReduction(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator2.getSafety(), 0.01);
      assertEquals(8, dormandPrince853Integrator2.getOrder());
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentStepStart(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator2.getName());
      assertEquals(10.0, dormandPrince853Integrator2.getMaxGrowth(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      DormandPrince853Integrator dormandPrince853Integrator3 = new DormandPrince853Integrator(3099.5704443181003, 3099.5704443181003, doubleArray0, doubleArray0);
      assertFalse(dormandPrince853Integrator3.equals((Object)dormandPrince853Integrator1));
      assertFalse(dormandPrince853Integrator3.equals((Object)dormandPrince853Integrator2));
      assertFalse(dormandPrince853Integrator3.equals((Object)dormandPrince853Integrator0));
      assertNotNull(dormandPrince853Integrator3);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.9, dormandPrince853Integrator3.getSafety(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator3.getCurrentStepStart(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator3.getMaxGrowth(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator3.getName());
      assertEquals(3099.5704443181003, dormandPrince853Integrator3.getCurrentSignedStepsize(), 0.01);
      assertEquals(3099.5704443181003, dormandPrince853Integrator3.getMinStep(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator3.getMinReduction(), 0.01);
      assertEquals(8, dormandPrince853Integrator3.getOrder());
      assertEquals(3099.5704443181003, dormandPrince853Integrator3.getMaxStep(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      dormandPrince853Integrator3.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, Double.NaN, doubleArray0, 325.55024604235, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(325.55024604235, 325.55024604235, 325.55024604235, 325.55024604235);
      assertNotNull(dormandPrince853Integrator0);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(325.55024604235, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator1 = new DormandPrince853Integrator(325.55024604235, 325.55024604235, doubleArray0, doubleArray0);
      assertFalse(dormandPrince853Integrator1.equals((Object)dormandPrince853Integrator0));
      assertNotNull(dormandPrince853Integrator1);
      assertEquals(0, doubleArray0.length);
      assertEquals(8, dormandPrince853Integrator1.getOrder());
      assertEquals(Double.NaN, dormandPrince853Integrator1.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator1.getSafety(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator1.getName());
      assertEquals(10.0, dormandPrince853Integrator1.getMaxGrowth(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator1.getMinStep(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator1.getMinReduction(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator1.getMaxStep(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator1.getCurrentSignedStepsize(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      DormandPrince853Integrator dormandPrince853Integrator2 = new DormandPrince853Integrator(4185.7029474, Double.NaN, doubleArray0, doubleArray0);
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator1));
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator0));
      assertNotNull(dormandPrince853Integrator2);
      assertEquals(0, doubleArray0.length);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator2.getSafety(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator2.getMaxGrowth(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator2.getName());
      assertEquals(Double.NaN, dormandPrince853Integrator2.getMaxStep(), 0.01);
      assertEquals(4185.7029474, dormandPrince853Integrator2.getMinStep(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator2.getMinReduction(), 0.01);
      assertEquals(8, dormandPrince853Integrator2.getOrder());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((double)0, Double.NaN, 0.0, (-173.29064908535986)).when(eventHandler0).g(anyDouble() , any(double[].class));
      MullerSolver mullerSolver0 = new MullerSolver(2227.225, 2227.225);
      assertNotNull(mullerSolver0);
      assertEquals(2227.225, mullerSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver0.getStartValue(), 0.01);
      assertEquals(2227.225, mullerSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver0.getMax(), 0.01);
      assertEquals(1.0E-15, mullerSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver0.getMin(), 0.01);
      
      dormandPrince853Integrator2.addEventHandler(eventHandler0, 3561.7999795, (-59.7401461), 1, (UnivariateSolver) mullerSolver0);
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator1));
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator0));
      assertEquals(0, doubleArray0.length);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator2.getSafety(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator2.getMaxGrowth(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator2.getName());
      assertEquals(Double.NaN, dormandPrince853Integrator2.getMaxStep(), 0.01);
      assertEquals(4185.7029474, dormandPrince853Integrator2.getMinStep(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator2.getMinReduction(), 0.01);
      assertEquals(8, dormandPrince853Integrator2.getOrder());
      assertEquals(2227.225, mullerSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver0.getStartValue(), 0.01);
      assertEquals(2227.225, mullerSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver0.getMax(), 0.01);
      assertEquals(1.0E-15, mullerSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver0.getMin(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(dormandPrince853Integrator2, dormandPrince853Integrator1);
      assertNotSame(dormandPrince853Integrator2, dormandPrince853Integrator0);
      
      int int0 = (-703);
      dormandPrince853Integrator2.setMaxEvaluations((-703));
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator1));
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator0));
      assertEquals(0, doubleArray0.length);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator2.getSafety(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator2.getMaxGrowth(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator2.getName());
      assertEquals(Double.NaN, dormandPrince853Integrator2.getMaxStep(), 0.01);
      assertEquals(4185.7029474, dormandPrince853Integrator2.getMinStep(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator2.getMinReduction(), 0.01);
      assertEquals(8, dormandPrince853Integrator2.getOrder());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(dormandPrince853Integrator2, dormandPrince853Integrator1);
      assertNotSame(dormandPrince853Integrator2, dormandPrince853Integrator0);
      
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(Double.NaN).when(eventHandler1).g(anyDouble() , any(double[].class));
      double double0 = (-621.6629846100296);
      dormandPrince853Integrator2.addEventHandler(eventHandler1, (-621.6629846100296), 4185.7029474, 0);
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator1));
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator0));
      assertEquals(0, doubleArray0.length);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator2.getSafety(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator2.getMaxGrowth(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator2.getName());
      assertEquals(Double.NaN, dormandPrince853Integrator2.getMaxStep(), 0.01);
      assertEquals(4185.7029474, dormandPrince853Integrator2.getMinStep(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator2.getMinReduction(), 0.01);
      assertEquals(8, dormandPrince853Integrator2.getOrder());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(dormandPrince853Integrator2, dormandPrince853Integrator1);
      assertNotSame(dormandPrince853Integrator2, dormandPrince853Integrator0);
      
      try { 
        dormandPrince853Integrator2.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 114.929, doubleArray0, 1.0, doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (1) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(325.55024604235, 325.55024604235, 325.55024604235, 325.55024604235);
      assertNotNull(dormandPrince853Integrator0);
      assertEquals(325.55024604235, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      
      double[] doubleArray0 = new double[0];
      dormandPrince853Integrator0.setMaxEvaluations(2934);
      assertEquals(325.55024604235, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      double double0 = 3879.3;
      dormandPrince853Integrator0.addEventHandler(eventHandler0, 3879.3, 1632.923, (-703));
      assertEquals(325.55024604235, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-621.6629846100296), doubleArray0, 114.929, doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (2,934) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(325.55024604235, 325.55024604235, 325.55024604235, 325.55024604235);
      assertNotNull(dormandPrince853Integrator0);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(325.55024604235, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator1 = new DormandPrince853Integrator(325.55024604235, 325.55024604235, doubleArray0, doubleArray0);
      assertFalse(dormandPrince853Integrator1.equals((Object)dormandPrince853Integrator0));
      assertNotNull(dormandPrince853Integrator1);
      assertEquals(0, doubleArray0.length);
      assertEquals(10.0, dormandPrince853Integrator1.getMaxGrowth(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator1.getMaxStep(), 0.01);
      assertEquals(8, dormandPrince853Integrator1.getOrder());
      assertEquals(0.2, dormandPrince853Integrator1.getMinReduction(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator1.getCurrentStepStart(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator1.getMinStep(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator1.getSafety(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator1.getName());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      DormandPrince853Integrator dormandPrince853Integrator2 = new DormandPrince853Integrator(4185.7029474, Double.NaN, doubleArray0, doubleArray0);
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator1));
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator0));
      assertNotNull(dormandPrince853Integrator2);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.2, dormandPrince853Integrator2.getMinReduction(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getMaxStep(), 0.01);
      assertEquals(4185.7029474, dormandPrince853Integrator2.getMinStep(), 0.01);
      assertEquals(8, dormandPrince853Integrator2.getOrder());
      assertEquals(10.0, dormandPrince853Integrator2.getMaxGrowth(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator2.getSafety(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator2.getName());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      dormandPrince853Integrator2.setMaxEvaluations((-703));
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator1));
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0.2, dormandPrince853Integrator2.getMinReduction(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getMaxStep(), 0.01);
      assertEquals(4185.7029474, dormandPrince853Integrator2.getMinStep(), 0.01);
      assertEquals(8, dormandPrince853Integrator2.getOrder());
      assertEquals(10.0, dormandPrince853Integrator2.getMaxGrowth(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator2.getSafety(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator2.getName());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(dormandPrince853Integrator2, dormandPrince853Integrator1);
      assertNotSame(dormandPrince853Integrator2, dormandPrince853Integrator0);
      
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(Double.NaN, 1037.76615036).when(eventHandler0).g(anyDouble() , any(double[].class));
      dormandPrince853Integrator2.addEventHandler(eventHandler0, (-621.6629846100296), 4185.7029474, 2092);
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator1));
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0.2, dormandPrince853Integrator2.getMinReduction(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getMaxStep(), 0.01);
      assertEquals(4185.7029474, dormandPrince853Integrator2.getMinStep(), 0.01);
      assertEquals(8, dormandPrince853Integrator2.getOrder());
      assertEquals(10.0, dormandPrince853Integrator2.getMaxGrowth(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator2.getSafety(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator2.getName());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(dormandPrince853Integrator2, dormandPrince853Integrator1);
      assertNotSame(dormandPrince853Integrator2, dormandPrince853Integrator0);
      
      double double0 = dormandPrince853Integrator2.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 114.929, doubleArray0, 1.0, doubleArray0);
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator1));
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator0));
      assertEquals(1.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.2, dormandPrince853Integrator2.getMinReduction(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getMaxStep(), 0.01);
      assertEquals(4185.7029474, dormandPrince853Integrator2.getMinStep(), 0.01);
      assertEquals(8, dormandPrince853Integrator2.getOrder());
      assertEquals(10.0, dormandPrince853Integrator2.getMaxGrowth(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator2.getSafety(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator2.getName());
      assertEquals(0, firstOrderConverter0.getDimension());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(dormandPrince853Integrator2, dormandPrince853Integrator1);
      assertNotSame(dormandPrince853Integrator2, dormandPrince853Integrator0);
      
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(Double.NaN, 3109.00283769351, doubleArray0, doubleArray0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(0, doubleArray0.length);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(3109.00283769351, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 490);
      assertEquals(0, doubleArray0.length);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(3109.00283769351, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      RiddersSolver riddersSolver0 = new RiddersSolver(2092);
      assertNotNull(riddersSolver0);
      assertEquals(1.0E-14, riddersSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(2092.0, riddersSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, riddersSolver0.getMax(), 0.01);
      assertEquals(0.0, riddersSolver0.getStartValue(), 0.01);
      assertEquals(0.0, riddersSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, riddersSolver0.getFunctionValueAccuracy(), 0.01);
      
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler1, 325.55024604235, (double) (-703), 2092, (UnivariateSolver) riddersSolver0);
      assertEquals(0, doubleArray0.length);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(3109.00283769351, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(1.0E-14, riddersSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(2092.0, riddersSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, riddersSolver0.getMax(), 0.01);
      assertEquals(0.0, riddersSolver0.getStartValue(), 0.01);
      assertEquals(0.0, riddersSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, riddersSolver0.getFunctionValueAccuracy(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(325.55024604235, 325.55024604235, 325.55024604235, 325.55024604235);
      assertNotNull(dormandPrince853Integrator0);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(325.55024604235, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator1 = new DormandPrince853Integrator(325.55024604235, 325.55024604235, doubleArray0, doubleArray0);
      assertFalse(dormandPrince853Integrator1.equals((Object)dormandPrince853Integrator0));
      assertNotNull(dormandPrince853Integrator1);
      assertEquals(0, doubleArray0.length);
      assertEquals(325.55024604235, dormandPrince853Integrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator1.getMinReduction(), 0.01);
      assertEquals(8, dormandPrince853Integrator1.getOrder());
      assertEquals(10.0, dormandPrince853Integrator1.getMaxGrowth(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator1.getMaxStep(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator1.getName());
      assertEquals(Double.NaN, dormandPrince853Integrator1.getCurrentStepStart(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator1.getMinStep(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator1.getSafety(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      DormandPrince853Integrator dormandPrince853Integrator2 = new DormandPrince853Integrator(4185.7029474, Double.NaN, doubleArray0, doubleArray0);
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator1));
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator0));
      assertNotNull(dormandPrince853Integrator2);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.2, dormandPrince853Integrator2.getMinReduction(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentStepStart(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator2.getName());
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator2.getSafety(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator2.getMaxGrowth(), 0.01);
      assertEquals(8, dormandPrince853Integrator2.getOrder());
      assertEquals(Double.NaN, dormandPrince853Integrator2.getMaxStep(), 0.01);
      assertEquals(4185.7029474, dormandPrince853Integrator2.getMinStep(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      dormandPrince853Integrator2.setMaxEvaluations((-703));
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator1));
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0.2, dormandPrince853Integrator2.getMinReduction(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentStepStart(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator2.getName());
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator2.getSafety(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator2.getMaxGrowth(), 0.01);
      assertEquals(8, dormandPrince853Integrator2.getOrder());
      assertEquals(Double.NaN, dormandPrince853Integrator2.getMaxStep(), 0.01);
      assertEquals(4185.7029474, dormandPrince853Integrator2.getMinStep(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(dormandPrince853Integrator2, dormandPrince853Integrator1);
      assertNotSame(dormandPrince853Integrator2, dormandPrince853Integrator0);
      
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      dormandPrince853Integrator2.addEventHandler(eventHandler0, (-621.6629846100296), 4185.7029474, 2092);
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator1));
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0.2, dormandPrince853Integrator2.getMinReduction(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentStepStart(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator2.getName());
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator2.getSafety(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator2.getMaxGrowth(), 0.01);
      assertEquals(8, dormandPrince853Integrator2.getOrder());
      assertEquals(Double.NaN, dormandPrince853Integrator2.getMaxStep(), 0.01);
      assertEquals(4185.7029474, dormandPrince853Integrator2.getMinStep(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(dormandPrince853Integrator2, dormandPrince853Integrator1);
      assertNotSame(dormandPrince853Integrator2, dormandPrince853Integrator0);
      
      double double0 = dormandPrince853Integrator2.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 114.929, doubleArray0, 1.0, doubleArray0);
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator1));
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator0));
      assertEquals(1.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.2, dormandPrince853Integrator2.getMinReduction(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentStepStart(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator2.getName());
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator2.getSafety(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator2.getMaxGrowth(), 0.01);
      assertEquals(8, dormandPrince853Integrator2.getOrder());
      assertEquals(Double.NaN, dormandPrince853Integrator2.getMaxStep(), 0.01);
      assertEquals(4185.7029474, dormandPrince853Integrator2.getMinStep(), 0.01);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(dormandPrince853Integrator2, dormandPrince853Integrator1);
      assertNotSame(dormandPrince853Integrator2, dormandPrince853Integrator0);
      
      dormandPrince853Integrator2.setInitialStepSize(2105.973);
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator1));
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0.2, dormandPrince853Integrator2.getMinReduction(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentStepStart(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator2.getName());
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator2.getSafety(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator2.getMaxGrowth(), 0.01);
      assertEquals(8, dormandPrince853Integrator2.getOrder());
      assertEquals(Double.NaN, dormandPrince853Integrator2.getMaxStep(), 0.01);
      assertEquals(4185.7029474, dormandPrince853Integrator2.getMinStep(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(dormandPrince853Integrator2, dormandPrince853Integrator1);
      assertNotSame(dormandPrince853Integrator2, dormandPrince853Integrator0);
      
      int int0 = dormandPrince853Integrator2.getMaxEvaluations();
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator1));
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator0));
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.2, dormandPrince853Integrator2.getMinReduction(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentStepStart(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator2.getName());
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator2.getSafety(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator2.getMaxGrowth(), 0.01);
      assertEquals(8, dormandPrince853Integrator2.getOrder());
      assertEquals(Double.NaN, dormandPrince853Integrator2.getMaxStep(), 0.01);
      assertEquals(4185.7029474, dormandPrince853Integrator2.getMinStep(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(dormandPrince853Integrator2, dormandPrince853Integrator1);
      assertNotSame(dormandPrince853Integrator2, dormandPrince853Integrator0);
      
      double double1 = dormandPrince853Integrator2.getCurrentSignedStepsize();
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator1));
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.2, dormandPrince853Integrator2.getMinReduction(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentStepStart(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator2.getName());
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator2.getSafety(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator2.getMaxGrowth(), 0.01);
      assertEquals(8, dormandPrince853Integrator2.getOrder());
      assertEquals(Double.NaN, dormandPrince853Integrator2.getMaxStep(), 0.01);
      assertEquals(4185.7029474, dormandPrince853Integrator2.getMinStep(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(dormandPrince853Integrator2, dormandPrince853Integrator1);
      assertNotSame(dormandPrince853Integrator2, dormandPrince853Integrator0);
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertNotNull(expandableStatefulODE0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      
      // Undeclared exception!
      dormandPrince853Integrator0.integrate(expandableStatefulODE0, (-1593.962094));
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(325.55024604235, 325.55024604235, 325.55024604235, 325.55024604235);
      assertNotNull(dormandPrince853Integrator0);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator1 = new DormandPrince853Integrator(325.55024604235, 325.55024604235, doubleArray0, doubleArray0);
      assertFalse(dormandPrince853Integrator1.equals((Object)dormandPrince853Integrator0));
      assertNotNull(dormandPrince853Integrator1);
      assertEquals(0, doubleArray0.length);
      assertEquals(8, dormandPrince853Integrator1.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator1.getName());
      assertEquals(Double.NaN, dormandPrince853Integrator1.getCurrentStepStart(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator1.getMaxGrowth(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator1.getMinStep(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator1.getSafety(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator1.getMaxStep(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator1.getMinReduction(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator1.getCurrentSignedStepsize(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      DormandPrince853Integrator dormandPrince853Integrator2 = new DormandPrince853Integrator(4185.7029474, Double.NaN, doubleArray0, doubleArray0);
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator0));
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator1));
      assertNotNull(dormandPrince853Integrator2);
      assertEquals(0, doubleArray0.length);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getMaxStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentSignedStepsize(), 0.01);
      assertEquals(8, dormandPrince853Integrator2.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator2.getName());
      assertEquals(0.9, dormandPrince853Integrator2.getSafety(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator2.getMaxGrowth(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentStepStart(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator2.getMinReduction(), 0.01);
      assertEquals(4185.7029474, dormandPrince853Integrator2.getMinStep(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      dormandPrince853Integrator2.setMaxEvaluations((-703));
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator0));
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator1));
      assertEquals(0, doubleArray0.length);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getMaxStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentSignedStepsize(), 0.01);
      assertEquals(8, dormandPrince853Integrator2.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator2.getName());
      assertEquals(0.9, dormandPrince853Integrator2.getSafety(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator2.getMaxGrowth(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentStepStart(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator2.getMinReduction(), 0.01);
      assertEquals(4185.7029474, dormandPrince853Integrator2.getMinStep(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(dormandPrince853Integrator2, dormandPrince853Integrator0);
      assertNotSame(dormandPrince853Integrator2, dormandPrince853Integrator1);
      
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(Double.NaN, 1037.76615036).when(eventHandler0).g(anyDouble() , any(double[].class));
      dormandPrince853Integrator2.addEventHandler(eventHandler0, (-621.6629846100296), 4185.7029474, 0);
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator0));
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator1));
      assertEquals(0, doubleArray0.length);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getMaxStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentSignedStepsize(), 0.01);
      assertEquals(8, dormandPrince853Integrator2.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator2.getName());
      assertEquals(0.9, dormandPrince853Integrator2.getSafety(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator2.getMaxGrowth(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentStepStart(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator2.getMinReduction(), 0.01);
      assertEquals(4185.7029474, dormandPrince853Integrator2.getMinStep(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(dormandPrince853Integrator2, dormandPrince853Integrator0);
      assertNotSame(dormandPrince853Integrator2, dormandPrince853Integrator1);
      
      double double0 = dormandPrince853Integrator2.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 114.929, doubleArray0, 1.0, doubleArray0);
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator0));
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator1));
      assertEquals(1.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getMaxStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentSignedStepsize(), 0.01);
      assertEquals(8, dormandPrince853Integrator2.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator2.getName());
      assertEquals(0.9, dormandPrince853Integrator2.getSafety(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator2.getMaxGrowth(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentStepStart(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator2.getMinReduction(), 0.01);
      assertEquals(4185.7029474, dormandPrince853Integrator2.getMinStep(), 0.01);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(dormandPrince853Integrator2, dormandPrince853Integrator0);
      assertNotSame(dormandPrince853Integrator2, dormandPrince853Integrator1);
      
      dormandPrince853Integrator2.setInitialStepSize((-621.6629846100296));
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator0));
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator1));
      assertEquals(0, doubleArray0.length);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getMaxStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentSignedStepsize(), 0.01);
      assertEquals(8, dormandPrince853Integrator2.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator2.getName());
      assertEquals(0.9, dormandPrince853Integrator2.getSafety(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator2.getMaxGrowth(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentStepStart(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator2.getMinReduction(), 0.01);
      assertEquals(4185.7029474, dormandPrince853Integrator2.getMinStep(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(dormandPrince853Integrator2, dormandPrince853Integrator0);
      assertNotSame(dormandPrince853Integrator2, dormandPrince853Integrator1);
      
      int int0 = dormandPrince853Integrator2.getMaxEvaluations();
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator0));
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator1));
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(0, doubleArray0.length);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getMaxStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentSignedStepsize(), 0.01);
      assertEquals(8, dormandPrince853Integrator2.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator2.getName());
      assertEquals(0.9, dormandPrince853Integrator2.getSafety(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator2.getMaxGrowth(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentStepStart(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator2.getMinReduction(), 0.01);
      assertEquals(4185.7029474, dormandPrince853Integrator2.getMinStep(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(dormandPrince853Integrator2, dormandPrince853Integrator0);
      assertNotSame(dormandPrince853Integrator2, dormandPrince853Integrator1);
      
      double double1 = dormandPrince853Integrator0.getCurrentSignedStepsize();
      assertFalse(dormandPrince853Integrator0.equals((Object)dormandPrince853Integrator1));
      assertFalse(dormandPrince853Integrator0.equals((Object)dormandPrince853Integrator2));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(325.55024604235, double1, 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertNotSame(dormandPrince853Integrator0, dormandPrince853Integrator1);
      assertNotSame(dormandPrince853Integrator0, dormandPrince853Integrator2);
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertNotNull(expandableStatefulODE0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      
      double double2 = dormandPrince853Integrator1.getCurrentSignedStepsize();
      assertFalse(dormandPrince853Integrator1.equals((Object)dormandPrince853Integrator0));
      assertFalse(dormandPrince853Integrator1.equals((Object)dormandPrince853Integrator2));
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(325.55024604235, double2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(8, dormandPrince853Integrator1.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator1.getName());
      assertEquals(Double.NaN, dormandPrince853Integrator1.getCurrentStepStart(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator1.getMaxGrowth(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator1.getMinStep(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator1.getSafety(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator1.getMaxStep(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator1.getMinReduction(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator1.getCurrentSignedStepsize(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(dormandPrince853Integrator1, dormandPrince853Integrator0);
      assertNotSame(dormandPrince853Integrator1, dormandPrince853Integrator2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-966.849465861357), (-966.849465861357), (-966.849465861357), (-966.849465861357));
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(966.849465861357, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(966.849465861357, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(966.849465861357, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      Collection<EventHandler> collection0 = graggBulirschStoerIntegrator0.getEventHandlers();
      assertNotNull(collection0);
      assertEquals(966.849465861357, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(966.849465861357, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(966.849465861357, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(3099.5704443181003);
      assertNotNull(threeEighthesIntegrator0);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 0);
      assertEquals(966.849465861357, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(966.849465861357, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(966.849465861357, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      graggBulirschStoerIntegrator0.setMaxEvaluations(0);
      assertEquals(966.849465861357, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(966.849465861357, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(966.849465861357, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(325.55024604235, 325.55024604235, 325.55024604235, 325.55024604235);
      assertNotNull(dormandPrince853Integrator0);
      assertEquals(325.55024604235, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator1 = new DormandPrince853Integrator(325.55024604235, 325.55024604235, doubleArray0, doubleArray0);
      assertFalse(dormandPrince853Integrator1.equals((Object)dormandPrince853Integrator0));
      assertNotNull(dormandPrince853Integrator1);
      assertEquals(0, doubleArray0.length);
      assertEquals(325.55024604235, dormandPrince853Integrator1.getMinStep(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator1.getSafety(), 0.01);
      assertEquals(8, dormandPrince853Integrator1.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator1.getName());
      assertEquals(325.55024604235, dormandPrince853Integrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator1.getMaxGrowth(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator1.getMinReduction(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator1.getCurrentStepStart(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator1.getMaxStep(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      DormandPrince853Integrator dormandPrince853Integrator2 = new DormandPrince853Integrator((-6255.31617), 4185.7029474, doubleArray0, doubleArray0);
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator1));
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator0));
      assertNotNull(dormandPrince853Integrator2);
      assertEquals(0, doubleArray0.length);
      assertEquals(8, dormandPrince853Integrator2.getOrder());
      assertEquals(0.9, dormandPrince853Integrator2.getSafety(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator2.getName());
      assertEquals(5116.922447105084, dormandPrince853Integrator2.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator2.getMaxGrowth(), 0.01);
      assertEquals(4185.7029474, dormandPrince853Integrator2.getMaxStep(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator2.getMinReduction(), 0.01);
      assertEquals(6255.31617, dormandPrince853Integrator2.getMinStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentStepStart(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      double double0 = dormandPrince853Integrator2.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1.0, doubleArray0, (-1798.8209880893), doubleArray0);
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator1));
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator0));
      assertEquals((-1798.8209880893), double0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(8, dormandPrince853Integrator2.getOrder());
      assertEquals(0.9, dormandPrince853Integrator2.getSafety(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator2.getName());
      assertEquals(5116.922447105084, dormandPrince853Integrator2.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator2.getMaxGrowth(), 0.01);
      assertEquals(4185.7029474, dormandPrince853Integrator2.getMaxStep(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator2.getMinReduction(), 0.01);
      assertEquals(6255.31617, dormandPrince853Integrator2.getMinStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentStepStart(), 0.01);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(dormandPrince853Integrator2, dormandPrince853Integrator1);
      assertNotSame(dormandPrince853Integrator2, dormandPrince853Integrator0);
      
      int int0 = dormandPrince853Integrator0.getMaxEvaluations();
      assertFalse(dormandPrince853Integrator0.equals((Object)dormandPrince853Integrator1));
      assertFalse(dormandPrince853Integrator0.equals((Object)dormandPrince853Integrator2));
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(325.55024604235, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertNotSame(dormandPrince853Integrator0, dormandPrince853Integrator1);
      assertNotSame(dormandPrince853Integrator0, dormandPrince853Integrator2);
      
      double double1 = dormandPrince853Integrator2.getCurrentSignedStepsize();
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator1));
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(5116.922447105084, double1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(8, dormandPrince853Integrator2.getOrder());
      assertEquals(0.9, dormandPrince853Integrator2.getSafety(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator2.getName());
      assertEquals(5116.922447105084, dormandPrince853Integrator2.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator2.getMaxGrowth(), 0.01);
      assertEquals(4185.7029474, dormandPrince853Integrator2.getMaxStep(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator2.getMinReduction(), 0.01);
      assertEquals(6255.31617, dormandPrince853Integrator2.getMinStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentStepStart(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(dormandPrince853Integrator2, dormandPrince853Integrator1);
      assertNotSame(dormandPrince853Integrator2, dormandPrince853Integrator0);
      
      double double2 = dormandPrince853Integrator0.getCurrentSignedStepsize();
      assertFalse(dormandPrince853Integrator0.equals((Object)dormandPrince853Integrator1));
      assertFalse(dormandPrince853Integrator0.equals((Object)dormandPrince853Integrator2));
      assertNotEquals(double2, double0, 0.01);
      assertNotEquals(double2, double1, 0.01);
      assertEquals(325.55024604235, double2, 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertNotSame(dormandPrince853Integrator0, dormandPrince853Integrator1);
      assertNotSame(dormandPrince853Integrator0, dormandPrince853Integrator2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(325.55024604235, 325.55024604235, 325.55024604235, 325.55024604235);
      assertNotNull(dormandPrince853Integrator0);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator1 = new DormandPrince853Integrator(325.55024604235, 325.55024604235, doubleArray0, doubleArray0);
      assertFalse(dormandPrince853Integrator1.equals((Object)dormandPrince853Integrator0));
      assertNotNull(dormandPrince853Integrator1);
      assertEquals(0, doubleArray0.length);
      assertEquals(10.0, dormandPrince853Integrator1.getMaxGrowth(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator1.getMaxStep(), 0.01);
      assertEquals(8, dormandPrince853Integrator1.getOrder());
      assertEquals(325.55024604235, dormandPrince853Integrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator1.getMinReduction(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator1.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator1.getSafety(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator1.getName());
      assertEquals(325.55024604235, dormandPrince853Integrator1.getMinStep(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      double double0 = dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 432.6628707535839, doubleArray0, 325.55024604235, doubleArray0);
      assertFalse(dormandPrince853Integrator0.equals((Object)dormandPrince853Integrator1));
      assertEquals(325.55024604235, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(0, firstOrderConverter0.getDimension());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(dormandPrince853Integrator0, dormandPrince853Integrator1);
      
      dormandPrince853Integrator1.setInitialStepSize(325.55024604235);
      assertFalse(dormandPrince853Integrator1.equals((Object)dormandPrince853Integrator0));
      assertEquals(0, doubleArray0.length);
      assertEquals(10.0, dormandPrince853Integrator1.getMaxGrowth(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator1.getMaxStep(), 0.01);
      assertEquals(8, dormandPrince853Integrator1.getOrder());
      assertEquals(325.55024604235, dormandPrince853Integrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator1.getMinReduction(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator1.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator1.getSafety(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator1.getName());
      assertEquals(325.55024604235, dormandPrince853Integrator1.getMinStep(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(dormandPrince853Integrator1, dormandPrince853Integrator0);
      
      int int0 = dormandPrince853Integrator1.getMaxEvaluations();
      assertFalse(dormandPrince853Integrator1.equals((Object)dormandPrince853Integrator0));
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(0, doubleArray0.length);
      assertEquals(10.0, dormandPrince853Integrator1.getMaxGrowth(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator1.getMaxStep(), 0.01);
      assertEquals(8, dormandPrince853Integrator1.getOrder());
      assertEquals(325.55024604235, dormandPrince853Integrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator1.getMinReduction(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator1.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator1.getSafety(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator1.getName());
      assertEquals(325.55024604235, dormandPrince853Integrator1.getMinStep(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(dormandPrince853Integrator1, dormandPrince853Integrator0);
      
      double double1 = dormandPrince853Integrator1.getCurrentSignedStepsize();
      assertFalse(dormandPrince853Integrator1.equals((Object)dormandPrince853Integrator0));
      assertEquals(double1, double0, 0.01);
      assertEquals(325.55024604235, double1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(10.0, dormandPrince853Integrator1.getMaxGrowth(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator1.getMaxStep(), 0.01);
      assertEquals(8, dormandPrince853Integrator1.getOrder());
      assertEquals(325.55024604235, dormandPrince853Integrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator1.getMinReduction(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator1.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator1.getSafety(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator1.getName());
      assertEquals(325.55024604235, dormandPrince853Integrator1.getMinStep(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(dormandPrince853Integrator1, dormandPrince853Integrator0);
      
      dormandPrince853Integrator1.setStepSizeControl(Double.NaN, 325.55024604235, doubleArray0, doubleArray0);
      assertFalse(dormandPrince853Integrator1.equals((Object)dormandPrince853Integrator0));
      assertEquals(0, doubleArray0.length);
      assertEquals(10.0, dormandPrince853Integrator1.getMaxGrowth(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator1.getMaxStep(), 0.01);
      assertEquals(8, dormandPrince853Integrator1.getOrder());
      assertEquals(Double.NaN, dormandPrince853Integrator1.getMinStep(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator1.getMinReduction(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator1.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator1.getSafety(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator1.getName());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(dormandPrince853Integrator1, dormandPrince853Integrator0);
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertNotNull(expandableStatefulODE0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      
      // Undeclared exception!
      dormandPrince853Integrator0.integrate(expandableStatefulODE0, 1.0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-828.8966186), 0.0, (-828.8966186), 3424.69);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(828.8966186, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.integrate((ExpandableStatefulODE) null, 0.4734157919883728);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-966.849465861357), (-966.849465861357), (-966.849465861357), (-966.849465861357));
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(966.849465861357, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(966.849465861357, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(966.849465861357, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      assertNotNull(dummyStepHandler0);
      
      graggBulirschStoerIntegrator0.addStepHandler(dummyStepHandler0);
      assertEquals(966.849465861357, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(966.849465861357, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(966.849465861357, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(10, firstOrderConverter0.getDimension());
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertNotNull(expandableStatefulODE0);
      assertEquals(10, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (-966.849465861357));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(325.55024604235, 325.55024604235, 325.55024604235, 325.55024604235);
      assertNotNull(dormandPrince853Integrator0);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(325.55024604235, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator1 = new DormandPrince853Integrator(325.55024604235, 325.55024604235, doubleArray0, doubleArray0);
      assertFalse(dormandPrince853Integrator1.equals((Object)dormandPrince853Integrator0));
      assertNotNull(dormandPrince853Integrator1);
      assertEquals(0, doubleArray0.length);
      assertEquals(10.0, dormandPrince853Integrator1.getMaxGrowth(), 0.01);
      assertEquals(8, dormandPrince853Integrator1.getOrder());
      assertEquals(0.9, dormandPrince853Integrator1.getSafety(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator1.getName());
      assertEquals(325.55024604235, dormandPrince853Integrator1.getMinStep(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator1.getMinReduction(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator1.getMaxStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator1.getCurrentStepStart(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      DormandPrince853Integrator dormandPrince853Integrator2 = new DormandPrince853Integrator(4185.7029474, Double.NaN, doubleArray0, doubleArray0);
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator1));
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator0));
      assertNotNull(dormandPrince853Integrator2);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.2, dormandPrince853Integrator2.getMinReduction(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getMaxStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentSignedStepsize(), 0.01);
      assertEquals(8, dormandPrince853Integrator2.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator2.getName());
      assertEquals(0.9, dormandPrince853Integrator2.getSafety(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentStepStart(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator2.getMaxGrowth(), 0.01);
      assertEquals(4185.7029474, dormandPrince853Integrator2.getMinStep(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      double double0 = dormandPrince853Integrator2.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 114.929, doubleArray0, 1.0, doubleArray0);
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator1));
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator0));
      assertEquals(1.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.2, dormandPrince853Integrator2.getMinReduction(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getMaxStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentSignedStepsize(), 0.01);
      assertEquals(8, dormandPrince853Integrator2.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator2.getName());
      assertEquals(0.9, dormandPrince853Integrator2.getSafety(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentStepStart(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator2.getMaxGrowth(), 0.01);
      assertEquals(4185.7029474, dormandPrince853Integrator2.getMinStep(), 0.01);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(dormandPrince853Integrator2, dormandPrince853Integrator1);
      assertNotSame(dormandPrince853Integrator2, dormandPrince853Integrator0);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      dormandPrince853Integrator2.addEventHandler(eventHandler0, 1.0, 2067.6375645100397, (-390));
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator1));
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator0));
      assertEquals(0, doubleArray0.length);
      assertEquals(0.2, dormandPrince853Integrator2.getMinReduction(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getMaxStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentSignedStepsize(), 0.01);
      assertEquals(8, dormandPrince853Integrator2.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator2.getName());
      assertEquals(0.9, dormandPrince853Integrator2.getSafety(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentStepStart(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator2.getMaxGrowth(), 0.01);
      assertEquals(4185.7029474, dormandPrince853Integrator2.getMinStep(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(dormandPrince853Integrator2, dormandPrince853Integrator1);
      assertNotSame(dormandPrince853Integrator2, dormandPrince853Integrator0);
      
      int int0 = dormandPrince853Integrator2.getMaxEvaluations();
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator1));
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator0));
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.2, dormandPrince853Integrator2.getMinReduction(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getMaxStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentSignedStepsize(), 0.01);
      assertEquals(8, dormandPrince853Integrator2.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator2.getName());
      assertEquals(0.9, dormandPrince853Integrator2.getSafety(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentStepStart(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator2.getMaxGrowth(), 0.01);
      assertEquals(4185.7029474, dormandPrince853Integrator2.getMinStep(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(dormandPrince853Integrator2, dormandPrince853Integrator1);
      assertNotSame(dormandPrince853Integrator2, dormandPrince853Integrator0);
      
      double double1 = dormandPrince853Integrator2.getCurrentSignedStepsize();
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator1));
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.2, dormandPrince853Integrator2.getMinReduction(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getMaxStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentSignedStepsize(), 0.01);
      assertEquals(8, dormandPrince853Integrator2.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator2.getName());
      assertEquals(0.9, dormandPrince853Integrator2.getSafety(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentStepStart(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator2.getMaxGrowth(), 0.01);
      assertEquals(4185.7029474, dormandPrince853Integrator2.getMinStep(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(dormandPrince853Integrator2, dormandPrince853Integrator1);
      assertNotSame(dormandPrince853Integrator2, dormandPrince853Integrator0);
      
      double double2 = dormandPrince853Integrator2.getCurrentSignedStepsize();
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator1));
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator0));
      assertNotEquals(double2, double0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.2, dormandPrince853Integrator2.getMinReduction(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getMaxStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentSignedStepsize(), 0.01);
      assertEquals(8, dormandPrince853Integrator2.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator2.getName());
      assertEquals(0.9, dormandPrince853Integrator2.getSafety(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentStepStart(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator2.getMaxGrowth(), 0.01);
      assertEquals(4185.7029474, dormandPrince853Integrator2.getMinStep(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(dormandPrince853Integrator2, dormandPrince853Integrator1);
      assertNotSame(dormandPrince853Integrator2, dormandPrince853Integrator0);
      
      int int1 = dormandPrince853Integrator2.getEvaluations();
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator1));
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator0));
      assertFalse(int1 == int0);
      assertEquals(17, int1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.2, dormandPrince853Integrator2.getMinReduction(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getMaxStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentSignedStepsize(), 0.01);
      assertEquals(8, dormandPrince853Integrator2.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator2.getName());
      assertEquals(0.9, dormandPrince853Integrator2.getSafety(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentStepStart(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator2.getMaxGrowth(), 0.01);
      assertEquals(4185.7029474, dormandPrince853Integrator2.getMinStep(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(dormandPrince853Integrator2, dormandPrince853Integrator1);
      assertNotSame(dormandPrince853Integrator2, dormandPrince853Integrator0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-828.8966186));
      assertNotNull(threeEighthesIntegrator0);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      
      double double0 = threeEighthesIntegrator0.getCurrentStepStart();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double double0 = 1510.5834;
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(1510.5834);
      assertNotNull(eulerIntegrator0);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      int int0 = 1327;
      eulerIntegrator0.addEventHandler(eventHandler0, 1510.5834, 1510.5834, 1327);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      
      double double1 = eulerIntegrator0.getCurrentStepStart();
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      
      double double2 = Double.NaN;
      double double3 = 1.0;
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(626, Double.NaN, 1.0, 1510.5834, 1501.359029806059);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(325.55024604235, 325.55024604235, 325.55024604235, 325.55024604235);
      assertNotNull(dormandPrince853Integrator0);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      
      dormandPrince853Integrator0.clearStepHandlers();
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(325.55024604235, 325.55024604235, doubleArray0, doubleArray0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(0, doubleArray0.length);
      assertEquals(325.55024604235, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(325.55024604235, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(325.55024604235, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertNotNull(expandableStatefulODE0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 325.55024604235);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 775.6398317;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(775.6398317, 775.6398317, doubleArray0, doubleArray0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(1, doubleArray0.length);
      assertEquals(775.6398317, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(775.6398317, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(775.6398317, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertArrayEquals(new double[] {775.6398317}, doubleArray0, 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertNotNull(expandableStatefulODE0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      
      expandableStatefulODE0.setTime(775.6398317);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(775.6398317, expandableStatefulODE0.getTime(), 0.01);
      
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 775.6398317);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-2357.070939403298), 0.0, 0.0, 1097.4444);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(2357.070939403298, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(450).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(900, firstOrderConverter0.getDimension());
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertNotNull(expandableStatefulODE0);
      assertEquals(900, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, (-2357.070939403298), (-9.1973399031975E-8), 0.0);
      assertNotNull(dormandPrince853Integrator0);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(0.0, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(0.0, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(2357.070939403298, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      
      int int0 = dormandPrince853Integrator0.getMaxEvaluations();
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(0.0, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(0.0, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(2357.070939403298, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      
      double double0 = dormandPrince853Integrator0.getCurrentSignedStepsize();
      assertEquals(0.0, double0, 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(0.0, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(0.0, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(2357.070939403298, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      
      graggBulirschStoerIntegrator0.setInterpolationControl(false, Integer.MAX_VALUE);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(2357.070939403298, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(325.55024604235, 325.55024604235, 325.55024604235, 325.55024604235);
      assertNotNull(dormandPrince853Integrator0);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(325.55024604235, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator1 = new DormandPrince853Integrator(325.55024604235, 325.55024604235, doubleArray0, doubleArray0);
      assertFalse(dormandPrince853Integrator1.equals((Object)dormandPrince853Integrator0));
      assertNotNull(dormandPrince853Integrator1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.2, dormandPrince853Integrator1.getMinReduction(), 0.01);
      assertEquals(8, dormandPrince853Integrator1.getOrder());
      assertEquals(325.55024604235, dormandPrince853Integrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator1.getMaxGrowth(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator1.getMinStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator1.getCurrentStepStart(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator1.getMaxStep(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator1.getName());
      assertEquals(0.9, dormandPrince853Integrator1.getSafety(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      DormandPrince853Integrator dormandPrince853Integrator2 = new DormandPrince853Integrator((-24.24045290653263), 1548.005061712, doubleArray0, doubleArray0);
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator1));
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator0));
      assertNotNull(dormandPrince853Integrator2);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.2, dormandPrince853Integrator2.getMinReduction(), 0.01);
      assertEquals(193.7120125276279, dormandPrince853Integrator2.getCurrentSignedStepsize(), 0.01);
      assertEquals(1548.005061712, dormandPrince853Integrator2.getMaxStep(), 0.01);
      assertEquals(24.24045290653263, dormandPrince853Integrator2.getMinStep(), 0.01);
      assertEquals(8, dormandPrince853Integrator2.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator2.getName());
      assertEquals(0.9, dormandPrince853Integrator2.getSafety(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentStepStart(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator2.getMaxGrowth(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      double[] doubleArray1 = new double[4];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 325.55024604235;
      doubleArray1[1] = 325.55024604235;
      doubleArray1[3] = 1000.0;
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1548.005061712, doubleArray0, 1000.0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(325.55024604235, 325.55024604235, 325.55024604235, 325.55024604235);
      assertNotNull(dormandPrince853Integrator0);
      assertEquals(325.55024604235, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(325.55024604235, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator1 = new DormandPrince853Integrator(325.55024604235, 2272.9504661, doubleArray0, doubleArray0);
      assertFalse(dormandPrince853Integrator1.equals((Object)dormandPrince853Integrator0));
      assertNotNull(dormandPrince853Integrator1);
      assertEquals(0, doubleArray0.length);
      assertEquals(325.55024604235, dormandPrince853Integrator1.getMinStep(), 0.01);
      assertEquals(8, dormandPrince853Integrator1.getOrder());
      assertEquals(Double.NaN, dormandPrince853Integrator1.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator1.getSafety(), 0.01);
      assertEquals(2272.9504661, dormandPrince853Integrator1.getMaxStep(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator1.getMinReduction(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator1.getName());
      assertEquals(10.0, dormandPrince853Integrator1.getMaxGrowth(), 0.01);
      assertEquals(860.2090347589527, dormandPrince853Integrator1.getCurrentSignedStepsize(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = (-555.0);
      doubleArray1[1] = 2272.9504661;
      doubleArray1[2] = 2272.9504661;
      doubleArray1[3] = Double.NaN;
      doubleArray1[4] = 2272.9504661;
      doubleArray1[5] = Double.NaN;
      doubleArray1[6] = 2272.9504661;
      DormandPrince853Integrator dormandPrince853Integrator2 = new DormandPrince853Integrator(4185.7029474, 2272.9504661, doubleArray0, doubleArray1);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator1));
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator0));
      assertNotNull(dormandPrince853Integrator2);
      assertEquals(0, doubleArray0.length);
      assertEquals(7, doubleArray1.length);
      assertEquals(0.2, dormandPrince853Integrator2.getMinReduction(), 0.01);
      assertEquals(2272.9504661, dormandPrince853Integrator2.getMaxStep(), 0.01);
      assertEquals(4185.7029474, dormandPrince853Integrator2.getMinStep(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator2.getMaxGrowth(), 0.01);
      assertEquals(8, dormandPrince853Integrator2.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator2.getName());
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator2.getSafety(), 0.01);
      assertEquals(3084.4603199342628, dormandPrince853Integrator2.getCurrentSignedStepsize(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-555.0), 2272.9504661, 2272.9504661, Double.NaN, 2272.9504661, Double.NaN, 2272.9504661}, doubleArray1, 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2358.0927503, doubleArray0, (-2999.1), doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-2358.0927503), 0.0, 0.0, 1097.4444);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(2358.0927503, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertNotNull(expandableStatefulODE0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      
      expandableStatefulODE0.setTime((-2358.0927503));
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals((-2358.0927503), expandableStatefulODE0.getTime(), 0.01);
      
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 0.0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(325.55024604235, 325.55024604235, 325.55024604235, 325.55024604235);
      assertNotNull(dormandPrince853Integrator0);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(325.55024604235, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(325.55024604235, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator1 = new DormandPrince853Integrator((-1093.231904669316), (-1093.231904669316), doubleArray0, doubleArray0);
      assertFalse(dormandPrince853Integrator1.equals((Object)dormandPrince853Integrator0));
      assertNotNull(dormandPrince853Integrator1);
      assertEquals(0, doubleArray0.length);
      assertEquals(1093.231904669316, dormandPrince853Integrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator1.getMinReduction(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator1.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator1.getSafety(), 0.01);
      assertEquals(8, dormandPrince853Integrator1.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator1.getName());
      assertEquals(1093.231904669316, dormandPrince853Integrator1.getMinStep(), 0.01);
      assertEquals(1093.231904669316, dormandPrince853Integrator1.getMaxStep(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator1.getMaxGrowth(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      DormandPrince853Integrator dormandPrince853Integrator2 = new DormandPrince853Integrator((-1093.231904669316), 325.55024604235, doubleArray0, doubleArray0);
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator1));
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator0));
      assertNotNull(dormandPrince853Integrator2);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.9, dormandPrince853Integrator2.getSafety(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator2.getName());
      assertEquals(596.5751549858934, dormandPrince853Integrator2.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator2.getMaxGrowth(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator2.getMaxStep(), 0.01);
      assertEquals(1093.231904669316, dormandPrince853Integrator2.getMinStep(), 0.01);
      assertEquals(8, dormandPrince853Integrator2.getOrder());
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentStepStart(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator2.getMinReduction(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      double double0 = dormandPrince853Integrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 4.547473508864641E-10, doubleArray0, 325.55024604235, doubleArray0);
      assertFalse(dormandPrince853Integrator1.equals((Object)dormandPrince853Integrator2));
      assertFalse(dormandPrince853Integrator1.equals((Object)dormandPrince853Integrator0));
      assertEquals(325.55024604235, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(1093.231904669316, dormandPrince853Integrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator1.getMinReduction(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator1.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator1.getSafety(), 0.01);
      assertEquals(8, dormandPrince853Integrator1.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator1.getName());
      assertEquals(1093.231904669316, dormandPrince853Integrator1.getMinStep(), 0.01);
      assertEquals(1093.231904669316, dormandPrince853Integrator1.getMaxStep(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator1.getMaxGrowth(), 0.01);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(dormandPrince853Integrator1, dormandPrince853Integrator2);
      assertNotSame(dormandPrince853Integrator1, dormandPrince853Integrator0);
      
      int int0 = dormandPrince853Integrator2.getOrder();
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator1));
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator0));
      assertEquals(8, int0);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.9, dormandPrince853Integrator2.getSafety(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator2.getName());
      assertEquals(596.5751549858934, dormandPrince853Integrator2.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator2.getMaxGrowth(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator2.getMaxStep(), 0.01);
      assertEquals(1093.231904669316, dormandPrince853Integrator2.getMinStep(), 0.01);
      assertEquals(8, dormandPrince853Integrator2.getOrder());
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentStepStart(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator2.getMinReduction(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(dormandPrince853Integrator2, dormandPrince853Integrator1);
      assertNotSame(dormandPrince853Integrator2, dormandPrince853Integrator0);
      
      double double1 = dormandPrince853Integrator2.getCurrentSignedStepsize();
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator1));
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(596.5751549858934, double1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.9, dormandPrince853Integrator2.getSafety(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator2.getName());
      assertEquals(596.5751549858934, dormandPrince853Integrator2.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator2.getMaxGrowth(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator2.getMaxStep(), 0.01);
      assertEquals(1093.231904669316, dormandPrince853Integrator2.getMinStep(), 0.01);
      assertEquals(8, dormandPrince853Integrator2.getOrder());
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentStepStart(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator2.getMinReduction(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(dormandPrince853Integrator2, dormandPrince853Integrator1);
      assertNotSame(dormandPrince853Integrator2, dormandPrince853Integrator0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(325.55024604235, 325.55024604235, 325.55024604235, 325.55024604235);
      assertNotNull(dormandPrince853Integrator0);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator1 = new DormandPrince853Integrator(325.55024604235, 325.55024604235, doubleArray0, doubleArray0);
      assertFalse(dormandPrince853Integrator1.equals((Object)dormandPrince853Integrator0));
      assertNotNull(dormandPrince853Integrator1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0.2, dormandPrince853Integrator1.getMinReduction(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator1.getMaxStep(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator1.getMinStep(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator1.getName());
      assertEquals(Double.NaN, dormandPrince853Integrator1.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator1.getSafety(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator1.getMaxGrowth(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(8, dormandPrince853Integrator1.getOrder());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      DormandPrince853Integrator dormandPrince853Integrator2 = new DormandPrince853Integrator(4185.7029474, Double.NaN, doubleArray0, doubleArray0);
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator1));
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator0));
      assertNotNull(dormandPrince853Integrator2);
      assertEquals(0, doubleArray0.length);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getMaxStep(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator2.getMinReduction(), 0.01);
      assertEquals(4185.7029474, dormandPrince853Integrator2.getMinStep(), 0.01);
      assertEquals(8, dormandPrince853Integrator2.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator2.getName());
      assertEquals(0.9, dormandPrince853Integrator2.getSafety(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator2.getMaxGrowth(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentSignedStepsize(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      double double0 = dormandPrince853Integrator2.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 114.929, doubleArray0, 1.0, doubleArray0);
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator1));
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator0));
      assertEquals(1.0, double0, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getMaxStep(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator2.getMinReduction(), 0.01);
      assertEquals(4185.7029474, dormandPrince853Integrator2.getMinStep(), 0.01);
      assertEquals(8, dormandPrince853Integrator2.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator2.getName());
      assertEquals(0.9, dormandPrince853Integrator2.getSafety(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator2.getMaxGrowth(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentSignedStepsize(), 0.01);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(dormandPrince853Integrator2, dormandPrince853Integrator1);
      assertNotSame(dormandPrince853Integrator2, dormandPrince853Integrator0);
      
      int int0 = dormandPrince853Integrator2.getMaxEvaluations();
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator1));
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator0));
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(0, doubleArray0.length);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getMaxStep(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator2.getMinReduction(), 0.01);
      assertEquals(4185.7029474, dormandPrince853Integrator2.getMinStep(), 0.01);
      assertEquals(8, dormandPrince853Integrator2.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator2.getName());
      assertEquals(0.9, dormandPrince853Integrator2.getSafety(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator2.getMaxGrowth(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentSignedStepsize(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(dormandPrince853Integrator2, dormandPrince853Integrator1);
      assertNotSame(dormandPrince853Integrator2, dormandPrince853Integrator0);
      
      double double1 = dormandPrince853Integrator2.getCurrentSignedStepsize();
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator1));
      assertFalse(dormandPrince853Integrator2.equals((Object)dormandPrince853Integrator0));
      assertNotEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(0, doubleArray0.length);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getMaxStep(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator2.getMinReduction(), 0.01);
      assertEquals(4185.7029474, dormandPrince853Integrator2.getMinStep(), 0.01);
      assertEquals(8, dormandPrince853Integrator2.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator2.getName());
      assertEquals(0.9, dormandPrince853Integrator2.getSafety(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator2.getMaxGrowth(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator2.getCurrentSignedStepsize(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotSame(dormandPrince853Integrator2, dormandPrince853Integrator1);
      assertNotSame(dormandPrince853Integrator2, dormandPrince853Integrator0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertNotNull(expandableStatefulODE0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-468.566480949), (-468.566480949), doubleArray0, doubleArray0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(1, doubleArray0.length);
      assertEquals(468.566480949, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(468.566480949, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(468.566480949, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 3229.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 1
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      doubleArray0[0] = 775.6398317;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.6512666940689087, 775.6398317, doubleArray0, doubleArray0);
      assertNotNull(dormandPrince853Integrator0);
      assertEquals(12, doubleArray0.length);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(775.6398317, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(22.475506423202653, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(0.6512666940689087, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(834).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(1668, firstOrderConverter0.getDimension());
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      assertFalse(firstOrderConverter1.equals((Object)firstOrderConverter0));
      assertNotNull(firstOrderConverter1);
      assertEquals(0, firstOrderConverter1.getDimension());
      
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0.0);
      assertNotNull(midpointIntegrator0);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("midpoint", midpointIntegrator0.getName());
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations2 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations2).getDimension();
      FirstOrderConverter firstOrderConverter2 = new FirstOrderConverter(secondOrderDifferentialEquations2);
      assertFalse(firstOrderConverter2.equals((Object)firstOrderConverter0));
      assertFalse(firstOrderConverter2.equals((Object)firstOrderConverter1));
      assertNotNull(firstOrderConverter2);
      assertEquals(0, firstOrderConverter2.getDimension());
      
      double[] doubleArray1 = new double[9];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray0[1] = 2703.0061;
      doubleArray1[1] = (-2.2258513086839407E-9);
      doubleArray1[2] = 0.6512666940689087;
      doubleArray1[3] = 0.6512666940689087;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 2703.0061;
      doubleArray1[6] = 0.0;
      doubleArray1[7] = 775.6398317;
      doubleArray1[8] = 0.0;
      try { 
        midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter2, 0.6512666940689087, doubleArray1, 1.8412576154421806E-7, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-828.8966186));
      assertNotNull(threeEighthesIntegrator0);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      
      threeEighthesIntegrator0.clearStepHandlers();
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      
      double double0 = threeEighthesIntegrator0.getCurrentSignedStepsize();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-2358.0927503), 0.0, 0.0, 1097.4444);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(2358.0927503, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(308).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(616, firstOrderConverter0.getDimension());
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertNotNull(expandableStatefulODE0);
      assertEquals(616, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2358.0927503);
      doubleArray0[1] = (-2003.3087127853441);
      doubleArray0[2] = (-2003.3087127853441);
      doubleArray0[3] = (-2358.0927503);
      doubleArray0[4] = (-2358.0927503);
      doubleArray0[5] = (-967.351);
      doubleArray0[6] = (-2003.3087127853441);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-2358.0927503), (-2003.3087127853441), doubleArray0, doubleArray0);
      assertNotNull(dormandPrince853Integrator0);
      assertEquals(7, doubleArray0.length);
      assertEquals(2003.3087127853441, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(2173.4736603492447, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(2358.0927503, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertArrayEquals(new double[] {(-2358.0927503), (-2003.3087127853441), (-2003.3087127853441), (-2358.0927503), (-2358.0927503), (-967.351), (-2003.3087127853441)}, doubleArray0, 0.01);
      
      int int0 = dormandPrince853Integrator0.getMaxEvaluations();
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(7, doubleArray0.length);
      assertEquals(2003.3087127853441, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(2173.4736603492447, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(2358.0927503, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertArrayEquals(new double[] {(-2358.0927503), (-2003.3087127853441), (-2003.3087127853441), (-2358.0927503), (-2358.0927503), (-967.351), (-2003.3087127853441)}, doubleArray0, 0.01);
      
      double double0 = dormandPrince853Integrator0.getCurrentSignedStepsize();
      assertEquals(2173.4736603492447, double0, 0.01);
      assertEquals(7, doubleArray0.length);
      assertEquals(2003.3087127853441, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(2173.4736603492447, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(2358.0927503, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertArrayEquals(new double[] {(-2358.0927503), (-2003.3087127853441), (-2003.3087127853441), (-2358.0927503), (-2358.0927503), (-967.351), (-2003.3087127853441)}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double double0 = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, 0.0, 0.0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(3).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(6, firstOrderConverter0.getDimension());
      
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-27.65791227), 0.0, 0.1734936535358429, 0.1734936535358429);
      assertNotNull(dormandPrince853Integrator0);
      assertEquals(0.0, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(0.0, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(27.65791227, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      
      double[] doubleArray0 = new double[0];
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 5.914537964556077E-8, doubleArray0, 5.914537964556077E-8, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 6
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(325.55024604235, 325.55024604235, 325.55024604235, 325.55024604235);
      assertNotNull(dormandPrince853Integrator0);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(325.55024604235, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(325.55024604235, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator0.getMaxStep(), 0.01);
      
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator1 = new DormandPrince853Integrator(325.55024604235, 325.55024604235, doubleArray0, doubleArray0);
      assertFalse(dormandPrince853Integrator1.equals((Object)dormandPrince853Integrator0));
      assertNotNull(dormandPrince853Integrator1);
      assertEquals(0, doubleArray0.length);
      assertEquals(325.55024604235, dormandPrince853Integrator1.getMaxStep(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator1.getMinReduction(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator1.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator1.getSafety(), 0.01);
      assertEquals(8, dormandPrince853Integrator1.getOrder());
      assertEquals(325.55024604235, dormandPrince853Integrator1.getMinStep(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator1.getName());
      assertEquals(325.55024604235, dormandPrince853Integrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator1.getMaxGrowth(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      // Undeclared exception!
      dormandPrince853Integrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 3075.97325672217, doubleArray0, 325.55024604235, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-2358.0927503), 0.0, 0.0, 1097.4444);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(2358.0927503, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1.0, 1.0, (-1008.5122229562223), 2079.4702326654);
      assertNotNull(dormandPrince853Integrator0);
      assertEquals(1.0, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(1.0, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(1.0, dormandPrince853Integrator0.getMaxStep(), 0.01);
      
      dormandPrince853Integrator0.clearStepHandlers();
      assertEquals(1.0, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(1.0, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(1.0, dormandPrince853Integrator0.getMaxStep(), 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 4.547473508864641E-10, doubleArray0, (-77.7179176330566), doubleArray0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 775.6398317;
      double double0 = 0.6512666940689087;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.6512666940689087, 775.6398317, doubleArray0, doubleArray0);
      assertNotNull(dormandPrince853Integrator0);
      assertEquals(1, doubleArray0.length);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(775.6398317, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(0.6512666940689087, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(22.475506423202653, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertArrayEquals(new double[] {775.6398317}, doubleArray0, 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 413.2548556769523, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(4185.7029474, 4185.7029474, doubleArray0, doubleArray0);
      assertNotNull(dormandPrince853Integrator0);
      assertEquals(0, doubleArray0.length);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(4185.7029474, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(4185.7029474, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(4185.7029474, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1435).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(2870, firstOrderConverter0.getDimension());
      
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 114.929, doubleArray0, 1.0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 2,870
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(775.6398317, 775.6398317, doubleArray0, doubleArray0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(1, doubleArray0.length);
      assertEquals(775.6398317, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(775.6398317, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(775.6398317, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      int int0 = graggBulirschStoerIntegrator0.getEvaluations();
      assertEquals(0, int0);
      assertEquals(1, doubleArray0.length);
      assertEquals(775.6398317, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(775.6398317, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(775.6398317, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) null, 775.6398317, doubleArray0, 775.6398317, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(615.98009941);
      assertNotNull(midpointIntegrator0);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("midpoint", midpointIntegrator0.getName());
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      // Undeclared exception!
      try { 
        midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-706.6338489270798), (double[]) null, 2703.0061, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 775.6398317;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(775.6398317, 775.6398317, doubleArray0, doubleArray0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(1, doubleArray0.length);
      assertEquals(775.6398317, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(775.6398317, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(775.6398317, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertArrayEquals(new double[] {775.6398317}, doubleArray0, 0.01);
      
      graggBulirschStoerIntegrator0.setInterpolationControl(false, 0);
      assertEquals(1, doubleArray0.length);
      assertEquals(775.6398317, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(775.6398317, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(775.6398317, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertArrayEquals(new double[] {775.6398317}, doubleArray0, 0.01);
      
      String string0 = graggBulirschStoerIntegrator0.getName();
      assertEquals("Gragg-Bulirsch-Stoer", string0);
      assertNotNull(string0);
      assertEquals(1, doubleArray0.length);
      assertEquals(775.6398317, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(775.6398317, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(775.6398317, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertArrayEquals(new double[] {775.6398317}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-828.8966186));
      assertNotNull(threeEighthesIntegrator0);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      String string0 = threeEighthesIntegrator0.getName();
      assertEquals("3/8", string0);
      assertNotNull(string0);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-828.8966186));
      assertNotNull(threeEighthesIntegrator0);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      
      threeEighthesIntegrator0.setMaxEvaluations(698);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(775.6398317, 775.6398317, doubleArray0, doubleArray0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(1, doubleArray0.length);
      assertEquals(775.6398317, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(775.6398317, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(775.6398317, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.BOTH;
      StepNormalizer stepNormalizer0 = new StepNormalizer((-34.9), fixedStepHandler0, stepNormalizerMode0, stepNormalizerBounds0);
      assertNotNull(stepNormalizer0);
      
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      assertEquals(1, doubleArray0.length);
      assertEquals(775.6398317, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(775.6398317, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(775.6398317, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      graggBulirschStoerIntegrator0.setStepSizeControl((-34.9), (-34.9), (-6132.982486543553), (-34.9));
      assertEquals(1, doubleArray0.length);
      assertEquals(34.9, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(775.6398317, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(34.9, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 2107.921, 1000.0, 787);
      assertEquals(1, doubleArray0.length);
      assertEquals(34.9, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(775.6398317, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(34.9, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      graggBulirschStoerIntegrator0.clearStepHandlers();
      assertEquals(1, doubleArray0.length);
      assertEquals(34.9, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(775.6398317, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(34.9, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      graggBulirschStoerIntegrator0.setStabilityCheck(true, 787, 487, 2703.0061);
      assertEquals(1, doubleArray0.length);
      assertEquals(34.9, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(775.6398317, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(34.9, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator1 = new GraggBulirschStoerIntegrator(2107.921, 1264.4529166023, 2107.921, 1722.027406);
      assertFalse(graggBulirschStoerIntegrator1.equals((Object)graggBulirschStoerIntegrator0));
      assertNotNull(graggBulirschStoerIntegrator1);
      assertEquals(1632.595129362218, graggBulirschStoerIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator1.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator1.getName());
      assertEquals(1264.4529166023, graggBulirschStoerIntegrator1.getMaxStep(), 0.01);
      assertEquals(2107.921, graggBulirschStoerIntegrator1.getMinStep(), 0.01);
      
      int int0 = graggBulirschStoerIntegrator1.getEvaluations();
      assertFalse(graggBulirschStoerIntegrator1.equals((Object)graggBulirschStoerIntegrator0));
      assertEquals(0, int0);
      assertEquals(1632.595129362218, graggBulirschStoerIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator1.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator1.getName());
      assertEquals(1264.4529166023, graggBulirschStoerIntegrator1.getMaxStep(), 0.01);
      assertEquals(2107.921, graggBulirschStoerIntegrator1.getMinStep(), 0.01);
      assertNotSame(graggBulirschStoerIntegrator1, graggBulirschStoerIntegrator0);
      
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator2 = new GraggBulirschStoerIntegrator(0, (-34.9), doubleArray0, doubleArray0);
      assertFalse(graggBulirschStoerIntegrator2.equals((Object)graggBulirschStoerIntegrator1));
      assertFalse(graggBulirschStoerIntegrator2.equals((Object)graggBulirschStoerIntegrator0));
      assertNotNull(graggBulirschStoerIntegrator2);
      assertEquals(1, doubleArray0.length);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator2.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator2.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator2.getCurrentSignedStepsize(), 0.01);
      assertEquals(34.9, graggBulirschStoerIntegrator2.getMaxStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator2.getMinStep(), 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      
      int int1 = graggBulirschStoerIntegrator2.getMaxEvaluations();
      assertFalse(graggBulirschStoerIntegrator2.equals((Object)graggBulirschStoerIntegrator1));
      assertFalse(graggBulirschStoerIntegrator2.equals((Object)graggBulirschStoerIntegrator0));
      assertFalse(int1 == int0);
      assertEquals(Integer.MAX_VALUE, int1);
      assertEquals(1, doubleArray0.length);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator2.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator2.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator2.getCurrentSignedStepsize(), 0.01);
      assertEquals(34.9, graggBulirschStoerIntegrator2.getMaxStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator2.getMinStep(), 0.01);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotSame(graggBulirschStoerIntegrator2, graggBulirschStoerIntegrator1);
      assertNotSame(graggBulirschStoerIntegrator2, graggBulirschStoerIntegrator0);
      
      int int2 = graggBulirschStoerIntegrator1.getMaxEvaluations();
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(graggBulirschStoerIntegrator1.equals((Object)graggBulirschStoerIntegrator0));
      assertFalse(graggBulirschStoerIntegrator1.equals((Object)graggBulirschStoerIntegrator2));
      assertEquals(Integer.MAX_VALUE, int2);
      assertEquals(1632.595129362218, graggBulirschStoerIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator1.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator1.getName());
      assertEquals(1264.4529166023, graggBulirschStoerIntegrator1.getMaxStep(), 0.01);
      assertEquals(2107.921, graggBulirschStoerIntegrator1.getMinStep(), 0.01);
      assertNotSame(graggBulirschStoerIntegrator1, graggBulirschStoerIntegrator0);
      assertNotSame(graggBulirschStoerIntegrator1, graggBulirschStoerIntegrator2);
      
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator3 = new GraggBulirschStoerIntegrator(787, (-1097.09994728617), 1264.4529166023, 1000.0);
      assertFalse(graggBulirschStoerIntegrator3.equals((Object)graggBulirschStoerIntegrator2));
      assertFalse(graggBulirschStoerIntegrator3.equals((Object)graggBulirschStoerIntegrator1));
      assertFalse(graggBulirschStoerIntegrator3.equals((Object)graggBulirschStoerIntegrator0));
      assertNotNull(graggBulirschStoerIntegrator3);
      assertEquals(1097.09994728617, graggBulirschStoerIntegrator3.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator3.getName());
      assertEquals(787.0, graggBulirschStoerIntegrator3.getMinStep(), 0.01);
      assertEquals(929.2027004449652, graggBulirschStoerIntegrator3.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator3.getCurrentStepStart(), 0.01);
      
      graggBulirschStoerIntegrator3.clearEventHandlers();
      assertFalse(graggBulirschStoerIntegrator3.equals((Object)graggBulirschStoerIntegrator2));
      assertFalse(graggBulirschStoerIntegrator3.equals((Object)graggBulirschStoerIntegrator1));
      assertFalse(graggBulirschStoerIntegrator3.equals((Object)graggBulirschStoerIntegrator0));
      assertEquals(1097.09994728617, graggBulirschStoerIntegrator3.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator3.getName());
      assertEquals(787.0, graggBulirschStoerIntegrator3.getMinStep(), 0.01);
      assertEquals(929.2027004449652, graggBulirschStoerIntegrator3.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator3.getCurrentStepStart(), 0.01);
      assertNotSame(graggBulirschStoerIntegrator3, graggBulirschStoerIntegrator2);
      assertNotSame(graggBulirschStoerIntegrator3, graggBulirschStoerIntegrator1);
      assertNotSame(graggBulirschStoerIntegrator3, graggBulirschStoerIntegrator0);
      
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(913.38822467651, 1000.0, 0, Integer.MAX_VALUE);
      assertNotNull(dormandPrince853Integrator0);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(1000.0, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(955.7134636890443, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(913.38822467651, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      
      int int3 = dormandPrince853Integrator0.getOrder();
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(8, int3);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(1000.0, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(955.7134636890443, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(913.38822467651, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertNotNull(expandableStatefulODE0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      
      try { 
        graggBulirschStoerIntegrator2.integrate(expandableStatefulODE0, (-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 1
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-828.8966186));
      assertNotNull(threeEighthesIntegrator0);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      
      Collection<EventHandler> collection0 = threeEighthesIntegrator0.getEventHandlers();
      assertNotNull(collection0);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      
      String string0 = threeEighthesIntegrator0.getName();
      assertEquals("3/8", string0);
      assertNotNull(string0);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(325.55024604235, 325.55024604235, 325.55024604235, 325.55024604235);
      assertNotNull(dormandPrince853Integrator0);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      
      dormandPrince853Integrator0.clearEventHandlers();
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      
      dormandPrince853Integrator0.clearStepHandlers();
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      
      int int0 = dormandPrince853Integrator0.getMaxEvaluations();
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(325.55024604235, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(2400.03191475);
      assertNotNull(eulerIntegrator0);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler1).toString();
      double double0 = 0.0;
      BisectionSolver bisectionSolver0 = new BisectionSolver((-684));
      assertNotNull(bisectionSolver0);
      assertEquals((-684.0), bisectionSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, bisectionSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-14, bisectionSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-15, bisectionSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, bisectionSolver0.getMax(), 0.01);
      assertEquals(0.0, bisectionSolver0.getMin(), 0.01);
      
      int int0 = bisectionSolver0.getMaxEvaluations();
      assertEquals(0, int0);
      assertEquals((-684.0), bisectionSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, bisectionSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-14, bisectionSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-15, bisectionSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, bisectionSolver0.getMax(), 0.01);
      assertEquals(0.0, bisectionSolver0.getMin(), 0.01);
      
      eulerIntegrator0.addEventHandler(eventHandler1, 2400.03191475, 0.0, (-684), (UnivariateSolver) bisectionSolver0);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals((-684.0), bisectionSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, bisectionSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-14, bisectionSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-15, bisectionSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, bisectionSolver0.getMax(), 0.01);
      assertEquals(0.0, bisectionSolver0.getMin(), 0.01);
      
      int int1 = 0;
      eulerIntegrator0.clearStepHandlers();
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      
      Collection<EventHandler> collection0 = eulerIntegrator0.getEventHandlers();
      assertFalse(collection0.contains(eventHandler0));
      assertTrue(collection0.contains(eventHandler1));
      assertNotNull(collection0);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      
      eulerIntegrator0.addEventHandler(eventHandler0, 2400.03191475, 2400.03191475, 0);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Euler", eulerIntegrator0.getName());
      
      // Undeclared exception!
      try { 
        eulerIntegrator0.computeDerivatives(2400.03191475, (double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-828.8966186));
      assertNotNull(threeEighthesIntegrator0);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      
      Collection<StepHandler> collection0 = threeEighthesIntegrator0.getStepHandlers();
      assertNotNull(collection0);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, doubleArray0, doubleArray0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(7, doubleArray0.length);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      Collection<EventHandler> collection0 = graggBulirschStoerIntegrator0.getEventHandlers();
      assertFalse(collection0.contains(eventHandler0));
      assertNotNull(collection0);
      assertEquals(7, doubleArray0.length);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      Collection<StepHandler> collection1 = graggBulirschStoerIntegrator0.getStepHandlers();
      assertNotNull(collection1);
      assertEquals(7, doubleArray0.length);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.0, fixedStepHandler0);
      assertNotNull(stepNormalizer0);
      
      stepNormalizer0.init(0.0, doubleArray0, 0.0);
      assertEquals(7, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      assertEquals(7, doubleArray0.length);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      graggBulirschStoerIntegrator0.setStepSizeControl((double) (-476), 0.0, (double) (-476), 3123.93);
      assertEquals(7, doubleArray0.length);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(476.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (-1765.672), 0.0, (-476));
      assertEquals(7, doubleArray0.length);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(476.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      graggBulirschStoerIntegrator0.clearStepHandlers();
      assertEquals(7, doubleArray0.length);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(476.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      graggBulirschStoerIntegrator0.setStabilityCheck(true, 0, 289, 0.0);
      assertEquals(7, doubleArray0.length);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(476.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int0 = graggBulirschStoerIntegrator0.getEvaluations();
      assertEquals(0, int0);
      assertEquals(7, doubleArray0.length);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(476.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int1 = graggBulirschStoerIntegrator0.getMaxEvaluations();
      assertFalse(int1 == int0);
      assertEquals(Integer.MAX_VALUE, int1);
      assertEquals(7, doubleArray0.length);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(476.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      int int2 = graggBulirschStoerIntegrator0.getMaxEvaluations();
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(Integer.MAX_VALUE, int2);
      assertEquals(7, doubleArray0.length);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(476.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      graggBulirschStoerIntegrator0.clearEventHandlers();
      assertEquals(7, doubleArray0.length);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(476.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertArrayEquals(new double[] {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0, 0.0, 1000.0, 0.0);
      assertNotNull(dormandPrince853Integrator0);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(0.0, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(0.0, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, dormandPrince853Integrator0.getMaxStep(), 0.01);
      
      int int3 = dormandPrince853Integrator0.getOrder();
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(8, int3);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(0.0, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(0.0, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, dormandPrince853Integrator0.getMaxStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(4864.63947, 4864.63947, 3.5219323679207912, 3.5219323679207912);
      assertNotNull(dormandPrince853Integrator0);
      assertEquals(4864.63947, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(4864.63947, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(4864.63947, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      
      int int0 = dormandPrince853Integrator0.getEvaluations();
      assertEquals(0, int0);
      assertEquals(4864.63947, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(4864.63947, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(4864.63947, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, 0.0, 0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double[] doubleArray0 = new double[0];
      expandableStatefulODE0.setPrimaryState(doubleArray0);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 0.0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-966.849465861357), (-966.849465861357), (-966.849465861357), (-966.849465861357));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (-966.849465861357));
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double double0 = 1434.1975856;
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(1434.1975856);
      midpointIntegrator0.clearStepHandlers();
      int int0 = (-7);
      midpointIntegrator0.setMaxEvaluations((-7));
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-7), (-7), 1434.1975856, (-7));
      graggBulirschStoerIntegrator0.clearStepHandlers();
      ExpandableStatefulODE expandableStatefulODE0 = null;
      try {
        expandableStatefulODE0 = new ExpandableStatefulODE((FirstOrderDifferentialEquations) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.ExpandableStatefulODE", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double[] doubleArray0 = new double[12];
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(2061.32627, 2061.32627, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.setMaxEvaluations(1);
      dormandPrince54Integrator0.getOrder();
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(2703.0061, 5, doubleArray0, doubleArray0);
      highamHall54Integrator0.getOrder();
      int int0 = highamHall54Integrator0.getOrder();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(325.55024604235, 325.55024604235, 325.55024604235, 325.55024604235);
      dormandPrince853Integrator0.clearStepHandlers();
      int int0 = dormandPrince853Integrator0.getMaxEvaluations();
      assertEquals(Integer.MAX_VALUE, int0);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 325.55024604235;
      doubleArray0[4] = 325.55024604235;
      doubleArray0[5] = (double) Integer.MAX_VALUE;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(Integer.MAX_VALUE, 0.0, doubleArray0, doubleArray0);
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      graggBulirschStoerIntegrator0.addStepHandler(dummyStepHandler0);
      Collection<EventHandler> collection0 = graggBulirschStoerIntegrator0.getEventHandlers();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-4156.9));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-4156.9), (-1034.380201079), 0.0);
      Ceil ceil0 = new Ceil();
      AllowedSolution allowedSolution0 = AllowedSolution.LEFT_SIDE;
      illinoisSolver0.solve(5, (UnivariateFunction) ceil0, 0.0, (double) 5, (-2449.16377321013), allowedSolution0);
      classicalRungeKuttaIntegrator0.clearStepHandlers();
      classicalRungeKuttaIntegrator0.addEventHandler(eventHandler0, (-4156.9), (-1034.380201079), 2759, (UnivariateSolver) illinoisSolver0);
      ceil0.value(0.0);
      classicalRungeKuttaIntegrator0.clearStepHandlers();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-4156.9);
      doubleArray0[1] = (-4156.9);
      doubleArray0[2] = (-2449.16377321013);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-0.5);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-1034.380201079);
      doubleArray0[7] = (-1034.380201079);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-0.5), 0.0, doubleArray0, doubleArray0);
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler1, 0.0, 0.0, 2759, (UnivariateSolver) illinoisSolver0);
      graggBulirschStoerIntegrator0.setControlFactors((-2980.728), 0.0, 0.0, 0.0);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(775.6398317, 775.6398317, doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.computeDerivatives((-274.94627595662), doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1017.80885188928;
      doubleArray0[1] = 1017.80885188928;
      doubleArray0[2] = 1017.80885188928;
      doubleArray0[3] = 1017.80885188928;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1017.80885188928, 1017.80885188928, doubleArray0, doubleArray0);
      highamHall54Integrator0.getOrder();
      // Undeclared exception!
      try { 
        highamHall54Integrator0.computeDerivatives(0.0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(0.0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.FIRST;
      StepNormalizer stepNormalizer0 = new StepNormalizer(Double.NaN, fixedStepHandler0, stepNormalizerBounds0);
      eulerIntegrator0.addStepHandler(stepNormalizer0);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(775.6398317, 775.6398317, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.addEventHandler((EventHandler) null, 775.6398317, 775.6398317, 0);
      int int0 = graggBulirschStoerIntegrator0.getEvaluations();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(Double.NaN);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      MullerSolver2 mullerSolver2_0 = new MullerSolver2(0.0);
      eulerIntegrator0.addEventHandler(eventHandler0, Double.NaN, 1.0, 0, (UnivariateSolver) mullerSolver2_0);
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      EventHandler eventHandler2 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      SecantSolver secantSolver0 = new SecantSolver((-1001), 242.28349177525817);
      eulerIntegrator0.addEventHandler(eventHandler2, 0.0, (-4521408.0), (-1001), (UnivariateSolver) secantSolver0);
      eulerIntegrator0.addEventHandler(eventHandler1, Double.NaN, Double.NaN, 3133);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 927.44314896;
      doubleArray0[1] = (-1962.29162910036);
      doubleArray0[2] = 1118.2536111;
      doubleArray0[3] = 1118.2536111;
      doubleArray0[4] = (-1962.29162910036);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 927.44314896;
      doubleArray1[1] = 1118.2536111;
      doubleArray1[2] = 1118.2536111;
      doubleArray1[3] = 1118.2536111;
      doubleArray1[4] = 1118.2536111;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1962.29162910036), 1118.2536111, doubleArray0, doubleArray1);
      assertEquals(1118.2536111, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
  }
}
