/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 01 11:23:46 GMT 2021
 */

package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.apache.commons.math3.analysis.solvers.MullerSolver;
import org.apache.commons.math3.analysis.solvers.RegulaFalsiSolver;
import org.apache.commons.math3.analysis.solvers.RiddersSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondaryEquations;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator;
import org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.GillIntegrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator;
import org.apache.commons.math3.ode.sampling.DummyStepHandler;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.StepHandler;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.apache.commons.math3.ode.sampling.StepNormalizerBounds;
import org.apache.commons.math3.ode.sampling.StepNormalizerMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegrator_ESTest extends AbstractIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(2469.75);
      double[] doubleArray0 = new double[0];
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double0 = 1000.0;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1.4918304783038634), 1805.16800794, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double double1 = 1049.1779569959695;
      HighamHall54Integrator highamHall54Integrator1 = new HighamHall54Integrator((-1.4918304783038634), 1049.1779569959695, doubleArray0, doubleArray0);
      try { 
        highamHall54Integrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-2522.02935), doubleArray0, (-2522.02935), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(2469.75);
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1805.16800794, 0.0, doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      dormandPrince853Integrator0.addEventHandler(eventHandler0, 0.0, 1000.0, 0);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 1805.16800794, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double double0 = 1049.1779569959695;
      HighamHall54Integrator highamHall54Integrator1 = new HighamHall54Integrator(0.0, 1049.1779569959695, doubleArray0, doubleArray0);
      try { 
        highamHall54Integrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-2522.02935), doubleArray0, (-2522.02935), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          double double0 = 5.333333333333333;
          DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(5.333333333333333, 5.333333333333333, 0.0, 0.0);
          EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
          double double1 = 3238.84821;
          double double2 = 0.28670501708984375;
          double double3 = 0.0;
          DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(3238.84821, 0.28670501708984375, 0.0, 0.0);
          dormandPrince54Integrator0.setInitialStepSize(0.28670501708984375);
          double[] doubleArray0 = new double[0];
          DormandPrince54Integrator dormandPrince54Integrator1 = new DormandPrince54Integrator(1049.33739501, 3238.84821, doubleArray0, doubleArray0);
          dormandPrince54Integrator1.setMaxEvaluations(0);
          dormandPrince54Integrator1.setInitialStepSize(0.0);
          dormandPrince54Integrator1.getOrder();
          SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
          doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
          FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
          ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
          ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(5.333333333333333);
          double double4 = (-153.0);
          threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 3238.84821, doubleArray0, (-153.0), doubleArray0);
          double double5 = 2231.5013029762226;
          // Undeclared exception!
          threeEighthesIntegrator0.integrate(expandableStatefulODE0, double5);
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(2469.75);
      classicalRungeKuttaIntegrator0.getCurrentStepStart();
      classicalRungeKuttaIntegrator0.getEvaluations();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(3348.0, 3.8288623079292884E293, 225.40788872398508, 3.8288623079292884E293);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      RiddersSolver riddersSolver0 = new RiddersSolver(3348.0, (-3350.640729218378));
      riddersSolver0.getMaxEvaluations();
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 3.8288623079292884E293, 2338.487502643768, 2139470649, (UnivariateSolver) riddersSolver0);
      graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
      graggBulirschStoerIntegrator0.getName();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1319.347248072);
      doubleArray0[1] = (double) 2139470649;
      doubleArray0[2] = 2338.487502643768;
      doubleArray0[3] = (-1922.07303);
      doubleArray0[4] = 3.8288623079292884E293;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 3.580367440214378E148;
      doubleArray0[7] = 3.580367440214378E148;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1922.07303), 1.0, doubleArray0, doubleArray0);
      highamHall54Integrator0.getOrder();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(2469.75);
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1805.16800794, (-0.04305000275396923), doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1029).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(2469.75, 2886.949551, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      HighamHall54Integrator highamHall54Integrator1 = new HighamHall54Integrator(900.3607073562321, 2469.75, doubleArray0, doubleArray0);
      highamHall54Integrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter1, 1000.0, doubleArray0, 1805.16800794, doubleArray0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-1130.1), (-1.0), (-1.0), (-1130.1));
      // Undeclared exception!
      dormandPrince54Integrator0.integrate(expandableStatefulODE0, (-1130.1));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(5.333333333333333, 5.333333333333333, 0.0, 0.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(3238.84821, 0.28670501708984375, 0.0, 0.0);
      dormandPrince54Integrator0.setInitialStepSize(0.28670501708984375);
      double[] doubleArray0 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator1 = new DormandPrince54Integrator(1049.33739501, 3238.84821, doubleArray0, doubleArray0);
      dormandPrince54Integrator1.setMaxEvaluations(0);
      dormandPrince54Integrator1.setInitialStepSize(0.0);
      dormandPrince54Integrator1.getOrder();
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-2.9134931730784303E-8), 1.9442210982008953E191, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-2.9134931730784303E-8), doubleArray0, 0.0, doubleArray0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        dormandPrince54Integrator1.integrate(expandableStatefulODE0, 1699.484837785992);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-2783.7485816));
      threeEighthesIntegrator0.setMaxEvaluations(2);
      threeEighthesIntegrator0.getName();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        threeEighthesIntegrator0.integrate(expandableStatefulODE0, 2.9134931730784303E-8);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (2) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(99.16);
      // Undeclared exception!
      try { 
        threeEighthesIntegrator0.integrate((ExpandableStatefulODE) null, (-7.08313012515209E-155));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double double0 = 0.0;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(5.333333333333333, 5.333333333333333, 0.0, 0.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double1 = 3238.84821;
      double double2 = 0.28670501708984375;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(3238.84821, 0.28670501708984375, 0.0, 0.0);
      dormandPrince54Integrator0.setInitialStepSize(0.28670501708984375);
      double[] doubleArray0 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator1 = new DormandPrince54Integrator(1049.33739501, 3238.84821, doubleArray0, doubleArray0);
      dormandPrince54Integrator1.setMaxEvaluations(0);
      dormandPrince54Integrator0.setInitialStepSize((-2502.904186422));
      dormandPrince54Integrator1.setMaxGrowth(0.28670501708984375);
      dormandPrince54Integrator1.getOrder();
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1049.33739501;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-1760.36);
      try { 
        dormandPrince54Integrator1.computeDerivatives(1165.2132, doubleArray1, doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double double0 = 0.0;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(5.333333333333333, 5.333333333333333, 0.0, 0.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(3238.84821, 0.28670501708984375, 0.0, 0.0);
      dormandPrince54Integrator0.setInitialStepSize(0.28670501708984375);
      double[] doubleArray0 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator1 = new DormandPrince54Integrator(1049.33739501, 3238.84821, doubleArray0, doubleArray0);
      dormandPrince54Integrator1.setMaxEvaluations(0);
      dormandPrince54Integrator0.setInitialStepSize((-2502.904186422));
      dormandPrince54Integrator1.setMaxGrowth(0.28670501708984375);
      dormandPrince54Integrator1.getOrder();
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1049.33739501;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = (-1760.36);
      doubleArray1[4] = (double) 5;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 0.28670501708984375, doubleArray1, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      try { 
        highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2338.487502643768, doubleArray0, 3238.84821, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 5
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 0.0, 387.81, 0.0);
      dormandPrince54Integrator0.setInitialStepSize(2097.2);
      dormandPrince54Integrator0.setMaxEvaluations(0);
      dormandPrince54Integrator0.setInitialStepSize(387.81);
      dormandPrince54Integrator0.setMaxGrowth(4.961148056969105E-78);
      dormandPrince54Integrator0.setMaxEvaluations(33);
      dormandPrince54Integrator0.setInitialStepSize(4.547473508864641E-10);
      dormandPrince54Integrator0.setMaxGrowth(2097.2);
      dormandPrince54Integrator0.getOrder();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-6.972256643013266E-8);
      doubleArray0[1] = 4.961148056969105E-78;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-6.972256643013266E-8), 0, doubleArray0, doubleArray0);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-955.7067801), Double.NaN, 2020.75661, 4.547473508864641E-10);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      dormandPrince853Integrator0.addEventHandler(eventHandler0, (-1458.8160872746), (double) 0, 1463, (UnivariateSolver) regulaFalsiSolver0);
      dormandPrince853Integrator0.getName();
      dormandPrince853Integrator0.getEvaluations();
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, (-2430.357), doubleArray0, doubleArray0);
      highamHall54Integrator0.getOrder();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 2
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(2469.75);
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1805.16800794, (-0.04305000275396923), doubleArray0, doubleArray0);
      DormandPrince853Integrator dormandPrince853Integrator1 = new DormandPrince853Integrator(632.205594, 1000.0, 117.7129208, (-1537.9));
      dormandPrince853Integrator1.setInitialStepSize(4231.194399208);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 4.547473508864641E-10;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1805.16800794, 4231.194399208, doubleArray1, doubleArray0);
      double double0 = (-649.5023115102);
      try { 
        highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-649.5023115102), doubleArray0, 1805.16800794, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double double0 = 3527.420952489;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 3527.420952489;
      doubleArray0[1] = (-1746.932858);
      double double1 = 514.7514526935763;
      doubleArray0[2] = 514.7514526935763;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 4056.963450678161;
      double[] doubleArray1 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 3527.420952489, doubleArray0, doubleArray1);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double double2 = 3776.5;
      double double3 = 2188.0621569;
      highamHall54Integrator0.setStepSizeControl(1.0, 0.0, doubleArray0, doubleArray0);
      double[] doubleArray2 = new double[4];
      doubleArray2[0] = 3348.0;
      doubleArray2[1] = 0.0;
      doubleArray2[2] = 3527.420952489;
      doubleArray2[3] = (-2414.902515583936);
      try { 
        highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-2414.902515583936), doubleArray1, 4.547473508864641E-10, doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double double0 = 170.5537123972149;
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(170.5537123972149, 0.0, 170.5537123972149, 170.5537123972149);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      // Undeclared exception!
      highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 170.5537123972149, doubleArray0, 0.0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DummyStepHandler.getInstance();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-3451.932340637), 805.16800794, 1744.406326635, 7267.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(354).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime((-3451.932340637));
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 2318.401965686981);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minimal step size (3.45E03) reached, integration needs 1.70E03
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double double0 = 170.5537123972149;
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(170.5537123972149, 170.5537123972149, 170.5537123972149, 170.5537123972149);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      try { 
        highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 170.5537123972149, doubleArray0, 170.5537123972149, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(5.333333333333333, 5.333333333333333, 0.0, 0.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(3238.84821, 0.28670501708984375, 0.0, 0.0);
      dormandPrince54Integrator0.setInitialStepSize(0.28670501708984375);
      double[] doubleArray0 = new double[0];
      DormandPrince54Integrator dormandPrince54Integrator1 = new DormandPrince54Integrator(1049.33739501, 3238.84821, doubleArray0, doubleArray0);
      dormandPrince54Integrator1.setMaxEvaluations(0);
      dormandPrince54Integrator0.setInitialStepSize((-2502.904186422));
      dormandPrince54Integrator1.setMaxGrowth(0.28670501708984375);
      dormandPrince54Integrator0.getOrder();
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 0.0, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      // Undeclared exception!
      highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 3348.0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1000.0;
      doubleArray0[1] = 2335.9492224;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(2335.9492224, 1000.0, doubleArray0, doubleArray0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.LAST;
      StepNormalizer stepNormalizer0 = new StepNormalizer(3.1660099222737955E-7, fixedStepHandler0, stepNormalizerMode0, stepNormalizerBounds0);
      highamHall54Integrator0.addStepHandler(stepNormalizer0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(7).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      highamHall54Integrator0.setMaxGrowth(3.1660099222737955E-7);
      try { 
        highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 3776.5, doubleArray0, 1000.0, (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 14
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(5.6843418860808015E-11);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 900.3607073562321;
      doubleArray0[1] = 5.6843418860808015E-11;
      doubleArray0[2] = 900.3607073562321;
      doubleArray0[3] = 5.6843418860808015E-11;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(900.3607073562321, 900.3607073562321, doubleArray0, doubleArray0);
      FirstOrderDifferentialEquations firstOrderDifferentialEquations0 = null;
      // Undeclared exception!
      try { 
        highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) null, 900.3607073562321, doubleArray0, 1000.0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(4056.963450678161, 4056.963450678161, 0.0, 4056.963450678161);
      dormandPrince853Integrator0.getEvaluations();
      dormandPrince853Integrator0.getName();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(4056.963450678161, 4056.963450678161, 0.0, 4056.963450678161);
      dormandPrince853Integrator0.getName();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(Double.NaN);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = Double.NaN;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(Double.NaN, Double.NaN, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        dormandPrince853Integrator0.integrate(expandableStatefulODE0, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 3
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double double0 = 749.6676;
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 624.969641361;
      doubleArray0[1] = 749.6676;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(749.6676, 749.6676, doubleArray0, doubleArray0);
      double double1 = 2.9590395068826316E-8;
      double double2 = 1760.4801;
      dormandPrince853Integrator0.addEventHandler((EventHandler) null, 1760.4801, (double) 5, 5);
      dormandPrince853Integrator0.getStepHandlers();
      dormandPrince853Integrator0.getStepHandlers();
      dormandPrince853Integrator0.clearStepHandlers();
      dormandPrince853Integrator0.getEventHandlers();
      FirstOrderConverter firstOrderConverter0 = null;
      try {
        firstOrderConverter0 = new FirstOrderConverter((SecondOrderDifferentialEquations) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.FirstOrderConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double double0 = 170.5537123972149;
      double[] doubleArray0 = new double[0];
      int int0 = 133;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(133, 170.5537123972149, doubleArray0, doubleArray0);
      int int1 = 5;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      dormandPrince853Integrator0.addEventHandler(eventHandler0, 2.9590395068826316E-8, (double) 5, 133);
      dormandPrince853Integrator0.getStepHandlers();
      dormandPrince853Integrator0.getStepHandlers();
      dormandPrince853Integrator0.clearStepHandlers();
      dormandPrince853Integrator0.getEventHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      dormandPrince853Integrator0.integrate(expandableStatefulODE0, (-1241.18194049));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1994.086046390705));
      gillIntegrator0.getCurrentSignedStepsize();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = Double.NaN;
      gillIntegrator0.clearEventHandlers();
      doubleArray0[2] = 519.337623353;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      gillIntegrator0.getMaxEvaluations();
      gillIntegrator0.addEventHandler(eventHandler0, 0.0, 0.0, (-1017));
      doubleArray0[3] = Double.NaN;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-956.9), Double.NaN, doubleArray0, doubleArray0);
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      highamHall54Integrator0.addEventHandler(eventHandler1, (-956.9), 519.337623353, 0);
      highamHall54Integrator0.setStepSizeControl(Double.NaN, Double.NaN, 15.279233632882423, 0.0);
      highamHall54Integrator0.getOrder();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1911.0, (-1017), 0.0, Double.NaN);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 0.0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(1.1368683772161603E-10);
      threeEighthesIntegrator0.getMaxEvaluations();
      threeEighthesIntegrator0.getName();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1000.0, 1000.0, 1000.0, (-1051.72));
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1051.72);
      doubleArray0[1] = 295.45068497;
      doubleArray0[2] = 295.45068497;
      doubleArray0[3] = 1000.0;
      graggBulirschStoerIntegrator0.setStepSizeControl(295.45068497, 295.45068497, doubleArray0, doubleArray0);
      boolean boolean0 = true;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.getStepHandlers();
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (-771.2102257774), 295.45068497, 182);
      graggBulirschStoerIntegrator0.clearStepHandlers();
      int int0 = 5;
      int int1 = (-1352);
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.initializeStep(true, (-1352), doubleArray0, 1000.0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 0.0, 387.81, 0.0);
      dormandPrince54Integrator0.setInitialStepSize(2097.2);
      dormandPrince54Integrator0.setMaxEvaluations(0);
      dormandPrince54Integrator0.setInitialStepSize(387.81);
      dormandPrince54Integrator0.setMaxGrowth(0.0);
      dormandPrince54Integrator0.getOrder();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 387.81;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 387.81;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 5, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      SecondaryEquations secondaryEquations0 = mock(SecondaryEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondaryEquations0).getDimension();
      expandableStatefulODE0.addSecondaryEquations(secondaryEquations0);
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 387.81);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 3
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(2.2737367544323206E-10);
      threeEighthesIntegrator0.setMaxEvaluations(240);
      threeEighthesIntegrator0.getName();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(617.0);
      threeEighthesIntegrator0.addEventHandler((EventHandler) null, (-873.376447), (-873.376447), 0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[8];
      threeEighthesIntegrator0.getStepHandlers();
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 617.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 617.0;
      doubleArray0[4] = 617.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 617.0;
      try { 
        threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, (-1.8379759110070617), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1000.0;
      doubleArray0[1] = 2335.9492224;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(2335.9492224, 1000.0, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      try { 
        highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 3776.5, doubleArray0, 1000.0, (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(2469.75);
      threeEighthesIntegrator0.clearStepHandlers();
      threeEighthesIntegrator0.getName();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(5, 0.0, 6.283185307179586, 6.283185307179586, 0.0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(862.582902845021, (-989.939603387), 0.0, 0.10416666666666667);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 6.283185307179586;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.10416666666666667;
      doubleArray0[3] = 0.10416666666666667;
      doubleArray0[4] = 0.10416666666666667;
      graggBulirschStoerIntegrator0.setStepSizeControl(0.0, (-321.6492664), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.getEventHandlers();
      graggBulirschStoerIntegrator0.setStabilityCheck(true, 5, 5, 5);
      graggBulirschStoerIntegrator0.setOrderControl(986, (-688.97208), (-359.2721791));
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1.0, 0.0, (-2246.88238835691), 419.2804019);
      highamHall54Integrator0.clearStepHandlers();
      highamHall54Integrator0.getOrder();
      highamHall54Integrator0.getStepHandlers();
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.computeDerivatives(0.0, doubleArray1, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 291.715;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(291.715, 291.715, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.clearEventHandlers();
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      DummyStepHandler.getInstance();
      dormandPrince853Integrator0.addStepHandler(dummyStepHandler0);
      int int0 = 5;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 291.715;
      doubleArray1[1] = 772.7135287;
      doubleArray1[2] = 291.715;
      doubleArray1[3] = (double) 5;
      doubleArray1[4] = 291.715;
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(5, 291.715, 5, doubleArray1, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        adamsMoultonIntegrator0.integrate(expandableStatefulODE0, 1590.3975836);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 5
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(7096.446287602785);
      threeEighthesIntegrator0.getEventHandlers();
      threeEighthesIntegrator0.getName();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double double0 = 0.0;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(5.333333333333333, 5.333333333333333, 0.0, 0.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      dormandPrince853Integrator0.addEventHandler(eventHandler0, (-741.975163596232), 0.0, 0);
      dormandPrince853Integrator0.getStepHandlers();
      dormandPrince853Integrator0.getStepHandlers();
      dormandPrince853Integrator0.clearStepHandlers();
      dormandPrince853Integrator0.getEventHandlers();
      double double1 = (-0.05);
      double double2 = (-5183.9377307);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 0.0;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      dormandPrince853Integrator0.integrate(expandableStatefulODE0, (-1158.09058123088));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double double0 = (-23.075189479796);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 867.0;
      doubleArray0[1] = (-3834.182);
      doubleArray0[2] = (-0.04432804463693693);
      doubleArray0[3] = 867.0;
      doubleArray0[4] = (-23.075189479796);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-23.075189479796), 867.0, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      graggBulirschStoerIntegrator0.getEventHandlers();
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.computeDerivatives((-2172.1850367367474), doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(624.969641361);
      threeEighthesIntegrator0.clearEventHandlers();
      threeEighthesIntegrator0.getName();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(Double.NaN);
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      classicalRungeKuttaIntegrator0.addStepHandler(dummyStepHandler0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 0.0, 0.0, 0.0);
      dormandPrince54Integrator0.setInitialStepSize(0.0);
      dormandPrince54Integrator0.setMaxGrowth(0.0);
      dormandPrince54Integrator0.addEventHandler((EventHandler) null, (double) (-102), 0.0, 915);
      dormandPrince54Integrator0.setMaxEvaluations((-102));
      dormandPrince54Integrator0.setMaxEvaluations(0);
      dormandPrince54Integrator0.setInitialStepSize(0.0);
      dormandPrince54Integrator0.setMaxGrowth(0.0);
      dormandPrince54Integrator0.getOrder();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 5;
      doubleArray0[2] = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 5, doubleArray0, doubleArray0);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.6227883121424718, 0.0, doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(2371.1287810409, 0.0, doubleArray0, doubleArray0);
      highamHall54Integrator0.clearEventHandlers();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 485.6738, 0.0, 0.0);
      StepHandler stepHandler0 = null;
      graggBulirschStoerIntegrator0.addStepHandler((StepHandler) null);
      graggBulirschStoerIntegrator0.getStepHandlers();
      MullerSolver mullerSolver0 = new MullerSolver();
      graggBulirschStoerIntegrator0.addEventHandler((EventHandler) null, 1.3333333333333333, 3.0, 0, (UnivariateSolver) mullerSolver0);
      highamHall54Integrator0.setSafety(1000.0);
      highamHall54Integrator0.addEventHandler((EventHandler) null, (-1597.5173), 0.8888888888888888, (-1115), (UnivariateSolver) mullerSolver0);
      graggBulirschStoerIntegrator0.clearEventHandlers();
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) (-1115);
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 485.6738;
      doubleArray1[3] = (double) 0;
      // Undeclared exception!
      try { 
        highamHall54Integrator0.initializeStep(true, 0, doubleArray0, 0, doubleArray0, doubleArray0, doubleArray1, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, (-3451.932340637), (-3451.932340637), Double.NaN);
      int int0 = (-3149);
      int int1 = Integer.MAX_VALUE;
      graggBulirschStoerIntegrator0.setStabilityCheck(true, Integer.MAX_VALUE, (-3149), 0.0);
      graggBulirschStoerIntegrator0.setOrderControl((-3149), (-3451.932340637), (-3451.932340637));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double double0 = 1259.576069;
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 1259.576069);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(7096.446287602785);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      threeEighthesIntegrator0.integrate(expandableStatefulODE0, 7096.446287602785);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(2.2737367544323206E-10);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2.2737367544323206E-10, 2.2737367544323206E-10, Double.NaN, 2.2737367544323206E-10);
      graggBulirschStoerIntegrator0.getCurrentStepStart();
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.computeDerivatives(2123.781, (double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-982.0);
      doubleArray0[1] = (-982.0);
      doubleArray0[2] = (-982.0);
      doubleArray0[3] = (-982.0);
      doubleArray0[4] = (-982.0);
      doubleArray0[5] = (-982.0);
      doubleArray0[6] = (-982.0);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-982.0), (-982.0), doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        dormandPrince54Integrator0.computeDerivatives((-982.0), doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-353.0));
      threeEighthesIntegrator0.getStepHandlers();
      threeEighthesIntegrator0.getEventHandlers();
      threeEighthesIntegrator0.getName();
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 903.892;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 0.0, 903.892, 0.0);
      highamHall54Integrator0.getStepHandlers();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 903.892, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      int int0 = 2643;
      expandableStatefulODE0.computeDerivatives(0.0, doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        expandableStatefulODE0.getSecondaryStateDot(2643);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2643, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-745.8839));
      threeEighthesIntegrator0.getName();
      double double0 = threeEighthesIntegrator0.getCurrentSignedStepsize();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 0.0, 0.0, 0.0);
      dormandPrince54Integrator0.setStepSizeControl(0.0, 0.0, 0.0, 0.0);
      dormandPrince54Integrator0.getOrder();
      dormandPrince54Integrator0.getCurrentSignedStepsize();
      dormandPrince54Integrator0.getOrder();
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(5, 27.94888452941996, 0.0, 5);
      dormandPrince853Integrator0.getOrder();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 5;
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
      try { 
        dormandPrince54Integrator0.initializeStep(true, 0, doubleArray0, 0, doubleArray1, doubleArray0, doubleArray0, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(2.2737367544323206E-10);
      threeEighthesIntegrator0.getName();
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
  }
}
