/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 13:45:13 GMT 2021
 */

package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.function.Gaussian;
import org.apache.commons.math3.analysis.solvers.BisectionSolver;
import org.apache.commons.math3.analysis.solvers.IllinoisSolver;
import org.apache.commons.math3.analysis.solvers.MullerSolver2;
import org.apache.commons.math3.analysis.solvers.PegasusSolver;
import org.apache.commons.math3.analysis.solvers.RegulaFalsiSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator;
import org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator;
import org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.EulerIntegrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.nonstiff.MidpointIntegrator;
import org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.StepHandler;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.apache.commons.math3.ode.sampling.StepNormalizerMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegrator_ESTest extends AbstractIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(0.0);
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 1000.0, doubleArray0, doubleArray0);
      DormandPrince853Integrator dormandPrince853Integrator1 = new DormandPrince853Integrator(0.0, (-1594.9776186814224), doubleArray0, doubleArray0);
      DormandPrince853Integrator dormandPrince853Integrator2 = new DormandPrince853Integrator((-962.48341936053), 0.0, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-2010.6856));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter1, (double) (-1606), doubleArray0, 1934.56374, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      threeEighthesIntegrator0.addEventHandler(eventHandler0, 1934.56374, 2.4, 2097);
      // Undeclared exception!
      threeEighthesIntegrator0.integrate(expandableStatefulODE0, 0.5844172239303589);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double double0 = 1.0;
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(1.0);
      classicalRungeKuttaIntegrator0.getEventHandlers();
      LinkedList<StepHandler> linkedList0 = new LinkedList<StepHandler>();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizer stepNormalizer0 = new StepNormalizer(3339.734982856685, fixedStepHandler0, stepNormalizerMode0);
      classicalRungeKuttaIntegrator0.addStepHandler(stepNormalizer0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations2 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations2).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations2);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter1);
      expandableStatefulODE0.getCompleteState();
      classicalRungeKuttaIntegrator0.integrate(expandableStatefulODE0, 1.0);
      double double1 = 4080.6;
      double double2 = 0.5893045663833618;
      double double3 = 2254.0;
      double double4 = (-1060.4947554092);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(double1, double2, double3, double4);
      int int0 = 2146826114;
      dormandPrince853Integrator0.setMaxEvaluations(int0);
      LinkedList<EventHandler> linkedList1 = new LinkedList<EventHandler>();
      double double5 = 1.2612435745231905E181;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(double2, double3, double5, double2);
      double double6 = 0.0;
      graggBulirschStoerIntegrator0.setControlFactors(double1, double6, double0, double0);
      dormandPrince853Integrator0.getEvaluations();
      graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double double0 = 1.0;
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(1.0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      StepNormalizer stepNormalizer0 = new StepNormalizer(1.0, fixedStepHandler0, stepNormalizerMode0);
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(1.0);
      classicalRungeKuttaIntegrator0.addStepHandler(stepNormalizer0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double double1 = (-586.1);
      // Undeclared exception!
      classicalRungeKuttaIntegrator0.integrate(expandableStatefulODE0, double1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(1.0);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      threeEighthesIntegrator0.addEventHandler(eventHandler0, (double) 1191, (double) 1191, 1191, (UnivariateSolver) regulaFalsiSolver0);
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 1191, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setOrderControl(1872, 963.48341936053, 1872);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1191).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      threeEighthesIntegrator0.integrate(expandableStatefulODE0, 1.0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(0.0);
      double double0 = 0.5844172239303589;
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 1000.0, doubleArray0, doubleArray0);
      DormandPrince853Integrator dormandPrince853Integrator1 = new DormandPrince853Integrator((-962.48341936053), 0.0, doubleArray0, doubleArray0);
      int int0 = 2097;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      double double1 = (-43.291571218);
      dormandPrince853Integrator1.addEventHandler(eventHandler0, (-43.291571218), 0.5844172239303589, (-1606));
      dormandPrince853Integrator1.setMaxEvaluations(2097);
      dormandPrince853Integrator0.getCurrentSignedStepsize();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      try { 
        dormandPrince853Integrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1097.0, doubleArray0, 0.5301685333251953, doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (2,097) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(1.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(857).when(secondOrderDifferentialEquations0).getDimension();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      threeEighthesIntegrator0.addEventHandler(eventHandler0, 2780.63098450254, 1.0, 857);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      threeEighthesIntegrator0.integrate(expandableStatefulODE0, 1.0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-665.991697));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      threeEighthesIntegrator0.addEventHandler(eventHandler0, (-665.991697), (-665.991697), 2145746201);
      // Undeclared exception!
      threeEighthesIntegrator0.integrate(expandableStatefulODE0, 1934.56374);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double double0 = 3843.0;
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(3843.0);
      int int0 = 1093;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1093).when(secondOrderDifferentialEquations0).getDimension();
      classicalRungeKuttaIntegrator0.getStepHandlers();
      double double1 = 1.334449995534113E-7;
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizer stepNormalizer0 = new StepNormalizer(1.334449995534113E-7, (FixedStepHandler) null, stepNormalizerMode0);
      classicalRungeKuttaIntegrator0.addStepHandler(stepNormalizer0);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      try { 
        classicalRungeKuttaIntegrator0.integrate(expandableStatefulODE0, 3843.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.sampling.StepNormalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double double0 = 3843.0;
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(3843.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1093).when(secondOrderDifferentialEquations0).getDimension();
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizer stepNormalizer0 = new StepNormalizer(1.334449995534113E-7, (FixedStepHandler) null, stepNormalizerMode0);
      classicalRungeKuttaIntegrator0.addStepHandler(stepNormalizer0);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      try { 
        classicalRungeKuttaIntegrator0.integrate(expandableStatefulODE0, 3843.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.sampling.StepNormalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(0.0);
      double double0 = 1000.0;
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 1000.0, doubleArray0, doubleArray0);
      double double1 = (-962.48341936053);
      DormandPrince853Integrator dormandPrince853Integrator1 = new DormandPrince853Integrator((-962.48341936053), 0.0, doubleArray0, doubleArray0);
      dormandPrince853Integrator1.setMaxEvaluations(2097);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      try { 
        dormandPrince853Integrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 540.2175827760697, doubleArray0, 0.0, doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (2,097) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(0.0);
      double double0 = 1000.0;
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 1000.0, doubleArray0, doubleArray0);
      DormandPrince853Integrator dormandPrince853Integrator1 = new DormandPrince853Integrator((-962.48341936053), 0.0, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double double1 = 3242.380601884499;
      // Undeclared exception!
      dormandPrince853Integrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) 2097, doubleArray0, 3242.380601884499, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(0.0);
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 1000.0, doubleArray0, doubleArray0);
      double double0 = (-962.48341936053);
      DormandPrince853Integrator dormandPrince853Integrator1 = new DormandPrince853Integrator((-962.48341936053), 0.0, doubleArray0, doubleArray0);
      int int0 = 2097;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      int int1 = (-1606);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(1000.0);
      try { 
        threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1000.0, doubleArray0, 1000.0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(0.0);
      double double0 = 0.5844172239303589;
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 1000.0, doubleArray0, doubleArray0);
      DormandPrince853Integrator dormandPrince853Integrator1 = new DormandPrince853Integrator((-962.48341936053), 0.0, doubleArray0, doubleArray0);
      int int0 = 2097;
      dormandPrince853Integrator1.setMaxEvaluations(2097);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      // Undeclared exception!
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.5844172239303589, doubleArray0, 540.802, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.6;
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 2289.05364;
      doubleArray1[1] = 1000.0;
      doubleArray1[2] = 1000.0;
      doubleArray1[3] = 1000.0;
      doubleArray1[4] = 0.6;
      doubleArray1[5] = 0.6;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2289.05364, 0.6, doubleArray1, doubleArray1);
      dormandPrince853Integrator0.setMaxEvaluations(707);
      DormandPrince853Integrator dormandPrince853Integrator1 = new DormandPrince853Integrator(1000.0, 1215.988543091036, 0.6, 0.6379399299621582);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      PegasusSolver pegasusSolver0 = new PegasusSolver(3452.3287, 0.1751343309879303, 0.6);
      dormandPrince853Integrator1.addEventHandler(eventHandler0, 4080.6, 1000.0, 707, (UnivariateSolver) pegasusSolver0);
      dormandPrince853Integrator1.getEventHandlers();
      dormandPrince853Integrator1.getEvaluations();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double double0 = 3843.0;
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(3843.0);
      int int0 = 750;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(750).when(secondOrderDifferentialEquations0).getDimension();
      classicalRungeKuttaIntegrator0.getEventHandlers();
      LinkedList<StepHandler> linkedList0 = new LinkedList<StepHandler>();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime((-237.6));
      // Undeclared exception!
      classicalRungeKuttaIntegrator0.integrate(expandableStatefulODE0, 3843.0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-665.991697));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      threeEighthesIntegrator0.addEventHandler(eventHandler0, (-665.991697), (-665.991697), 2145746201);
      expandableStatefulODE0.setTime(9.56881327374431E-100);
      threeEighthesIntegrator0.integrate(expandableStatefulODE0, 1934.56374);
      threeEighthesIntegrator0.getMaxEvaluations();
      threeEighthesIntegrator0.getCurrentSignedStepsize();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-1.0));
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1.0), 1406.3, 1406.3, (-1.0));
      dormandPrince853Integrator0.getMaxEvaluations();
      dormandPrince853Integrator0.getOrder();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1406.3;
      doubleArray0[1] = (double) 8;
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (double) 8;
      doubleArray0[4] = (double) Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) null, (double) 8, doubleArray0, 1096.4698314666748, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double double0 = (-2803.55025704876);
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-2803.55025704876));
      threeEighthesIntegrator0.clearStepHandlers();
      threeEighthesIntegrator0.getEvaluations();
      threeEighthesIntegrator0.getCurrentStepStart();
      threeEighthesIntegrator0.getEventHandlers();
      double double1 = 1706.81474;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1706.81474;
      doubleArray0[1] = Double.NaN;
      double double2 = 0.0;
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(0.0);
      // Undeclared exception!
      try { 
        classicalRungeKuttaIntegrator0.integrate((ExpandableStatefulODE) null, (-2803.55025704876));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-2803.55025704876));
      threeEighthesIntegrator0.clearStepHandlers();
      threeEighthesIntegrator0.getEvaluations();
      threeEighthesIntegrator0.getCurrentStepStart();
      threeEighthesIntegrator0.getEventHandlers();
      double double0 = 1706.81474;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1706.81474;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 1706.81474;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1706.81474, 1706.81474, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.clearStepHandlers();
      graggBulirschStoerIntegrator0.setOrderControl(0, Double.NaN, 1706.81474);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, (-2803.55025704876), doubleArray0, doubleArray0);
      dormandPrince853Integrator0.setMaxEvaluations(0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, Double.NaN, doubleArray0, 1.3575263023376465, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, (-1148.4), (-1148.4), (-1148.4));
      dormandPrince853Integrator0.getMaxEvaluations();
      dormandPrince853Integrator0.setMaxEvaluations(1465);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      dormandPrince853Integrator0.getName();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(1096.4698314666748);
      threeEighthesIntegrator0.getName();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(5.0);
      classicalRungeKuttaIntegrator0.clearEventHandlers();
      classicalRungeKuttaIntegrator0.getMaxEvaluations();
      classicalRungeKuttaIntegrator0.setMaxEvaluations(1);
      classicalRungeKuttaIntegrator0.getStepHandlers();
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1.0), 1, 5.0, 0.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-1.0006050966910838), 5.0);
      dormandPrince853Integrator0.addEventHandler(eventHandler0, (double) Integer.MAX_VALUE, 0.037109375, 1, (UnivariateSolver) illinoisSolver0);
      dormandPrince853Integrator0.getOrder();
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1.0), (-1756.9866892013), 5.0, (-1.0));
      highamHall54Integrator0.getOrder();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-9.194632392478356);
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(1, 0.0, (-9.194632392478356), doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        adamsBashforthIntegrator0.integrate(expandableStatefulODE0, 27.94888452941996);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 1
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(1.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      threeEighthesIntegrator0.addEventHandler(eventHandler0, (double) 2145746201, (double) 2145746201, 2148);
      expandableStatefulODE0.setTime(4.547473508864641E-10);
      threeEighthesIntegrator0.integrate(expandableStatefulODE0, 1962.48341936053);
      threeEighthesIntegrator0.getMaxEvaluations();
      double double0 = threeEighthesIntegrator0.getCurrentSignedStepsize();
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator((-1023.2));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1023.2);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0E-10;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1023.2);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (-1023.2);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      graggBulirschStoerIntegrator0.setStepSizeControl(0.0, (-717.25983449663), 896.3198834, 0.0);
      graggBulirschStoerIntegrator0.setStabilityCheck(false, 190, 190, 190);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.computeDerivatives(0.0, doubleArray0, doubleArray0);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 0.0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(5.0);
      classicalRungeKuttaIntegrator0.clearEventHandlers();
      classicalRungeKuttaIntegrator0.getMaxEvaluations();
      classicalRungeKuttaIntegrator0.setMaxEvaluations(1);
      classicalRungeKuttaIntegrator0.getStepHandlers();
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1.0), 1, 5.0, 0.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1.0);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1, Integer.MAX_VALUE, doubleArray0, doubleArray0);
      highamHall54Integrator0.setStepSizeControl((double) 1, 5.0, doubleArray0, doubleArray0);
      highamHall54Integrator0.addEventHandler((EventHandler) null, (-1.0), 0.0, Integer.MAX_VALUE);
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = 2427.994732421507;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 1653.5;
      doubleArray1[5] = (-5.3681978363391484E-52);
      DormandPrince853Integrator dormandPrince853Integrator1 = new DormandPrince853Integrator((-1.0), (-1.0), doubleArray1, doubleArray0);
      double[] doubleArray2 = new double[2];
      doubleArray2[0] = 2427.994732421507;
      doubleArray2[1] = (-1.0);
      dormandPrince853Integrator1.setStepSizeControl((-1.0), 0.0, doubleArray2, doubleArray2);
      dormandPrince853Integrator1.getOrder();
      // Undeclared exception!
      try { 
        dormandPrince853Integrator1.computeDerivatives(2427.994732421507, doubleArray1, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double double0 = 5.0;
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(5.0);
      classicalRungeKuttaIntegrator0.clearEventHandlers();
      classicalRungeKuttaIntegrator0.getMaxEvaluations();
      int int0 = (-3);
      classicalRungeKuttaIntegrator0.setMaxEvaluations((-3));
      classicalRungeKuttaIntegrator0.getStepHandlers();
      double double1 = (-1.0);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1.0), (-3), 5.0, 0.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double2 = 0.037109375;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-1.0006050966910838), 5.0);
      Gaussian gaussian0 = new Gaussian();
      double double3 = 27.94888452941996;
      // Undeclared exception!
      try { 
        illinoisSolver0.solve((-3), (UnivariateFunction) gaussian0, 27.94888452941996);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-3) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 969.741011791;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      try { 
        threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 969.741011791, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 10
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(1.0);
      double double0 = threeEighthesIntegrator0.getCurrentStepStart();
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-2803.55025704876));
      threeEighthesIntegrator0.clearStepHandlers();
      threeEighthesIntegrator0.getEvaluations();
      threeEighthesIntegrator0.getCurrentStepStart();
      threeEighthesIntegrator0.getEventHandlers();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1706.81474;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 1706.81474;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1706.81474, 1706.81474, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setOrderControl(0, Double.NaN, 1706.81474);
      double double0 = 1000.0;
      graggBulirschStoerIntegrator0.setInitialStepSize(1000.0);
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 0);
      graggBulirschStoerIntegrator0.setControlFactors(1706.81474, Double.NaN, (-1.0), (-2803.55025704876));
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = null;
      try {
        adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(0, (-1.0), 0, 1706.81474, Double.NaN);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // multistep method needs at least 0 previous steps, got 2
         //
         verifyException("org.apache.commons.math3.ode.MultistepIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1706.81474;
      doubleArray0[2] = 1706.81474;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1706.81474, 1706.81474, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.clearStepHandlers();
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(730.0931, (-1.0), 730.0931, (-201.455549));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 730.0931;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      highamHall54Integrator0.setStepSizeControl(0.0, 0.0, doubleArray0, doubleArray0);
      highamHall54Integrator0.clearStepHandlers();
      highamHall54Integrator0.getStepHandlers();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      MullerSolver2 mullerSolver2_0 = new MullerSolver2();
      highamHall54Integrator0.addEventHandler(eventHandler1, 0.0, 0.0, 2186, (UnivariateSolver) mullerSolver2_0);
      highamHall54Integrator0.addEventHandler(eventHandler0, 1000.0, 0.84375, (-484));
      EventHandler eventHandler2 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      highamHall54Integrator0.addEventHandler(eventHandler2, (double) 2186, Double.NaN, (-484));
      assertEquals(5, highamHall54Integrator0.getOrder());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(1.0);
      threeEighthesIntegrator0.getEventHandlers();
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(2671.1, 2671.1, 0.0, (-1640.580796732095));
      highamHall54Integrator0.clearEventHandlers();
      highamHall54Integrator0.setInitialStepSize((-2189.324));
      highamHall54Integrator0.getOrder();
      highamHall54Integrator0.getEventHandlers();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2427.994732421507;
      doubleArray0[1] = (double) 5;
      highamHall54Integrator0.setStepSizeControl(0.0, 1000.0, doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-1640.580796732095);
      highamHall54Integrator0.addEventHandler((EventHandler) null, 0.0, 1653.5, 5);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (double) 5;
      doubleArray2[1] = (-1640.580796732095);
      doubleArray2[2] = 2671.1;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 5, doubleArray1, doubleArray2);
      dormandPrince853Integrator0.getOrder();
      // Undeclared exception!
      try { 
        dormandPrince853Integrator0.computeDerivatives(0.0, doubleArray2, doubleArray2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1.0, 1.0, (-3111.0), 1480.6423);
      graggBulirschStoerIntegrator0.addStepHandler((StepHandler) null);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1480.6423, 1581.83895134, 4307.2229417656, 1581.83895134);
      dormandPrince54Integrator0.getOrder();
      Collection<EventHandler> collection0 = graggBulirschStoerIntegrator0.getEventHandlers();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(1.0);
      threeEighthesIntegrator0.getEvaluations();
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1588.694219678, (-1280.45), 98.788, 98.788);
      graggBulirschStoerIntegrator0.getEvaluations();
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer0 = new StepNormalizer(1629.326, fixedStepHandler0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 1629.326;
      doubleArray0[2] = (-1280.45);
      doubleArray0[3] = (-2421.0);
      doubleArray0[4] = (double) 0;
      stepNormalizer0.init(0.0, doubleArray0, 1629.326);
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      graggBulirschStoerIntegrator0.getEvaluations();
      graggBulirschStoerIntegrator0.setControlFactors((-1545.0692), (-1545.0692), (-138.89171859396), 1588.694219678);
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      double double0 = graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
      assertEquals(1426.2690887720646, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.6666666666666666, 0.6666666666666666, 0.0, 0.6666666666666666);
      double[] doubleArray0 = new double[4];
      graggBulirschStoerIntegrator0.setMaxEvaluations(5);
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.6666666666666666;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 0.6666666666666666, doubleArray0, doubleArray0);
      highamHall54Integrator0.getOrder();
      graggBulirschStoerIntegrator0.addEventHandler((EventHandler) null, 1190.9781588051, 0.0, 5, (UnivariateSolver) null);
      highamHall54Integrator0.getCurrentStepStart();
      highamHall54Integrator0.clearEventHandlers();
      graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
      highamHall54Integrator0.getCurrentSignedStepsize();
      // Undeclared exception!
      try { 
        highamHall54Integrator0.computeDerivatives(5, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double double0 = (-292.8024148107677);
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator((-292.8024148107677));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      eulerIntegrator0.integrate(expandableStatefulODE0, double0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator((-1023.2));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1023.2);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1.0E-10;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-1023.2);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (-1023.2);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 9
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1996.149390046);
      doubleArray0[1] = 4156.62028;
      doubleArray0[2] = 4156.62028;
      doubleArray0[3] = (-1996.149390046);
      doubleArray0[4] = 4156.62028;
      doubleArray0[5] = (-1996.149390046);
      doubleArray0[6] = 4156.62028;
      doubleArray0[7] = 4156.62028;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(4156.62028, (-1996.149390046), doubleArray0, doubleArray0);
      dormandPrince853Integrator0.setMaxEvaluations(733);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 733;
      doubleArray1[1] = (-1996.149390046);
      doubleArray1[2] = 4156.62028;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = (double) 733;
      doubleArray2[1] = (double) 733;
      doubleArray2[2] = 4156.62028;
      doubleArray2[3] = (double) 733;
      doubleArray2[4] = 35.81684148639408;
      doubleArray2[5] = 4156.62028;
      doubleArray2[6] = (-26.041666666666668);
      doubleArray2[7] = 0.0;
      doubleArray2[8] = (double) 733;
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1996.149390046), doubleArray1, (-1996.149390046), doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(1.0);
      double double0 = threeEighthesIntegrator0.getCurrentSignedStepsize();
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 0.0, 0.0, 0.0);
      double double0 = dormandPrince54Integrator0.getCurrentSignedStepsize();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(1.0);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        threeEighthesIntegrator0.computeDerivatives(1.0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double double0 = (-1920.05);
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-1920.05));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double1 = 6190.0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 6190.0;
      doubleArray0[1] = 6190.0;
      doubleArray0[2] = (-1920.05);
      doubleArray0[3] = (-12.0);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 6190.0;
      // Undeclared exception!
      try { 
        midpointIntegrator0.computeDerivatives(0.0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(1.0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 2.2737367544323206E-10;
      doubleArray0[2] = 962.48341936053;
      doubleArray0[3] = 962.48341936053;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 962.48341936053;
      doubleArray0[6] = 1.0;
      doubleArray0[7] = 1.0;
      doubleArray0[8] = 962.48341936053;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1.0, 962.48341936053, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.getMaxEvaluations();
      dormandPrince54Integrator0.clearEventHandlers();
      int int0 = dormandPrince54Integrator0.getOrder();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(1.0);
      threeEighthesIntegrator0.getStepHandlers();
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-963.0));
      int int0 = threeEighthesIntegrator0.getMaxEvaluations();
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Integer.MAX_VALUE, int0);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double double0 = 5.0;
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(5.0);
      classicalRungeKuttaIntegrator0.clearEventHandlers();
      classicalRungeKuttaIntegrator0.getMaxEvaluations();
      int int0 = 1;
      classicalRungeKuttaIntegrator0.setMaxEvaluations(1);
      classicalRungeKuttaIntegrator0.getStepHandlers();
      double double1 = (-1.0);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1.0), 1, 5.0, 0.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double2 = 0.037109375;
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-1.0006050966910838), 5.0);
      Gaussian gaussian0 = new Gaussian();
      double double3 = 27.94888452941996;
      // Undeclared exception!
      try { 
        illinoisSolver0.solve(1, (UnivariateFunction) gaussian0, 27.94888452941996);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (1) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(1.0);
      threeEighthesIntegrator0.setMaxEvaluations(589);
      double double0 = threeEighthesIntegrator0.getCurrentStepStart();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(2636.845431841139, 2636.845431841139, 0.0, (-1640.580796732095));
      highamHall54Integrator0.clearEventHandlers();
      highamHall54Integrator0.setInitialStepSize((-2189.324));
      highamHall54Integrator0.getOrder();
      highamHall54Integrator0.getEventHandlers();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2427.994732421507;
      doubleArray0[1] = (double) 5;
      highamHall54Integrator0.setStepSizeControl(0.0, 1000.0, doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 1000.0;
      highamHall54Integrator0.addEventHandler((EventHandler) null, 0.0, 1653.5, 5);
      doubleArray1[2] = 0.0;
      double[] doubleArray2 = new double[3];
      doubleArray2[1] = (-1640.580796732095);
      doubleArray2[2] = 2636.845431841139;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 5, doubleArray1, doubleArray2);
      // Undeclared exception!
      try { 
        dormandPrince853Integrator0.computeDerivatives(0.0, doubleArray2, doubleArray2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1064.8168);
      doubleArray0[1] = (-1064.8168);
      doubleArray0[2] = (-1064.8168);
      doubleArray0[3] = (-1064.8168);
      doubleArray0[4] = (-1064.8168);
      doubleArray0[5] = (-1064.8168);
      doubleArray0[6] = (-1064.8168);
      doubleArray0[7] = (-1064.8168);
      doubleArray0[8] = (-1064.8168);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1064.8168), (-1064.8168), doubleArray0, doubleArray0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(8.0, 3184.70791427, (-1064.8168), (-1064.8168));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.setStabilityCheck(false, Integer.MAX_VALUE, Integer.MAX_VALUE, 0.0);
      BisectionSolver bisectionSolver0 = new BisectionSolver();
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (-1201.0050851956), 425.31952, 21, (UnivariateSolver) bisectionSolver0);
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler1, 5.554964922539782, (-1064.8168), (-129));
      graggBulirschStoerIntegrator0.setControlFactors((-2008.00506192398), (-1064.8168), 0.0, (-1064.8168));
      graggBulirschStoerIntegrator0.setControlFactors((-1064.8168), (-1786.0), 425.31952, (-1064.8168));
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.6666666666666666, 0.6666666666666666, 1000.0, 0.6666666666666666);
      double[] doubleArray0 = new double[4];
      graggBulirschStoerIntegrator0.setMaxEvaluations(5);
      doubleArray0[0] = 1000.0;
      doubleArray0[1] = 0.6666666666666666;
      doubleArray0[2] = 1000.0;
      doubleArray0[3] = 1000.0;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1000.0, 0.6666666666666666, doubleArray0, doubleArray0);
      highamHall54Integrator0.getOrder();
      graggBulirschStoerIntegrator0.addEventHandler((EventHandler) null, 1190.9781588051, 1000.0, 5, (UnivariateSolver) null);
      highamHall54Integrator0.getCurrentStepStart();
      graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
      highamHall54Integrator0.getCurrentSignedStepsize();
      // Undeclared exception!
      try { 
        highamHall54Integrator0.computeDerivatives(5, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.1521609496625161, 0.1521609496625161, 1000.0, 0.1521609496625161);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double0 = 0.0;
      highamHall54Integrator0.setMaxGrowth((-1.0));
      int int0 = 0;
      BisectionSolver bisectionSolver0 = new BisectionSolver(1000.0, 0.1521609496625161);
      highamHall54Integrator0.addEventHandler(eventHandler0, 0.1521609496625161, 0.0, 0, (UnivariateSolver) bisectionSolver0);
      double double1 = 0.0;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1000.0;
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = null;
      try {
        adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(0, 0.0, 0.0, doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one row
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.6;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1000.0, 0.6, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) 707, doubleArray0, (-1413.128), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      double double0 = 0.0;
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 969.741011791;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      try { 
        threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 969.741011791, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }
}
