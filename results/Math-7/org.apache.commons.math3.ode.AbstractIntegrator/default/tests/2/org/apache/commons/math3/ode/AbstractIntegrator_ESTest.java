/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 09:53:02 GMT 2020
 */

package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import org.apache.commons.math3.analysis.solvers.BrentSolver;
import org.apache.commons.math3.analysis.solvers.RegulaFalsiSolver;
import org.apache.commons.math3.analysis.solvers.RiddersSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.EulerIntegrator;
import org.apache.commons.math3.ode.nonstiff.GillIntegrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.nonstiff.MidpointIntegrator;
import org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator;
import org.apache.commons.math3.ode.sampling.DummyStepHandler;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.StepHandler;
import org.apache.commons.math3.ode.sampling.StepInterpolator;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.apache.commons.math3.ode.sampling.StepNormalizerBounds;
import org.apache.commons.math3.ode.sampling.StepNormalizerMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegrator_ESTest extends AbstractIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2.2737367544323206E-10, (-1372.6249215659), 2397.918091516173, 5089.9517830281675);
      dormandPrince853Integrator0.getCurrentSignedStepsize();
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizer stepNormalizer0 = new StepNormalizer((-1372.6249215659), fixedStepHandler0, stepNormalizerMode0);
      dormandPrince853Integrator0.addStepHandler(stepNormalizer0);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(5.586580111494122E-4, 2811.853788713, 0.0, (-1372.6249215659));
      dormandPrince54Integrator0.getOrder();
      dormandPrince853Integrator0.getName();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1.0, (-2153.0), (-2153.0), (-1372.6249215659));
      graggBulirschStoerIntegrator0.setInterpolationControl(false, 5);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1096.356));
      gillIntegrator0.getEventHandlers();
      gillIntegrator0.setMaxEvaluations(3992);
      gillIntegrator0.getEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      gillIntegrator0.clearEventHandlers();
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-0.05086379716981132), doubleArray0, (double) 0, doubleArray0);
      gillIntegrator0.getMaxEvaluations();
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1096.356), doubleArray0, (-0.05086379716981132), doubleArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(7).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(7, (-1602.5322434254126), 28.6875, (-1602.5322434254126));
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(7, 7, 256000.0, (-1367.969), 7);
      // Undeclared exception!
      adamsMoultonIntegrator0.integrate(expandableStatefulODE0, 0.0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(28.6875);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(6).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-2073.4845796066793), 7.456824943331887E-9, 28.6875, 248.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      eulerIntegrator0.addEventHandler(eventHandler0, 28.6875, 0.0, 6);
      // Undeclared exception!
      eulerIntegrator0.integrate(expandableStatefulODE0, (-2073.4845796066793));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1096.356));
      gillIntegrator0.getEventHandlers();
      gillIntegrator0.setMaxEvaluations(3992);
      gillIntegrator0.getEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        gillIntegrator0.integrate(expandableStatefulODE0, 3085.762767);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (3,992) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1096.356));
      gillIntegrator0.getEventHandlers();
      gillIntegrator0.setMaxEvaluations(3992);
      gillIntegrator0.getEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      gillIntegrator0.clearEventHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      gillIntegrator0.clearEventHandlers();
      try { 
        gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-0.05086379716981132), doubleArray0, (-0.05086379716981132), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1096.356));
      gillIntegrator0.getEventHandlers();
      gillIntegrator0.setMaxEvaluations(3992);
      gillIntegrator0.getEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      gillIntegrator0.clearEventHandlers();
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 952.392648116631, doubleArray0, (-1096.356), doubleArray0);
      gillIntegrator0.setMaxEvaluations(0);
      GillIntegrator gillIntegrator1 = new GillIntegrator((-1096.356));
      gillIntegrator1.getMaxEvaluations();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(3.219119568928366E-9, (-2208.76954185413), 952.392648116631, (-2735.7693608683));
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1096.356));
      int int0 = 3992;
      gillIntegrator0.getEventHandlers();
      gillIntegrator0.setMaxEvaluations(3992);
      gillIntegrator0.getEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      gillIntegrator0.clearEventHandlers();
      double double0 = 1.73927483790327808E18;
      try { 
        gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1.73927483790327808E18, doubleArray0, (double) 0, doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (3,992) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1055.8467548943559));
      gillIntegrator0.setMaxEvaluations(3992);
      gillIntegrator0.getEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      gillIntegrator0.clearStepHandlers();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double double0 = (-40.67897431418004);
      double[] doubleArray0 = new double[0];
      GillIntegrator gillIntegrator1 = new GillIntegrator(1624.3469585935);
      gillIntegrator1.clearEventHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (-40.67897431418004);
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (-0.05086379716981132);
      doubleArray1[3] = (double) 3992;
      doubleArray1[4] = 1624.3469585935;
      doubleArray1[5] = (double) 3992;
      doubleArray1[6] = (-1055.8467548943559);
      doubleArray1[8] = 1624.3469585935;
      try { 
        gillIntegrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter1, (double) 0, doubleArray0, (-78.125), doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double double0 = (-1096.356);
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1096.356));
      int int0 = 3992;
      gillIntegrator0.getEventHandlers();
      gillIntegrator0.setMaxEvaluations(3992);
      gillIntegrator0.getEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double double1 = (-0.05086379716981132);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 2.9046141593926277E-8;
      doubleArray1[1] = 2.9046141593926277E-8;
      doubleArray1[2] = 2.9046141593926277E-8;
      doubleArray1[3] = 2.9046141593926277E-8;
      doubleArray1[4] = (double) 3992;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = (double) 3992;
      try { 
        gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2.9046141593926277E-8, doubleArray0, 1125.54158791, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1096.356));
      gillIntegrator0.getEventHandlers();
      gillIntegrator0.setMaxEvaluations(3992);
      gillIntegrator0.getEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      gillIntegrator0.clearEventHandlers();
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-0.05086379716981132), doubleArray0, (double) 0, doubleArray0);
      gillIntegrator0.getMaxEvaluations();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.6, (-3656.0), 3992, (-3656.0));
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1056.5959804667, doubleArray0, 0.3471571207046509, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1096.356));
      gillIntegrator0.getEventHandlers();
      gillIntegrator0.setMaxEvaluations(3992);
      gillIntegrator0.getEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      gillIntegrator0.clearEventHandlers();
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-0.05086379716981132), doubleArray0, (double) 0, doubleArray0);
      gillIntegrator0.setMaxEvaluations(3992);
      gillIntegrator0.getMaxEvaluations();
      double double0 = Double.POSITIVE_INFINITY;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(3992, 1268.46161, 0.6, Double.POSITIVE_INFINITY);
      dormandPrince853Integrator0.setStepSizeControl(Double.NaN, 0.34577590227127075, 1.0, 2.4936055526796523);
      // Undeclared exception!
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1023.028055), doubleArray0, 1147.730102436, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(0.0);
      gillIntegrator0.getEventHandlers();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      gillIntegrator0.clearStepHandlers();
      int int0 = (-1822);
      gillIntegrator0.addEventHandler(eventHandler0, (-1044.69156), 0.0, (-1822));
      gillIntegrator0.addStepHandler((StepHandler) null);
      gillIntegrator0.clearStepHandlers();
      gillIntegrator0.getMaxEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      gillIntegrator0.integrate(expandableStatefulODE0, (double) (-1822));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, (-648.81531837827), (-1601.0), (-1601.0));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1478.8941449852518);
      doubleArray0[1] = (-1601.0);
      double[] doubleArray1 = new double[0];
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, (-1350.98419888), doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1193.1370950986);
      doubleArray0[1] = (-1193.1370950986);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1193.1370950986);
      doubleArray0[4] = (-1193.1370950986);
      doubleArray0[5] = 0.0;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, (-1193.1370950986), doubleArray0, doubleArray0);
      highamHall54Integrator0.setInitialStepSize((-1193.1370950986));
      highamHall54Integrator0.clearEventHandlers();
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.LAST;
      StepNormalizer stepNormalizer0 = new StepNormalizer(2830.2, fixedStepHandler0, stepNormalizerMode0, stepNormalizerBounds0);
      highamHall54Integrator0.addStepHandler(stepNormalizer0);
      highamHall54Integrator0.clearStepHandlers();
      highamHall54Integrator0.getEventHandlers();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1193.1370950986), (-1193.1370950986), 0.0, 0.0);
      graggBulirschStoerIntegrator0.clearEventHandlers();
      graggBulirschStoerIntegrator0.setMaxEvaluations(5);
      graggBulirschStoerIntegrator0.setStabilityCheck(true, 0, 5, (-1193.1370950986));
      graggBulirschStoerIntegrator0.setInitialStepSize(0);
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 169);
      highamHall54Integrator0.getCurrentSignedStepsize();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double double0 = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-4365.29), 0.0, 0.0, 0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1648).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(0.0, (-4073.0), 0.0);
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 821.608015, 0.0, 360, (UnivariateSolver) regulaFalsiSolver0);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-4365.29);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-4365.29);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 4091.088203);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(28.6875);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(6).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      eulerIntegrator0.addEventHandler(eventHandler0, 1212.0, 1.4454470027638629E283, 6);
      // Undeclared exception!
      eulerIntegrator0.integrate(expandableStatefulODE0, 1212.0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double double0 = 1124.54158791;
      GillIntegrator gillIntegrator0 = new GillIntegrator(1124.54158791);
      gillIntegrator0.clearEventHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1700).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      try { 
        gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1.0), doubleArray0, 1124.54158791, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 3,400
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(Double.NaN, (-513.738), (-513.738), Double.NaN);
      dormandPrince853Integrator0.getCurrentStepStart();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1.6643771824549864, 312.7220865507212, (-625.3394544202484), Double.NaN);
      graggBulirschStoerIntegrator0.clearStepHandlers();
      boolean boolean0 = true;
      graggBulirschStoerIntegrator0.setMaxEvaluations(0);
      graggBulirschStoerIntegrator0.setStabilityCheck(true, (-2880), 1153, 0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      dormandPrince853Integrator0.setInitialStepSize((-625.3394544202484));
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      dormandPrince853Integrator0.integrate(expandableStatefulODE0, 1.6643771824549864);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double double0 = 1124.54158791;
      GillIntegrator gillIntegrator0 = new GillIntegrator(1124.54158791);
      gillIntegrator0.clearEventHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1.0), doubleArray0, 1124.54158791, doubleArray0);
      double double1 = 0.6241109587160757;
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.FIRST;
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.6241109587160757, (FixedStepHandler) null, stepNormalizerMode0, stepNormalizerBounds0);
      StepInterpolator stepInterpolator0 = null;
      // Undeclared exception!
      try { 
        stepNormalizer0.handleStep((StepInterpolator) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.sampling.StepNormalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double double0 = 768.249801447;
      double double1 = 3441.68324160576;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3441.68324160576;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(768.249801447, 3441.68324160576, doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      dormandPrince853Integrator0.getMaxEvaluations();
      dormandPrince853Integrator0.addEventHandler(eventHandler0, 0.0, (-2444.35453664915), 0);
      int int1 = (-3545);
      dormandPrince853Integrator0.setMaxEvaluations((-3545));
      dormandPrince853Integrator0.clearStepHandlers();
      dormandPrince853Integrator0.getOrder();
      dormandPrince853Integrator0.getCurrentStepStart();
      double double2 = 0.0;
      // Undeclared exception!
      try { 
        dormandPrince853Integrator0.computeDerivatives(0.0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 6.283185307179586;
      doubleArray0[1] = 6.283185307179586;
      doubleArray0[2] = (-425.27443);
      doubleArray0[3] = (-425.27443);
      doubleArray0[4] = (-425.27443);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(6.283185307179586, (-425.27443), doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler1, (-425.27443), 644.7, (-392));
      graggBulirschStoerIntegrator0.setControlFactors(1000.0, 6.283185307179586, (-425.27443), Double.NaN);
      graggBulirschStoerIntegrator0.setMaxEvaluations(180);
      BrentSolver brentSolver0 = new BrentSolver((-911.9187159), Double.NaN);
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 6.283185307179586, 2755.5310904213, (-392), (UnivariateSolver) brentSolver0);
      graggBulirschStoerIntegrator0.setStabilityCheck(true, 0, 320, (-425.27443));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1135.324;
      doubleArray0[1] = 1135.324;
      doubleArray0[2] = 1135.324;
      doubleArray0[3] = 1135.324;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1687.452), 1135.324, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        highamHall54Integrator0.integrate(expandableStatefulODE0, 0.5667149535193777);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 4
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, 0.0, 0.0);
      dormandPrince853Integrator0.clearStepHandlers();
      dormandPrince853Integrator0.getEvaluations();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.5, 12.360567175794303, 12.360567175794303);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      RiddersSolver riddersSolver0 = new RiddersSolver();
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 0.5, (double) 0, 0, (UnivariateSolver) riddersSolver0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 12.360567175794303;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.5;
      doubleArray0[5] = 12.360567175794303;
      doubleArray0[6] = 12.360567175794303;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 0.0;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(2357.9, 0, doubleArray0, doubleArray0);
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      dormandPrince54Integrator0.addEventHandler(eventHandler1, 0.0, 0.0, 0, (UnivariateSolver) riddersSolver0);
      dormandPrince54Integrator0.getOrder();
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.NEITHER;
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.5, fixedStepHandler0, stepNormalizerBounds0);
      stepNormalizer0.init((-5730.579010729617), doubleArray0, 2192.337691403);
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(788.959);
      eulerIntegrator0.getEventHandlers();
      eulerIntegrator0.clearStepHandlers();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(28.6875);
      GillIntegrator gillIntegrator0 = new GillIntegrator(28.6875);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      gillIntegrator0.getEventHandlers();
      gillIntegrator0.addEventHandler(eventHandler0, 6.938893903907228E-15, 6.938893903907228E-15, (-1285));
      gillIntegrator0.getEventHandlers();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, (-648.81531837827), (-1601.0), (-1601.0));
      graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(647.3039187244);
      midpointIntegrator0.getCurrentSignedStepsize();
      double[] doubleArray0 = new double[1];
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      midpointIntegrator0.addStepHandler(dummyStepHandler0);
      doubleArray0[0] = 647.3039187244;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(Double.NaN, (-143.43292), doubleArray0, doubleArray0);
      dormandPrince54Integrator0.getOrder();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(788.959);
      eulerIntegrator0.clearStepHandlers();
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      eulerIntegrator0.getCurrentStepStart();
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(1220.552229741);
      threeEighthesIntegrator0.clearStepHandlers();
      threeEighthesIntegrator0.getStepHandlers();
      threeEighthesIntegrator0.getEvaluations();
      threeEighthesIntegrator0.getCurrentStepStart();
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1220.552229741, 0.01, 0.01, (-2576.0278988162504));
      highamHall54Integrator0.getOrder();
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(Double.NaN, 575.9380257196, 575.9380257196, 575.9380257196);
      highamHall54Integrator0.getName();
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(Double.NaN, Double.NaN, 575.9380257196, (-1603.012));
      dormandPrince853Integrator0.getMaxEvaluations();
      dormandPrince853Integrator0.getOrder();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1096.356));
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1225.0972207), (-262.8102), (-648.81531837827), (-1096.356));
      gillIntegrator0.getName();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1096.356));
      gillIntegrator0.getEventHandlers();
      gillIntegrator0.setMaxEvaluations(3992);
      gillIntegrator0.getEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      gillIntegrator0.clearEventHandlers();
      try { 
        gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-37.511977086), doubleArray0, (-37.511977086), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator((-648.81531837827));
      eulerIntegrator0.clearEventHandlers();
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, (-648.81531837827), 0.0, 0.0);
      dormandPrince54Integrator0.getOrder();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, (-648.81531837827), (-1601.0), (-1601.0));
      graggBulirschStoerIntegrator0.getEvaluations();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-344.0), 501.6, 634.98422266159, (-344.0));
      graggBulirschStoerIntegrator0.setMaxEvaluations((-1));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, (-648.81531837827), (-1601.0), (-1601.0));
      graggBulirschStoerIntegrator0.getMaxEvaluations();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(667.24576076678);
      gillIntegrator0.getMaxEvaluations();
      gillIntegrator0.clearStepHandlers();
      gillIntegrator0.setMaxEvaluations(3198);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = 667.24576076678;
      doubleArray0[2] = 1854.9725739618511;
      doubleArray0[3] = 1854.9725739618511;
      doubleArray0[4] = (-2866.2169928);
      doubleArray0[5] = 1854.9725739618511;
      doubleArray0[6] = (double) Integer.MAX_VALUE;
      doubleArray0[7] = (double) Integer.MAX_VALUE;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1854.9725739618511, 667.24576076678, doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      BrentSolver brentSolver0 = new BrentSolver(526.9718938505802, 0.0);
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 1854.9725739618511, 4485.629601326, 0, (UnivariateSolver) brentSolver0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1096.4352720763195));
      Collection<EventHandler> collection0 = new LinkedList<EventHandler>();
      gillIntegrator0.setMaxEvaluations(3996);
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator((-1096.4352720763195));
      eulerIntegrator0.clearStepHandlers();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double double0 = 28.6875;
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(28.6875);
      int int0 = 6;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(6).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-2073.4845796066793), 7.456824943331887E-9, 28.6875, 248.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      eulerIntegrator0.addEventHandler(eventHandler0, 28.6875, (double) 6, 733);
      // Undeclared exception!
      eulerIntegrator0.integrate(expandableStatefulODE0, 28.6875);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(788.959);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        eulerIntegrator0.computeDerivatives(788.959, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(2384.547253);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double double0 = 2158.787895934522;
      // Undeclared exception!
      threeEighthesIntegrator0.integrate(expandableStatefulODE0, 2158.787895934522);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(28.6875);
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      eulerIntegrator0.addStepHandler(dummyStepHandler0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(6).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      eulerIntegrator0.integrate(expandableStatefulODE0, 28.6875);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1096.356));
      int int0 = 3992;
      gillIntegrator0.setMaxEvaluations(3992);
      gillIntegrator0.getEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      double double0 = Double.NEGATIVE_INFINITY;
      gillIntegrator0.clearEventHandlers();
      try { 
        gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-0.05086379716981132), doubleArray0, Double.NEGATIVE_INFINITY, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = \u221E
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1096.356));
      Collection<EventHandler> collection0 = new LinkedList<EventHandler>();
      gillIntegrator0.setMaxEvaluations(3992);
      gillIntegrator0.getEvaluations();
      double[] doubleArray0 = new double[0];
      gillIntegrator0.clearEventHandlers();
      gillIntegrator0.setMaxEvaluations(3992);
      gillIntegrator0.getMaxEvaluations();
      double double0 = 1268.46161;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(3992, 1268.46161, 0.6, Double.POSITIVE_INFINITY);
      GillIntegrator gillIntegrator1 = new GillIntegrator(0.34577590227127075);
      gillIntegrator1.addEventHandler((EventHandler) null, (double) 3992, (-1096.356), (-242));
      gillIntegrator0.getCurrentSignedStepsize();
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(3992, (-1096.356), (-242), 0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-3501.653434239593));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 43.1337;
      doubleArray0[1] = 43.1337;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(43.1337, (-3501.653434239593), doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, Double.NaN, doubleArray0, (-3501.653434239593), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-4365.29), 0.0, 0.0, 0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(0.0, (-4073.0), 0.0);
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 821.608015, 0.0, 360, (UnivariateSolver) regulaFalsiSolver0);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-4365.29);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-4365.29);
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 0.0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double double0 = 0.0;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-2016.8), (-2016.8), 2264.39417894, 0.0);
      double double1 = 1000.0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2264.39417894;
      dormandPrince853Integrator0.setSafety(1000.0);
      dormandPrince853Integrator0.setStepSizeControl(2834.56531011, 0.6, 2264.39417894, 1568.62110004);
      // Undeclared exception!
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) null, 1000.0, doubleArray0, (-2016.8), doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }
}
