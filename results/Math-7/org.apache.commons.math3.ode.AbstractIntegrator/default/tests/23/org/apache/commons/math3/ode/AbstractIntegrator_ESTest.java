/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 01 11:29:56 GMT 2021
 */

package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver;
import org.apache.commons.math3.analysis.solvers.MullerSolver;
import org.apache.commons.math3.analysis.solvers.PegasusSolver;
import org.apache.commons.math3.analysis.solvers.RegulaFalsiSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.nonstiff.MidpointIntegrator;
import org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator;
import org.apache.commons.math3.ode.sampling.DummyStepHandler;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.StepHandler;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.apache.commons.math3.ode.sampling.StepNormalizerBounds;
import org.apache.commons.math3.ode.sampling.StepNormalizerMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegrator_ESTest extends AbstractIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int int0 = 0;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(2927.018658);
      PegasusSolver pegasusSolver0 = new PegasusSolver(0.1477125883102417);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((double)0, 2927.018658, (-3381.134299135424)).when(eventHandler0).g(anyDouble() , any(double[].class));
      midpointIntegrator0.addEventHandler(eventHandler0, 0.1477125883102417, 9.094947017729282E-10, 0, (UnivariateSolver) pegasusSolver0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double[] doubleArray0 = new double[0];
      try { 
        midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) 0, doubleArray0, 2014.719607787045, doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2927.018658, 2927.018658, 2927.018658, 2927.018658);
      int int0 = dormandPrince853Integrator0.getEvaluations();
      assertEquals(0, int0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1886.0284329995452, doubleArray0, (double) 0, doubleArray0);
      dormandPrince853Integrator0.getEvaluations();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(2927.018658);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(2927.018658, (-2430.30998121003), 2184.128646824, 1.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      PegasusSolver pegasusSolver0 = new PegasusSolver(308.08815);
      midpointIntegrator0.addEventHandler(eventHandler0, 2927.018658, 2272.547, 2047, (UnivariateSolver) pegasusSolver0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double double0 = 1443.368952;
      // Undeclared exception!
      midpointIntegrator0.integrate(expandableStatefulODE0, double0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(2927.018658);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(2927.018658, (-2430.30998121003), 2184.128646824, (double)0, 2184.128646824).when(eventHandler0).g(anyDouble() , any(double[].class));
      PegasusSolver pegasusSolver0 = new PegasusSolver(308.08815);
      midpointIntegrator0.addEventHandler(eventHandler0, 2927.018658, (double) 0, 2047, (UnivariateSolver) pegasusSolver0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double double0 = 1443.368952;
      midpointIntegrator0.integrate(expandableStatefulODE0, double0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2927.018658, 2927.018658, 2927.018658, 2927.018658);
      // Undeclared exception!
      try { 
        dormandPrince853Integrator0.integrate((ExpandableStatefulODE) null, 2927.018658);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2927.018658, 2927.018658, 2927.018658, 2927.018658);
      dormandPrince853Integrator0.getEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1746.6282417889, doubleArray0, (-1.0), doubleArray0);
      DormandPrince853Integrator dormandPrince853Integrator1 = new DormandPrince853Integrator((-1.0), 1746.6282417889, 1000.0, 1853.6363140486087);
      dormandPrince853Integrator1.getEvaluations();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double double0 = 2927.018658;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2927.018658, 2927.018658, 2927.018658, 2927.018658);
      dormandPrince853Integrator0.getEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      dormandPrince853Integrator0.getEventHandlers();
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) 0, doubleArray0, 1000.0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      dormandPrince853Integrator0.integrate(expandableStatefulODE0, (double) 0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-460.916626824));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double double0 = 1723.21202;
      midpointIntegrator0.getEvaluations();
      midpointIntegrator0.setMaxEvaluations(0);
      midpointIntegrator0.addEventHandler((EventHandler) null, 4.278345398213486E-9, 4.278345398213486E-9, 304, (UnivariateSolver) null);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      try { 
        expandableStatefulODE0.getSecondaryStateDot(304);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 304, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = (-2444.144726);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1.7470924137873214E-8, (-2444.144726), 0, 2122.75883690582);
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      DummyStepHandler.getInstance();
      dormandPrince853Integrator0.addStepHandler(dummyStepHandler0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1.7470924137873214E-8, 1.7470924137873214E-8, doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter1);
      double double0 = 1.389986049115668E-8;
      // Undeclared exception!
      dormandPrince853Integrator0.integrate(expandableStatefulODE0, 1.389986049115668E-8);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-2059.4045489));
      threeEighthesIntegrator0.clearStepHandlers();
      threeEighthesIntegrator0.clearEventHandlers();
      threeEighthesIntegrator0.getCurrentStepStart();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.38574057817459106, 0.38574057817459106, 1000.0, 1.511474847793579);
      graggBulirschStoerIntegrator0.setControlFactors(0.38574057817459106, 781.8389001610475, (-2641.7916464944883), (-4207.06906586));
      graggBulirschStoerIntegrator0.setOrderControl((-1254), 2644.826248673, 3431.341321);
      graggBulirschStoerIntegrator0.getName();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-460.916626824));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(304).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      midpointIntegrator0.addEventHandler(eventHandler1, (double) 304, 1723.21202, 304, (UnivariateSolver) null);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(4.547473508864641E-10, 1723.21202, 2941.0, 304);
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 304);
      midpointIntegrator0.getCurrentStepStart();
      graggBulirschStoerIntegrator0.setControlFactors((-851.95134945609), 781.8389001610475, 1.1541756557557508E254, 304);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2927.018658, 2927.018658, 2927.018658, 2927.018658);
      dormandPrince853Integrator0.getEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2853.6363140486087, doubleArray0, 1000.0, doubleArray0);
      DormandPrince853Integrator dormandPrince853Integrator1 = new DormandPrince853Integrator(1000.0, (-2160.879991147), doubleArray0, doubleArray0);
      dormandPrince853Integrator1.getOrder();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2853.6363140486087, (-467.2038499556638), 7.586808748646825E-281, 2621.331);
      graggBulirschStoerIntegrator0.setInterpolationControl(false, 0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(1.1368683772161603E-10);
      midpointIntegrator0.addStepHandler((StepHandler) null);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(304).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime(1723.21202);
      try { 
        midpointIntegrator0.integrate(expandableStatefulODE0, 1723.21202);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-460.916626824));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(304).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      midpointIntegrator0.addEventHandler(eventHandler1, (double) 304, 1723.21202, 304, (UnivariateSolver) null);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime(4.547473508864641E-10);
      double double0 = (-3401.67524203);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(4.547473508864641E-10, (-3401.67524203), 1.0333241479437797E-8, 2380.759);
      try { 
        dormandPrince853Integrator0.integrate(expandableStatefulODE0, 4.547473508864641E-10);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double double0 = (-2444.144726);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[8];
      doubleArray1[2] = (-2444.144726);
      double double1 = 1.7470924137873214E-8;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1.7470924137873214E-8, (-2444.144726), 0, 2122.75883690582);
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      DummyStepHandler.getInstance();
      dormandPrince853Integrator0.addStepHandler(dummyStepHandler0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1.7470924137873214E-8, 1.7470924137873214E-8, doubleArray1, doubleArray1);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(1.7470924137873214E-8, 0);
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (-2003.8267366721905), (double) 0, (-2832), (UnivariateSolver) regulaFalsiSolver0);
      double double2 = 2738.975692385264;
      // Undeclared exception!
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2122.75883690582, doubleArray0, (-2444.144726), doubleArray0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2927.018658, 2927.018658, 2927.018658, 2927.018658);
      dormandPrince853Integrator0.getEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) 0, doubleArray0, 1000.0, doubleArray0);
      DormandPrince853Integrator dormandPrince853Integrator1 = new DormandPrince853Integrator(1000.0, (-2160.879991147), doubleArray0, doubleArray0);
      dormandPrince853Integrator1.getMaxEvaluations();
      dormandPrince853Integrator1.getOrder();
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      dormandPrince853Integrator1.addStepHandler(dummyStepHandler0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      dormandPrince853Integrator1.integrate(expandableStatefulODE0, (double) 8);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(1.1368683772161603E-10);
      midpointIntegrator0.addStepHandler((StepHandler) null);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(304).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      midpointIntegrator0.addEventHandler(eventHandler0, 2122.75883690582, (double) 304, 304, (UnivariateSolver) null);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime(1723.21202);
      // Undeclared exception!
      try { 
        midpointIntegrator0.integrate(expandableStatefulODE0, 2833.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0);
      midpointIntegrator0.addEventHandler((EventHandler) null, 1042.8753962318, 2235.44, 0, (UnivariateSolver) null);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.getSecondaryMappers();
      // Undeclared exception!
      try { 
        midpointIntegrator0.integrate(expandableStatefulODE0, 1147.7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-460.916626824));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(304).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((double)304, 0.0, 0.0, 0.0, 0.0).when(eventHandler1).g(anyDouble() , any(double[].class));
      midpointIntegrator0.addEventHandler(eventHandler1, 2122.75883690582, 1723.21202, 304, (UnivariateSolver) null);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.getSecondaryMappers();
      expandableStatefulODE0.setTime(2146.55883690582);
      midpointIntegrator0.integrate(expandableStatefulODE0, 23.8);
      midpointIntegrator0.getEvaluations();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime(1940.207523);
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-51.64296688967767));
      midpointIntegrator0.integrate(expandableStatefulODE0, (-2828.5999149));
      midpointIntegrator0.clearStepHandlers();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-2444.144726), (-2444.144726), (-3301.3249), (-2843.952351));
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (-3301.3249));
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1.0, 2449.2445196, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getOrder();
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double double0 = (-460.916626824);
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-460.916626824));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double1 = 0.0;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(304).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0).when(eventHandler1).g(anyDouble() , any(double[].class));
      midpointIntegrator0.addEventHandler(eventHandler1, 2122.75883690582, 1723.21202, 304, (UnivariateSolver) null);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double double2 = 2146.55883690582;
      expandableStatefulODE0.setTime(2146.55883690582);
      // Undeclared exception!
      try { 
        midpointIntegrator0.integrate(expandableStatefulODE0, 23.8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.events.EventState", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(2927.018658);
      PegasusSolver pegasusSolver0 = new PegasusSolver(2047);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      midpointIntegrator0.addEventHandler(eventHandler0, 2927.018658, (double) 2047, 2012, (UnivariateSolver) pegasusSolver0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      midpointIntegrator0.integrate(expandableStatefulODE0, (-941.51555675675));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-460.916626824));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-460.916626824);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        dormandPrince853Integrator0.integrate(expandableStatefulODE0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 1
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-332.55);
      doubleArray0[2] = (-332.55);
      doubleArray0[3] = (-2444.144726);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(401.435, (-332.55), 1.7470924137873214E-8, (-2444.144726));
      double[] doubleArray1 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1.7470924137873214E-8, 1.7470924137873214E-8, (-2444.144726), 3.3075532478807267E-308);
      dormandPrince853Integrator0.getCurrentSignedStepsize();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-332.55);
      doubleArray1[2] = (-332.55);
      doubleArray1[3] = (-2444.144726);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(401.435, (-332.55), 1.7470924137873214E-8, (-2444.144726));
      double[] doubleArray2 = new double[0];
      dormandPrince853Integrator0.getOrder();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1.7470924137873214E-8, 1.7470924137873214E-8, (-2444.144726), 3.3075532478807267E-308);
      dormandPrince853Integrator0.getCurrentSignedStepsize();
      graggBulirschStoerIntegrator0.setInterpolationControl(false, 2146345623);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double double0 = (-2444.144726);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-332.55);
      doubleArray1[2] = (-332.55);
      doubleArray1[3] = (-2444.144726);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(2523).when(secondOrderDifferentialEquations0).getDimension();
      double double1 = 1.7470924137873214E-8;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-2444.144726), (-332.55), 1.7470924137873214E-8, (-2444.144726));
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray2 = new double[0];
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2738.975692385264, doubleArray0, (-332.55), doubleArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 5,046
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 226.599;
      doubleArray0[1] = (-267.616768);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-267.616768), 226.599, doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      dormandPrince54Integrator0.addEventHandler(eventHandler0, (-556.8489987755698), 226.599, (-2897));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 7;
      doubleArray1[1] = (-556.8489987755698);
      doubleArray1[2] = (-556.8489987755698);
      doubleArray1[3] = (double) (-2897);
      doubleArray1[4] = (-556.8489987755698);
      doubleArray1[5] = (-1717.7856181702625);
      doubleArray1[6] = (double) 7;
      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1717.7856181702625), doubleArray0, (-556.8489987755698), doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2927.018658, 2927.018658, 2927.018658, 2927.018658);
      dormandPrince853Integrator0.getEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = 1000.0;
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1000.0, doubleArray0, (-668.10967), doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(3499.48, 3785.8291, (-2.564688370677835E-8), 2927.018658);
      dormandPrince853Integrator0.getEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1905.5954), doubleArray0, 3785.8291, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double double0 = (-2444.144726);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-332.55);
      doubleArray1[2] = (-332.55);
      doubleArray1[3] = (-2444.144726);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      double double1 = 1.7470924137873214E-8;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(401.435, (-332.55), 1.7470924137873214E-8, (-2444.144726));
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray2 = new double[0];
      // Undeclared exception!
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2738.975692385264, doubleArray0, (-332.55), doubleArray2);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double double0 = 2927.018658;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2927.018658, 2927.018658, 2927.018658, 2927.018658);
      dormandPrince853Integrator0.getEvaluations();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 1000.0;
      doubleArray0[2] = 2927.018658;
      doubleArray0[3] = 1000.0;
      // Undeclared exception!
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) null, (double) 0, doubleArray0, 1000.0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-332.55);
      doubleArray1[2] = (-332.55);
      doubleArray1[3] = (-2444.144726);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(164.431, (-32.379), doubleArray0, doubleArray1);
      dormandPrince54Integrator0.addEventHandler((EventHandler) null, 1.0, (-332.55), 7);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      dormandPrince54Integrator0.getStepHandlers();
      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 309.3187, doubleArray0, 3071.5256923852644, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 1.0;
      doubleArray0[7] = (-1.0);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1.0, 1.0, doubleArray0, doubleArray0);
      boolean boolean0 = false;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      try { 
        highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1.0, doubleArray0, 275.461821977158, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2927.018658, 2927.018658, 2927.018658, 2927.018658);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2927.018658;
      doubleArray0[1] = 2927.018658;
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2927.018658, doubleArray0, 132.0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2927.018658, 2927.018658, 2927.018658, 2927.018658);
      dormandPrince853Integrator0.getStepHandlers();
      dormandPrince853Integrator0.getEvaluations();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double double0 = (-2444.144726);
      double double1 = (-332.55);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-193.83956), (-2444.144726), 401.435, (-332.55));
      int int0 = (-1);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (-332.55);
      doubleArray1[1] = (-193.83956);
      doubleArray1[2] = (-332.55);
      doubleArray1[3] = (-2444.144726);
      doubleArray1[4] = (-2444.144726);
      doubleArray1[5] = 401.435;
      doubleArray1[6] = (-193.83956);
      graggBulirschStoerIntegrator0.getStepHandlers();
      doubleArray1[7] = (-332.55);
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.initializeStep(true, (-1), doubleArray0, 401.435, doubleArray0, doubleArray0, doubleArray0, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
      threeEighthesIntegrator0.getMaxEvaluations();
      threeEighthesIntegrator0.clearStepHandlers();
      threeEighthesIntegrator0.getEventHandlers();
      threeEighthesIntegrator0.getMaxEvaluations();
      threeEighthesIntegrator0.clearEventHandlers();
      threeEighthesIntegrator0.setMaxEvaluations(561);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, (-549.321), 0.0, 0.0);
      graggBulirschStoerIntegrator0.clearStepHandlers();
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.integrate((ExpandableStatefulODE) null, (-549.321));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1000.0, 1000.0, Double.NaN, (-1103.30781888374));
      dormandPrince853Integrator0.setMaxEvaluations(37);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-387.0373087493518));
      double double0 = (-2067.8382);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 295.8;
      doubleArray0[1] = (-387.0373087493518);
      doubleArray0[2] = (-2067.8382);
      doubleArray0[3] = 315.633113482746;
      doubleArray0[4] = (-387.0373087493518);
      doubleArray0[5] = (-2067.8382);
      doubleArray0[6] = (-387.0373087493518);
      doubleArray0[7] = (-387.0373087493518);
      doubleArray0[8] = (-387.0373087493518);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(295.8, (-2067.8382), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.getMaxEvaluations();
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.LAST;
      graggBulirschStoerIntegrator0.clearStepHandlers();
      StepNormalizer stepNormalizer0 = new StepNormalizer((-387.0373087493518), (FixedStepHandler) null, stepNormalizerMode0, stepNormalizerBounds0);
      // Undeclared exception!
      try { 
        stepNormalizer0.init((-898.100851702792), doubleArray0, (-306.5441752));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.sampling.StepNormalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2927.018658, 2927.018658, 2927.018658, 2927.018658);
      dormandPrince853Integrator0.getMaxEvaluations();
      dormandPrince853Integrator0.getEvaluations();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2927.018658, 2927.018658, 2927.018658, 2927.018658);
      dormandPrince853Integrator0.getEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) 0, doubleArray0, 1000.0, doubleArray0);
      dormandPrince853Integrator0.getEvaluations();
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-460.916626824));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(304).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((double)304, 0.0, 0.0, 0.0, 0.0).when(eventHandler1).g(anyDouble() , any(double[].class));
      midpointIntegrator0.addEventHandler(eventHandler1, 2122.75883690582, 1723.21202, 304, (UnivariateSolver) null);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime(2146.55883690582);
      midpointIntegrator0.integrate(expandableStatefulODE0, 23.8);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.getEventHandlers();
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double double0 = (-460.916626824);
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-460.916626824));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn("").when(eventHandler0).toString();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(304).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double double1 = 2146.55883690582;
      expandableStatefulODE0.setTime(2146.55883690582);
      midpointIntegrator0.integrate(expandableStatefulODE0, 23.8);
      midpointIntegrator0.clearStepHandlers();
      midpointIntegrator0.addEventHandler(eventHandler0, (-460.916626824), 0.0, 305);
      midpointIntegrator0.getEventHandlers();
      double double2 = 129.4363;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2146.55883690582, 2.2737367544323206E-10, 2.6605043411254883, 129.4363);
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 2146.55883690582);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // minimal step size (2.15E03) reached, integration needs 4.80E-10
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0.0);
      midpointIntegrator0.clearEventHandlers();
      midpointIntegrator0.setMaxEvaluations((-2357));
      midpointIntegrator0.getMaxEvaluations();
      midpointIntegrator0.clearStepHandlers();
      MullerSolver mullerSolver0 = new MullerSolver(0.1413124436746325);
      midpointIntegrator0.addEventHandler((EventHandler) null, 0.1413124436746325, 0.0, 523, (UnivariateSolver) mullerSolver0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1000.0, 1000.0, Double.NaN, (-1103.30781888374));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (-1103.30781888374);
      // Undeclared exception!
      try { 
        dormandPrince853Integrator0.computeDerivatives(1000.0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2927.018658, 2927.018658, 2927.018658, 2927.018658);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      dormandPrince853Integrator0.integrate(expandableStatefulODE0, 2927.018658);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double double0 = (-460.916626824);
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-460.916626824));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      double double1 = 0.0;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime(2146.55883690582);
      midpointIntegrator0.integrate(expandableStatefulODE0, 23.8);
      midpointIntegrator0.clearStepHandlers();
      int int0 = 305;
      midpointIntegrator0.addEventHandler(eventHandler0, (-460.916626824), 0.0, 305);
      midpointIntegrator0.getEventHandlers();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 305;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(129.4363, 2146.55883690582, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.addStepHandler((StepHandler) null);
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.computeDerivatives((-2086.095), doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2927.018658, 2927.018658, 2927.018658, (-267.616768));
      int int0 = dormandPrince853Integrator0.getEvaluations();
      assertEquals(0, int0);
      
      String string0 = dormandPrince853Integrator0.getName();
      assertEquals("Dormand-Prince 8 (5, 3)", string0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2927.018658, 2927.018658, 2927.018658, 2927.018658);
      dormandPrince853Integrator0.getEvaluations();
      double[] doubleArray0 = new double[0];
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      dormandPrince853Integrator0.addEventHandler(eventHandler0, (double) 0, 2927.018658, 0);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-0.1);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-0.1);
      doubleArray1[1] = (-7.5);
      doubleArray1[2] = (-0.1);
      doubleArray1[3] = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, (-0.1), doubleArray0, doubleArray1);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (-479.495915598574), 3701.37, (-1340));
      StepNormalizer stepNormalizer0 = new StepNormalizer((-0.1), fixedStepHandler0);
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2927.018658, 2927.018658, 2927.018658, 2927.018658);
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      dormandPrince853Integrator0.addStepHandler(dummyStepHandler0);
      int int0 = dormandPrince853Integrator0.getEvaluations();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(107.0, 107.0, doubleArray0, doubleArray0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.BOTH;
      StepNormalizer stepNormalizer0 = new StepNormalizer(107.0, fixedStepHandler0, stepNormalizerMode0, stepNormalizerBounds0);
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(2550.317636377783, 2550.317636377783, 0.0, (-538.1669));
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
      dormandPrince54Integrator0.addEventHandler((EventHandler) null, 2550.317636377783, (-538.1669), (-1982), (UnivariateSolver) bracketingNthOrderBrentSolver0);
      String string0 = dormandPrince54Integrator0.getName();
      assertEquals("Dormand-Prince 5(4)", string0);
  }
}
