/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 09:53:19 GMT 2020
 */

package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.solvers.BisectionSolver;
import org.apache.commons.math3.analysis.solvers.BrentSolver;
import org.apache.commons.math3.analysis.solvers.MullerSolver2;
import org.apache.commons.math3.analysis.solvers.RegulaFalsiSolver;
import org.apache.commons.math3.analysis.solvers.RiddersSolver;
import org.apache.commons.math3.analysis.solvers.SecantSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator;
import org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.EulerIntegrator;
import org.apache.commons.math3.ode.nonstiff.GillIntegrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.nonstiff.MidpointIntegrator;
import org.apache.commons.math3.ode.sampling.DummyStepHandler;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.StepHandler;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.apache.commons.math3.ode.sampling.StepNormalizerBounds;
import org.apache.commons.math3.ode.sampling.StepNormalizerMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegrator_ESTest extends AbstractIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(986.77079982601, 986.77079982601, 986.77079982601, 986.77079982601);
      assertEquals(986.77079982601, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      GillIntegrator gillIntegrator0 = new GillIntegrator((-2760.681227));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = 986.77079982601;
      try { 
        gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter1, 1.0000000011135726, doubleArray0, 797.8681255869404, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      GillIntegrator gillIntegrator0 = new GillIntegrator(379.5433501);
      gillIntegrator0.getEventHandlers();
      gillIntegrator0.setMaxEvaluations(0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(362.10089091);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 362.10089091, doubleArray0, 6.0, doubleArray0);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 6.0;
      doubleArray1[1] = 362.10089091;
      doubleArray1[2] = 6.0;
      doubleArray1[3] = 6.0;
      gillIntegrator0.computeDerivatives(362.10089091, doubleArray1, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(362.10089091);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 362.10089091, doubleArray0, 6.0, doubleArray0);
      gillIntegrator0.getEvaluations();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(821.8750563966253);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      gillIntegrator0.addEventHandler(eventHandler0, (-697.209), 40.0, 569);
      gillIntegrator0.getCurrentSignedStepsize();
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler1).g(anyDouble() , any(double[].class));
      gillIntegrator0.addEventHandler(eventHandler1, 1.775884601423381E-8, 2315.1, 569);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      gillIntegrator0.setMaxEvaluations(66);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2.5238394737243652, doubleArray0, (double) 569, doubleArray0);
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1408.489767, doubleArray0, (-697.209), doubleArray0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        gillIntegrator0.integrate(expandableStatefulODE0, (-1.0305018010328949E-8));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (66) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(6.0);
      classicalRungeKuttaIntegrator0.getCurrentStepStart();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(821.8750563966253);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      gillIntegrator0.addEventHandler(eventHandler0, (-697.209), 40.0, 569);
      gillIntegrator0.getCurrentSignedStepsize();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2.5238394737243652, doubleArray0, (double) 569, doubleArray0);
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1408.489767, doubleArray0, (-697.209), doubleArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(986.77079982601, 986.77079982601, 986.77079982601, 986.77079982601);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(346).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      GillIntegrator gillIntegrator0 = new GillIntegrator(1786.0083010114);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      double[] doubleArray0 = new double[0];
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter1, (-2627.4880348), doubleArray0, 1786.0083010114, doubleArray0);
      try { 
        gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1645.25061953, doubleArray0, (-236.0211329452), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 692
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(6.785725312893433E149, (-1246.58)).when(eventHandler0).g(anyDouble() , any(double[].class));
      gillIntegrator0.addEventHandler(eventHandler0, 0.0, 0.0, 1183);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) 0, doubleArray0, 2453.08369, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // endpoints do not specify an interval: [0, 0]
         //
         verifyException("org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(379.5433501);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1208).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      gillIntegrator0.getStepHandlers();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      gillIntegrator0.addEventHandler(eventHandler0, (double) 1208, 696.915057535, 1208);
      double[] doubleArray0 = new double[0];
      gillIntegrator0.getCurrentSignedStepsize();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter1, (-2501.77), doubleArray0, (-2627.4880348), doubleArray0);
      try { 
        gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1408.489767, doubleArray0, 1408.489767, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 2,416
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      gillIntegrator0.setMaxEvaluations(346);
      double[] doubleArray0 = new double[0];
      try { 
        gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1044.593923, doubleArray0, 2453.08369, doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (346) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(6.0);
      classicalRungeKuttaIntegrator0.getEventHandlers();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      BisectionSolver bisectionSolver0 = new BisectionSolver();
      classicalRungeKuttaIntegrator0.addEventHandler(eventHandler0, 6.0, 6.0, 627, (UnivariateSolver) bisectionSolver0);
      classicalRungeKuttaIntegrator0.getEventHandlers();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-2563.107), (-2563.107), (-2.778205752353508), 2.4936055526796523);
      RiddersSolver riddersSolver0 = new RiddersSolver((-1.0), (-1121.5655063));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 1000.0, (-2.778205752353508), 128, (UnivariateSolver) riddersSolver0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime(128);
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 1721.091088863316);
      BrentSolver brentSolver0 = new BrentSolver((-3847.0943492316646), (-2.778205752353508), 783.533);
      graggBulirschStoerIntegrator0.addEventHandler((EventHandler) null, (-818.23136633287), 1408.489767, 0, (UnivariateSolver) brentSolver0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(986.77079982601, 986.77079982601, 986.77079982601, 986.77079982601);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime(1000.0);
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 1786.0083010114);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(986.77079982601, 986.77079982601, 986.77079982601, 986.77079982601);
      graggBulirschStoerIntegrator0.setControlFactors((-331.530182), 3.1873780814410126E-255, 1408.489767, 1408.489767);
      graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
      graggBulirschStoerIntegrator0.setMaxEvaluations((-2075));
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1947.05;
      doubleArray0[1] = 1947.05;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2330.96, 1947.05, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setStabilityCheck(false, 5, 5, 1000.0);
      int int0 = 4027;
      graggBulirschStoerIntegrator0.setStabilityCheck(false, 4027, 5, 4027);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1947.05, 4769.2965, 4769.2965, 2330.96);
      dormandPrince853Integrator0.getOrder();
      graggBulirschStoerIntegrator0.addStepHandler((StepHandler) null);
      dormandPrince853Integrator0.getMaxEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1947.05, doubleArray0, (double) 4027, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 10
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double double0 = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, 0.0, 0.0);
      int int0 = (-916);
      graggBulirschStoerIntegrator0.setInterpolationControl(true, (-916));
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.NEITHER;
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.0, fixedStepHandler0, stepNormalizerMode0, stepNormalizerBounds0);
      double[] doubleArray0 = new double[0];
      stepNormalizer0.init(0.0, doubleArray0, 0.0);
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (double) (-916));
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double double0 = 0.0;
      GillIntegrator gillIntegrator0 = new GillIntegrator(0.0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.BOTH;
      StepNormalizer stepNormalizer0 = new StepNormalizer(1075.4166311468682, fixedStepHandler0, stepNormalizerBounds0);
      gillIntegrator0.addStepHandler(stepNormalizer0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      double double1 = 2453.08369;
      // Undeclared exception!
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1044.593923, doubleArray0, 2453.08369, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, 0.0, 0.0);
      graggBulirschStoerIntegrator0.setInterpolationControl(true, (-916));
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.NEITHER;
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.0, fixedStepHandler0, stepNormalizerMode0, stepNormalizerBounds0);
      double[] doubleArray0 = new double[0];
      stepNormalizer0.init(0.0, doubleArray0, 0.0);
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(10).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      graggBulirschStoerIntegrator0.getEventHandlers();
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (double) (-916));
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(2.043049589651736E-8);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2.043049589651736E-8;
      // Undeclared exception!
      try { 
        gillIntegrator0.integrate((FirstOrderDifferentialEquations) null, 362.10089091, doubleArray0, 2.043049589651736E-8, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(1.0);
      gillIntegrator0.getCurrentSignedStepsize();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(0.0);
      gillIntegrator0.getCurrentSignedStepsize();
      gillIntegrator0.getCurrentSignedStepsize();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-2368.25827), 0.0, 0.0, Double.NaN);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 0.0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-2857.6137623);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-1344.1582604294615);
      doubleArray0[3] = 0.0;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-2857.6137623), 0.0, doubleArray0, doubleArray0);
      highamHall54Integrator0.clearEventHandlers();
      highamHall54Integrator0.clearStepHandlers();
      highamHall54Integrator0.getOrder();
      highamHall54Integrator0.getEvaluations();
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-471.685143185), (-1174.6426077191888), 424.13, (-2857.6137623));
      dormandPrince54Integrator0.getMaxEvaluations();
      dormandPrince54Integrator0.getStepHandlers();
      dormandPrince54Integrator0.setInitialStepSize(1000.0);
      dormandPrince54Integrator0.setMaxGrowth((-1332.788726964612));
      dormandPrince54Integrator0.getEventHandlers();
      dormandPrince54Integrator0.setMaxGrowth(2772.0945305314);
      dormandPrince54Integrator0.getOrder();
      dormandPrince54Integrator0.getName();
      dormandPrince54Integrator0.getStepHandlers();
      dormandPrince54Integrator0.getOrder();
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1000.0;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (-2857.6137623);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(234.1, 2110.30777763, doubleArray1, doubleArray2);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 1571.118296195);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 1
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(986.77079982601, 986.77079982601, 986.77079982601, 986.77079982601);
      graggBulirschStoerIntegrator0.getName();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(379.5433501);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      gillIntegrator0.getStepHandlers();
      double[] doubleArray0 = new double[0];
      try { 
        gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1408.489767, doubleArray0, 1408.489767, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double double0 = (-855.5474572910407);
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-855.5474572910407));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime((-855.5474572910407));
      try { 
        midpointIntegrator0.integrate(expandableStatefulODE0, (-855.5474572910407));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(0.0);
      gillIntegrator0.getMaxEvaluations();
      gillIntegrator0.getEvaluations();
      gillIntegrator0.setMaxEvaluations((-391));
      gillIntegrator0.clearEventHandlers();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(62.5, 3282.88381919478, (-2173.968999152709), 0.0);
      graggBulirschStoerIntegrator0.getEventHandlers();
      graggBulirschStoerIntegrator0.getEvaluations();
      graggBulirschStoerIntegrator0.clearEventHandlers();
      graggBulirschStoerIntegrator0.setOrderControl(3017, 1797.610140450624, 1797.610140450624);
      gillIntegrator0.getStepHandlers();
      graggBulirschStoerIntegrator0.setOrderControl(3017, 1187.09542072, 3017);
      gillIntegrator0.getEventHandlers();
      graggBulirschStoerIntegrator0.clearStepHandlers();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(986.77079982601, 986.77079982601, 986.77079982601, 986.77079982601);
      graggBulirschStoerIntegrator0.getEvaluations();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-2580.2084296695652), (-2580.2084296695652), (-901.1488654), (-1241.3003));
      highamHall54Integrator0.setInitialStepSize(1141.72);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-901.1488654);
      doubleArray0[1] = (-2580.2084296695652);
      doubleArray0[2] = (-2580.2084296695652);
      doubleArray0[3] = (-2580.2084296695652);
      doubleArray0[4] = (-1241.3003);
      doubleArray0[5] = 1141.72;
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 0.0;
      try { 
        highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 0.0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 6 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      GillIntegrator gillIntegrator0 = new GillIntegrator(986.77079982601);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 986.77079982601;
      try { 
        gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 986.77079982601, doubleArray0, 986.77079982601, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1267.2;
      doubleArray0[2] = 1313.2690085;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1267.2, 0.0, doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        highamHall54Integrator0.integrate((ExpandableStatefulODE) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-7.04);
      doubleArray0[1] = (-43.48988418106996);
      doubleArray0[2] = (-43.48988418106996);
      doubleArray0[3] = (-597.4886);
      doubleArray0[4] = (-43.48988418106996);
      doubleArray0[5] = (-597.4886);
      doubleArray0[6] = (-43.48988418106996);
      doubleArray0[7] = (-597.4886);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-43.48988418106996), (-597.4886), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setMaxEvaluations((-1960));
      graggBulirschStoerIntegrator0.setStabilityCheck(false, 3001, 3001, (-43.48988418106996));
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      graggBulirschStoerIntegrator0.addStepHandler(dummyStepHandler0);
      graggBulirschStoerIntegrator0.getMaxEvaluations();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(6.0);
      classicalRungeKuttaIntegrator0.getMaxEvaluations();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(2560.29686461011, 2560.29686461011, 2560.29686461011, 2560.29686461011);
      dormandPrince54Integrator0.setMinReduction(2560.29686461011);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      dormandPrince54Integrator0.addEventHandler(eventHandler0, (-1860.2423), 441.691383207, 312);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 2560.29686461011;
      doubleArray0[1] = 2560.29686461011;
      dormandPrince54Integrator0.clearEventHandlers();
      doubleArray0[2] = 2560.29686461011;
      dormandPrince54Integrator0.setInitialStepSize(0.0);
      dormandPrince54Integrator0.clearStepHandlers();
      // Undeclared exception!
      try { 
        dormandPrince54Integrator0.computeDerivatives(2560.29686461011, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(986.77079982601, 986.77079982601, 986.77079982601, 986.77079982601);
      graggBulirschStoerIntegrator0.clearEventHandlers();
      graggBulirschStoerIntegrator0.getMaxEvaluations();
      graggBulirschStoerIntegrator0.getStepHandlers();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-728.555));
      classicalRungeKuttaIntegrator0.getStepHandlers();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1207.6229666641643;
      doubleArray0[1] = 1207.6229666641643;
      doubleArray0[2] = 1207.6229666641643;
      doubleArray0[3] = 1207.6229666641643;
      doubleArray0[4] = 1207.6229666641643;
      doubleArray0[5] = 1207.6229666641643;
      doubleArray0[6] = 1207.6229666641643;
      doubleArray0[7] = 1207.6229666641643;
      doubleArray0[8] = 1207.6229666641643;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1207.6229666641643, 1207.6229666641643, doubleArray0, doubleArray0);
      highamHall54Integrator0.setSafety(1207.6229666641643);
      highamHall54Integrator0.getOrder();
      highamHall54Integrator0.getStepHandlers();
      int int0 = 241;
      highamHall54Integrator0.setMaxEvaluations(241);
      highamHall54Integrator0.clearStepHandlers();
      highamHall54Integrator0.setMinReduction(1207.6229666641643);
      highamHall54Integrator0.clearEventHandlers();
      highamHall54Integrator0.getOrder();
      double double0 = 0.0;
      double double1 = (-2766.79718537634);
      double double2 = (-0.19316434850839564);
      highamHall54Integrator0.setSafety((-0.19316434850839564));
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(241, 0.0, 1207.6229666641643, (-2766.79718537634), (-688.20835072));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(362.10089091);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(2784).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.getTotalDimension();
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-299.96678), 362.10089091, doubleArray0, doubleArray0);
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 1375.2102);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5,568 != 0
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(986.77079982601, 986.77079982601, 986.77079982601, 986.77079982601);
      graggBulirschStoerIntegrator0.getEventHandlers();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1548).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(4.547473508864641E-10, 2453.08369, 1044.593923, 1044.593923);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver();
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 1309.854712, 987.5064214066606, 1548, (UnivariateSolver) regulaFalsiSolver0);
      graggBulirschStoerIntegrator0.getEventHandlers();
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      graggBulirschStoerIntegrator0.addStepHandler(dummyStepHandler0);
      graggBulirschStoerIntegrator0.getCurrentStepStart();
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-804.88796754811);
      doubleArray0[1] = 462.394103;
      doubleArray0[2] = 198.0;
      doubleArray0[3] = 198.0;
      doubleArray0[4] = 198.0;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(198.0, 198.0, doubleArray0, doubleArray0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 1111.49047597674, 198.0, 0.0);
      graggBulirschStoerIntegrator0.getEventHandlers();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.setStepSizeControl(462.394103, 1315.033746, 0.0, 198.0);
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler1, 0.0, (-4284.66078), 0);
      MullerSolver2 mullerSolver2_0 = new MullerSolver2(462.394103);
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (-804.88796754811), (-2470.97), 0, (UnivariateSolver) mullerSolver2_0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        highamHall54Integrator0.integrate(expandableStatefulODE0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 5
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double double0 = 1044.593923;
      double[] doubleArray0 = new double[0];
      double double1 = 2453.08369;
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, double0, doubleArray0, double1, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1982, 386.176, 1982, 1982);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 386.176, 1064.53714, 1982);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (double) 1982);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double double0 = (-2.778205752353508);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1754.07041052, (-2.778205752353508), (-2563.107), 0.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      RiddersSolver riddersSolver0 = new RiddersSolver(0.0, 1754.07041052);
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (-2563.107), (-2.778205752353508), 128, (UnivariateSolver) riddersSolver0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 0.0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(986.77079982601);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      gillIntegrator0.integrate(expandableStatefulODE0, 986.77079982601);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double double0 = (-89.20951);
      double double1 = 0.0;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(910.15854945064, (-89.20951), 910.15854945064, 0.0);
      double double2 = 3129.46413763;
      highamHall54Integrator0.addEventHandler((EventHandler) null, (-746.3387533172385), (-692.3640206), (-1));
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        highamHall54Integrator0.computeDerivatives(3129.46413763, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(0.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      SecantSolver secantSolver0 = new SecantSolver();
      eulerIntegrator0.addEventHandler(eventHandler0, 972.8457735, 0.0, 1, (UnivariateSolver) secantSolver0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 972.8457735;
      doubleArray0[1] = 972.8457735;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = 0.03697916666666667;
      doubleArray0[4] = 972.8457735;
      doubleArray0[5] = (double) 1;
      doubleArray0[6] = 972.8457735;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = 972.8457735;
      // Undeclared exception!
      try { 
        eulerIntegrator0.computeDerivatives(972.8457735, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(986.77079982601, 986.77079982601, 986.77079982601, 986.77079982601);
      graggBulirschStoerIntegrator0.addStepHandler((StepHandler) null);
      assertEquals(986.77079982601, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(379.5433501);
      gillIntegrator0.clearStepHandlers();
      gillIntegrator0.getStepHandlers();
      double[] doubleArray0 = new double[1];
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-3424.7272674799037));
      gillIntegrator0.addStepHandler((StepHandler) null);
      gillIntegrator0.clearStepHandlers();
      gillIntegrator0.setMaxEvaluations(3163);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (-3424.7272674799037);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1198.0, (-3424.7272674799037), doubleArray0, doubleArray0);
      int int0 = dormandPrince54Integrator0.getOrder();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(986.77079982601, 986.77079982601, 986.77079982601, 986.77079982601);
      graggBulirschStoerIntegrator0.setMaxEvaluations(5);
      assertEquals(986.77079982601, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(986.77079982601, 986.77079982601, 986.77079982601, 986.77079982601);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.computeDerivatives(986.77079982601, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      double double0 = 698.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(698.0, 698.0, 698.0, 107.0);
      int int0 = 0;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 698.0;
      doubleArray0[1] = 107.0;
      doubleArray0[2] = 107.0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 107.0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.initializeStep(false, 0, doubleArray0, (-1.0006050966910838), doubleArray0, doubleArray0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
