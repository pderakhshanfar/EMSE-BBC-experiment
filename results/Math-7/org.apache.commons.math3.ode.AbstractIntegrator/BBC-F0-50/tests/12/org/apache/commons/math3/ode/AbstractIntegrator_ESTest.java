/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 01:00:23 GMT 2021
 */

package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver;
import org.apache.commons.math3.analysis.solvers.BrentSolver;
import org.apache.commons.math3.analysis.solvers.IllinoisSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.ode.EquationsMapper;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator;
import org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.GillIntegrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator;
import org.apache.commons.math3.ode.sampling.DummyStepHandler;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.StepHandler;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.apache.commons.math3.ode.sampling.StepNormalizerBounds;
import org.apache.commons.math3.ode.sampling.StepNormalizerMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegrator_ESTest extends AbstractIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 795.1817;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(795.1817, 795.1817, 795.1817, 0.0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(795.1817, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(795.1817, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(795.1817, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      
      EventHandler.Action eventHandler_Action0 = EventHandler.Action.STOP;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(eventHandler_Action0).when(eventHandler0).eventOccurred(anyDouble() , any(double[].class) , anyBoolean());
      doReturn(795.1817, 1105.02038, 2473.93354, (-348.9090170813), 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 1.0368403169781264E257, 210.98381729121502, 2146810086);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(795.1817, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(795.1817, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(795.1817, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(2, firstOrderConverter0.getDimension());
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 1332.6432;
      doubleArray1[1] = 3184.81;
      graggBulirschStoerIntegrator0.setOrderControl(2146810086, 2473.93354, 5.814040618670345E-62);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(795.1817, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(795.1817, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(795.1817, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      
      double double0 = graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1332.6432, doubleArray0, 5.814040618670345E-62, doubleArray1);
      assertEquals(2, doubleArray0.length);
      assertEquals(2, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(795.1817, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(795.1817, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(795.1817, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(2, firstOrderConverter0.getDimension());
      assertArrayEquals(new double[] {0.0, 795.1817}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {(-846003.710642165), 795.1817}, doubleArray1, 0.01);
      assertEquals(268.73075, double0, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      GillIntegrator gillIntegrator0 = new GillIntegrator((-348.9090170813));
      assertNotNull(gillIntegrator0);
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      
      GillIntegrator gillIntegrator1 = new GillIntegrator(0.0);
      assertNotNull(gillIntegrator1);
      assertEquals("Gill", gillIntegrator1.getName());
      assertEquals(Double.NaN, gillIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, gillIntegrator1.getCurrentStepStart(), 0.01);
      assertFalse(gillIntegrator1.equals((Object)gillIntegrator0));
      
      int int0 = gillIntegrator1.getMaxEvaluations();
      assertNotSame(gillIntegrator1, gillIntegrator0);
      assertEquals("Gill", gillIntegrator1.getName());
      assertEquals(Double.NaN, gillIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, gillIntegrator1.getCurrentStepStart(), 0.01);
      assertEquals(Integer.MAX_VALUE, int0);
      assertFalse(gillIntegrator1.equals((Object)gillIntegrator0));
      
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 2146810086);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(795.1817, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(795.1817, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(795.1817, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(2389.6283);
      assertNotNull(gillIntegrator0);
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(3959.786989646723, 3187.6706154194444, doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(3552.815310456917, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(3959.786989646723, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(3187.6706154194444, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      graggBulirschStoerIntegrator0.addEventHandler((EventHandler) null, 865.417205, 865.417205, 7);
      assertEquals(0, doubleArray0.length);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(3552.815310456917, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(3959.786989646723, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(3187.6706154194444, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 865.417205, doubleArray0, 2389.6283, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2250.0;
      doubleArray0[1] = (-13.535385045723157);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-13.535385045723157), (-13.535385045723157), 2250.0, 2250.0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      
      EventHandler.Action eventHandler_Action0 = EventHandler.Action.RESET_DERIVATIVES;
      EventHandler.Action eventHandler_Action1 = EventHandler.Action.RESET_STATE;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(eventHandler_Action0, eventHandler_Action1).when(eventHandler0).eventOccurred(anyDouble() , any(double[].class) , anyBoolean());
      doReturn(2250.0, 1105.02038, 2473.93354, (-348.9090170813), 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 3946.251604601, 5.814040618670345E-62, 1328);
      assertNotSame(eventHandler_Action0, eventHandler_Action1);
      assertNotSame(eventHandler_Action1, eventHandler_Action0);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertFalse(eventHandler_Action0.equals((Object)eventHandler_Action1));
      assertFalse(eventHandler_Action1.equals((Object)eventHandler_Action0));
      
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(2, firstOrderConverter0.getDimension());
      
      double double0 = graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-13.535385045723157), doubleArray0, 3184.81, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(2, firstOrderConverter0.getDimension());
      assertArrayEquals(new double[] {(-41040.83629580614), (-13.535385045723157)}, doubleArray0, 0.01);
      assertEquals(3184.81, double0, 0.01);
      
      GillIntegrator gillIntegrator0 = new GillIntegrator((-13.535385045723157));
      assertNotNull(gillIntegrator0);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1, 1.142007304008196E26, doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(dormandPrince853Integrator0);
      assertEquals(1.0, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(1.142007304008196E26, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(1.0686474180047393E13, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertArrayEquals(new double[] {(-41040.83629580614), (-13.535385045723157)}, doubleArray0, 0.01);
      
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      BrentSolver brentSolver0 = new BrentSolver(1, 2108.6976686928, 1);
      assertNotNull(brentSolver0);
      assertEquals(0.0, brentSolver0.getStartValue(), 0.01);
      assertEquals(1.0, brentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(2108.6976686928, brentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0, brentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, brentSolver0.getMin(), 0.01);
      assertEquals(0.0, brentSolver0.getMax(), 0.01);
      
      double double1 = graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-348.9090170813), doubleArray0, (-13.535385045723157), doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(2, firstOrderConverter0.getDimension());
      assertArrayEquals(new double[] {(-45580.24753959059), (-13.535385045723157)}, doubleArray0, 0.01);
      assertEquals((-13.535385045723157), double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2250.0;
      doubleArray0[1] = (-13.535385045723157);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-13.535385045723157), (-13.535385045723157), 2250.0, 2250.0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      
      EventHandler.Action eventHandler_Action0 = EventHandler.Action.RESET_DERIVATIVES;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(eventHandler_Action0).when(eventHandler0).eventOccurred(anyDouble() , any(double[].class) , anyBoolean());
      doReturn(2250.0, (-345.525852708785), 2250.0, 3198.3353850457233, (-13.535385045723157)).when(eventHandler0).g(anyDouble() , any(double[].class));
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 3946.251604601, 5.814040618670345E-62, 1328);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(2, firstOrderConverter0.getDimension());
      
      double double0 = graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-13.535385045723157), doubleArray0, 3184.81, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(2, firstOrderConverter0.getDimension());
      assertArrayEquals(new double[] {(-41040.83629580611), (-13.535385045723157)}, doubleArray0, 0.01);
      assertEquals(3184.81, double0, 0.01);
      
      GillIntegrator gillIntegrator0 = new GillIntegrator((-13.535385045723157));
      assertNotNull(gillIntegrator0);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      
      int int0 = gillIntegrator0.getMaxEvaluations();
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Integer.MAX_VALUE, int0);
      
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      assertNotNull(dummyStepHandler0);
      
      graggBulirschStoerIntegrator0.addStepHandler(dummyStepHandler0);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1, 4321.438499105963, 3184.81, (-861.2177825350318));
      assertNotNull(dormandPrince853Integrator0);
      assertEquals(1.0, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(4321.438499105963, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(65.73764902326492, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertNotNull(expandableStatefulODE0);
      assertEquals(2, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      
      // Undeclared exception!
      dormandPrince853Integrator0.integrate(expandableStatefulODE0, (-13.535385045723157));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2250.0;
      doubleArray0[1] = (-13.535385045723157);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-13.535385045723157), (-13.535385045723157), 2250.0, 2250.0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      
      EventHandler.Action eventHandler_Action0 = EventHandler.Action.RESET_DERIVATIVES;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(eventHandler_Action0).when(eventHandler0).eventOccurred(anyDouble() , any(double[].class) , anyBoolean());
      doReturn(2250.0, (-345.525852708785), 2250.0, 3198.3353850457233, (-13.535385045723157)).when(eventHandler0).g(anyDouble() , any(double[].class));
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 3946.251604601, 5.814040618670345E-62, 1328);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(2, firstOrderConverter0.getDimension());
      
      double double0 = graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 435.7, doubleArray0, (-13.535385045723157), doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(2, firstOrderConverter0.getDimension());
      assertArrayEquals(new double[] {8330.573912757538, (-13.535385045723157)}, doubleArray0, 0.01);
      assertEquals((-13.535385045723157), double0, 0.01);
      
      graggBulirschStoerIntegrator0.setOrderControl(1, 1.0, (-2256.869));
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      
      double double1 = graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(13.535385045723157, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2250.0;
      doubleArray0[1] = (-13.535385045723157);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-13.535385045723157), (-13.535385045723157), 2250.0, 2250.0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      
      EventHandler.Action eventHandler_Action0 = EventHandler.Action.STOP;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(eventHandler_Action0).when(eventHandler0).eventOccurred(anyDouble() , any(double[].class) , anyBoolean());
      doReturn((-5.8180712702152444E212), (double)1, 416.2613186, 2250.0, (-13.535385045723157)).when(eventHandler0).g(anyDouble() , any(double[].class));
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      assertNotNull(dummyStepHandler0);
      
      graggBulirschStoerIntegrator0.addStepHandler(dummyStepHandler0);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 3946.251604601, 5.814040618670345E-62, 1328);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(2, firstOrderConverter0.getDimension());
      
      double double0 = graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1.4210854715202004E-11, doubleArray0, (-5.8180712702152444E212), doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(2, firstOrderConverter0.getDimension());
      assertArrayEquals(new double[] {2341.603324167993, (-13.535385045723157)}, doubleArray0, 0.01);
      assertEquals((-6.767692522847367), double0, 0.01);
      
      GillIntegrator gillIntegrator0 = new GillIntegrator(2.4533658027648926);
      assertNotNull(gillIntegrator0);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      int int0 = gillIntegrator0.getMaxEvaluations();
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Integer.MAX_VALUE, int0);
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertNotNull(expandableStatefulODE0);
      assertEquals(2, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 416.2613186);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2250.0;
      doubleArray0[1] = (-13.535385045723157);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-13.535385045723157), (-13.535385045723157), 2250.0, 2250.0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      assertNotNull(dummyStepHandler0);
      
      graggBulirschStoerIntegrator0.addStepHandler(dummyStepHandler0);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 0.9999999999715783, 1672.295520807004, 10);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(2, firstOrderConverter0.getDimension());
      
      double double0 = graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2.686613082885742, doubleArray0, 4.267089756924666E-8, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(2, firstOrderConverter0.getDimension());
      assertArrayEquals(new double[] {2286.3643419681684, (-13.535385045723157)}, doubleArray0, 0.01);
      assertEquals(4.267089748211106E-8, double0, 0.01);
      
      GillIntegrator gillIntegrator0 = new GillIntegrator(1328);
      assertNotNull(gillIntegrator0);
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      int int0 = gillIntegrator0.getMaxEvaluations();
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2250.0;
      doubleArray0[1] = (-13.535385045723157);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-13.535385045723157), (-13.535385045723157), 2250.0, 2250.0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      int int0 = 2142324668;
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 3946.251604601, 2250.0, 2142324668);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(2, firstOrderConverter0.getDimension());
      
      double[] doubleArray1 = new double[2];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 3184.81;
      doubleArray1[1] = 9.15109220707761E72;
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 9.15109220707761E72, doubleArray0, Double.NaN, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2250.0;
      doubleArray0[1] = (-13.535385045723157);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-13.535385045723157), (-13.535385045723157), 2250.0, 2250.0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      EventHandler.Action eventHandler_Action0 = EventHandler.Action.RESET_DERIVATIVES;
      Collection<StepHandler> collection0 = graggBulirschStoerIntegrator0.getStepHandlers();
      assertNotNull(collection0);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.setMaxEvaluations(1);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (-1142.211571), (-1244.2413185443), 1);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(2, firstOrderConverter0.getDimension());
      
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-5.468175655175594E-8), doubleArray0, (-1142.211571), doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (1) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2250.0;
      doubleArray0[1] = (-13.535385045723157);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-13.535385045723157), (-13.535385045723157), 2250.0, 2250.0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      
      EventHandler.Action eventHandler_Action0 = EventHandler.Action.STOP;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(eventHandler_Action0).when(eventHandler0).eventOccurred(anyDouble() , any(double[].class) , anyBoolean());
      doReturn((-5.8180712702152444E212), (double)1, 416.2613186, 2250.0, (-13.535385045723157)).when(eventHandler0).g(anyDouble() , any(double[].class));
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      assertNotNull(dummyStepHandler0);
      
      graggBulirschStoerIntegrator0.addStepHandler(dummyStepHandler0);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 3946.251604601, 5.814040618670345E-62, 1328);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(2, firstOrderConverter0.getDimension());
      
      double double0 = graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-13.535385045723157), doubleArray0, 3184.81, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(2, firstOrderConverter0.getDimension());
      assertArrayEquals(new double[] {2158.396675832007, (-13.535385045723157)}, doubleArray0, 0.01);
      assertEquals((-6.767692522861563), double0, 0.01);
      
      GillIntegrator gillIntegrator0 = new GillIntegrator((-13.535385045723157));
      assertNotNull(gillIntegrator0);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      
      int int0 = gillIntegrator0.getEvaluations();
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0, int0);
      
      int int1 = gillIntegrator0.getMaxEvaluations();
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Integer.MAX_VALUE, int1);
      assertFalse(int1 == int0);
      
      graggBulirschStoerIntegrator0.addStepHandler(dummyStepHandler0);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-13.535385045723157);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-13.535385045723157), (-13.535385045723157), 2250.0, 0.0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      
      EventHandler.Action eventHandler_Action0 = EventHandler.Action.STOP;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(eventHandler_Action0).when(eventHandler0).eventOccurred(anyDouble() , any(double[].class) , anyBoolean());
      doReturn(2250.0, (-345.525852708785), 2250.0, 3198.3353850457233, (-13.535385045723157)).when(eventHandler0).g(anyDouble() , any(double[].class));
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 3946.251604601, 5.814040618670345E-62, 1328);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(2, firstOrderConverter0.getDimension());
      
      double double0 = graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-13.535385045723157), doubleArray0, 3184.81, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(2, firstOrderConverter0.getDimension());
      assertArrayEquals(new double[] {(-91.60332416799334), (-13.535385045723157)}, doubleArray0, 0.01);
      assertEquals((-6.767692522861555), double0, 0.01);
      
      GillIntegrator gillIntegrator0 = new GillIntegrator((-13.535385045723157));
      assertNotNull(gillIntegrator0);
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      
      int int0 = gillIntegrator0.getMaxEvaluations();
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Integer.MAX_VALUE, int0);
      
      int int1 = graggBulirschStoerIntegrator0.getEvaluations();
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(11, int1);
      assertFalse(int1 == int0);
      
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer0 = new StepNormalizer(1, fixedStepHandler0);
      assertNotNull(stepNormalizer0);
      
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2250.0;
      doubleArray0[1] = (-13.535385045723157);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-13.535385045723157), (-13.535385045723157), 2250.0, 2250.0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      
      EventHandler.Action eventHandler_Action0 = EventHandler.Action.STOP;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-5.8180712702152444E212), (double)1, 416.2613186, 2250.0, (-13.535385045723157)).when(eventHandler0).g(anyDouble() , any(double[].class));
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (-13.535385045723157), (-13.535385045723157), 1328);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(2, firstOrderConverter0.getDimension());
      
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 3946.251604601, doubleArray0, 2250.0, doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (1,328) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2250.0;
      doubleArray0[1] = 2250.0;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2250.0, 2250.0, 2250.0, 2250.0);
      assertNotNull(dormandPrince853Integrator0);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(2250.0, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(2250.0, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(2250.0, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-13.535385045723157), 2250.0, 2250.0, 2250.0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(174.51251059129572, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(2250.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(2, firstOrderConverter0.getDimension());
      
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator1 = new GraggBulirschStoerIntegrator(3184.81, 1.0, doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(graggBulirschStoerIntegrator1);
      assertEquals(1.0, graggBulirschStoerIntegrator1.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator1.getCurrentStepStart(), 0.01);
      assertEquals(3184.81, graggBulirschStoerIntegrator1.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator1.getName());
      assertEquals(56.43412088444366, graggBulirschStoerIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertArrayEquals(new double[] {2250.0, 2250.0}, doubleArray0, 0.01);
      assertFalse(graggBulirschStoerIntegrator1.equals((Object)graggBulirschStoerIntegrator0));
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator1.addEventHandler(eventHandler0, (-569.08977013), (-218.51856), 1);
      assertEquals(2, doubleArray0.length);
      assertNotSame(graggBulirschStoerIntegrator1, graggBulirschStoerIntegrator0);
      assertEquals(1.0, graggBulirschStoerIntegrator1.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator1.getCurrentStepStart(), 0.01);
      assertEquals(3184.81, graggBulirschStoerIntegrator1.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator1.getName());
      assertEquals(56.43412088444366, graggBulirschStoerIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertArrayEquals(new double[] {2250.0, 2250.0}, doubleArray0, 0.01);
      assertFalse(graggBulirschStoerIntegrator1.equals((Object)graggBulirschStoerIntegrator0));
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      assertNotNull(firstOrderConverter1);
      assertEquals(0, firstOrderConverter1.getDimension());
      assertFalse(firstOrderConverter1.equals((Object)firstOrderConverter0));
      
      double double0 = graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 5.814040618670345E-62, doubleArray0, 3184.81, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotSame(graggBulirschStoerIntegrator0, graggBulirschStoerIntegrator1);
      assertNotSame(firstOrderConverter0, firstOrderConverter1);
      assertEquals(174.51251059129572, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(2250.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(2, firstOrderConverter0.getDimension());
      assertArrayEquals(new double[] {7168072.5, 2250.0}, doubleArray0, 0.01);
      assertEquals(3184.8099999999995, double0, 0.01);
      assertFalse(graggBulirschStoerIntegrator0.equals((Object)graggBulirschStoerIntegrator1));
      assertFalse(firstOrderConverter0.equals((Object)firstOrderConverter1));
      
      GillIntegrator gillIntegrator0 = new GillIntegrator(3184.8099999999995);
      assertNotNull(gillIntegrator0);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gill", gillIntegrator0.getName());
      
      int int0 = gillIntegrator0.getMaxEvaluations();
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double double0 = 2252.6299419344687;
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = 2252.6299419344687;
      doubleArray0[1] = 2252.6299419344687;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2252.6299419344687, 0.0, 2252.6299419344687, 2252.6299419344687);
      assertNotNull(dormandPrince853Integrator0);
      assertEquals(0.0, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(2252.6299419344687, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(0.0, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 4.878798101459259E-8;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(4.878798101459259E-8, 2250.0, doubleArray1, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(4.878798101459259E-8, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(2250.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0.010477259053914497, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertArrayEquals(new double[] {0.0, 2252.6299419344687}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4.878798101459259E-8}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 416.2613186, 2.220446049250313E-13, 1328);
      assertEquals(2, doubleArray0.length);
      assertEquals(1, doubleArray1.length);
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(4.878798101459259E-8, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(2250.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0.010477259053914497, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertArrayEquals(new double[] {0.0, 2252.6299419344687}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {4.878798101459259E-8}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(2, firstOrderConverter0.getDimension());
      
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 3184.81, doubleArray0, 3946.251604601, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 2
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double double0 = (-13.535385045723157);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2250.0;
      doubleArray0[1] = (-13.535385045723157);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-13.535385045723157), (-13.535385045723157), 2250.0, 2250.0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      EventHandler.Action eventHandler_Action0 = EventHandler.Action.RESET_DERIVATIVES;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(eventHandler_Action0).when(eventHandler0).eventOccurred(anyDouble() , any(double[].class) , anyBoolean());
      doReturn((-5.8180712702152444E212), (double)1, 416.2613186, 2250.0, (-13.535385045723157)).when(eventHandler0).g(anyDouble() , any(double[].class));
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 3946.251604601, 5.814040618670345E-62, 1328);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(2, firstOrderConverter0.getDimension());
      
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-13.535385045723157), doubleArray0, 3184.81, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [-6.768, 6.768], values: [-13.535, -13.535]
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2250.0;
      doubleArray0[1] = (-13.535385045723157);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-13.535385045723157), (-13.535385045723157), 2250.0, 2250.0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      
      EventHandler.Action eventHandler_Action0 = EventHandler.Action.STOP;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(eventHandler_Action0).when(eventHandler0).eventOccurred(anyDouble() , any(double[].class) , anyBoolean());
      doReturn((-5.8180712702152444E212), (double)1, 416.2613186, 2250.0, (-13.535385045723157)).when(eventHandler0).g(anyDouble() , any(double[].class));
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 3946.251604601, 5.814040618670345E-62, 1328);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(2, firstOrderConverter0.getDimension());
      
      double double0 = graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-13.535385045723157), doubleArray0, 3184.81, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(2, firstOrderConverter0.getDimension());
      assertArrayEquals(new double[] {2158.396675832007, (-13.535385045723157)}, doubleArray0, 0.01);
      assertEquals((-6.767692522861563), double0, 0.01);
      
      GillIntegrator gillIntegrator0 = new GillIntegrator((-13.535385045723157));
      assertNotNull(gillIntegrator0);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gill", gillIntegrator0.getName());
      
      int int0 = gillIntegrator0.getEvaluations();
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(0, int0);
      
      int int1 = gillIntegrator0.getMaxEvaluations();
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Integer.MAX_VALUE, int1);
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2250.0;
      doubleArray0[1] = (-13.535385045723157);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-13.535385045723157), (-13.535385045723157), 2250.0, 2250.0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 3946.251604601, 5.814040618670345E-62, 1328);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(2, firstOrderConverter0.getDimension());
      
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator1 = new GraggBulirschStoerIntegrator(Double.NaN, 2108.6976686928, doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(graggBulirschStoerIntegrator1);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator1.getMinStep(), 0.01);
      assertEquals(2108.6976686928, graggBulirschStoerIntegrator1.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator1.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator1.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertArrayEquals(new double[] {2250.0, (-13.535385045723157)}, doubleArray0, 0.01);
      assertFalse(graggBulirschStoerIntegrator1.equals((Object)graggBulirschStoerIntegrator0));
      
      double double0 = graggBulirschStoerIntegrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) 1, doubleArray0, (-805.79549603), doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotSame(graggBulirschStoerIntegrator1, graggBulirschStoerIntegrator0);
      assertEquals(2, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator1.getMinStep(), 0.01);
      assertEquals(2108.6976686928, graggBulirschStoerIntegrator1.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator1.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator1.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertArrayEquals(new double[] {13170.287691921258, (-13.535385045723157)}, doubleArray0, 0.01);
      assertEquals((-805.79549603), double0, 0.01);
      assertFalse(graggBulirschStoerIntegrator1.equals((Object)graggBulirschStoerIntegrator0));
      
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1.0));
      assertNotNull(gillIntegrator0);
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      int int0 = gillIntegrator0.getMaxEvaluations();
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2250.0;
      doubleArray0[1] = (-13.535385045723157);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-13.535385045723157), (-13.535385045723157), 2250.0, 2250.0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((EventHandler.Action) null, (EventHandler.Action) null).when(eventHandler0).eventOccurred(anyDouble() , any(double[].class) , anyBoolean());
      doReturn(2250.0, 1105.02038, 2473.93354, (-348.9090170813), 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 3946.251604601, 5.814040618670345E-62, 1328);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(2, firstOrderConverter0.getDimension());
      
      double double0 = graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-13.535385045723157), doubleArray0, 3184.81, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(2, firstOrderConverter0.getDimension());
      assertArrayEquals(new double[] {(-41040.83629580614), (-13.535385045723157)}, doubleArray0, 0.01);
      assertEquals(3184.81, double0, 0.01);
      
      GillIntegrator gillIntegrator0 = new GillIntegrator((-13.535385045723157));
      assertNotNull(gillIntegrator0);
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1, 1.142007304008196E26, doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(dormandPrince853Integrator0);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(1.0686474180047393E13, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(1.0, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(1.142007304008196E26, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertArrayEquals(new double[] {(-41040.83629580614), (-13.535385045723157)}, doubleArray0, 0.01);
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertNotNull(expandableStatefulODE0);
      assertEquals(2, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      
      // Undeclared exception!
      dormandPrince853Integrator0.integrate(expandableStatefulODE0, 2250.0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2250.0;
      doubleArray0[1] = (-13.535385045723157);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-13.535385045723157), (-13.535385045723157), 2250.0, 2250.0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(2, firstOrderConverter0.getDimension());
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertNotNull(expandableStatefulODE0);
      assertEquals(2, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2250.0, 2108.6976686928, 1, 1552.008815253675);
      assertNotNull(dormandPrince853Integrator0);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(2178.203331775709, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(2250.0, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(2108.6976686928, dormandPrince853Integrator0.getMaxStep(), 0.01);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      dormandPrince853Integrator0.addEventHandler(eventHandler0, 2583.0469271, 4.547473508864641E-10, 2145338309);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(2178.203331775709, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(2250.0, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(2108.6976686928, dormandPrince853Integrator0.getMaxStep(), 0.01);
      
      // Undeclared exception!
      dormandPrince853Integrator0.integrate(expandableStatefulODE0, 767.9434596);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2250.0;
      doubleArray0[1] = (-13.535385045723157);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-13.535385045723157), (-13.535385045723157), 2250.0, 2250.0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(2, firstOrderConverter0.getDimension());
      
      double double0 = graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-13.535385045723157), doubleArray0, 3184.81, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(2, firstOrderConverter0.getDimension());
      assertArrayEquals(new double[] {(-41040.83629580614), (-13.535385045723157)}, doubleArray0, 0.01);
      assertEquals(3184.81, double0, 0.01);
      
      GillIntegrator gillIntegrator0 = new GillIntegrator(2250.0);
      assertNotNull(gillIntegrator0);
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      
      int int0 = gillIntegrator0.getMaxEvaluations();
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double double0 = (-13.535385045723157);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2250.0;
      doubleArray0[1] = (-13.535385045723157);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-13.535385045723157), (-13.535385045723157), 2250.0, 2250.0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((EventHandler.Action) null).when(eventHandler0).eventOccurred(anyDouble() , any(double[].class) , anyBoolean());
      doReturn((-5.8180712702152444E212), (double)1, 416.2613186, 2250.0, (-13.535385045723157)).when(eventHandler0).g(anyDouble() , any(double[].class));
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 3946.251604601, 5.814040618670345E-62, 1328);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(2, firstOrderConverter0.getDimension());
      
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-13.535385045723157), doubleArray0, 3184.81, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [-6.768, 0], values: [-13.535, -13.535]
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double double0 = (-13.535385045723157);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2250.0;
      doubleArray0[1] = (-13.535385045723157);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-13.535385045723157), (-13.535385045723157), 2250.0, 2250.0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(140.2713, 1361.2431, (-902.0509), 815.1, (-13.535385045723157)).when(eventHandler0).g(anyDouble() , any(double[].class));
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 3946.251604601, 5.814040618670345E-62, 1328);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(2, firstOrderConverter0.getDimension());
      
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-13.535385045723157), doubleArray0, 3184.81, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [0, 13.535], values: [-13.535, -13.535]
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2250.0;
      doubleArray0[1] = (-13.535385045723157);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-13.535385045723157), (-13.535385045723157), 2250.0, 2250.0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 3946.251604601, 5.814040618670345E-62, 1328);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(2, firstOrderConverter0.getDimension());
      
      double double0 = graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-13.535385045723157), doubleArray0, 3184.81, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(2, firstOrderConverter0.getDimension());
      assertArrayEquals(new double[] {(-41040.83629580614), (-13.535385045723157)}, doubleArray0, 0.01);
      assertEquals(3184.81, double0, 0.01);
      
      GillIntegrator gillIntegrator0 = new GillIntegrator((-13.535385045723157));
      assertNotNull(gillIntegrator0);
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      int int0 = gillIntegrator0.getMaxEvaluations();
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2250.0;
      doubleArray0[1] = (-13.535385045723157);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-13.535385045723157), 2250.0, (-13.535385045723157), 2250.0);
      assertNotNull(dormandPrince853Integrator0);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(13.535385045723157, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(174.51251059129572, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(2250.0, dormandPrince853Integrator0.getMaxStep(), 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-13.535385045723157), (-13.535385045723157), 2250.0, 2250.0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(2, firstOrderConverter0.getDimension());
      
      double double0 = graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 3184.81, doubleArray0, 0.0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(2, firstOrderConverter0.getDimension());
      assertArrayEquals(new double[] {45357.62964747038, (-13.535385045723157)}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      GillIntegrator gillIntegrator0 = new GillIntegrator(3184.81);
      assertNotNull(gillIntegrator0);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gill", gillIntegrator0.getName());
      
      int int0 = gillIntegrator0.getMaxEvaluations();
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Integer.MAX_VALUE, int0);
      
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(2018.0000000001137, 0.0, 1, 45357.62964747038);
      assertNotNull(highamHall54Integrator0);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(2018.0000000001137, highamHall54Integrator0.getMinStep(), 0.01);
      
      int int1 = highamHall54Integrator0.getOrder();
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(2018.0000000001137, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(5, int1);
      assertFalse(int1 == int0);
      
      graggBulirschStoerIntegrator0.computeDerivatives(711.78, doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertArrayEquals(new double[] {(-13.535385045723157), 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2250.0;
      doubleArray0[1] = 2250.0;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2250.0, 2250.0, 2250.0, 2250.0);
      assertNotNull(dormandPrince853Integrator0);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(2250.0, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(2250.0, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(2250.0, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1, 2250.0, (-1229.0481114), 2044.0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(1.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(2250.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(47.43416490252569, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(2, firstOrderConverter0.getDimension());
      
      double double0 = 0.0;
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2250.0, doubleArray0, 2250.0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-872.5012745842), (-872.5012745842), (-1342.98265355373), (-872.5012745842));
      assertNotNull(dormandPrince853Integrator0);
      assertEquals(872.5012745842, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(872.5012745842, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(872.5012745842, dormandPrince853Integrator0.getMaxStep(), 0.01);
      
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2.220446049250313E-13, 1000.0, 1000.0, 4.547473508864641E-10);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(1000.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(1.4901161193847656E-5, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(2.220446049250313E-13, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 3184.81, doubleArray0, 0.0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2250.0, 2250.0, 1109.53085195, 1109.53085195);
      assertNotNull(dormandPrince853Integrator0);
      assertEquals(2250.0, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(2250.0, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(2250.0, dormandPrince853Integrator0.getMinStep(), 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      Collection<EventHandler> collection0 = dormandPrince853Integrator0.getEventHandlers();
      assertNotNull(collection0);
      assertEquals(2250.0, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(2250.0, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(2250.0, dormandPrince853Integrator0.getMinStep(), 0.01);
      
      dormandPrince853Integrator0.setSafety(2.220446049250313E-13);
      assertEquals(2.220446049250313E-13, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(2250.0, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(2250.0, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(2250.0, dormandPrince853Integrator0.getMinStep(), 0.01);
      
      dormandPrince853Integrator0.setMaxEvaluations(1123);
      assertEquals(2.220446049250313E-13, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(2250.0, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(2250.0, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(2250.0, dormandPrince853Integrator0.getMinStep(), 0.01);
      
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertNotNull(expandableStatefulODE0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      
      try { 
        dormandPrince853Integrator0.integrate(expandableStatefulODE0, (double) 1123);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (1,123) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-13.535385045723157);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-13.535385045723157), 0.0, (-13.535385045723157), 2250.0);
      assertNotNull(dormandPrince853Integrator0);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(13.535385045723157, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(0.0, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(0.0, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2.603954315185547, (-498.08972211535615), 0.0, 2250.0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(36.01392621267294, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(2.603954315185547, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(498.08972211535615, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(2, firstOrderConverter0.getDimension());
      
      double[] doubleArray1 = new double[8];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 2250.0;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = (double) 1;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 3184.81;
      doubleArray1[5] = 2.603954315185547;
      doubleArray1[6] = 2250.0;
      doubleArray1[7] = 3184.81;
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2.603954315185547, doubleArray0, 1000.0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 2
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2250.0;
      doubleArray0[1] = (-13.535385045723157);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-13.535385045723157), 2250.0, (-13.535385045723157), 2250.0);
      assertNotNull(dormandPrince853Integrator0);
      assertEquals(2250.0, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(13.535385045723157, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(174.51251059129572, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-13.535385045723157), (-13.535385045723157), 2250.0, 2250.0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(2, firstOrderConverter0.getDimension());
      
      double double0 = graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 1000.0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(2, firstOrderConverter0.getDimension());
      assertArrayEquals(new double[] {(-11285.385045723115), (-13.535385045723157)}, doubleArray0, 0.01);
      assertEquals(1000.0, double0, 0.01);
      
      double double1 = graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 3184.81, doubleArray0, 0.0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(2, firstOrderConverter0.getDimension());
      assertArrayEquals(new double[] {31822.24460174653, (-13.535385045723157)}, doubleArray0, 0.01);
      assertEquals(0.0, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      graggBulirschStoerIntegrator0.setOrderControl(1, (-13.535385045723157), (-6.038239639506472E-32));
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-13.535385045723157), 4.547473508864641E-10, (-1513.71146), (-2911.263407282985));
      assertNotNull(highamHall54Integrator0);
      assertEquals(4.547473508864641E-10, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(13.535385045723157, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(7.84549583695694E-5, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      
      int int0 = highamHall54Integrator0.getOrder();
      assertEquals(4.547473508864641E-10, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(13.535385045723157, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(7.84549583695694E-5, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(5, int0);
      
      graggBulirschStoerIntegrator0.setInterpolationControl(false, 5);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(2250.0);
      assertNotNull(gillIntegrator0);
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      
      Collection<EventHandler> collection0 = gillIntegrator0.getEventHandlers();
      assertNotNull(collection0);
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      
      int int0 = gillIntegrator0.getMaxEvaluations();
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Integer.MAX_VALUE, int0);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      doubleArray0[2] = (double) Integer.MAX_VALUE;
      doubleArray0[3] = (double) Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        gillIntegrator0.integrate((FirstOrderDifferentialEquations) null, (double) Integer.MAX_VALUE, doubleArray0, 2.147483647E9, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-15.0), (-15.0), (-3244.5964049609142), (-3244.5964049609142));
      assertNotNull(dormandPrince54Integrator0);
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals(15.0, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(15.0, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(15.0, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      
      dormandPrince54Integrator0.setMaxEvaluations((-24));
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals(15.0, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(15.0, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(15.0, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      
      Collection<EventHandler> collection0 = dormandPrince54Integrator0.getEventHandlers();
      assertNotNull(collection0);
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals(15.0, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(15.0, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(15.0, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      
      int int0 = dormandPrince54Integrator0.getOrder();
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals(15.0, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(15.0, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(15.0, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(5, int0);
      
      GillIntegrator gillIntegrator0 = new GillIntegrator(4842.20192);
      assertNotNull(gillIntegrator0);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      GillIntegrator gillIntegrator1 = new GillIntegrator((-24));
      assertNotNull(gillIntegrator1);
      assertEquals(Double.NaN, gillIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, gillIntegrator1.getCurrentStepStart(), 0.01);
      assertEquals("Gill", gillIntegrator1.getName());
      assertFalse(gillIntegrator1.equals((Object)gillIntegrator0));
      
      Collection<EventHandler> collection1 = gillIntegrator1.getEventHandlers();
      assertNotSame(gillIntegrator1, gillIntegrator0);
      assertNotSame(collection1, collection0);
      assertNotNull(collection1);
      assertEquals(Double.NaN, gillIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, gillIntegrator1.getCurrentStepStart(), 0.01);
      assertEquals("Gill", gillIntegrator1.getName());
      assertFalse(gillIntegrator1.equals((Object)gillIntegrator0));
      assertFalse(collection1.equals((Object)collection0));
      
      int int1 = gillIntegrator1.getMaxEvaluations();
      assertNotSame(gillIntegrator1, gillIntegrator0);
      assertEquals(Double.NaN, gillIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, gillIntegrator1.getCurrentStepStart(), 0.01);
      assertEquals("Gill", gillIntegrator1.getName());
      assertEquals(Integer.MAX_VALUE, int1);
      assertFalse(gillIntegrator1.equals((Object)gillIntegrator0));
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1.0), (-849.0), (-2.751925069084042E-8), (-0.18785203464136616));
      assertNotNull(dormandPrince853Integrator0);
      assertEquals(29.13760456866693, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(849.0, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(1.0, dormandPrince853Integrator0.getMinStep(), 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertNotNull(expandableStatefulODE0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      
      EquationsMapper[] equationsMapperArray0 = expandableStatefulODE0.getSecondaryMappers();
      assertEquals(0, equationsMapperArray0.length);
      assertNotNull(equationsMapperArray0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1.0);
      DormandPrince853Integrator dormandPrince853Integrator1 = new DormandPrince853Integrator(1358.13558013164, (-849.0), doubleArray0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertNotNull(dormandPrince853Integrator1);
      assertEquals(0.2, dormandPrince853Integrator1.getMinReduction(), 0.01);
      assertEquals(1073.8049671759588, dormandPrince853Integrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(1358.13558013164, dormandPrince853Integrator1.getMinStep(), 0.01);
      assertEquals(849.0, dormandPrince853Integrator1.getMaxStep(), 0.01);
      assertEquals(8, dormandPrince853Integrator1.getOrder());
      assertEquals(10.0, dormandPrince853Integrator1.getMaxGrowth(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator1.getCurrentStepStart(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator1.getName());
      assertEquals(0.9, dormandPrince853Integrator1.getSafety(), 0.01);
      assertArrayEquals(new double[] {0.0, (-1.0)}, doubleArray0, 0.01);
      assertFalse(dormandPrince853Integrator1.equals((Object)dormandPrince853Integrator0));
      
      try { 
        dormandPrince853Integrator1.integrate(expandableStatefulODE0, (-849.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 2
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-943.961));
      assertNotNull(gillIntegrator0);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      int int0 = gillIntegrator0.getMaxEvaluations();
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Integer.MAX_VALUE, int0);
      
      double double0 = gillIntegrator0.getCurrentStepStart();
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(2250.0);
      assertNotNull(gillIntegrator0);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gill", gillIntegrator0.getName());
      
      Collection<EventHandler> collection0 = gillIntegrator0.getEventHandlers();
      assertNotNull(collection0);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gill", gillIntegrator0.getName());
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 3184.81;
      doubleArray0[1] = (-1.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertNotNull(expandableStatefulODE0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      
      double double0 = gillIntegrator0.getCurrentStepStart();
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, double0, 0.01);
      
      int int0 = gillIntegrator0.getMaxEvaluations();
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2250.0;
      doubleArray0[1] = (-13.535385045723157);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-13.535385045723157), 2250.0, (-13.535385045723157), 2250.0);
      assertNotNull(dormandPrince853Integrator0);
      assertEquals(174.51251059129572, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(2250.0, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(13.535385045723157, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-13.535385045723157), (-13.535385045723157), 2250.0, 2250.0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(2, firstOrderConverter0.getDimension());
      
      double double0 = graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 3184.81, doubleArray0, 0.0, doubleArray0);
      assertEquals(2, doubleArray0.length);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(2, firstOrderConverter0.getDimension());
      assertArrayEquals(new double[] {45357.62964747038, (-13.535385045723157)}, doubleArray0, 0.01);
      assertEquals(0.0, double0, 0.01);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 3184.81, 0.0, 4668);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(13.535385045723157, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1795.7830947747696);
      doubleArray0[1] = (-436.4423876609309);
      doubleArray0[2] = (-1795.7830947747696);
      doubleArray0[3] = (-436.4423876609309);
      doubleArray0[4] = (-1795.7830947747696);
      doubleArray0[5] = (-1795.7830947747696);
      doubleArray0[6] = (-1795.7830947747696);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-436.4423876609309), (-1795.7830947747696), doubleArray0, doubleArray0);
      assertEquals(7, doubleArray0.length);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(1795.7830947747696, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(885.2998710067884, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(436.4423876609309, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertArrayEquals(new double[] {(-1795.7830947747696), (-436.4423876609309), (-1795.7830947747696), (-436.4423876609309), (-1795.7830947747696), (-1795.7830947747696), (-1795.7830947747696)}, doubleArray0, 0.01);
      
      graggBulirschStoerIntegrator0.setOrderControl((-3123), (-436.4423876609309), (-1795.7830947747696));
      assertEquals(7, doubleArray0.length);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(1795.7830947747696, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(885.2998710067884, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(436.4423876609309, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertArrayEquals(new double[] {(-1795.7830947747696), (-436.4423876609309), (-1795.7830947747696), (-436.4423876609309), (-1795.7830947747696), (-1795.7830947747696), (-1795.7830947747696)}, doubleArray0, 0.01);
      
      ExpandableStatefulODE expandableStatefulODE0 = null;
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.integrate((ExpandableStatefulODE) null, (-436.4423876609309));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(0.0);
      assertNotNull(gillIntegrator0);
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      GillIntegrator gillIntegrator1 = new GillIntegrator((-974.6531507));
      assertNotNull(gillIntegrator1);
      assertEquals(Double.NaN, gillIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, gillIntegrator1.getCurrentStepStart(), 0.01);
      assertEquals("Gill", gillIntegrator1.getName());
      assertFalse(gillIntegrator1.equals((Object)gillIntegrator0));
      
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
      assertNotNull(bracketingNthOrderBrentSolver0);
      assertEquals(5, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(1.0E-6, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01);
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01);
      
      gillIntegrator1.addEventHandler(eventHandler0, (-532.4445589782794), 1000.0, 5, (UnivariateSolver) bracketingNthOrderBrentSolver0);
      assertNotSame(gillIntegrator1, gillIntegrator0);
      assertEquals(Double.NaN, gillIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, gillIntegrator1.getCurrentStepStart(), 0.01);
      assertEquals("Gill", gillIntegrator1.getName());
      assertEquals(5, bracketingNthOrderBrentSolver0.getMaximalOrder());
      assertEquals(1.0E-6, bracketingNthOrderBrentSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, bracketingNthOrderBrentSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01);
      assertEquals(1.0E-14, bracketingNthOrderBrentSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMax(), 0.01);
      assertFalse(gillIntegrator1.equals((Object)gillIntegrator0));
      
      Collection<EventHandler> collection0 = gillIntegrator1.getEventHandlers();
      assertNotSame(gillIntegrator1, gillIntegrator0);
      assertNotNull(collection0);
      assertEquals(Double.NaN, gillIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, gillIntegrator1.getCurrentStepStart(), 0.01);
      assertEquals("Gill", gillIntegrator1.getName());
      assertTrue(collection0.contains(eventHandler0));
      assertFalse(gillIntegrator1.equals((Object)gillIntegrator0));
      
      int int0 = gillIntegrator1.getMaxEvaluations();
      assertNotSame(gillIntegrator1, gillIntegrator0);
      assertEquals(Double.NaN, gillIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, gillIntegrator1.getCurrentStepStart(), 0.01);
      assertEquals("Gill", gillIntegrator1.getName());
      assertEquals(Integer.MAX_VALUE, int0);
      assertFalse(gillIntegrator1.equals((Object)gillIntegrator0));
      
      String string0 = gillIntegrator1.getName();
      assertNotSame(gillIntegrator1, gillIntegrator0);
      assertNotNull(string0);
      assertEquals(Double.NaN, gillIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, gillIntegrator1.getCurrentStepStart(), 0.01);
      assertEquals("Gill", gillIntegrator1.getName());
      assertEquals("Gill", string0);
      assertFalse(gillIntegrator1.equals((Object)gillIntegrator0));
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2264.909, 1109.53085195, 2264.909, (-1.0));
      assertNotNull(dormandPrince853Integrator0);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(2264.909, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(1109.53085195, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(1585.2401749764047, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      
      GillIntegrator gillIntegrator0 = new GillIntegrator(1109.53085195);
      assertNotNull(gillIntegrator0);
      assertEquals("Gill", gillIntegrator0.getName());
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      
      GillIntegrator gillIntegrator1 = new GillIntegrator(2019.0000000001137);
      assertNotNull(gillIntegrator1);
      assertEquals("Gill", gillIntegrator1.getName());
      assertEquals(Double.NaN, gillIntegrator1.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, gillIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertFalse(gillIntegrator1.equals((Object)gillIntegrator0));
      
      String string0 = gillIntegrator1.getName();
      assertNotSame(gillIntegrator1, gillIntegrator0);
      assertNotNull(string0);
      assertEquals("Gill", gillIntegrator1.getName());
      assertEquals(Double.NaN, gillIntegrator1.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, gillIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gill", string0);
      assertFalse(gillIntegrator1.equals((Object)gillIntegrator0));
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-15.0), (-15.0), (-15.0), (-15.0));
      assertNotNull(dormandPrince54Integrator0);
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals(15.0, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(15.0, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(15.0, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      
      dormandPrince54Integrator0.setMaxEvaluations(0);
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals(15.0, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(15.0, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(15.0, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      
      Collection<EventHandler> collection0 = dormandPrince54Integrator0.getEventHandlers();
      assertNotNull(collection0);
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals(15.0, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(15.0, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(15.0, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      
      int int0 = dormandPrince54Integrator0.getOrder();
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals(15.0, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(15.0, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(15.0, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(5, int0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertNotNull(expandableStatefulODE0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      
      int int1 = expandableStatefulODE0.getTotalDimension();
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      
      int int2 = dormandPrince54Integrator0.getMaxEvaluations();
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals(15.0, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(15.0, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(15.0, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(0, int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (-15.0);
      doubleArray0[2] = 0.0;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1515.208591), 623.67166152174, doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertNotNull(dormandPrince853Integrator0);
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(972.1073292085523, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(1515.208591, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(623.67166152174, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertArrayEquals(new double[] {0.0, (-15.0), 0.0}, doubleArray0, 0.01);
      
      dormandPrince853Integrator0.setSafety((-325.13012));
      assertEquals(3, doubleArray0.length);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(972.1073292085523, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(1515.208591, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(623.67166152174, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals((-325.13012), dormandPrince853Integrator0.getSafety(), 0.01);
      assertArrayEquals(new double[] {0.0, (-15.0), 0.0}, doubleArray0, 0.01);
      
      int int3 = dormandPrince853Integrator0.getOrder();
      assertEquals(3, doubleArray0.length);
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(972.1073292085523, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(1515.208591, dormandPrince853Integrator0.getMinStep(), 0.01);
      assertEquals(623.67166152174, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals((-325.13012), dormandPrince853Integrator0.getSafety(), 0.01);
      assertArrayEquals(new double[] {0.0, (-15.0), 0.0}, doubleArray0, 0.01);
      assertEquals(8, int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(4627.4725, (-1805.6797257257), doubleArray0, doubleArray0);
      assertEquals(3, doubleArray0.length);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(1805.6797257257, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(2890.628525875163, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(4627.4725, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertArrayEquals(new double[] {0.0, (-15.0), 0.0}, doubleArray0, 0.01);
      
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizer stepNormalizer0 = new StepNormalizer(1.0, fixedStepHandler0, stepNormalizerMode0);
      assertNotNull(stepNormalizer0);
      
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      assertEquals(3, doubleArray0.length);
      assertEquals(1805.6797257257, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(2890.628525875163, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(4627.4725, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertArrayEquals(new double[] {0.0, (-15.0), 0.0}, doubleArray0, 0.01);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double double0 = 0.0;
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
      assertNotNull(threeEighthesIntegrator0);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(10, firstOrderConverter0.getDimension());
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      threeEighthesIntegrator0.clearEventHandlers();
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("3/8", threeEighthesIntegrator0.getName());
      
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      try { 
        threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 0.0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 10
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      doubleArray0[2] = (-1.0);
      doubleArray0[3] = (-1.0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1.0), (-1.0), doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(1.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(1.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(1.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertArrayEquals(new double[] {(-1.0), (-1.0), (-1.0), (-1.0)}, doubleArray0, 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      double double0 = 57.23917980268774;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator1 = new GraggBulirschStoerIntegrator(0.0, (-1.2531793589140273E-8), (-1.0), 57.23917980268774);
      assertNotNull(graggBulirschStoerIntegrator1);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator1.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator1.getMinStep(), 0.01);
      assertEquals(1.2531793589140273E-8, graggBulirschStoerIntegrator1.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator1.getName());
      assertFalse(graggBulirschStoerIntegrator1.equals((Object)graggBulirschStoerIntegrator0));
      
      double[] doubleArray1 = new double[1];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 57.23917980268774;
      try { 
        graggBulirschStoerIntegrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1.0), doubleArray0, 0.0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double double0 = 0.0;
      double[] doubleArray0 = new double[23];
      double double1 = Double.NaN;
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      double double2 = (-3632.63);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      threeEighthesIntegrator0.integrate(expandableStatefulODE0, (-723.3));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double double0 = (-15.0);
      double double1 = (-3244.5964049609142);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-15.0), (-15.0), (-3244.5964049609142), (-3244.5964049609142));
      int int0 = 0;
      dormandPrince54Integrator0.setMaxEvaluations(0);
      dormandPrince54Integrator0.getEventHandlers();
      dormandPrince54Integrator0.getOrder();
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(212, 469.169367578824, 5, (-3244.5964049609142), 0.0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 2368.8598185899;
      doubleArray0[1] = 1303.3;
      doubleArray0[2] = 2368.8598185899;
      doubleArray0[3] = 1303.3;
      doubleArray0[4] = 1303.3;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1303.3, 2368.8598185899, doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver(1367.56, (-1.3333333333333333), 1303.3, 112);
      dormandPrince853Integrator0.addEventHandler(eventHandler0, 2045.4, (-1.0), 112, (UnivariateSolver) bracketingNthOrderBrentSolver0);
      assertEquals(0.0, bracketingNthOrderBrentSolver0.getMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[8];
      double double0 = Double.NaN;
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      double double1 = (-3632.63);
      try { 
        threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, (-3632.63), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(789.46643, 0.0, doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double0 = (-3930.753859827622);
      double double1 = 2.4936055526796523;
      graggBulirschStoerIntegrator0.setMaxEvaluations(4046);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (-3930.753859827622));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2582.8);
      doubleArray0[1] = (-2582.8);
      doubleArray0[2] = (-2582.8);
      doubleArray0[3] = (-2582.8);
      doubleArray0[4] = (-2582.8);
      doubleArray0[5] = (-2582.8);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2582.8), (-2582.8), doubleArray0, doubleArray0);
      dormandPrince54Integrator0.getMaxEvaluations();
      dormandPrince54Integrator0.setMaxEvaluations(226);
      dormandPrince54Integrator0.getStepHandlers();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(Integer.MAX_VALUE, (-2582.8), 226, 0.0);
      graggBulirschStoerIntegrator0.setOrderControl(Integer.MAX_VALUE, (-1645.62931108), 3333.498257516326);
      graggBulirschStoerIntegrator0.clearStepHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 3333.498257516326;
      doubleArray1[2] = (-2582.8);
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 3333.498257516326;
      doubleArray1[5] = (-696.72576);
      doubleArray1[6] = (-1645.62931108);
      doubleArray1[7] = 0.0;
      doubleArray1[8] = (-2582.8);
      try { 
        expandableStatefulODE0.setPrimaryState(doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 0
         //
         verifyException("org.apache.commons.math3.ode.ExpandableStatefulODE", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-1.0);
      doubleArray0[4] = (-988.5482);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1.0), 0.0, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.setMaxEvaluations(5);
      dormandPrince853Integrator0.setInitialStepSize(0.0);
      // Undeclared exception!
      try { 
        dormandPrince853Integrator0.initializeStep(false, 0, doubleArray0, 0.0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-3344.44), (-3344.44), 0.0, (-1019.71992));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      dormandPrince853Integrator0.addEventHandler(eventHandler0, (-3066.782258520529), 0.0, 1690);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-3066.782258520529), 0.0, 0.1413124436746325, 1690);
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler1, (-3344.44), 4784.0, 1690, (UnivariateSolver) illinoisSolver0);
      graggBulirschStoerIntegrator0.setStabilityCheck(false, 5, 283, 283);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 1690;
      doubleArray0[3] = 4784.0;
      doubleArray0[4] = 790.3;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.1413124436746325, 790.3, doubleArray0, doubleArray0);
      int int0 = dormandPrince54Integrator0.getOrder();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double double0 = 989.2660808828564;
      double double1 = Double.NaN;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 989.2660808828564;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(989.2660808828564, Double.NaN, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getEventHandlers();
      dormandPrince853Integrator0.getOrder();
      FirstOrderConverter firstOrderConverter0 = null;
      try {
        firstOrderConverter0 = new FirstOrderConverter((SecondOrderDifferentialEquations) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.FirstOrderConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-2888.28695379366);
      doubleArray0[1] = (-2888.28695379366);
      doubleArray0[2] = (-2888.28695379366);
      doubleArray0[3] = (-2888.28695379366);
      doubleArray0[4] = (-2888.28695379366);
      doubleArray0[5] = (-2888.28695379366);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (-2888.28695379366);
      doubleArray1[1] = (-2888.28695379366);
      doubleArray1[2] = (-2888.28695379366);
      doubleArray1[3] = (-2888.28695379366);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-2888.28695379366), (-2888.28695379366), doubleArray0, doubleArray1);
      dormandPrince54Integrator0.setStepSizeControl(362.1506334821, (-2888.28695379366), (-2888.28695379366), 0.0);
      // Undeclared exception!
      try { 
        dormandPrince54Integrator0.computeDerivatives((-2888.28695379366), doubleArray0, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-949.2053712);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, (-949.2053712), (-635.729));
      dormandPrince853Integrator0.getEvaluations();
      dormandPrince853Integrator0.getMaxEvaluations();
      dormandPrince853Integrator0.getCurrentStepStart();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(Double.NaN, 0.0, (-635.729), 0.0);
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.integrate((ExpandableStatefulODE) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(2250.0);
      gillIntegrator0.getEventHandlers();
      gillIntegrator0.clearEventHandlers();
      gillIntegrator0.getEventHandlers();
      int int0 = gillIntegrator0.getMaxEvaluations();
      assertEquals(Integer.MAX_VALUE, int0);
      
      gillIntegrator0.getStepHandlers();
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(9.094947017729282E-10, 9.094947017729282E-10, (-3645.0), 9.094947017729282E-10);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-3645.0);
      doubleArray0[1] = (-104.1227935);
      doubleArray0[2] = (-104.1227935);
      doubleArray0[3] = 9.094947017729282E-10;
      doubleArray0[4] = (-104.1227935);
      doubleArray0[5] = (-3645.0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-104.1227935), (-104.1227935), doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-3645.0);
      doubleArray1[1] = (-3275.090024535);
      doubleArray1[2] = 9.094947017729282E-10;
      graggBulirschStoerIntegrator0.setStepSizeControl((-104.1227935), (-3275.090024535), doubleArray0, doubleArray1);
      graggBulirschStoerIntegrator0.addStepHandler((StepHandler) null);
      assertEquals(104.1227935, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-15.0), (-15.0), (-3244.5964049609142), (-3244.5964049609142));
      dormandPrince54Integrator0.setSafety((-1222.116994));
      dormandPrince54Integrator0.setMaxEvaluations(0);
      dormandPrince54Integrator0.getEventHandlers();
      dormandPrince54Integrator0.getOrder();
      GillIntegrator gillIntegrator0 = new GillIntegrator(4842.20192);
      GillIntegrator gillIntegrator1 = new GillIntegrator(0.0);
      gillIntegrator1.clearStepHandlers();
      gillIntegrator1.getEventHandlers();
      int int0 = gillIntegrator1.getMaxEvaluations();
      assertEquals(Double.NaN, gillIntegrator1.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, gillIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-3557.2071394275));
      classicalRungeKuttaIntegrator0.addEventHandler((EventHandler) null, 2142.98264683038, (-183.0), 28);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-298.034175262));
      int int0 = gillIntegrator0.getMaxEvaluations();
      assertEquals(Integer.MAX_VALUE, int0);
      
      double double0 = gillIntegrator0.getCurrentSignedStepsize();
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      double double0 = (-614.835075926986);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, (-949.2053712), (-614.835075926986));
      dormandPrince853Integrator0.getEvaluations();
      dormandPrince853Integrator0.getMaxEvaluations();
      dormandPrince853Integrator0.getCurrentStepStart();
      double double1 = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(Double.NaN, 0.0, (-614.835075926986), 0.0);
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.integrate((ExpandableStatefulODE) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-3698.68528));
      threeEighthesIntegrator0.clearStepHandlers();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      threeEighthesIntegrator0.getEvaluations();
      threeEighthesIntegrator0.addEventHandler(eventHandler0, 0.0, 0.0, 0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.BOTH;
      StepNormalizer stepNormalizer0 = new StepNormalizer((-3698.68528), fixedStepHandler0, stepNormalizerBounds0);
      threeEighthesIntegrator0.addStepHandler(stepNormalizer0);
      threeEighthesIntegrator0.clearEventHandlers();
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(Double.NaN, 0.0, 0.0, 0.0);
      dormandPrince853Integrator0.getStepHandlers();
      dormandPrince853Integrator0.getStepHandlers();
      dormandPrince853Integrator0.getOrder();
      threeEighthesIntegrator0.clearStepHandlers();
      double double0 = threeEighthesIntegrator0.getCurrentSignedStepsize();
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      dormandPrince853Integrator0.getEvaluations();
      double double1 = dormandPrince853Integrator0.getCurrentSignedStepsize();
      assertEquals(double1, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-1040.25694679), (-1040.25694679), (-1040.25694679), (-1231.806));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1040.25694679);
      doubleArray0[1] = (-1231.806);
      doubleArray0[2] = (-1231.806);
      dormandPrince54Integrator0.getStepHandlers();
      // Undeclared exception!
      try { 
        dormandPrince54Integrator0.computeDerivatives((-1040.25694679), doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
