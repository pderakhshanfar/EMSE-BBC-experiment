/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 06:44:09 GMT 2021
 */

package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import org.apache.commons.math3.analysis.UnivariateFunction;
import org.apache.commons.math3.analysis.function.Rint;
import org.apache.commons.math3.analysis.solvers.MullerSolver;
import org.apache.commons.math3.analysis.solvers.MullerSolver2;
import org.apache.commons.math3.analysis.solvers.PegasusSolver;
import org.apache.commons.math3.analysis.solvers.RegulaFalsiSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondaryEquations;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator;
import org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.EulerIntegrator;
import org.apache.commons.math3.ode.nonstiff.GillIntegrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.nonstiff.MidpointIntegrator;
import org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator;
import org.apache.commons.math3.ode.sampling.DummyStepHandler;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.StepHandler;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.apache.commons.math3.ode.sampling.StepNormalizerBounds;
import org.apache.commons.math3.ode.sampling.StepNormalizerMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegrator_ESTest extends AbstractIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(60.0, 60.0, 60.0, 60.0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      double[] doubleArray0 = new double[0];
      Double double0 = new Double(60.0);
      assertNotNull(double0);
      assertEquals(60.0, (double)double0, 0.01);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      double double1 = graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) 0, doubleArray0, 6.6530622500127355E-108, doubleArray1);
      assertEquals(0, doubleArray0.length);
      assertEquals(0, doubleArray1.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertArrayEquals(new double[] {}, doubleArray1, 0.01);
      assertFalse(doubleArray0.equals((Object)doubleArray1));
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      assertNotSame(doubleArray0, doubleArray1);
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(6.6530622500127355E-108, double1, 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(1995, 0, 0, doubleArray0, doubleArray1);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(60.0, 60.0, 60.0, 60.0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      double[] doubleArray0 = new double[0];
      Double double0 = new Double(60.0);
      assertNotNull(double0);
      assertEquals(60.0, (double)double0, 0.01);
      
      double double1 = graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) 0, doubleArray0, (double) double0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(60.0, double1, 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator1 = new GraggBulirschStoerIntegrator(Double.NaN, Double.NaN, doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(graggBulirschStoerIntegrator1);
      assertFalse(graggBulirschStoerIntegrator1.equals((Object)graggBulirschStoerIntegrator0));
      assertEquals(Double.NaN, graggBulirschStoerIntegrator1.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator1.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator1.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator1.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator1.getCurrentSignedStepsize(), 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      assertNotNull(firstOrderConverter1);
      assertFalse(firstOrderConverter1.equals((Object)firstOrderConverter0));
      assertEquals(0, firstOrderConverter1.getDimension());
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter1);
      assertNotNull(expandableStatefulODE0);
      assertFalse(firstOrderConverter1.equals((Object)firstOrderConverter0));
      assertEquals(0, firstOrderConverter1.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator1.integrate(expandableStatefulODE0, 1.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double double0 = 60.0;
      double double1 = 5302.64360047602;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(60.0, 60.0, 60.0, 5302.64360047602);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      
      int int0 = graggBulirschStoerIntegrator0.getEvaluations();
      assertEquals(0, int0);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertNotNull(pegasusSolver0);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      
      double double2 = (-3.126416414805498E-8);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-3.126416414805498E-8), 5302.64360047602, 60.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      int int1 = 1;
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (double) 1, (double) 1, 1, (UnivariateSolver) pegasusSolver0);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertNotNull(expandableStatefulODE0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      
      SecondaryEquations secondaryEquations0 = mock(SecondaryEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondaryEquations0).getDimension();
      int int2 = expandableStatefulODE0.addSecondaryEquations(secondaryEquations0);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 5302.64360047602);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (1) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(60.0, 60.0, 60.0, 60.0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertNotNull(pegasusSolver0);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((double)0, 1.1588881015777588, (-1.2251564463762044), 60.0, 60.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (double) 0, 1131.706, 5273, (UnivariateSolver) pegasusSolver0);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertNotNull(expandableStatefulODE0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 1004.9619426145);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [\uFFFD, \uFFFD], values: [60, 60]
         //
         verifyException("org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertNotNull(pegasusSolver0);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1264.2930414691195);
      doubleArray0[1] = 1131.706;
      doubleArray0[2] = 1131.706;
      doubleArray0[3] = 2962.7757435444564;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(5273, 1597.1906399, doubleArray0, doubleArray0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-1264.2930414691195), 1131.706, 1131.706, 2962.7757435444564}, doubleArray0, 0.01);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(1597.1906399, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(2902.0658580040354, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(5273.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.setOrderControl(5273, 2962.7757435444564, 1.7584857940673828);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-1264.2930414691195), 1131.706, 1131.706, 2962.7757435444564}, doubleArray0, 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(1597.1906399, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(2902.0658580040354, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(5273.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (-2853.59983832), 911.886985446, 888, (UnivariateSolver) pegasusSolver0);
      assertEquals(4, doubleArray0.length);
      assertArrayEquals(new double[] {(-1264.2930414691195), 1131.706, 1131.706, 2962.7757435444564}, doubleArray0, 0.01);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(1597.1906399, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(2902.0658580040354, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(5273.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertNotNull(expandableStatefulODE0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 1597.1906399);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 4
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(60.0, 60.0, 60.0, 60.0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(60.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      
      Double double0 = new Double(60.0);
      assertNotNull(double0);
      assertEquals(60.0, (double)double0, 0.01);
      
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.integrate((ExpandableStatefulODE) null, 60.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double double0 = 60.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(60.0, 60.0, 60.0, 60.0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer0 = new StepNormalizer((-2653.0), fixedStepHandler0);
      assertNotNull(stepNormalizer0);
      
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertNotNull(expandableStatefulODE0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 60.0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(60.0, 60.0, 60.0, 60.0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      int int0 = graggBulirschStoerIntegrator0.getEvaluations();
      assertEquals(0, int0);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      double[] doubleArray0 = new double[0];
      Double double0 = new Double((-1710.8827527235271));
      assertNotNull(double0);
      assertEquals((-1710.8827527235271), (double)double0, 0.01);
      
      double[] doubleArray1 = new double[0];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1000.0, doubleArray0, (-2632.72350561), doubleArray1);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(60.0, 60.0, 60.0, 60.0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      int int0 = graggBulirschStoerIntegrator0.getEvaluations();
      assertEquals(0, int0);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      double[] doubleArray0 = new double[0];
      Double double0 = new Double(60.0);
      assertNotNull(double0);
      assertEquals(60.0, (double)double0, 0.01);
      
      double double1 = graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) 0, doubleArray0, (double) double0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(60.0, double1, 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      Collection<StepHandler> collection0 = graggBulirschStoerIntegrator0.getStepHandlers();
      assertNotNull(collection0);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      graggBulirschStoerIntegrator0.computeDerivatives((-419.3379), doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      double double2 = graggBulirschStoerIntegrator0.getCurrentStepStart();
      assertNotEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(60.0, 60.0, 60.0, 60.0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      int int0 = graggBulirschStoerIntegrator0.getEvaluations();
      assertEquals(0, int0);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertNotNull(pegasusSolver0);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (double) 0, 60.0, 0, (UnivariateSolver) pegasusSolver0);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      Double double0 = new Double(60.0);
      assertNotNull(double0);
      assertEquals(60.0, (double)double0, 0.01);
      
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator1 = new GraggBulirschStoerIntegrator((-25.82957), (-1.0), doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(graggBulirschStoerIntegrator1);
      assertFalse(graggBulirschStoerIntegrator1.equals((Object)graggBulirschStoerIntegrator0));
      assertEquals(5.08228000015741, graggBulirschStoerIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator1.getName());
      assertEquals(25.82957, graggBulirschStoerIntegrator1.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator1.getCurrentStepStart(), 0.01);
      assertEquals(1.0, graggBulirschStoerIntegrator1.getMaxStep(), 0.01);
      
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1.1368683772161603E-10, doubleArray0, 5296.2441594299, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(60.0, (-330.186), 2226.6258, 5302.64360047602);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(140.75212254172226, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(330.186, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      
      int int0 = graggBulirschStoerIntegrator0.getEvaluations();
      assertEquals(0, int0);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(140.75212254172226, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(330.186, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertNotNull(pegasusSolver0);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-3.126416414805498E-8), 5302.64360047602, 60.0, (-3283.7719361167), (double)0).when(eventHandler0).g(anyDouble() , any(double[].class));
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 60.0, 5000.3122846, 5, (UnivariateSolver) pegasusSolver0);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(140.75212254172226, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(330.186, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      Double double0 = new Double((-268.2242194));
      assertNotNull(double0);
      assertEquals((-268.2242194), (double)double0, 0.01);
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertNotNull(expandableStatefulODE0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      
      double[] doubleArray0 = new double[0];
      Double double1 = new Double(718.1359493911314);
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals(718.1359493911314, (double)double1, 0.01);
      
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1.0), doubleArray0, 718.1359493911314, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(60.0, 60.0, 60.0, 60.0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(60.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      int int0 = graggBulirschStoerIntegrator0.getEvaluations();
      assertEquals(0, int0);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(60.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(1.1368683772161603E-10, 1.1368683772161603E-10, (double)0, (double)0, (double)0).when(eventHandler0).g(anyDouble() , any(double[].class));
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertNotNull(pegasusSolver0);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (double) 0, 60.0, 0, (UnivariateSolver) pegasusSolver0);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(60.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      assertNotNull(firstOrderConverter1);
      assertFalse(firstOrderConverter1.equals((Object)firstOrderConverter0));
      assertEquals(0, firstOrderConverter1.getDimension());
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter1);
      assertNotNull(expandableStatefulODE0);
      assertFalse(firstOrderConverter1.equals((Object)firstOrderConverter0));
      assertEquals(0, firstOrderConverter1.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (-2431.3536772237));
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(60.0, 60.0, 60.0, 60.0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      int int0 = graggBulirschStoerIntegrator0.getEvaluations();
      assertEquals(0, int0);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-2.0697130057384643E245), (-2.0697130057384643E245)).when(eventHandler0).g(anyDouble() , any(double[].class));
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertNotNull(pegasusSolver0);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      
      Rint rint0 = new Rint();
      assertNotNull(rint0);
      
      double double0 = pegasusSolver0.solve(913, (UnivariateFunction) rint0, (-2.0697130057384643E245), (double) 0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-1.0348565028692321E245), pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals((-2.0697130057384643E245), pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (double) 0, 60.0, 0, (UnivariateSolver) pegasusSolver0);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-1.0348565028692321E245), pegasusSolver0.getStartValue(), 0.01);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals((-2.0697130057384643E245), pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      double[] doubleArray0 = new double[0];
      Double double1 = new Double((-0.05767435293153389));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-0.05767435293153389), (double)double1, 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      double double2 = graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) 0, doubleArray0, (-0.05767435293153389), doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals((-0.05767435293153389), double2, 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      Collection<StepHandler> collection0 = graggBulirschStoerIntegrator0.getStepHandlers();
      assertNotNull(collection0);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(60.0, 60.0, 60.0, 60.0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      int int0 = graggBulirschStoerIntegrator0.getEvaluations();
      assertEquals(0, int0);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-2.0697130057384643E245), (-2.0697130057384643E245), 1551.2).when(eventHandler0).g(anyDouble() , any(double[].class));
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertNotNull(pegasusSolver0);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      
      Rint rint0 = new Rint();
      assertNotNull(rint0);
      
      double double0 = pegasusSolver0.solve(913, (UnivariateFunction) rint0, (-2.0697130057384643E245), (double) 0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-1.0348565028692321E245), pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals((-2.0697130057384643E245), pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (double) 0, 60.0, 0, (UnivariateSolver) pegasusSolver0);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals((-1.0348565028692321E245), pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      assertEquals((-2.0697130057384643E245), pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      double[] doubleArray0 = new double[0];
      Double double1 = new Double((-0.05767435293153389));
      assertNotNull(double1);
      assertNotEquals((double)double1, (double)double0, 0.01);
      assertEquals((-0.05767435293153389), (double)double1, 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(60.0, (-2324.579), doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertNotNull(dormandPrince54Integrator0);
      assertEquals(60.0, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(2324.579, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals(373.4631708749874, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      
      int int1 = dormandPrince54Integrator0.getOrder();
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertFalse(int1 == int0);
      assertEquals(5, int1);
      assertEquals(60.0, dormandPrince54Integrator0.getMinStep(), 0.01);
      assertEquals(5, dormandPrince54Integrator0.getOrder());
      assertEquals(2324.579, dormandPrince54Integrator0.getMaxStep(), 0.01);
      assertEquals(0.9, dormandPrince54Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, dormandPrince54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.2, dormandPrince54Integrator0.getMinReduction(), 0.01);
      assertEquals(373.4631708749874, dormandPrince54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Dormand-Prince 5(4)", dormandPrince54Integrator0.getName());
      assertEquals(10.0, dormandPrince54Integrator0.getMaxGrowth(), 0.01);
      
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      assertNotNull(firstOrderConverter1);
      assertFalse(firstOrderConverter1.equals((Object)firstOrderConverter0));
      assertEquals(0, firstOrderConverter1.getDimension());
      
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter1, 60.0, doubleArray0, (double) 0, doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double double0 = 60.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(60.0, 60.0, 60.0, 60.0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      
      graggBulirschStoerIntegrator0.setMaxEvaluations(0);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      int int0 = graggBulirschStoerIntegrator0.getEvaluations();
      assertEquals(0, int0);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      double[] doubleArray0 = new double[0];
      Double double1 = new Double(60.0);
      assertNotNull(double1);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(60.0, (double)double1, 0.01);
      
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) 0, doubleArray0, (double) double1, doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(60.0, 60.0, 60.0, 60.0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      int int0 = graggBulirschStoerIntegrator0.getEvaluations();
      assertEquals(0, int0);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      double[] doubleArray0 = new double[0];
      Double double0 = new Double(60.0);
      assertNotNull(double0);
      assertEquals(60.0, (double)double0, 0.01);
      
      double double1 = graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) 0, doubleArray0, (double) double0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(60.0, double1, 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertNotNull(expandableStatefulODE0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      
      int int1 = graggBulirschStoerIntegrator0.getEvaluations();
      assertFalse(int1 == int0);
      assertEquals(21, int1);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      assertNotNull(firstOrderConverter1);
      assertFalse(firstOrderConverter1.equals((Object)firstOrderConverter0));
      assertEquals(0, firstOrderConverter1.getDimension());
      
      Double double2 = new Double((-202.48271814));
      assertNotNull(double2);
      assertNotEquals((double)double2, (double)double0, 0.01);
      assertNotEquals((double)double2, (double)double1, 0.01);
      assertEquals((-202.48271814), (double)double2, 0.01);
      
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter1, (-573.9315988), doubleArray0, (-3559.3882600408), doubleArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(60.0, 60.0, 60.0, 60.0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(60.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      int int0 = graggBulirschStoerIntegrator0.getEvaluations();
      assertEquals(0, int0);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(60.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      PegasusSolver pegasusSolver0 = new PegasusSolver();
      assertNotNull(pegasusSolver0);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (double) 0, 60.0, 0, (UnivariateSolver) pegasusSolver0);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(60.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(1.0E-6, pegasusSolver0.getAbsoluteAccuracy(), 0.01);
      assertEquals(1.0E-14, pegasusSolver0.getRelativeAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getStartValue(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMin(), 0.01);
      assertEquals(1.0E-15, pegasusSolver0.getFunctionValueAccuracy(), 0.01);
      assertEquals(0.0, pegasusSolver0.getMax(), 0.01);
      
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      double[] doubleArray0 = new double[0];
      Double double0 = new Double((-0.05767435293153389));
      assertNotNull(double0);
      assertEquals((-0.05767435293153389), (double)double0, 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      assertNotNull(firstOrderConverter1);
      assertFalse(firstOrderConverter1.equals((Object)firstOrderConverter0));
      assertEquals(0, firstOrderConverter1.getDimension());
      
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter1, 60.0, doubleArray0, (double) 0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double double0 = 60.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(60.0, 60.0, 60.0, (-1851.335639));
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      double[] doubleArray0 = new double[0];
      double double1 = 0.0;
      double double2 = graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 60.0, doubleArray0, 0.0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(double2, double1, 0.01);
      assertNotEquals(double2, double0, 0.01);
      assertEquals(0.0, double2, 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertNotNull(expandableStatefulODE0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter0);
      assertNotNull(expandableStatefulODE1);
      assertFalse(expandableStatefulODE1.equals((Object)expandableStatefulODE0));
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE1.getTime(), 0.01);
      
      // Undeclared exception!
      try { 
        expandableStatefulODE1.getSecondaryState((-448));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(60.0, 60.0, 60.0, 60.0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      int int0 = graggBulirschStoerIntegrator0.getEvaluations();
      assertEquals(0, int0);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      double[] doubleArray0 = new double[0];
      Double double0 = new Double(60.0);
      assertNotNull(double0);
      assertEquals(60.0, (double)double0, 0.01);
      
      double double1 = graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) 0, doubleArray0, (double) double0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(60.0, double1, 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(0, firstOrderConverter0.getDimension());
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertNotNull(expandableStatefulODE0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      
      expandableStatefulODE0.computeDerivatives(2286.018468478609, doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      
      // Undeclared exception!
      try { 
        expandableStatefulODE0.getSecondaryState(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(60.0, 60.0, 60.0, 60.0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      int int0 = graggBulirschStoerIntegrator0.getEvaluations();
      assertEquals(0, int0);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      double[] doubleArray0 = new double[0];
      double double0 = new Double(60.0);
      assertEquals(60.0, double0, 0.01);
      
      double double1 = graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) 0, doubleArray0, 60.0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(double1, double0, 0.01);
      assertEquals(60.0, double1, 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertNotNull(expandableStatefulODE0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      
      double double2 = 2286.018468478609;
      expandableStatefulODE0.computeDerivatives(2286.018468478609, doubleArray0, doubleArray0);
      assertEquals(0, doubleArray0.length);
      assertArrayEquals(new double[] {}, doubleArray0, 0.01);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (double) 0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double double0 = 2247.3136569670296;
      double double1 = (-4.25782656420497E-8);
      double double2 = 31.7270757331;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(60.0, 2247.3136569670296, (-4.25782656420497E-8), 31.7270757331);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(2247.3136569670296, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(367.20405691933985, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      
      int int0 = graggBulirschStoerIntegrator0.getEvaluations();
      assertEquals(0, int0);
      assertEquals(2247.3136569670296, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(367.20405691933985, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) 0, doubleArray0, 3576.399, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(60.0, 60.0, 60.0, 60.0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      
      int int0 = 0;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      int int1 = graggBulirschStoerIntegrator0.getEvaluations();
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator1 = new GraggBulirschStoerIntegrator(0, 0, (-2477.144644), (-904.481540638));
      assertNotNull(graggBulirschStoerIntegrator1);
      assertFalse(graggBulirschStoerIntegrator1.equals((Object)graggBulirschStoerIntegrator0));
      assertEquals(0.0, graggBulirschStoerIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator1.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator1.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator1.getMaxStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator1.getMinStep(), 0.01);
      
      double[] doubleArray1 = new double[5];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 60.0;
      doubleArray1[1] = 9.094947017729282E-10;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      try { 
        graggBulirschStoerIntegrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1000.0, doubleArray0, 2.365953779624783E-8, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(60.0, 31.11711092, 31.11711092, 60.0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(31.11711092, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(43.209103846296095, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      double double0 = 1.1368683772161603E-10;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator1 = new GraggBulirschStoerIntegrator(7.105427357601002E-12, 60.0, 1.1368683772161603E-10, 7.105427357601002E-12);
      assertNotNull(graggBulirschStoerIntegrator1);
      assertFalse(graggBulirschStoerIntegrator1.equals((Object)graggBulirschStoerIntegrator0));
      assertEquals(2.064765462361428E-5, graggBulirschStoerIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator1.getName());
      assertEquals(7.105427357601002E-12, graggBulirschStoerIntegrator1.getMinStep(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator1.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator1.getCurrentStepStart(), 0.01);
      
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      graggBulirschStoerIntegrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 60.0, doubleArray0, (-5000.3122846), doubleArray0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(3064.1642263168, 60.0, (-1121.895312602361), (-710.722234276));
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(428.7771607478738, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(3064.1642263168, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      
      Collection<StepHandler> collection0 = graggBulirschStoerIntegrator0.getStepHandlers();
      assertNotNull(collection0);
      assertEquals(428.7771607478738, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(3064.1642263168, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      assertNotNull(dummyStepHandler0);
      
      graggBulirschStoerIntegrator0.addStepHandler(dummyStepHandler0);
      assertEquals(428.7771607478738, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(3064.1642263168, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizer stepNormalizer0 = new StepNormalizer(1.9483680725097656, (FixedStepHandler) null, stepNormalizerMode0);
      assertNotNull(stepNormalizer0);
      
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      assertEquals(428.7771607478738, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(3064.1642263168, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertNotNull(expandableStatefulODE0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (-1121.895312602361));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.sampling.StepNormalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double double0 = 60.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(60.0, 60.0, 60.0, 60.0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      double[] doubleArray0 = new double[0];
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 60.0, doubleArray0, 60.0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-9.35130825405E-313), 2702.0, 2702.0, 2702.0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(2702.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(9.35130825405E-313, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(5.02665245490775E-155, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      graggBulirschStoerIntegrator0.setOrderControl(838, 227.55751800000007, 3.989519470441919E45);
      assertEquals(2702.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(9.35130825405E-313, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(5.02665245490775E-155, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 2702.0;
      doubleArray0[1] = 1.666527509689331;
      doubleArray0[2] = 4.547473508864641E-10;
      doubleArray0[3] = (double) 838;
      doubleArray0[4] = 4.547473508864641E-10;
      doubleArray0[5] = 4.547473508864641E-10;
      doubleArray0[6] = 4.547473508864641E-10;
      doubleArray0[7] = 1.1368683772161603E-10;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1.1368683772161603E-10, 4.547473508864641E-10, doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {2702.0, 1.666527509689331, 4.547473508864641E-10, 838.0, 4.547473508864641E-10, 4.547473508864641E-10, 4.547473508864641E-10, 1.1368683772161603E-10}, doubleArray0, 0.01);
      assertNotNull(highamHall54Integrator0);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(2.2737367544323206E-10, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(1.1368683772161603E-10, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(4.547473508864641E-10, highamHall54Integrator0.getMaxStep(), 0.01);
      
      highamHall54Integrator0.clearStepHandlers();
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {2702.0, 1.666527509689331, 4.547473508864641E-10, 838.0, 4.547473508864641E-10, 4.547473508864641E-10, 4.547473508864641E-10, 1.1368683772161603E-10}, doubleArray0, 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(2.2737367544323206E-10, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(1.1368683772161603E-10, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(4.547473508864641E-10, highamHall54Integrator0.getMaxStep(), 0.01);
      
      graggBulirschStoerIntegrator0.setStabilityCheck(true, 838, 0, 4.547473508864641E-10);
      assertEquals(2702.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(9.35130825405E-313, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(5.02665245490775E-155, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      double double0 = graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
      assertEquals(5.02665245490775E-155, double0, 0.01);
      assertEquals(2702.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(9.35130825405E-313, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(5.02665245490775E-155, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1890.142579887), 569.0737282643, doubleArray0, doubleArray0);
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {2702.0, 1.666527509689331, 4.547473508864641E-10, 838.0, 4.547473508864641E-10, 4.547473508864641E-10, 4.547473508864641E-10, 1.1368683772161603E-10}, doubleArray0, 0.01);
      assertNotNull(dormandPrince853Integrator0);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(1037.12606991021, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(569.0737282643, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(1890.142579887, dormandPrince853Integrator0.getMinStep(), 0.01);
      
      int int0 = dormandPrince853Integrator0.getOrder();
      assertEquals(8, doubleArray0.length);
      assertArrayEquals(new double[] {2702.0, 1.666527509689331, 4.547473508864641E-10, 838.0, 4.547473508864641E-10, 4.547473508864641E-10, 4.547473508864641E-10, 1.1368683772161603E-10}, doubleArray0, 0.01);
      assertEquals(8, int0);
      assertEquals(10.0, dormandPrince853Integrator0.getMaxGrowth(), 0.01);
      assertEquals(1037.12606991021, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(569.0737282643, dormandPrince853Integrator0.getMaxStep(), 0.01);
      assertEquals("Dormand-Prince 8 (5, 3)", dormandPrince853Integrator0.getName());
      assertEquals(8, dormandPrince853Integrator0.getOrder());
      assertEquals(0.9, dormandPrince853Integrator0.getSafety(), 0.01);
      assertEquals(Double.NaN, dormandPrince853Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.2, dormandPrince853Integrator0.getMinReduction(), 0.01);
      assertEquals(1890.142579887, dormandPrince853Integrator0.getMinStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double double0 = 60.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(60.0, 60.0, 60.0, 60.0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      
      int int0 = 437;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-246.487347);
      doubleArray0[1] = 10.830482811915438;
      doubleArray0[2] = 60.0;
      doubleArray0[3] = 10.830482811915438;
      doubleArray0[4] = (double) 437;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator1 = new GraggBulirschStoerIntegrator(10.830482811915438, (-246.487347), doubleArray0, doubleArray0);
      assertEquals(5, doubleArray0.length);
      assertArrayEquals(new double[] {(-246.487347), 10.830482811915438, 60.0, 10.830482811915438, 437.0}, doubleArray0, 0.01);
      assertNotNull(graggBulirschStoerIntegrator1);
      assertFalse(graggBulirschStoerIntegrator1.equals((Object)graggBulirschStoerIntegrator0));
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator1.getName());
      assertEquals(10.830482811915438, graggBulirschStoerIntegrator1.getMinStep(), 0.01);
      assertEquals(51.66794920488074, graggBulirschStoerIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(246.487347, graggBulirschStoerIntegrator1.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator1.getCurrentStepStart(), 0.01);
      
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator1.integrate((FirstOrderDifferentialEquations) null, 10.830482811915438, doubleArray0, 1.0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(60.0, 31.11711092, 31.11711092, 60.0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(31.11711092, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(43.209103846296095, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 60.0, (-814.9709413), (-898));
      assertEquals(31.11711092, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(43.209103846296095, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      Collection<StepHandler> collection0 = graggBulirschStoerIntegrator0.getStepHandlers();
      assertNotNull(collection0);
      assertEquals(31.11711092, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(43.209103846296095, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(612).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(1224, firstOrderConverter0.getDimension());
      
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.0, (FixedStepHandler) null, stepNormalizerMode0);
      assertNotNull(stepNormalizer0);
      
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      assertEquals(31.11711092, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(43.209103846296095, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertNotNull(expandableStatefulODE0);
      assertEquals(1224, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 31.11711092);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.sampling.StepNormalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(0.0);
      assertNotNull(classicalRungeKuttaIntegrator0);
      assertEquals("classical Runge-Kutta", classicalRungeKuttaIntegrator0.getName());
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      classicalRungeKuttaIntegrator0.clearEventHandlers();
      assertEquals("classical Runge-Kutta", classicalRungeKuttaIntegrator0.getName());
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      classicalRungeKuttaIntegrator0.addEventHandler(eventHandler0, 0.0, 0.0, (-390));
      assertEquals("classical Runge-Kutta", classicalRungeKuttaIntegrator0.getName());
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      Collection<EventHandler> collection0 = classicalRungeKuttaIntegrator0.getEventHandlers();
      assertTrue(collection0.contains(eventHandler0));
      assertNotNull(collection0);
      assertEquals("classical Runge-Kutta", classicalRungeKuttaIntegrator0.getName());
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      String string0 = classicalRungeKuttaIntegrator0.getName();
      assertNotNull(string0);
      assertEquals("classical Runge-Kutta", string0);
      assertEquals("classical Runge-Kutta", classicalRungeKuttaIntegrator0.getName());
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(60.0, 31.11711092, 31.11711092, 60.0);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(31.11711092, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(43.209103846296095, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      Collection<StepHandler> collection0 = graggBulirschStoerIntegrator0.getStepHandlers();
      assertNotNull(collection0);
      assertEquals(31.11711092, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(43.209103846296095, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(0, firstOrderConverter0.getDimension());
      
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.0, (FixedStepHandler) null, stepNormalizerMode0);
      assertNotNull(stepNormalizer0);
      
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      assertEquals(31.11711092, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(60.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(43.209103846296095, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      assertNotNull(expandableStatefulODE0);
      assertEquals(0, firstOrderConverter0.getDimension());
      assertEquals(Double.NaN, expandableStatefulODE0.getTime(), 0.01);
      
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 31.11711092);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.sampling.StepNormalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double double0 = (-3038.28);
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator((-3038.28));
      assertNotNull(eulerIntegrator0);
      assertEquals("Euler", eulerIntegrator0.getName());
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3038.28), (-3038.28), (-3038.28), (-3038.28));
      assertNotNull(highamHall54Integrator0);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(3038.28, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(3038.28, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(3038.28, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      
      int int0 = highamHall54Integrator0.getOrder();
      assertEquals(5, int0);
      assertEquals(10.0, highamHall54Integrator0.getMaxGrowth(), 0.01);
      assertEquals(3038.28, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(3038.28, highamHall54Integrator0.getMinStep(), 0.01);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
      assertEquals(0.2, highamHall54Integrator0.getMinReduction(), 0.01);
      assertEquals("Higham-Hall 5(4)", highamHall54Integrator0.getName());
      assertEquals(3038.28, highamHall54Integrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, highamHall54Integrator0.getCurrentStepStart(), 0.01);
      assertEquals(5, highamHall54Integrator0.getOrder());
      
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 5, doubleArray0, doubleArray0);
      assertEquals(1, doubleArray0.length);
      assertArrayEquals(new double[] {0.0}, doubleArray0, 0.01);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(5.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      assertNotNull(firstOrderConverter0);
      assertEquals(10, firstOrderConverter0.getDimension());
      
      double[] doubleArray1 = new double[7];
      assertFalse(doubleArray1.equals((Object)doubleArray0));
      
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-3038.28);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-3038.28);
      doubleArray1[6] = 0.0;
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 0.0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 10
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 84.32040550667716;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, doubleArray0, doubleArray0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 84.32040550667716, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertNotNull(graggBulirschStoerIntegrator0);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      
      graggBulirschStoerIntegrator0.setControlFactors(0.0, 307.03707355923035, 0.0, 1.1368683772161603E-10);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 84.32040550667716, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      
      MullerSolver2 mullerSolver2_0 = new MullerSolver2();
      assertNotNull(mullerSolver2_0);
      assertEquals(0.0, mullerSolver2_0.getMin(), 0.01);
      assertEquals(1.0E-6, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getStartValue(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getMax(), 0.01);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-14, mullerSolver2_0.getRelativeAccuracy(), 0.01);
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 0.0, (-2637.774447922153), (-2117), (UnivariateSolver) mullerSolver2_0);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 84.32040550667716, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getMin(), 0.01);
      assertEquals(1.0E-6, mullerSolver2_0.getAbsoluteAccuracy(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getStartValue(), 0.01);
      assertEquals(0.0, mullerSolver2_0.getMax(), 0.01);
      assertEquals(1.0E-15, mullerSolver2_0.getFunctionValueAccuracy(), 0.01);
      assertEquals(1.0E-14, mullerSolver2_0.getRelativeAccuracy(), 0.01);
      
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 1);
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 84.32040550667716, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
      
      graggBulirschStoerIntegrator0.setMaxEvaluations((-1958));
      assertEquals(9, doubleArray0.length);
      assertArrayEquals(new double[] {0.0, 84.32040550667716, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}, doubleArray0, 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(999.9999999998863);
      assertNotNull(midpointIntegrator0);
      assertEquals("midpoint", midpointIntegrator0.getName());
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      midpointIntegrator0.setMaxEvaluations(298);
      assertEquals("midpoint", midpointIntegrator0.getName());
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      Collection<StepHandler> collection0 = midpointIntegrator0.getStepHandlers();
      assertNotNull(collection0);
      assertEquals("midpoint", midpointIntegrator0.getName());
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      double double0 = midpointIntegrator0.getCurrentStepStart();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals("midpoint", midpointIntegrator0.getName());
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(0.0);
      assertNotNull(classicalRungeKuttaIntegrator0);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("classical Runge-Kutta", classicalRungeKuttaIntegrator0.getName());
      
      Collection<EventHandler> collection0 = classicalRungeKuttaIntegrator0.getEventHandlers();
      assertNotNull(collection0);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("classical Runge-Kutta", classicalRungeKuttaIntegrator0.getName());
      
      classicalRungeKuttaIntegrator0.clearStepHandlers();
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("classical Runge-Kutta", classicalRungeKuttaIntegrator0.getName());
      
      String string0 = classicalRungeKuttaIntegrator0.getName();
      assertNotNull(string0);
      assertEquals("classical Runge-Kutta", string0);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("classical Runge-Kutta", classicalRungeKuttaIntegrator0.getName());
      
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      classicalRungeKuttaIntegrator0.addEventHandler(eventHandler0, 0.0, 0.0, 0);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("classical Runge-Kutta", classicalRungeKuttaIntegrator0.getName());
      
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.0, fixedStepHandler0);
      assertNotNull(stepNormalizer0);
      
      stepNormalizer0.init((-74.181), (double[]) null, 0.36494147777557373);
      classicalRungeKuttaIntegrator0.addStepHandler(stepNormalizer0);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("classical Runge-Kutta", classicalRungeKuttaIntegrator0.getName());
      
      double double0 = classicalRungeKuttaIntegrator0.getCurrentStepStart();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals("classical Runge-Kutta", classicalRungeKuttaIntegrator0.getName());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double double0 = 0.0;
      double double1 = (-0.3333333333333333);
      double double2 = 1.0;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, (-0.3333333333333333), 1.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      dormandPrince853Integrator0.setSafety((-0.3333333333333333));
      double double3 = (-513.029913707888);
      // Undeclared exception!
      dormandPrince853Integrator0.integrate(expandableStatefulODE0, (-513.029913707888));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 1.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 1.0, 383.763095, 0.0);
      graggBulirschStoerIntegrator0.clearEventHandlers();
      double double2 = 0.75;
      graggBulirschStoerIntegrator0.setControlFactors(0.75, 0.75, 1.0, 1.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 383.763095);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-799.0));
      classicalRungeKuttaIntegrator0.getStepHandlers();
      classicalRungeKuttaIntegrator0.clearStepHandlers();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-799.0), (-799.0), 2239.833219690904, (-799.0));
      graggBulirschStoerIntegrator0.getEvaluations();
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      DummyStepHandler dummyStepHandler1 = DummyStepHandler.getInstance();
      DummyStepHandler.getInstance();
      DummyStepHandler.getInstance();
      DummyStepHandler.getInstance();
      graggBulirschStoerIntegrator0.addStepHandler(dummyStepHandler1);
      DummyStepHandler.getInstance();
      graggBulirschStoerIntegrator0.addStepHandler(dummyStepHandler0);
      graggBulirschStoerIntegrator0.setStabilityCheck(true, 25, 166, 12.360567175794303);
      graggBulirschStoerIntegrator0.setControlFactors(0.0, 12.360567175794303, (-113.0426), (-345.821502171));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      MullerSolver2 mullerSolver2_0 = new MullerSolver2();
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 2239.833219690904, 0.0, 0, (UnivariateSolver) mullerSolver2_0);
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 0);
      graggBulirschStoerIntegrator0.setMaxEvaluations(0);
      assertEquals(799.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(0.0);
      classicalRungeKuttaIntegrator0.getEventHandlers();
      classicalRungeKuttaIntegrator0.clearStepHandlers();
      classicalRungeKuttaIntegrator0.getName();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 926.2768341;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 0.0, doubleArray0, doubleArray0);
      int int0 = dormandPrince54Integrator0.getOrder();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-3.0));
      gillIntegrator0.setMaxEvaluations(650);
      gillIntegrator0.clearEventHandlers();
      gillIntegrator0.clearStepHandlers();
      gillIntegrator0.getName();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 650;
      doubleArray0[1] = 2690.883323;
      doubleArray0[2] = 2690.883323;
      doubleArray0[3] = 1629.265587978077;
      doubleArray0[4] = (-3.0);
      doubleArray0[5] = (double) 650;
      doubleArray0[6] = 2690.883323;
      doubleArray0[7] = (double) 650;
      doubleArray0[8] = (-3.0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2690.883323, (-3.0), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setStepSizeControl(0.0, 0.0, Double.NaN, 1629.265587978077);
      graggBulirschStoerIntegrator0.setControlFactors(1000.0, 2690.883323, (-193.8198789305), 206.855786846065);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(0.0);
      classicalRungeKuttaIntegrator0.getEventHandlers();
      classicalRungeKuttaIntegrator0.clearStepHandlers();
      classicalRungeKuttaIntegrator0.getName();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      classicalRungeKuttaIntegrator0.addEventHandler(eventHandler0, 0.0, 0.0, 0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.0, fixedStepHandler0);
      classicalRungeKuttaIntegrator0.addStepHandler(stepNormalizer0);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 253.747389;
      doubleArray0[1] = 253.747389;
      doubleArray0[2] = 253.747389;
      doubleArray0[3] = (-1707.127);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(253.747389, 253.747389, doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      dormandPrince853Integrator0.addEventHandler(eventHandler0, (-11.573902539959631), 0.0, 0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(253.747389, (-1403.2755306001), doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime(458.9832545);
      expandableStatefulODE0.getTotalDimension();
      graggBulirschStoerIntegrator0.getEvaluations();
      double double0 = 766.0203280592303;
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 766.0203280592303);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 4
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(1.0);
      int int0 = threeEighthesIntegrator0.getEvaluations();
      threeEighthesIntegrator0.clearEventHandlers();
      threeEighthesIntegrator0.clearEventHandlers();
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1.0, 1.0, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.setSafety(1.0);
      int int1 = dormandPrince853Integrator0.getOrder();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(Double.NaN);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      FixedStepHandler fixedStepHandler1 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.NEITHER;
      StepNormalizer stepNormalizer0 = new StepNormalizer(Double.NaN, fixedStepHandler1, stepNormalizerMode0, stepNormalizerBounds0);
      threeEighthesIntegrator0.addStepHandler(stepNormalizer0);
      StepNormalizerBounds stepNormalizerBounds1 = StepNormalizerBounds.LAST;
      StepNormalizer stepNormalizer1 = new StepNormalizer(Double.NaN, fixedStepHandler0, stepNormalizerBounds1);
      threeEighthesIntegrator0.addStepHandler(stepNormalizer1);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (-1326.681832641);
      doubleArray0[1] = (-1326.681832641);
      doubleArray0[2] = (-1326.681832641);
      doubleArray0[3] = (-1326.681832641);
      doubleArray0[4] = (-1326.681832641);
      doubleArray0[5] = (-1326.681832641);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1326.681832641), (-1326.681832641), doubleArray0, doubleArray0);
      boolean boolean0 = false;
      graggBulirschStoerIntegrator0.setInterpolationControl(false, 3024);
      graggBulirschStoerIntegrator0.setStepSizeControl((-1326.681832641), 2609.2, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setInterpolationControl(false, (-1644));
      double double0 = 125.34698557;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1326.681832641), 125.34698557, (-1326.681832641), 2609.2);
      highamHall54Integrator0.getOrder();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      SecondaryEquations secondaryEquations0 = mock(SecondaryEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondaryEquations0).getDimension();
      expandableStatefulODE0.addSecondaryEquations(secondaryEquations0);
      expandableStatefulODE0.getCompleteState();
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (double) 3024);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 6
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 0.0;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 0.0, 0.0, 0.0);
      dormandPrince54Integrator0.getOrder();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double2 = (-1823.537285197821);
      dormandPrince54Integrator0.addEventHandler(eventHandler0, (-1823.537285197821), 0.0, (-4434), (UnivariateSolver) null);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 5;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) (-4434);
      doubleArray0[3] = (double) (-4434);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) (-4434);
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = null;
      try {
        adamsBashforthIntegrator0 = new AdamsBashforthIntegrator((-4434), (-4434), (-4434), doubleArray0, doubleArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator((-4.436036387594894));
      eulerIntegrator0.clearStepHandlers();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-4.436036387594894);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-4.436036387594894);
      doubleArray0[7] = (-4.436036387594894);
      // Undeclared exception!
      try { 
        eulerIntegrator0.computeDerivatives(0.0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double double0 = (-3038.28);
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator((-3038.28));
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-3038.28), (-3038.28), (-3038.28), (-3038.28));
      highamHall54Integrator0.getOrder();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 5, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-3038.28);
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = (-3038.28);
      doubleArray1[6] = 0.0;
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 0.0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 115.20280974858;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 1588.0;
      doubleArray0[3] = 115.20280974858;
      doubleArray0[4] = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 115.20280974858, doubleArray0, doubleArray0);
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      graggBulirschStoerIntegrator0.addStepHandler(dummyStepHandler0);
      assertEquals(Double.NaN, graggBulirschStoerIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(60.0, 60.0, 60.0, 60.0);
      graggBulirschStoerIntegrator0.clearEventHandlers();
      graggBulirschStoerIntegrator0.getEvaluations();
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-1220.425680936606));
      graggBulirschStoerIntegrator0.addEventHandler((EventHandler) null, (double) 0, 9.094947017729282E-10, 0, (UnivariateSolver) regulaFalsiSolver0);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.computeDerivatives(2286.018468478609, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2355.1974684155, 0.0, doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      MullerSolver mullerSolver0 = new MullerSolver();
      dormandPrince853Integrator0.addEventHandler(eventHandler0, 0.0, 1812.182204480116, (-3727), (UnivariateSolver) mullerSolver0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1.0), 0.0, 1812.182204480116, 240.969013602664);
      graggBulirschStoerIntegrator0.setInitialStepSize(1665.650643674185);
      graggBulirschStoerIntegrator0.setControlFactors(0.0, 0.0, 1000.0, 1000.0);
      dormandPrince853Integrator0.getOrder();
      dormandPrince853Integrator0.getMaxEvaluations();
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(872, 2887.805, 2887.805, doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(60.0, 31.11711092, 31.11711092, 60.0);
      graggBulirschStoerIntegrator0.getMaxEvaluations();
      Collection<StepHandler> collection0 = graggBulirschStoerIntegrator0.getStepHandlers();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(969.922, (-988.0), doubleArray0, doubleArray0);
      int int0 = (-1);
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = null;
      try {
        adamsBashforthIntegrator0 = new AdamsBashforthIntegrator((-1), (-988.0), (-988.0), (-2784.749433567), 123.205446563);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // multistep method needs at least -1 previous steps, got 2
         //
         verifyException("org.apache.commons.math3.ode.MultistepIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1137.4666137);
      doubleArray0[1] = (-1137.4666137);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1137.4666137), (-1137.4666137), doubleArray0, doubleArray0);
      highamHall54Integrator0.clearEventHandlers();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1137.4666137), (-1137.4666137), doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.initializeStep(true, 0, doubleArray0, 337.8976835659, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
