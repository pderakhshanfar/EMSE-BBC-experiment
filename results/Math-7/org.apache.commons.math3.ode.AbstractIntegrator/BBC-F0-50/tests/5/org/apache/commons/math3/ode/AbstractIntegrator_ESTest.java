/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 00:57:26 GMT 2021
 */

package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import org.apache.commons.math3.analysis.function.Logistic;
import org.apache.commons.math3.analysis.solvers.BisectionSolver;
import org.apache.commons.math3.analysis.solvers.BrentSolver;
import org.apache.commons.math3.analysis.solvers.IllinoisSolver;
import org.apache.commons.math3.analysis.solvers.MullerSolver;
import org.apache.commons.math3.analysis.solvers.MullerSolver2;
import org.apache.commons.math3.analysis.solvers.RiddersSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator;
import org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator;
import org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.EulerIntegrator;
import org.apache.commons.math3.ode.nonstiff.GillIntegrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.nonstiff.MidpointIntegrator;
import org.apache.commons.math3.ode.sampling.DummyStepHandler;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.StepHandler;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.apache.commons.math3.ode.sampling.StepNormalizerBounds;
import org.apache.commons.math3.ode.sampling.StepNormalizerMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegrator_ESTest extends AbstractIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1069.7252831898));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      MullerSolver mullerSolver0 = new MullerSolver((-836.257));
      gillIntegrator0.addEventHandler(eventHandler0, 0.0, 3516.731950550221, 0, (UnivariateSolver) mullerSolver0);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-0.84375), (-1069.7252831898), (-1.0006050966910838), 3516.731950550221);
      gillIntegrator0.clearEventHandlers();
      dormandPrince54Integrator0.setInitialStepSize((-0.84375));
      dormandPrince54Integrator0.setSafety(4519.0665509);
      dormandPrince54Integrator0.getOrder();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((EventHandler.Action) null).when(eventHandler1).eventOccurred(anyDouble() , any(double[].class) , anyBoolean());
      doReturn((-802.5510657507424), 1393.1341630164275, 9.602293320384794E-8, (double)0, 0.0).when(eventHandler1).g(anyDouble() , any(double[].class));
      gillIntegrator0.addEventHandler(eventHandler1, (-1069.7252831898), (double) 0, 2146754153);
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 3516.731950550221, doubleArray0, (-0.84375), doubleArray0);
      gillIntegrator0.computeDerivatives(5, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.getCurrentSignedStepsize();
      dormandPrince54Integrator0.getOrder();
      gillIntegrator0.addEventHandler((EventHandler) null, 877.0, 0.0, (-2563), (UnivariateSolver) mullerSolver0);
      // Undeclared exception!
      dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 4586.4572337400205, doubleArray0, (double) 5, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1069.7252831898), (-1069.7252831898), (-1069.7252831898), 2586.52823235809);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(secondOrderDifferentialEquations0).getDimension();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-1069.7252831898), (double)5, 2586.52823235809, (-3261.7707531), 1831.6242153).when(eventHandler0).g(anyDouble() , any(double[].class));
      RiddersSolver riddersSolver0 = new RiddersSolver(2586.52823235809, (-1069.7252831898));
      highamHall54Integrator0.addEventHandler(eventHandler0, 2.147482647E9, (-1069.7252831898), 5, (UnivariateSolver) riddersSolver0);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        highamHall54Integrator0.integrate(expandableStatefulODE0, (-1069.7252831898));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [\uFFFD, \uFFFD], values: [1,831.624, 1,831.624]
         //
         verifyException("org.apache.commons.math3.analysis.solvers.UnivariateSolverUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double double0 = 3498.34375;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1069.7252831898), 3498.34375, (-1069.7252831898), 3498.34375);
      RiddersSolver riddersSolver0 = new RiddersSolver(1578.0, 3498.34375);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((double)1, (-1069.7252831898), Double.NaN).when(eventHandler0).g(anyDouble() , any(double[].class));
      highamHall54Integrator0.addEventHandler(eventHandler0, 1578.0, (double) 1, 1, (UnivariateSolver) riddersSolver0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter1);
      try { 
        highamHall54Integrator0.integrate(expandableStatefulODE0, 1578.0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (1) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1424.22542119), (-1424.22542119), (-1424.22542119), 464.4007835);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1424.22542119), 464.4007835, (-1424.22542119), (-1716.0294));
      graggBulirschStoerIntegrator0.setMaxEvaluations(0);
      graggBulirschStoerIntegrator0.setOrderControl(0, 0.0, 464.4007835);
      graggBulirschStoerIntegrator0.setMaxEvaluations(0);
      graggBulirschStoerIntegrator0.clearStepHandlers();
      graggBulirschStoerIntegrator0.getEvaluations();
      graggBulirschStoerIntegrator0.getMaxEvaluations();
      graggBulirschStoerIntegrator0.setControlFactors((-1424.22542119), (-9.35292435884448), (-2088.9523736495203), 0.0);
      graggBulirschStoerIntegrator0.setControlFactors(1049.63327574388, (-1424.22542119), 464.4007835, 0.0);
      graggBulirschStoerIntegrator0.getCurrentStepStart();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1069.7252831898));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-241.9028647624707), 3516.732).when(eventHandler0).g(anyDouble() , any(double[].class));
      int int0 = 0;
      MullerSolver mullerSolver0 = new MullerSolver(0, (-1069.7252831898));
      gillIntegrator0.addEventHandler(eventHandler0, (-1069.7252831898), 3516.732, 0, (UnivariateSolver) mullerSolver0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1069.7252831898), doubleArray0, (double) 0, doubleArray0);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(3516.732, (-1069.7252831898), (-241.9028647624707), (-2683.735859401098));
      highamHall54Integrator0.setMaxEvaluations(0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        highamHall54Integrator0.integrate(expandableStatefulODE0, (-6.414337408955734E-8));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1069.7252831898));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-1069.7252831898), 3497.5185326966393, (-2.574172005933276E-10), Double.NaN, (-2588.13801794367)).when(eventHandler0).g(anyDouble() , any(double[].class));
      DummyStepHandler.getInstance();
      MullerSolver mullerSolver0 = new MullerSolver((-836.257));
      gillIntegrator0.addEventHandler(eventHandler0, 0.0, 3497.5185326966393, 0, (UnivariateSolver) mullerSolver0);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-0.84375), (-1069.7252831898), (-1.0006050966910838), 3497.5185326966393);
      dormandPrince54Integrator0.setInitialStepSize((-0.84375));
      dormandPrince54Integrator0.setSafety(4519.0665509);
      dormandPrince54Integrator0.getOrder();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 3497.5185326966393, doubleArray0, (-0.84375), doubleArray0);
      gillIntegrator0.computeDerivatives(5, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.getCurrentSignedStepsize();
      GillIntegrator gillIntegrator1 = new GillIntegrator(30.042981005409462);
      double[] doubleArray1 = new double[0];
      gillIntegrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 3497.5185326966393, doubleArray0, 4755.24476, doubleArray1);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1069.7252831898), (-3017.840023), (-2.574172005933276E-10), 4519.0665509);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1069.7252831898));
      GillIntegrator gillIntegrator1 = new GillIntegrator(3498.34375);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      gillIntegrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 3498.34375, doubleArray0, 29.254387247358864, doubleArray0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime(35.81684148639408);
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter0);
      gillIntegrator1.getEvaluations();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1069.7252831898));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      doReturn((-1069.7252831898), 3497.5185326966393, (-2.574172005933276E-10), Double.NaN, (-2588.13801794367)).when(eventHandler0).g(anyDouble() , any(double[].class));
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      gillIntegrator0.addStepHandler(dummyStepHandler0);
      MullerSolver mullerSolver0 = new MullerSolver((-836.257));
      gillIntegrator0.addEventHandler(eventHandler0, 0.0, 3497.5185326966393, 0, (UnivariateSolver) mullerSolver0);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-0.84375), (-1069.7252831898), (-1.0006050966910838), 3497.5185326966393);
      dormandPrince54Integrator0.setInitialStepSize((-0.84375));
      dormandPrince54Integrator0.setSafety((-1069.7252831898));
      dormandPrince54Integrator0.getOrder();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 3497.5185326966393, doubleArray0, (-0.84375), doubleArray0);
      gillIntegrator0.computeDerivatives(5, doubleArray0, doubleArray0);
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1740.56083), doubleArray0, (-1711.306442752641), doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter1);
      expandableStatefulODE0.setTime((-1711.306442752641));
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter1);
      expandableStatefulODE1.setCompleteState(doubleArray0);
      ExpandableStatefulODE expandableStatefulODE2 = new ExpandableStatefulODE(firstOrderConverter1);
      gillIntegrator0.getEventHandlers();
      // Undeclared exception!
      gillIntegrator0.integrate(expandableStatefulODE1, 1.3399392455370071E-284);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double double0 = 1297.865;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-2142.2493192405), (-2142.2493192405), (-2142.2493192405), 1297.865);
      // Undeclared exception!
      try { 
        highamHall54Integrator0.integrate((ExpandableStatefulODE) null, (-2142.2493192405));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1069.7252831898));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-241.9028647624707), 1.929433822631836).when(eventHandler0).g(anyDouble() , any(double[].class));
      MullerSolver mullerSolver0 = new MullerSolver((-836.257));
      gillIntegrator0.addEventHandler(eventHandler0, 0.0, Double.NaN, 0, (UnivariateSolver) mullerSolver0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      try { 
        gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, Double.NaN, doubleArray0, (-0.84375), doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1069.7252831898));
      double double0 = 1.929433822631836;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-241.9028647624707), 1.929433822631836, (-0.84375), (-241.9028647624707), 5114.011).when(eventHandler0).g(anyDouble() , any(double[].class));
      MullerSolver mullerSolver0 = new MullerSolver((-836.257));
      gillIntegrator0.addEventHandler(eventHandler0, 0.0, 3516.732, 0, (UnivariateSolver) mullerSolver0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 3516.732, doubleArray0, (-0.84375), doubleArray0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime(5114.011);
      expandableStatefulODE0.setCompleteState(doubleArray0);
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter0);
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(5, 0.0, 0, 3517.57575, 1601.28373164327);
      // Undeclared exception!
      try { 
        adamsBashforthIntegrator0.integrate(expandableStatefulODE0, 1.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one column
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double double0 = (-2142.2493192405);
      double double1 = 1297.865;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      GillIntegrator gillIntegrator0 = new GillIntegrator(0.15685509669108377);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-2142.2493192405);
      doubleArray1[1] = 2.0454950851007314E110;
      double double2 = 4022.1982233949125;
      doubleArray1[2] = 4022.1982233949125;
      doubleArray1[3] = (-2142.2493192405);
      doubleArray1[4] = (-2142.2493192405);
      try { 
        gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-2142.2493192405), doubleArray0, 1297.865, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1069.7252831898));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-1069.7252831898), 3497.5185326966393, (-2.574172005933276E-10), Double.NaN, (-2588.13801794367)).when(eventHandler0).g(anyDouble() , any(double[].class));
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      gillIntegrator0.addStepHandler(dummyStepHandler0);
      MullerSolver mullerSolver0 = new MullerSolver((-836.257));
      mullerSolver0.getEvaluations();
      gillIntegrator0.addEventHandler(eventHandler0, 0.0, 3497.5185326966393, 0, (UnivariateSolver) mullerSolver0);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-0.84375), (-1069.7252831898), (-1.0006050966910838), 3497.5185326966393);
      dormandPrince54Integrator0.setInitialStepSize((-0.84375));
      dormandPrince54Integrator0.setSafety(4519.0665509);
      dormandPrince54Integrator0.getOrder();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 3497.5185326966393, doubleArray0, (-0.84375), doubleArray0);
      gillIntegrator0.computeDerivatives(5, doubleArray0, doubleArray0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1.31072E8, doubleArray0, 3497.5185326966393, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1069.7252831898));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      MullerSolver mullerSolver0 = new MullerSolver((-836.257));
      gillIntegrator0.addEventHandler(eventHandler0, 0.0, 3516.731950550221, 0, (UnivariateSolver) mullerSolver0);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-0.84375), (-1069.7252831898), (-1.0006050966910838), 3516.731950550221);
      gillIntegrator0.clearEventHandlers();
      dormandPrince54Integrator0.setInitialStepSize((-0.84375));
      dormandPrince54Integrator0.setSafety(4519.0665509);
      dormandPrince54Integrator0.getOrder();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler1).g(anyDouble() , any(double[].class));
      gillIntegrator0.addEventHandler(eventHandler1, (-1069.7252831898), (double) 0, 2146754153);
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 3516.731950550221, doubleArray0, (-0.84375), doubleArray0);
      gillIntegrator0.computeDerivatives(5, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.getCurrentSignedStepsize();
      gillIntegrator0.addEventHandler((EventHandler) null, 877.0, 0.0, (-2563), (UnivariateSolver) mullerSolver0);
      // Undeclared exception!
      dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 4586.4572337400205, doubleArray0, (double) 5, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1069.7252831898));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      DummyStepHandler.getInstance();
      MullerSolver mullerSolver0 = new MullerSolver((-836.257));
      gillIntegrator0.addEventHandler(eventHandler0, 0.0, (-0.84375), 0, (UnivariateSolver) mullerSolver0);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-0.84375), (-1069.7252831898), (-1.0006050966910838), (-0.84375));
      dormandPrince54Integrator0.setInitialStepSize((-0.84375));
      dormandPrince54Integrator0.setSafety(4519.0665509);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      try { 
        gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-0.84375), doubleArray0, (-0.84375), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1069.7252831898));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-1069.7252831898), 3497.5185326966393, (-2.574172005933276E-10), Double.NaN, (-2588.13801794367)).when(eventHandler0).g(anyDouble() , any(double[].class));
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      gillIntegrator0.addStepHandler(dummyStepHandler0);
      MullerSolver mullerSolver0 = new MullerSolver((-836.257));
      gillIntegrator0.addEventHandler(eventHandler0, 0.0, 3497.5185326966393, 0, (UnivariateSolver) mullerSolver0);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-0.84375), (-1069.7252831898), (-1.0006050966910838), 3497.5185326966393);
      dormandPrince54Integrator0.setInitialStepSize((-0.84375));
      dormandPrince54Integrator0.setSafety(4519.0665509);
      dormandPrince54Integrator0.getOrder();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 3497.5185326966393, doubleArray0, (-0.84375), doubleArray0);
      gillIntegrator0.computeDerivatives(5, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.getCurrentSignedStepsize();
      gillIntegrator0.addEventHandler((EventHandler) null, 877.0, 0.0, (-2563), (UnivariateSolver) mullerSolver0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(9.516285362051742E-8);
      midpointIntegrator0.getCurrentStepStart();
      midpointIntegrator0.getCurrentStepStart();
      midpointIntegrator0.getMaxEvaluations();
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-1490.35757645309), 9.516285362051742E-8, Double.NaN, Double.NaN);
      dormandPrince54Integrator0.getOrder();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      MullerSolver mullerSolver0 = new MullerSolver((-836.257));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      GillIntegrator gillIntegrator0 = new GillIntegrator((-836.257));
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1453.369683824), doubleArray0, 836.257, doubleArray0);
      gillIntegrator0.getCurrentStepStart();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1069.7252831898));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      MullerSolver mullerSolver0 = new MullerSolver((-836.257));
      gillIntegrator0.addEventHandler(eventHandler0, 0.0, 3516.731950550221, 0, (UnivariateSolver) mullerSolver0);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-0.84375), (-1069.7252831898), (-1.0006050966910838), 3516.731950550221);
      dormandPrince54Integrator0.setInitialStepSize((-0.84375));
      dormandPrince54Integrator0.getMaxEvaluations();
      dormandPrince54Integrator0.setSafety(4519.0665509);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-3427.9668);
      doubleArray0[2] = (-1.0006050966910838);
      doubleArray0[3] = 3516.731950550221;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(3.634736373360733E-8, (-1.0006050966910838), doubleArray0, doubleArray0);
      try { 
        highamHall54Integrator0.integrate(expandableStatefulODE0, (-3427.9668));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 6
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-2142.2493192405), (-2142.2493192405), (-2142.2493192405), (-7.369842361872221E127));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      highamHall54Integrator0.integrate(expandableStatefulODE0, (-2142.2493192405));
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime(0.0);
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1069.7252831898));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(1000.0, (-1.0006050966910838), 1000.0, 3516.731950550221).when(eventHandler0).g(anyDouble() , any(double[].class));
      MullerSolver mullerSolver0 = new MullerSolver((-836.257));
      gillIntegrator0.addEventHandler(eventHandler0, 0.0, 3516.731950550221, 0, (UnivariateSolver) mullerSolver0);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-0.84375), (-1069.7252831898), (-1.0006050966910838), 3516.731950550221);
      dormandPrince54Integrator0.setInitialStepSize((-0.84375));
      dormandPrince54Integrator0.setSafety(4519.0665509);
      dormandPrince54Integrator0.getOrder();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 3942.796052001956, doubleArray0, 1000.0, doubleArray0);
      gillIntegrator0.computeDerivatives(1.2840254306793213, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.getCurrentSignedStepsize();
      gillIntegrator0.addEventHandler((EventHandler) null, 4519.0665509, (-1511.354021395486), (-2563), (UnivariateSolver) mullerSolver0);
      assertEquals(1.0E-14, mullerSolver0.getRelativeAccuracy(), 0.01);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1069.7252831898));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-0.84375), 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      MullerSolver mullerSolver0 = new MullerSolver((-836.257));
      gillIntegrator0.addEventHandler(eventHandler0, 0.0, 3516.731950550221, 0, (UnivariateSolver) mullerSolver0);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-0.84375), (-1069.7252831898), (-1.0006050966910838), 3516.731950550221);
      dormandPrince54Integrator0.setInitialStepSize((-0.84375));
      dormandPrince54Integrator0.setSafety(4519.0665509);
      dormandPrince54Integrator0.getOrder();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      double double0 = gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 3516.731950550221, doubleArray0, (-0.84375), doubleArray0);
      assertEquals((-0.84375), double0, 0.01);
      
      gillIntegrator0.computeDerivatives(5, doubleArray0, doubleArray0);
      double double1 = dormandPrince54Integrator0.getCurrentSignedStepsize();
      assertEquals(30.042981005409462, double1, 0.01);
      
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(3516.731950550221, 3614.35817, 824.01, Double.NaN);
      graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1.1214757379328965E-8), doubleArray0, 0.0, doubleArray0);
      assertEquals(3565.2109134203024, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1069.7252831898));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      MullerSolver mullerSolver0 = new MullerSolver((-836.257));
      gillIntegrator0.addEventHandler(eventHandler0, 0.0, 3516.731950550221, 0, (UnivariateSolver) mullerSolver0);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-0.84375), (-1069.7252831898), (-1.0006050966910838), 3516.731950550221);
      dormandPrince54Integrator0.setInitialStepSize((-0.84375));
      dormandPrince54Integrator0.setSafety(4519.0665509);
      dormandPrince54Integrator0.getOrder();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      try { 
        gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 3516.731950550221, doubleArray0, (-0.84375), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 10
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double double0 = 0.6433927460157636;
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(0.6433927460157636);
      int int0 = (-1400);
      double double1 = (-317.820892365577);
      double double2 = (-602.82);
      classicalRungeKuttaIntegrator0.setMaxEvaluations((-1400));
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = null;
      try {
        adamsMoultonIntegrator0 = new AdamsMoultonIntegrator((-1400), (-317.820892365577), 0.6433927460157636, (-602.82), 544.789135715282);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // multistep method needs at least -1,400 previous steps, got 2
         //
         verifyException("org.apache.commons.math3.ode.MultistepIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1000.0;
      doubleArray0[1] = (-2100.61);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-2100.61), (-2100.61), doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getOrder();
      dormandPrince853Integrator0.clearEventHandlers();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(4.547473508864641E-10, 0.0, 8, 1.024714469909668);
      graggBulirschStoerIntegrator0.addStepHandler((StepHandler) null);
      dormandPrince853Integrator0.getOrder();
      dormandPrince853Integrator0.getOrder();
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 8);
      assertEquals(4.547473508864641E-10, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-750.69);
      doubleArray0[1] = (-750.69);
      doubleArray0[2] = (-750.69);
      doubleArray0[3] = (-750.69);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, (-750.69), doubleArray0, doubleArray0);
      dormandPrince54Integrator0.setSafety(0.0);
      dormandPrince54Integrator0.getMaxEvaluations();
      dormandPrince54Integrator0.getCurrentStepStart();
      dormandPrince54Integrator0.getMaxEvaluations();
      dormandPrince54Integrator0.setMinReduction((-750.69));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      BrentSolver brentSolver0 = new BrentSolver(Integer.MAX_VALUE, (-1157.816014));
      dormandPrince54Integrator0.addEventHandler(eventHandler0, 1000.0, 1000.0, 3067, (UnivariateSolver) brentSolver0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-750.69), (-1180.7049202812007), (-314.1), Double.NaN);
      graggBulirschStoerIntegrator0.getMaxEvaluations();
      brentSolver0.getMaxEvaluations();
      graggBulirschStoerIntegrator0.clearEventHandlers();
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler1).toString();
      graggBulirschStoerIntegrator0.getStepHandlers();
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler1, (-750.69), 1.0, (-1892), (UnivariateSolver) brentSolver0);
      graggBulirschStoerIntegrator0.getName();
      int int0 = graggBulirschStoerIntegrator0.getMaxEvaluations();
      assertEquals(Integer.MAX_VALUE, int0);
      
      Collection<EventHandler> collection0 = graggBulirschStoerIntegrator0.getEventHandlers();
      assertTrue(collection0.contains(eventHandler1));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) 1;
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(1, 1, 1, doubleArray0, doubleArray0);
      Collection<StepHandler> collection0 = adamsBashforthIntegrator0.getStepHandlers();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, 0.0, 0.0);
      dormandPrince853Integrator0.getStepHandlers();
      dormandPrince853Integrator0.getStepHandlers();
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      DummyStepHandler.getInstance();
      DummyStepHandler.getInstance();
      DummyStepHandler.getInstance();
      dormandPrince853Integrator0.addStepHandler(dummyStepHandler0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2150.8333894595507;
      doubleArray0[2] = 2150.8333894595507;
      doubleArray0[3] = 0.0;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      dormandPrince853Integrator0.addEventHandler(eventHandler0, (-717.7081904658831), 2150.8333894595507, 0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2150.8333894595507, 0.0, doubleArray0, doubleArray0);
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.setInterpolationControl(true, Integer.MAX_VALUE);
      graggBulirschStoerIntegrator0.setControlFactors(2150.8333894595507, 5175.704044109338, Integer.MAX_VALUE, 0.0);
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler1, 0.0, 0.0, Integer.MAX_VALUE);
      graggBulirschStoerIntegrator0.setOrderControl(0, 2150.8333894595507, 2150.8333894595507);
      graggBulirschStoerIntegrator0.clearStepHandlers();
      EventHandler eventHandler2 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      dormandPrince853Integrator0.addEventHandler(eventHandler2, 2150.8333894595507, 2150.8333894595507, 296, (UnivariateSolver) null);
      graggBulirschStoerIntegrator0.setStabilityCheck(true, 1833, 149, (-8.149787010746927));
      assertEquals(2150.8333894595507, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 0.0, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.setSafety((-552.2683827157887));
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = 0.0;
      dormandPrince54Integrator0.getEventHandlers();
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 0.0;
      doubleArray1[5] = 0.0;
      dormandPrince54Integrator0.getEventHandlers();
      doubleArray1[6] = 100.0;
      doubleArray1[7] = 0.0;
      // Undeclared exception!
      try { 
        dormandPrince54Integrator0.computeDerivatives((-1215.80509533017), doubleArray1, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(0.0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, (-561.0), (-561.0), (-1.0));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (-561.0), Double.NaN, (-1));
      graggBulirschStoerIntegrator0.setControlFactors((-1.0), Double.NaN, 0.0, 0.0);
      gillIntegrator0.getName();
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, (-4194.03844), (-112.06242), (-561.0));
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.BOTH;
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.0, fixedStepHandler0, stepNormalizerMode0, stepNormalizerBounds0);
      dormandPrince54Integrator0.addStepHandler(stepNormalizer0);
      dormandPrince54Integrator0.getOrder();
      gillIntegrator0.getEvaluations();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 2084.991966730105;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) 5;
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) (-1);
      doubleArray1[1] = (double) (-1);
      doubleArray1[2] = (-112.06242);
      doubleArray1[3] = (double) 5;
      doubleArray1[4] = (-4194.03844);
      doubleArray1[5] = 0.0;
      doubleArray1[6] = 0.0;
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.computeDerivatives(0, doubleArray0, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-2142.2493192405), (-2142.2493192405), (-2142.2493192405), (-7.369842361872221E127));
      HighamHall54Integrator highamHall54Integrator1 = new HighamHall54Integrator(Double.NaN, Double.NaN, (-7.369842361872221E127), 3564.375840707);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-2142.2493192405);
      doubleArray0[1] = (-2142.2493192405);
      doubleArray0[2] = (-1034.0);
      doubleArray0[3] = (-738.96895);
      doubleArray0[4] = (-2142.2493192405);
      doubleArray0[5] = (-7.369842361872221E127);
      doubleArray0[6] = (-294.75588714);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(3564.375840707, (-1034.0), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 939);
      String string0 = graggBulirschStoerIntegrator0.getName();
      assertEquals("Gragg-Bulirsch-Stoer", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.2784090909090909;
      doubleArray0[1] = 0.2784090909090909;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.2784090909090909, 0.2784090909090909, doubleArray0, doubleArray0);
      boolean boolean0 = false;
      int int0 = (-1359);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) (-1359);
      doubleArray1[1] = 0.2784090909090909;
      doubleArray1[2] = 1419.12112;
      doubleArray1[3] = 0.2784090909090909;
      doubleArray1[4] = 0.2784090909090909;
      doubleArray1[5] = 0.2784090909090909;
      doubleArray1[6] = 618.8337935020285;
      doubleArray1[7] = 618.8337935020285;
      doubleArray1[8] = 0.2784090909090909;
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 618.8337935020285, doubleArray0, 0.2784090909090909, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, doubleArray0, doubleArray0);
      boolean boolean0 = false;
      graggBulirschStoerIntegrator0.setControlFactors((-2242.0), 0.0, 0.0, 0.0);
      graggBulirschStoerIntegrator0.setStabilityCheck(false, 1, 1, 0.0);
      graggBulirschStoerIntegrator0.setOrderControl(1, 1, 0.0);
      graggBulirschStoerIntegrator0.addEventHandler((EventHandler) null, 0.0, 0.0, (-2733));
      graggBulirschStoerIntegrator0.getEvaluations();
      graggBulirschStoerIntegrator0.getEvaluations();
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0, 1710.95741111, 1, 0.0);
      dormandPrince853Integrator0.setMinReduction(0.78125);
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      dormandPrince853Integrator0.addStepHandler(dummyStepHandler0);
      dormandPrince853Integrator0.getOrder();
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.computeDerivatives(0.0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-3489.0);
      doubleArray0[1] = (-3043.686491722);
      doubleArray0[2] = (-3489.0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-3043.686491722), (-3489.0), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setStabilityCheck(false, 189, 2163, 1694.497);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 0.0, 0.0, 17);
      graggBulirschStoerIntegrator0.setStepSizeControl((-3489.0), 0.0, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.getCurrentStepStart();
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.0, fixedStepHandler0);
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      assertEquals(3258.745490156919, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double double0 = 1631.7791323;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 1631.7791323;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1631.7791323, 0.0, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-2255.8219422), 0, 0);
      dormandPrince853Integrator0.addEventHandler(eventHandler0, 1.0, (-2255.8219422), 0, (UnivariateSolver) illinoisSolver0);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 0.0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1.4842534265191358E-8, (-1503.06351522), 1.4842534265191358E-8, (-633.32764492006));
      dormandPrince54Integrator0.getStepHandlers();
      dormandPrince54Integrator0.getMaxEvaluations();
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1.4842534265191358E-8, 2.1253302469985373E-111, doubleArray0, doubleArray0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) null, (-4072.858904), doubleArray0, 1354.88296802, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1069.7252831898));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      MullerSolver mullerSolver0 = new MullerSolver((-836.257));
      gillIntegrator0.addEventHandler(eventHandler0, 0.0, 3516.731950550221, 0, (UnivariateSolver) mullerSolver0);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-0.84375), (-1069.7252831898), (-1.0006050966910838), 3516.731950550221);
      dormandPrince54Integrator0.setInitialStepSize((-0.84375));
      dormandPrince54Integrator0.setSafety(4519.0665509);
      dormandPrince54Integrator0.getOrder();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 3516.731950550221, doubleArray0, (-0.84375), doubleArray0);
      gillIntegrator0.computeDerivatives(5, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.getCurrentSignedStepsize();
      gillIntegrator0.addEventHandler((EventHandler) null, 877.0, 0.0, (-2563), (UnivariateSolver) mullerSolver0);
      assertEquals("Gill", gillIntegrator0.getName());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double double0 = 950.2;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 950.2;
      doubleArray0[1] = 950.2;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 950.2, doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      int int0 = 0;
      double double1 = 886.2629036855;
      graggBulirschStoerIntegrator0.setStepSizeControl(0.0, 886.2629036855, 0.0, 0.0);
      graggBulirschStoerIntegrator0.getEvaluations();
      BrentSolver brentSolver0 = new BrentSolver();
      double double2 = (-54.2268826270835);
      Logistic logistic0 = null;
      try {
        logistic0 = new Logistic(0.0, (-2200.8995), (-2200.8995), (-54.2268826270835), 3134.5127919, (-189.17813819516758));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // -189.178 is smaller than, or equal to, the minimum (0)
         //
         verifyException("org.apache.commons.math3.analysis.function.Logistic", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double double0 = (-1424.22542119);
      double double1 = 464.4007835;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1424.22542119), (-1424.22542119), (-1424.22542119), 464.4007835);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1424.22542119), 464.4007835, (-1424.22542119), (-1716.0294));
      graggBulirschStoerIntegrator0.setMaxEvaluations(0);
      graggBulirschStoerIntegrator0.setOrderControl(0, 0.0, 464.4007835);
      graggBulirschStoerIntegrator0.setMaxEvaluations(56);
      graggBulirschStoerIntegrator0.clearStepHandlers();
      graggBulirschStoerIntegrator0.getEvaluations();
      graggBulirschStoerIntegrator0.getMaxEvaluations();
      graggBulirschStoerIntegrator0.setControlFactors((-1424.22542119), (-9.35292435884448), (-2088.9523736495203), 0.0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 0.0;
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.initializeStep(true, 56, doubleArray0, 0.0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(4.547473508864641E-10);
      double double0 = midpointIntegrator0.getCurrentSignedStepsize();
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1.0), 1.0, Double.NaN, Double.NaN);
      graggBulirschStoerIntegrator0.setOrderControl(1, 1.0, (-288.7));
      assertEquals(1.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 0.0, 624.4977376, 0.0);
      dormandPrince853Integrator0.getCurrentSignedStepsize();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 624.4977376;
      doubleArray0[1] = (double) (-1783);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) (-1783);
      doubleArray0[6] = 0.0;
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = null;
      try {
        adamsMoultonIntegrator0 = new AdamsMoultonIntegrator((-1783), 0.0, (-3233.06030793), doubleArray0, doubleArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator((-0.3333333333333333));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      MullerSolver2 mullerSolver2_0 = new MullerSolver2();
      eulerIntegrator0.addEventHandler(eventHandler0, 743.54267, 743.54267, 1693, (UnivariateSolver) mullerSolver2_0);
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      BrentSolver brentSolver0 = new BrentSolver(0.0);
      eulerIntegrator0.addEventHandler(eventHandler1, 0.0, (double) 1693, Integer.MAX_VALUE, (UnivariateSolver) brentSolver0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-0.3333333333333333), 0.0, 1693, 0.0);
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 0);
      assertEquals(0.0, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1322.8810310811, 1322.8810310811, 1322.8810310811, 1322.8810310811);
      dormandPrince853Integrator0.setStepSizeControl(1322.8810310811, (-3.4046500868740456E-4), 64.53576675, 0.0);
      dormandPrince853Integrator0.getEventHandlers();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1.0), (-157.0512781008997), 64.53576675, 0.0);
      BisectionSolver bisectionSolver0 = new BisectionSolver(0.0, 64.53576675);
      graggBulirschStoerIntegrator0.addEventHandler((EventHandler) null, 0.0, 0.0, 0, (UnivariateSolver) bisectionSolver0);
      assertEquals(0.0, bisectionSolver0.getMax(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-236.73425445885);
      doubleArray0[1] = (-1381.9413053427409);
      doubleArray0[2] = (-236.73425445885);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1381.9413053427409), (-236.73425445885), doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double0 = (-471.08588356);
      BrentSolver brentSolver0 = new BrentSolver((-471.08588356), (-236.73425445885));
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (-236.73425445885), (-236.73425445885), 0, (UnivariateSolver) brentSolver0);
      double double1 = 117.3486914;
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = null;
      try {
        adamsMoultonIntegrator0 = new AdamsMoultonIntegrator((-1), 117.3486914, (-236.73425445885), (-1), 945.3176306922018);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // multistep method needs at least -1 previous steps, got 2
         //
         verifyException("org.apache.commons.math3.ode.MultistepIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-2142.2493192405), (-2142.2493192405), (-2142.2493192405), 1297.865);
      assertEquals(0.9, highamHall54Integrator0.getSafety(), 0.01);
  }
}
