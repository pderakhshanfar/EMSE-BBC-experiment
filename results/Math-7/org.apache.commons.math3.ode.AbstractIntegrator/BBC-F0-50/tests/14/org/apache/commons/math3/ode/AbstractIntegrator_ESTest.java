/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 01:01:57 GMT 2021
 */

package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.solvers.BisectionSolver;
import org.apache.commons.math3.analysis.solvers.IllinoisSolver;
import org.apache.commons.math3.analysis.solvers.RiddersSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.EulerIntegrator;
import org.apache.commons.math3.ode.nonstiff.GillIntegrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.nonstiff.MidpointIntegrator;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.StepHandler;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.apache.commons.math3.ode.sampling.StepNormalizerMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegrator_ESTest extends AbstractIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1144.22136824066, (-2481.8), Double.NaN, 10.17483840207564);
      dormandPrince853Integrator0.clearStepHandlers();
      dormandPrince853Integrator0.setMaxGrowth(0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      dormandPrince853Integrator0.setMaxGrowth(0);
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 24.378918079248606, doubleArray0, (double) 0, doubleArray0);
      dormandPrince853Integrator0.clearStepHandlers();
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(3.150242850860434E59, 3.150242850860434E59, 3.150242850860434E59, 6223.106004325409);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer0 = new StepNormalizer(6223.106004325409, fixedStepHandler0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3.150242850860434E59;
      doubleArray0[1] = 6223.106004325409;
      doubleArray0[2] = 3.150242850860434E59;
      doubleArray0[3] = 3.150242850860434E59;
      doubleArray0[4] = 3.150242850860434E59;
      doubleArray0[5] = 3.150242850860434E59;
      doubleArray0[6] = 3.150242850860434E59;
      stepNormalizer0.init(3.150242850860434E59, doubleArray0, (-1599.19676022));
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(3.150242850860434E59, 6223.106004325409, 2082.734395729, 39.974);
      dormandPrince54Integrator0.getOrder();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime(1.3790154522394582E-163);
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 6223.106004325409);
      graggBulirschStoerIntegrator0.setControlFactors(39.974, (-2130.9117906684), (-3132.68258), 3.150242850860434E59);
      dormandPrince54Integrator0.getStepHandlers();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(1587.5999999995452);
      midpointIntegrator0.getCurrentStepStart();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(67.5);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      classicalRungeKuttaIntegrator0.addEventHandler(eventHandler0, 1.0, 1.0, 2);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(67.5);
      midpointIntegrator0.getCurrentStepStart();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 1820.424838;
      doubleArray0[1] = 1820.424838;
      doubleArray0[2] = 4090.67530903661;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(4090.67530903661, 1820.424838, doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        dormandPrince54Integrator0.integrate((ExpandableStatefulODE) null, (-139.2903));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double double0 = 2616.0;
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(2616.0, 2616.0, doubleArray0, doubleArray0);
      highamHall54Integrator0.clearStepHandlers();
      double double1 = 10.17483840207564;
      double double2 = 2615.0;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2722.581555, 2444.1630959371, (-2293.240998), 2615.0);
      DormandPrince853Integrator dormandPrince853Integrator1 = new DormandPrince853Integrator((-2481.8), (-2481.8), (-2293.240998), 1.797135137545755E-8);
      dormandPrince853Integrator1.clearStepHandlers();
      dormandPrince853Integrator1.setMaxGrowth(2722.581555);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      dormandPrince853Integrator0.setMaxGrowth((-560.7));
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) 0, doubleArray0, 0.0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double double0 = 2616.0;
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(2616.0, 2616.0, doubleArray0, doubleArray0);
      highamHall54Integrator0.clearStepHandlers();
      double double1 = 0.0;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, (-2481.8), 10.17483840207564, (-2293.240998));
      dormandPrince853Integrator0.clearStepHandlers();
      dormandPrince853Integrator0.setMaxGrowth(3.3087224502121107E-21);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      dormandPrince853Integrator0.setMaxGrowth(3913.67780432541);
      dormandPrince853Integrator0.setMaxGrowth(2138.733761027047);
      dormandPrince853Integrator0.setMaxGrowth(4356.2757);
      DormandPrince853Integrator dormandPrince853Integrator1 = new DormandPrince853Integrator(2138.733761027047, 2138.733761027047, doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-2481.8);
      doubleArray1[1] = (-2293.240998);
      doubleArray1[2] = 4356.2757;
      try { 
        dormandPrince853Integrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 3.3087224502121107E-21, doubleArray0, (-2293.240998), doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(2616.0, 2616.0, doubleArray0, doubleArray0);
      highamHall54Integrator0.clearStepHandlers();
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, (-2481.8), 10.17483840207564, (-2293.240998));
      dormandPrince853Integrator0.clearStepHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      dormandPrince853Integrator0.setMaxGrowth(10.17483842004699);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      dormandPrince853Integrator0.setMaxGrowth(2022.7518199820286);
      DormandPrince853Integrator dormandPrince853Integrator1 = new DormandPrince853Integrator(3.3087224502121107E-21, (-2481.8), (-2.401816502004675E-309), 0.40611594915390015);
      dormandPrince853Integrator1.setMaxGrowth(3913.67780432541);
      dormandPrince853Integrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter1, 10.17483842004699, doubleArray0, 10.17483840207564, doubleArray0);
      dormandPrince853Integrator1.clearStepHandlers();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 1000.0, (-1367.9754905343054), 0);
      graggBulirschStoerIntegrator0.setInterpolationControl(true, (-284));
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.computeDerivatives((-1087.3070912), doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(2616.0, 2616.0, doubleArray0, doubleArray0);
      highamHall54Integrator0.clearStepHandlers();
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, (-2481.8), 10.17483840207564, (-2293.240998));
      dormandPrince853Integrator0.clearStepHandlers();
      dormandPrince853Integrator0.setMaxGrowth(3.3087224502121107E-21);
      int int0 = 0;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double double0 = 3913.67780432541;
      dormandPrince853Integrator0.setMaxGrowth(3913.67780432541);
      dormandPrince853Integrator0.setMaxGrowth(3913.67780432541);
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 3.3087224502121107E-21, doubleArray0, 3.3087224502121107E-21, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(537).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double[] doubleArray0 = new double[9];
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2310.7916493307);
      doubleArray0[3] = (-2310.7916493307);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-2310.7916493307);
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      doubleArray0[8] = (double) 537;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, (-2310.7916493307), doubleArray0, doubleArray0);
      highamHall54Integrator0.getMaxEvaluations();
      highamHall54Integrator0.getMaxEvaluations();
      try { 
        highamHall54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-2310.7916493307), doubleArray0, 0.0, (double[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 1,074
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(4.547473508864641E-10, (-2293.240998), (-2293.240998), 1.3404009342193604);
      DormandPrince853Integrator dormandPrince853Integrator1 = new DormandPrince853Integrator(1.3404009342193604, 1.538278579711914, (-2481.8), 4.547473508864641E-10);
      dormandPrince853Integrator1.clearStepHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      DormandPrince853Integrator dormandPrince853Integrator2 = new DormandPrince853Integrator(1.3404009342193604, (-2293.240998), 1.1368683772161603E-10, 0.0);
      DormandPrince853Integrator dormandPrince853Integrator3 = new DormandPrince853Integrator(103.48, 0.0, 503.94692016781, (-1.0));
      dormandPrince853Integrator3.getCurrentSignedStepsize();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.3404009342193604;
      doubleArray0[1] = 4.547473508864641E-10;
      doubleArray0[2] = 244.46;
      doubleArray0[3] = 503.94692016781;
      doubleArray0[4] = 244.46;
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = 1.1368683772161603E-10;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(244.46, 4.547473508864641E-10, doubleArray0, doubleArray0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 7.766278405014509E-8);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 7
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(2616.0, 2616.0, doubleArray0, doubleArray0);
      highamHall54Integrator0.clearStepHandlers();
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, (-2481.8), 10.17483840207564, (-2293.240998));
      dormandPrince853Integrator0.clearStepHandlers();
      int int0 = 0;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      dormandPrince853Integrator0.setMaxGrowth(3913.67780432541);
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, (-1.797135137545755E-8), doubleArray0);
      dormandPrince853Integrator0.clearStepHandlers();
      double double0 = (-1.0);
      double double1 = (-1094.663753415171);
      double double2 = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1.0), (-1094.663753415171), 18.148505520854727, 0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      double double3 = (-1810.25);
      // Undeclared exception!
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter1, (-1810.25), doubleArray0, 10.17483840207564, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(2616.0, 2616.0, doubleArray0, doubleArray0);
      highamHall54Integrator0.clearStepHandlers();
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, (-2481.8), 10.17483840207564, (-2293.240998));
      dormandPrince853Integrator0.clearStepHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      dormandPrince853Integrator0.setMaxGrowth((-994.5));
      double double0 = 3023.68;
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 3096.17530903661, doubleArray1, (-994.5), doubleArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(2616.0, 2616.0, doubleArray0, doubleArray0);
      highamHall54Integrator0.clearStepHandlers();
      double double0 = (-2293.240998);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, (-2481.8), 10.17483840207564, (-2293.240998));
      dormandPrince853Integrator0.clearStepHandlers();
      double double1 = 4.544122762558404E223;
      DormandPrince853Integrator dormandPrince853Integrator1 = new DormandPrince853Integrator(4.544122762558404E223, (-846.61248352), 829.3079124, 3252.558673224938);
      dormandPrince853Integrator0.setMaxGrowth((-1211.40778728993));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double double2 = 2.347886562347412;
      // Undeclared exception!
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2.347886562347412, doubleArray0, 2616.0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1669.481464277497));
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      StepNormalizer stepNormalizer0 = new StepNormalizer((-4521408.0), fixedStepHandler0, stepNormalizerMode0);
      gillIntegrator0.addStepHandler(stepNormalizer0);
      gillIntegrator0.getStepHandlers();
      gillIntegrator0.clearEventHandlers();
      gillIntegrator0.setMaxEvaluations(0);
      double[] doubleArray0 = new double[5];
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      gillIntegrator0.addEventHandler(eventHandler0, 0.0, 0.0, 0);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1.797135137545755E-8, 0.0, doubleArray0, doubleArray0);
      highamHall54Integrator0.clearStepHandlers();
      highamHall54Integrator0.setMaxGrowth((-2690.2));
      gillIntegrator0.clearEventHandlers();
      highamHall54Integrator0.getOrder();
      gillIntegrator0.getMaxEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        gillIntegrator0.integrate(expandableStatefulODE0, (-1108.9020526177226));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(2616.0, 2616.0, doubleArray0, doubleArray0);
      highamHall54Integrator0.clearStepHandlers();
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, (-2481.8), 10.17483840207564, (-2293.240998));
      dormandPrince853Integrator0.clearStepHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      dormandPrince853Integrator0.setMaxGrowth(3913.67780432541);
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, (-1.797135137545755E-8), doubleArray0);
      dormandPrince853Integrator0.clearStepHandlers();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1.0), (-1094.663753415171), 18.148505520854727, 0.0);
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 1330);
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.computeDerivatives((-1094.663753415171), doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double double0 = 67.5;
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(67.5);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      int int0 = 2;
      classicalRungeKuttaIntegrator0.addEventHandler(eventHandler0, 67.5, 67.5, 2);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 67.5;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      classicalRungeKuttaIntegrator0.integrate(expandableStatefulODE0, 1.2250764591564252E82);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1669.481464277497));
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      StepNormalizer stepNormalizer0 = new StepNormalizer((-4521408.0), fixedStepHandler0, stepNormalizerMode0);
      gillIntegrator0.addStepHandler(stepNormalizer0);
      gillIntegrator0.getStepHandlers();
      gillIntegrator0.clearEventHandlers();
      gillIntegrator0.addEventHandler((EventHandler) null, 288.660158, (-4521408.0), 2939);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 849.1304695;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 253.5575122;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(253.5575122, 538.0, doubleArray0, doubleArray0);
      highamHall54Integrator0.clearStepHandlers();
      highamHall54Integrator0.setMaxGrowth(849.1304695);
      gillIntegrator0.clearEventHandlers();
      highamHall54Integrator0.getOrder();
      gillIntegrator0.getMaxEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      gillIntegrator0.integrate(expandableStatefulODE0, 451.0539091331139);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-247.977223));
      gillIntegrator0.getMaxEvaluations();
      gillIntegrator0.setMaxEvaluations(Integer.MAX_VALUE);
      double[] doubleArray0 = new double[6];
      gillIntegrator0.clearStepHandlers();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      gillIntegrator0.setMaxEvaluations((-814));
      BisectionSolver bisectionSolver0 = new BisectionSolver();
      GillIntegrator gillIntegrator1 = new GillIntegrator((-2548.5596480405));
      gillIntegrator1.addEventHandler(eventHandler0, (-840.4947), 1068.85593526, Integer.MAX_VALUE, (UnivariateSolver) bisectionSolver0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-840.4947), 0.0, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setInterpolationControl(false, Integer.MAX_VALUE);
      gillIntegrator0.getCurrentSignedStepsize();
      graggBulirschStoerIntegrator0.setOrderControl(0, 0.0, Double.NaN);
      graggBulirschStoerIntegrator0.getName();
      graggBulirschStoerIntegrator0.setMaxEvaluations(0);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, (-1890.639677694211), doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getOrder();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 3913.67780432541;
      doubleArray0[2] = 0.902267575263977;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = 3913.67780432541;
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = 0.902267575263977;
      doubleArray0[7] = 0.902267575263977;
      doubleArray0[8] = 0.902267575263977;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(Double.NaN, 3913.67780432541, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.setMaxGrowth(728.96975106);
      FirstOrderDifferentialEquations firstOrderDifferentialEquations0 = null;
      dormandPrince853Integrator0.clearStepHandlers();
      // Undeclared exception!
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) null, 537.1, doubleArray0, (-2028.0), doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(616.5318665, 0.0, Double.NaN, 0.0);
      dormandPrince853Integrator0.clearStepHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(665).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double double0 = 0.0;
      dormandPrince853Integrator0.setMaxGrowth(0.0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 616.5318665;
      doubleArray0[1] = 9.822892851699436;
      doubleArray0[2] = 616.5318665;
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, Double.NaN, doubleArray0, 9.822892851699436, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 1,330
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-247.977223));
      gillIntegrator0.getMaxEvaluations();
      gillIntegrator0.setMaxEvaluations(Integer.MAX_VALUE);
      double[] doubleArray0 = new double[6];
      gillIntegrator0.clearStepHandlers();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      gillIntegrator0.addEventHandler(eventHandler0, 0.0, 849.1304695, Integer.MAX_VALUE);
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = (-247.977223);
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (double) Integer.MAX_VALUE;
      doubleArray0[4] = (double) Integer.MAX_VALUE;
      doubleArray0[5] = (double) Integer.MAX_VALUE;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(Integer.MAX_VALUE, Integer.MAX_VALUE, doubleArray0, doubleArray0);
      highamHall54Integrator0.clearStepHandlers();
      highamHall54Integrator0.setMaxGrowth(Double.NaN);
      gillIntegrator0.clearEventHandlers();
      highamHall54Integrator0.getOrder();
      gillIntegrator0.getMaxEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      gillIntegrator0.integrate(expandableStatefulODE0, (-387.0373087493518));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(67.5);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      classicalRungeKuttaIntegrator0.addEventHandler(eventHandler0, 67.5, 67.5, 0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 67.5;
      doubleArray0[1] = 67.5;
      classicalRungeKuttaIntegrator0.setMaxEvaluations(0);
      doubleArray0[2] = 67.5;
      doubleArray0[3] = 67.5;
      doubleArray0[4] = 67.5;
      doubleArray0[5] = 67.5;
      classicalRungeKuttaIntegrator0.getEventHandlers();
      doubleArray0[6] = 67.5;
      doubleArray0[7] = 67.5;
      doubleArray0[8] = 67.5;
      try { 
        classicalRungeKuttaIntegrator0.computeDerivatives(67.5, doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1072.6663100704;
      doubleArray0[1] = 1072.6663100704;
      doubleArray0[2] = 1072.6663100704;
      doubleArray0[3] = 1072.6663100704;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1072.6663100704, 1072.6663100704, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        dormandPrince853Integrator0.integrate(expandableStatefulODE0, 1072.6663100704);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 4
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(616.5318665, 0.0, Double.NaN, 0.0);
      dormandPrince853Integrator0.clearStepHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double double0 = 0.0;
      dormandPrince853Integrator0.setMaxGrowth(0.0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 616.5318665;
      doubleArray0[1] = 9.822892851699436;
      doubleArray0[2] = 616.5318665;
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, Double.NaN, doubleArray0, 9.822892851699436, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double double0 = 1889.5544;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1889.5544;
      doubleArray0[1] = 1889.5544;
      doubleArray0[2] = 1889.5544;
      doubleArray0[3] = 1889.5544;
      doubleArray0[4] = 1889.5544;
      doubleArray0[5] = (-1233.3);
      doubleArray0[6] = 1889.5544;
      doubleArray0[7] = 1889.5544;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1889.5544, 1889.5544, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.setMinReduction(1889.5544);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(3630.42592471, (-3385.7422136089), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setStepSizeControl(1889.5544, (-3385.7422136089), doubleArray0, doubleArray0);
      boolean boolean0 = false;
      graggBulirschStoerIntegrator0.getStepHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 595.7158448);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 8
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2550.6;
      doubleArray0[2] = 0.0;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 0.0, doubleArray0, doubleArray0);
      highamHall54Integrator0.getMaxEvaluations();
      highamHall54Integrator0.getEventHandlers();
      highamHall54Integrator0.getEvaluations();
      // Undeclared exception!
      try { 
        highamHall54Integrator0.computeDerivatives(1.0E-14, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1074.2244), (-1074.2244), 0.0, 0.0);
      highamHall54Integrator0.getMaxEvaluations();
      int int0 = highamHall54Integrator0.getMaxEvaluations();
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(0.902267575263977);
      classicalRungeKuttaIntegrator0.clearEventHandlers();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 0.902267575263977;
      doubleArray0[0] = 0.902267575263977;
      doubleArray0[3] = 2.3621834216830225E93;
      // Undeclared exception!
      try { 
        classicalRungeKuttaIntegrator0.computeDerivatives(2.3621834216830225E93, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2440.85825;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(2440.85825, 2440.85825, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.getEventHandlers();
      double double0 = dormandPrince54Integrator0.getCurrentSignedStepsize();
      assertEquals(2440.85825, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(0.902267575263977);
      eulerIntegrator0.getName();
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1669.481464277497));
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      StepNormalizer stepNormalizer0 = new StepNormalizer((-4521408.0), fixedStepHandler0, stepNormalizerMode0);
      gillIntegrator0.addStepHandler(stepNormalizer0);
      gillIntegrator0.getStepHandlers();
      gillIntegrator0.clearEventHandlers();
      gillIntegrator0.setMaxEvaluations(0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-840.4947);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-1669.481464277497);
      doubleArray0[3] = (-2447.48161164);
      doubleArray0[4] = (double) 0;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      BisectionSolver bisectionSolver0 = new BisectionSolver();
      gillIntegrator0.addEventHandler(eventHandler0, 0.0, (double) 0, 0, (UnivariateSolver) bisectionSolver0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1669.481464277497), (-1669.481464277497), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setInterpolationControl(false, 0);
      double double0 = gillIntegrator0.getCurrentSignedStepsize();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      
      graggBulirschStoerIntegrator0.setOrderControl(651, (-1890.639677694211), (-2447.48161164));
      graggBulirschStoerIntegrator0.getName();
      graggBulirschStoerIntegrator0.setMaxEvaluations(0);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-2447.48161164);
      doubleArray1[1] = (-1303.13085);
      doubleArray1[2] = (-1890.639677694211);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-2447.48161164), 0.0, doubleArray1, doubleArray1);
      dormandPrince853Integrator0.getOrder();
      assertEquals(0.0, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(67.5);
      double double0 = 4.547473508864641E-10;
      double double1 = 1.2250764591564252E82;
      classicalRungeKuttaIntegrator0.setMaxEvaluations(2);
      classicalRungeKuttaIntegrator0.getEventHandlers();
      // Undeclared exception!
      try { 
        classicalRungeKuttaIntegrator0.computeDerivatives(897.0, (double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double double0 = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, 0.0, 617.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 371293.0;
      doubleArray0[1] = 617.0;
      doubleArray0[2] = 617.0;
      doubleArray0[3] = 617.0;
      doubleArray0[4] = 617.0;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      int int0 = (-280);
      RiddersSolver riddersSolver0 = new RiddersSolver();
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 0.0, 617.0, (-280), (UnivariateSolver) riddersSolver0);
      doubleArray0[5] = 617.0;
      doubleArray0[6] = 617.0;
      doubleArray0[7] = 617.0;
      doubleArray0[8] = 0.0;
      // Undeclared exception!
      try { 
        expandableStatefulODE0.computeDerivatives(0.0, doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(1067.69);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1067.69;
      doubleArray0[1] = 1067.69;
      doubleArray0[2] = 1067.69;
      eulerIntegrator0.getEventHandlers();
      doubleArray0[3] = 1067.69;
      doubleArray0[4] = 1067.69;
      eulerIntegrator0.getStepHandlers();
      // Undeclared exception!
      try { 
        eulerIntegrator0.computeDerivatives(1067.69, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double double0 = 41.224155612;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1.6754164785291923E-136), 41.224155612, (-1314.308811377), (-1.6754164785291923E-136));
      dormandPrince853Integrator0.clearStepHandlers();
      FirstOrderConverter firstOrderConverter0 = null;
      try {
        firstOrderConverter0 = new FirstOrderConverter((SecondOrderDifferentialEquations) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.FirstOrderConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double double0 = 2616.0;
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(2616.0, 2616.0, doubleArray0, doubleArray0);
      highamHall54Integrator0.clearStepHandlers();
      highamHall54Integrator0.setInitialStepSize(1875.085582453);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-105));
      illinoisSolver0.getMaxEvaluations();
      highamHall54Integrator0.addEventHandler(eventHandler0, (-1046.3493668601816), 2616.0, (-105), (UnivariateSolver) illinoisSolver0);
      FirstOrderConverter firstOrderConverter0 = null;
      try {
        firstOrderConverter0 = new FirstOrderConverter((SecondOrderDifferentialEquations) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.FirstOrderConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2721.90536308);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2721.90536308);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-2721.90536308);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.9777777777777777;
      doubleArray0[7] = (-2721.90536308);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-2721.90536308), 0.0, doubleArray0, doubleArray0);
      highamHall54Integrator0.setMinReduction((-2721.90536308));
      int int0 = highamHall54Integrator0.getEvaluations();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-2721.90536308), (-2721.90536308), (-2721.90536308), 1428.0);
      graggBulirschStoerIntegrator0.setControlFactors((-2721.90536308), (-2721.90536308), 4.0, 1428.0);
      highamHall54Integrator0.addStepHandler((StepHandler) null);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(304.8610961, Double.NaN, Double.NaN, 4.0);
      int int1 = dormandPrince853Integrator0.getOrder();
      assertFalse(int1 == int0);
  }
}
