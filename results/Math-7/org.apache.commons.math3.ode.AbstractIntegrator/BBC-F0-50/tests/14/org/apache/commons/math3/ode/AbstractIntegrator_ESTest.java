/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 13:40:11 GMT 2021
 */

package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.analysis.solvers.BisectionSolver;
import org.apache.commons.math3.analysis.solvers.IllinoisSolver;
import org.apache.commons.math3.analysis.solvers.RiddersSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator;
import org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.EulerIntegrator;
import org.apache.commons.math3.ode.nonstiff.GillIntegrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.StepHandler;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.apache.commons.math3.ode.sampling.StepNormalizerMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegrator_ESTest extends AbstractIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.5731816137782583, 1370.0, (-1074.2244), 0.5731816137782583);
      dormandPrince853Integrator0.clearStepHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      dormandPrince853Integrator0.setMaxGrowth((-1074.2244));
      double[] doubleArray0 = new double[0];
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) 0, doubleArray0, 0.5731816137782583, doubleArray0);
      dormandPrince853Integrator0.getEvaluations();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.5731816137782583, (-1074.2244), (-1074.2244), 0.5731816137782583);
      dormandPrince853Integrator0.clearStepHandlers();
      dormandPrince853Integrator0.clearStepHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.5731816137782583, doubleArray0, 0.5731816137782583, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1074.2244), 1370.0, (-1074.2244), (-1074.2244));
      dormandPrince853Integrator0.clearStepHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      dormandPrince853Integrator0.setMaxGrowth((-1074.2244));
      double[] doubleArray0 = new double[0];
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(6).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) 0, doubleArray0, (-1074.2244), doubleArray0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1074.2244), (-1074.2244), (-1074.2244), (-1074.2244));
      BisectionSolver bisectionSolver0 = new BisectionSolver((-1074.2244));
      bisectionSolver0.getMaxEvaluations();
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(1493.470359580641, (-1074.2244), (double)0, (double)0, 1.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      classicalRungeKuttaIntegrator0.addEventHandler(eventHandler0, (-1074.2244), 1.270870333428034, 1087, (UnivariateSolver) bisectionSolver0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.getSecondaryMappers();
      try { 
        classicalRungeKuttaIntegrator0.integrate(expandableStatefulODE0, 1.270870333428034);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (1,087) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.5731816137782583, 1370.0, (-1074.2244), 0.5731816137782583);
      dormandPrince853Integrator0.clearStepHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      dormandPrince853Integrator0.setMaxGrowth((-1074.2244));
      double[] doubleArray0 = new double[0];
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) 0, doubleArray0, 2.2737367544323206E-10, doubleArray0);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1074.2244), 1370.0, 1370.0, 2.2737367544323206E-10);
      dormandPrince853Integrator0.setMaxGrowth(1370.0);
      // Undeclared exception!
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) 0, doubleArray0, (-1074.2244), doubleArray0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1074.2244), (-1074.2244), (-1074.2244), (-1074.2244));
      highamHall54Integrator0.getMaxEvaluations();
      highamHall54Integrator0.getMaxEvaluations();
      // Undeclared exception!
      try { 
        highamHall54Integrator0.integrate((ExpandableStatefulODE) null, 4.547473508864641E-10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double double0 = 3330.143198;
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(3330.143198);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      double double1 = (-9.622106063561645E277);
      int int0 = 2146394260;
      BisectionSolver bisectionSolver0 = new BisectionSolver(2201.3745604, 2201.3745604);
      int int1 = bisectionSolver0.getMaxEvaluations();
      classicalRungeKuttaIntegrator0.addEventHandler(eventHandler0, (-1913.4550964429077), (-9.622106063561645E277), 2146394260, (UnivariateSolver) bisectionSolver0);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.getSecondaryMappers();
      classicalRungeKuttaIntegrator0.integrate(expandableStatefulODE0, 3330.143198);
      double double2 = (-233.2605504262015);
      classicalRungeKuttaIntegrator0.integrate(expandableStatefulODE0, double2);
      double double3 = classicalRungeKuttaIntegrator0.getCurrentSignedStepsize();
      int int2 = classicalRungeKuttaIntegrator0.getMaxEvaluations();
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter0);
      double double4 = 1970.2765441587565;
      classicalRungeKuttaIntegrator0.integrate(expandableStatefulODE1, double4);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = double0;
      doubleArray0[1] = double0;
      doubleArray0[2] = (double) int2;
      doubleArray0[3] = double3;
      doubleArray0[4] = (double) int1;
      doubleArray0[5] = double1;
      doubleArray0[6] = double2;
      doubleArray0[7] = (double) int0;
      double double5 = 4.022633486003565E-204;
      doubleArray0[8] = double5;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(double4, int2, doubleArray0, doubleArray0);
      double double6 = 1000.0;
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, double6);
      double double7 = 0.0;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(doubleArray0[3], doubleArray0[6], doubleArray0[3], double7);
      dormandPrince853Integrator0.getOrder();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-2838.4));
      gillIntegrator0.getCurrentStepStart();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(Double.NaN, (-2838.4), Double.NaN, 2063.1044);
      graggBulirschStoerIntegrator0.setOrderControl(2146443253, (-2588.45932276), (-1502.5757974786));
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 1369.7, 1369.7, 0.0);
      dormandPrince853Integrator0.clearStepHandlers();
      dormandPrince853Integrator0.setMaxGrowth((-1074.2244));
      double[] doubleArray0 = new double[0];
      dormandPrince853Integrator0.clearStepHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      dormandPrince853Integrator0.clearStepHandlers();
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-744.385), 1.0, doubleArray0, doubleArray0);
      highamHall54Integrator0.getMaxEvaluations();
      highamHall54Integrator0.getMaxEvaluations();
      dormandPrince853Integrator0.getCurrentSignedStepsize();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 1369.7, 0.729129666571966, 0.0);
      dormandPrince853Integrator0.clearStepHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      dormandPrince853Integrator0.setMaxGrowth((-1074.2244));
      double[] doubleArray0 = new double[0];
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) 0, doubleArray0, 2.2737367544323206E-10, doubleArray0);
      dormandPrince853Integrator0.clearStepHandlers();
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(2.2737367544323206E-10, 0.0, doubleArray0, doubleArray0);
      highamHall54Integrator0.getMaxEvaluations();
      highamHall54Integrator0.getMaxEvaluations();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(1869.6);
      gillIntegrator0.clearStepHandlers();
      int int0 = 1;
      gillIntegrator0.getEvaluations();
      gillIntegrator0.getStepHandlers();
      gillIntegrator0.setMaxEvaluations(1);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      double double0 = 2063.1044;
      try { 
        gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-3735.428798), doubleArray0, 2063.1044, doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (1) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double double0 = (-1074.2244);
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1904.96367), (-1904.96367), doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getOrder();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double double1 = 0.0;
      dormandPrince853Integrator0.setMaxGrowth(0.0);
      // Undeclared exception!
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 1970.2765441587565, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double double0 = (-1074.2244);
      double double1 = 1369.7;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 1369.7, 1.334449995534113E-7, 0.0);
      dormandPrince853Integrator0.clearStepHandlers();
      int int0 = 0;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      dormandPrince853Integrator0.setMaxGrowth((-1074.2244));
      double[] doubleArray0 = new double[0];
      double double2 = 988.88;
      // Undeclared exception!
      dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 988.88, doubleArray0, (-1074.2244), doubleArray0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1074.2244), (-1074.2244), (-1074.2244), (-1074.2244));
      highamHall54Integrator0.setMaxEvaluations(0);
      highamHall54Integrator0.getMaxEvaluations();
      highamHall54Integrator0.getMaxEvaluations();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1904.96367), (-1904.96367), doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getOrder();
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(8, (-1074.2244), 1000.0, (-557.398651566136), 2.719805132368625E-271);
      adamsMoultonIntegrator0.getStepHandlers();
      adamsMoultonIntegrator0.addStepHandler((StepHandler) null);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(8).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      try { 
        adamsMoultonIntegrator0.integrate(expandableStatefulODE0, 220.76);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double double0 = (-1074.2244);
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1904.96367), (-1904.96367), doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getOrder();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-35.402823251), (-1904.96367), (-1904.96367), (-557.398651566136));
      graggBulirschStoerIntegrator0.setInterpolationControl(false, 8);
      dormandPrince853Integrator0.setMaxGrowth((-557.398651566136));
      double double1 = (-1939.159213102258);
      // Undeclared exception!
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) null, (-557.398651566136), doubleArray0, (double) 8, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(0.0);
      gillIntegrator0.getMaxEvaluations();
      gillIntegrator0.setMaxEvaluations(2567);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1.0, 0.0, 2472.82, 1.0);
      dormandPrince853Integrator0.clearStepHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      dormandPrince853Integrator0.setMaxGrowth(2567);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 2208.224;
      doubleArray0[1] = 0.0;
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 2208.224;
      doubleArray1[1] = 2208.224;
      doubleArray1[2] = 2.2737367544323206E-10;
      doubleArray1[3] = 1.0;
      doubleArray1[4] = 0.0;
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) 2567, doubleArray0, 0.684319257736206, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double double0 = (-1074.2244);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 1369.7, 1.334449995534113E-7, 0.0);
      dormandPrince853Integrator0.clearStepHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double double1 = Double.NaN;
      dormandPrince853Integrator0.setMaxGrowth(Double.NaN);
      double[] doubleArray0 = new double[0];
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-1074.2244), doubleArray0, (-1074.2244), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1904.96367), (-1904.96367), doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getOrder();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-35.402823251), (-1904.96367), (-1904.96367), (-557.398651566136));
      graggBulirschStoerIntegrator0.setInterpolationControl(false, 8);
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(8, (-1074.2244), 1000.0, (-557.398651566136), 2.719805132368625E-271);
      adamsMoultonIntegrator0.getStepHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      try { 
        adamsMoultonIntegrator0.integrate(expandableStatefulODE0, 220.76);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one column
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1889.5544;
      doubleArray0[1] = 1889.5544;
      doubleArray0[2] = 1889.5544;
      doubleArray0[3] = 1889.5544;
      doubleArray0[4] = 1889.5544;
      doubleArray0[5] = (-1233.3);
      doubleArray0[6] = 1889.5544;
      doubleArray0[7] = 1889.5544;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1889.5544, 1889.5544, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.setMaxEvaluations((-1756));
      dormandPrince54Integrator0.setMinReduction(1889.5544);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(3630.42592471, (-3385.7422136089), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setStepSizeControl(1889.5544, (-3385.7422136089), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.getStepHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(528.7476487101);
      // Undeclared exception!
      try { 
        classicalRungeKuttaIntegrator0.computeDerivatives(3630.42592471, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(616.5318665, 0.0, Double.NaN, 0.0);
      dormandPrince853Integrator0.clearStepHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(495).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double double0 = 0.0;
      dormandPrince853Integrator0.setMaxGrowth(0.0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 616.5318665;
      doubleArray0[1] = 9.822892851699436;
      doubleArray0[2] = 616.5318665;
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, Double.NaN, doubleArray0, 9.822892851699436, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 990
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-247.977223));
      gillIntegrator0.getMaxEvaluations();
      gillIntegrator0.setMaxEvaluations(Integer.MAX_VALUE);
      double[] doubleArray0 = new double[6];
      gillIntegrator0.clearStepHandlers();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      gillIntegrator0.addEventHandler(eventHandler0, 0.0, 849.1304695, Integer.MAX_VALUE);
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = (-247.977223);
      doubleArray0[2] = Double.NaN;
      doubleArray0[3] = (double) Integer.MAX_VALUE;
      doubleArray0[4] = (double) Integer.MAX_VALUE;
      doubleArray0[5] = (double) Integer.MAX_VALUE;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(Integer.MAX_VALUE, Integer.MAX_VALUE, doubleArray0, doubleArray0);
      highamHall54Integrator0.clearStepHandlers();
      highamHall54Integrator0.setMaxGrowth(Double.NaN);
      gillIntegrator0.clearEventHandlers();
      highamHall54Integrator0.getOrder();
      gillIntegrator0.getMaxEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      gillIntegrator0.integrate(expandableStatefulODE0, (-387.0373087493518));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(67.5);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 67.5;
      doubleArray0[1] = 67.5;
      classicalRungeKuttaIntegrator0.setMaxEvaluations(0);
      doubleArray0[2] = 67.5;
      doubleArray0[3] = 67.5;
      doubleArray0[4] = 67.5;
      doubleArray0[5] = 67.5;
      classicalRungeKuttaIntegrator0.getEventHandlers();
      doubleArray0[6] = 67.5;
      doubleArray0[7] = 67.5;
      doubleArray0[8] = 67.5;
      try { 
        classicalRungeKuttaIntegrator0.computeDerivatives(67.5, doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(67.5);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      classicalRungeKuttaIntegrator0.addEventHandler(eventHandler0, 67.5, 67.5, 0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 67.5;
      doubleArray0[1] = 67.5;
      classicalRungeKuttaIntegrator0.setMaxEvaluations(0);
      doubleArray0[2] = 67.5;
      doubleArray0[3] = 67.5;
      doubleArray0[4] = 67.5;
      doubleArray0[5] = 67.5;
      classicalRungeKuttaIntegrator0.getEventHandlers();
      doubleArray0[6] = 67.5;
      doubleArray0[7] = 67.5;
      doubleArray0[8] = 67.5;
      try { 
        classicalRungeKuttaIntegrator0.computeDerivatives(67.5, doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1072.6663100704;
      doubleArray0[1] = 1072.6663100704;
      doubleArray0[2] = 1072.6663100704;
      doubleArray0[3] = 1072.6663100704;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1072.6663100704, 1072.6663100704, doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        dormandPrince853Integrator0.integrate(expandableStatefulODE0, 1072.6663100704);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 4
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(616.5318665, 0.0, Double.NaN, 0.0);
      dormandPrince853Integrator0.clearStepHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double double0 = 0.0;
      dormandPrince853Integrator0.setMaxGrowth(0.0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 616.5318665;
      doubleArray0[1] = 9.822892851699436;
      doubleArray0[2] = 616.5318665;
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, Double.NaN, doubleArray0, 9.822892851699436, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double double0 = 1889.5544;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1889.5544;
      doubleArray0[1] = 1889.5544;
      doubleArray0[2] = 1889.5544;
      doubleArray0[3] = 1889.5544;
      doubleArray0[4] = 1889.5544;
      doubleArray0[5] = (-1233.3);
      doubleArray0[6] = 1889.5544;
      doubleArray0[7] = 1889.5544;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1889.5544, 1889.5544, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.setMinReduction(1889.5544);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(3630.42592471, (-3385.7422136089), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setStepSizeControl(1889.5544, (-3385.7422136089), doubleArray0, doubleArray0);
      boolean boolean0 = false;
      graggBulirschStoerIntegrator0.getStepHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 595.7158448);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 8
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 2550.6;
      doubleArray0[2] = 0.0;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 0.0, doubleArray0, doubleArray0);
      highamHall54Integrator0.getMaxEvaluations();
      highamHall54Integrator0.getEventHandlers();
      highamHall54Integrator0.getEvaluations();
      // Undeclared exception!
      try { 
        highamHall54Integrator0.computeDerivatives(1.0E-14, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1074.2244), (-1074.2244), 0.0, 0.0);
      highamHall54Integrator0.getMaxEvaluations();
      int int0 = highamHall54Integrator0.getMaxEvaluations();
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1074.2244), (-1074.2244), (-1074.2244), (-1074.2244));
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1074.2244);
      doubleArray0[1] = (-1074.2244);
      doubleArray0[2] = (double) 263;
      doubleArray0[3] = (-1074.2244);
      highamHall54Integrator0.clearEventHandlers();
      doubleArray0[4] = (double) 263;
      doubleArray0[5] = (-1074.2244);
      doubleArray0[6] = (double) 263;
      doubleArray0[7] = (-1074.2244);
      doubleArray0[8] = (-1074.2244);
      // Undeclared exception!
      try { 
        highamHall54Integrator0.initializeStep(true, 263, doubleArray0, (-1084.966644), doubleArray0, doubleArray0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2440.85825;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(2440.85825, 2440.85825, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.getEventHandlers();
      double double0 = dormandPrince54Integrator0.getCurrentSignedStepsize();
      assertEquals(2440.85825, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1074.2244), (-1074.2244), (-1074.2244), (-1074.2244));
      highamHall54Integrator0.getMaxEvaluations();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(178.6756323, 2063.1044, (-1074.2244), 3380.90710323);
      graggBulirschStoerIntegrator0.getEvaluations();
      graggBulirschStoerIntegrator0.setInterpolationControl(true, (-1200));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 2063.1044;
      doubleArray0[2] = 2.2737367544323206E-10;
      HighamHall54Integrator highamHall54Integrator1 = new HighamHall54Integrator((-1074.2244), 3380.90710323, doubleArray0, doubleArray0);
      highamHall54Integrator0.clearStepHandlers();
      HighamHall54Integrator highamHall54Integrator2 = new HighamHall54Integrator(2063.1044, 0, 3380.90710323, 2.2737367544323206E-10);
      highamHall54Integrator2.getMaxEvaluations();
      String string0 = graggBulirschStoerIntegrator0.getName();
      assertEquals("Gragg-Bulirsch-Stoer", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-1669.481464277497));
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      StepNormalizer stepNormalizer0 = new StepNormalizer((-4521408.0), fixedStepHandler0, stepNormalizerMode0);
      gillIntegrator0.addStepHandler(stepNormalizer0);
      gillIntegrator0.getStepHandlers();
      gillIntegrator0.clearEventHandlers();
      gillIntegrator0.setMaxEvaluations(0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-840.4947);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (-1669.481464277497);
      doubleArray0[3] = (-2447.48161164);
      doubleArray0[4] = (double) 0;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      BisectionSolver bisectionSolver0 = new BisectionSolver();
      gillIntegrator0.addEventHandler(eventHandler0, 0.0, (double) 0, 0, (UnivariateSolver) bisectionSolver0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1669.481464277497), (-1669.481464277497), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setInterpolationControl(false, 0);
      double double0 = gillIntegrator0.getCurrentSignedStepsize();
      assertEquals(Double.NaN, gillIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      
      graggBulirschStoerIntegrator0.setOrderControl(651, (-1890.639677694211), (-2447.48161164));
      graggBulirschStoerIntegrator0.getName();
      graggBulirschStoerIntegrator0.setMaxEvaluations(0);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (-2447.48161164);
      doubleArray1[1] = (-1303.13085);
      doubleArray1[2] = (-1890.639677694211);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-2447.48161164), 0.0, doubleArray1, doubleArray1);
      dormandPrince853Integrator0.getOrder();
      assertEquals(0.0, dormandPrince853Integrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1072.6663100704;
      doubleArray0[1] = 1072.6663100704;
      doubleArray0[2] = 1072.6663100704;
      doubleArray0[3] = 1072.6663100704;
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(1072.6663100704);
      classicalRungeKuttaIntegrator0.setMaxEvaluations(1);
      classicalRungeKuttaIntegrator0.getEventHandlers();
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = (double) 1;
      doubleArray1[2] = 1072.6663100704;
      doubleArray1[3] = 1072.6663100704;
      doubleArray1[4] = 1072.6663100704;
      doubleArray1[5] = 0.5579402446746826;
      doubleArray1[6] = (double) 1;
      doubleArray1[7] = 1072.6663100704;
      doubleArray1[8] = (double) 1;
      // Undeclared exception!
      try { 
        classicalRungeKuttaIntegrator0.computeDerivatives(1072.6663100704, doubleArray1, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double double0 = Double.NaN;
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator(Double.NaN);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double[] doubleArray0 = new double[0];
      expandableStatefulODE0.setPrimaryState(doubleArray0);
      double double1 = 0.0;
      classicalRungeKuttaIntegrator0.integrate(expandableStatefulODE0, 0.0);
      double double2 = 1632.050398437;
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = double0;
      doubleArray1[1] = double0;
      doubleArray1[2] = double0;
      doubleArray1[3] = double1;
      doubleArray1[4] = double2;
      doubleArray1[5] = double2;
      doubleArray1[6] = double1;
      doubleArray1[7] = double0;
      classicalRungeKuttaIntegrator0.computeDerivatives(double2, doubleArray1, doubleArray1);
      double double3 = classicalRungeKuttaIntegrator0.getCurrentSignedStepsize();
      classicalRungeKuttaIntegrator0.getEvaluations();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      int int0 = 477;
      classicalRungeKuttaIntegrator0.addEventHandler(eventHandler0, double3, doubleArray1[7], int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double double0 = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, 0.0, 617.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 371293.0;
      doubleArray0[1] = 617.0;
      doubleArray0[2] = 617.0;
      doubleArray0[3] = 617.0;
      doubleArray0[4] = 617.0;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      int int0 = (-280);
      RiddersSolver riddersSolver0 = new RiddersSolver();
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 0.0, 617.0, (-280), (UnivariateSolver) riddersSolver0);
      doubleArray0[5] = 617.0;
      doubleArray0[6] = 617.0;
      doubleArray0[7] = 617.0;
      doubleArray0[8] = 0.0;
      // Undeclared exception!
      try { 
        expandableStatefulODE0.computeDerivatives(0.0, doubleArray0, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(1067.69);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 1067.69;
      doubleArray0[1] = 1067.69;
      doubleArray0[2] = 1067.69;
      eulerIntegrator0.getEventHandlers();
      doubleArray0[3] = 1067.69;
      doubleArray0[4] = 1067.69;
      eulerIntegrator0.getStepHandlers();
      // Undeclared exception!
      try { 
        eulerIntegrator0.computeDerivatives(1067.69, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-2590.5525283), (-2590.5525283), (-2590.5525283), (-2590.5525283));
      highamHall54Integrator0.addEventHandler((EventHandler) null, Double.NaN, 1331.70714, 1);
      highamHall54Integrator0.clearEventHandlers();
      int int0 = highamHall54Integrator0.getMaxEvaluations();
      assertEquals(Integer.MAX_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double double0 = (-1074.2244);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(0.0, 1369.7, 1.334449995534113E-7, 0.0);
      dormandPrince853Integrator0.clearStepHandlers();
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = null;
      try {
        adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(0, 2.2737367544323206E-10, 0.0, 0.0, (-1297.530540483));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // multistep method needs at least 0 previous steps, got 2
         //
         verifyException("org.apache.commons.math3.ode.MultistepIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double double0 = 2616.0;
      double[] doubleArray0 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(2616.0, 2616.0, doubleArray0, doubleArray0);
      highamHall54Integrator0.clearStepHandlers();
      highamHall54Integrator0.setInitialStepSize(1875.085582453);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-105));
      illinoisSolver0.getMaxEvaluations();
      highamHall54Integrator0.addEventHandler(eventHandler0, (-1046.3493668601816), 2616.0, (-105), (UnivariateSolver) illinoisSolver0);
      FirstOrderConverter firstOrderConverter0 = null;
      try {
        firstOrderConverter0 = new FirstOrderConverter((SecondOrderDifferentialEquations) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.FirstOrderConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      doubleArray0[2] = 3530.0;
      doubleArray0[3] = 3530.0;
      doubleArray0[4] = 3530.0;
      doubleArray0[5] = 3530.0;
      doubleArray0[6] = 3530.0;
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(Integer.MAX_VALUE, 3530.0, (-1520.23), doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-2721.90536308);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2721.90536308);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (-2721.90536308);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.9777777777777777;
      doubleArray0[7] = (-2721.90536308);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-2721.90536308), 0.0, doubleArray0, doubleArray0);
      highamHall54Integrator0.setMinReduction((-2721.90536308));
      int int0 = highamHall54Integrator0.getEvaluations();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-2721.90536308), (-2721.90536308), (-2721.90536308), 1428.0);
      graggBulirschStoerIntegrator0.setControlFactors((-2721.90536308), (-2721.90536308), 4.0, 1428.0);
      highamHall54Integrator0.addStepHandler((StepHandler) null);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(304.8610961, Double.NaN, Double.NaN, 4.0);
      int int1 = dormandPrince853Integrator0.getOrder();
      assertFalse(int1 == int0);
  }
}
