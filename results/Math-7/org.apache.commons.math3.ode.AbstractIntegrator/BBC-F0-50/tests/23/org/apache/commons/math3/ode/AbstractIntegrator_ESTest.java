/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 02 01:12:40 GMT 2021
 */

package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import org.apache.commons.math3.analysis.solvers.IllinoisSolver;
import org.apache.commons.math3.analysis.solvers.MullerSolver;
import org.apache.commons.math3.analysis.solvers.RiddersSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator;
import org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.EulerIntegrator;
import org.apache.commons.math3.ode.nonstiff.GillIntegrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.nonstiff.MidpointIntegrator;
import org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator;
import org.apache.commons.math3.ode.sampling.DummyStepHandler;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.apache.commons.math3.ode.sampling.StepNormalizerBounds;
import org.apache.commons.math3.ode.sampling.StepNormalizerMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegrator_ESTest extends AbstractIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(523.1281331693527);
      double[] doubleArray0 = new double[0];
      eulerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 3412.983743318653, doubleArray0, 523.1281331693527, doubleArray0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-2259.068414472), 1192.4, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setOrderControl((-57), 2395.379740653102, 1000.0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer0 = new StepNormalizer(1.9742063534922827E-174, fixedStepHandler0);
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) (-57), doubleArray0, 1.0510656833648682, doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(Double.NaN);
      eulerIntegrator0.getEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      eulerIntegrator0.addEventHandler(eventHandler0, (double) 0, Double.NaN, 3946);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-1124.1072);
      try { 
        eulerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, Double.NaN, doubleArray0, (double) 3946, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 2 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(Double.NaN);
      eulerIntegrator0.getEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-1124.1072324), (double)0).when(eventHandler0).g(anyDouble() , any(double[].class));
      eulerIntegrator0.addEventHandler(eventHandler0, 2.581312717296228E20, (-1124.1072324), (-2130));
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime(0);
      try { 
        eulerIntegrator0.integrate(expandableStatefulODE0, 1.3041809768060802E52);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (-2,130) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(2.581312717296228E20);
      double[] doubleArray0 = new double[0];
      eulerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 523.1281331693527, doubleArray0, 2.581312717296228E20, doubleArray0);
      // Undeclared exception!
      try { 
        eulerIntegrator0.integrate((ExpandableStatefulODE) null, 2889.8556101493004);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(523.1281331693527);
      eulerIntegrator0.clearEventHandlers();
      double[] doubleArray0 = new double[0];
      eulerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 3412.983743318653, doubleArray0, 523.1281331693527, doubleArray0);
      eulerIntegrator0.computeDerivatives(523.1281331693527, doubleArray0, doubleArray0);
      eulerIntegrator0.getEventHandlers();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(523.1281331693527);
      double[] doubleArray0 = new double[0];
      eulerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 3412.983743318653, doubleArray0, 523.1281331693527, doubleArray0);
      eulerIntegrator0.getEvaluations();
      double double0 = 2425.60458;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = 523.1281331693527;
      doubleArray1[1] = 3412.983743318653;
      doubleArray1[2] = (double) (-2172);
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = null;
      try {
        adamsBashforthIntegrator0 = new AdamsBashforthIntegrator((-2172), 523.1281331693527, 2425.60458, doubleArray1, doubleArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdamsNordsieckTransformer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(Double.NaN);
      eulerIntegrator0.getEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-1124.1072), (double)0, 0.0, (-1124.1072), (double)0).when(eventHandler0).g(anyDouble() , any(double[].class));
      eulerIntegrator0.addEventHandler(eventHandler0, (double) 0, Double.NaN, 3946);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[0];
      // Undeclared exception!
      eulerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-206.800697043), doubleArray1, 1414.044790407, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(Double.NaN);
      eulerIntegrator0.getEvaluations();
      eulerIntegrator0.getEvaluations();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      eulerIntegrator0.addEventHandler(eventHandler0, 1000.0, (double) 0, 2368);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      eulerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 999.9999999995453, doubleArray0, 1987.0069624, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(Double.NaN);
      eulerIntegrator0.getEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-1124.1072), (double)0, 0.0, (-1124.1072), (double)0).when(eventHandler0).g(anyDouble() , any(double[].class));
      eulerIntegrator0.clearEventHandlers();
      eulerIntegrator0.addEventHandler(eventHandler0, (double) 0, Double.NaN, 3946);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      eulerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, Double.NaN, doubleArray0, Double.NaN, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(Double.NaN);
      eulerIntegrator0.getEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      eulerIntegrator0.addEventHandler(eventHandler0, 246.1161032743746, 1175.176453318653, (-669));
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      EulerIntegrator eulerIntegrator1 = new EulerIntegrator(1175.176453318653);
      double[] doubleArray0 = new double[0];
      eulerIntegrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1175.176453318653, doubleArray0, 246.1161032743746, doubleArray0);
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      eulerIntegrator0.addEventHandler(eventHandler1, 636.2, 1841.49, (-669));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      eulerIntegrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter1, 990.56921823, doubleArray0, (double) 0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(Double.NaN);
      eulerIntegrator0.getEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      eulerIntegrator0.addEventHandler(eventHandler0, (-2237.80729), 1175.176453318653, (-669));
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      EulerIntegrator eulerIntegrator1 = new EulerIntegrator(1175.176453318653);
      double[] doubleArray0 = new double[0];
      eulerIntegrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1175.176453318653, doubleArray0, (-2237.80729), doubleArray0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(Double.NaN, (-464.7243), (-2237.80729), 167.561558);
      graggBulirschStoerIntegrator0.setControlFactors(3946.0, (-669), 1.1368683772161603E-10, 2834.0);
      graggBulirschStoerIntegrator0.getEvaluations();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double double0 = Double.NaN;
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(Double.NaN);
      int int0 = eulerIntegrator0.getEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-1124.1072), (double)0, 0.0, (-1124.1072), (double)0).when(eventHandler0).g(anyDouble() , any(double[].class));
      eulerIntegrator0.addEventHandler(eventHandler0, (double) 0, Double.NaN, 3946);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      eulerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) int0, doubleArray0, double0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double double0 = Double.NaN;
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(Double.NaN);
      eulerIntegrator0.getEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      int int0 = 3946;
      eulerIntegrator0.addEventHandler(eventHandler0, (double) 0, Double.NaN, 3946);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      eulerIntegrator0.addEventHandler(eventHandler1, 0.0, 1.597259768214821E167, 0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      try { 
        eulerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) 3946, doubleArray0, (double) 3946, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(523.1281331693527);
      midpointIntegrator0.getMaxEvaluations();
      midpointIntegrator0.getCurrentSignedStepsize();
      midpointIntegrator0.getCurrentStepStart();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double double0 = Double.NaN;
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(Double.NaN);
      eulerIntegrator0.getEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      double double1 = 1274.483332173;
      eulerIntegrator0.setMaxEvaluations(0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      try { 
        eulerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) 0, doubleArray0, Double.NaN, doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double double0 = Double.NaN;
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(Double.NaN);
      eulerIntegrator0.getEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      double double1 = (-1124.1072324);
      double double2 = (-7.110952399338234E-8);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-1124.1072324), (double)0, (-7.110952399338234E-8), (-1124.1072324), (double)0).when(eventHandler0).g(anyDouble() , any(double[].class));
      int int0 = 3946;
      eulerIntegrator0.addEventHandler(eventHandler0, (double) 0, Double.NaN, 3946);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      eulerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) 0, doubleArray0, Double.NaN, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(Double.NaN);
      eulerIntegrator0.getEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      double double0 = (-1280.815);
      double double1 = 1274.483332173;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((double)0, (-1280.815), (-1280.815), 1274.483332173, (-1.9841269659586505E-4)).when(eventHandler0).g(anyDouble() , any(double[].class));
      eulerIntegrator0.addEventHandler(eventHandler0, (double) 0, Double.NaN, 0);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      try { 
        eulerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) 0, doubleArray0, Double.NaN, doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double double0 = Double.NaN;
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(Double.NaN);
      eulerIntegrator0.getEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((double)0, (double)0, 0.0, Double.NaN, 1.597259768214821E167).when(eventHandler0).g(anyDouble() , any(double[].class));
      eulerIntegrator0.addEventHandler(eventHandler0, (double) 0, Double.NaN, 3946);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      try { 
        eulerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) 0, doubleArray0, Double.NaN, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [\uFFFD, \uFFFD], values: [159,725,976,821,482,100,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000, 159,725,976,821,482,100,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000]
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double double0 = Double.NaN;
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(Double.NaN);
      eulerIntegrator0.getEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      eulerIntegrator0.addEventHandler(eventHandler0, (double) 0, Double.NaN, 3946);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      eulerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) 0, doubleArray0, Double.NaN, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double double0 = 0.0;
      GillIntegrator gillIntegrator0 = new GillIntegrator(0.0);
      gillIntegrator0.setMaxEvaluations(5);
      gillIntegrator0.getMaxEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        gillIntegrator0.integrate(expandableStatefulODE0, (-1728.85477791));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (5) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-0.022355307863886294), 0.0, (-9.147934308113573), (-0.022355307863886294));
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.0, fixedStepHandler0, stepNormalizerMode0);
      graggBulirschStoerIntegrator0.setStabilityCheck(false, 1543, 1543, 0.0);
      graggBulirschStoerIntegrator0.getEventHandlers();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = (-0.022355307863886294);
      doubleArray1[2] = (-9.147934308113573);
      doubleArray0[3] = (-833.47313879792);
      doubleArray1[4] = 0.0;
      try { 
        midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-9.147934308113573), doubleArray0, 0.0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 82.582446;
      doubleArray0[1] = 82.582446;
      doubleArray0[2] = 82.582446;
      doubleArray0[3] = 82.582446;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 82.582446;
      doubleArray0[6] = 82.582446;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(82.582446, 82.582446, doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      dormandPrince54Integrator0.setStepSizeControl(82.582446, 82.582446, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.addEventHandler(eventHandler0, 0.0, 0.0, 5, (UnivariateSolver) illinoisSolver0);
      dormandPrince54Integrator0.getEventHandlers();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 82.582446;
      doubleArray0[1] = 82.582446;
      doubleArray0[2] = 82.582446;
      doubleArray0[5] = 82.582446;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 82.582446;
      doubleArray0[6] = 82.582446;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(82.582446, 82.582446, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.getEventHandlers();
      // Undeclared exception!
      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) null, (-2226.1466), doubleArray0, 0.0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 82.582446;
      doubleArray0[1] = 82.582446;
      doubleArray0[2] = 82.582446;
      doubleArray0[3] = 82.582446;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 82.582446;
      doubleArray0[6] = 82.582446;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(82.582446, 82.582446, doubleArray0, doubleArray0);
      Collection<EventHandler> collection0 = dormandPrince54Integrator0.getEventHandlers();
      assertNotNull(collection0);
      
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        dormandPrince54Integrator0.integrate(expandableStatefulODE0, 82.582446);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 7
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double double0 = (-707.6099048387243);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (-707.6099048387243);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-707.6099048387243), (-707.6099048387243), doubleArray0, doubleArray0);
      dormandPrince853Integrator0.setMaxGrowth((-1607.8848));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(2239).when(secondOrderDifferentialEquations0).getDimension();
      dormandPrince853Integrator0.setInitialStepSize((-707.6099048387243));
      double double1 = 1413.7272704781567;
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer0 = new StepNormalizer(1413.7272704781567, fixedStepHandler0);
      dormandPrince853Integrator0.addStepHandler(stepNormalizer0);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, (-707.6099048387243), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 4,478
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double double0 = 0.0;
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1499.5766;
      doubleArray0[2] = 0.0;
      threeEighthesIntegrator0.getStepHandlers();
      threeEighthesIntegrator0.setMaxEvaluations(0);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      ExpandableStatefulODE expandableStatefulODE0 = null;
      try {
        expandableStatefulODE0 = new ExpandableStatefulODE((FirstOrderDifferentialEquations) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.ExpandableStatefulODE", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator((-863.8));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.BOTH;
      StepNormalizer stepNormalizer0 = new StepNormalizer((-863.8), fixedStepHandler0, stepNormalizerBounds0);
      eulerIntegrator0.addStepHandler(stepNormalizer0);
      eulerIntegrator0.addEventHandler(eventHandler0, (-863.8), 0.0, 0);
      eulerIntegrator0.clearStepHandlers();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, (-3199.94), 0.0, 0.0);
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      RiddersSolver riddersSolver0 = new RiddersSolver();
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler1, 0.0, 0.0, 0, (UnivariateSolver) riddersSolver0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 5;
      doubleArray0[1] = (double) 5;
      doubleArray0[2] = (double) 5;
      doubleArray0[3] = (double) 5;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 5;
      doubleArray0[6] = (double) 5;
      doubleArray0[7] = (double) 5;
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(5, 0.0, 0.0, doubleArray0, doubleArray0);
      adamsMoultonIntegrator0.getEvaluations();
      adamsMoultonIntegrator0.setMaxEvaluations((-2705));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      double double0 = 104.0996495089623;
      adamsMoultonIntegrator0.addEventHandler(eventHandler0, 104.0996495089623, (-15.0), (-2705));
      // Undeclared exception!
      try { 
        adamsMoultonIntegrator0.computeDerivatives(1.0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2302.6;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 2302.6;
      doubleArray0[3] = (-0.015319437748624402);
      doubleArray0[4] = 2302.6;
      doubleArray0[5] = 2302.6;
      doubleArray0[6] = (-0.015319437748624402);
      double[] doubleArray1 = new double[0];
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-0.015319437748624402), 2302.6, doubleArray0, doubleArray1);
      highamHall54Integrator0.getStepHandlers();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, (-2939.588885532), doubleArray1, doubleArray1);
      graggBulirschStoerIntegrator0.setOrderControl((-598), (-482.548), 529.45);
      highamHall54Integrator0.getCurrentSignedStepsize();
      graggBulirschStoerIntegrator0.setInterpolationControl(false, 151);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      MullerSolver mullerSolver0 = new MullerSolver(5.939237102522726, 0.0);
      highamHall54Integrator0.addEventHandler(eventHandler0, (-0.015319437748624402), (-482.548), 1, (UnivariateSolver) mullerSolver0);
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.computeDerivatives(0.0, doubleArray1, doubleArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(0.0);
      gillIntegrator0.getMaxEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      gillIntegrator0.integrate(expandableStatefulODE0, 0.0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator((-1316.19706780948));
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      FixedStepHandler fixedStepHandler1 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode1 = StepNormalizerMode.MULTIPLES;
      StepNormalizer stepNormalizer0 = new StepNormalizer((-78.43356452404234), fixedStepHandler1, stepNormalizerMode1);
      eulerIntegrator0.addStepHandler(stepNormalizer0);
      StepNormalizer stepNormalizer1 = new StepNormalizer((-1316.19706780948), fixedStepHandler0, stepNormalizerMode0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.1270175653862835);
      doubleArray0[1] = (-1316.19706780948);
      stepNormalizer1.init((-1316.19706780948), doubleArray0, 0.0);
      eulerIntegrator0.addStepHandler(stepNormalizer1);
      double[] doubleArray1 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1316.19706780948), (-0.1), doubleArray1, doubleArray1);
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 0);
      eulerIntegrator0.clearEventHandlers();
      String string0 = graggBulirschStoerIntegrator0.getName();
      assertEquals("Gragg-Bulirsch-Stoer", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 0.0, doubleArray0, doubleArray0);
      highamHall54Integrator0.clearEventHandlers();
      highamHall54Integrator0.setStepSizeControl(1152.0, (-544.8531177871431), doubleArray0, doubleArray0);
      int int0 = highamHall54Integrator0.getOrder();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 3946;
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(523.1281331693527);
      double double0 = 1.0;
      int int1 = 578;
      eulerIntegrator0.getEvaluations();
      eulerIntegrator0.addEventHandler((EventHandler) null, 1.0, 2.4189403362149483E-216, 578);
      FirstOrderConverter firstOrderConverter0 = null;
      try {
        firstOrderConverter0 = new FirstOrderConverter((SecondOrderDifferentialEquations) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.FirstOrderConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-887.31468), (-887.31468), (-887.31468), (-887.31468));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 1131.1, (-887.31468), (-1942));
      graggBulirschStoerIntegrator0.setInterpolationControl(false, 1);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-887.31468), (-2654.0), (-887.31468), (-900.6013721379));
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      dormandPrince853Integrator0.getMaxEvaluations();
      dormandPrince853Integrator0.addEventHandler(eventHandler1, 1131.1, (-887.31468), (-1942));
      dormandPrince853Integrator0.getOrder();
      graggBulirschStoerIntegrator0.clearEventHandlers();
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(2671.14, 8, (-1995.3), 0.0);
      dormandPrince54Integrator0.getOrder();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1131.1;
      doubleArray0[1] = (double) (-1942);
      doubleArray0[2] = (double) 8;
      doubleArray0[3] = (-4543.73);
      doubleArray0[4] = 2671.14;
      doubleArray0[5] = (double) (-1942);
      doubleArray0[6] = (double) (-1942);
      try { 
        dormandPrince853Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) (-1942), doubleArray0, 0.0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-0.022355307863886294), 0.0, (-9.147934308113573), (-0.022355307863886294));
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.0, fixedStepHandler0, stepNormalizerMode0);
      graggBulirschStoerIntegrator0.setStabilityCheck(false, 1543, 1543, 0.0);
      graggBulirschStoerIntegrator0.getEventHandlers();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-0.022355307863886294);
      graggBulirschStoerIntegrator0.getMaxEvaluations();
      doubleArray0[3] = (-9.147934308113573);
      doubleArray0[4] = (-0.022355307863886294);
      doubleArray0[5] = Double.NaN;
      doubleArray0[6] = 0.0;
      stepNormalizer0.init((-9.147934308113573), doubleArray0, 0.0);
      doubleArray0[7] = (-0.022355307863886294);
      stepNormalizer0.init(Double.NaN, doubleArray0, (-483.18));
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      graggBulirschStoerIntegrator0.getStepHandlers();
      graggBulirschStoerIntegrator0.setStabilityCheck(false, (-512), (-512), 0.0);
      graggBulirschStoerIntegrator0.getMaxEvaluations();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (-4.436036387594894));
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setOrderControl((-1483), 0.0, 0.0);
      IllinoisSolver illinoisSolver0 = new IllinoisSolver(0.0, 0.0, 0.0);
      graggBulirschStoerIntegrator0.addEventHandler((EventHandler) null, 0.0, 0.0, (-1483), (UnivariateSolver) illinoisSolver0);
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.BOTH;
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.0, (FixedStepHandler) null, stepNormalizerMode0, stepNormalizerBounds0);
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      graggBulirschStoerIntegrator0.setControlFactors(0.0, 9.870193778407696, 4070.1649184, (-1630.35606202231));
      assertEquals(0.0, graggBulirschStoerIntegrator0.getMaxStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double double0 = 1427.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1427.0, 1427.0, 1427.0, 0.0);
      boolean boolean0 = true;
      int int0 = 872;
      double double1 = 30.72609909;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 872;
      graggBulirschStoerIntegrator0.setMaxEvaluations(872);
      graggBulirschStoerIntegrator0.setMaxEvaluations(4499);
      graggBulirschStoerIntegrator0.getEventHandlers();
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 872;
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      graggBulirschStoerIntegrator0.addStepHandler(dummyStepHandler0);
      doubleArray0[3] = (-2619.67833);
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.initializeStep(true, 402, doubleArray0, Double.NaN, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double double0 = (-389.0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, (-389.0), 2.4);
      graggBulirschStoerIntegrator0.getEvaluations();
      boolean boolean0 = true;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2.4;
      doubleArray0[1] = 1620.1787821;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-389.0);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-389.0);
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1620.1787821, doubleArray0, 0.0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 7 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      double double0 = (-4268.390589052);
      GillIntegrator gillIntegrator0 = new GillIntegrator((-4268.390589052));
      gillIntegrator0.getEvaluations();
      gillIntegrator0.clearStepHandlers();
      gillIntegrator0.getEventHandlers();
      gillIntegrator0.setMaxEvaluations(0);
      double[] doubleArray0 = new double[0];
      try { 
        gillIntegrator0.computeDerivatives((-4268.390589052), doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1505.7), (-1505.7), (-1505.7), (-1505.7));
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(651, (-1505.7), (-1505.7), 651);
      graggBulirschStoerIntegrator0.setInterpolationControl(false, 5);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = Double.NaN;
      // Undeclared exception!
      try { 
        dormandPrince853Integrator0.computeDerivatives(5, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double double0 = (-1739.987);
      double double1 = 120.0;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1739.987), (-1739.987), (-1739.987), 120.0);
      highamHall54Integrator0.clearStepHandlers();
      double double2 = 0.0;
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      int int0 = 0;
      // Undeclared exception!
      try { 
        highamHall54Integrator0.initializeStep(false, 0, doubleArray0, 1.0, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1505.7), (-1505.7), 2388.0, (-1505.7));
      dormandPrince853Integrator0.getOrder();
      double double0 = dormandPrince853Integrator0.getCurrentSignedStepsize();
      assertEquals(1505.7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1505.7), (-1505.7), 2388.0, (-1505.7));
      int int0 = dormandPrince853Integrator0.getMaxEvaluations();
      int int1 = dormandPrince853Integrator0.getOrder();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1616.4, 0.0, 1616.4, 0.0);
      highamHall54Integrator0.getMaxEvaluations();
      highamHall54Integrator0.getCurrentSignedStepsize();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) Integer.MAX_VALUE;
      doubleArray0[2] = 1616.4;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) Integer.MAX_VALUE;
      doubleArray0[6] = (double) Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        highamHall54Integrator0.computeDerivatives(1616.4, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-4343.1));
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-3317.017777961679), (-3317.017777961679), (-2333.716626838), (-2333.716626838));
      dormandPrince54Integrator0.getOrder();
      midpointIntegrator0.getStepHandlers();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 167;
      doubleArray0[1] = (double) 167;
      doubleArray0[2] = (-2333.716626838);
      doubleArray0[3] = (double) 167;
      doubleArray0[4] = (-4343.1);
      doubleArray0[5] = (double) 5;
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(167, (-4343.1), 5, doubleArray0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0.0);
      midpointIntegrator0.setMaxEvaluations(61);
      midpointIntegrator0.getName();
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, midpointIntegrator0.getCurrentSignedStepsize(), 0.01);
  }
}
