/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 06:45:30 GMT 2021
 */

package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import org.apache.commons.math3.analysis.solvers.BisectionSolver;
import org.apache.commons.math3.analysis.solvers.IllinoisSolver;
import org.apache.commons.math3.analysis.solvers.MullerSolver2;
import org.apache.commons.math3.analysis.solvers.RegulaFalsiSolver;
import org.apache.commons.math3.analysis.solvers.RiddersSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondaryEquations;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.nonstiff.AdamsBashforthIntegrator;
import org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.EulerIntegrator;
import org.apache.commons.math3.ode.nonstiff.GillIntegrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator;
import org.apache.commons.math3.ode.sampling.DummyStepHandler;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.StepHandler;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.apache.commons.math3.ode.sampling.StepNormalizerBounds;
import org.apache.commons.math3.ode.sampling.StepNormalizerMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegrator_ESTest extends AbstractIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      double double0 = 354216.0;
      GillIntegrator gillIntegrator0 = new GillIntegrator(3360.7418824665706);
      GillIntegrator gillIntegrator1 = new GillIntegrator(354216.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer0 = new StepNormalizer(0, fixedStepHandler0);
      gillIntegrator0.getMaxEvaluations();
      FixedStepHandler fixedStepHandler1 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer1 = new StepNormalizer(0, fixedStepHandler1);
      gillIntegrator1.addStepHandler(stepNormalizer1);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 354216.0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = 354216.0;
      doubleArray1[3] = 3360.7418824665706;
      doubleArray1[4] = 354216.0;
      try { 
        gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 3668.7619687479414, doubleArray0, (double) 0, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 5 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      int int0 = 5;
      GillIntegrator gillIntegrator0 = new GillIntegrator(5);
      double double0 = 0.0;
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.FIRST;
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.0, fixedStepHandler0, stepNormalizerMode0, stepNormalizerBounds0);
      gillIntegrator0.addStepHandler(stepNormalizer0);
      double double1 = 1.0;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-1488.882099404111), (double)5, (-1488.882099404111), 0.0, 1.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      gillIntegrator0.addEventHandler(eventHandler0, (double) 5, 0.0, 5);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      gillIntegrator0.integrate(expandableStatefulODE0, 0.0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      int int0 = 5;
      GillIntegrator gillIntegrator0 = new GillIntegrator(5);
      double double0 = 0.0;
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-1488.882099404111), (double)5, (-1488.882099404111), 0.0, 1.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      gillIntegrator0.addEventHandler(eventHandler0, (double) 5, 0.0, 5);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double double1 = 94.535345;
      // Undeclared exception!
      gillIntegrator0.integrate(expandableStatefulODE0, 94.535345);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(1553.804199616813);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      StepNormalizer stepNormalizer0 = new StepNormalizer(2360.7418824665706, (FixedStepHandler) null);
      gillIntegrator0.getMaxEvaluations();
      gillIntegrator0.addStepHandler(stepNormalizer0);
      GillIntegrator gillIntegrator1 = new GillIntegrator(Integer.MAX_VALUE);
      double[] doubleArray0 = new double[0];
      gillIntegrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 2708.07, doubleArray0, (-1.0), doubleArray0);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1.0, (-6.38187356721971E-8), 1313.123120693, (-1.6745661720946737E-8));
      DormandPrince54Integrator dormandPrince54Integrator1 = new DormandPrince54Integrator(2517.9588662606966, 2550.19, doubleArray0, doubleArray0);
      dormandPrince54Integrator1.getOrder();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      GillIntegrator gillIntegrator0 = new GillIntegrator(3360.7418824665706);
      GillIntegrator gillIntegrator1 = new GillIntegrator(1000.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer0 = new StepNormalizer(354216.0, fixedStepHandler0);
      gillIntegrator0.getMaxEvaluations();
      gillIntegrator1.addStepHandler(stepNormalizer0);
      try { 
        gillIntegrator1.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 3360.7418824665706, doubleArray0, 3360.7418824665706, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      GillIntegrator gillIntegrator0 = new GillIntegrator(3360.7418824665706);
      GillIntegrator gillIntegrator1 = new GillIntegrator(354216.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer0 = new StepNormalizer(3360.7418824665706, fixedStepHandler0);
      gillIntegrator1.getMaxEvaluations();
      gillIntegrator1.addStepHandler(stepNormalizer0);
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 3360.7418824665706, doubleArray0, 354216.0, doubleArray0);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(516.665869, 354216.0, (-4.081518), Integer.MAX_VALUE);
      dormandPrince54Integrator0.getOrder();
      gillIntegrator0.getEventHandlers();
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      gillIntegrator0.integrate(expandableStatefulODE0, 354216.0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator((-2748.1216127));
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((-3.5727227900139915E148), (-3.5727227900139915E148), 3093.208018204512, (-1533.8722386380482), (-226.0)).when(eventHandler0).g(anyDouble() , any(double[].class));
      gillIntegrator0.addEventHandler(eventHandler0, (-1.0), Double.NaN, 3114);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter1);
      try { 
        gillIntegrator0.integrate(expandableStatefulODE0, (-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // function values at endpoints do not have different signs, endpoints: [\uFFFD, \uFFFD], values: [-226, -226]
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.getCompleteState();
      GillIntegrator gillIntegrator0 = new GillIntegrator(1350.3);
      gillIntegrator0.setMaxEvaluations(894);
      try { 
        gillIntegrator0.integrate(expandableStatefulODE0, 1350.3);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (894) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      GillIntegrator gillIntegrator0 = new GillIntegrator((-2748.1216127));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer0 = new StepNormalizer(354216.0, fixedStepHandler0);
      gillIntegrator0.getMaxEvaluations();
      gillIntegrator0.addStepHandler(stepNormalizer0);
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 3360.7418824665706, doubleArray0, 267.53386426205844, doubleArray0);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 2.8421709430404007E-11, 0.0, (-1.0));
      dormandPrince54Integrator0.getOrder();
      gillIntegrator0.getEventHandlers();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(232.973, (-330.5730927), 232.973, Integer.MAX_VALUE);
      graggBulirschStoerIntegrator0.setControlFactors((-1955.1432431814087), (-3553.828564), 3093.8492588229337, 1.0315548713040775E-9);
      gillIntegrator0.getEvaluations();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(5, (-3433.18546761), 162.46613573794156, 4533.242, 162.46613573794156);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      try { 
        adamsBashforthIntegrator0.integrate(expandableStatefulODE0, (-3129.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one column
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double double0 = (-2748.1216127);
      double[] doubleArray0 = new double[0];
      GillIntegrator gillIntegrator0 = new GillIntegrator(Double.NaN);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer0 = new StepNormalizer(1.1368683772161603E-10, fixedStepHandler0);
      gillIntegrator0.getMaxEvaluations();
      gillIntegrator0.addStepHandler(stepNormalizer0);
      // Undeclared exception!
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 267.53386426205844, doubleArray0, 430.0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double double0 = 0.6872705221176147;
      GillIntegrator gillIntegrator0 = new GillIntegrator(0.6872705221176147);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((double)0, (double)0, 3060.08997, (-1.230153548825964E-8), 3060.08997).when(eventHandler0).g(anyDouble() , any(double[].class));
      double double1 = (-2593.4);
      gillIntegrator0.addEventHandler(eventHandler0, (double) 0, (-2593.4), 0);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      try { 
        gillIntegrator0.integrate(expandableStatefulODE0, 1.108938997126179E-40);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded: evaluations
         //
         verifyException("org.apache.commons.math3.analysis.solvers.BaseAbstractUnivariateSolver", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      GillIntegrator gillIntegrator0 = new GillIntegrator(3360.7418824665706);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer0 = new StepNormalizer(898.6077088638173, fixedStepHandler0);
      gillIntegrator0.getMaxEvaluations();
      FixedStepHandler fixedStepHandler1 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer1 = new StepNormalizer(354216.0, fixedStepHandler1);
      gillIntegrator0.addStepHandler(stepNormalizer1);
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 580.5426, doubleArray0, 0.0, doubleArray0);
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(1.1368683772161603E-10, 0.0, (-1.0), (-3976.147042902539));
      dormandPrince54Integrator0.getOrder();
      Collection<EventHandler> collection0 = new LinkedList<EventHandler>();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double double0 = 0.0;
      double[] doubleArray0 = new double[0];
      GillIntegrator gillIntegrator0 = new GillIntegrator((-2748.1216127));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      gillIntegrator0.setMaxEvaluations(5);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer0 = new StepNormalizer(354216.0, fixedStepHandler0);
      stepNormalizer0.init(3060.08997, doubleArray0, (-2748.1216127));
      gillIntegrator0.getMaxEvaluations();
      gillIntegrator0.getStepHandlers();
      gillIntegrator0.addStepHandler(stepNormalizer0);
      try { 
        gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 3360.7418824665706, doubleArray0, 267.53386426205844, doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (5) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(0.6872705221176147);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.6872705221176147;
      doubleArray0[1] = 0.6872705221176147;
      doubleArray0[2] = 1.0277209281921387;
      doubleArray0[3] = 0.6872705221176147;
      doubleArray0[4] = 0.6872705221176147;
      doubleArray0[5] = 0.6872705221176147;
      doubleArray0[6] = 0.6872705221176147;
      doubleArray0[7] = 0.6872705221176147;
      doubleArray0[8] = 0.6872705221176147;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.6872705221176147, 0.6872705221176147, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setControlFactors(0.6872705221176147, 0.6872705221176147, 1.0277209281921387, Double.NaN);
      // Undeclared exception!
      try { 
        gillIntegrator0.integrate((ExpandableStatefulODE) null, 0.6872705221176147);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 11.99229113618279;
      doubleArray0[1] = 11.99229113618279;
      doubleArray0[2] = 11.99229113618279;
      doubleArray0[3] = 11.99229113618279;
      doubleArray0[4] = 11.99229113618279;
      doubleArray0[5] = 11.99229113618279;
      doubleArray0[6] = 11.99229113618279;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(11.99229113618279, 11.99229113618279, doubleArray0, doubleArray0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(11.99229113618279, 11.99229113618279, 11.99229113618279, 11.99229113618279);
      int int0 = (-390);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.MULTIPLES;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.NEITHER;
      StepNormalizer stepNormalizer0 = new StepNormalizer(2.8421709430404007E-11, fixedStepHandler0, stepNormalizerMode0, stepNormalizerBounds0);
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      MullerSolver2 mullerSolver2_0 = new MullerSolver2();
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 0.0, 11.99229113618279, (-390), (UnivariateSolver) mullerSolver2_0);
      graggBulirschStoerIntegrator0.setInterpolationControl(false, (-390));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (-524.81295));
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 11.99229113618279;
      doubleArray0[1] = 11.99229113618279;
      doubleArray0[2] = 11.99229113618279;
      doubleArray0[3] = 11.99229113618279;
      doubleArray0[4] = 11.99229113618279;
      doubleArray0[5] = 11.99229113618279;
      doubleArray0[6] = 11.99229113618279;
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer0 = new StepNormalizer(11.99229113618279, fixedStepHandler0);
      GillIntegrator gillIntegrator0 = new GillIntegrator(60.32217415749);
      gillIntegrator0.getMaxEvaluations();
      gillIntegrator0.addStepHandler(stepNormalizer0);
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 267.53386426205844;
      doubleArray1[1] = (double) Integer.MAX_VALUE;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(2.9583112936666607E122, 4.547473508864641E-10, 60.32217415749, 60.32217415749);
      dormandPrince54Integrator0.getOrder();
      gillIntegrator0.getEventHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.getTotalDimension();
      // Undeclared exception!
      gillIntegrator0.integrate(expandableStatefulODE0, (double) 5);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 3546.2336971599557;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(3546.2336971599557, 3546.2336971599557, doubleArray0, doubleArray0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(3546.2336971599557, 3546.2336971599557, (-5075.92972), (-5075.92972));
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 1092);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizerBounds stepNormalizerBounds0 = StepNormalizerBounds.NEITHER;
      StepNormalizer stepNormalizer0 = new StepNormalizer((-5075.92972), fixedStepHandler0, stepNormalizerMode0, stepNormalizerBounds0);
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      graggBulirschStoerIntegrator0.setInterpolationControl(true, (-390));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(795).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (-5075.92972));
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-2748.1216127), 0.0, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
      GillIntegrator gillIntegrator0 = new GillIntegrator(0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      gillIntegrator0.clearEventHandlers();
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer0 = new StepNormalizer((-1.0), fixedStepHandler0);
      gillIntegrator0.addStepHandler(stepNormalizer0);
      double double0 = 0.0;
      double double1 = 138.0904;
      // Undeclared exception!
      gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, double1, doubleArray0, double0, doubleArray0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double double0 = 11.99229113618279;
      double[] doubleArray0 = new double[7];
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(11.99229113618279);
      eulerIntegrator0.setMaxEvaluations((-1142));
      double double1 = (-25.69393346270375);
      GillIntegrator gillIntegrator0 = new GillIntegrator(4705.363162670876);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double double2 = 1498.42;
      double[] doubleArray1 = new double[3];
      doubleArray1[1] = 3360.7418824665706;
      doubleArray0[5] = 3360.7418824665706;
      try { 
        gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 4705.363162670876, doubleArray1, 3360.7418824665706, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 3 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 11.99229113618279;
      doubleArray0[1] = 11.99229113618279;
      doubleArray0[2] = 11.99229113618279;
      doubleArray0[3] = 11.99229113618279;
      doubleArray0[4] = 11.99229113618279;
      doubleArray0[5] = 11.99229113618279;
      doubleArray0[6] = 11.99229113618279;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(11.99229113618279, 11.99229113618279, doubleArray0, doubleArray0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(11.99229113618279, 11.99229113618279, 11.99229113618279, 11.99229113618279);
      graggBulirschStoerIntegrator0.setInterpolationControl(false, (-390));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (-524.81295));
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-3689.8215207954));
      int int0 = 1629;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1629).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[4];
      double double0 = Double.NaN;
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      threeEighthesIntegrator0.integrate(expandableStatefulODE0, (-1360.6547155466799));
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-2748.1216127), 0.0, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      ExpandableStatefulODE expandableStatefulODE1 = new ExpandableStatefulODE(firstOrderConverter0);
      SecondaryEquations secondaryEquations0 = mock(SecondaryEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondaryEquations0).getDimension();
      expandableStatefulODE0.getTotalDimension();
      expandableStatefulODE0.addSecondaryEquations(secondaryEquations0);
      expandableStatefulODE1.getSecondaryMappers();
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, (-4604.5));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2865.21586802;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 541.515755364;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 541.515755364;
      doubleArray0[6] = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(541.515755364, 0.0, doubleArray0, doubleArray0);
      double double0 = graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
      assertEquals(0.0, double0, 0.01);
      
      MullerSolver2 mullerSolver2_0 = new MullerSolver2(0.0, 0.0);
      GillIntegrator gillIntegrator0 = new GillIntegrator(0.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      gillIntegrator0.clearEventHandlers();
      gillIntegrator0.addEventHandler(eventHandler0, 0.0, 0.0, 1, (UnivariateSolver) mullerSolver2_0);
      GillIntegrator gillIntegrator1 = new GillIntegrator((-1.0));
      gillIntegrator1.getName();
      assertEquals(Double.NaN, gillIntegrator1.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, gillIntegrator1.getCurrentStepStart(), 0.01);
      
      graggBulirschStoerIntegrator0.setControlFactors(0.0, 0.0, 0.0, (-7.500936767542933E167));
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, 2865.21586802, 403.004, 0.0);
      highamHall54Integrator0.getOrder();
      assertEquals(0.0, highamHall54Integrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(3093.8492588229337);
      double double0 = eulerIntegrator0.getCurrentStepStart();
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(6.265569375E11);
      eulerIntegrator0.clearEventHandlers();
      eulerIntegrator0.getCurrentStepStart();
      eulerIntegrator0.clearEventHandlers();
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1705.027016545157), Double.NaN, (-1.0), 6.265569375E11);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizer stepNormalizer0 = new StepNormalizer(6.265569375E11, fixedStepHandler0, stepNormalizerMode0);
      eulerIntegrator0.addStepHandler(stepNormalizer0);
      RiddersSolver riddersSolver0 = new RiddersSolver(Double.NaN);
      highamHall54Integrator0.addEventHandler(eventHandler0, (-3239.79412), 6.265569375E11, 1473, (UnivariateSolver) riddersSolver0);
      highamHall54Integrator0.getOrder();
      eulerIntegrator0.getMaxEvaluations();
      eulerIntegrator0.getEvaluations();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 1473;
      doubleArray0[1] = (-3239.79412);
      doubleArray0[2] = 6.265569375E11;
      doubleArray0[3] = (-1.4300075619643524E-298);
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = 6.265569375E11;
      doubleArray0[6] = Double.NaN;
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = Double.NaN;
      doubleArray1[1] = Double.NaN;
      doubleArray1[2] = (double) 0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1705.027016545157), (-1705.027016545157), doubleArray0, doubleArray1);
      graggBulirschStoerIntegrator0.setOrderControl((-275), 0.0, (-275));
      assertEquals(1705.027016545157, graggBulirschStoerIntegrator0.getMinStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(3546.2336971599557);
      int int0 = 0;
      eulerIntegrator0.setMaxEvaluations(0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2692.217399470781;
      doubleArray0[1] = 354216.0;
      doubleArray0[2] = (-25.69393346270375);
      doubleArray0[3] = (double) 0;
      GillIntegrator gillIntegrator0 = new GillIntegrator(3360.7418824665706);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray1 = new double[1];
      double double0 = 1498.42;
      doubleArray1[0] = 1498.42;
      try { 
        gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray1, 0.0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 1 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2139.36;
      doubleArray0[1] = 2139.36;
      doubleArray0[2] = 2139.36;
      doubleArray0[3] = 2139.36;
      doubleArray0[4] = 2139.36;
      doubleArray0[5] = 2139.36;
      double[] doubleArray1 = new double[9];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(6.278175116, 2139.36, doubleArray1, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      dormandPrince853Integrator0.addEventHandler(eventHandler0, 2139.36, (-1.0), (-1322));
      dormandPrince853Integrator0.setSafety(1.6997387217850427E171);
      Collection<EventHandler> collection0 = dormandPrince853Integrator0.getEventHandlers();
      assertTrue(collection0.contains(eventHandler0));
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(3546.2336971599557);
      eulerIntegrator0.setMaxEvaluations(0);
      double[] doubleArray0 = new double[7];
      GillIntegrator gillIntegrator0 = new GillIntegrator(3546.2336971599557);
      gillIntegrator0.getMaxEvaluations();
      gillIntegrator0.getCurrentSignedStepsize();
      gillIntegrator0.setMaxEvaluations(0);
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizer stepNormalizer0 = new StepNormalizer(3546.2336971599557, fixedStepHandler0, stepNormalizerMode0);
      gillIntegrator0.addStepHandler(stepNormalizer0);
      try { 
        gillIntegrator0.computeDerivatives(1.0, doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-3689.8215207954));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(1629).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[4];
      double double0 = (-0.27);
      try { 
        threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, Double.NaN, doubleArray0, 1586.389040005428, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 4 != 3,258
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 2139.36;
      doubleArray0[1] = 2139.36;
      doubleArray0[2] = 2139.36;
      doubleArray0[3] = 2139.36;
      doubleArray0[4] = 2139.36;
      doubleArray0[5] = 2139.36;
      doubleArray0[6] = 2139.36;
      doubleArray0[7] = (-2425.0);
      doubleArray0[8] = 2139.36;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2139.36, 2139.36, doubleArray0, doubleArray0);
      Collection<EventHandler> collection0 = dormandPrince853Integrator0.getEventHandlers();
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 673.23948308, 0.0, 1000.0);
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 1000.0;
      doubleArray0[1] = 673.23948308;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-3069.263395);
      dormandPrince54Integrator0.setStepSizeControl(0.0, (-3069.263395), doubleArray0, doubleArray0);
      DummyStepHandler.getInstance();
      dormandPrince54Integrator0.addStepHandler(dummyStepHandler0);
      dormandPrince54Integrator0.getStepHandlers();
      dormandPrince54Integrator0.getOrder();
      DummyStepHandler dummyStepHandler1 = DummyStepHandler.getInstance();
      dormandPrince54Integrator0.addStepHandler(dummyStepHandler1);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1.0, 673.23948308, 5, 5);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 1000.0, 0.0, 5);
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      dormandPrince54Integrator0.getEventHandlers();
      dormandPrince54Integrator0.getEventHandlers();
      BisectionSolver bisectionSolver0 = new BisectionSolver();
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler1, 0.0, (-3232.518), 0, (UnivariateSolver) bisectionSolver0);
      graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
      ExpandableStatefulODE expandableStatefulODE0 = null;
      try {
        expandableStatefulODE0 = new ExpandableStatefulODE((FirstOrderDifferentialEquations) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.ExpandableStatefulODE", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double double0 = 12.0;
      GillIntegrator gillIntegrator0 = new GillIntegrator(12.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      int int0 = (-439);
      double double1 = 1885.721354;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1885.721354;
      doubleArray0[1] = (double) (-439);
      doubleArray0[2] = (double) (-439);
      doubleArray0[3] = 12.0;
      doubleArray0[4] = (double) (-439);
      doubleArray0[5] = 1885.721354;
      doubleArray0[6] = 12.0;
      doubleArray0[7] = 0.9777777777777777;
      doubleArray0[8] = (double) (-439);
      try { 
        gillIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 12.0, doubleArray0, 1885.721354, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 354216.0;
      doubleArray0[1] = (-25.69393346270375);
      doubleArray0[2] = 107.0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (-25.69393346270375);
      doubleArray0[5] = 2692.217399470781;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0, 1.0303966192973381E-205, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setStabilityCheck(false, 1266, 6, (-0.3125));
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver(0.0, 0.0, (-25.69393346270375));
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator1 = new GraggBulirschStoerIntegrator(74.4389170679, 2719.9617083713, Double.NaN, 301.024);
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(1.0303966192973381E-205);
      eulerIntegrator0.clearEventHandlers();
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator(3546.2336971599557);
      eulerIntegrator0.setMaxEvaluations(0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2692.217399470781;
      doubleArray0[1] = 354216.0;
      doubleArray0[2] = (-25.69393346270375);
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 3546.2336971599557;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(3546.2336971599557, 3546.2336971599557, doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.setStabilityCheck(false, (-2073), (-2073), (-1.0));
      RegulaFalsiSolver regulaFalsiSolver0 = new RegulaFalsiSolver((-1085.6799813929783), 0.0, 354216.0);
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 0.0, (-0.3125), 0, (UnivariateSolver) regulaFalsiSolver0);
      eulerIntegrator0.clearEventHandlers();
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, eulerIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(508.0737444055276);
      gillIntegrator0.getMaxEvaluations();
      int int0 = 226;
      gillIntegrator0.setMaxEvaluations(226);
      gillIntegrator0.getMaxEvaluations();
      gillIntegrator0.getCurrentSignedStepsize();
      gillIntegrator0.setMaxEvaluations(Integer.MAX_VALUE);
      double[] doubleArray0 = new double[0];
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizer stepNormalizer0 = new StepNormalizer(Integer.MAX_VALUE, fixedStepHandler0, stepNormalizerMode0);
      gillIntegrator0.addStepHandler(stepNormalizer0);
      // Undeclared exception!
      try { 
        gillIntegrator0.computeDerivatives(295.51675443347045, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 334.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 905.685234;
      doubleArray0[7] = 0.0;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 0.0, doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) null, 0.0, doubleArray0, (-1388.6148849560109), doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      GillIntegrator gillIntegrator0 = new GillIntegrator(0.0);
      gillIntegrator0.getMaxEvaluations();
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = 818.6904390182335;
      doubleArray1[1] = (double) Integer.MAX_VALUE;
      doubleArray1[2] = 0.0;
      doubleArray1[3] = 0.0;
      doubleArray1[4] = 818.6904390182335;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(818.6904390182335, (-925.9813805424), doubleArray0, doubleArray1);
      graggBulirschStoerIntegrator0.addStepHandler((StepHandler) null);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      IllinoisSolver illinoisSolver0 = new IllinoisSolver();
      illinoisSolver0.getMaxEvaluations();
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, Double.NaN, Double.NaN, Integer.MAX_VALUE, (UnivariateSolver) illinoisSolver0);
      graggBulirschStoerIntegrator0.addEventHandler((EventHandler) null, 0.0, (-1.0), 1, (UnivariateSolver) illinoisSolver0);
      assertEquals(0.0, illinoisSolver0.getMin(), 0.01);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(650.9958);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-1849.9758997084), 107.0, (-9.194632392478356), 117.07);
      highamHall54Integrator0.getOrder();
      threeEighthesIntegrator0.getMaxEvaluations();
      threeEighthesIntegrator0.getStepHandlers();
      threeEighthesIntegrator0.clearStepHandlers();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) Integer.MAX_VALUE;
      doubleArray0[1] = 650.9958;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1849.9758997084), Integer.MAX_VALUE, doubleArray0, doubleArray0);
      boolean boolean0 = false;
      int int0 = 182;
      FirstOrderConverter firstOrderConverter0 = null;
      try {
        firstOrderConverter0 = new FirstOrderConverter((SecondOrderDifferentialEquations) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.FirstOrderConverter", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(Double.NaN, Double.NaN, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getCurrentSignedStepsize();
      double double0 = dormandPrince853Integrator0.getCurrentStepStart();
      assertEquals(Double.NaN, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 2865.21586802;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 541.515755364;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 541.515755364;
      doubleArray0[6] = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(541.515755364, 0.0, doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.getSecondaryMappers();
      try { 
        graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 2865.21586802);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 7
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-42.46912);
      doubleArray0[1] = (-0.5);
      doubleArray0[2] = (-602.55459);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-0.5), (-602.55459), doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getStepHandlers();
      dormandPrince853Integrator0.getStepHandlers();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-602.55459), (-602.55459), doubleArray0, doubleArray0);
      graggBulirschStoerIntegrator0.setOrderControl(0, 472.1409681, (-0.5));
      assertEquals(602.55459, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-671.4);
      doubleArray0[1] = (-671.4);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-671.4);
      doubleArray0[4] = (-671.4);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray1[2] = (-671.4);
      doubleArray1[3] = (-671.4);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(0.0, (-671.4), doubleArray0, doubleArray1);
      int int0 = highamHall54Integrator0.getEvaluations();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 3.141592653589793;
      doubleArray0[1] = 3.141592653589793;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(3.141592653589793, 3.141592653589793, doubleArray0, doubleArray0);
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = 1.0;
      graggBulirschStoerIntegrator0.setStepSizeControl(3.141592653589793, 1.0, doubleArray1, doubleArray0);
      graggBulirschStoerIntegrator0.getStepHandlers();
      graggBulirschStoerIntegrator0.getCurrentStepStart();
      graggBulirschStoerIntegrator0.clearStepHandlers();
      assertEquals(3.141592653589793, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      double double0 = (-101.625);
      double double1 = 3522.886839827163;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-101.625), (-101.625), (-101.625), 3522.886839827163);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-101.625);
      doubleArray0[1] = (double) (-1647);
      expandableStatefulODE0.setTime(0.0);
      graggBulirschStoerIntegrator0.clearStepHandlers();
      // Undeclared exception!
      try { 
        expandableStatefulODE0.setSecondaryState((-1647), doubleArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1870.9455, 1870.9455, 1870.9455, 1347.6619240338);
      graggBulirschStoerIntegrator0.setOrderControl(283, 1870.9455, 1870.9455);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-5.0);
      doubleArray0[1] = 1870.9455;
      doubleArray0[2] = 1870.9455;
      doubleArray0[3] = (double) 283;
      doubleArray0[4] = 1870.9455;
      doubleArray0[5] = (double) 283;
      doubleArray0[6] = (double) 283;
      doubleArray0[7] = (-5.0);
      doubleArray0[8] = (-5.0);
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.computeDerivatives((-5.0), doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      double double0 = (-1057.4);
      double double1 = Double.NaN;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1057.4);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (-1057.4);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1057.4), Double.NaN, doubleArray0, doubleArray0);
      // Undeclared exception!
      try { 
        dormandPrince853Integrator0.computeDerivatives((-1057.4), doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      EulerIntegrator eulerIntegrator0 = new EulerIntegrator((-1028.736732114068));
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(1248.002931, 1808.21, (-82.29673), 1367.76);
      dormandPrince853Integrator0.clearEventHandlers();
      dormandPrince853Integrator0.getOrder();
      eulerIntegrator0.getCurrentSignedStepsize();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(1248.002931, 0.0, 2371.4369059, Double.NaN);
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      graggBulirschStoerIntegrator0.addStepHandler(dummyStepHandler0);
      DormandPrince54Integrator dormandPrince54Integrator0 = null;
      try {
        dormandPrince54Integrator0 = new DormandPrince54Integrator(3.5408485497116107E-9, (-82.29673), (double[]) null, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.nonstiff.AdaptiveStepsizeIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 11.99229113618279;
      doubleArray0[1] = 11.99229113618279;
      doubleArray0[2] = 11.99229113618279;
      doubleArray0[3] = 11.99229113618279;
      doubleArray0[4] = 11.99229113618279;
      doubleArray0[5] = 11.99229113618279;
      doubleArray0[6] = 11.99229113618279;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(11.99229113618279, 11.99229113618279, doubleArray0, doubleArray0);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(11.99229113618279, 11.99229113618279, 11.99229113618279, 11.99229113618279);
      GillIntegrator gillIntegrator0 = new GillIntegrator(11.99229113618279);
      gillIntegrator0.getStepHandlers();
      MullerSolver2 mullerSolver2_0 = new MullerSolver2(1000.0, 0.0);
      GillIntegrator gillIntegrator1 = new GillIntegrator(1000.0);
      gillIntegrator0.addEventHandler((EventHandler) null, 0.0, (double) 3, 3, (UnivariateSolver) mullerSolver2_0);
      gillIntegrator1.getName();
      assertEquals(Double.NaN, gillIntegrator1.getCurrentStepStart(), 0.01);
      assertEquals(Double.NaN, gillIntegrator1.getCurrentSignedStepsize(), 0.01);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2823.4549188, (-1643.6935042), 2823.4549188, 2823.4549188);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (-1591.051769), 30.0, 0);
      graggBulirschStoerIntegrator0.addStepHandler((StepHandler) null);
      assertEquals("Gragg-Bulirsch-Stoer", graggBulirschStoerIntegrator0.getName());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      double double0 = (-1.0);
      double double1 = (-3905.91506);
      double double2 = 0.0;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-1.0), (-3905.91506), 0.0, 0.0);
      int int0 = (-2124);
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = null;
      try {
        adamsMoultonIntegrator0 = new AdamsMoultonIntegrator((-2124), 0.0, (-1.0), 0.0, (-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // multistep method needs at least -2,124 previous steps, got 2
         //
         verifyException("org.apache.commons.math3.ode.MultistepIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 644.530513319679;
      doubleArray0[1] = 2171.1113491388082;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 2171.1113491388082;
      AdamsBashforthIntegrator adamsBashforthIntegrator0 = null;
      try {
        adamsBashforthIntegrator0 = new AdamsBashforthIntegrator(0, 0, 2171.1113491388082, doubleArray0, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one row
         //
         verifyException("org.apache.commons.math3.linear.AbstractFieldMatrix", e);
      }
  }
}
