/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 13:45:31 GMT 2021
 */

package org.apache.commons.math3.ode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import org.apache.commons.math3.analysis.solvers.BracketingNthOrderBrentSolver;
import org.apache.commons.math3.analysis.solvers.IllinoisSolver;
import org.apache.commons.math3.analysis.solvers.MullerSolver2;
import org.apache.commons.math3.analysis.solvers.RiddersSolver;
import org.apache.commons.math3.analysis.solvers.UnivariateSolver;
import org.apache.commons.math3.ode.ExpandableStatefulODE;
import org.apache.commons.math3.ode.FirstOrderConverter;
import org.apache.commons.math3.ode.FirstOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondOrderDifferentialEquations;
import org.apache.commons.math3.ode.SecondaryEquations;
import org.apache.commons.math3.ode.events.EventHandler;
import org.apache.commons.math3.ode.nonstiff.AdamsMoultonIntegrator;
import org.apache.commons.math3.ode.nonstiff.ClassicalRungeKuttaIntegrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince54Integrator;
import org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator;
import org.apache.commons.math3.ode.nonstiff.GillIntegrator;
import org.apache.commons.math3.ode.nonstiff.GraggBulirschStoerIntegrator;
import org.apache.commons.math3.ode.nonstiff.HighamHall54Integrator;
import org.apache.commons.math3.ode.nonstiff.MidpointIntegrator;
import org.apache.commons.math3.ode.nonstiff.ThreeEighthesIntegrator;
import org.apache.commons.math3.ode.sampling.DummyStepHandler;
import org.apache.commons.math3.ode.sampling.FixedStepHandler;
import org.apache.commons.math3.ode.sampling.StepHandler;
import org.apache.commons.math3.ode.sampling.StepNormalizer;
import org.apache.commons.math3.ode.sampling.StepNormalizerMode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class AbstractIntegrator_ESTest extends AbstractIntegrator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double double0 = (-125.70542115324963);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(2, (-125.70542115324963), (-125.70542115324963), doubleArray0, doubleArray0);
      adamsMoultonIntegrator0.getEventHandlers();
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-125.70542115324963));
      threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) 0, doubleArray0, (double) 2, doubleArray0);
      ExpandableStatefulODE expandableStatefulODE0 = null;
      try {
        expandableStatefulODE0 = new ExpandableStatefulODE((FirstOrderDifferentialEquations) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.ExpandableStatefulODE", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(2, (-125.2146760224), (-125.2146760224), doubleArray0, doubleArray0);
      adamsMoultonIntegrator0.getEventHandlers();
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-125.2146760224));
      threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (double) 0, doubleArray0, (-2565.601475648), doubleArray0);
      ExpandableStatefulODE expandableStatefulODE0 = null;
      try {
        expandableStatefulODE0 = new ExpandableStatefulODE((FirstOrderDifferentialEquations) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.ExpandableStatefulODE", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(2, (-125.2146760224), (-125.2146760224), doubleArray0, doubleArray0);
      AdamsMoultonIntegrator adamsMoultonIntegrator1 = new AdamsMoultonIntegrator(2, 2, (-1008.8087906641323), doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations1 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations1).getDimension();
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations1);
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-1.3020833333333333));
      threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 95.924742, doubleArray0, (double) 0, doubleArray0);
      ThreeEighthesIntegrator threeEighthesIntegrator1 = new ThreeEighthesIntegrator(2.5041985511779785);
      threeEighthesIntegrator0.clearEventHandlers();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(2, (-125.2146760224), (-125.2146760224), doubleArray0, doubleArray0);
      AdamsMoultonIntegrator adamsMoultonIntegrator1 = new AdamsMoultonIntegrator(2, 2, (-1008.8087906641323), doubleArray0, doubleArray0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double double0 = 164.64094;
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(164.64094);
      threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-125.2146760224), doubleArray0, 0.0, doubleArray0);
      // Undeclared exception!
      threeEighthesIntegrator0.integrate(expandableStatefulODE0, double0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-125.2146760224), (-1492.60685), (-1492.60685), (-1492.60685));
      graggBulirschStoerIntegrator0.setOrderControl(0, (-125.2146760224), 0);
      graggBulirschStoerIntegrator0.setControlFactors((-1.0), (-125.2146760224), 0, (-1.0));
      graggBulirschStoerIntegrator0.setControlFactors((-125.2146760224), (-0.7853981633974483), (-0.7853981633974483), 0);
      graggBulirschStoerIntegrator0.clearEventHandlers();
      graggBulirschStoerIntegrator0.getStepHandlers();
      graggBulirschStoerIntegrator0.getEventHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      graggBulirschStoerIntegrator0.setInitialStepSize(0.0);
      graggBulirschStoerIntegrator0.getMaxEvaluations();
      graggBulirschStoerIntegrator0.setStabilityCheck(true, 0, 2, 862.84);
      graggBulirschStoerIntegrator0.setStabilityCheck(false, (-62), 127, 0.0);
      double[] doubleArray0 = new double[0];
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(2, (-125.2146760224), 2607.0, doubleArray0, doubleArray0);
      adamsMoultonIntegrator0.setStarterIntegrator(graggBulirschStoerIntegrator0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      adamsMoultonIntegrator0.getEvaluations();
      GillIntegrator gillIntegrator0 = new GillIntegrator(0.0);
      // Undeclared exception!
      try { 
        adamsMoultonIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 862.84, doubleArray0, (-1.1564717694090882E-280), doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one column
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(170, 170).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter1);
      threeEighthesIntegrator0.clearStepHandlers();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, (-1.0), 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      threeEighthesIntegrator0.getCurrentStepStart();
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 9.848636053777669E237, 0.0, (-1224.389523311), 0.0).when(eventHandler1).g(anyDouble() , any(double[].class));
      threeEighthesIntegrator0.addEventHandler(eventHandler1, (-634.650718209), (-1.0), 222);
      threeEighthesIntegrator0.getMaxEvaluations();
      threeEighthesIntegrator0.addEventHandler(eventHandler0, 4728.61983, 4728.61983, 1);
      // Undeclared exception!
      threeEighthesIntegrator0.integrate(expandableStatefulODE0, 0.0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 4728.61983;
      doubleArray0[1] = 1000.0;
      doubleArray0[2] = 1000.0;
      doubleArray0[3] = 4728.61983;
      doubleArray0[4] = 4728.61983;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1000.0, 4728.61983, doubleArray0, doubleArray0);
      highamHall54Integrator0.setStepSizeControl(1000.0, 1000.0, doubleArray0, doubleArray0);
      highamHall54Integrator0.getOrder();
      highamHall54Integrator0.getCurrentSignedStepsize();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double double0 = 1.0;
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1.0, (-1.0), doubleArray0, doubleArray0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      highamHall54Integrator0.getEvaluations();
      highamHall54Integrator0.setMaxEvaluations(0);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      highamHall54Integrator0.clearStepHandlers();
      highamHall54Integrator0.getMaxEvaluations();
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 1.0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (-1.0);
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = Double.NaN;
      doubleArray1[5] = (double) 0;
      doubleArray1[6] = Double.NaN;
      doubleArray1[7] = (double) 0;
      doubleArray1[8] = (-1.0);
      try { 
        highamHall54Integrator0.computeDerivatives(Double.NaN, doubleArray0, doubleArray1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // illegal state: maximal count (0) exceeded
         //
         verifyException("org.apache.commons.math3.util.Incrementor$1", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(170, 0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      FirstOrderConverter firstOrderConverter1 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter1);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, (-1.0), 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      threeEighthesIntegrator0.getCurrentStepStart();
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler1).g(anyDouble() , any(double[].class));
      threeEighthesIntegrator0.addEventHandler(eventHandler1, (-634.650718209), (-1.0), 222);
      threeEighthesIntegrator0.addEventHandler(eventHandler0, 4728.61983, 4728.61983, 1);
      // Undeclared exception!
      threeEighthesIntegrator0.integrate(expandableStatefulODE0, 0.0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      expandableStatefulODE0.setTime((-344.6388912911308));
      // Undeclared exception!
      threeEighthesIntegrator0.integrate(expandableStatefulODE0, 0.0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-125.2146760224), (-1492.60685), (-1492.60685), (-1492.60685));
      graggBulirschStoerIntegrator0.setOrderControl(0, (-125.2146760224), 0);
      graggBulirschStoerIntegrator0.setControlFactors((-1.0), (-125.2146760224), 0, (-1.0));
      graggBulirschStoerIntegrator0.setControlFactors((-125.2146760224), (-0.7853981633974483), (-0.7853981633974483), 0);
      graggBulirschStoerIntegrator0.clearEventHandlers();
      Collection<StepHandler> collection0 = new LinkedList<StepHandler>();
      graggBulirschStoerIntegrator0.getEventHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      graggBulirschStoerIntegrator0.setInitialStepSize(0.0);
      graggBulirschStoerIntegrator0.getMaxEvaluations();
      graggBulirschStoerIntegrator0.setStabilityCheck(true, 0, 2, 862.84);
      graggBulirschStoerIntegrator0.setStabilityCheck(false, (-62), 127, 0.0);
      double[] doubleArray0 = new double[0];
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(2, (-125.2146760224), 2607.0, doubleArray0, doubleArray0);
      adamsMoultonIntegrator0.setStarterIntegrator(graggBulirschStoerIntegrator0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      SecondaryEquations secondaryEquations0 = mock(SecondaryEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondaryEquations0).getDimension();
      expandableStatefulODE0.addSecondaryEquations(secondaryEquations0);
      // Undeclared exception!
      try { 
        adamsMoultonIntegrator0.integrate(expandableStatefulODE0, 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one column
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(211.743281);
      ThreeEighthesIntegrator threeEighthesIntegrator1 = new ThreeEighthesIntegrator((-2672.27754160353));
      threeEighthesIntegrator1.clearEventHandlers();
      threeEighthesIntegrator0.getCurrentStepStart();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(2937500.0, 2937500.0, (-3127.53736), 211.743281);
      graggBulirschStoerIntegrator0.setOrderControl((-1014), (-2672.27754160353), 1.0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator((-0.173363167204169));
      threeEighthesIntegrator0.clearEventHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = 1809.56;
      doubleArray1[1] = (-0.173363167204169);
      doubleArray1[2] = (-0.173363167204169);
      doubleArray1[3] = (-0.173363167204169);
      doubleArray1[4] = (-0.173363167204169);
      doubleArray1[5] = (-0.173363167204169);
      doubleArray1[6] = (-0.173363167204169);
      doubleArray1[7] = (-198.5729729432804);
      doubleArray1[8] = (-0.173363167204169);
      try { 
        threeEighthesIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, (-0.173363167204169), doubleArray0, 1809.56, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 9 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double double0 = 2483.0;
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(2483.0);
      midpointIntegrator0.getEventHandlers();
      // Undeclared exception!
      try { 
        midpointIntegrator0.integrate((ExpandableStatefulODE) null, 2483.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      double double0 = (-617.55683);
      double double1 = (-488.083);
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-488.083));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      try { 
        midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1.65748157925005E114, doubleArray0, 1.65748157925005E114, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // too small integration interval: length = 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-12.067630896875913));
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = (-1.0);
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1.0), (-1.0), doubleArray0, doubleArray0);
      DormandPrince853Integrator dormandPrince853Integrator1 = new DormandPrince853Integrator((-1.0), 9.094947017729282E-10, 1.9722796756250217E-108, 9.094947017729282E-10);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(eventHandler0).toString();
      dormandPrince853Integrator1.addEventHandler(eventHandler0, (-1.0), (-1.0), (-373), (UnivariateSolver) null);
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 9.094947017729282E-10;
      doubleArray1[1] = (-1.0);
      doubleArray1[2] = 9.094947017729282E-10;
      doubleArray1[3] = (-3165.4);
      dormandPrince853Integrator1.setStepSizeControl((-3165.4), (-1.0), doubleArray0, doubleArray1);
      dormandPrince853Integrator1.getEventHandlers();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double double0 = 0.0;
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      threeEighthesIntegrator0.integrate(expandableStatefulODE0, 0.0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-125.2146760224), (-1492.60685), (-1492.60685), (-1492.60685));
      graggBulirschStoerIntegrator0.setOrderControl(0, (-125.2146760224), 0);
      graggBulirschStoerIntegrator0.setControlFactors((-1.0), (-125.2146760224), 0, (-1.0));
      graggBulirschStoerIntegrator0.setControlFactors((-125.2146760224), (-0.7853981633974483), (-0.7853981633974483), 0);
      graggBulirschStoerIntegrator0.clearEventHandlers();
      graggBulirschStoerIntegrator0.getStepHandlers();
      graggBulirschStoerIntegrator0.getEventHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      graggBulirschStoerIntegrator0.setInitialStepSize(0.0);
      graggBulirschStoerIntegrator0.setStabilityCheck(true, 0, 2, 862.84);
      graggBulirschStoerIntegrator0.setStabilityCheck(false, (-62), 127, 0.0);
      double[] doubleArray0 = new double[0];
      AdamsMoultonIntegrator adamsMoultonIntegrator0 = new AdamsMoultonIntegrator(2, (-125.2146760224), 2607.0, doubleArray0, doubleArray0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      try { 
        adamsMoultonIntegrator0.integrate(expandableStatefulODE0, 1000.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // matrix must have at least one column
         //
         verifyException("org.apache.commons.math3.linear.Array2DRowRealMatrix", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-125.2146760224), (-1492.60685), (-1492.60685), (-1492.60685));
      graggBulirschStoerIntegrator0.setOrderControl((-209), (-1492.60685), 0);
      graggBulirschStoerIntegrator0.setInitialStepSize((-2048.7));
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 76);
      graggBulirschStoerIntegrator0.getName();
      graggBulirschStoerIntegrator0.getCurrentStepStart();
      graggBulirschStoerIntegrator0.setMaxEvaluations(76);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double double0 = (-1284.343345245);
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-1284.343345245));
      double double1 = 133.31;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1284.343345245), (-1284.343345245), 133.31, 232.2);
      boolean boolean0 = false;
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(2260).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 232.2;
      doubleArray0[1] = (-1284.343345245);
      doubleArray0[2] = 133.31;
      doubleArray0[0] = (-1284.343345245);
      double double2 = (-56.1452895177049);
      double[] doubleArray1 = new double[0];
      try { 
        graggBulirschStoerIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 1801.1672252, doubleArray1, 1801.1672252, doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 0 != 4,520
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double double0 = 2412.3;
      GillIntegrator gillIntegrator0 = new GillIntegrator(2412.3);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      gillIntegrator0.getMaxEvaluations();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      doReturn(0.0, 0.0, 0.0, 0.0, 0.0).when(eventHandler0).g(anyDouble() , any(double[].class));
      gillIntegrator0.addEventHandler(eventHandler0, (-1552.067), 2412.3, 1591);
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      gillIntegrator0.clearStepHandlers();
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      gillIntegrator0.integrate(expandableStatefulODE0, 2412.3);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.9, (-3721.3917198), (-3721.3917198), 1.0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, (-3721.3917198), 0.9, (-4126));
      boolean boolean0 = true;
      int int0 = (-373);
      graggBulirschStoerIntegrator0.setInitialStepSize((-3721.3917198));
      graggBulirschStoerIntegrator0.setOrderControl((-4126), (-4126), 1.0);
      graggBulirschStoerIntegrator0.setMaxEvaluations((-373));
      graggBulirschStoerIntegrator0.clearStepHandlers();
      int int1 = 1170;
      double[] doubleArray0 = new double[0];
      graggBulirschStoerIntegrator0.clearStepHandlers();
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.computeDerivatives(1170, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double double0 = (-582.764146262318);
      GillIntegrator gillIntegrator0 = new GillIntegrator((-582.764146262318));
      EventHandler eventHandler0 = null;
      double double1 = (-1.0);
      double double2 = 703.280096472286;
      gillIntegrator0.getMaxEvaluations();
      int int0 = 0;
      RiddersSolver riddersSolver0 = new RiddersSolver(703.280096472286);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-582.764146262318);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      // Undeclared exception!
      try { 
        expandableStatefulODE0.setSecondaryState(Integer.MAX_VALUE, doubleArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483647, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator((-1131.1454636089466), 0.0, 1.0, 0.0);
      dormandPrince853Integrator0.getCurrentSignedStepsize();
      dormandPrince853Integrator0.getMaxEvaluations();
      dormandPrince853Integrator0.clearEventHandlers();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(Double.NaN, 0.0, 0.0, Integer.MAX_VALUE);
      // Undeclared exception!
      try { 
        graggBulirschStoerIntegrator0.integrate((ExpandableStatefulODE) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double double0 = (-1664.17166579);
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator((-1664.17166579));
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      DummyStepHandler dummyStepHandler0 = DummyStepHandler.getInstance();
      midpointIntegrator0.addStepHandler(dummyStepHandler0);
      // Undeclared exception!
      midpointIntegrator0.integrate(expandableStatefulODE0, (-1664.17166579));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-426.2229734232741);
      doubleArray0[1] = (-426.2229734232741);
      doubleArray0[2] = (-426.2229734232741);
      doubleArray0[3] = (-426.2229734232741);
      doubleArray0[4] = (-426.2229734232741);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-426.2229734232741), (-426.2229734232741), doubleArray0, doubleArray0);
      highamHall54Integrator0.getOrder();
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-754.60724785516), 0.0, doubleArray0, doubleArray0);
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler0, 0.0, (double) 5, 5);
      graggBulirschStoerIntegrator0.setOrderControl(0, (-426.2229734232741), 5);
      graggBulirschStoerIntegrator0.setStabilityCheck(false, 5, 5, (-426.2229734232741));
      graggBulirschStoerIntegrator0.setStepSizeControl(0.0, (-426.2229734232741), (-426.2229734232741), (double) 0);
      BracketingNthOrderBrentSolver bracketingNthOrderBrentSolver0 = new BracketingNthOrderBrentSolver();
      bracketingNthOrderBrentSolver0.getMaxEvaluations();
      highamHall54Integrator0.addEventHandler((EventHandler) null, (-426.2229734232741), (-754.60724785516), 171, (UnivariateSolver) bracketingNthOrderBrentSolver0);
      graggBulirschStoerIntegrator0.setInterpolationControl(false, 1);
      graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 2398.8161552;
      doubleArray0[2] = 2398.8161552;
      doubleArray0[3] = 2398.8161552;
      doubleArray0[4] = 2398.8161552;
      doubleArray0[5] = 15.0;
      doubleArray0[6] = 15.0;
      doubleArray0[7] = 15.0;
      doubleArray0[8] = 2398.8161552;
      DormandPrince853Integrator dormandPrince853Integrator0 = new DormandPrince853Integrator(2398.8161552, 15.0, doubleArray0, doubleArray0);
      dormandPrince853Integrator0.getEventHandlers();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double double0 = 0.0;
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0.0);
      midpointIntegrator0.clearStepHandlers();
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray0 = new double[0];
      double double1 = (-617.55683);
      // Undeclared exception!
      midpointIntegrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 4111.063, doubleArray0, (-617.55683), doubleArray0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(Double.NaN, 385.52859487, Double.NaN, 0.0);
      highamHall54Integrator0.getOrder();
      highamHall54Integrator0.clearEventHandlers();
      assertEquals(Double.NaN, highamHall54Integrator0.getMinStep(), 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(0.0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      // Undeclared exception!
      try { 
        midpointIntegrator0.computeDerivatives(0.0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ThreeEighthesIntegrator threeEighthesIntegrator0 = new ThreeEighthesIntegrator(0.0);
      threeEighthesIntegrator0.addStepHandler((StepHandler) null);
      threeEighthesIntegrator0.clearEventHandlers();
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentSignedStepsize(), 0.01);
      assertEquals(Double.NaN, threeEighthesIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, doubleArray0, doubleArray0);
      FixedStepHandler fixedStepHandler0 = mock(FixedStepHandler.class, new ViolatedAssumptionAnswer());
      IllinoisSolver illinoisSolver0 = new IllinoisSolver((-1919.03040388193));
      graggBulirschStoerIntegrator0.addEventHandler((EventHandler) null, 3118.65443553, 2.2404374302607883, 1, (UnivariateSolver) illinoisSolver0);
      StepNormalizerMode stepNormalizerMode0 = StepNormalizerMode.INCREMENT;
      StepNormalizer stepNormalizer0 = new StepNormalizer(0.0, fixedStepHandler0, stepNormalizerMode0);
      graggBulirschStoerIntegrator0.addStepHandler(stepNormalizer0);
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator((-0.2014737481327276), 0.0, 0.0, Double.NaN);
      highamHall54Integrator0.getOrder();
      graggBulirschStoerIntegrator0.getCurrentSignedStepsize();
      double[] doubleArray1 = new double[1];
      doubleArray1[0] = (-0.2014737481327276);
      // Undeclared exception!
      try { 
        highamHall54Integrator0.computeDerivatives(0.0, doubleArray1, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MidpointIntegrator midpointIntegrator0 = new MidpointIntegrator(143.444880245);
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.94, 143.444880245, 143.444880245, 0.94);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      ExpandableStatefulODE expandableStatefulODE0 = new ExpandableStatefulODE(firstOrderConverter0);
      // Undeclared exception!
      graggBulirschStoerIntegrator0.integrate(expandableStatefulODE0, 4.450312892752409);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      double double0 = 3.627172425759641E-305;
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 3.627172425759641E-305;
      doubleArray0[1] = 3.627172425759641E-305;
      doubleArray0[2] = 3.627172425759641E-305;
      doubleArray0[3] = 3.627172425759641E-305;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(3.627172425759641E-305, 3.627172425759641E-305, doubleArray0, doubleArray0);
      double double1 = 82.9;
      dormandPrince54Integrator0.setMinReduction(82.9);
      dormandPrince54Integrator0.getStepHandlers();
      int int0 = Integer.MAX_VALUE;
      // Undeclared exception!
      try { 
        dormandPrince54Integrator0.initializeStep(true, Integer.MAX_VALUE, doubleArray0, 3.6634441500172377E-305, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      double double0 = 0.0;
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(0.0, 0.0, 0.0, 0.0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      dormandPrince54Integrator0.setMaxGrowth(0);
      doubleArray0[7] = 953.3;
      doubleArray0[8] = (double) 0;
      // Undeclared exception!
      try { 
        dormandPrince54Integrator0.initializeStep(false, 0, doubleArray0, Double.NaN, doubleArray0, doubleArray0, doubleArray0, doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator(2005.498847, 2005.498847, 1554.2140477232, (-1534.41834779));
      dormandPrince54Integrator0.getCurrentStepStart();
      int int0 = dormandPrince54Integrator0.getEvaluations();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1554.2140477232;
      dormandPrince54Integrator0.setStepSizeControl(1972.0742113, 1.0, doubleArray0, doubleArray0);
      dormandPrince54Integrator0.setMinReduction((-1041.17118817107));
      dormandPrince54Integrator0.getStepHandlers();
      dormandPrince54Integrator0.getStepHandlers();
      int int1 = dormandPrince54Integrator0.getOrder();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ClassicalRungeKuttaIntegrator classicalRungeKuttaIntegrator0 = new ClassicalRungeKuttaIntegrator((-1971.5161));
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-1.0), (-1971.5161), (-1971.5161), 932.77329781306);
      classicalRungeKuttaIntegrator0.clearStepHandlers();
      graggBulirschStoerIntegrator0.setStabilityCheck(false, (-3816), (-3816), Double.NaN);
      classicalRungeKuttaIntegrator0.addEventHandler((EventHandler) null, (-0.022355307863886294), (-1971.5161), (-394));
      graggBulirschStoerIntegrator0.addEventHandler((EventHandler) null, 0.0, 932.77329781306, 0);
      assertEquals(44.401757848085246, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
      
      double double0 = classicalRungeKuttaIntegrator0.getCurrentSignedStepsize();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, classicalRungeKuttaIntegrator0.getCurrentStepStart(), 0.01);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-1651.659168), (-1651.659168), (-1651.659168), 0.0);
      dormandPrince54Integrator0.getStepHandlers();
      EventHandler eventHandler0 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      dormandPrince54Integrator0.addEventHandler(eventHandler0, 0.0, (-1651.659168), 0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-1651.659168);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (-1651.659168);
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = 0.0;
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator(0.0, 0.0, doubleArray0, doubleArray0);
      EventHandler eventHandler1 = mock(EventHandler.class, new ViolatedAssumptionAnswer());
      MullerSolver2 mullerSolver2_0 = new MullerSolver2();
      graggBulirschStoerIntegrator0.addEventHandler(eventHandler1, (-545.4), 0.0, 0, (UnivariateSolver) mullerSolver2_0);
      dormandPrince54Integrator0.setInitialStepSize((-1651.659168));
      HighamHall54Integrator highamHall54Integrator0 = new HighamHall54Integrator(1000.0, (-4.436036387594894), 0.0, 1968.3207713693057);
      highamHall54Integrator0.getOrder();
      dormandPrince54Integrator0.getName();
      highamHall54Integrator0.setMaxEvaluations(0);
      SecondOrderDifferentialEquations secondOrderDifferentialEquations0 = mock(SecondOrderDifferentialEquations.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(secondOrderDifferentialEquations0).getDimension();
      FirstOrderConverter firstOrderConverter0 = new FirstOrderConverter(secondOrderDifferentialEquations0);
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (-1651.659168);
      doubleArray1[1] = (double) 5;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = 351.97;
      doubleArray1[4] = (double) 5;
      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) firstOrderConverter0, 0.0, doubleArray0, 351.97, doubleArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8 != 0
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DormandPrince54Integrator dormandPrince54Integrator0 = new DormandPrince54Integrator((-1063.612927841), (-1063.612927841), 0.0, (-1063.612927841));
      dormandPrince54Integrator0.clearStepHandlers();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1063.612927841);
      doubleArray0[2] = (-1063.612927841);
      doubleArray0[3] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (-1063.612927841);
      doubleArray0[6] = 0.0;
      // Undeclared exception!
      try { 
        dormandPrince54Integrator0.integrate((FirstOrderDifferentialEquations) null, Double.NaN, doubleArray0, (-266.5375193426), doubleArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.math3.ode.AbstractIntegrator", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      GraggBulirschStoerIntegrator graggBulirschStoerIntegrator0 = new GraggBulirschStoerIntegrator((-125.2146760224), (-1492.60685), (-1492.60685), (-1492.60685));
      graggBulirschStoerIntegrator0.setOrderControl(0, (-125.2146760224), 0);
      graggBulirschStoerIntegrator0.setInitialStepSize(0.0);
      graggBulirschStoerIntegrator0.setInterpolationControl(true, 76);
      graggBulirschStoerIntegrator0.getName();
      graggBulirschStoerIntegrator0.getCurrentStepStart();
      graggBulirschStoerIntegrator0.setMaxEvaluations(0);
      assertEquals(432.3150276726047, graggBulirschStoerIntegrator0.getCurrentSignedStepsize(), 0.01);
  }
}
