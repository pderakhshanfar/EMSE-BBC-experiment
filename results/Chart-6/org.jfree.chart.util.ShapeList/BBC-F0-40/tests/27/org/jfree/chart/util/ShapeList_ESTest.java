/*
 * This file was automatically generated by EvoSuite
 * Fri Mar 05 17:21:03 GMT 2021
 */

package org.jfree.chart.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Polygon;
import java.awt.Shape;
import java.awt.geom.Rectangle2D;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jfree.chart.util.AbstractObjectList;
import org.jfree.chart.util.ShapeList;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ShapeList_ESTest extends ShapeList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ShapeList shapeList0 = new ShapeList();
      Polygon polygon0 = new Polygon();
      shapeList0.setShape(0, polygon0);
      shapeList0.getShape(0);
      assertEquals(1, shapeList0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ShapeList shapeList0 = new ShapeList();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      // Undeclared exception!
      try { 
        shapeList0.setShape(Integer.MAX_VALUE, rectangle2D_Double0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ShapeList shapeList0 = new ShapeList();
      shapeList0.set(37, "m?Cd2");
      // Undeclared exception!
      try { 
        shapeList0.getShape(37);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to java.awt.Shape
         //
         verifyException("org.jfree.chart.util.ShapeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ShapeList shapeList0 = new ShapeList();
      ShapeList shapeList1 = new ShapeList();
      shapeList1.set(1671, shapeList0);
      shapeList0.set(1671, shapeList1);
      // Undeclared exception!
      shapeList0.equals(shapeList1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ShapeList shapeList0 = new ShapeList();
      ShapeList shapeList1 = new ShapeList();
      boolean boolean0 = shapeList0.equals(shapeList1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ShapeList shapeList0 = new ShapeList();
      boolean boolean0 = shapeList0.equals(shapeList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ShapeList shapeList0 = new ShapeList();
      boolean boolean0 = shapeList0.equals("org.jfree.chart.util.ShapeList");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ShapeList shapeList0 = new ShapeList();
      // Undeclared exception!
      try { 
        shapeList0.setShape((-1), (Shape) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ShapeList shapeList0 = new ShapeList();
      Shape shape0 = shapeList0.getShape((-2461));
      assertNull(shape0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ShapeList shapeList0 = new ShapeList();
      shapeList0.hashCode();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ShapeList shapeList0 = new ShapeList();
      ShapeList shapeList1 = (ShapeList)shapeList0.clone();
      assertEquals(8, AbstractObjectList.DEFAULT_INITIAL_CAPACITY);
  }
}
