/*
 * This file was automatically generated by EvoSuite
 * Tue Aug 17 16:00:52 GMT 2021
 */

package org.jfree.chart.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Polygon;
import java.awt.Rectangle;
import java.awt.Shape;
import java.awt.geom.AffineTransform;
import java.awt.geom.Line2D;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jfree.chart.util.SerialUtilities;
import org.jfree.chart.util.ShapeList;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ShapeList_ESTest extends ShapeList_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ShapeList shapeList0 = new ShapeList();
      shapeList0.clear();
      shapeList0.clone();
      shapeList0.clone();
      shapeList0.clone();
      shapeList0.clone();
      int int0 = 65535;
      Object object0 = new Object();
      shapeList0.set(65535, object0);
      Object object1 = shapeList0.clone();
      shapeList0.equals(object0);
      // Undeclared exception!
      shapeList0.equals(object1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ShapeList shapeList0 = new ShapeList();
      int int0 = 1;
      ObjectInputStream objectInputStream0 = mock(ObjectInputStream.class, new ViolatedAssumptionAnswer());
      ShapeList shapeList1 = new ShapeList();
      shapeList0.set(1, shapeList1);
      shapeList1.set(1, shapeList0);
      shapeList0.equals(shapeList1);
      Object object0 = null;
      shapeList0.equals(object0);
      SerialUtilities.readShape(objectInputStream0);
      Object object1 = shapeList0.clone();
      shapeList0.set(int0, object1);
      shapeList0.clone();
      int int1 = 2;
      Object object2 = shapeList1.get(int0);
      shapeList1.set(int1, object2);
      shapeList0.clone();
      shapeList1.clone();
      shapeList0.clone();
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ShapeList shapeList0 = new ShapeList();
      ShapeList shapeList1 = (ShapeList)shapeList0.clone();
      ShapeList shapeList2 = (ShapeList)shapeList0.clone();
      shapeList0.equals(shapeList2);
      Point2D.Float point2D_Float0 = new Point2D.Float();
      shapeList1.equals(point2D_Float0);
      point2D_Float0.clone();
      Line2D.Float line2D_Float0 = new Line2D.Float(point2D_Float0, point2D_Float0);
      line2D_Float0.setLine((Point2D) point2D_Float0, (Point2D) point2D_Float0);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      rectangle2D_Double0.y = (double) 0;
      shapeList1.clone();
      shapeList1.clone();
      shapeList1.clone();
      shapeList0.setShape(0, rectangle2D_Double0);
      shapeList0.getShape(0);
      shapeList0.hashCode();
      ShapeList shapeList3 = (ShapeList)shapeList0.clone();
      shapeList0.set(0, shapeList3);
      shapeList0.clone();
      // Undeclared exception!
      try { 
        shapeList0.getShape(0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jfree.chart.util.ShapeList cannot be cast to java.awt.Shape
         //
         verifyException("org.jfree.chart.util.ShapeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ShapeList shapeList0 = new ShapeList();
      boolean boolean0 = shapeList0.equals(shapeList0);
      shapeList0.hashCode();
      Line2D.Double line2D_Double0 = new Line2D.Double();
      Rectangle rectangle0 = line2D_Double0.getBounds();
      boolean boolean1 = shapeList0.equals(rectangle0);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ShapeList shapeList0 = new ShapeList();
      shapeList0.clear();
      shapeList0.equals("xK&x:&=imK[vvJz+h");
      Rectangle rectangle0 = new Rectangle();
      shapeList0.setShape(0, rectangle0);
      shapeList0.getShape(0);
      shapeList0.clone();
      ObjectInputStream objectInputStream0 = mock(ObjectInputStream.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(objectInputStream0).readBoolean();
      ShapeList shapeList1 = new ShapeList();
      shapeList0.set(0, shapeList1);
      // Undeclared exception!
      try { 
        SerialUtilities.readShape(objectInputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ShapeList shapeList0 = new ShapeList();
      shapeList0.hashCode();
      ShapeList shapeList1 = new ShapeList();
      shapeList0.equals(shapeList1);
      shapeList0.getShape(0);
      shapeList0.setShape(1, (Shape) null);
      shapeList0.setShape(0, (Shape) null);
      shapeList0.getShape((-221));
      shapeList0.getShape(1);
      shapeList1.equals((Object) null);
      shapeList1.clone();
      shapeList0.hashCode();
      shapeList0.hashCode();
      shapeList0.equals((Object) null);
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float();
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double();
      Rectangle2D rectangle2D0 = rectangle2D_Double0.getBounds2D();
      Rectangle2D rectangle2D1 = rectangle2D_Float0.createUnion(rectangle2D0);
      // Undeclared exception!
      try { 
        shapeList1.setShape((-2314), rectangle2D1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ShapeList shapeList0 = new ShapeList();
      AffineTransform affineTransform0 = AffineTransform.getQuadrantRotateInstance(399, (double) 1, 1.0);
      Line2D.Double line2D_Double0 = new Line2D.Double(1.0, 1771.8819082004, 0.0, 0.0);
      Shape shape0 = affineTransform0.createTransformedShape(line2D_Double0);
      shapeList0.setShape(1, shape0);
      shapeList0.clone();
      int[] intArray0 = new int[1];
      intArray0[0] = 399;
      Polygon polygon0 = null;
      try {
        polygon0 = new Polygon(intArray0, intArray0, 8);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // npoints > xpoints.length || npoints > ypoints.length
         //
         verifyException("java.awt.Polygon", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ShapeList shapeList0 = new ShapeList();
      shapeList0.hashCode();
      Shape shape0 = shapeList0.getShape(0);
      assertNull(shape0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ShapeList shapeList0 = new ShapeList();
      shapeList0.hashCode();
      shapeList0.clear();
      shapeList0.hashCode();
      int int0 = (-1090);
      shapeList0.clone();
      // Undeclared exception!
      try { 
        SerialUtilities.writeShape((Shape) null, (ObjectOutputStream) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null 'stream' argument.
         //
         verifyException("org.jfree.chart.util.SerialUtilities", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ShapeList shapeList0 = new ShapeList();
      Rectangle2D.Float rectangle2D_Float0 = new Rectangle2D.Float(0.0F, 0.0F, (-772), 0.0F);
      Rectangle2D rectangle2D0 = rectangle2D_Float0.getBounds2D();
      // Undeclared exception!
      try { 
        shapeList0.setShape((-772), rectangle2D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Requires index >= 0.
         //
         verifyException("org.jfree.chart.util.AbstractObjectList", e);
      }
  }
}
