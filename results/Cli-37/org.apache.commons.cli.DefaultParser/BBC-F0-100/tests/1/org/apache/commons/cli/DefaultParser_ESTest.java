/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 21:22:09 GMT 2021
 */

package org.apache.commons.cli;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.Properties;
import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.DefaultParser;
import org.apache.commons.cli.Option;
import org.apache.commons.cli.OptionGroup;
import org.apache.commons.cli.Options;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DefaultParser_ESTest extends DefaultParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      defaultParser0.handleConcatenatedOptions("");
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addOption("U", "-U", true, "-U");
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-U";
      stringArray0[1] = "-U";
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing argument for option: U
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addRequiredOption("4", "4", false, "4");
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "--=";
      options0.addOption("TUys", "vGO", false, "yes");
      try { 
        defaultParser0.parse(options1, stringArray0, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Ambiguous option: '--'  (could be: '4', 'vGO')
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-=@fQBxXsg0#q$W0J7e";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0, true);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("U", "org.apache.commons.cli.OptionGroup", true, "Unrecognized option: ");
      option0.addValueForProcessing("EGKqrD3GI^'yu{%c}*");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-Unrecognized option: ";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add value, list full.
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addOption("U", "-U", true, "-U");
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[3];
      options0.addOption("U", "--=", false, "--=");
      stringArray0[0] = "U";
      stringArray0[1] = "-U";
      stringArray0[2] = "--=";
      Properties properties0 = new Properties();
      try { 
        defaultParser0.parse(options1, stringArray0, properties0, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Ambiguous option: '--'  (could be: '-U', '--=')
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Properties properties0 = new Properties();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "true";
      stringArray0[1] = "true";
      stringArray0[2] = "true";
      stringArray0[3] = "-The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      try { 
        defaultParser0.parse(options0, stringArray0, properties0, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. 
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("U", "org.apache.commons.cli.OptionGroup", true, "Unrecognized option: ");
      option0.addValueForProcessing("EGKqrD3GI^'yu{%c}*");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-Unrecognized option: ";
      DefaultParser defaultParser0 = new DefaultParser();
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0, properties0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add value, list full.
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Properties properties0 = new Properties();
      properties0.put(optionGroup0, "true");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "1";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0, properties0, true);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.cli.OptionGroup cannot be cast to java.lang.String
         //
         verifyException("java.util.Properties", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[9];
      stringArray0[0] = ",}0-@]&4l`";
      stringArray0[1] = "U";
      stringArray0[2] = "-=fuBAa";
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0, properties0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("U", "org.apache.commons.cli.Optionkroup", true, "Unrecognized option: ");
      option0.addValueForProcessing("EGKqrD3GI^'yu{%c}*");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-Unrecognized option: ";
      DefaultParser defaultParser0 = new DefaultParser();
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0, properties0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add value, list full.
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[7];
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        defaultParser0.parse((Options) null, stringArray0, properties0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      List<Option> list0 = options0.helpOptions();
      Properties properties0 = new Properties();
      properties0.put(options0, list0);
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0, properties0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.commons.cli.Options cannot be cast to java.lang.String
         //
         verifyException("java.util.Properties", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addOption((String) null, "-U", true, "U");
      options1.addOption((String) null, "lRFi5m", true, "U");
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "--=";
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Ambiguous option: '--'  (could be: '-U', 'lRFi5m')
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[9];
      stringArray0[0] = ",}0-@]&4l`";
      stringArray0[1] = "U";
      stringArray0[2] = "-=fuBAa";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("U", "org.apache.commons.cli.Optionkroup", true, "Unrecognized option: ");
      option0.addValueForProcessing("EGKqrD3GI^'yu{%c}*");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-Unrecognized option: ";
      DefaultParser defaultParser0 = new DefaultParser();
      // Undeclared exception!
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Cannot add value, list full.
         //
         verifyException("org.apache.commons.cli.Option", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      defaultParser0.parse(options0, (String[]) null, (Properties) null);
      try { 
        defaultParser0.handleConcatenatedOptions("--Owo}T?");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: --Owo}T?
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      // Undeclared exception!
      try { 
        defaultParser0.handleConcatenatedOptions("' was specified but an option from this group ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Properties properties0 = new Properties();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-1";
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0, properties0, true);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      Properties properties0 = new Properties();
      CommandLine commandLine0 = defaultParser0.parse(options0, (String[]) null, properties0, false);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("U", "org.apache.commons.cli.OptionGroup", true, "Unrecognized option: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      String[] stringArray0 = new String[3];
      DefaultParser defaultParser0 = new DefaultParser();
      Properties properties0 = new Properties();
      // Undeclared exception!
      try { 
        defaultParser0.parse(options1, stringArray0, properties0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addOption("", "", true, "");
      DefaultParser defaultParser0 = new DefaultParser();
      Properties properties0 = new Properties();
      defaultParser0.parse(options1, (String[]) null, properties0);
      defaultParser0.handleConcatenatedOptions("--");
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addOption("U", "U");
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-UnrecogniRd option: ";
      defaultParser0.parse(options1, stringArray0, true);
      defaultParser0.handleConcatenatedOptions("-UnrecogniRd option: ");
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Options options0 = new Options();
      Option option0 = new Option("", "", true, "");
      OptionGroup optionGroup0 = new OptionGroup();
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      Options options1 = options0.addOptionGroup(optionGroup1);
      DefaultParser defaultParser0 = new DefaultParser();
      Properties properties0 = new Properties();
      optionGroup0.setRequired(true);
      defaultParser0.parse(options1, (String[]) null, properties0);
      defaultParser0.handleConcatenatedOptions("--fU");
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Options options0 = new Options();
      OptionGroup optionGroup0 = new OptionGroup();
      Option option0 = new Option("U", "org.apache.commons.cli.OptionGroup", true, "Unrecognized option: ");
      OptionGroup optionGroup1 = optionGroup0.addOption(option0);
      options0.addOptionGroup(optionGroup1);
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-Unrecognized option: ";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      Options options1 = options0.addOption("U", true, "U");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "U";
      stringArray0[1] = "b7+A`;\"_'";
      stringArray0[2] = "U";
      stringArray0[3] = "btbI";
      stringArray0[4] = "-U=Qrec9^ogR$Nti1o";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addOption("U", "U");
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "U";
      stringArray0[1] = "b7+A`;\"_'";
      stringArray0[2] = "U";
      stringArray0[3] = "btbI";
      stringArray0[4] = "-U=Qrec9^ogR$Nti1o";
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -U=Qrec9^ogR$Nti1o
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "U";
      stringArray0[1] = "b7+A`;\"_'";
      stringArray0[2] = "U";
      stringArray0[3] = "btbI";
      stringArray0[4] = "-U=Qrec9^ogR$Nti1o";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -U=Qrec9^ogR$Nti1o
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addOption("3", "3", false, "-3[>:cD~s'^xrf^");
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-3[>:cD~s'^xrf^";
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -3[>:cD~s'^xrf^
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Options options0 = new Options();
      options0.addOption("3", "3", true, "-3[>:cD~s'^xrf^");
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-3[>:cD~s'^xrf^";
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addRequiredOption("4", "4", false, "4");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "--=";
      DefaultParser defaultParser0 = new DefaultParser();
      try { 
        defaultParser0.parse(options1, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: --=
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Options options0 = new Options();
      options0.addOption("U", "-U", true, "-U");
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[3];
      options0.addOption("U", "--=", false, "--=");
      stringArray0[0] = "U";
      stringArray0[1] = "-U";
      stringArray0[2] = "--=";
      Properties properties0 = new Properties();
      try { 
        defaultParser0.parse(options0, stringArray0, properties0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Ambiguous option: '--'  (could be: '-U', '--=')
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Either opt or longOpt must be specified";
      stringArray0[1] = " ";
      stringArray0[2] = "+B_.x1$z%w";
      stringArray0[3] = "yes";
      stringArray0[4] = "-[+=@fQBxXsgq$W0J7eX";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: -[+=@fQBxXsgq$W0J7eX
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Options options0 = new Options();
      options0.addRequiredOption("U", "Unrecognized option: ", true, "-U");
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[14];
      stringArray0[0] = "-Unrecognized option: ";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Options options0 = new Options();
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[11];
      stringArray0[0] = "U";
      stringArray0[1] = "U";
      stringArray0[2] = "U";
      stringArray0[3] = "--U";
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unrecognized option: --U
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Options options0 = new Options();
      options0.addOption("U", "U", true, "-U");
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-U";
      stringArray0[1] = "p,l E}Y0Py9Ni7^";
      stringArray0[2] = "-U";
      stringArray0[3] = "U";
      stringArray0[4] = "U";
      stringArray0[5] = "U";
      stringArray0[6] = "-U";
      stringArray0[7] = "---Unrecognize= option: ";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Options options0 = new Options();
      Options options1 = options0.addRequiredOption("U", "U", true, "U");
      Options options2 = options1.addRequiredOption((String) null, "Unrecognized option: ", false, "U");
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "U";
      stringArray0[1] = "U";
      stringArray0[2] = "-U";
      stringArray0[3] = "--,|0-E9t&I8L";
      stringArray0[4] = "Unrecognized option: ";
      stringArray0[5] = "Unrecognized option: ";
      stringArray0[6] = "-U";
      stringArray0[7] = "-Unrecognized option: ";
      try { 
        defaultParser0.parse(options2, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing argument for option: U
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      stringArray0[1] = "-";
      // Undeclared exception!
      try { 
        defaultParser0.parse(options0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "yes";
      stringArray0[1] = "--";
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0);
      assertNotNull(commandLine0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Options options0 = new Options();
      options0.addOption("", "", true, "");
      DefaultParser defaultParser0 = new DefaultParser();
      Properties properties0 = new Properties();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "--=";
      stringArray0[3] = "";
      stringArray0[4] = "--=";
      stringArray0[5] = "--=";
      defaultParser0.parse(options0, stringArray0, properties0);
      defaultParser0.handleConcatenatedOptions("--=");
      defaultParser0.handleConcatenatedOptions("---The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ");
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Options options1 = options0.addRequiredOption("", "", true, "");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "-The addValue method is not intended for client use. Subclasses should use the addValueForProcessing method instead. ";
      try { 
        defaultParser0.parse(options1, stringArray0, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Missing required option: 
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultParser defaultParser0 = new DefaultParser();
      Options options0 = new Options();
      Properties properties0 = new Properties();
      String[] stringArray0 = new String[1];
      properties0.setProperty("g{c O|N,M", "g{c O|N,M");
      stringArray0[0] = "g{c O|N,M";
      try { 
        defaultParser0.parse(options0, stringArray0, properties0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Default option wasn't defined
         //
         verifyException("org.apache.commons.cli.DefaultParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Options options0 = new Options();
      options0.addOption("U", "-U", true, "-");
      DefaultParser defaultParser0 = new DefaultParser();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "U";
      stringArray0[1] = "U";
      stringArray0[2] = "U";
      stringArray0[3] = "-U";
      stringArray0[4] = "-";
      CommandLine commandLine0 = defaultParser0.parse(options0, stringArray0);
      assertNotNull(commandLine0);
  }
}
