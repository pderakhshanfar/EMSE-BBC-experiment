* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0
* Going to generate test cases for class: com.google.javascript.jscomp.TypeInference
* Starting Client-0
* Connecting to master process on port 18521
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-112/build/classes
  - subjects/buggy-versions/Closure-112/lib/args4j.jar
  - subjects/buggy-versions/Closure-112/lib/guava.jar
  - subjects/buggy-versions/Closure-112/lib/json.jar
  - subjects/buggy-versions/Closure-112/lib/jsr305.jar
  - subjects/buggy-versions/Closure-112/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-112/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-112/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.jscomp.TypeInference
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 2994
* Using seed 1982140050
* Starting evolution
* Initial Number of Goals in DynaMOSA = 886 / 2994
[MASTER] 01:45:10.449 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 01:45:22.658 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
* Search finished after 303s and 50 generations, 31067 statements, best individual has fitness: 2524.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 11%
* Total number of goals: 603
* Number of covered goals: 65
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 24%
* Total number of goals: 769
* Number of covered goals: 187
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 6
* Number of covered goals: 6
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 4%
* Total number of goals: 821
* Number of covered goals: 31
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 43%
* Total number of goals: 14
* Number of covered goals: 6
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 67%
* Total number of goals: 9
* Number of covered goals: 6
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 67%
* Total number of goals: 9
* Number of covered goals: 6
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 24%
* Total number of goals: 769
* Number of covered goals: 185
* Generated 23 tests with total length 215
* Resulting test suite's coverage: 36% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 1%
* Compiling and checking tests
[MASTER] 01:50:37.877 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 01:50:37.878 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("can only implement interfaces");
ImmutableSortedMap.of("com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer", codingConvention_AssertionFunctionSpec0);
Compiler compiler0 = new Compiler();
compiler0.parseTestCode("l+kcR[4SuT:I =y");

[MASTER] 01:50:41.014 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 01:50:41.016 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("can only implement interfaces");
Compiler compiler0 = new Compiler();
Node node0 = compiler0.parseTestCode("Z*nzkHq");
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
Scope scope0 = Scope.createGlobalScope(node0);
ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("// Input %num%", codingConvention_AssertionFunctionSpec0, "@kZ3XV0@#]/{mm", codingConvention_AssertionFunctionSpec0, "Z*nzkHq", codingConvention_AssertionFunctionSpec0, "", codingConvention_AssertionFunctionSpec0, "=M'%c,-4'@", codingConvention_AssertionFunctionSpec0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
FlowScope flowScope0 = typeInference0.createEntryLattice();
assertNotNull(flowScope0);


[MASTER] 01:50:45.348 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 01:50:45.349 [logback-1] WARN  JUnitAnalyzer - Failing test:
 JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_TYPE;
CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("f!)Z>*BX", jSTypeNative0);
ImmutableSortedMap.of("", codingConvention_AssertionFunctionSpec0);
Compiler compiler0 = new Compiler();
compiler0.parseTestCode("");

[MASTER] 01:50:48.189 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 01:50:48.189 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("can only implement interfaces");
ImmutableSortedMap.of("Z*nzkHq", codingConvention_AssertionFunctionSpec0);
Compiler compiler0 = new Compiler();
compiler0.parseTestCode("sanityCheckVars");

[MASTER] 01:50:51.472 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 01:50:51.473 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("can only implement interfaces");
ImmutableSortedMap.of("", codingConvention_AssertionFunctionSpec0);
Compiler compiler0 = new Compiler();
compiler0.parseTestCode("");

[MASTER] 01:50:54.315 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 01:50:54.316 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("can only implement interfaces");
Compiler compiler0 = new Compiler();
Node node0 = compiler0.parseTestCode("Z*nzkHq");
Node node1 = new Node(15, node0, node0, node0, node0, 16, 30);
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
Scope scope0 = Scope.createGlobalScope(node0);
ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("// Input %num%", codingConvention_AssertionFunctionSpec0, "@kZ3XV0@#]/{mm", codingConvention_AssertionFunctionSpec0, "Z*nzkHq", codingConvention_AssertionFunctionSpec0, "", codingConvention_AssertionFunctionSpec0, "=M'%c,-4'@", codingConvention_AssertionFunctionSpec0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
assertNotSame(flowScope0, linkedFlowScope0);


[MASTER] 01:50:57.836 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 01:50:57.838 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("can only implement interfaces");
ImmutableSortedMap.of("", codingConvention_AssertionFunctionSpec0);
Compiler compiler0 = new Compiler();
compiler0.parseTestCode("");

[MASTER] 01:51:00.923 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 01:51:00.925 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("can only implement interfaces");
ImmutableSortedMap.of("Z*nzkHq", codingConvention_AssertionFunctionSpec0);
Compiler compiler0 = new Compiler();
compiler0.parseTestCode("sanityCheckVars");

[MASTER] 01:51:04.556 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 01:51:04.556 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("can only implement interfaces");
ImmutableSortedMap.of("<)e@)", codingConvention_AssertionFunctionSpec0);
Compiler compiler0 = new Compiler();
compiler0.parseTestCode("<)e@)");

[MASTER] 01:51:09.317 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 01:51:09.320 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("can only implement interfaces");
ImmutableSortedMap.of("com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer", codingConvention_AssertionFunctionSpec0);
Compiler compiler0 = new Compiler();
compiler0.parseTestCode("com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer");

[MASTER] 01:51:12.991 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 01:51:12.992 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("can only implement interfaces");
ImmutableSortedMap.of("P-0E!tS=i7[", codingConvention_AssertionFunctionSpec0);
Compiler compiler0 = new Compiler();
compiler0.parseTestCode("P-0E!tS=i7[");

[MASTER] 01:51:16.360 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 01:51:16.361 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("can only implement interfaces");
ImmutableSortedMap.of("com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer", codingConvention_AssertionFunctionSpec0);
Compiler compiler0 = new Compiler();
compiler0.parseTestCode("com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer");

[MASTER] 01:51:21.104 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 01:51:21.105 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("can only implement interfaces");
ImmutableSortedMap.of("com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer", codingConvention_AssertionFunctionSpec0);
Compiler compiler0 = new Compiler();
compiler0.parseTestCode("com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer");

[MASTER] 01:51:24.258 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 01:51:24.259 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("can only implement interfaces");
Compiler compiler0 = new Compiler();
Node node0 = compiler0.parseTestCode("Z*nzkHq");
Node node1 = new Node(127, node0, node0, 461845907, (-778));
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node1, false, false);
Scope scope0 = Scope.createGlobalScope(node0);
ImmutableMap<String, CodingConvention.AssertionFunctionSpec> immutableMap0 = ImmutableMap.of("", codingConvention_AssertionFunctionSpec0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableMap0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
assertNotSame(flowScope0, linkedFlowScope0);


* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 5
* Writing tests to file
* Writing JUnit test case 'TypeInference_ESTest' to results/Closure-112/com.google.javascript.jscomp.TypeInference/BBC-F0/tests/29
* Done!

* Computation finished
