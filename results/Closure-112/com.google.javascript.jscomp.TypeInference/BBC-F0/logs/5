* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0
* Going to generate test cases for class: com.google.javascript.jscomp.TypeInference
* Starting Client-0
* Connecting to master process on port 18624
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-112/build/classes
  - subjects/buggy-versions/Closure-112/lib/args4j.jar
  - subjects/buggy-versions/Closure-112/lib/guava.jar
  - subjects/buggy-versions/Closure-112/lib/json.jar
  - subjects/buggy-versions/Closure-112/lib/jsr305.jar
  - subjects/buggy-versions/Closure-112/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-112/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-112/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.jscomp.TypeInference
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 2994
* Using seed 594737439
* Starting evolution
* Initial Number of Goals in DynaMOSA = 886 / 2994
[MASTER] 01:37:33.477 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
* Search finished after 304s and 55 generations, 28555 statements, best individual has fitness: 2591.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 6%
* Total number of goals: 603
* Number of covered goals: 37
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 22%
* Total number of goals: 769
* Number of covered goals: 166
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 6
* Number of covered goals: 6
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 3%
* Total number of goals: 821
* Number of covered goals: 21
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 43%
* Total number of goals: 14
* Number of covered goals: 6
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 67%
* Total number of goals: 9
* Number of covered goals: 6
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 67%
* Total number of goals: 9
* Number of covered goals: 6
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 22%
* Total number of goals: 769
* Number of covered goals: 166
* Generated 10 tests with total length 92
* Resulting test suite's coverage: 38% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 1%
* Compiling and checking tests
[MASTER] 01:42:26.210 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 01:42:26.212 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("");
ImmutableMap<String, CodingConvention.AssertionFunctionSpec> immutableMap0 = ImmutableMap.of("", codingConvention_AssertionFunctionSpec0);
File file0 = MockFile.createTempFile("JSC_FUNCTION_LITERAL_UNDEFINED_THIS", "com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer");
MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
Compiler compiler0 = new Compiler(mockPrintStream0);
Node node0 = compiler0.parseTestCode("trim");
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
Scope scope0 = Scope.createLatticeBottom(node0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableMap0);
typeInference0.createEntryLattice();

[MASTER] 01:42:32.475 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 01:42:32.477 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("");
ImmutableMap<String, CodingConvention.AssertionFunctionSpec> immutableMap0 = ImmutableMap.of("", codingConvention_AssertionFunctionSpec0);
File file0 = MockFile.createTempFile("JSC_FUNCTION_LITERAL_UNDEFINED_THIS", "com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer");
MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
Compiler compiler0 = new Compiler(mockPrintStream0);
Node node0 = compiler0.parseTestCode("trim");
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
Scope scope0 = Scope.createLatticeBottom(node0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableMap0);
FlowScope flowScope0 = typeInference0.createInitialEstimateLattice();
TypeInference typeInference1 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableMap0);
List<FlowScope> list0 = typeInference1.branchedFlowThrough(node0, flowScope0);
assertEquals(0, list0.size());


[MASTER] 01:42:38.399 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 01:42:38.400 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("");
ImmutableMap<String, CodingConvention.AssertionFunctionSpec> immutableMap0 = ImmutableMap.of("", codingConvention_AssertionFunctionSpec0);
File file0 = MockFile.createTempFile("JSC_FUNCTION_LITERAL_UNDEFINED_THIS", "com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer");
MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
Compiler compiler0 = new Compiler(mockPrintStream0);
Node node0 = compiler0.parseTestCode("trim");
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
Scope scope0 = Scope.createLatticeBottom(node0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableMap0);
FlowScope flowScope0 = typeInference0.createInitialEstimateLattice();
FlowScope flowScope1 = typeInference0.flowThrough(node0, flowScope0);
assertSame(flowScope1, flowScope0);


[MASTER] 01:42:44.329 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 01:42:44.331 [logback-1] WARN  JUnitAnalyzer - Failing test:
 JSTypeNative jSTypeNative0 = JSTypeNative.REGEXP_FUNCTION_TYPE;
CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("", jSTypeNative0);
ImmutableMap<String, CodingConvention.AssertionFunctionSpec> immutableMap0 = ImmutableMap.of("", codingConvention_AssertionFunctionSpec0);
File file0 = MockFile.createTempFile("JSC_FUNCTION_LITERAL_UNDEFINED_THIS", "trim");
MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
Compiler compiler0 = new Compiler(mockPrintStream0);
Node node0 = compiler0.parseTestCode("trim");
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
Scope scope0 = Scope.createLatticeBottom(node0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableMap0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
Node node1 = new Node(122, node0, node0);
typeInference0.branchedFlowThrough(node1, linkedFlowScope0);

[MASTER] 01:42:49.575 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 01:42:49.577 [logback-1] WARN  JUnitAnalyzer - Failing test:
 JSTypeNative jSTypeNative0 = JSTypeNative.NO_OBJECT_TYPE;
CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("", jSTypeNative0);
ImmutableMap<String, CodingConvention.AssertionFunctionSpec> immutableMap0 = ImmutableMap.of("2Dy\"IR=\"/", codingConvention_AssertionFunctionSpec0);
File file0 = MockFile.createTempFile("LLh=E=$f+k)D~", "LLh=E=$f+k)D~");
MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
Compiler compiler0 = new Compiler(mockPrintStream0);
Node node0 = compiler0.parseTestCode("JSC_FUNCTION_LITERAL_UNDEFINED_THIS");
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
Scope scope0 = Scope.createLatticeBottom(node0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableMap0);
FlowScope flowScope0 = typeInference0.createInitialEstimateLattice();
Node node1 = new Node(4095, node0, node0, node0, 53, 4);
TypeInference typeInference1 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableMap0);
typeInference1.branchedFlowThrough(node1, flowScope0);

[MASTER] 01:43:04.351 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 01:43:04.352 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("");
ImmutableMap<String, CodingConvention.AssertionFunctionSpec> immutableMap0 = ImmutableMap.of("", codingConvention_AssertionFunctionSpec0);
File file0 = MockFile.createTempFile("trim", "IMPORT");
MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
Compiler compiler0 = new Compiler(mockPrintStream0);
Node node0 = compiler0.parseTestCode("");
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, (Scope) null, immutableMap0);

[MASTER] 01:43:09.862 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 01:43:09.863 [logback-1] WARN  JUnitAnalyzer - Failing test:
 CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("2Dy\"IR=\"/");
ImmutableMap<String, CodingConvention.AssertionFunctionSpec> immutableMap0 = ImmutableMap.of("", codingConvention_AssertionFunctionSpec0);
File file0 = MockFile.createTempFile("JSC_FUNCTION_LITERAL_UNDEFINED_THIS", "com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer");
MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
Compiler compiler0 = new Compiler(mockPrintStream0);
Node node0 = compiler0.parseTestCode("JSC_GOOG_CLASS_STATICS_NOT_VALID");
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
Scope scope0 = Scope.createLatticeBottom(node0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableMap0);
typeInference0.branchedFlowThrough(node0, (FlowScope) null);

[MASTER] 01:43:09.871 [logback-1] WARN  TestSuiteGenerator - JUnit checking timed out
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 7
* Writing tests to file
* Writing JUnit test case 'TypeInference_ESTest' to results/Closure-112/com.google.javascript.jscomp.TypeInference/BBC-F0/tests/5
* Done!

* Computation finished
