* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0
* Going to generate test cases for class: com.google.javascript.jscomp.TypeInference
* Starting Client-0
* Connecting to master process on port 3257
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-112/build/classes
  - subjects/buggy-versions/Closure-112/lib/args4j.jar
  - subjects/buggy-versions/Closure-112/lib/guava.jar
  - subjects/buggy-versions/Closure-112/lib/json.jar
  - subjects/buggy-versions/Closure-112/lib/jsr305.jar
  - subjects/buggy-versions/Closure-112/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-112/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-112/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.jscomp.TypeInference
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 2994
* Using seed 2947799579
* Starting evolution
* Initial Number of Goals in DynaMOSA = 886 / 2994
[MASTER] 01:44:39.555 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
* Search finished after 304s and 63 generations, 27685 statements, best individual has fitness: 2564.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 8%
* Total number of goals: 603
* Number of covered goals: 51
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 22%
* Total number of goals: 769
* Number of covered goals: 172
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 7
* Number of covered goals: 7
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 3%
* Total number of goals: 821
* Number of covered goals: 28
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 43%
* Total number of goals: 14
* Number of covered goals: 6
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 67%
* Total number of goals: 9
* Number of covered goals: 6
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 67%
* Total number of goals: 9
* Number of covered goals: 6
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 22%
* Total number of goals: 769
* Number of covered goals: 172
* Generated 12 tests with total length 97
* Resulting test suite's coverage: 35% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 2%
* Compiling and checking tests
[MASTER] 01:49:33.219 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 01:49:33.223 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
Compiler compiler0 = new Compiler();
Node node0 = compiler0.parseSyntheticCode("INC", "INC");
CodingConvention codingConvention0 = compiler0.getCodingConvention();
TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, codingConvention0);
Scope scope0 = typedScopeCreator0.createInitialScope(node0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
FlowScope flowScope0 = typeInference0.createEntryLattice();
typeInference0.branchedFlowThrough((Node) null, flowScope0);

[MASTER] 01:49:37.703 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 01:49:37.704 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
Compiler compiler0 = new Compiler();
Node node0 = compiler0.parseSyntheticCode("INC", "INC");
CodingConvention codingConvention0 = compiler0.getCodingConvention();
TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, codingConvention0);
Scope scope0 = typedScopeCreator0.createInitialScope(node0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
FlowScope flowScope0 = typeInference0.createInitialEstimateLattice();
List<FlowScope> list0 = typeInference0.branchedFlowThrough((Node) null, flowScope0);
assertTrue(list0.isEmpty());


[MASTER] 01:49:41.281 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 01:49:41.282 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
Compiler compiler0 = new Compiler();
Node node0 = compiler0.parseSyntheticCode("INC", "INC");
TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
Scope scope0 = typedScopeCreator0.createInitialScope(node0);
CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("com.google.common.collect.ForwardingSortedSetMultimap");
ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("com.google.common.collect.ForwardingSortedSetMultimap", codingConvention_AssertionFunctionSpec0, "Ef/@\"c=T", codingConvention_AssertionFunctionSpec0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
Node node1 = new Node(30, node0);
FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
assertNotSame(flowScope0, linkedFlowScope0);


[MASTER] 01:49:44.580 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 01:49:44.581 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
Compiler compiler0 = new Compiler();
Node node0 = compiler0.parseSyntheticCode("INC", "INC");
TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
Scope scope0 = typedScopeCreator0.createInitialScope(node0);
CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("com.google.common.collect.ForwardingSortedSetMultimap");
ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("com.google.common.collect.ForwardingSortedSetMultimap", codingConvention_AssertionFunctionSpec0, "Ef/@\"c=T", codingConvention_AssertionFunctionSpec0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
Node node1 = new Node(38, node0);
typeInference0.flowThrough(node1, linkedFlowScope0);

[MASTER] 01:49:48.211 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 01:49:48.212 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, false);
Compiler compiler0 = new Compiler();
Node node0 = compiler0.parseSyntheticCode("INC", "INC");
TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
Scope scope0 = typedScopeCreator0.createInitialScope(node0);
CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("com.google.javascript.jscomp.TypeInference$TemplateTypeReplacer");
ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("Ef/@\"c=T", codingConvention_AssertionFunctionSpec0, "com.google.common.collect.ForwardingSortedSetMultimap", codingConvention_AssertionFunctionSpec0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
Node node1 = new Node(47, node0);
FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
assertNotSame(flowScope0, linkedFlowScope0);


[MASTER] 01:49:50.763 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 01:49:50.764 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
Compiler compiler0 = new Compiler();
Node node0 = compiler0.parseSyntheticCode("INC", "INC");
TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
Scope scope0 = typedScopeCreator0.createInitialScope(node0);
CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("");
ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("", codingConvention_AssertionFunctionSpec0, "Ef/@\"c=T", codingConvention_AssertionFunctionSpec0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableSortedMap0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
Node node1 = new Node(128, node0);
typeInference0.branchedFlowThrough(node1, linkedFlowScope0);

[MASTER] 01:49:53.480 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 01:49:53.481 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
Compiler compiler0 = new Compiler();
Node node0 = compiler0.parseSyntheticCode("INC", "INC");
TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0);
Scope scope0 = typedScopeCreator0.createInitialScope(node0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
FlowScope flowScope0 = typeInference0.createEntryLattice();
Node node1 = new Node((-29), node0);
FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
assertNotSame(flowScope1, flowScope0);


[MASTER] 01:50:01.131 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 01:50:01.132 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
Compiler compiler0 = new Compiler();
Node node0 = compiler0.parseSyntheticCode("INC", "INC");
CodingConvention codingConvention0 = compiler0.getCodingConvention();
TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, codingConvention0);
Scope scope0 = typedScopeCreator0.createInitialScope(node0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
typeInference0.branchedFlowThrough(node0, linkedFlowScope0);

[MASTER] 01:50:03.986 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 01:50:03.987 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
Compiler compiler0 = new Compiler();
Node node0 = compiler0.parseSyntheticCode("INC", "INC");
CodingConvention codingConvention0 = compiler0.getCodingConvention();
TypedScopeCreator typedScopeCreator0 = new TypedScopeCreator(compiler0, codingConvention0);
Scope scope0 = typedScopeCreator0.createInitialScope(node0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
FlowScope flowScope0 = typeInference0.createEntryLattice();
typeInference0.flowThrough((Node) null, flowScope0);

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 5
* Writing tests to file
* Writing JUnit test case 'TypeInference_ESTest' to results/Closure-112/com.google.javascript.jscomp.TypeInference/BBC-F0/tests/26
* Done!

* Computation finished
