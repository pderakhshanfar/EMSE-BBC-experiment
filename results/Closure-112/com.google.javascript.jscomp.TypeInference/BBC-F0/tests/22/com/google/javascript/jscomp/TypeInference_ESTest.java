/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 01:48:28 GMT 2020
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.common.collect.UnmodifiableListIterator;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.ControlFlowGraph;
import com.google.javascript.jscomp.LinkedFlowScope;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.TypeInference;
import com.google.javascript.jscomp.type.FlowScope;
import com.google.javascript.jscomp.type.ReverseAbstractInterpreter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.NoObjectType;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeInference_ESTest extends TypeInference_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.BOTH;
      BooleanLiteralSet booleanLiteralSet1 = BooleanLiteralSet.EMPTY;
      BooleanLiteralSet booleanLiteralSet2 = TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet1, false);
      assertEquals(BooleanLiteralSet.TRUE, booleanLiteralSet2);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeInference.getBooleanOutcomes((BooleanLiteralSet) null, (BooleanLiteralSet) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeInference", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Compiler compiler0 = new Compiler();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NoObjectType noObjectType0 = mock(NoObjectType.class, new ViolatedAssumptionAnswer());
      ImmutableList<NoObjectType> immutableList0 = ImmutableList.of(noObjectType0, noObjectType0, noObjectType0);
      UnmodifiableListIterator<NoObjectType> unmodifiableListIterator0 = immutableList0.listIterator();
      ImmutableList<JSType> immutableList1 = ImmutableList.copyOf((Iterator<? extends JSType>) unmodifiableListIterator0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList1);
      Scope scope0 = Scope.createGlobalScope(node0);
      compiler0.getErrorManager();
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice((Scope) null);
      // Undeclared exception!
      try { 
        typeInference0.flowThrough(node0, linkedFlowScope0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.LinkedFlowScope$FlatFlowScopeCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Compiler compiler0 = new Compiler();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NoObjectType noObjectType0 = mock(NoObjectType.class, new ViolatedAssumptionAnswer());
      ImmutableList<NoObjectType> immutableList0 = ImmutableList.of(noObjectType0, noObjectType0, noObjectType0);
      UnmodifiableListIterator<NoObjectType> unmodifiableListIterator0 = immutableList0.listIterator();
      ImmutableList<JSType> immutableList1 = ImmutableList.copyOf((Iterator<? extends JSType>) unmodifiableListIterator0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList1);
      Scope scope0 = Scope.createGlobalScope(node0);
      compiler0.getErrorManager();
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice((Scope) null);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node0, linkedFlowScope0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.LinkedFlowScope$FlatFlowScopeCache", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Compiler compiler0 = new Compiler();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NoObjectType noObjectType0 = mock(NoObjectType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(noObjectType0).toString();
      ImmutableList<NoObjectType> immutableList0 = ImmutableList.of(noObjectType0, noObjectType0, noObjectType0);
      UnmodifiableListIterator<NoObjectType> unmodifiableListIterator0 = immutableList0.listIterator();
      ImmutableList<JSType> immutableList1 = ImmutableList.copyOf((Iterator<? extends JSType>) unmodifiableListIterator0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList1);
      Scope scope0 = Scope.createGlobalScope(node0);
      compiler0.getErrorManager();
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      // Undeclared exception!
      try { 
        typeInference0.branchedFlowThrough(node0, linkedFlowScope0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // PARAM_LIST does not exist in graph
         //
         verifyException("com.google.javascript.jscomp.graph.Graph", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
      Compiler compiler0 = new Compiler();
      TypeInference typeInference0 = null;
      try {
        typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, (Scope) null, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.BOTH;
      BooleanLiteralSet booleanLiteralSet1 = TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet0, true);
      assertEquals(BooleanLiteralSet.BOTH, booleanLiteralSet1);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NoObjectType noObjectType0 = mock(NoObjectType.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(noObjectType0).toString();
      ImmutableList<NoObjectType> immutableList0 = ImmutableList.of(noObjectType0, noObjectType0, noObjectType0);
      UnmodifiableListIterator<NoObjectType> unmodifiableListIterator0 = immutableList0.listIterator();
      ImmutableList<JSType> immutableList1 = ImmutableList.copyOf((Iterator<? extends JSType>) unmodifiableListIterator0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList1);
      Scope scope0 = Scope.createGlobalScope(node0);
      compiler0.getErrorManager();
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      List<FlowScope> list0 = typeInference0.branchedFlowThrough(node0, linkedFlowScope0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Compiler compiler0 = new Compiler();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NoObjectType noObjectType0 = mock(NoObjectType.class, new ViolatedAssumptionAnswer());
      ImmutableList<NoObjectType> immutableList0 = ImmutableList.of(noObjectType0, noObjectType0, noObjectType0);
      UnmodifiableListIterator<NoObjectType> unmodifiableListIterator0 = immutableList0.listIterator();
      ImmutableList<JSType> immutableList1 = ImmutableList.copyOf((Iterator<? extends JSType>) unmodifiableListIterator0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList1);
      Scope scope0 = Scope.createGlobalScope(node0);
      compiler0.getErrorManager();
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      FlowScope flowScope0 = typeInference0.createInitialEstimateLattice();
      FlowScope flowScope1 = typeInference0.flowThrough(node0, flowScope0);
      assertSame(flowScope1, flowScope0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, true, true);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      Compiler compiler0 = new Compiler();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      NoObjectType noObjectType0 = mock(NoObjectType.class, new ViolatedAssumptionAnswer());
      ImmutableList<NoObjectType> immutableList0 = ImmutableList.of(noObjectType0, noObjectType0, noObjectType0);
      UnmodifiableListIterator<NoObjectType> unmodifiableListIterator0 = immutableList0.listIterator();
      ImmutableList<JSType> immutableList1 = ImmutableList.copyOf((Iterator<? extends JSType>) unmodifiableListIterator0);
      Node node0 = jSTypeRegistry0.createParameters((List<JSType>) immutableList1);
      Scope scope0 = Scope.createGlobalScope(node0);
      compiler0.getErrorManager();
      ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
      TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
      FlowScope flowScope0 = typeInference0.createEntryLattice();
      assertNotNull(flowScope0);
  }
}
