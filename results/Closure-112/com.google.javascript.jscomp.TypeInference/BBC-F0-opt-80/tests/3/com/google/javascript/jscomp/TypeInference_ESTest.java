/*
 * This file was automatically generated by EvoSuite
 * Tue Oct 12 10:32:11 GMT 2021
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableMap;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.ControlFlowGraph;
import com.google.javascript.jscomp.Normalize;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.TypeInference;
import com.google.javascript.jscomp.type.ReverseAbstractInterpreter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.JSTypeNative;
import java.io.PrintStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeInference_ESTest extends TypeInference_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.BOTH;
      BooleanLiteralSet booleanLiteralSet1 = BooleanLiteralSet.EMPTY;
      BooleanLiteralSet booleanLiteralSet2 = TypeInference.getBooleanOutcomes(booleanLiteralSet1, booleanLiteralSet0, false);
      assertEquals(BooleanLiteralSet.BOTH, booleanLiteralSet2);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeInference.getBooleanOutcomes((BooleanLiteralSet) null, (BooleanLiteralSet) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeInference", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(138, 138, (-4038));
      Node node1 = new Node(38, node0, node0);
      Scope.createLatticeBottom(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "Expected a string; found: null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Compiler compiler0 = new Compiler((PrintStream) null);
      Scope scope0 = Scope.createGlobalScope((Node) null);
      JSTypeNative jSTypeNative0 = JSTypeNative.OBJECT_NUMBER_STRING_BOOLEAN;
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("", jSTypeNative0);
      ImmutableMap<String, CodingConvention.AssertionFunctionSpec> immutableMap0 = ImmutableMap.of("com.google.javascript.jscomp.Normalize$RewriteExposedProperties", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = null;
      try {
        typeInference0 = new TypeInference(compiler0, (ControlFlowGraph<Node>) null, (ReverseAbstractInterpreter) null, scope0, immutableMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.DataFlowAnalysis", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(141, (-789), (-4038));
      Node node1 = new Node(49, node0, node0);
      Scope.createLatticeBottom(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(129, 0, 0);
      Node node1 = new Node(38, node0, node0);
      Scope.createLatticeBottom(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "0]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(100, 100, 100);
      Node node1 = new Node(15, node0, node0);
      Scope.createLatticeBottom(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(129, 0, 129);
      Node node1 = new Node(2, node0, node0);
      Scope.createGlobalScope(node1);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("T");
      ImmutableMap.of("YX#*V+]>5-:t0~p", codingConvention_AssertionFunctionSpec0);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "T");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node((-2315), (-3376), 25);
      Node node1 = new Node(37, node0, 25, 50);
      Node node2 = new Node(32, node1, node1);
      Scope.createLatticeBottom(node2);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(138, 147, (-2315));
      Node node1 = new Node(51, node0, node0);
      Scope.createLatticeBottom(node1);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("");
      ImmutableMap.of("", codingConvention_AssertionFunctionSpec0);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node((-2315), 4, 25);
      Node node1 = new Node(30, node0, node0);
      Scope.createLatticeBottom(node1);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("");
      ImmutableMap.of("", codingConvention_AssertionFunctionSpec0);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "Z70");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(147, 0, 147);
      Node node1 = new Node(2, node0, node0);
      Scope.createLatticeBottom(node1);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("T");
      ImmutableMap.of("YX#*MV+]>5E]:10~p", codingConvention_AssertionFunctionSpec0);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "T");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(147, 3, 147);
      Node node1 = new Node(57, node0, 47, 38);
      Scope.createLatticeBottom(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "@t");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node((-2315), (-3376), 25);
      Node node1 = new Node(32, node0, node0);
      Scope.createLatticeBottom(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(129, 0, 129);
      Node node1 = new Node(2, node0, node0);
      Scope.createLatticeBottom(node1);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("T");
      ImmutableMap.of("YX#*V+]>5-(:t0~p", codingConvention_AssertionFunctionSpec0);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "T");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node((-2315), (-2315), (-2315));
      Node node1 = new Node(30, node0, node0);
      Node node2 = new Node(32, node1, node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node((-2315), (-3376), 25);
      Node node1 = new Node(4, node0, node0, node0);
      Node node2 = new Node(32, node1, node1);
      Scope.createLatticeBottom(node2);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(4, (-1587), (-1587));
      Node node1 = new Node((-349), node0, node0);
      Scope.createLatticeBottom(node1);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("");
      ImmutableMap.of("com.google.javascript.jscomp.GlobalVarReferenceMap", codingConvention_AssertionFunctionSpec0);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.TypeInference$1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(130, 130, (-2315));
      Node node1 = new Node(51, node0, node0);
      Scope.createLatticeBottom(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "P6[Pa&S>{vf3ohO]exT");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(155, 155, 155);
      Node node1 = new Node(51, node0, node0);
      Scope.createLatticeBottom(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "1]'d$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node((-2315), (-2315), 25);
      Node node1 = new Node(32, node0, node0);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(153, 153, (-2315));
      Node node1 = new Node(51, node0, node0);
      Scope.createLatticeBottom(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(151, 150, (-2315));
      Node node1 = new Node(51, node0, node0);
      Scope.createLatticeBottom(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(150, 150, 150);
      Node node1 = new Node(15, node0, node0);
      Scope.createLatticeBottom(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node((-55), 377, 377);
      Node node1 = new Node(149, node0, node0);
      Scope.createLatticeBottom(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "toSource");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(148, 147, (-2315));
      Node node1 = new Node(51, node0, node0);
      Scope.createLatticeBottom(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "Bad JSCompiler_renameProperty call - argument must be a string literal");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(146, 0, 146);
      Node node1 = new Node(2, node0, node0);
      Scope.createLatticeBottom(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(145, 128, 128);
      Node node1 = new Node(31, node0, node0);
      Scope.createLatticeBottom(node1);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("}d4H1R[l%t,{`L5");
      ImmutableMap.of("}d4H1R[l%t,{`L5", codingConvention_AssertionFunctionSpec0);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "/Yd6'SW3kOAjd");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(150, 150, (-2290));
      Node node1 = new Node(57, node0, node0);
      Scope.createLatticeBottom(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node((-22));
      Node node1 = new Node(4, node0, 53, 15);
      Scope.createLatticeBottom(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(134, 134, 134);
      Node node1 = new Node(40, node0, node0, node0, node0);
      Scope.createLatticeBottom(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "Ys_;D8moS:^r");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node((-2315), (-2315), 25);
      Node node1 = new Node(139, node0, node0);
      Scope.createLatticeBottom(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "(b?e3n!:T3lw#7*t");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(138, 150, 138);
      Node node1 = new Node(51, node0, node0);
      Scope.createLatticeBottom(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node((-2315), (-2315), 25);
      Node node1 = new Node(30, node0, node0);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(136, 0, 136);
      Node node1 = new Node(2, node0, node0);
      Scope.createLatticeBottom(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node((-22));
      Node node1 = new Node(51, node0, node0);
      Scope.createLatticeBottom(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(134, 2273, (-1469));
      Node node1 = new Node(4071, node0, node0);
      Scope.createLatticeBottom(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(133, (-3539), 100);
      Node node1 = new Node((-3965), node0, node0);
      Scope.createLatticeBottom(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "PRIVATE");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(131, 2273, (-1469));
      Node node1 = new Node(32, node0, node0);
      Scope.createLatticeBottom(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(129, 0, 129);
      Node node1 = new Node(2, node0, node0);
      Scope.createLatticeBottom(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(127, 137, 137);
      Node node1 = new Node(114, node0, node0);
      Scope.createLatticeBottom(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "2aQM#8%@]9TQS");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(134, 134, 134);
      Node node1 = new Node(126, node0, node0);
      Scope.createLatticeBottom(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "Y3%x");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(138, 150, (-2315));
      Node node1 = new Node(51, node0, node0);
      Scope.createLatticeBottom(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(123, 0, 123);
      Node node1 = new Node(2, node0, node0);
      Scope.createLatticeBottom(node1);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("T");
      ImmutableMap.of("T", codingConvention_AssertionFunctionSpec0);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "T");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(150, 129, 129);
      Node node1 = new Node(122, node0, node0);
      Scope.createLatticeBottom(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(120, 1809, 158);
      Node node1 = new Node(32, node0, node0);
      Scope.createLatticeBottom(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.TypeInference");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(119, 150, 150);
      Node node1 = new Node(42, node0, node0);
      Scope.createLatticeBottom(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "Log:\npass,runtime,runs,changingRuns,reduction,gzReduction,size,gzSize\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(176, 176, 176);
      Node node1 = new Node(118, node0, node0);
      Scope.createLatticeBottom(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(117, (-798), (-4038));
      Node node1 = new Node(49, node0, node0);
      Scope.createLatticeBottom(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(116, 0, 116);
      Node node1 = new Node(2, node0, node0);
      Scope.createLatticeBottom(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "b_9YR0RPzk{Wl");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(153, 153, 153);
      Node node1 = new Node(51, node0, node0);
      Scope.createLatticeBottom(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "P6[Pa&S>{vf3ohO]exT");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = Node.newString("LJo0R");
      Node node1 = new Node(114, node0, node0);
      Scope.createLatticeBottom(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "LJo0R");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(113, 0, 113);
      Node node1 = new Node(2, node0, node0);
      Scope.createLatticeBottom(node1);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("T");
      ImmutableMap.of("T", codingConvention_AssertionFunctionSpec0);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "T");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(112, 134, 2805);
      Node node1 = new Node(8, node0, node0);
      Scope.createLatticeBottom(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "o0@?^hZB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(129, 0, 129);
      Node node1 = new Node(2, node0, node0);
      Scope.createLatticeBottom(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(110, 4282, 110);
      Node node1 = new Node(52, node0, node0);
      Scope.createLatticeBottom(node1);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("T");
      ImmutableMap.of("T", codingConvention_AssertionFunctionSpec0);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "T");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node((-4413), 150, 709);
      Node node1 = new Node(109, node0, node0);
      Scope.createLatticeBottom(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(150, 1054, (-1029));
      Node node1 = new Node(108, node0, node0);
      Scope.createLatticeBottom(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(129, 0, 129);
      Node node1 = new Node(12, node0, node0);
      Scope.createLatticeBottom(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(3, 25, 3);
      Node node1 = new Node(12, node0, node0);
      Scope.createLatticeBottom(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(99, 99, 99);
      Node node1 = new Node(51, node0, node0);
      Scope.createGlobalScope(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(138, 129, (-2315));
      Node node1 = new Node(51, node0, node0);
      Scope.createLatticeBottom(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "1'd$");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(92, 1809, 156);
      Node node1 = new Node(32, node0, node0);
      Scope.createLatticeBottom(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "com.Foogle.javascript.jscomp3TypeInfrence");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(88, 88, 88);
      Node node1 = new Node(51, node0, node0);
      Scope.createGlobalScope(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(155, 155, (-1519));
      Node node1 = new Node(147, node0, node0);
      Scope.createLatticeBottom(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "y++|GUw");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(84, (-1067), 937);
      Scope.createLatticeBottom(node0);
      node0.addChildToFront(node0);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "^[cs");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(171, 0, 171);
      Node node1 = new Node(2, node0, node0);
      Scope.createLatticeBottom(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, " ms");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(147, 0, 147);
      Node node1 = new Node(2, node0, node0);
      Scope.createLatticeBottom(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "@:t");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(78, 78, 78);
      Node node1 = new Node(51, node0, node0);
      Scope.createGlobalScope(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(77, (-1380), 117);
      Node node1 = new Node(3022, node0, node0);
      Scope.createLatticeBottom(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "H{GnHwL;FM<`,}1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(75);
      Node node1 = new Node(4, node0, 53, 15);
      Scope.createLatticeBottom(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "V");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(72, 72, 72);
      Node node1 = new Node(51, node0, node0);
      Scope.createGlobalScope(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(71);
      Node node1 = new Node(52, node0, node0);
      Scope.createGlobalScope(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "V");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Node node0 = new Node(0, 0, 0);
      Node node1 = new Node(2, node0, node0);
      Scope.createLatticeBottom(node1);
      Compiler compiler0 = new Compiler();
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "b_9YR0RPzk{Wl");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(65);
      Node node1 = new Node(134, node0, node0);
      Scope.createLatticeBottom(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(62);
      Node node1 = new Node(4, node0, 53, 15);
      Scope.createLatticeBottom(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "V");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(59, 59, 59);
      Node node1 = new Node(51, node0, node0);
      Scope.createGlobalScope(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "p6 Fly$XLx");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(147, 0, 147);
      Node node1 = new Node(2, node0, node0);
      Scope.createLatticeBottom(node1);
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("T");
      ImmutableMap.of("T", codingConvention_AssertionFunctionSpec0);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "T");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node((-798), 3064, 143);
      Node node1 = new Node(56, node0, node0);
      Scope.createLatticeBottom(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "gb)r,>(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node((-876));
      Node node1 = new Node(93, node0, node0);
      Scope.createLatticeBottom(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(150, 150, (-2315));
      Node node1 = new Node(51, node0, node0);
      Scope.createLatticeBottom(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(142, 142, 142);
      Node node1 = new Node(49, node0, node0);
      Scope.createGlobalScope(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "com.google.common.collect.AbstractMapBasedMultiset$1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(138, 150, 138);
      Node node1 = new Node(51, node0, node0);
      Scope.createLatticeBottom(node1);
      Node node2 = new Node(48, node1, node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(103, 18, 18);
      Node node1 = new Node(46, node0, node0, node0, node0);
      Scope.createLatticeBottom(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(45, 45, 45);
      Node node1 = new Node(51, node0, node0);
      Scope.createGlobalScope(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(119, 150, (-2315));
      Node node1 = new Node(42, node0, node0);
      Scope.createLatticeBottom(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "Log:\npass,runtime,runs,changingRuns,reduction,gzReduction,size,gzSize\n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(41);
      Node node1 = new Node(4095, node0, 30, 38);
      Scope.createGlobalScope(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, ">");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(138, 147, (-2315));
      Node node1 = new Node(51, node0, node0);
      Scope.createLatticeBottom(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(3, 3, 3);
      Scope.createLatticeBottom(node0);
      node0.addChildToFront(node0);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "// Input %num%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(35);
      Node node1 = new Node(4095, node0, 30, 38);
      Scope.createGlobalScope(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, ">");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(66);
      Node node1 = new Node(30, node0, node0, node0, node0, 4095, 0);
      Scope.createLatticeBottom(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node((-3), (-3), (-3));
      Node node1 = new Node(2, node0, node0);
      Scope.createLatticeBottom(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, ",");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(129, 0, 129);
      Node node1 = new Node(2, node0, node0);
      Scope.createLatticeBottom(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, ",");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(116, 0, 116);
      Node node1 = new Node(2, node0, node0);
      Scope.createLatticeBottom(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node((-22));
      Node node1 = new Node(50, node0);
      Scope.createLatticeBottom(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "1");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(25);
      Node node1 = new Node(32, node0, node0);
      Scope.createLatticeBottom(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(23);
      Node node1 = new Node(32, node0, node0);
      Scope.createLatticeBottom(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(18);
      Node node1 = new Node(37, node0, 18, 50);
      Scope.createLatticeBottom(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(150, 150, (-2290));
      Node node1 = new Node(57, node0, node0);
      Scope.createLatticeBottom(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.rhino.jstype.UnknownType");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(121, 110, (-745));
      Node node1 = new Node(12, node0, node0);
      Scope.createGlobalScope(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "com.google.common.collect.AbstractMapBasedMultiset$1");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(9);
      Node node1 = new Node(32, node0, node0);
      Scope.createLatticeBottom(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(105, 105, 105);
      Node node1 = new Node(4, node0, node0, node0);
      Scope.createGlobalScope(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "om.google.common.colect.AbstractMapBasedMultiset$1");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(130, 130, (-2315));
      Node node1 = new Node(51, node0, node0);
      Scope.createLatticeBottom(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, ")MPaR$2{4B:;35,^");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(11);
      Node node1 = new Node(32, node0, node0);
      Scope.createLatticeBottom(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      Node node0 = new Node(128, 3, 650);
      Node node1 = new Node(100, node0, node0, node0, node0, 32, (-10));
      Scope.createGlobalScope(node1);
      // Undeclared exception!
      try { 
        Normalize.parseAndNormalizeTestCode(compiler0, "om.google.common.colect.AbstractMapBasedMultiset$1");
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }
}
