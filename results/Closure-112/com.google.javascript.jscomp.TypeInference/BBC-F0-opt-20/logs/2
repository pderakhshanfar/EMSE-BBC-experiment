* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-opt-20
* Going to generate test cases for class: com.google.javascript.jscomp.TypeInference
* Starting Client-0
* Connecting to master process on port 8364
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-112/build/classes
  - subjects/buggy-versions/Closure-112/lib/args4j.jar
  - subjects/buggy-versions/Closure-112/lib/guava.jar
  - subjects/buggy-versions/Closure-112/lib/json.jar
  - subjects/buggy-versions/Closure-112/lib/jsr305.jar
  - subjects/buggy-versions/Closure-112/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-112/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-112/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.jscomp.TypeInference
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 2994
* Using seed 2445436244
* Starting evolution
bbc usage percentage is: 20%
* Initial Number of Goals in DynaMOSA = 886 / 2994
[MASTER] 10:20:29.978 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 10:20:52.981 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
[MASTER] 10:20:58.578 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
*C1*
* Search finished after 604s and 822 generations, 613170 statements, best individual has fitness: 1627.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 48%
* Total number of goals: 603
* Number of covered goals: 291
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 53%
* Total number of goals: 769
* Number of covered goals: 410
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 10
* Number of covered goals: 10
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 32%
* Total number of goals: 821
* Number of covered goals: 264
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 57%
* Total number of goals: 14
* Number of covered goals: 8
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 67%
* Total number of goals: 9
* Number of covered goals: 6
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 67%
* Total number of goals: 9
* Number of covered goals: 6
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 52%
* Total number of goals: 769
* Number of covered goals: 400
* Generated 149 tests with total length 1831
* Resulting test suite's coverage: 53% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 8%
* Compiling and checking tests
[MASTER] 10:31:10.816 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 10:31:10.823 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 10:31:10.823 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
compiler0.parseTestCode("msg.no.brace.catchblock");

[MASTER] 10:31:12.441 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 10:31:12.441 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
SourceFile sourceFile0 = SourceFile.fromCode("equalsIgnoreCase", "equalsIgnoreCase", "equalsIgnoreCase");
CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
compilerInput0.getAstRoot(compiler0);

[MASTER] 10:31:14.129 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 10:31:14.129 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
SourceFile sourceFile0 = SourceFile.fromCode("equalsIgnoreCase", "equalsIgnoreCase", "Xc");
CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
compilerInput0.getAstRoot(compiler0);

[MASTER] 10:31:16.149 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 10:31:16.149 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
SourceFile sourceFile0 = SourceFile.fromCode("equalsIgnoreCase", "equalsIgnoreCase", "equalsIgnoreCase");
CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
compilerInput0.getAstRoot(compiler0);

[MASTER] 10:31:17.651 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 10:31:17.651 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
SourceFile sourceFile0 = SourceFile.fromCode("eqalsIgoreCase", "eqalsIgoreCase", "eqalsIgoreCase");
CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
compilerInput0.getAstRoot(compiler0);

[MASTER] 10:31:19.157 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 10:31:19.158 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
SourceFile sourceFile0 = SourceFile.fromCode("usg.no.brace.catc=block", "usg.no.brace.catc=block", "usg.no.brace.catc=block");
CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
compilerInput0.getAstRoot(compiler0);

[MASTER] 10:31:20.469 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 10:31:20.470 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
SourceFile sourceFile0 = SourceFile.fromCode("equalsIgnoreCase", "equalsIgnoreCase", "Xc");
CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
compilerInput0.getAstRoot(compiler0);

[MASTER] 10:31:22.053 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 10:31:22.054 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
SourceFile sourceFile0 = SourceFile.fromCode("Ge}g*b[V[1]", "Ge}g*b[V[1]", "Xc");
CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
compilerInput0.getAstRoot(compiler0);

[MASTER] 10:31:23.677 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 10:31:23.677 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
SourceFile sourceFile0 = SourceFile.fromCode("com.google.javascript.jscomp.TypeInference$BooleanOutcomePair", "", "equalsIgnoreCase");
CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
compilerInput0.getAstRoot(compiler0);

[MASTER] 10:31:25.297 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 10:31:25.297 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
SourceFile sourceFile0 = SourceFile.fromCode("equalsIgnoreCase", "equalsIgnoreCase", "Xc");
CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
compilerInput0.getAstRoot(compiler0);

[MASTER] 10:31:26.950 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 10:31:26.951 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
compiler0.parseTestCode("msg.no.brace.catchblock");

[MASTER] 10:31:29.207 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 10:31:29.208 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
SourceFile sourceFile0 = SourceFile.fromCode("msg.no.brace.catchblock", "msg.no.brace.catchblock", "msg.no.brace.catchblock");
CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
compilerInput0.getAstRoot(compiler0);

[MASTER] 10:31:30.903 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 10:31:30.903 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
SourceFile sourceFile0 = SourceFile.fromCode("msg.no.brce.catchblock", "msg.no.brce.catchblock", "msg.no.brce.catchblock");
CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
compilerInput0.getAstRoot(compiler0);

[MASTER] 10:31:32.472 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 10:31:32.473 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
SourceFile sourceFile0 = SourceFile.fromCode("~c", "", "~c");
CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
compilerInput0.getAstRoot(compiler0);

[MASTER] 10:31:33.994 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 10:31:33.994 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
SourceFile sourceFile0 = SourceFile.fromCode("equalsIgnoreCase", "prototype", "prototype");
CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
compilerInput0.getAstRoot(compiler0);

[MASTER] 10:31:35.477 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 10:31:35.477 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
SourceFile sourceFile0 = SourceFile.fromCode("equalsIgnoreCase", "equalsIgnoreCase", "equalsIgnoreCase");
CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
compilerInput0.getAstRoot(compiler0);

[MASTER] 10:31:37.213 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 10:31:37.213 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
SourceFile sourceFile0 = SourceFile.fromCode("equalsIgnoreCase", "equalsIgnoreCase", "equalsIgnoreCase");
CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
compilerInput0.getAstRoot(compiler0);

[MASTER] 10:31:38.906 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 10:31:38.906 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
SourceFile sourceFile0 = SourceFile.fromCode("equalsIgnoreCase", "equalsIgnoreCase", "XDc");
CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
compilerInput0.getAstRoot(compiler0);

[MASTER] 10:31:40.581 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 10:31:40.581 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
SourceFile sourceFile0 = SourceFile.fromCode("equalsIgnoreCase", "", "equalsIgnoreCase");
CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
compilerInput0.getAstRoot(compiler0);

[MASTER] 10:31:42.080 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 10:31:42.080 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
compiler0.parseSyntheticCode("msg.no.brace.catchblock", "msg.no.brace.catchblock");

[MASTER] 10:31:43.860 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 10:31:43.863 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
compiler0.parseSyntheticCode("msg.no.brace.catchblock", "msg.no.brace.catchblock");

[MASTER] 10:31:45.561 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 10:31:45.562 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
compiler0.parseSyntheticCode("msg.o.brace.catchblck", "msg.o.brace.catchblck");

[MASTER] 10:31:47.043 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 10:31:47.044 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
SourceFile sourceFile0 = SourceFile.fromCode("equalsIgnoreCase", "equalsIgnoreCase", "Xc");
CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
compilerInput0.getAstRoot(compiler0);

[MASTER] 10:31:49.449 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 10:31:49.450 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
compiler0.parseSyntheticCode("msg.nobrce.catchblock", "msg.nobrce.catchblock");

[MASTER] 10:31:51.118 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 10:31:51.118 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
compiler0.parseTestCode("msg.no.brace.catchblock");

[MASTER] 10:31:52.839 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 10:31:52.839 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
SourceFile sourceFile0 = SourceFile.fromCode("eqalsIgoreCase", "eqalsIgoreCase", "~c");
CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
compilerInput0.getAstRoot(compiler0);

[MASTER] 10:31:54.621 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 10:31:54.622 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
SourceFile sourceFile0 = SourceFile.fromCode("equalsIgnoreCase", "equalsIgnoreCase", "Xc");
CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
compilerInput0.getAstRoot(compiler0);

[MASTER] 10:31:56.294 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalArgumentException
[MASTER] 10:31:56.294 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
SourceFile sourceFile0 = SourceFile.fromCode("msg.no.irace.catchblock", "msg.no.irace.catchblock", "msg.no.irace.catchblock");
CompilerInput compilerInput0 = new CompilerInput(sourceFile0);
compilerInput0.getAstRoot(compiler0);

* Writing tests to file
* Writing JUnit test case 'TypeInference_ESTest' to results/Closure-112/com.google.javascript.jscomp.TypeInference/BBC-F0-opt-20/tests/2
* Done!

* Computation finished
