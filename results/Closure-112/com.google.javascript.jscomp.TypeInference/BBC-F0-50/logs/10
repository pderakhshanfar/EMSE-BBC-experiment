* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: com.google.javascript.jscomp.TypeInference
* Starting Client-0
* Connecting to master process on port 14556
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-112/build/classes
  - subjects/buggy-versions/Closure-112/lib/args4j.jar
  - subjects/buggy-versions/Closure-112/lib/guava.jar
  - subjects/buggy-versions/Closure-112/lib/json.jar
  - subjects/buggy-versions/Closure-112/lib/jsr305.jar
  - subjects/buggy-versions/Closure-112/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-112/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-112/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.jscomp.TypeInference
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 2994
* Using seed 1063745498
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 886 / 2994
[MASTER] 17:51:55.859 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 17:53:14.210 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
[MASTER] 18:00:15.466 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
* Search finished after 604s and 829 generations, 562516 statements, best individual has fitness: 1962.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 34%
* Total number of goals: 603
* Number of covered goals: 208
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 44%
* Total number of goals: 769
* Number of covered goals: 340
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 10
* Number of covered goals: 10
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 18%
* Total number of goals: 821
* Number of covered goals: 145
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 57%
* Total number of goals: 14
* Number of covered goals: 8
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 67%
* Total number of goals: 9
* Number of covered goals: 6
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 67%
* Total number of goals: 9
* Number of covered goals: 6
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 44%
* Total number of goals: 769
* Number of covered goals: 335
* Generated 134 tests with total length 1563
* Resulting test suite's coverage: 47% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 5%
* Compiling and checking tests
[MASTER] 18:03:01.272 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:03:07.016 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 18:03:07.016 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
Node node0 = Node.newString("");
Node node1 = compiler0.parseTestCode("JSC_FUNCTION_LITERAL_UNDEFINED_THIS");
Node node2 = new Node(37, node1, node0, node1, (-2163), 29);
Scope scope0 = Scope.createLatticeBottom(node1);
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
TreeMap<String, CodingConvention.AssertionFunctionSpec> treeMap0 = new TreeMap<String, CodingConvention.AssertionFunctionSpec>();
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, treeMap0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
typeInference0.flowThrough(node2, linkedFlowScope0);

[MASTER] 18:03:24.324 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 18:03:24.325 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Compiler compiler0 = new Compiler();
Node node0 = Node.newString("");
Node node1 = compiler0.parseTestCode("N,K");
Scope scope0 = Scope.createLatticeBottom(node1);
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
TreeMap<String, CodingConvention.AssertionFunctionSpec> treeMap0 = new TreeMap<String, CodingConvention.AssertionFunctionSpec>();
ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.copyOfSorted((SortedMap<String, ? extends CodingConvention.AssertionFunctionSpec>) treeMap0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, immutableSortedMap0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
Node node2 = new Node(20, 391, 143);
typeInference0.branchedFlowThrough(node2, linkedFlowScope0);

[MASTER] 18:03:34.366 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 18:03:34.366 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Node node0 = Node.newString("");
Compiler compiler0 = new Compiler();
Node node1 = compiler0.parseTestCode("");
Node node2 = new Node(4, node0, node0, node1, 54, 42);
Scope scope0 = Scope.createLatticeBottom(node2);
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node2, true, false);
ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
HashMap<String, CodingConvention.AssertionFunctionSpec> hashMap0 = new HashMap<String, CodingConvention.AssertionFunctionSpec>();
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, hashMap0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
Node node3 = new Node(37, 143, 4095);
typeInference0.branchedFlowThrough(node3, linkedFlowScope0);

* Writing tests to file
* Writing JUnit test case 'TypeInference_ESTest' to results/Closure-112/com.google.javascript.jscomp.TypeInference/BBC-F0-50/tests/10
* Done!

* Computation finished
