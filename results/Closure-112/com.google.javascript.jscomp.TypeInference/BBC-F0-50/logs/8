* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: com.google.javascript.jscomp.TypeInference
* Starting Client-0
* Connecting to master process on port 7768
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-112/build/classes
  - subjects/buggy-versions/Closure-112/lib/args4j.jar
  - subjects/buggy-versions/Closure-112/lib/guava.jar
  - subjects/buggy-versions/Closure-112/lib/json.jar
  - subjects/buggy-versions/Closure-112/lib/jsr305.jar
  - subjects/buggy-versions/Closure-112/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-112/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-112/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.jscomp.TypeInference
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 2994
* Using seed 4018864097
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 886 / 2994
[MASTER] 17:51:53.316 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 17:58:50.844 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
* Search finished after 602s and 587 generations, 337913 statements, best individual has fitness: 2034.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 29%
* Total number of goals: 603
* Number of covered goals: 177
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 42%
* Total number of goals: 769
* Number of covered goals: 322
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 9
* Number of covered goals: 9
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 16%
* Total number of goals: 821
* Number of covered goals: 134
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 43%
* Total number of goals: 14
* Number of covered goals: 6
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 67%
* Total number of goals: 9
* Number of covered goals: 6
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 67%
* Total number of goals: 9
* Number of covered goals: 6
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 42%
* Total number of goals: 769
* Number of covered goals: 320
* Generated 129 tests with total length 1345
* Resulting test suite's coverage: 45% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 4%
* Compiling and checking tests
[MASTER] 18:03:02.305 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:03:04.879 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 18:03:04.880 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Node node0 = Node.newString((-1611), "", 56, (-1611));
Node node1 = new Node(144, node0, node0, node0);
Compiler compiler0 = new Compiler();
Node node2 = compiler0.parseTestCode("fRZvK)l!D1H-J");
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node2, false, false);
ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
Scope scope0 = Scope.createGlobalScope(node1);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
Node node3 = new Node(46);
typeInference0.branchedFlowThrough(node3, linkedFlowScope0);

[MASTER] 18:03:10.852 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 18:03:10.852 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Node node0 = new Node(149, 149, 2763);
Compiler compiler0 = new Compiler();
Node node1 = compiler0.parseTestCode("com.google.common.collect.Maps$EntryFunction");
Node node2 = new Node(37, node1, node0, node0);
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node2, true, true);
ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
Scope scope0 = Scope.createLatticeBottom(node1);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);

[MASTER] 18:03:19.872 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 18:03:19.872 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Node node0 = Node.newString((-1611), "", 56, (-1611));
Node node1 = new Node(8, node0, node0, node0);
Compiler compiler0 = new Compiler();
Node node2 = compiler0.parseTestCode("fRZvK)l!D1H-J");
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node2, false, false);
ReverseAbstractInterpreter reverseAbstractInterpreter0 = compiler0.getReverseAbstractInterpreter();
Scope scope0 = Scope.createGlobalScope(node1);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, reverseAbstractInterpreter0, scope0, (Map<String, CodingConvention.AssertionFunctionSpec>) null);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
typeInference0.branchedFlowThrough(node1, linkedFlowScope0);

* Writing tests to file
* Writing JUnit test case 'TypeInference_ESTest' to results/Closure-112/com.google.javascript.jscomp.TypeInference/BBC-F0-50/tests/8
* Done!

* Computation finished
