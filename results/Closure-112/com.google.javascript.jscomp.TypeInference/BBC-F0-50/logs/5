* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: com.google.javascript.jscomp.TypeInference
* Starting Client-0
* Connecting to master process on port 10215
* Analyzing classpath: 
  - subjects/buggy-versions/Closure-112/build/classes
  - subjects/buggy-versions/Closure-112/lib/args4j.jar
  - subjects/buggy-versions/Closure-112/lib/guava.jar
  - subjects/buggy-versions/Closure-112/lib/json.jar
  - subjects/buggy-versions/Closure-112/lib/jsr305.jar
  - subjects/buggy-versions/Closure-112/lib/protobuf-java.jar
  - subjects/buggy-versions/Closure-112/build/lib/rhino.jar
  - subjects/buggy-versions/Closure-112/lib/ant.jar
* Finished analyzing classpath
* Generating tests for class com.google.javascript.jscomp.TypeInference
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 2994
* Using seed 4269084398
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 886 / 2994
[MASTER] 17:51:49.123 [logback-1] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 17:53:32.249 [logback-1] ERROR TestCluster - Failed to check cache for java.util.Iterator<E> : Type points to itself
[MASTER] 17:56:42.046 [logback-1] ERROR TestCluster - Failed to check cache for java.util.Enumeration<E> : Type points to itself
* Search finished after 606s and 694 generations, 619657 statements, best individual has fitness: 1973.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 33%
* Total number of goals: 603
* Number of covered goals: 202
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 43%
* Total number of goals: 769
* Number of covered goals: 333
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 92%
* Total number of goals: 12
* Number of covered goals: 11
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 19%
* Total number of goals: 821
* Number of covered goals: 153
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 57%
* Total number of goals: 14
* Number of covered goals: 8
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 67%
* Total number of goals: 9
* Number of covered goals: 6
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 67%
* Total number of goals: 9
* Number of covered goals: 6
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 42%
* Total number of goals: 769
* Number of covered goals: 326
* Generated 141 tests with total length 2268
* Resulting test suite's coverage: 48% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 5%
* Compiling and checking tests
[MASTER] 18:03:33.959 [logback-2] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 18:03:33.963 [logback-2] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 18:03:33.964 [logback-2] WARN  JUnitAnalyzer - Failing test:
 CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("t;umvSwC+QY8ONl!,");
ImmutableMap<String, CodingConvention.AssertionFunctionSpec> immutableMap0 = ImmutableMap.of("t;umvSwC+QY8ONl!,", codingConvention_AssertionFunctionSpec0);
MockFile mockFile0 = new MockFile("t;umvSwC+QY8ONl!,");
MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
Compiler compiler0 = new Compiler(printStreamErrorManager0);
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "JSC_WRNG_RGMENT_COUNT");
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
Scope scope0 = Scope.createLatticeBottom(node0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableMap0);
FlowScope flowScope0 = typeInference0.createEntryLattice();
Node node1 = new Node(100, node0, node0, node0);
FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
assertNotSame(flowScope1, flowScope0);


[MASTER] 18:03:35.249 [logback-2] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 18:03:35.249 [logback-2] WARN  JUnitAnalyzer - Failing test:
 CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Sf)?!");
ImmutableMap<String, CodingConvention.AssertionFunctionSpec> immutableMap0 = ImmutableMap.of("Sf)?!", codingConvention_AssertionFunctionSpec0);
MockFile mockFile0 = new MockFile("Sf)?!");
MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
Compiler compiler0 = new Compiler(printStreamErrorManager0);
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "JSC_WRONG_ARGUMENT_COUNT");
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
Scope scope0 = Scope.createGlobalScope(node0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableMap0);
FlowScope flowScope0 = typeInference0.createEntryLattice();
Node node1 = new Node(33);
typeInference0.branchedFlowThrough(node1, flowScope0);

[MASTER] 18:03:36.977 [logback-2] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 18:03:36.978 [logback-2] WARN  JUnitAnalyzer - Failing test:
 CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Sf)?!");
ImmutableMap<String, CodingConvention.AssertionFunctionSpec> immutableMap0 = ImmutableMap.of("Sf)?!", codingConvention_AssertionFunctionSpec0);
MockFile mockFile0 = new MockFile("JSC_WRONG_ARGUMENT_COUNT", "JSC_WRONG_ARGUMENT_COUNT");
MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
Compiler compiler0 = new Compiler(printStreamErrorManager0);
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "JSC_WRONG_ARGUMENT_COUNT");
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
Scope scope0 = Scope.createLatticeBottom(node0);
Node node1 = new Node(46);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableMap0);
FlowScope flowScope0 = typeInference0.createEntryLattice();
typeInference0.branchedFlowThrough(node1, flowScope0);

[MASTER] 18:03:38.263 [logback-2] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 18:03:38.264 [logback-2] WARN  JUnitAnalyzer - Failing test:
 CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Sf)?!");
ImmutableMap<String, CodingConvention.AssertionFunctionSpec> immutableMap0 = ImmutableMap.of("Sf)?!", codingConvention_AssertionFunctionSpec0);
MockFile mockFile0 = new MockFile("Sf)?!");
MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
Compiler compiler0 = new Compiler(printStreamErrorManager0);
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "JSC_WRONG_ARGUMENT_COUNT");
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
Scope scope0 = Scope.createGlobalScope(node0);
Node node1 = new Node(101, node0, node0, 50, 57);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableMap0);
FlowScope flowScope0 = typeInference0.createEntryLattice();
typeInference0.branchedFlowThrough(node1, flowScope0);

[MASTER] 18:03:39.465 [logback-2] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 18:03:39.465 [logback-2] WARN  JUnitAnalyzer - Failing test:
 CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("fQfq?!");
ImmutableMap<String, CodingConvention.AssertionFunctionSpec> immutableMap0 = ImmutableMap.of("fQfq?!", codingConvention_AssertionFunctionSpec0);
MockFile mockFile0 = new MockFile("JSC_WRONG_ARGUMENT_COUNT", "fQfq?!");
MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
Compiler compiler0 = new Compiler(printStreamErrorManager0);
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "JSC_WRONG_ARGUMENT_COUNT");
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
Scope scope0 = Scope.createGlobalScope(node0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableMap0);
FlowScope flowScope0 = typeInference0.createEntryLattice();
Node node1 = new Node(86);
typeInference0.branchedFlowThrough(node1, flowScope0);

[MASTER] 18:03:40.709 [logback-2] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 18:03:40.710 [logback-2] WARN  JUnitAnalyzer - Failing test:
 CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Sf)?!");
ImmutableMap<String, CodingConvention.AssertionFunctionSpec> immutableMap0 = ImmutableMap.of("Sf)?!", codingConvention_AssertionFunctionSpec0);
MockFile mockFile0 = new MockFile("Sf)?!");
MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
Compiler compiler0 = new Compiler(printStreamErrorManager0);
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "JSC_WRONG_ARGUMENT_COUNT");
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
Scope scope0 = Scope.createGlobalScope(node0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableMap0);
FlowScope flowScope0 = typeInference0.createInitialEstimateLattice();
typeInference0.branchedFlowThrough(node0, flowScope0);

[MASTER] 18:03:42.064 [logback-2] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 18:03:42.065 [logback-2] WARN  JUnitAnalyzer - Failing test:
 CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("t;umvSwC+QY8ONl!,");
ImmutableMap<String, CodingConvention.AssertionFunctionSpec> immutableMap0 = ImmutableMap.of("t;umvSwC+QY8ONl!,", codingConvention_AssertionFunctionSpec0);
MockFile mockFile0 = new MockFile("t;umvSwC+QY8ONl!,");
MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
Compiler compiler0 = new Compiler(printStreamErrorManager0);
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "JSC_WRNG_RGMENT_COUNT");
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
Scope scope0 = Scope.createLatticeBottom(node0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableMap0);
FlowScope flowScope0 = typeInference0.createEntryLattice();
List<FlowScope> list0 = typeInference0.branchedFlowThrough(node0, flowScope0);
assertTrue(list0.isEmpty());


[MASTER] 18:03:43.226 [logback-2] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 18:03:43.227 [logback-2] WARN  JUnitAnalyzer - Failing test:
 CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Sf)?!");
ImmutableMap<String, CodingConvention.AssertionFunctionSpec> immutableMap0 = ImmutableMap.of("Sf)?!", codingConvention_AssertionFunctionSpec0);
MockFile mockFile0 = new MockFile("Sf)?!");
MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
Compiler compiler0 = new Compiler(printStreamErrorManager0);
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "JSC_WRONG_ARGUMENT_COUNT");
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
ControlFlowGraph.Branch controlFlowGraph_Branch0 = ControlFlowGraph.Branch.ON_EX;
controlFlowGraph0.connect(node0, controlFlowGraph_Branch0, node0);
ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
Scope scope0 = Scope.createGlobalScope(node0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableMap0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
List<FlowScope> list0 = typeInference0.branchedFlowThrough(node0, linkedFlowScope0);
assertEquals(1, list0.size());


[MASTER] 18:03:45.132 [logback-2] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 18:03:45.133 [logback-2] WARN  JUnitAnalyzer - Failing test:
 CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Sf)?!");
ImmutableMap<String, CodingConvention.AssertionFunctionSpec> immutableMap0 = ImmutableMap.of("Sf)?!", codingConvention_AssertionFunctionSpec0);
MockFile mockFile0 = new MockFile("Sf)?!");
MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
Compiler compiler0 = new Compiler(printStreamErrorManager0);
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "JSC_WRONG_ARGUMENT_COUNT");
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
Scope scope0 = Scope.createGlobalScope(node0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableMap0);
FlowScope flowScope0 = typeInference0.createEntryLattice();
Node node1 = new Node(5);
typeInference0.branchedFlowThrough(node1, flowScope0);

[MASTER] 18:03:46.218 [logback-2] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 18:03:46.218 [logback-2] WARN  JUnitAnalyzer - Failing test:
 CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Sf)?!");
ImmutableMap<String, CodingConvention.AssertionFunctionSpec> immutableMap0 = ImmutableMap.of("Sf)?!", codingConvention_AssertionFunctionSpec0);
MockFile mockFile0 = new MockFile("Sf)?!");
MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
Compiler compiler0 = new Compiler(printStreamErrorManager0);
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "JSC_WRONG_ARGUMENT_COUNT");
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, (JSTypeRegistry) null);
Scope scope0 = Scope.createGlobalScope(node0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableMap0);
FlowScope flowScope0 = typeInference0.createEntryLattice();
Node node1 = new Node(8);
typeInference0.branchedFlowThrough(node1, flowScope0);

[MASTER] 18:03:47.405 [logback-2] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 18:03:47.406 [logback-2] WARN  JUnitAnalyzer - Failing test:
 CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Sf)?!");
ImmutableMap<String, CodingConvention.AssertionFunctionSpec> immutableMap0 = ImmutableMap.of("Sf)?!", codingConvention_AssertionFunctionSpec0);
MockFile mockFile0 = new MockFile("Sf)?!");
MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
Compiler compiler0 = new Compiler(printStreamErrorManager0);
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "JSC_WRONG_ARGUMENT_COUNT");
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
Scope scope0 = Scope.createGlobalScope(node0);
Node node1 = new Node(9, node0, node0, 49, 53);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableMap0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
typeInference0.branchedFlowThrough(node1, linkedFlowScope0);

[MASTER] 18:03:48.518 [logback-2] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 18:03:48.518 [logback-2] WARN  JUnitAnalyzer - Failing test:
 CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("z");
ImmutableMap<String, CodingConvention.AssertionFunctionSpec> immutableMap0 = ImmutableMap.of("z", codingConvention_AssertionFunctionSpec0);
MockFile mockFile0 = new MockFile("z");
MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
Compiler compiler0 = new Compiler(printStreamErrorManager0);
Node node0 = compiler0.parseTestCode("JSC_WRNG_RGoENT_COUNT");
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
Scope scope0 = Scope.createGlobalScope(node0);
Node node1 = new Node(10, node0, node0, 39, 1565);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableMap0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
typeInference0.branchedFlowThrough(node1, linkedFlowScope0);

[MASTER] 18:03:49.649 [logback-2] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 18:03:49.649 [logback-2] WARN  JUnitAnalyzer - Failing test:
 CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("jSf,?!");
ImmutableMap<String, CodingConvention.AssertionFunctionSpec> immutableMap0 = ImmutableMap.of("jSf,?!", codingConvention_AssertionFunctionSpec0);
MockFile mockFile0 = new MockFile("jSf,?!");
MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
Compiler compiler0 = new Compiler(printStreamErrorManager0);
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "JSC_WRONG_ARGUMENT_COUNT");
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
Scope scope0 = Scope.createGlobalScope(node0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableMap0);
Node node1 = new Node(11, node0, node0, 46, 143);
FlowScope flowScope0 = typeInference0.createEntryLattice();
FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
assertNotSame(flowScope1, flowScope0);


[MASTER] 18:03:50.860 [logback-2] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 18:03:50.861 [logback-2] WARN  JUnitAnalyzer - Failing test:
 CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Sf)?!");
ImmutableMap<String, CodingConvention.AssertionFunctionSpec> immutableMap0 = ImmutableMap.of("Sf)?!", codingConvention_AssertionFunctionSpec0);
MockFile mockFile0 = new MockFile("Sf)?!");
MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
Compiler compiler0 = new Compiler(printStreamErrorManager0);
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "JSC_WRONG_ARGUMENT_COUNT");
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
Scope scope0 = Scope.createGlobalScope(node0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableMap0);
Node node1 = new Node(12, node0, node0, node0, 50, 39);
FlowScope flowScope0 = typeInference0.createEntryLattice();
FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
assertNotSame(flowScope1, flowScope0);


[MASTER] 18:03:51.948 [logback-2] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 18:03:51.949 [logback-2] WARN  JUnitAnalyzer - Failing test:
 CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Sf)?!");
ImmutableMap<String, CodingConvention.AssertionFunctionSpec> immutableMap0 = ImmutableMap.of("Sf)?!", codingConvention_AssertionFunctionSpec0);
MockFile mockFile0 = new MockFile("REQUIREJS_PLUGINS_NOT_SUPPORTED");
MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
Compiler compiler0 = new Compiler(printStreamErrorManager0);
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "KnP");
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, (JSTypeRegistry) null);
Scope scope0 = Scope.createGlobalScope(node0);
Node node1 = new Node(13, node0, node0, (-2057), 2);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableMap0);
FlowScope flowScope0 = typeInference0.createEntryLattice();
typeInference0.branchedFlowThrough(node1, flowScope0);

[MASTER] 18:03:53.044 [logback-2] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 18:03:53.044 [logback-2] WARN  JUnitAnalyzer - Failing test:
 CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Sf)?!");
ImmutableMap<String, CodingConvention.AssertionFunctionSpec> immutableMap0 = ImmutableMap.of("Sf)?!", codingConvention_AssertionFunctionSpec0);
MockFile mockFile0 = new MockFile("Sf)?!");
MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
Compiler compiler0 = new Compiler(printStreamErrorManager0);
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "Sf)?!");
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
Node node1 = new Node(15, node0, node0, node0, node0, 48, 2190);
Scope scope0 = Scope.createGlobalScope(node1);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableMap0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
assertNotSame(flowScope0, linkedFlowScope0);


[MASTER] 18:03:54.188 [logback-2] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 18:03:54.188 [logback-2] WARN  JUnitAnalyzer - Failing test:
 CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Sf)?!");
ImmutableMap<String, CodingConvention.AssertionFunctionSpec> immutableMap0 = ImmutableMap.of("Sf)?!", codingConvention_AssertionFunctionSpec0);
MockFile mockFile0 = new MockFile("Sf)?!");
MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
Compiler compiler0 = new Compiler(printStreamErrorManager0);
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "JSC_WRONG_ARGUMENT_COUNT");
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
Scope scope0 = Scope.createGlobalScope(node0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableMap0);
FlowScope flowScope0 = typeInference0.createEntryLattice();
Node node1 = new Node(16);
typeInference0.branchedFlowThrough(node1, flowScope0);

[MASTER] 18:03:55.542 [logback-2] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 18:03:55.543 [logback-2] WARN  JUnitAnalyzer - Failing test:
 CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("S)?q");
ImmutableMap<String, CodingConvention.AssertionFunctionSpec> immutableMap0 = ImmutableMap.of("S)?q", codingConvention_AssertionFunctionSpec0);
MockFile mockFile0 = new MockFile("REQUIREJS_PLUGINS_NOT_SUPPORTED");
MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
Compiler compiler0 = new Compiler(printStreamErrorManager0);
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "KnP");
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, (JSTypeRegistry) null);
Scope scope0 = Scope.createGlobalScope(node0);
Node node1 = new Node(18, node0, node0, (-2031), 2);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableMap0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
assertNotSame(flowScope0, linkedFlowScope0);


[MASTER] 18:03:56.860 [logback-2] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 18:03:56.861 [logback-2] WARN  JUnitAnalyzer - Failing test:
 CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Sf)?");
ImmutableMap<String, CodingConvention.AssertionFunctionSpec> immutableMap0 = ImmutableMap.of("Sf)?", codingConvention_AssertionFunctionSpec0);
MockFile mockFile0 = new MockFile("goir;;=^qVc<T");
MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
Compiler compiler0 = new Compiler(printStreamErrorManager0);
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "K:nP");
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, (JSTypeRegistry) null);
Scope scope0 = Scope.createLatticeBottom(node0);
Node node1 = new Node(22, node0, node0, (-2077), 2);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableMap0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
assertNotSame(flowScope0, linkedFlowScope0);


[MASTER] 18:03:57.944 [logback-2] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 18:03:57.944 [logback-2] WARN  JUnitAnalyzer - Failing test:
 CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Sf)?!");
ImmutableMap<String, CodingConvention.AssertionFunctionSpec> immutableMap0 = ImmutableMap.of("Sf)?!", codingConvention_AssertionFunctionSpec0);
MockFile mockFile0 = new MockFile("JSC_WRONG_ARGUMENT_COUNT", "JSC_WRONG_ARGUMENT_COUNT");
MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
Compiler compiler0 = new Compiler(printStreamErrorManager0);
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.T2peInlerence");
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
Scope scope0 = Scope.createGlobalScope(node0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableMap0);
Node node1 = new Node(23, node0, node0, 49, 46);
FlowScope flowScope0 = typeInference0.createEntryLattice();
FlowScope flowScope1 = typeInference0.flowThrough(node1, flowScope0);
assertNotSame(flowScope1, flowScope0);


[MASTER] 18:03:59.553 [logback-2] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 18:03:59.554 [logback-2] WARN  JUnitAnalyzer - Failing test:
 CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Sf)?");
ImmutableMap<String, CodingConvention.AssertionFunctionSpec> immutableMap0 = ImmutableMap.of("Sf)?", codingConvention_AssertionFunctionSpec0);
MockFile mockFile0 = new MockFile("REQUIREJS_PLUGINS_NOT_SUPPORTED");
MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
Compiler compiler0 = new Compiler(printStreamErrorManager0);
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "KnP");
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, (JSTypeRegistry) null);
Scope scope0 = Scope.createGlobalScope(node0);
Node node1 = new Node(25, node0, node0, (-2062), 2);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableMap0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
assertNotSame(flowScope0, linkedFlowScope0);


[MASTER] 18:04:00.765 [logback-2] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 18:04:00.766 [logback-2] WARN  JUnitAnalyzer - Failing test:
 CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Sf)?!");
ImmutableMap<String, CodingConvention.AssertionFunctionSpec> immutableMap0 = ImmutableMap.of("Sf)?!", codingConvention_AssertionFunctionSpec0);
MockFile mockFile0 = new MockFile("Sf)?!");
MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
Compiler compiler0 = new Compiler(printStreamErrorManager0);
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "JSC_WRNG_RGMENT_COUNT");
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
Scope scope0 = Scope.createGlobalScope(node0);
Node node1 = Node.newString(27, ":=$2Y;OH4v");
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableMap0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
typeInference0.branchedFlowThrough(node1, linkedFlowScope0);

[MASTER] 18:04:01.859 [logback-2] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 18:04:01.859 [logback-2] WARN  JUnitAnalyzer - Failing test:
 CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Sf)?!");
ImmutableMap<String, CodingConvention.AssertionFunctionSpec> immutableMap0 = ImmutableMap.of("Sf)?!", codingConvention_AssertionFunctionSpec0);
MockFile mockFile0 = new MockFile("Sf)?!");
MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
Compiler compiler0 = new Compiler(printStreamErrorManager0);
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "JSC_WRNG_RGMENT_COUNT");
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
Scope scope0 = Scope.createGlobalScope(node0);
Node node1 = Node.newString(28, ":=$2Y;OH4v");
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableMap0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
typeInference0.branchedFlowThrough(node1, linkedFlowScope0);

[MASTER] 18:04:02.927 [logback-2] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 18:04:02.927 [logback-2] WARN  JUnitAnalyzer - Failing test:
 CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Sf)?!");
ImmutableMap<String, CodingConvention.AssertionFunctionSpec> immutableMap0 = ImmutableMap.of("Sf)?!", codingConvention_AssertionFunctionSpec0);
MockFile mockFile0 = new MockFile("Sf)?!");
MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
Compiler compiler0 = new Compiler(printStreamErrorManager0);
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "JSC_WRONG_ARGiNNTCOUNq");
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
Scope scope0 = Scope.createGlobalScope(node0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableMap0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
Node node1 = new Node(29, node0, node0, node0, 40, (-3004));
typeInference0.branchedFlowThrough(node1, linkedFlowScope0);

[MASTER] 18:04:04.038 [logback-2] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 18:04:04.039 [logback-2] WARN  JUnitAnalyzer - Failing test:
 CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Sf)?!");
ImmutableMap<String, CodingConvention.AssertionFunctionSpec> immutableMap0 = ImmutableMap.of("Sf)?!", codingConvention_AssertionFunctionSpec0);
MockFile mockFile0 = new MockFile("Sf)?!");
MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
Compiler compiler0 = new Compiler(printStreamErrorManager0);
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "Sf)?!");
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
Node node1 = new Node(30, node0, node0, node0);
Scope scope0 = Scope.createGlobalScope(node1);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableMap0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
typeInference0.branchedFlowThrough(node1, linkedFlowScope0);

[MASTER] 18:04:05.082 [logback-2] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 18:04:05.083 [logback-2] WARN  JUnitAnalyzer - Failing test:
 CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Sf)?!");
ImmutableMap<String, CodingConvention.AssertionFunctionSpec> immutableMap0 = ImmutableMap.of("Sf)?!", codingConvention_AssertionFunctionSpec0);
MockFile mockFile0 = new MockFile("Sf)?!");
MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
Compiler compiler0 = new Compiler(printStreamErrorManager0);
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "JSC_WRONG_ARGUMENT_COUNT");
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, (JSTypeRegistry) null);
Scope scope0 = Scope.createGlobalScope(node0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableMap0);
FlowScope flowScope0 = typeInference0.createEntryLattice();
Node node1 = new Node(31);
typeInference0.branchedFlowThrough(node1, flowScope0);

[MASTER] 18:04:06.167 [logback-2] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 18:04:06.167 [logback-2] WARN  JUnitAnalyzer - Failing test:
 CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Sf)?!");
ImmutableMap<String, CodingConvention.AssertionFunctionSpec> immutableMap0 = ImmutableMap.of("Sf)?!", codingConvention_AssertionFunctionSpec0);
MockFile mockFile0 = new MockFile("Sf)?!");
MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
Compiler compiler0 = new Compiler(printStreamErrorManager0);
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "JSC_WRONG_ARGUMENT_COUNT");
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
Scope scope0 = Scope.createGlobalScope(node0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableMap0);
FlowScope flowScope0 = typeInference0.createEntryLattice();
Node node1 = new Node(32);
typeInference0.branchedFlowThrough(node1, flowScope0);

[MASTER] 18:04:07.232 [logback-2] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 18:04:07.233 [logback-2] WARN  JUnitAnalyzer - Failing test:
 CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("f)?");
ImmutableMap<String, CodingConvention.AssertionFunctionSpec> immutableMap0 = ImmutableMap.of("f)?", codingConvention_AssertionFunctionSpec0);
MockFile mockFile0 = new MockFile("f)?");
MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
Compiler compiler0 = new Compiler(printStreamErrorManager0);
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "JSC_WRNG_RGMENT_COUNT");
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
JSTypeRegistry jSTypeRegistry0 = compiler0.getTypeRegistry();
ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
Scope scope0 = Scope.createLatticeBottom(node0);
Node node1 = new Node(34, node0, node0, 50, (-4241));
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableMap0);
FlowScope flowScope0 = typeInference0.createEntryLattice();
typeInference0.branchedFlowThrough(node1, flowScope0);

[MASTER] 18:04:08.350 [logback-2] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 18:04:08.350 [logback-2] WARN  JUnitAnalyzer - Failing test:
 CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Sf)?!");
ImmutableMap<String, CodingConvention.AssertionFunctionSpec> immutableMap0 = ImmutableMap.of("Sf)?!", codingConvention_AssertionFunctionSpec0);
MockFile mockFile0 = new MockFile("Sf)?!");
MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
Compiler compiler0 = new Compiler(printStreamErrorManager0);
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "JSC_WRONG_ARGUMENT_COUNT");
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
Scope scope0 = Scope.createGlobalScope(node0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableMap0);
FlowScope flowScope0 = typeInference0.createEntryLattice();
Node node1 = new Node(36);
typeInference0.branchedFlowThrough(node1, flowScope0);

[MASTER] 18:04:09.403 [logback-2] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 18:04:09.403 [logback-2] WARN  JUnitAnalyzer - Failing test:
 CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Sf)?!");
ImmutableMap<String, CodingConvention.AssertionFunctionSpec> immutableMap0 = ImmutableMap.of("Sf)?!", codingConvention_AssertionFunctionSpec0);
MockFile mockFile0 = new MockFile("Sf)?!");
MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
Compiler compiler0 = new Compiler(printStreamErrorManager0);
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "JSC_WRONG_ARGUMENT_COUNT");
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
Scope scope0 = Scope.createGlobalScope(node0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableMap0);
FlowScope flowScope0 = typeInference0.createEntryLattice();
Node node1 = new Node(37);
typeInference0.branchedFlowThrough(node1, flowScope0);

[MASTER] 18:04:10.462 [logback-2] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 18:04:10.462 [logback-2] WARN  JUnitAnalyzer - Failing test:
 CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("W6f)?!");
ImmutableMap<String, CodingConvention.AssertionFunctionSpec> immutableMap0 = ImmutableMap.of("W6f)?!", codingConvention_AssertionFunctionSpec0);
MockFile mockFile0 = new MockFile("W6f)?!");
MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
Compiler compiler0 = new Compiler(printStreamErrorManager0);
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "JSC_WRONG_ARGUMENT_COUNT");
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
Scope scope0 = Scope.createGlobalScope(node0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableMap0);
FlowScope flowScope0 = typeInference0.createEntryLattice();
Node node1 = new Node(38);
typeInference0.flowThrough(node1, flowScope0);

[MASTER] 18:04:11.444 [logback-2] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 18:04:11.444 [logback-2] WARN  JUnitAnalyzer - Failing test:
 CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Sf)?!");
ImmutableMap<String, CodingConvention.AssertionFunctionSpec> immutableMap0 = ImmutableMap.of("Sf)?!", codingConvention_AssertionFunctionSpec0);
MockFile mockFile0 = new MockFile("Sf)?!");
MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
Compiler compiler0 = new Compiler(printStreamErrorManager0);
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "JSC_WRONG_ARGUMENT_COUNT");
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
Scope scope0 = Scope.createGlobalScope(node0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableMap0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
Node node1 = new Node(39, node0, node0, node0, 57, 932);
typeInference0.branchedFlowThrough(node1, linkedFlowScope0);

[MASTER] 18:04:12.529 [logback-2] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 18:04:12.529 [logback-2] WARN  JUnitAnalyzer - Failing test:
 CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Sf)?!");
ImmutableMap<String, CodingConvention.AssertionFunctionSpec> immutableMap0 = ImmutableMap.of("Sf)?!", codingConvention_AssertionFunctionSpec0);
MockFile mockFile0 = new MockFile("Sf)?!");
MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
Compiler compiler0 = new Compiler(printStreamErrorManager0);
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "JSC_WRONG_ARGUMENT_COUNT");
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
Scope scope0 = Scope.createGlobalScope(node0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, (ReverseAbstractInterpreter) null, scope0, immutableMap0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
Node node1 = Node.newString("");
typeInference0.branchedFlowThrough(node1, linkedFlowScope0);

[MASTER] 18:04:13.525 [logback-2] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 18:04:13.526 [logback-2] WARN  JUnitAnalyzer - Failing test:
 CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Sf)?!");
ImmutableMap<String, CodingConvention.AssertionFunctionSpec> immutableMap0 = ImmutableMap.of("Sf)?!", codingConvention_AssertionFunctionSpec0);
MockFile mockFile0 = new MockFile("Sf)?!");
MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
Compiler compiler0 = new Compiler(printStreamErrorManager0);
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "com.google.javascript.jscomp.TypeInference$1");
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
Scope scope0 = Scope.createGlobalScope(node0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableMap0);
FlowScope flowScope0 = typeInference0.createEntryLattice();
Node node1 = new Node(41);
typeInference0.branchedFlowThrough(node1, flowScope0);

[MASTER] 18:04:14.571 [logback-2] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 18:04:14.571 [logback-2] WARN  JUnitAnalyzer - Failing test:
 CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Sf)?!");
ImmutableMap<String, CodingConvention.AssertionFunctionSpec> immutableMap0 = ImmutableMap.of("Sf)?!", codingConvention_AssertionFunctionSpec0);
MockFile mockFile0 = new MockFile("Sf)?!");
MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
Compiler compiler0 = new Compiler(printStreamErrorManager0);
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "Sf)?!");
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, true);
ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
Node node1 = new Node(15, node0, node0, node0, node0, 48, 2190);
Scope scope0 = Scope.createGlobalScope(node1);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableMap0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
Node node2 = new Node(42);
typeInference0.branchedFlowThrough(node2, linkedFlowScope0);

[MASTER] 18:04:15.627 [logback-2] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 18:04:15.628 [logback-2] WARN  JUnitAnalyzer - Failing test:
 CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Sf)?!");
ImmutableMap<String, CodingConvention.AssertionFunctionSpec> immutableMap0 = ImmutableMap.of("Sf)?!", codingConvention_AssertionFunctionSpec0);
MockFile mockFile0 = new MockFile("Sf)?!");
MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
Compiler compiler0 = new Compiler(printStreamErrorManager0);
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "JSC_WRONG_ARGUMENT_COUNT");
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
Scope scope0 = Scope.createGlobalScope(node0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableMap0);
Node node1 = new Node(43, node0, node0, 53, 4);
FlowScope flowScope0 = typeInference0.createEntryLattice();
typeInference0.branchedFlowThrough(node1, flowScope0);

[MASTER] 18:04:16.600 [logback-2] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 18:04:16.600 [logback-2] WARN  JUnitAnalyzer - Failing test:
 CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Sf)?!");
ImmutableMap<String, CodingConvention.AssertionFunctionSpec> immutableMap0 = ImmutableMap.of("Sf)?!", codingConvention_AssertionFunctionSpec0);
MockFile mockFile0 = new MockFile("Sf)?!");
MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
Compiler compiler0 = new Compiler(printStreamErrorManager0);
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "JSC_WRONG_ARGUMENT_COUNT");
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, true);
ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, (JSTypeRegistry) null);
Scope scope0 = Scope.createGlobalScope(node0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableMap0);
Node node1 = new Node(45, node0, node0, 52, 78);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
typeInference0.branchedFlowThrough(node1, linkedFlowScope0);

[MASTER] 18:04:17.659 [logback-2] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 18:04:17.660 [logback-2] WARN  JUnitAnalyzer - Failing test:
 CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Sf)?!");
ImmutableMap<String, CodingConvention.AssertionFunctionSpec> immutableMap0 = ImmutableMap.of("Sf)?!", codingConvention_AssertionFunctionSpec0);
MockFile mockFile0 = new MockFile("Sf)?!");
MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
Compiler compiler0 = new Compiler(printStreamErrorManager0);
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "JSC_WRONG_ARGUMENT_COUNT");
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, true, false);
GoogleCodingConvention googleCodingConvention0 = new GoogleCodingConvention();
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(googleCodingConvention0, jSTypeRegistry0);
Scope scope0 = Scope.createGlobalScope(node0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableMap0);
FlowScope flowScope0 = typeInference0.createEntryLattice();
Node node1 = new Node(48);
typeInference0.branchedFlowThrough(node1, flowScope0);

[MASTER] 18:04:18.951 [logback-2] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 18:04:18.952 [logback-2] WARN  JUnitAnalyzer - Failing test:
 CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Sf)?!");
ImmutableMap<String, CodingConvention.AssertionFunctionSpec> immutableMap0 = ImmutableMap.of("Sf)?!", codingConvention_AssertionFunctionSpec0);
MockFile mockFile0 = new MockFile("Sf)?!");
MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
Compiler compiler0 = new Compiler(printStreamErrorManager0);
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "JSC_WRONG_ARGUMENT_COUNT");
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
Scope scope0 = Scope.createGlobalScope(node0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableMap0);
FlowScope flowScope0 = typeInference0.createEntryLattice();
Node node1 = new Node(50);
typeInference0.branchedFlowThrough(node1, flowScope0);

[MASTER] 18:04:19.974 [logback-2] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.evosuite.runtime.mock.java.lang.MockIllegalArgumentException: Multiple entries with same key: returns=NOT_IMPLEMENTED and returns=RETURN
[MASTER] 18:04:19.975 [logback-2] WARN  JUnitAnalyzer - Failing test:
 CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("Sf)?!");
ImmutableMap<String, CodingConvention.AssertionFunctionSpec> immutableMap0 = ImmutableMap.of("Sf)?!", codingConvention_AssertionFunctionSpec0);
MockFile mockFile0 = new MockFile("Sf)?!");
MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
PrintStreamErrorManager printStreamErrorManager0 = new PrintStreamErrorManager(mockPrintStream0);
Compiler compiler0 = new Compiler(printStreamErrorManager0);
Node node0 = Normalize.parseAndNormalizeTestCode(compiler0, "JSC_WRONG_ARGUMENT_COUNT");
ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>(node0, false, false);
ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
Scope scope0 = Scope.createGlobalScope(node0);
TypeInference typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, scope0, immutableMap0);
LinkedFlowScope linkedFlowScope0 = LinkedFlowScope.createEntryLattice(scope0);
Node node1 = new Node(51, node0, node0, node0, 4635, 29);
FlowScope flowScope0 = typeInference0.flowThrough(node1, linkedFlowScope0);
assertNotSame(flowScope0, linkedFlowScope0);


* Writing tests to file
* Writing JUnit test case 'TypeInference_ESTest' to results/Closure-112/com.google.javascript.jscomp.TypeInference/BBC-F0-50/tests/5
* Done!

* Computation finished
