/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 22:21:06 GMT 2021
 */

package com.google.javascript.jscomp;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableSortedMap;
import com.google.javascript.jscomp.ClosureCodingConvention;
import com.google.javascript.jscomp.CodingConvention;
import com.google.javascript.jscomp.Compiler;
import com.google.javascript.jscomp.ControlFlowGraph;
import com.google.javascript.jscomp.JsAst;
import com.google.javascript.jscomp.LoggerErrorManager;
import com.google.javascript.jscomp.Scope;
import com.google.javascript.jscomp.SourceFile;
import com.google.javascript.jscomp.TypeInference;
import com.google.javascript.jscomp.type.ClosureReverseAbstractInterpreter;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.jstype.BooleanLiteralSet;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.io.StringReader;
import java.util.logging.Logger;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeInference_ESTest extends TypeInference_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      StringReader stringReader0 = new StringReader("keys");
      SourceFile sourceFile0 = SourceFile.fromReader("keys", stringReader0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      // Undeclared exception!
      try { 
        jsAst0.getAstRoot(compiler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: constructor=NOT_IMPLEMENTED and constructor=CONSTRUCTOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.FALSE;
      // Undeclared exception!
      try { 
        TypeInference.getBooleanOutcomes(booleanLiteralSet0, (BooleanLiteralSet) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.TypeInference", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Logger logger0 = Logger.getAnonymousLogger();
      LoggerErrorManager loggerErrorManager0 = new LoggerErrorManager(logger0);
      Compiler compiler0 = new Compiler(loggerErrorManager0);
      ControlFlowGraph<Node> controlFlowGraph0 = new ControlFlowGraph<Node>((Node) null, false, false);
      ClosureCodingConvention closureCodingConvention0 = new ClosureCodingConvention();
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      ClosureReverseAbstractInterpreter closureReverseAbstractInterpreter0 = new ClosureReverseAbstractInterpreter(closureCodingConvention0, jSTypeRegistry0);
      JSTypeNative jSTypeNative0 = JSTypeNative.REFERENCE_ERROR_FUNCTION_TYPE;
      CodingConvention.AssertionFunctionSpec codingConvention_AssertionFunctionSpec0 = new CodingConvention.AssertionFunctionSpec("", jSTypeNative0);
      ImmutableSortedMap<String, CodingConvention.AssertionFunctionSpec> immutableSortedMap0 = ImmutableSortedMap.of("Object#Key", codingConvention_AssertionFunctionSpec0);
      TypeInference typeInference0 = null;
      try {
        typeInference0 = new TypeInference(compiler0, controlFlowGraph0, closureReverseAbstractInterpreter0, (Scope) null, immutableSortedMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.Compiler", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      StringReader stringReader0 = new StringReader("keDZ");
      SourceFile sourceFile0 = SourceFile.fromReader("M#m&8[]:ShplAZt;", stringReader0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      // Undeclared exception!
      try { 
        jsAst0.getAstRoot(compiler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: constructor=NOT_IMPLEMENTED and constructor=CONSTRUCTOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      StringReader stringReader0 = new StringReader("keDZ");
      SourceFile sourceFile0 = SourceFile.fromReader("-{,fHh", stringReader0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      // Undeclared exception!
      try { 
        jsAst0.getAstRoot(compiler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: constructor=NOT_IMPLEMENTED and constructor=CONSTRUCTOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BooleanLiteralSet booleanLiteralSet0 = BooleanLiteralSet.EMPTY;
      BooleanLiteralSet booleanLiteralSet1 = TypeInference.getBooleanOutcomes(booleanLiteralSet0, booleanLiteralSet0, false);
      BooleanLiteralSet booleanLiteralSet2 = TypeInference.getBooleanOutcomes(booleanLiteralSet1, booleanLiteralSet1, true);
      assertEquals(BooleanLiteralSet.EMPTY, booleanLiteralSet2);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      StringReader stringReader0 = new StringReader("keDZ");
      SourceFile sourceFile0 = SourceFile.fromReader("Y{V)f{:N`z)jVaiKV", stringReader0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      // Undeclared exception!
      try { 
        jsAst0.getAstRoot(compiler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: constructor=NOT_IMPLEMENTED and constructor=CONSTRUCTOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      StringReader stringReader0 = new StringReader("keDZ");
      SourceFile sourceFile0 = SourceFile.fromReader("keDZ", stringReader0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      // Undeclared exception!
      try { 
        jsAst0.getAstRoot(compiler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: constructor=NOT_IMPLEMENTED and constructor=CONSTRUCTOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      StringReader stringReader0 = new StringReader("ke<w");
      SourceFile sourceFile0 = SourceFile.fromReader("ke<w", stringReader0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      // Undeclared exception!
      try { 
        jsAst0.getAstRoot(compiler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: constructor=NOT_IMPLEMENTED and constructor=CONSTRUCTOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      StringReader stringReader0 = new StringReader("keys");
      SourceFile.fromReader("keys", stringReader0);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("dPT");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      StringReader stringReader0 = new StringReader("keDZ");
      SourceFile sourceFile0 = SourceFile.fromReader("M#m8[]:hplAZY;", stringReader0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      // Undeclared exception!
      try { 
        jsAst0.getAstRoot(compiler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: constructor=NOT_IMPLEMENTED and constructor=CONSTRUCTOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      StringReader stringReader0 = new StringReader("closureReplaceGetCssName");
      SourceFile sourceFile0 = SourceFile.fromReader("closureReplaceGetCssName", stringReader0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      // Undeclared exception!
      try { 
        jsAst0.getAstRoot(compiler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: constructor=NOT_IMPLEMENTED and constructor=CONSTRUCTOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      StringReader stringReader0 = new StringReader("keos");
      SourceFile sourceFile0 = SourceFile.fromReader("keos", stringReader0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      // Undeclared exception!
      try { 
        jsAst0.getAstRoot(compiler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: constructor=NOT_IMPLEMENTED and constructor=CONSTRUCTOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      StringReader stringReader0 = new StringReader("keys");
      SourceFile.fromReader("keys", stringReader0);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("keys");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      StringReader stringReader0 = new StringReader("keys");
      SourceFile.fromReader("keys", stringReader0);
      // Undeclared exception!
      try { 
        compiler0.parseTestCode("keys");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: author=NOT_IMPLEMENTED and author=AUTHOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      StringReader stringReader0 = new StringReader("keys");
      SourceFile sourceFile0 = SourceFile.fromReader("uw%/#$T7|uQe", stringReader0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      // Undeclared exception!
      try { 
        jsAst0.getAstRoot(compiler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: constructor=NOT_IMPLEMENTED and constructor=CONSTRUCTOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      StringReader stringReader0 = new StringReader("kys");
      SourceFile sourceFile0 = SourceFile.fromReader("kys", stringReader0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      // Undeclared exception!
      try { 
        jsAst0.getAstRoot(compiler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: constructor=NOT_IMPLEMENTED and constructor=CONSTRUCTOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Compiler compiler0 = new Compiler();
      StringReader stringReader0 = new StringReader("keUs");
      SourceFile sourceFile0 = SourceFile.fromReader("keUs", stringReader0);
      JsAst jsAst0 = new JsAst(sourceFile0);
      // Undeclared exception!
      try { 
        jsAst0.getAstRoot(compiler0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Multiple entries with same key: constructor=NOT_IMPLEMENTED and constructor=CONSTRUCTOR
         //
         verifyException("com.google.common.collect.ImmutableMap", e);
      }
  }
}
